
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c0 74 00 20 bd 38 01 00 cd 9a 02 00 75 38 01 00     .t. .8......u8..
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
  10:	75 38 01 00 75 38 01 00 75 38 01 00 00 00 00 00     u8..u8..u8......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	01 32 01 00 75 38 01 00 00 00 00 00 a9 31 01 00     .2..u8.......1..
	unsigned int s_ro_cnt = 0; /* number of ro strings */
  3c:	75 38 01 00                                         u8..

00000040 <_irq_vector_table>:
	unsigned int s_rw_cnt = 0; /* number of rw strings */
  40:	d9 32 01 00 5b e9 02 00 d9 32 01 00 d9 32 01 00     .2..[....2...2..

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  50:	d9 32 01 00 d9 32 01 00 d9 32 01 00 d9 32 01 00     .2...2...2...2..
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
  60:	23 e9 02 00 d9 32 01 00 d9 32 01 00 41 e9 02 00     #....2...2..A...
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
  70:	d9 32 01 00 d9 32 01 00 d9 32 01 00 d9 32 01 00     .2...2...2...2..
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
  80:	d9 32 01 00 d9 32 01 00 d9 32 01 00 d9 32 01 00     .2...2...2...2..
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  90:	d9 32 01 00 d9 32 01 00 d9 32 01 00 d9 32 01 00     .2...2...2...2..
					str_ptr_arg[s_idx] = arg_idx;
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
  a0:	d9 32 01 00 d9 32 01 00 d9 32 01 00 d9 32 01 00     .2...2...2...2..
						s_ro_cnt++;
  b0:	d9 32 01 00 d9 32 01 00 d9 32 01 00 d9 32 01 00     .2...2...2...2..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  c0:	d9 32 01 00 d9 32 01 00 d9 32 01 00 d9 32 01 00     .2...2...2...2..
				parsing = false;
  d0:	d9 32 01 00 d9 32 01 00 d9 32 01 00 d9 32 01 00     .2...2...2...2..
				if (*fmt == '%') {
  e0:	d9 32 01 00 d9 32 01 00 d9 32 01 00 d9 32 01 00     .2...2...2...2..
			switch (*fmt) {
  f0:	d9 32 01 00 d9 32 01 00 d9 32 01 00 d9 32 01 00     .2...2...2...2..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
				parsing = false;
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
			switch (*fmt) {
     120:	f00b fc98 	bl	ba54 <__udivmoddi4>
				arg_idx--;
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
				continue;
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				parsing = false;
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
			switch (*fmt) {
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
				parsing = false;
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
			if (*++fmt == '\0') {
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
			if (!parsing) {
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
			switch (*fmt) {
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
				parsing = false;
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
				align = VA_STACK_ALIGN(size_t);
     21e:	4017      	ands	r7, r2
				size = sizeof(size_t);
     220:	1bdb      	subs	r3, r3, r7
				continue;
     222:	ea18 0802 	ands.w	r8, r8, r2
				align = VA_STACK_ALIGN(ptrdiff_t);
     226:	eb74 0408 	sbcs.w	r4, r4, r8
				continue;
     22a:	ea19 0902 	ands.w	r9, r9, r2
				if (fmt[-1] == 'l') {
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
				parsing = false;
     232:	ea1a 0a02 	ands.w	sl, sl, r2
		buf = (void *) ROUND_UP(buf, align);
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
		if (is_str_arg) {
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
			long long v = va_arg(ap, long long);
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2

			if (buf0 != NULL) {
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
				}
			}
			buf += sizeof(long long);
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
					if (fmt[-2] == 'l') {
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
				parsing = false;
     284:	18f6      	adds	r6, r6, r3
						align = VA_STACK_ALIGN(long);
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
						size = sizeof(long);
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
				parsing = false;
     28e:	c030      	stmia	r0!, {r4, r5}
						align = VA_STACK_ALIGN(long long);
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
						size = sizeof(long long);
     296:	d1ee      	bne.n	276 <cswap256_loop>
				if (fmt[-1] == 'L') {
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
					v.d = va_arg(ap, double);
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
				buf = (void *) ROUND_UP(buf, align);
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
				if (buf0 != NULL) {
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
					if (BUF_OFFSET + size > len) {
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
					} else if (fmt[-1] == 'L') {
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
						*(double *)buf = v.d;
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
				parsing = false;
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
				continue;
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
					v.ld = va_arg(ap, long double);
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
					size = sizeof(long double);
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
						return -ENOSPC;
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
						*(long double *)buf = v.ld;
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
				align = VA_STACK_ALIGN(void *);
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
				size = sizeof(void *);
     2fe:	9c05      	ldr	r4, [sp, #20]
				is_str_arg = true;
     300:	fbee 5062 	umaal	r5, r0, lr, r2
				align = VA_STACK_ALIGN(void *);
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
				size = sizeof(void *);
     308:	fbea b064 	umaal	fp, r0, sl, r4
			s = va_arg(ap, char *);
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
			if (*++fmt == '\0') {
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
     322:	930e      	str	r3, [sp, #56]	; 0x38
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
     336:	fbea 1264 	umaal	r1, r2, sl, r4
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
					__ASSERT(false, "String with too many arguments");
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
					__ASSERT(false, "str_ptr_pos[] too small");
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
						s_rw_cnt++;
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
					len += 1;
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
				} else if (rws_pos_en) {
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
					len += 2;
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
					len += strlen(s) + 1 + 1;
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
			int v = va_arg(ap, int);
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
			if (buf0 != NULL) {
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
				*(int *)buf = v;
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
			buf += sizeof(int);
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
		} else {
			__ASSERT(false, "unexpected size %u", size);
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
	if (buf0 == NULL) {
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     3ce:	fbec b768 	umaal	fp, r7, ip, r8

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8

	if (rws_pos_en) {
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
		__ASSERT(false, "too many format args");
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
		pkg_hdr->desc.rw_str_cnt = 0;
     418:	b500      	push	{lr}
		for (i = 0; i < s_idx; i++) {
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     432:	fba3 5207 	umull	r5, r2, r3, r7
			if (BUF_OFFSET + 1 > len) {
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
			*buf++ = pos;
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
		for (i = 0; i < s_idx; i++) {
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
		if (rws_pos_en) {
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
			*buf++ = str_ptr_arg[i];
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
			size = 0;
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
	for (i = 0; i < s_idx; i++) {
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
			size = strlen(s) + 1;
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
		return -EFAULT;
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
		return -ENOSPC;
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
			return -ENOSPC;
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
				return -ENOSPC;
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
			return -ENOSPC;
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ee:	ebb8 0804 	subs.w	r8, r8, r4
     6f2:	eb79 0904 	sbcs.w	r9, r9, r4
     6f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6fa:	f17b 0b00 	sbcs.w	fp, fp, #0
     6fe:	f170 0000 	sbcs.w	r0, r0, #0
     702:	f171 0100 	sbcs.w	r1, r1, #0
     706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     70a:	41a3      	sbcs	r3, r4
     70c:	f16c 0c00 	sbc.w	ip, ip, #0
     710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     71c:	f15b 0b00 	adcs.w	fp, fp, #0
     720:	f150 0400 	adcs.w	r4, r0, #0
     724:	f151 0500 	adcs.w	r5, r1, #0
     728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     72c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     730:	f14c 0c00 	adc.w	ip, ip, #0
     734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     73c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     740:	f15b 0300 	adcs.w	r3, fp, #0
     744:	f154 0400 	adcs.w	r4, r4, #0
     748:	f155 0500 	adcs.w	r5, r5, #0
     74c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <ocrypto_mod_p256_mul>:
     758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     75c:	b087      	sub	sp, #28
     75e:	f7ff fd9f 	bl	2a0 <ocrypto_mul256_noframe>
     762:	f8dd 8010 	ldr.w	r8, [sp, #16]
     766:	f8dd 9014 	ldr.w	r9, [sp, #20]
     76a:	f8dd a018 	ldr.w	sl, [sp, #24]
     76e:	f7ff ff87 	bl	680 <mul_reduce>
     772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     776:	f7ff ff83 	bl	680 <mul_reduce>
     77a:	b003      	add	sp, #12
     77c:	f85d 8b04 	ldr.w	r8, [sp], #4
     780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000788 <ocrypto_mod_p256_sqr>:
     788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78c:	b087      	sub	sp, #28
     78e:	f7ff fe43 	bl	418 <ocrypto_sqr256_noframe>
     792:	f8dd 8010 	ldr.w	r8, [sp, #16]
     796:	f8dd 9014 	ldr.w	r9, [sp, #20]
     79a:	f8dd a018 	ldr.w	sl, [sp, #24]
     79e:	f7ff ff6f 	bl	680 <mul_reduce>
     7a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     7a6:	f7ff ff6b 	bl	680 <mul_reduce>
     7aa:	b003      	add	sp, #12
     7ac:	f85d 8b04 	ldr.w	r8, [sp], #4
     7b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000007b8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     7b8:	4801      	ldr	r0, [pc, #4]	; (7c0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     7ba:	7800      	ldrb	r0, [r0, #0]
     7bc:	4770      	bx	lr
     7be:	0000      	.short	0x0000
     7c0:	20000028 	.word	0x20000028

000007c4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     7c4:	b570      	push	{r4, r5, r6, lr}
     7c6:	4c17      	ldr	r4, [pc, #92]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     7c8:	7860      	ldrb	r0, [r4, #1]
     7ca:	2800      	cmp	r0, #0
     7cc:	d123      	bne.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     7ce:	2001      	movs	r0, #1
     7d0:	7060      	strb	r0, [r4, #1]
     7d2:	f00b fe18 	bl	c406 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     7d6:	f06f 0527 	mvn.w	r5, #39	; 0x27
     7da:	b928      	cbnz	r0, 7e8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     7dc:	f00b fe49 	bl	c472 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     7e0:	b910      	cbnz	r0, 7e8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     7e2:	f00b fe50 	bl	c486 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     7e6:	b120      	cbz	r0, 7f2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
     7e8:	480f      	ldr	r0, [pc, #60]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     7ea:	6060      	str	r0, [r4, #4]
     7ec:	70a5      	strb	r5, [r4, #2]
     7ee:	2008      	movs	r0, #8
     7f0:	e010      	b.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     7f2:	f00b fddd 	bl	c3b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     7f6:	b940      	cbnz	r0, 80a <CONFIG_ISR_STACK_SIZE+0xa>
     7f8:	f00b fde4 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     7fc:	b928      	cbnz	r0, 80a <CONFIG_ISR_STACK_SIZE+0xa>
     7fe:	f00b fdf8 	bl	c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     802:	b910      	cbnz	r0, 80a <CONFIG_ISR_STACK_SIZE+0xa>
     804:	f00b fe09 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     808:	b130      	cbz	r0, 818 <CONFIG_ISR_STACK_SIZE+0x18>
     80a:	4807      	ldr	r0, [pc, #28]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     80c:	3031      	adds	r0, #49	; 0x31
     80e:	6060      	str	r0, [r4, #4]
     810:	70a5      	strb	r5, [r4, #2]
     812:	2004      	movs	r0, #4
     814:	70e0      	strb	r0, [r4, #3]
     816:	bd70      	pop	{r4, r5, r6, pc}
     818:	f44f 718f 	mov.w	r1, #286	; 0x11e
     81c:	2074      	movs	r0, #116	; 0x74
     81e:	f003 fbc7 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     822:	0000      	.short	0x0000
     824:	20000028 	.word	0x20000028
     828:	00010734 	.word	0x00010734

0000082c <mpsl_tx_power_radio_supported_power_adjust>:
     82c:	4908      	ldr	r1, [pc, #32]	; (850 <__z_interrupt_stack_SIZEOF+0x10>)
     82e:	f991 2003 	ldrsb.w	r2, [r1, #3]
     832:	4290      	cmp	r0, r2
     834:	da03      	bge.n	83e <mpsl_tx_power_radio_supported_power_adjust+0x12>
     836:	f991 2002 	ldrsb.w	r2, [r1, #2]
     83a:	4290      	cmp	r0, r2
     83c:	dc01      	bgt.n	842 <__z_interrupt_stack_SIZEOF+0x2>
     83e:	4610      	mov	r0, r2
     840:	4770      	bx	lr
     842:	6849      	ldr	r1, [r1, #4]
     844:	1a80      	subs	r0, r0, r2
     846:	5c08      	ldrb	r0, [r1, r0]
     848:	4902      	ldr	r1, [pc, #8]	; (854 <__z_interrupt_stack_SIZEOF+0x14>)
     84a:	5608      	ldrsb	r0, [r1, r0]
     84c:	4770      	bx	lr
     84e:	0000      	.short	0x0000
     850:	20000028 	.word	0x20000028
     854:	00010726 	.word	0x00010726

00000858 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     85c:	461c      	mov	r4, r3
     85e:	4690      	mov	r8, r2
     860:	460d      	mov	r5, r1
     862:	4606      	mov	r6, r0
     864:	f06f 0715 	mvn.w	r7, #21
     868:	2804      	cmp	r0, #4
     86a:	d804      	bhi.n	876 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     86c:	b11c      	cbz	r4, 876 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     86e:	f00b fa41 	bl	bcf4 <__udivmoddi4+0x2a0>
     872:	42a8      	cmp	r0, r5
     874:	d802      	bhi.n	87c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     876:	4638      	mov	r0, r7
     878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     87c:	4805      	ldr	r0, [pc, #20]	; (894 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     87e:	4642      	mov	r2, r8
     880:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     884:	b118      	cbz	r0, 88e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     886:	5740      	ldrsb	r0, [r0, r5]
     888:	4282      	cmp	r2, r0
     88a:	dd00      	ble.n	88e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     88c:	4602      	mov	r2, r0
     88e:	7022      	strb	r2, [r4, #0]
     890:	2000      	movs	r0, #0
     892:	e7f1      	b.n	878 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     894:	20000d50 	.word	0x20000d50
     898:	2800      	cmp	r0, #0
     89a:	d019      	beq.n	8d0 <CONFIG_BT_RX_STACK_SIZE+0x38>
     89c:	7803      	ldrb	r3, [r0, #0]
     89e:	4913      	ldr	r1, [pc, #76]	; (8ec <CONFIG_BT_RX_STACK_SIZE+0x54>)
     8a0:	4a13      	ldr	r2, [pc, #76]	; (8f0 <CONFIG_BT_RX_STACK_SIZE+0x58>)
     8a2:	b113      	cbz	r3, 8aa <CONFIG_BT_RX_STACK_SIZE+0x12>
     8a4:	2b01      	cmp	r3, #1
     8a6:	d00e      	beq.n	8c6 <CONFIG_BT_RX_STACK_SIZE+0x2e>
     8a8:	e011      	b.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8aa:	7903      	ldrb	r3, [r0, #4]
     8ac:	2b01      	cmp	r3, #1
     8ae:	d000      	beq.n	8b2 <CONFIG_BT_RX_STACK_SIZE+0x1a>
     8b0:	b96b      	cbnz	r3, 8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8b2:	7943      	ldrb	r3, [r0, #5]
     8b4:	b10b      	cbz	r3, 8ba <CONFIG_BT_RX_STACK_SIZE+0x22>
     8b6:	2b01      	cmp	r3, #1
     8b8:	d109      	bne.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8ba:	6883      	ldr	r3, [r0, #8]
     8bc:	3b64      	subs	r3, #100	; 0x64
     8be:	428b      	cmp	r3, r1
     8c0:	d205      	bcs.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8c2:	68c0      	ldr	r0, [r0, #12]
     8c4:	e00e      	b.n	8e4 <CONFIG_BT_RX_STACK_SIZE+0x4c>
     8c6:	7903      	ldrb	r3, [r0, #4]
     8c8:	2b01      	cmp	r3, #1
     8ca:	d002      	beq.n	8d2 <CONFIG_BT_RX_STACK_SIZE+0x3a>
     8cc:	b10b      	cbz	r3, 8d2 <CONFIG_BT_RX_STACK_SIZE+0x3a>
     8ce:	2000      	movs	r0, #0
     8d0:	4770      	bx	lr
     8d2:	7943      	ldrb	r3, [r0, #5]
     8d4:	b10b      	cbz	r3, 8da <CONFIG_BT_RX_STACK_SIZE+0x42>
     8d6:	2b01      	cmp	r3, #1
     8d8:	d1f9      	bne.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8da:	68c3      	ldr	r3, [r0, #12]
     8dc:	3b64      	subs	r3, #100	; 0x64
     8de:	428b      	cmp	r3, r1
     8e0:	d2f5      	bcs.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8e2:	6880      	ldr	r0, [r0, #8]
     8e4:	4290      	cmp	r0, r2
     8e6:	d8f2      	bhi.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8e8:	2001      	movs	r0, #1
     8ea:	4770      	bx	lr
     8ec:	0001863d 	.word	0x0001863d
     8f0:	0f423fff 	.word	0x0f423fff
     8f4:	b510      	push	{r4, lr}
     8f6:	4c05      	ldr	r4, [pc, #20]	; (90c <CONFIG_BT_RX_STACK_SIZE+0x74>)
     8f8:	6820      	ldr	r0, [r4, #0]
     8fa:	b110      	cbz	r0, 902 <CONFIG_BT_RX_STACK_SIZE+0x6a>
     8fc:	4780      	blx	r0
     8fe:	2000      	movs	r0, #0
     900:	6020      	str	r0, [r4, #0]
     902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     906:	f002 b863 	b.w	29d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     90a:	0000      	.short	0x0000
     90c:	20000030 	.word	0x20000030

00000910 <mpsl_timeslot_session_open>:
     910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     914:	460e      	mov	r6, r1
     916:	0005      	movs	r5, r0
     918:	d004      	beq.n	924 <mpsl_timeslot_session_open+0x14>
     91a:	f000 f847 	bl	9ac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     91e:	4607      	mov	r7, r0
     920:	2400      	movs	r4, #0
     922:	e00b      	b.n	93c <mpsl_timeslot_session_open+0x2c>
     924:	f06f 0015 	mvn.w	r0, #21
     928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     92c:	4620      	mov	r0, r4
     92e:	f000 f843 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     932:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
     936:	b130      	cbz	r0, 946 <mpsl_timeslot_session_open+0x36>
     938:	1c64      	adds	r4, r4, #1
     93a:	b2e4      	uxtb	r4, r4
     93c:	42bc      	cmp	r4, r7
     93e:	d3f5      	bcc.n	92c <mpsl_timeslot_session_open+0x1c>
     940:	f06f 000b 	mvn.w	r0, #11
     944:	e7f0      	b.n	928 <mpsl_timeslot_session_open+0x18>
     946:	4627      	mov	r7, r4
     948:	2cff      	cmp	r4, #255	; 0xff
     94a:	d0f9      	beq.n	940 <mpsl_timeslot_session_open+0x30>
     94c:	4620      	mov	r0, r4
     94e:	f000 f833 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     952:	4604      	mov	r4, r0
     954:	f00b fb9a 	bl	c08c <__udivmoddi4+0x638>
     958:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
     95c:	4621      	mov	r1, r4
     95e:	4808      	ldr	r0, [pc, #32]	; (980 <__data_size+0x21>)
     960:	f002 f80e 	bl	2980 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     964:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
     968:	2820      	cmp	r0, #32
     96a:	d006      	beq.n	97a <__data_size+0x1b>
     96c:	2001      	movs	r0, #1
     96e:	6225      	str	r5, [r4, #32]
     970:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
     974:	7037      	strb	r7, [r6, #0]
     976:	2000      	movs	r0, #0
     978:	e7d6      	b.n	928 <mpsl_timeslot_session_open+0x18>
     97a:	f06f 0022 	mvn.w	r0, #34	; 0x22
     97e:	e7d3      	b.n	928 <mpsl_timeslot_session_open+0x18>
     980:	0000bdb7 	.word	0x0000bdb7

00000984 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     984:	b510      	push	{r4, lr}
     986:	0782      	lsls	r2, r0, #30
     988:	d002      	beq.n	990 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     98a:	f06f 000d 	mvn.w	r0, #13
     98e:	bd10      	pop	{r4, pc}
     990:	4a05      	ldr	r2, [pc, #20]	; (9a8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     992:	7011      	strb	r1, [r2, #0]
     994:	6050      	str	r0, [r2, #4]
     996:	b128      	cbz	r0, 9a4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     998:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     99c:	010a      	lsls	r2, r1, #4
     99e:	2100      	movs	r1, #0
     9a0:	f00b fdf5 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     9a4:	2000      	movs	r0, #0
     9a6:	bd10      	pop	{r4, pc}
     9a8:	20000034 	.word	0x20000034

000009ac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     9ac:	4801      	ldr	r0, [pc, #4]	; (9b4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     9ae:	7800      	ldrb	r0, [r0, #0]
     9b0:	4770      	bx	lr
     9b2:	0000      	.short	0x0000
     9b4:	20000034 	.word	0x20000034

000009b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     9b8:	4905      	ldr	r1, [pc, #20]	; (9d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     9ba:	780a      	ldrb	r2, [r1, #0]
     9bc:	4290      	cmp	r0, r2
     9be:	d301      	bcc.n	9c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     9c0:	2000      	movs	r0, #0
     9c2:	4770      	bx	lr
     9c4:	6849      	ldr	r1, [r1, #4]
     9c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     9ca:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     9ce:	4770      	bx	lr
     9d0:	20000034 	.word	0x20000034

000009d4 <MPSL_IRQ_RADIO_Handler>:
     9d4:	490e      	ldr	r1, [pc, #56]	; (a10 <MPSL_IRQ_RADIO_Handler+0x3c>)
     9d6:	b510      	push	{r4, lr}
     9d8:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     9dc:	2820      	cmp	r0, #32
     9de:	d012      	beq.n	a06 <MPSL_IRQ_RADIO_Handler+0x32>
     9e0:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     9e4:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     9e8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     9ec:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     9f0:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     9f4:	6840      	ldr	r0, [r0, #4]
     9f6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     9fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     a02:	2104      	movs	r1, #4
     a04:	4710      	bx	r2
     a06:	f640 01bc 	movw	r1, #2236	; 0x8bc
     a0a:	2070      	movs	r0, #112	; 0x70
     a0c:	f003 fad0 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a10:	20001164 	.word	0x20001164
     a14:	b570      	push	{r4, r5, r6, lr}
     a16:	4605      	mov	r5, r0
     a18:	2a20      	cmp	r2, #32
     a1a:	d028      	beq.n	a6e <MPSL_IRQ_RADIO_Handler+0x9a>
     a1c:	4819      	ldr	r0, [pc, #100]	; (a84 <MPSL_IRQ_RADIO_Handler+0xb0>)
     a1e:	4c1a      	ldr	r4, [pc, #104]	; (a88 <MPSL_IRQ_RADIO_Handler+0xb4>)
     a20:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     a24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     a28:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     a2c:	4423      	add	r3, r4
     a2e:	2920      	cmp	r1, #32
     a30:	d022      	beq.n	a78 <MPSL_IRQ_RADIO_Handler+0xa4>
     a32:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     a36:	7840      	ldrb	r0, [r0, #1]
     a38:	784c      	ldrb	r4, [r1, #1]
     a3a:	7048      	strb	r0, [r1, #1]
     a3c:	4620      	mov	r0, r4
     a3e:	4601      	mov	r1, r0
     a40:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     a44:	4291      	cmp	r1, r2
     a46:	7005      	strb	r5, [r0, #0]
     a48:	7840      	ldrb	r0, [r0, #1]
     a4a:	d1f8      	bne.n	a3e <MPSL_IRQ_RADIO_Handler+0x6a>
     a4c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     a50:	2a20      	cmp	r2, #32
     a52:	bf1a      	itte	ne
     a54:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     a58:	7054      	strbne	r4, [r2, #1]
     a5a:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     a5e:	2220      	movs	r2, #32
     a60:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     a64:	f88c 2001 	strb.w	r2, [ip, #1]
     a68:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     a6c:	bd70      	pop	{r4, r5, r6, pc}
     a6e:	f44f 7126 	mov.w	r1, #664	; 0x298
     a72:	2070      	movs	r0, #112	; 0x70
     a74:	f003 fa9c 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a78:	f893 4020 	ldrb.w	r4, [r3, #32]
     a7c:	7840      	ldrb	r0, [r0, #1]
     a7e:	f883 0020 	strb.w	r0, [r3, #32]
     a82:	e7db      	b.n	a3c <MPSL_IRQ_RADIO_Handler+0x68>
     a84:	200010e4 	.word	0x200010e4
     a88:	20001164 	.word	0x20001164
     a8c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a90:	b08d      	sub	sp, #52	; 0x34
     a92:	4615      	mov	r5, r2
     a94:	460c      	mov	r4, r1
     a96:	f002 f9e7 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     a9a:	4428      	add	r0, r5
     a9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     aa0:	9008      	str	r0, [sp, #32]
     aa2:	6821      	ldr	r1, [r4, #0]
     aa4:	1a08      	subs	r0, r1, r0
     aa6:	0200      	lsls	r0, r0, #8
     aa8:	17c1      	asrs	r1, r0, #31
     aaa:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     aae:	1200      	asrs	r0, r0, #8
     ab0:	2800      	cmp	r0, #0
     ab2:	f300 80f0 	bgt.w	c96 <MPSL_IRQ_RADIO_Handler+0x2c2>
     ab6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
     aba:	48cd      	ldr	r0, [pc, #820]	; (df0 <MPSL_IRQ_RADIO_Handler+0x41c>)
     abc:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     ac0:	4408      	add	r0, r1
     ac2:	9009      	str	r0, [sp, #36]	; 0x24
     ac4:	f890 5020 	ldrb.w	r5, [r0, #32]
     ac8:	2020      	movs	r0, #32
     aca:	4eca      	ldr	r6, [pc, #808]	; (df4 <MPSL_IRQ_RADIO_Handler+0x420>)
     acc:	f10d 0a18 	add.w	sl, sp, #24
     ad0:	f10d 091c 	add.w	r9, sp, #28
     ad4:	f88d 0018 	strb.w	r0, [sp, #24]
     ad8:	2d20      	cmp	r5, #32
     ada:	bf1c      	itt	ne
     adc:	48c6      	ldrne	r0, [pc, #792]	; (df8 <MPSL_IRQ_RADIO_Handler+0x424>)
     ade:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     ae2:	d038      	beq.n	b56 <MPSL_IRQ_RADIO_Handler+0x182>
     ae4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     ae8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     aec:	f100 0108 	add.w	r1, r0, #8
     af0:	68c0      	ldr	r0, [r0, #12]
     af2:	6827      	ldr	r7, [r4, #0]
     af4:	1a38      	subs	r0, r7, r0
     af6:	0200      	lsls	r0, r0, #8
     af8:	17c2      	asrs	r2, r0, #31
     afa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     afe:	1200      	asrs	r0, r0, #8
     b00:	d429      	bmi.n	b56 <MPSL_IRQ_RADIO_Handler+0x182>
     b02:	89e0      	ldrh	r0, [r4, #14]
     b04:	b300      	cbz	r0, b48 <MPSL_IRQ_RADIO_Handler+0x174>
     b06:	89c8      	ldrh	r0, [r1, #14]
     b08:	b9f0      	cbnz	r0, b48 <MPSL_IRQ_RADIO_Handler+0x174>
     b0a:	6808      	ldr	r0, [r1, #0]
     b0c:	9003      	str	r0, [sp, #12]
     b0e:	f003 f8a5 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     b12:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     b16:	bf08      	it	eq
     b18:	200d      	moveq	r0, #13
     b1a:	d00b      	beq.n	b34 <MPSL_IRQ_RADIO_Handler+0x160>
     b1c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     b20:	3856      	subs	r0, #86	; 0x56
     b22:	bf08      	it	eq
     b24:	201c      	moveq	r0, #28
     b26:	d005      	beq.n	b34 <MPSL_IRQ_RADIO_Handler+0x160>
     b28:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     b2c:	389f      	subs	r0, #159	; 0x9f
     b2e:	bf14      	ite	ne
     b30:	2000      	movne	r0, #0
     b32:	2032      	moveq	r0, #50	; 0x32
     b34:	1c41      	adds	r1, r0, #1
     b36:	9803      	ldr	r0, [sp, #12]
     b38:	1a38      	subs	r0, r7, r0
     b3a:	0200      	lsls	r0, r0, #8
     b3c:	17c2      	asrs	r2, r0, #31
     b3e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     b42:	1200      	asrs	r0, r0, #8
     b44:	4288      	cmp	r0, r1
     b46:	db06      	blt.n	b56 <MPSL_IRQ_RADIO_Handler+0x182>
     b48:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     b4c:	f88a 5000 	strb.w	r5, [sl]
     b50:	7845      	ldrb	r5, [r0, #1]
     b52:	2d20      	cmp	r5, #32
     b54:	d1c6      	bne.n	ae4 <MPSL_IRQ_RADIO_Handler+0x110>
     b56:	f89a 0000 	ldrb.w	r0, [sl]
     b5a:	f889 0000 	strb.w	r0, [r9]
     b5e:	2d20      	cmp	r5, #32
     b60:	bf1c      	itt	ne
     b62:	48a5      	ldrne	r0, [pc, #660]	; (df8 <MPSL_IRQ_RADIO_Handler+0x424>)
     b64:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     b68:	f000 813e 	beq.w	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     b6c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     b70:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     b74:	6861      	ldr	r1, [r4, #4]
     b76:	f8d7 8008 	ldr.w	r8, [r7, #8]
     b7a:	f107 0008 	add.w	r0, r7, #8
     b7e:	eba8 0101 	sub.w	r1, r8, r1
     b82:	0209      	lsls	r1, r1, #8
     b84:	17ca      	asrs	r2, r1, #31
     b86:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b8a:	1209      	asrs	r1, r1, #8
     b8c:	d427      	bmi.n	bde <MPSL_IRQ_RADIO_Handler+0x20a>
     b8e:	89c0      	ldrh	r0, [r0, #14]
     b90:	2800      	cmp	r0, #0
     b92:	f000 8129 	beq.w	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     b96:	89e0      	ldrh	r0, [r4, #14]
     b98:	2800      	cmp	r0, #0
     b9a:	f040 8125 	bne.w	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     b9e:	f8d4 a000 	ldr.w	sl, [r4]
     ba2:	f003 f85b 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     ba6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     baa:	bf08      	it	eq
     bac:	200d      	moveq	r0, #13
     bae:	d00b      	beq.n	bc8 <MPSL_IRQ_RADIO_Handler+0x1f4>
     bb0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     bb4:	3856      	subs	r0, #86	; 0x56
     bb6:	bf08      	it	eq
     bb8:	201c      	moveq	r0, #28
     bba:	d005      	beq.n	bc8 <MPSL_IRQ_RADIO_Handler+0x1f4>
     bbc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     bc0:	389f      	subs	r0, #159	; 0x9f
     bc2:	bf14      	ite	ne
     bc4:	2000      	movne	r0, #0
     bc6:	2032      	moveq	r0, #50	; 0x32
     bc8:	1c41      	adds	r1, r0, #1
     bca:	eba8 000a 	sub.w	r0, r8, sl
     bce:	0200      	lsls	r0, r0, #8
     bd0:	17c2      	asrs	r2, r0, #31
     bd2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     bd6:	1200      	asrs	r0, r0, #8
     bd8:	4288      	cmp	r0, r1
     bda:	f280 8105 	bge.w	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     bde:	f889 5000 	strb.w	r5, [r9]
     be2:	7e38      	ldrb	r0, [r7, #24]
     be4:	7c21      	ldrb	r1, [r4, #16]
     be6:	4288      	cmp	r0, r1
     be8:	d906      	bls.n	bf8 <MPSL_IRQ_RADIO_Handler+0x224>
     bea:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     bee:	7845      	ldrb	r5, [r0, #1]
     bf0:	2d20      	cmp	r5, #32
     bf2:	d1bb      	bne.n	b6c <MPSL_IRQ_RADIO_Handler+0x198>
     bf4:	f000 b8f8 	b.w	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     bf8:	f89d 001c 	ldrb.w	r0, [sp, #28]
     bfc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     c00:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     c04:	8ac1      	ldrh	r1, [r0, #22]
     c06:	68c5      	ldr	r5, [r0, #12]
     c08:	bbe1      	cbnz	r1, c84 <MPSL_IRQ_RADIO_Handler+0x2b0>
     c0a:	89e1      	ldrh	r1, [r4, #14]
     c0c:	b3d1      	cbz	r1, c84 <MPSL_IRQ_RADIO_Handler+0x2b0>
     c0e:	6887      	ldr	r7, [r0, #8]
     c10:	f003 f824 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     c14:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     c18:	bf08      	it	eq
     c1a:	200d      	moveq	r0, #13
     c1c:	d00b      	beq.n	c36 <MPSL_IRQ_RADIO_Handler+0x262>
     c1e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     c22:	3856      	subs	r0, #86	; 0x56
     c24:	bf08      	it	eq
     c26:	201c      	moveq	r0, #28
     c28:	d005      	beq.n	c36 <MPSL_IRQ_RADIO_Handler+0x262>
     c2a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     c2e:	389f      	subs	r0, #159	; 0x9f
     c30:	bf14      	ite	ne
     c32:	2000      	movne	r0, #0
     c34:	2032      	moveq	r0, #50	; 0x32
     c36:	1c41      	adds	r1, r0, #1
     c38:	1be8      	subs	r0, r5, r7
     c3a:	0200      	lsls	r0, r0, #8
     c3c:	17c2      	asrs	r2, r0, #31
     c3e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c42:	1200      	asrs	r0, r0, #8
     c44:	4288      	cmp	r0, r1
     c46:	da1d      	bge.n	c84 <MPSL_IRQ_RADIO_Handler+0x2b0>
     c48:	f003 f808 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     c4c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     c50:	bf08      	it	eq
     c52:	200d      	moveq	r0, #13
     c54:	d00b      	beq.n	c6e <MPSL_IRQ_RADIO_Handler+0x29a>
     c56:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     c5a:	3856      	subs	r0, #86	; 0x56
     c5c:	bf08      	it	eq
     c5e:	201c      	moveq	r0, #28
     c60:	d005      	beq.n	c6e <MPSL_IRQ_RADIO_Handler+0x29a>
     c62:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     c66:	389f      	subs	r0, #159	; 0x9f
     c68:	bf14      	ite	ne
     c6a:	2000      	movne	r0, #0
     c6c:	2032      	moveq	r0, #50	; 0x32
     c6e:	f89d 101c 	ldrb.w	r1, [sp, #28]
     c72:	1c40      	adds	r0, r0, #1
     c74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     c78:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     c7c:	6889      	ldr	r1, [r1, #8]
     c7e:	4408      	add	r0, r1
     c80:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     c84:	9808      	ldr	r0, [sp, #32]
     c86:	1a28      	subs	r0, r5, r0
     c88:	0200      	lsls	r0, r0, #8
     c8a:	17c1      	asrs	r1, r0, #31
     c8c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     c90:	1200      	asrs	r0, r0, #8
     c92:	2800      	cmp	r0, #0
     c94:	dd03      	ble.n	c9e <MPSL_IRQ_RADIO_Handler+0x2ca>
     c96:	b011      	add	sp, #68	; 0x44
     c98:	2000      	movs	r0, #0
     c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c9e:	6820      	ldr	r0, [r4, #0]
     ca0:	42a8      	cmp	r0, r5
     ca2:	d902      	bls.n	caa <MPSL_IRQ_RADIO_Handler+0x2d6>
     ca4:	68a1      	ldr	r1, [r4, #8]
     ca6:	1c49      	adds	r1, r1, #1
     ca8:	60a1      	str	r1, [r4, #8]
     caa:	6861      	ldr	r1, [r4, #4]
     cac:	f10d 0a18 	add.w	sl, sp, #24
     cb0:	1a08      	subs	r0, r1, r0
     cb2:	4428      	add	r0, r5
     cb4:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     cb8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     cbc:	e9c4 1000 	strd	r1, r0, [r4]
     cc0:	9810      	ldr	r0, [sp, #64]	; 0x40
     cc2:	900b      	str	r0, [sp, #44]	; 0x2c
     cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
     cc6:	f10d 081c 	add.w	r8, sp, #28
     cca:	f890 5020 	ldrb.w	r5, [r0, #32]
     cce:	2020      	movs	r0, #32
     cd0:	f88d 0018 	strb.w	r0, [sp, #24]
     cd4:	2d20      	cmp	r5, #32
     cd6:	d03c      	beq.n	d52 <MPSL_IRQ_RADIO_Handler+0x37e>
     cd8:	4947      	ldr	r1, [pc, #284]	; (df8 <MPSL_IRQ_RADIO_Handler+0x424>)
     cda:	980b      	ldr	r0, [sp, #44]	; 0x2c
     cdc:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
     ce0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     ce4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     ce8:	f100 0108 	add.w	r1, r0, #8
     cec:	68c0      	ldr	r0, [r0, #12]
     cee:	6827      	ldr	r7, [r4, #0]
     cf0:	1a38      	subs	r0, r7, r0
     cf2:	0200      	lsls	r0, r0, #8
     cf4:	17c2      	asrs	r2, r0, #31
     cf6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     cfa:	1200      	asrs	r0, r0, #8
     cfc:	d429      	bmi.n	d52 <MPSL_IRQ_RADIO_Handler+0x37e>
     cfe:	89e0      	ldrh	r0, [r4, #14]
     d00:	b300      	cbz	r0, d44 <MPSL_IRQ_RADIO_Handler+0x370>
     d02:	89c8      	ldrh	r0, [r1, #14]
     d04:	b9f0      	cbnz	r0, d44 <MPSL_IRQ_RADIO_Handler+0x370>
     d06:	f8d1 9000 	ldr.w	r9, [r1]
     d0a:	f002 ffa7 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     d0e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     d12:	bf08      	it	eq
     d14:	200d      	moveq	r0, #13
     d16:	d00b      	beq.n	d30 <MPSL_IRQ_RADIO_Handler+0x35c>
     d18:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     d1c:	3856      	subs	r0, #86	; 0x56
     d1e:	bf08      	it	eq
     d20:	201c      	moveq	r0, #28
     d22:	d005      	beq.n	d30 <MPSL_IRQ_RADIO_Handler+0x35c>
     d24:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     d28:	389f      	subs	r0, #159	; 0x9f
     d2a:	bf14      	ite	ne
     d2c:	2000      	movne	r0, #0
     d2e:	2032      	moveq	r0, #50	; 0x32
     d30:	1c41      	adds	r1, r0, #1
     d32:	eba7 0009 	sub.w	r0, r7, r9
     d36:	0200      	lsls	r0, r0, #8
     d38:	17c2      	asrs	r2, r0, #31
     d3a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d3e:	1200      	asrs	r0, r0, #8
     d40:	4288      	cmp	r0, r1
     d42:	db06      	blt.n	d52 <MPSL_IRQ_RADIO_Handler+0x37e>
     d44:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     d48:	f88a 5000 	strb.w	r5, [sl]
     d4c:	7845      	ldrb	r5, [r0, #1]
     d4e:	2d20      	cmp	r5, #32
     d50:	d1c6      	bne.n	ce0 <MPSL_IRQ_RADIO_Handler+0x30c>
     d52:	f89a 0000 	ldrb.w	r0, [sl]
     d56:	f888 0000 	strb.w	r0, [r8]
     d5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
     d5c:	2d20      	cmp	r5, #32
     d5e:	bf1c      	itt	ne
     d60:	4925      	ldrne	r1, [pc, #148]	; (df8 <MPSL_IRQ_RADIO_Handler+0x424>)
     d62:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
     d66:	d03f      	beq.n	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     d68:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     d6c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     d70:	6860      	ldr	r0, [r4, #4]
     d72:	f8d7 9008 	ldr.w	r9, [r7, #8]
     d76:	f107 0108 	add.w	r1, r7, #8
     d7a:	eba9 0000 	sub.w	r0, r9, r0
     d7e:	0200      	lsls	r0, r0, #8
     d80:	17c2      	asrs	r2, r0, #31
     d82:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d86:	1200      	asrs	r0, r0, #8
     d88:	d422      	bmi.n	dd0 <MPSL_IRQ_RADIO_Handler+0x3fc>
     d8a:	89c8      	ldrh	r0, [r1, #14]
     d8c:	b360      	cbz	r0, de8 <MPSL_IRQ_RADIO_Handler+0x414>
     d8e:	89e0      	ldrh	r0, [r4, #14]
     d90:	bb50      	cbnz	r0, de8 <MPSL_IRQ_RADIO_Handler+0x414>
     d92:	f8d4 a000 	ldr.w	sl, [r4]
     d96:	f002 ff61 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     d9a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     d9e:	bf08      	it	eq
     da0:	200d      	moveq	r0, #13
     da2:	d00b      	beq.n	dbc <MPSL_IRQ_RADIO_Handler+0x3e8>
     da4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     da8:	3856      	subs	r0, #86	; 0x56
     daa:	bf08      	it	eq
     dac:	201c      	moveq	r0, #28
     dae:	d005      	beq.n	dbc <MPSL_IRQ_RADIO_Handler+0x3e8>
     db0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     db4:	389f      	subs	r0, #159	; 0x9f
     db6:	bf14      	ite	ne
     db8:	2000      	movne	r0, #0
     dba:	2032      	moveq	r0, #50	; 0x32
     dbc:	1c41      	adds	r1, r0, #1
     dbe:	eba9 000a 	sub.w	r0, r9, sl
     dc2:	0200      	lsls	r0, r0, #8
     dc4:	17c2      	asrs	r2, r0, #31
     dc6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     dca:	1200      	asrs	r0, r0, #8
     dcc:	4288      	cmp	r0, r1
     dce:	da0b      	bge.n	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     dd0:	f888 5000 	strb.w	r5, [r8]
     dd4:	7e38      	ldrb	r0, [r7, #24]
     dd6:	7c21      	ldrb	r1, [r4, #16]
     dd8:	4288      	cmp	r0, r1
     dda:	f67f af0d 	bls.w	bf8 <MPSL_IRQ_RADIO_Handler+0x224>
     dde:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     de2:	7845      	ldrb	r5, [r0, #1]
     de4:	2d20      	cmp	r5, #32
     de6:	d1bf      	bne.n	d68 <MPSL_IRQ_RADIO_Handler+0x394>
     de8:	b011      	add	sp, #68	; 0x44
     dea:	2001      	movs	r0, #1
     dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     df0:	20001164 	.word	0x20001164
     df4:	20000d64 	.word	0x20000d64
     df8:	200010e4 	.word	0x200010e4
     dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e00:	460f      	mov	r7, r1
     e02:	4606      	mov	r6, r0
     e04:	eb01 0047 	add.w	r0, r1, r7, lsl #1
     e08:	494b      	ldr	r1, [pc, #300]	; (f38 <MPSL_IRQ_RADIO_Handler+0x564>)
     e0a:	4699      	mov	r9, r3
     e0c:	4408      	add	r0, r1
     e0e:	4692      	mov	sl, r2
     e10:	f890 4020 	ldrb.w	r4, [r0, #32]
     e14:	2020      	movs	r0, #32
     e16:	7010      	strb	r0, [r2, #0]
     e18:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
     e1c:	2c20      	cmp	r4, #32
     e1e:	bf1c      	itt	ne
     e20:	4846      	ldrne	r0, [pc, #280]	; (f3c <MPSL_IRQ_RADIO_Handler+0x568>)
     e22:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     e26:	d038      	beq.n	e9a <MPSL_IRQ_RADIO_Handler+0x4c6>
     e28:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     e2c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
     e30:	f100 0108 	add.w	r1, r0, #8
     e34:	68c0      	ldr	r0, [r0, #12]
     e36:	6835      	ldr	r5, [r6, #0]
     e38:	1a28      	subs	r0, r5, r0
     e3a:	0200      	lsls	r0, r0, #8
     e3c:	17c2      	asrs	r2, r0, #31
     e3e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e42:	1200      	asrs	r0, r0, #8
     e44:	d429      	bmi.n	e9a <MPSL_IRQ_RADIO_Handler+0x4c6>
     e46:	89f0      	ldrh	r0, [r6, #14]
     e48:	b300      	cbz	r0, e8c <MPSL_IRQ_RADIO_Handler+0x4b8>
     e4a:	89c8      	ldrh	r0, [r1, #14]
     e4c:	b9f0      	cbnz	r0, e8c <MPSL_IRQ_RADIO_Handler+0x4b8>
     e4e:	6808      	ldr	r0, [r1, #0]
     e50:	9000      	str	r0, [sp, #0]
     e52:	f002 ff03 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     e56:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     e5a:	bf08      	it	eq
     e5c:	200d      	moveq	r0, #13
     e5e:	d00b      	beq.n	e78 <MPSL_IRQ_RADIO_Handler+0x4a4>
     e60:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     e64:	3856      	subs	r0, #86	; 0x56
     e66:	bf08      	it	eq
     e68:	201c      	moveq	r0, #28
     e6a:	d005      	beq.n	e78 <MPSL_IRQ_RADIO_Handler+0x4a4>
     e6c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     e70:	389f      	subs	r0, #159	; 0x9f
     e72:	bf14      	ite	ne
     e74:	2000      	movne	r0, #0
     e76:	2032      	moveq	r0, #50	; 0x32
     e78:	1c41      	adds	r1, r0, #1
     e7a:	9800      	ldr	r0, [sp, #0]
     e7c:	1a28      	subs	r0, r5, r0
     e7e:	0200      	lsls	r0, r0, #8
     e80:	17c2      	asrs	r2, r0, #31
     e82:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e86:	1200      	asrs	r0, r0, #8
     e88:	4288      	cmp	r0, r1
     e8a:	db06      	blt.n	e9a <MPSL_IRQ_RADIO_Handler+0x4c6>
     e8c:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
     e90:	f88a 4000 	strb.w	r4, [sl]
     e94:	7844      	ldrb	r4, [r0, #1]
     e96:	2c20      	cmp	r4, #32
     e98:	d1c6      	bne.n	e28 <MPSL_IRQ_RADIO_Handler+0x454>
     e9a:	f89a 0000 	ldrb.w	r0, [sl]
     e9e:	f889 0000 	strb.w	r0, [r9]
     ea2:	2c20      	cmp	r4, #32
     ea4:	bf1c      	itt	ne
     ea6:	4825      	ldrne	r0, [pc, #148]	; (f3c <MPSL_IRQ_RADIO_Handler+0x568>)
     ea8:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
     eac:	d040      	beq.n	f30 <MPSL_IRQ_RADIO_Handler+0x55c>
     eae:	bf00      	nop
     eb0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     eb4:	eb08 0780 	add.w	r7, r8, r0, lsl #2
     eb8:	6870      	ldr	r0, [r6, #4]
     eba:	68bd      	ldr	r5, [r7, #8]
     ebc:	f107 0108 	add.w	r1, r7, #8
     ec0:	1a28      	subs	r0, r5, r0
     ec2:	0200      	lsls	r0, r0, #8
     ec4:	17c2      	asrs	r2, r0, #31
     ec6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     eca:	1200      	asrs	r0, r0, #8
     ecc:	d422      	bmi.n	f14 <MPSL_IRQ_RADIO_Handler+0x540>
     ece:	89c8      	ldrh	r0, [r1, #14]
     ed0:	b370      	cbz	r0, f30 <MPSL_IRQ_RADIO_Handler+0x55c>
     ed2:	89f0      	ldrh	r0, [r6, #14]
     ed4:	bb60      	cbnz	r0, f30 <MPSL_IRQ_RADIO_Handler+0x55c>
     ed6:	f8d6 b000 	ldr.w	fp, [r6]
     eda:	f002 febf 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     ede:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ee2:	bf08      	it	eq
     ee4:	200d      	moveq	r0, #13
     ee6:	d00b      	beq.n	f00 <MPSL_IRQ_RADIO_Handler+0x52c>
     ee8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     eec:	3856      	subs	r0, #86	; 0x56
     eee:	bf08      	it	eq
     ef0:	201c      	moveq	r0, #28
     ef2:	d005      	beq.n	f00 <MPSL_IRQ_RADIO_Handler+0x52c>
     ef4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     ef8:	389f      	subs	r0, #159	; 0x9f
     efa:	bf14      	ite	ne
     efc:	2000      	movne	r0, #0
     efe:	2032      	moveq	r0, #50	; 0x32
     f00:	1c41      	adds	r1, r0, #1
     f02:	eba5 000b 	sub.w	r0, r5, fp
     f06:	0200      	lsls	r0, r0, #8
     f08:	17c2      	asrs	r2, r0, #31
     f0a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     f0e:	1200      	asrs	r0, r0, #8
     f10:	4288      	cmp	r0, r1
     f12:	da0d      	bge.n	f30 <MPSL_IRQ_RADIO_Handler+0x55c>
     f14:	f889 4000 	strb.w	r4, [r9]
     f18:	7e38      	ldrb	r0, [r7, #24]
     f1a:	7c31      	ldrb	r1, [r6, #16]
     f1c:	4288      	cmp	r0, r1
     f1e:	d802      	bhi.n	f26 <MPSL_IRQ_RADIO_Handler+0x552>
     f20:	2000      	movs	r0, #0
     f22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f26:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
     f2a:	7844      	ldrb	r4, [r0, #1]
     f2c:	2c20      	cmp	r4, #32
     f2e:	d1bf      	bne.n	eb0 <MPSL_IRQ_RADIO_Handler+0x4dc>
     f30:	2001      	movs	r0, #1
     f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f36:	0000      	.short	0x0000
     f38:	20001164 	.word	0x20001164
     f3c:	200010e4 	.word	0x200010e4
     f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f44:	b098      	sub	sp, #96	; 0x60
     f46:	4615      	mov	r5, r2
     f48:	468b      	mov	fp, r1
     f4a:	f002 fa3b 	bl	33c4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     f4e:	4604      	mov	r4, r0
     f50:	f002 fcb6 	bl	38c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     f54:	4606      	mov	r6, r0
     f56:	f1bb 0f01 	cmp.w	fp, #1
     f5a:	bf18      	it	ne
     f5c:	f1bb 0f02 	cmpne.w	fp, #2
     f60:	d005      	beq.n	f6e <MPSL_IRQ_RADIO_Handler+0x59a>
     f62:	f640 1192 	movw	r1, #2450	; 0x992
     f66:	f04f 0070 	mov.w	r0, #112	; 0x70
     f6a:	f003 f821 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f6e:	49ff      	ldr	r1, [pc, #1020]	; (136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>)
     f70:	2001      	movs	r0, #1
     f72:	6008      	str	r0, [r1, #0]
     f74:	49fe      	ldr	r1, [pc, #1016]	; (1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>)
     f76:	6889      	ldr	r1, [r1, #8]
     f78:	6008      	str	r0, [r1, #0]
     f7a:	2000      	movs	r0, #0
     f7c:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
     f80:	900e      	str	r0, [sp, #56]	; 0x38
     f82:	1e40      	subs	r0, r0, #1
     f84:	900f      	str	r0, [sp, #60]	; 0x3c
     f86:	49fb      	ldr	r1, [pc, #1004]	; (1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>)
     f88:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     f8c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
     f90:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
     f94:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     f98:	e9cd 0c10 	strd	r0, ip, [sp, #64]	; 0x40
     f9c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
     fa0:	6989      	ldr	r1, [r1, #24]
     fa2:	9114      	str	r1, [sp, #80]	; 0x50
     fa4:	f00b f91f 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     fa8:	4601      	mov	r1, r0
     faa:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
     fae:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     fb2:	4bf1      	ldr	r3, [pc, #964]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
     fb4:	4440      	add	r0, r8
     fb6:	1c42      	adds	r2, r0, #1
     fb8:	1888      	adds	r0, r1, r2
     fba:	4299      	cmp	r1, r3
     fbc:	d84f      	bhi.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
     fbe:	4def      	ldr	r5, [pc, #956]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
     fc0:	42aa      	cmp	r2, r5
     fc2:	dc53      	bgt.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
     fc4:	4269      	negs	r1, r5
     fc6:	428a      	cmp	r2, r1
     fc8:	db58      	blt.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
     fca:	1c59      	adds	r1, r3, #1
     fcc:	4281      	cmp	r1, r0
     fce:	bfdc      	itt	le
     fd0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     fd4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     fd8:	dd05      	ble.n	fe6 <MPSL_IRQ_RADIO_Handler+0x612>
     fda:	2800      	cmp	r0, #0
     fdc:	bfbc      	itt	lt
     fde:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     fe2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     fe6:	900c      	str	r0, [sp, #48]	; 0x30
     fe8:	48e5      	ldr	r0, [pc, #916]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
     fea:	f1b8 0f00 	cmp.w	r8, #0
     fee:	8b80      	ldrh	r0, [r0, #28]
     ff0:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
     ff4:	bf04      	itt	eq
     ff6:	2000      	moveq	r0, #0
     ff8:	900b      	streq	r0, [sp, #44]	; 0x2c
     ffa:	d00b      	beq.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     ffc:	2001      	movs	r0, #1
     ffe:	900b      	str	r0, [sp, #44]	; 0x2c
    1000:	48df      	ldr	r0, [pc, #892]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
    1002:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    1006:	b928      	cbnz	r0, 1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
    1008:	f002 ff5a 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    100c:	2800      	cmp	r0, #0
    100e:	bf08      	it	eq
    1010:	2701      	moveq	r7, #1
    1012:	d000      	beq.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
    1014:	2700      	movs	r7, #0
    1016:	f002 fe21 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    101a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    101e:	bf08      	it	eq
    1020:	200d      	moveq	r0, #13
    1022:	d00b      	beq.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    1024:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1028:	3856      	subs	r0, #86	; 0x56
    102a:	bf08      	it	eq
    102c:	201c      	moveq	r0, #28
    102e:	d005      	beq.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    1030:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1034:	389f      	subs	r0, #159	; 0x9f
    1036:	bf14      	ite	ne
    1038:	2000      	movne	r0, #0
    103a:	2032      	moveq	r0, #50	; 0x32
    103c:	f04f 0900 	mov.w	r9, #0
    1040:	46ca      	mov	sl, r9
    1042:	9009      	str	r0, [sp, #36]	; 0x24
    1044:	4546      	cmp	r6, r8
    1046:	d937      	bls.n	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
    1048:	990c      	ldr	r1, [sp, #48]	; 0x30
    104a:	f8df 932c 	ldr.w	r9, [pc, #812]	; 1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
    104e:	ea6f 0c06 	mvn.w	ip, r6
    1052:	466b      	mov	r3, sp
    1054:	aa16      	add	r2, sp, #88	; 0x58
    1056:	eb01 000c 	add.w	r0, r1, ip
    105a:	4549      	cmp	r1, r9
    105c:	d904      	bls.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    105e:	f240 519e 	movw	r1, #1438	; 0x59e
    1062:	2070      	movs	r0, #112	; 0x70
    1064:	f002 ffa4 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1068:	45ac      	cmp	ip, r5
    106a:	dd04      	ble.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    106c:	f240 519f 	movw	r1, #1439	; 0x59f
    1070:	2070      	movs	r0, #112	; 0x70
    1072:	f002 ff9d 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1076:	49c3      	ldr	r1, [pc, #780]	; (1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>)
    1078:	458c      	cmp	ip, r1
    107a:	da04      	bge.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
    107c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    1080:	2070      	movs	r0, #112	; 0x70
    1082:	f002 ff95 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1086:	49c0      	ldr	r1, [pc, #768]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    1088:	4281      	cmp	r1, r0
    108a:	bfdc      	itt	le
    108c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1090:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1094:	dd05      	ble.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
    1096:	2800      	cmp	r0, #0
    1098:	bfbc      	itt	lt
    109a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    109e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    10a2:	4619      	mov	r1, r3
    10a4:	f001 fefc 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    10a8:	9800      	ldr	r0, [sp, #0]
    10aa:	9910      	ldr	r1, [sp, #64]	; 0x40
    10ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    10b0:	9000      	str	r0, [sp, #0]
    10b2:	1a08      	subs	r0, r1, r0
    10b4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    10b8:	2f00      	cmp	r7, #0
    10ba:	bf18      	it	ne
    10bc:	f8dd a024 	ldrne.w	sl, [sp, #36]	; 0x24
    10c0:	d105      	bne.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
    10c2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    10c6:	2800      	cmp	r0, #0
    10c8:	bf18      	it	ne
    10ca:	f04f 0a02 	movne.w	sl, #2
    10ce:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    10d2:	d008      	beq.n	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
    10d4:	9810      	ldr	r0, [sp, #64]	; 0x40
    10d6:	1b00      	subs	r0, r0, r4
    10d8:	0200      	lsls	r0, r0, #8
    10da:	17c1      	asrs	r1, r0, #31
    10dc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    10e0:	1200      	asrs	r0, r0, #8
    10e2:	2801      	cmp	r0, #1
    10e4:	da02      	bge.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
    10e6:	2003      	movs	r0, #3
    10e8:	9d18      	ldr	r5, [sp, #96]	; 0x60
    10ea:	e00d      	b.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    10ec:	b157      	cbz	r7, 1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    10ee:	48a4      	ldr	r0, [pc, #656]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
    10f0:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    10f4:	b130      	cbz	r0, 1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    10f6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    10fa:	f110 0a00 	adds.w	sl, r0, #0
    10fe:	bf18      	it	ne
    1100:	f04f 0a02 	movne.w	sl, #2
    1104:	4625      	mov	r5, r4
    1106:	2000      	movs	r0, #0
    1108:	4482      	add	sl, r0
    110a:	9810      	ldr	r0, [sp, #64]	; 0x40
    110c:	eba0 0009 	sub.w	r0, r0, r9
    1110:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1114:	1e50      	subs	r0, r2, #1
    1116:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    111a:	1b41      	subs	r1, r0, r5
    111c:	0209      	lsls	r1, r1, #8
    111e:	17cb      	asrs	r3, r1, #31
    1120:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    1124:	1209      	asrs	r1, r1, #8
    1126:	4551      	cmp	r1, sl
    1128:	db04      	blt.n	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
    112a:	f1b9 0f00 	cmp.w	r9, #0
    112e:	bf18      	it	ne
    1130:	9210      	strne	r2, [sp, #64]	; 0x40
    1132:	e02d      	b.n	1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>
    1134:	f1b9 0f00 	cmp.w	r9, #0
    1138:	d005      	beq.n	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    113a:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
    113e:	b920      	cbnz	r0, 114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
    1140:	f002 fbb4 	bl	38ac <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1144:	b108      	cbz	r0, 114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
    1146:	b9af      	cbnz	r7, 1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    1148:	e00c      	b.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
    114a:	b92f      	cbnz	r7, 1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
    114c:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    1150:	2800      	cmp	r0, #0
    1152:	bf18      	it	ne
    1154:	f1aa 0a02 	subne.w	sl, sl, #2
    1158:	f04f 0900 	mov.w	r9, #0
    115c:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
    1160:	464e      	mov	r6, r9
    1162:	e007      	b.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    1164:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    1168:	b120      	cbz	r0, 1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    116a:	2000      	movs	r0, #0
    116c:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    1170:	f1aa 0a02 	sub.w	sl, sl, #2
    1174:	9810      	ldr	r0, [sp, #64]	; 0x40
    1176:	eba0 0009 	sub.w	r0, r0, r9
    117a:	1e40      	subs	r0, r0, #1
    117c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1180:	1b41      	subs	r1, r0, r5
    1182:	0209      	lsls	r1, r1, #8
    1184:	17ca      	asrs	r2, r1, #31
    1186:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    118a:	1209      	asrs	r1, r1, #8
    118c:	4551      	cmp	r1, sl
    118e:	db7c      	blt.n	128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
    1190:	970a      	str	r7, [sp, #40]	; 0x28
    1192:	4605      	mov	r5, r0
    1194:	f04f 0900 	mov.w	r9, #0
    1198:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    119a:	f001 ffeb 	bl	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    119e:	1a28      	subs	r0, r5, r0
    11a0:	0200      	lsls	r0, r0, #8
    11a2:	17c1      	asrs	r1, r0, #31
    11a4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    11a8:	ea4f 2a20 	mov.w	sl, r0, asr #8
    11ac:	f002 fd56 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    11b0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    11b4:	bf08      	it	eq
    11b6:	200d      	moveq	r0, #13
    11b8:	d00b      	beq.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11ba:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    11be:	3856      	subs	r0, #86	; 0x56
    11c0:	bf08      	it	eq
    11c2:	201c      	moveq	r0, #28
    11c4:	d005      	beq.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11c6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    11ca:	389f      	subs	r0, #159	; 0x9f
    11cc:	bf14      	ite	ne
    11ce:	2000      	movne	r0, #0
    11d0:	2032      	moveq	r0, #50	; 0x32
    11d2:	300b      	adds	r0, #11
    11d4:	4582      	cmp	sl, r0
    11d6:	da20      	bge.n	121a <CONFIG_FPROTECT_BLOCK_SIZE+0x21a>
    11d8:	f1bb 0f01 	cmp.w	fp, #1
    11dc:	d002      	beq.n	11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
    11de:	980a      	ldr	r0, [sp, #40]	; 0x28
    11e0:	b140      	cbz	r0, 11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
    11e2:	e012      	b.n	120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
    11e4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    11e8:	d11c      	bne.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    11ea:	f640 1113 	movw	r1, #2323	; 0x913
    11ee:	2070      	movs	r0, #112	; 0x70
    11f0:	f002 fede 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11f4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    11f8:	d007      	beq.n	120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
    11fa:	1b60      	subs	r0, r4, r5
    11fc:	0200      	lsls	r0, r0, #8
    11fe:	17c1      	asrs	r1, r0, #31
    1200:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1204:	1200      	asrs	r0, r0, #8
    1206:	2804      	cmp	r0, #4
    1208:	dd04      	ble.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
    120a:	462c      	mov	r4, r5
    120c:	4620      	mov	r0, r4
    120e:	f001 ffd7 	bl	31c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1212:	e007      	b.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    1214:	2800      	cmp	r0, #0
    1216:	dc64      	bgt.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    1218:	e004      	b.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    121a:	462c      	mov	r4, r5
    121c:	4620      	mov	r0, r4
    121e:	f001 ffcf 	bl	31c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1222:	46b9      	mov	r9, r7
    1224:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1228:	d056      	beq.n	12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
    122a:	9810      	ldr	r0, [sp, #64]	; 0x40
    122c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    122e:	1b00      	subs	r0, r0, r4
    1230:	1b12      	subs	r2, r2, r4
    1232:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1236:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    123a:	2801      	cmp	r0, #1
    123c:	d351      	bcc.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    123e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1242:	bf98      	it	ls
    1244:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1248:	d84b      	bhi.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    124a:	4620      	mov	r0, r4
    124c:	f00a ffcb 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1250:	990c      	ldr	r1, [sp, #48]	; 0x30
    1252:	4a4a      	ldr	r2, [pc, #296]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
    1254:	1a0d      	subs	r5, r1, r0
    1256:	f04f 0a00 	mov.w	sl, #0
    125a:	1aaa      	subs	r2, r5, r2
    125c:	f17a 0200 	sbcs.w	r2, sl, #0
    1260:	d318      	bcc.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    1262:	4b46      	ldr	r3, [pc, #280]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
    1264:	1a42      	subs	r2, r0, r1
    1266:	1ad3      	subs	r3, r2, r3
    1268:	f17a 0300 	sbcs.w	r3, sl, #0
    126c:	d312      	bcc.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    126e:	4b42      	ldr	r3, [pc, #264]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
    1270:	42ab      	cmp	r3, r5
    1272:	bf3e      	ittt	cc
    1274:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    1278:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    127c:	1845      	addcc	r5, r0, r1
    127e:	d309      	bcc.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    1280:	4293      	cmp	r3, r2
    1282:	d232      	bcs.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
    1284:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    1288:	e000      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
    128a:	e02a      	b.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    128c:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    1290:	4408      	add	r0, r1
    1292:	4245      	negs	r5, r0
    1294:	4f3a      	ldr	r7, [pc, #232]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
    1296:	7fb8      	ldrb	r0, [r7, #30]
    1298:	b360      	cbz	r0, 12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>
    129a:	bf00      	nop
    129c:	f1bb 0f01 	cmp.w	fp, #1
    12a0:	d005      	beq.n	12ae <CONFIG_FPROTECT_BLOCK_SIZE+0x2ae>
    12a2:	2002      	movs	r0, #2
    12a4:	f002 f9c8 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12a8:	2001      	movs	r0, #1
    12aa:	f002 f9c5 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12ae:	45b0      	cmp	r8, r6
    12b0:	d22c      	bcs.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    12b2:	eba5 0106 	sub.w	r1, r5, r6
    12b6:	f04f 0002 	mov.w	r0, #2
    12ba:	f002 f907 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12be:	b390      	cbz	r0, 1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
    12c0:	f1b8 0f00 	cmp.w	r8, #0
    12c4:	bf1c      	itt	ne
    12c6:	eba5 0108 	subne.w	r1, r5, r8
    12ca:	2001      	movne	r0, #1
    12cc:	d034      	beq.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    12ce:	bf00      	nop
    12d0:	f002 f8fc 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12d4:	b338      	cbz	r0, 1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
    12d6:	e02f      	b.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    12d8:	f640 2126 	movw	r1, #2598	; 0xa26
    12dc:	2070      	movs	r0, #112	; 0x70
    12de:	f002 fe67 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12e2:	b01b      	add	sp, #108	; 0x6c
    12e4:	2000      	movs	r0, #0
    12e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12ea:	f640 21fa 	movw	r1, #2810	; 0xafa
    12ee:	2070      	movs	r0, #112	; 0x70
    12f0:	f002 fe5e 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12f4:	45b0      	cmp	r8, r6
    12f6:	bf34      	ite	cc
    12f8:	4630      	movcc	r0, r6
    12fa:	4640      	movcs	r0, r8
    12fc:	301e      	adds	r0, #30
    12fe:	42a8      	cmp	r0, r5
    1300:	dbcc      	blt.n	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
    1302:	f640 213a 	movw	r1, #2618	; 0xa3a
    1306:	2070      	movs	r0, #112	; 0x70
    1308:	f002 fe52 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    130c:	d90c      	bls.n	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
    130e:	eba5 0108 	sub.w	r1, r5, r8
    1312:	2001      	movs	r0, #1
    1314:	f002 f8da 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1318:	b128      	cbz	r0, 1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
    131a:	2e00      	cmp	r6, #0
    131c:	bf1c      	itt	ne
    131e:	1ba9      	subne	r1, r5, r6
    1320:	2002      	movne	r0, #2
    1322:	d009      	beq.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    1324:	e7d4      	b.n	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    1326:	e041      	b.n	13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
    1328:	ea56 0008 	orrs.w	r0, r6, r8
    132c:	d004      	beq.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    132e:	f640 1176 	movw	r1, #2422	; 0x976
    1332:	2070      	movs	r0, #112	; 0x70
    1334:	f002 fe3c 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1338:	4629      	mov	r1, r5
    133a:	2000      	movs	r0, #0
    133c:	f002 f8c6 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1340:	b3a0      	cbz	r0, 13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
    1342:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1344:	2601      	movs	r6, #1
    1346:	2800      	cmp	r0, #0
    1348:	bf04      	itt	eq
    134a:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    134e:	2800      	cmpeq	r0, #0
    1350:	d002      	beq.n	1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>
    1352:	f1b9 0f00 	cmp.w	r9, #0
    1356:	d034      	beq.n	13c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a>
    1358:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    135c:	b118      	cbz	r0, 1366 <CONFIG_FPROTECT_BLOCK_SIZE+0x366>
    135e:	f002 fc83 	bl	3c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1362:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    1366:	f1b9 0f00 	cmp.w	r9, #0
    136a:	e00f      	b.n	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    136c:	40000508 	.word	0x40000508
    1370:	2000003c 	.word	0x2000003c
    1374:	20000d64 	.word	0x20000d64
    1378:	1e847fff 	.word	0x1e847fff
    137c:	0f424000 	.word	0x0f424000
    1380:	20001164 	.word	0x20001164
    1384:	f0bdc000 	.word	0xf0bdc000
    1388:	1e848000 	.word	0x1e848000
    138c:	d01c      	beq.n	13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>
    138e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1390:	1a20      	subs	r0, r4, r0
    1392:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1396:	2005      	movs	r0, #5
    1398:	f002 f898 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    139c:	b360      	cbz	r0, 13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>
    139e:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    13a2:	2800      	cmp	r0, #0
    13a4:	bf08      	it	eq
    13a6:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    13aa:	e015      	b.n	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    13ac:	e7ff      	b.n	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
    13ae:	2002      	movs	r0, #2
    13b0:	f002 f942 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13b4:	2001      	movs	r0, #1
    13b6:	f002 f93f 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13ba:	b01b      	add	sp, #108	; 0x6c
    13bc:	2000      	movs	r0, #0
    13be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13c2:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    13c6:	b190      	cbz	r0, 13ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66>
    13c8:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    13cc:	b120      	cbz	r0, 13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    13ce:	2005      	movs	r0, #5
    13d0:	f002 f932 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13d4:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    13d8:	eba5 0008 	sub.w	r0, r5, r8
    13dc:	f1a0 0119 	sub.w	r1, r0, #25
    13e0:	2900      	cmp	r1, #0
    13e2:	dc0e      	bgt.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
    13e4:	f640 2163 	movw	r1, #2659	; 0xa63
    13e8:	2070      	movs	r0, #112	; 0x70
    13ea:	f002 fde1 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13ee:	f002 fc57 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    13f2:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    13f6:	e7b6      	b.n	1366 <CONFIG_FPROTECT_BLOCK_SIZE+0x366>
    13f8:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    13fc:	2070      	movs	r0, #112	; 0x70
    13fe:	f002 fdd7 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1402:	2003      	movs	r0, #3
    1404:	f002 f862 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1408:	b1c0      	cbz	r0, 143c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4>
    140a:	480f      	ldr	r0, [pc, #60]	; (1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>)
    140c:	6880      	ldr	r0, [r0, #8]
    140e:	f8c0 a000 	str.w	sl, [r0]
    1412:	480e      	ldr	r0, [pc, #56]	; (144c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4>)
    1414:	f8c0 a000 	str.w	sl, [r0]
    1418:	ac0e      	add	r4, sp, #56	; 0x38
    141a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    141e:	6038      	str	r0, [r7, #0]
    1420:	6079      	str	r1, [r7, #4]
    1422:	60ba      	str	r2, [r7, #8]
    1424:	60fb      	str	r3, [r7, #12]
    1426:	ac12      	add	r4, sp, #72	; 0x48
    1428:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    142c:	6138      	str	r0, [r7, #16]
    142e:	6179      	str	r1, [r7, #20]
    1430:	61ba      	str	r2, [r7, #24]
    1432:	61fb      	str	r3, [r7, #28]
    1434:	b01b      	add	sp, #108	; 0x6c
    1436:	2001      	movs	r0, #1
    1438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    143c:	f640 216b 	movw	r1, #2667	; 0xa6b
    1440:	2070      	movs	r0, #112	; 0x70
    1442:	f002 fdb5 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1446:	0000      	.short	0x0000
    1448:	2000003c 	.word	0x2000003c
    144c:	40000508 	.word	0x40000508
    1450:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1454:	4614      	mov	r4, r2
    1456:	460d      	mov	r5, r1
    1458:	f04f 0a00 	mov.w	sl, #0
    145c:	890a      	ldrh	r2, [r1, #8]
    145e:	4651      	mov	r1, sl
    1460:	f362 411f 	bfi	r1, r2, #16, #16
    1464:	7aaa      	ldrb	r2, [r5, #10]
    1466:	46d1      	mov	r9, sl
    1468:	f362 0907 	bfi	r9, r2, #0, #8
    146c:	7aea      	ldrb	r2, [r5, #11]
    146e:	4606      	mov	r6, r0
    1470:	f362 290f 	bfi	r9, r2, #8, #8
    1474:	782a      	ldrb	r2, [r5, #0]
    1476:	b083      	sub	sp, #12
    1478:	6840      	ldr	r0, [r0, #4]
    147a:	f8c4 a000 	str.w	sl, [r4]
    147e:	f362 4917 	bfi	r9, r2, #16, #8
    1482:	f8c4 a004 	str.w	sl, [r4, #4]
    1486:	f8c4 9010 	str.w	r9, [r4, #16]
    148a:	e9c4 0102 	strd	r0, r1, [r4, #8]
    148e:	4f9d      	ldr	r7, [pc, #628]	; (1704 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x37c>)
    1490:	6870      	ldr	r0, [r6, #4]
    1492:	fba0 8907 	umull	r8, r9, r0, r7
    1496:	6830      	ldr	r0, [r6, #0]
    1498:	f00a fea5 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    149c:	eb10 0108 	adds.w	r1, r0, r8
    14a0:	eb4a 0209 	adc.w	r2, sl, r9
    14a4:	7828      	ldrb	r0, [r5, #0]
    14a6:	ea4f 0967 	mov.w	r9, r7, asr #1
    14aa:	f1c9 0b00 	rsb	fp, r9, #0
    14ae:	b170      	cbz	r0, 14ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x146>
    14b0:	89e0      	ldrh	r0, [r4, #14]
    14b2:	f894 8011 	ldrb.w	r8, [r4, #17]
    14b6:	43c0      	mvns	r0, r0
    14b8:	f8d5 a004 	ldr.w	sl, [r5, #4]
    14bc:	f104 020c 	add.w	r2, r4, #12
    14c0:	4548      	cmp	r0, r9
    14c2:	dd7c      	ble.n	15be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x236>
    14c4:	f240 519f 	movw	r1, #1439	; 0x59f
    14c8:	2070      	movs	r0, #112	; 0x70
    14ca:	f002 fd71 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14ce:	f8df c238 	ldr.w	ip, [pc, #568]	; 1708 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x380>
    14d2:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    14d6:	eb11 0a0c 	adds.w	sl, r1, ip
    14da:	f142 0c00 	adc.w	ip, r2, #0
    14de:	ebb0 0a0a 	subs.w	sl, r0, sl
    14e2:	eb73 0c0c 	sbcs.w	ip, r3, ip
    14e6:	d272      	bcs.n	15ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x246>
    14e8:	1a41      	subs	r1, r0, r1
    14ea:	eb73 0102 	sbcs.w	r1, r3, r2
    14ee:	d36e      	bcc.n	15ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x246>
    14f0:	ebb0 0608 	subs.w	r6, r0, r8
    14f4:	42b7      	cmp	r7, r6
    14f6:	d82b      	bhi.n	1550 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c8>
    14f8:	89e0      	ldrh	r0, [r4, #14]
    14fa:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    14fe:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    1502:	43c1      	mvns	r1, r0
    1504:	4a81      	ldr	r2, [pc, #516]	; (170c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x384>)
    1506:	eb08 0001 	add.w	r0, r8, r1
    150a:	4542      	cmp	r2, r8
    150c:	d32b      	bcc.n	1566 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1de>
    150e:	4549      	cmp	r1, r9
    1510:	dcd8      	bgt.n	14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>
    1512:	4559      	cmp	r1, fp
    1514:	db66      	blt.n	15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>
    1516:	4287      	cmp	r7, r0
    1518:	bfdc      	itt	le
    151a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    151e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1522:	dd05      	ble.n	1530 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a8>
    1524:	2800      	cmp	r0, #0
    1526:	bfbc      	itt	lt
    1528:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    152c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1530:	466a      	mov	r2, sp
    1532:	a901      	add	r1, sp, #4
    1534:	f001 fcb4 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1538:	89e0      	ldrh	r0, [r4, #14]
    153a:	f89d 1000 	ldrb.w	r1, [sp]
    153e:	1a30      	subs	r0, r6, r0
    1540:	1a40      	subs	r0, r0, r1
    1542:	1e40      	subs	r0, r0, #1
    1544:	42b8      	cmp	r0, r7
    1546:	d302      	bcc.n	154e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c6>
    1548:	68a0      	ldr	r0, [r4, #8]
    154a:	1c40      	adds	r0, r0, #1
    154c:	60a0      	str	r0, [r4, #8]
    154e:	4646      	mov	r6, r8
    1550:	89e0      	ldrh	r0, [r4, #14]
    1552:	4b6e      	ldr	r3, [pc, #440]	; (170c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x384>)
    1554:	43c1      	mvns	r1, r0
    1556:	686d      	ldr	r5, [r5, #4]
    1558:	f894 8011 	ldrb.w	r8, [r4, #17]
    155c:	1870      	adds	r0, r6, r1
    155e:	f104 020c 	add.w	r2, r4, #12
    1562:	429e      	cmp	r6, r3
    1564:	d904      	bls.n	1570 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e8>
    1566:	f240 519e 	movw	r1, #1438	; 0x59e
    156a:	2070      	movs	r0, #112	; 0x70
    156c:	f002 fd20 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1570:	4549      	cmp	r1, r9
    1572:	dca7      	bgt.n	14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>
    1574:	4559      	cmp	r1, fp
    1576:	db35      	blt.n	15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>
    1578:	4287      	cmp	r7, r0
    157a:	bfdc      	itt	le
    157c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1580:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1584:	dd05      	ble.n	1592 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20a>
    1586:	2800      	cmp	r0, #0
    1588:	bfbc      	itt	lt
    158a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    158e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1592:	4621      	mov	r1, r4
    1594:	f001 fc84 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1598:	6820      	ldr	r0, [r4, #0]
    159a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    159e:	1970      	adds	r0, r6, r5
    15a0:	1c40      	adds	r0, r0, #1
    15a2:	6021      	str	r1, [r4, #0]
    15a4:	f1b8 0f00 	cmp.w	r8, #0
    15a8:	bf08      	it	eq
    15aa:	307a      	addeq	r0, #122	; 0x7a
    15ac:	d004      	beq.n	15b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x230>
    15ae:	f1b8 0f01 	cmp.w	r8, #1
    15b2:	bf08      	it	eq
    15b4:	3048      	addeq	r0, #72	; 0x48
    15b6:	d13a      	bne.n	162e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a6>
    15b8:	f001 fc56 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15bc:	e001      	b.n	15c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23a>
    15be:	e00e      	b.n	15de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x256>
    15c0:	e005      	b.n	15ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x246>
    15c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15c6:	6060      	str	r0, [r4, #4]
    15c8:	b007      	add	sp, #28
    15ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ce:	6830      	ldr	r0, [r6, #0]
    15d0:	1e40      	subs	r0, r0, #1
    15d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15d6:	6020      	str	r0, [r4, #0]
    15d8:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    15dc:	e7f3      	b.n	15c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23e>
    15de:	4601      	mov	r1, r0
    15e0:	4558      	cmp	r0, fp
    15e2:	da04      	bge.n	15ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x266>
    15e4:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    15e8:	2070      	movs	r0, #112	; 0x70
    15ea:	f002 fce1 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15ee:	4287      	cmp	r7, r0
    15f0:	bfdc      	itt	le
    15f2:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    15f6:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    15fa:	dd05      	ble.n	1608 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x280>
    15fc:	2800      	cmp	r0, #0
    15fe:	bfbc      	itt	lt
    1600:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1604:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1608:	4621      	mov	r1, r4
    160a:	f001 fc49 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    160e:	6820      	ldr	r0, [r4, #0]
    1610:	f1b8 0f00 	cmp.w	r8, #0
    1614:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1618:	f10a 0001 	add.w	r0, sl, #1
    161c:	6021      	str	r1, [r4, #0]
    161e:	bf08      	it	eq
    1620:	307a      	addeq	r0, #122	; 0x7a
    1622:	d009      	beq.n	1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>
    1624:	f1b8 0f01 	cmp.w	r8, #1
    1628:	bf08      	it	eq
    162a:	3048      	addeq	r0, #72	; 0x48
    162c:	d004      	beq.n	1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>
    162e:	f240 6139 	movw	r1, #1593	; 0x639
    1632:	2070      	movs	r0, #112	; 0x70
    1634:	f002 fcbc 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1638:	f001 fc16 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    163c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1640:	6061      	str	r1, [r4, #4]
    1642:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    1646:	aa01      	add	r2, sp, #4
    1648:	4669      	mov	r1, sp
    164a:	4648      	mov	r0, r9
    164c:	6837      	ldr	r7, [r6, #0]
    164e:	f001 fc27 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1652:	f002 f935 	bl	38c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1656:	f001 fc07 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    165a:	4680      	mov	r8, r0
    165c:	482c      	ldr	r0, [pc, #176]	; (1710 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x388>)
    165e:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1662:	2920      	cmp	r1, #32
    1664:	d02a      	beq.n	16bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x334>
    1666:	68c0      	ldr	r0, [r0, #12]
    1668:	1d40      	adds	r0, r0, #5
    166a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    166e:	bf00      	nop
    1670:	e9d4 2100 	ldrd	r2, r1, [r4]
    1674:	1a89      	subs	r1, r1, r2
    1676:	4401      	add	r1, r0
    1678:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    167c:	e9c4 0100 	strd	r0, r1, [r4]
    1680:	6831      	ldr	r1, [r6, #0]
    1682:	4281      	cmp	r1, r0
    1684:	d902      	bls.n	168c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x304>
    1686:	68a0      	ldr	r0, [r4, #8]
    1688:	1c40      	adds	r0, r0, #1
    168a:	60a0      	str	r0, [r4, #8]
    168c:	6832      	ldr	r2, [r6, #0]
    168e:	6928      	ldr	r0, [r5, #16]
    1690:	4621      	mov	r1, r4
    1692:	9b06      	ldr	r3, [sp, #24]
    1694:	f7ff f9fa 	bl	a8c <MPSL_IRQ_RADIO_Handler+0xb8>
    1698:	2800      	cmp	r0, #0
    169a:	bf1c      	itt	ne
    169c:	b007      	addne	sp, #28
    169e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16a2:	e9d4 1000 	ldrd	r1, r0, [r4]
    16a6:	1a40      	subs	r0, r0, r1
    16a8:	6831      	ldr	r1, [r6, #0]
    16aa:	6021      	str	r1, [r4, #0]
    16ac:	6831      	ldr	r1, [r6, #0]
    16ae:	4408      	add	r0, r1
    16b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16b4:	6060      	str	r0, [r4, #4]
    16b6:	b007      	add	sp, #28
    16b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16bc:	3709      	adds	r7, #9
    16be:	f1b9 0f00 	cmp.w	r9, #0
    16c2:	d016      	beq.n	16f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36a>
    16c4:	f002 fbfc 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16c8:	b998      	cbnz	r0, 16f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36a>
    16ca:	f002 fac7 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    16ce:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    16d2:	bf08      	it	eq
    16d4:	200d      	moveq	r0, #13
    16d6:	d00b      	beq.n	16f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x368>
    16d8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    16dc:	3856      	subs	r0, #86	; 0x56
    16de:	bf08      	it	eq
    16e0:	201c      	moveq	r0, #28
    16e2:	d005      	beq.n	16f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x368>
    16e4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    16e8:	389f      	subs	r0, #159	; 0x9f
    16ea:	bf14      	ite	ne
    16ec:	2000      	movne	r0, #0
    16ee:	2032      	moveq	r0, #50	; 0x32
    16f0:	4407      	add	r7, r0
    16f2:	9800      	ldr	r0, [sp, #0]
    16f4:	4580      	cmp	r8, r0
    16f6:	bf84      	itt	hi
    16f8:	eba8 0000 	subhi.w	r0, r8, r0
    16fc:	4407      	addhi	r7, r0
    16fe:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1702:	e7b5      	b.n	1670 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e8>
    1704:	1e848000 	.word	0x1e848000
    1708:	0f424000 	.word	0x0f424000
    170c:	1e847fff 	.word	0x1e847fff
    1710:	20001164 	.word	0x20001164
    1714:	b570      	push	{r4, r5, r6, lr}
    1716:	4d1e      	ldr	r5, [pc, #120]	; (1790 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x408>)
    1718:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    171c:	2820      	cmp	r0, #32
    171e:	bf18      	it	ne
    1720:	bd70      	popne	{r4, r5, r6, pc}
    1722:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1726:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    172a:	4428      	add	r0, r5
    172c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1730:	2c20      	cmp	r4, #32
    1732:	d027      	beq.n	1784 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3fc>
    1734:	4b17      	ldr	r3, [pc, #92]	; (1794 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40c>)
    1736:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    173a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    173e:	7849      	ldrb	r1, [r1, #1]
    1740:	f880 1020 	strb.w	r1, [r0, #32]
    1744:	20ff      	movs	r0, #255	; 0xff
    1746:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    174a:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    174e:	4621      	mov	r1, r4
    1750:	2002      	movs	r0, #2
    1752:	f000 f891 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    1756:	2000      	movs	r0, #0
    1758:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    175c:	77a8      	strb	r0, [r5, #30]
    175e:	490e      	ldr	r1, [pc, #56]	; (1798 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x410>)
    1760:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1764:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1768:	7e00      	ldrb	r0, [r0, #24]
    176a:	2800      	cmp	r0, #0
    176c:	bf08      	it	eq
    176e:	f002 fd89 	bleq	4284 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    1772:	2000      	movs	r0, #0
    1774:	4909      	ldr	r1, [pc, #36]	; (179c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x414>)
    1776:	6849      	ldr	r1, [r1, #4]
    1778:	2900      	cmp	r1, #0
    177a:	bf08      	it	eq
    177c:	bd70      	popeq	{r4, r5, r6, pc}
    177e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1782:	4708      	bx	r1
    1784:	f240 3132 	movw	r1, #818	; 0x332
    1788:	2070      	movs	r0, #112	; 0x70
    178a:	f002 fc11 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    178e:	0000      	.short	0x0000
    1790:	20001164 	.word	0x20001164
    1794:	200010e4 	.word	0x200010e4
    1798:	20000d64 	.word	0x20000d64
    179c:	2000003c 	.word	0x2000003c
    17a0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    17a4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1868 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e0>
    17a8:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    17ac:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    17b0:	4440      	add	r0, r8
    17b2:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    17b6:	2c20      	cmp	r4, #32
    17b8:	bf08      	it	eq
    17ba:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    17be:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 186c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e4>
    17c2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1870 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e8>
    17c6:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    17ca:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    17ce:	2607      	movs	r6, #7
    17d0:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    17d4:	2801      	cmp	r0, #1
    17d6:	d00e      	beq.n	17f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46e>
    17d8:	2804      	cmp	r0, #4
    17da:	bf08      	it	eq
    17dc:	2602      	moveq	r6, #2
    17de:	d00a      	beq.n	17f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46e>
    17e0:	2805      	cmp	r0, #5
    17e2:	bf0c      	ite	eq
    17e4:	2603      	moveq	r6, #3
    17e6:	2806      	cmpne	r0, #6
    17e8:	d005      	beq.n	17f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46e>
    17ea:	f640 01dd 	movw	r1, #2269	; 0x8dd
    17ee:	f04f 0070 	mov.w	r0, #112	; 0x70
    17f2:	f002 fbdd 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f6:	f1bb 0f00 	cmp.w	fp, #0
    17fa:	bf18      	it	ne
    17fc:	f3af 8000 	nopne.w
    1800:	f3ef 8010 	mrs	r0, PRIMASK
    1804:	b672      	cpsid	i
    1806:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    180a:	784a      	ldrb	r2, [r1, #1]
    180c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1810:	4441      	add	r1, r8
    1812:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1816:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    181a:	42a2      	cmp	r2, r4
    181c:	bf04      	itt	eq
    181e:	2220      	moveq	r2, #32
    1820:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1824:	b1c0      	cbz	r0, 1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    1826:	462a      	mov	r2, r5
    1828:	4621      	mov	r1, r4
    182a:	2001      	movs	r0, #1
    182c:	f000 f824 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    1830:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1834:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1838:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    183c:	6840      	ldr	r0, [r0, #4]
    183e:	4631      	mov	r1, r6
    1840:	4790      	blx	r2
    1842:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1846:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    184a:	4440      	add	r0, r8
    184c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1850:	2c20      	cmp	r4, #32
    1852:	d1ba      	bne.n	17ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x442>
    1854:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1858:	4806      	ldr	r0, [pc, #24]	; (1874 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ec>)
    185a:	2800      	cmp	r0, #0
    185c:	bf18      	it	ne
    185e:	f3af 8000 	nopne.w
    1862:	b662      	cpsie	i
    1864:	e7df      	b.n	1826 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x49e>
    1866:	0000      	.short	0x0000
    1868:	20001164 	.word	0x20001164
    186c:	00000000 	.word	0x00000000
    1870:	200010e4 	.word	0x200010e4
    1874:	00000000 	.word	0x00000000
    1878:	f8df c058 	ldr.w	ip, [pc, #88]	; 18d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54c>
    187c:	b510      	push	{r4, lr}
    187e:	2300      	movs	r3, #0
    1880:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1884:	2807      	cmp	r0, #7
    1886:	d21f      	bcs.n	18c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x540>
    1888:	e8df f000 	tbb	[pc, r0]
    188c:	05050505 	.word	0x05050505
    1890:	00040404 	.word	0x00040404
    1894:	2301      	movs	r3, #1
    1896:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    189a:	2b00      	cmp	r3, #0
    189c:	bf08      	it	eq
    189e:	bd10      	popeq	{r4, pc}
    18a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    18a4:	480c      	ldr	r0, [pc, #48]	; (18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>)
    18a6:	4402      	add	r2, r0
    18a8:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    18ac:	2820      	cmp	r0, #32
    18ae:	bf0e      	itee	eq
    18b0:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    18b4:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    18b8:	7041      	strbne	r1, [r0, #1]
    18ba:	2020      	movs	r0, #32
    18bc:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    18c0:	7058      	strb	r0, [r3, #1]
    18c2:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    18c6:	bd10      	pop	{r4, pc}
    18c8:	f240 216e 	movw	r1, #622	; 0x26e
    18cc:	2070      	movs	r0, #112	; 0x70
    18ce:	f002 fb6f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18d2:	0000      	.short	0x0000
    18d4:	200010e4 	.word	0x200010e4
    18d8:	20001164 	.word	0x20001164
    18dc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    18e0:	460f      	mov	r7, r1
    18e2:	4680      	mov	r8, r0
    18e4:	f8df a158 	ldr.w	sl, [pc, #344]	; 1a40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b8>
    18e8:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    18ec:	4450      	add	r0, sl
    18ee:	f1b8 0f01 	cmp.w	r8, #1
    18f2:	f890 4020 	ldrb.w	r4, [r0, #32]
    18f6:	4625      	mov	r5, r4
    18f8:	bf18      	it	ne
    18fa:	f1b8 0f02 	cmpne.w	r8, #2
    18fe:	d005      	beq.n	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    1900:	f640 21a1 	movw	r1, #2721	; 0xaa1
    1904:	f04f 0070 	mov.w	r0, #112	; 0x70
    1908:	f002 fb52 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    190c:	f04f 0b00 	mov.w	fp, #0
    1910:	2d20      	cmp	r5, #32
    1912:	d042      	beq.n	199a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x612>
    1914:	f89a 001e 	ldrb.w	r0, [sl, #30]
    1918:	2600      	movs	r6, #0
    191a:	2800      	cmp	r0, #0
    191c:	bf08      	it	eq
    191e:	2602      	moveq	r6, #2
    1920:	f001 fc28 	bl	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1924:	f8df c11c 	ldr.w	ip, [pc, #284]	; 1a44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6bc>
    1928:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    192c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1930:	688a      	ldr	r2, [r1, #8]
    1932:	68c9      	ldr	r1, [r1, #12]
    1934:	1a12      	subs	r2, r2, r0
    1936:	1a09      	subs	r1, r1, r0
    1938:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    193c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1940:	4296      	cmp	r6, r2
    1942:	bf99      	ittee	ls
    1944:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1948:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    194c:	4a3e      	ldrhi	r2, [pc, #248]	; (1a48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c0>)
    194e:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    1952:	d920      	bls.n	1996 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60e>
    1954:	4622      	mov	r2, r4
    1956:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    195a:	784c      	ldrb	r4, [r1, #1]
    195c:	2c20      	cmp	r4, #32
    195e:	d012      	beq.n	1986 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5fe>
    1960:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1964:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1968:	688b      	ldr	r3, [r1, #8]
    196a:	68c9      	ldr	r1, [r1, #12]
    196c:	1a1b      	subs	r3, r3, r0
    196e:	1a09      	subs	r1, r1, r0
    1970:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1974:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1978:	429e      	cmp	r6, r3
    197a:	bf9c      	itt	ls
    197c:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    1980:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1984:	d8e6      	bhi.n	1954 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5cc>
    1986:	2a20      	cmp	r2, #32
    1988:	d005      	beq.n	1996 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60e>
    198a:	463b      	mov	r3, r7
    198c:	2120      	movs	r1, #32
    198e:	2004      	movs	r0, #4
    1990:	f7ff f840 	bl	a14 <MPSL_IRQ_RADIO_Handler+0x40>
    1994:	4604      	mov	r4, r0
    1996:	42ac      	cmp	r4, r5
    1998:	d116      	bne.n	19c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x640>
    199a:	482c      	ldr	r0, [pc, #176]	; (1a4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c4>)
    199c:	2800      	cmp	r0, #0
    199e:	bf18      	it	ne
    19a0:	f3af 8000 	nopne.w
    19a4:	f001 fbe6 	bl	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    19a8:	4603      	mov	r3, r0
    19aa:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    19ae:	2820      	cmp	r0, #32
    19b0:	d00d      	beq.n	19ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x646>
    19b2:	f8da 0008 	ldr.w	r0, [sl, #8]
    19b6:	1c99      	adds	r1, r3, #2
    19b8:	1a08      	subs	r0, r1, r0
    19ba:	0200      	lsls	r0, r0, #8
    19bc:	17c1      	asrs	r1, r0, #31
    19be:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    19c2:	1200      	asrs	r0, r0, #8
    19c4:	2800      	cmp	r0, #0
    19c6:	dd02      	ble.n	19ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x646>
    19c8:	2000      	movs	r0, #0
    19ca:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19ce:	2d20      	cmp	r5, #32
    19d0:	d014      	beq.n	19fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x674>
    19d2:	462a      	mov	r2, r5
    19d4:	4641      	mov	r1, r8
    19d6:	4618      	mov	r0, r3
    19d8:	f7ff fab2 	bl	f40 <MPSL_IRQ_RADIO_Handler+0x56c>
    19dc:	2800      	cmp	r0, #0
    19de:	bf1e      	ittt	ne
    19e0:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    19e4:	2002      	movne	r0, #2
    19e6:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19ea:	463b      	mov	r3, r7
    19ec:	462a      	mov	r2, r5
    19ee:	2120      	movs	r1, #32
    19f0:	2004      	movs	r0, #4
    19f2:	f7ff f80f 	bl	a14 <MPSL_IRQ_RADIO_Handler+0x40>
    19f6:	2000      	movs	r0, #0
    19f8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19fc:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    1a00:	b118      	cbz	r0, 1a0a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x682>
    1a02:	f002 f931 	bl	3c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1a06:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    1a0a:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    1a0e:	b120      	cbz	r0, 1a1a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x692>
    1a10:	2005      	movs	r0, #5
    1a12:	f001 fe11 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a16:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    1a1a:	2004      	movs	r0, #4
    1a1c:	f001 fe0c 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a20:	f001 fe7a 	bl	3718 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1a24:	2020      	movs	r0, #32
    1a26:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    1a2a:	4809      	ldr	r0, [pc, #36]	; (1a50 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c8>)
    1a2c:	6880      	ldr	r0, [r0, #8]
    1a2e:	f8c0 b000 	str.w	fp, [r0]
    1a32:	4808      	ldr	r0, [pc, #32]	; (1a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6cc>)
    1a34:	f8c0 b000 	str.w	fp, [r0]
    1a38:	2001      	movs	r0, #1
    1a3a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1a3e:	0000      	.short	0x0000
    1a40:	20001164 	.word	0x20001164
    1a44:	20000d64 	.word	0x20000d64
    1a48:	200010e4 	.word	0x200010e4
    1a4c:	00000000 	.word	0x00000000
    1a50:	2000003c 	.word	0x2000003c
    1a54:	40000508 	.word	0x40000508

00001a58 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1a58:	4906      	ldr	r1, [pc, #24]	; (1a74 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1a5a:	b510      	push	{r4, lr}
    1a5c:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    1a60:	2a20      	cmp	r2, #32
    1a62:	bf1c      	itt	ne
    1a64:	7788      	strbne	r0, [r1, #30]
    1a66:	bd10      	popne	{r4, pc}
    1a68:	f240 319a 	movw	r1, #922	; 0x39a
    1a6c:	2070      	movs	r0, #112	; 0x70
    1a6e:	f002 fa9f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a72:	0000      	.short	0x0000
    1a74:	20001164 	.word	0x20001164

00001a78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a7c:	4e69      	ldr	r6, [pc, #420]	; (1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1a7e:	4607      	mov	r7, r0
    1a80:	b08d      	sub	sp, #52	; 0x34
    1a82:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1a86:	4688      	mov	r8, r1
    1a88:	2820      	cmp	r0, #32
    1a8a:	d055      	beq.n	1b38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    1a8c:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1a90:	f106 0408 	add.w	r4, r6, #8
    1a94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1a98:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    1a9c:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    1aa0:	2020      	movs	r0, #32
    1aa2:	f88d 0020 	strb.w	r0, [sp, #32]
    1aa6:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    1aaa:	aa0a      	add	r2, sp, #40	; 0x28
    1aac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1ab0:	4430      	add	r0, r6
    1ab2:	a909      	add	r1, sp, #36	; 0x24
    1ab4:	f890 5020 	ldrb.w	r5, [r0, #32]
    1ab8:	68f0      	ldr	r0, [r6, #12]
    1aba:	9002      	str	r0, [sp, #8]
    1abc:	6830      	ldr	r0, [r6, #0]
    1abe:	4438      	add	r0, r7
    1ac0:	f001 f9ee 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1ac4:	f8da 000c 	ldr.w	r0, [sl, #12]
    1ac8:	9909      	ldr	r1, [sp, #36]	; 0x24
    1aca:	2f65      	cmp	r7, #101	; 0x65
    1acc:	4408      	add	r0, r1
    1ace:	d338      	bcc.n	1b42 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1ad0:	4a55      	ldr	r2, [pc, #340]	; (1c28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    1ad2:	2100      	movs	r1, #0
    1ad4:	1bd2      	subs	r2, r2, r7
    1ad6:	eb71 0201 	sbcs.w	r2, r1, r1
    1ada:	d332      	bcc.n	1b42 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1adc:	6822      	ldr	r2, [r4, #0]
    1ade:	1a82      	subs	r2, r0, r2
    1ae0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1ae4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1ae8:	d82b      	bhi.n	1b42 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1aea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1aee:	6060      	str	r0, [r4, #4]
    1af0:	4630      	mov	r0, r6
    1af2:	f884 8010 	strb.w	r8, [r4, #16]
    1af6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1afa:	f10d 0a20 	add.w	sl, sp, #32
    1afe:	2d20      	cmp	r5, #32
    1b00:	bf1c      	itt	ne
    1b02:	494a      	ldrne	r1, [pc, #296]	; (1c2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1b04:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1b08:	d050      	beq.n	1bac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b0a:	bf00      	nop
    1b0c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1b10:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1b14:	6861      	ldr	r1, [r4, #4]
    1b16:	f8d8 6008 	ldr.w	r6, [r8, #8]
    1b1a:	f108 0008 	add.w	r0, r8, #8
    1b1e:	1a71      	subs	r1, r6, r1
    1b20:	0209      	lsls	r1, r1, #8
    1b22:	17ca      	asrs	r2, r1, #31
    1b24:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1b28:	1209      	asrs	r1, r1, #8
    1b2a:	d42d      	bmi.n	1b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    1b2c:	89c0      	ldrh	r0, [r0, #14]
    1b2e:	2800      	cmp	r0, #0
    1b30:	d03c      	beq.n	1bac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b32:	89e0      	ldrh	r0, [r4, #14]
    1b34:	b148      	cbz	r0, 1b4a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1b36:	e039      	b.n	1bac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b38:	f640 3168 	movw	r1, #2920	; 0xb68
    1b3c:	2070      	movs	r0, #112	; 0x70
    1b3e:	f002 fa37 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b42:	b00d      	add	sp, #52	; 0x34
    1b44:	2001      	movs	r0, #1
    1b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b4a:	6820      	ldr	r0, [r4, #0]
    1b4c:	900c      	str	r0, [sp, #48]	; 0x30
    1b4e:	f002 f885 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1b52:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1b56:	bf08      	it	eq
    1b58:	200d      	moveq	r0, #13
    1b5a:	d00b      	beq.n	1b74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1b5c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1b60:	3856      	subs	r0, #86	; 0x56
    1b62:	bf08      	it	eq
    1b64:	201c      	moveq	r0, #28
    1b66:	d005      	beq.n	1b74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1b68:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1b6c:	389f      	subs	r0, #159	; 0x9f
    1b6e:	bf14      	ite	ne
    1b70:	2000      	movne	r0, #0
    1b72:	2032      	moveq	r0, #50	; 0x32
    1b74:	1c41      	adds	r1, r0, #1
    1b76:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b78:	1a30      	subs	r0, r6, r0
    1b7a:	0200      	lsls	r0, r0, #8
    1b7c:	17c2      	asrs	r2, r0, #31
    1b7e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b82:	1200      	asrs	r0, r0, #8
    1b84:	4288      	cmp	r0, r1
    1b86:	da11      	bge.n	1bac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b88:	f88a 5000 	strb.w	r5, [sl]
    1b8c:	f898 1018 	ldrb.w	r1, [r8, #24]
    1b90:	7c20      	ldrb	r0, [r4, #16]
    1b92:	4281      	cmp	r1, r0
    1b94:	d805      	bhi.n	1ba2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1b96:	9802      	ldr	r0, [sp, #8]
    1b98:	6060      	str	r0, [r4, #4]
    1b9a:	b00d      	add	sp, #52	; 0x34
    1b9c:	2002      	movs	r0, #2
    1b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ba2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1ba6:	7845      	ldrb	r5, [r0, #1]
    1ba8:	2d20      	cmp	r5, #32
    1baa:	d1af      	bne.n	1b0c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    1bac:	2005      	movs	r0, #5
    1bae:	f001 fd43 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1bb2:	4c1c      	ldr	r4, [pc, #112]	; (1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1bb4:	f04f 30ff 	mov.w	r0, #4294967295
    1bb8:	6060      	str	r0, [r4, #4]
    1bba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    1bbe:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1bc2:	2120      	movs	r1, #32
    1bc4:	2a20      	cmp	r2, #32
    1bc6:	d003      	beq.n	1bd0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    1bc8:	2005      	movs	r0, #5
    1bca:	f7fe ff23 	bl	a14 <MPSL_IRQ_RADIO_Handler+0x40>
    1bce:	e004      	b.n	1bda <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    1bd0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    1bd4:	4420      	add	r0, r4
    1bd6:	f890 0020 	ldrb.w	r0, [r0, #32]
    1bda:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    1bde:	4913      	ldr	r1, [pc, #76]	; (1c2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1be0:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1be4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    1be8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1bec:	7048      	strb	r0, [r1, #1]
    1bee:	6820      	ldr	r0, [r4, #0]
    1bf0:	4438      	add	r0, r7
    1bf2:	6020      	str	r0, [r4, #0]
    1bf4:	20ff      	movs	r0, #255	; 0xff
    1bf6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    1bfa:	7e60      	ldrb	r0, [r4, #25]
    1bfc:	2801      	cmp	r0, #1
    1bfe:	d105      	bne.n	1c0c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    1c00:	68e0      	ldr	r0, [r4, #12]
    1c02:	1e40      	subs	r0, r0, #1
    1c04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c08:	f001 fb7a 	bl	3300 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1c0c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    1c10:	2820      	cmp	r0, #32
    1c12:	d003      	beq.n	1c1c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    1c14:	4806      	ldr	r0, [pc, #24]	; (1c30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    1c16:	7840      	ldrb	r0, [r0, #1]
    1c18:	f002 fa9e 	bl	4158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1c1c:	b00d      	add	sp, #52	; 0x34
    1c1e:	2000      	movs	r0, #0
    1c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c24:	20001164 	.word	0x20001164
    1c28:	0f424000 	.word	0x0f424000
    1c2c:	200010e4 	.word	0x200010e4
    1c30:	2000003c 	.word	0x2000003c

00001c34 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1c34:	4806      	ldr	r0, [pc, #24]	; (1c50 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1c36:	b510      	push	{r4, lr}
    1c38:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1c3c:	2920      	cmp	r1, #32
    1c3e:	bf1c      	itt	ne
    1c40:	7e00      	ldrbne	r0, [r0, #24]
    1c42:	bd10      	popne	{r4, pc}
    1c44:	f640 3162 	movw	r1, #2914	; 0xb62
    1c48:	2070      	movs	r0, #112	; 0x70
    1c4a:	f002 f9b1 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c4e:	0000      	.short	0x0000
    1c50:	20001164 	.word	0x20001164

00001c54 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1c54:	b570      	push	{r4, r5, r6, lr}
    1c56:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    1c5a:	4809      	ldr	r0, [pc, #36]	; (1c80 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    1c5c:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    1c60:	4908      	ldr	r1, [pc, #32]	; (1c84 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    1c62:	6920      	ldr	r0, [r4, #16]
    1c64:	fba0 5601 	umull	r5, r6, r0, r1
    1c68:	68a0      	ldr	r0, [r4, #8]
    1c6a:	f00a fabc 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1c6e:	8ae1      	ldrh	r1, [r4, #22]
    1c70:	7d22      	ldrb	r2, [r4, #20]
    1c72:	1c40      	adds	r0, r0, #1
    1c74:	4411      	add	r1, r2
    1c76:	4408      	add	r0, r1
    1c78:	1940      	adds	r0, r0, r5
    1c7a:	f146 0100 	adc.w	r1, r6, #0
    1c7e:	bd70      	pop	{r4, r5, r6, pc}
    1c80:	20000d64 	.word	0x20000d64
    1c84:	1e848000 	.word	0x1e848000

00001c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c8a:	4d6b      	ldr	r5, [pc, #428]	; (1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>)
    1c8c:	4a6b      	ldr	r2, [pc, #428]	; (1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>)
    1c8e:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    1c92:	2601      	movs	r6, #1
    1c94:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    1c98:	2808      	cmp	r0, #8
    1c9a:	d27c      	bcs.n	1d96 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a>
    1c9c:	e8df f000 	tbb	[pc, r0]
    1ca0:	a9977004 	.word	0xa9977004
    1ca4:	b3ae41c7 	.word	0xb3ae41c7
    1ca8:	b919      	cbnz	r1, 1cb2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1caa:	f001 fff9 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1cae:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1cb2:	8ae0      	ldrh	r0, [r4, #22]
    1cb4:	b110      	cbz	r0, 1cbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1cb6:	f002 f903 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1cba:	b180      	cbz	r0, 1cde <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    1cbc:	f7ff fd2a 	bl	1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>
    1cc0:	20ff      	movs	r0, #255	; 0xff
    1cc2:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1cc6:	6861      	ldr	r1, [r4, #4]
    1cc8:	f1b1 3fff 	cmp.w	r1, #4294967295
    1ccc:	d003      	beq.n	1cd6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    1cce:	2005      	movs	r0, #5
    1cd0:	f001 fbfc 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cd4:	b140      	cbz	r0, 1ce8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    1cd6:	7e60      	ldrb	r0, [r4, #25]
    1cd8:	2801      	cmp	r0, #1
    1cda:	d110      	bne.n	1cfe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    1cdc:	e009      	b.n	1cf2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    1cde:	f640 0169 	movw	r1, #2153	; 0x869
    1ce2:	2070      	movs	r0, #112	; 0x70
    1ce4:	f002 f964 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ce8:	f640 016e 	movw	r1, #2158	; 0x86e
    1cec:	2070      	movs	r0, #112	; 0x70
    1cee:	f002 f95f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cf2:	68e0      	ldr	r0, [r4, #12]
    1cf4:	1e40      	subs	r0, r0, #1
    1cf6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cfa:	f001 fb01 	bl	3300 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1cfe:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d02:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1d06:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1d0a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1d0e:	6840      	ldr	r0, [r0, #4]
    1d10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1d14:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1d18:	b001      	add	sp, #4
    1d1a:	2101      	movs	r1, #1
    1d1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1d20:	4710      	bx	r2
    1d22:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1d26:	b140      	cbz	r0, 1d3a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    1d28:	b919      	cbnz	r1, 1d32 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    1d2a:	f001 ffb9 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1d2e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1d32:	2000      	movs	r0, #0
    1d34:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d3a:	f7ff fceb 	bl	1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>
    1d3e:	f04f 30ff 	mov.w	r0, #4294967295
    1d42:	6060      	str	r0, [r4, #4]
    1d44:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    1d48:	f88d 0000 	strb.w	r0, [sp]
    1d4c:	f89d 0000 	ldrb.w	r0, [sp]
    1d50:	b188      	cbz	r0, 1d76 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a>
    1d52:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d56:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1d5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1d5e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1d62:	6840      	ldr	r0, [r0, #4]
    1d64:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1d68:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1d6c:	b001      	add	sp, #4
    1d6e:	2106      	movs	r1, #6
    1d70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1d74:	4710      	bx	r2
    1d76:	f640 0185 	movw	r1, #2181	; 0x885
    1d7a:	2070      	movs	r0, #112	; 0x70
    1d7c:	f002 f918 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d80:	f7ff fcc8 	bl	1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>
    1d84:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    1d88:	f002 f89a 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d8c:	b120      	cbz	r0, 1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>
    1d8e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    1d92:	b130      	cbz	r0, 1da2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56>
    1d94:	e009      	b.n	1daa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e>
    1d96:	e04a      	b.n	1e2e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe2>
    1d98:	f640 0193 	movw	r1, #2195	; 0x893
    1d9c:	2070      	movs	r0, #112	; 0x70
    1d9e:	f002 f907 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1da2:	f001 ff7d 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1da6:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1daa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1dae:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1db2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1db6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1dba:	6840      	ldr	r0, [r0, #4]
    1dbc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1dc0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1dc4:	b001      	add	sp, #4
    1dc6:	2100      	movs	r1, #0
    1dc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1dcc:	4710      	bx	r2
    1dce:	f001 fd59 	bl	3884 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    1dd2:	8ae0      	ldrh	r0, [r4, #22]
    1dd4:	b110      	cbz	r0, 1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1dd6:	f002 f873 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1dda:	b128      	cbz	r0, 1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1ddc:	f001 fd66 	bl	38ac <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1de0:	2800      	cmp	r0, #0
    1de2:	bf18      	it	ne
    1de4:	7766      	strbne	r6, [r4, #29]
    1de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1de8:	f640 019d 	movw	r1, #2205	; 0x89d
    1dec:	2070      	movs	r0, #112	; 0x70
    1dee:	f002 f8df 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1df2:	4813      	ldr	r0, [pc, #76]	; (1e40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf4>)
    1df4:	6006      	str	r6, [r0, #0]
    1df6:	6890      	ldr	r0, [r2, #8]
    1df8:	6006      	str	r6, [r0, #0]
    1dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dfc:	7810      	ldrb	r0, [r2, #0]
    1dfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1e02:	f002 b9a9 	b.w	4158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1e06:	f7ff fc85 	bl	1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>
    1e0a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1e0e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1e12:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1e16:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1e1a:	6840      	ldr	r0, [r0, #4]
    1e1c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1e20:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1e24:	b001      	add	sp, #4
    1e26:	2105      	movs	r1, #5
    1e28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1e2c:	4710      	bx	r2
    1e2e:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    1e32:	2070      	movs	r0, #112	; 0x70
    1e34:	f002 f8bc 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e38:	20000d64 	.word	0x20000d64
    1e3c:	2000003c 	.word	0x2000003c
    1e40:	40000508 	.word	0x40000508

00001e44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1e44:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e48:	4682      	mov	sl, r0
    1e4a:	48ef      	ldr	r0, [pc, #956]	; (2208 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x208>)
    1e4c:	b095      	sub	sp, #84	; 0x54
    1e4e:	6800      	ldr	r0, [r0, #0]
    1e50:	4dee      	ldr	r5, [pc, #952]	; (220c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20c>)
    1e52:	05c0      	lsls	r0, r0, #23
    1e54:	0dc0      	lsrs	r0, r0, #23
    1e56:	d00e      	beq.n	1e76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1e58:	3810      	subs	r0, #16
    1e5a:	b240      	sxtb	r0, r0
    1e5c:	2800      	cmp	r0, #0
    1e5e:	bfb8      	it	lt
    1e60:	f000 000f 	andlt.w	r0, r0, #15
    1e64:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1e68:	bfac      	ite	ge
    1e6a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1e6e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1e72:	0940      	lsrs	r0, r0, #5
    1e74:	d00d      	beq.n	1e92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1e76:	9816      	ldr	r0, [sp, #88]	; 0x58
    1e78:	f04f 0b00 	mov.w	fp, #0
    1e7c:	7800      	ldrb	r0, [r0, #0]
    1e7e:	2800      	cmp	r0, #0
    1e80:	bf18      	it	ne
    1e82:	2801      	cmpne	r0, #1
    1e84:	d018      	beq.n	1eb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1e86:	f240 713b 	movw	r1, #1851	; 0x73b
    1e8a:	f04f 0070 	mov.w	r0, #112	; 0x70
    1e8e:	f002 f88f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e92:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1e96:	f04f 0b01 	mov.w	fp, #1
    1e9a:	2820      	cmp	r0, #32
    1e9c:	d007      	beq.n	1eae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1e9e:	9816      	ldr	r0, [sp, #88]	; 0x58
    1ea0:	7800      	ldrb	r0, [r0, #0]
    1ea2:	b148      	cbz	r0, 1eb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1ea4:	f240 7137 	movw	r1, #1847	; 0x737
    1ea8:	2070      	movs	r0, #112	; 0x70
    1eaa:	f002 f881 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eae:	f240 7134 	movw	r1, #1844	; 0x734
    1eb2:	2070      	movs	r0, #112	; 0x70
    1eb4:	f002 f87c 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eb8:	4cd5      	ldr	r4, [pc, #852]	; (2210 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x210>)
    1eba:	b124      	cbz	r4, 1ec6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1ebc:	2100      	movs	r1, #0
    1ebe:	f240 703e 	movw	r0, #1854	; 0x73e
    1ec2:	f3af 8000 	nop.w
    1ec6:	2000      	movs	r0, #0
    1ec8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    1ecc:	49d1      	ldr	r1, [pc, #836]	; (2214 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x214>)
    1ece:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    1ed2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1ed6:	f04f 0901 	mov.w	r9, #1
    1eda:	9000      	str	r0, [sp, #0]
    1edc:	b124      	cbz	r4, 1ee8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1ede:	2100      	movs	r1, #0
    1ee0:	f240 7049 	movw	r0, #1865	; 0x749
    1ee4:	f3af 8000 	nop.w
    1ee8:	f1b9 0f00 	cmp.w	r9, #0
    1eec:	d00a      	beq.n	1f04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    1eee:	bf00      	nop
    1ef0:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    1ef4:	f04f 0800 	mov.w	r8, #0
    1ef8:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1efc:	f1bb 0f00 	cmp.w	fp, #0
    1f00:	d007      	beq.n	1f12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    1f02:	e038      	b.n	1f76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    1f04:	48c4      	ldr	r0, [pc, #784]	; (2218 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x218>)
    1f06:	2800      	cmp	r0, #0
    1f08:	bf18      	it	ne
    1f0a:	f3af 8000 	nopne.w
    1f0e:	b662      	cpsie	i
    1f10:	e7ee      	b.n	1ef0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    1f12:	4637      	mov	r7, r6
    1f14:	2001      	movs	r0, #1
    1f16:	ea20 0607 	bic.w	r6, r0, r7
    1f1a:	48c0      	ldr	r0, [pc, #768]	; (221c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x21c>)
    1f1c:	2240      	movs	r2, #64	; 0x40
    1f1e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1f22:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1f26:	f00a fab8 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f2a:	b124      	cbz	r4, 1f36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    1f2c:	2100      	movs	r1, #0
    1f2e:	f240 505e 	movw	r0, #1374	; 0x55e
    1f32:	f3af 8000 	nop.w
    1f36:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    1f3a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1f3e:	4429      	add	r1, r5
    1f40:	4428      	add	r0, r5
    1f42:	8c0a      	ldrh	r2, [r1, #32]
    1f44:	8402      	strh	r2, [r0, #32]
    1f46:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1f4a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1f4e:	b124      	cbz	r4, 1f5a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    1f50:	2100      	movs	r1, #0
    1f52:	f240 5062 	movw	r0, #1378	; 0x562
    1f56:	f3af 8000 	nop.w
    1f5a:	b124      	cbz	r4, 1f66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    1f5c:	2100      	movs	r1, #0
    1f5e:	f240 7053 	movw	r0, #1875	; 0x753
    1f62:	f3af 8000 	nop.w
    1f66:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1f6a:	f88d 0008 	strb.w	r0, [sp, #8]
    1f6e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f72:	2800      	cmp	r0, #0
    1f74:	d1b2      	bne.n	1edc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1f76:	b124      	cbz	r4, 1f82 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    1f78:	2100      	movs	r1, #0
    1f7a:	f240 705d 	movw	r0, #1885	; 0x75d
    1f7e:	f3af 8000 	nop.w
    1f82:	a802      	add	r0, sp, #8
    1f84:	f001 f8fc 	bl	3180 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1f8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1f90:	4633      	mov	r3, r6
    1f92:	aa09      	add	r2, sp, #36	; 0x24
    1f94:	a80e      	add	r0, sp, #56	; 0x38
    1f96:	9916      	ldr	r1, [sp, #88]	; 0x58
    1f98:	f7ff fa5a 	bl	1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>
    1f9c:	b124      	cbz	r4, 1fa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    1f9e:	2100      	movs	r1, #0
    1fa0:	f240 7064 	movw	r0, #1892	; 0x764
    1fa4:	f3af 8000 	nop.w
    1fa8:	4a9c      	ldr	r2, [pc, #624]	; (221c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x21c>)
    1faa:	990e      	ldr	r1, [sp, #56]	; 0x38
    1fac:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    1fb0:	a809      	add	r0, sp, #36	; 0x24
    1fb2:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    1fb6:	2a01      	cmp	r2, #1
    1fb8:	bf18      	it	ne
    1fba:	2a02      	cmpne	r2, #2
    1fbc:	d138      	bne.n	2030 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x30>
    1fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fc2:	eba2 0201 	sub.w	r2, r2, r1
    1fc6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1fca:	eba3 0101 	sub.w	r1, r3, r1
    1fce:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    1fd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1fd6:	2a02      	cmp	r2, #2
    1fd8:	d364      	bcc.n	20a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa4>
    1fda:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1fde:	bf98      	it	ls
    1fe0:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1fe4:	d85e      	bhi.n	20a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa4>
    1fe6:	f04f 0801 	mov.w	r8, #1
    1fea:	ab14      	add	r3, sp, #80	; 0x50
    1fec:	aa13      	add	r2, sp, #76	; 0x4c
    1fee:	4631      	mov	r1, r6
    1ff0:	f7fe ff04 	bl	dfc <MPSL_IRQ_RADIO_Handler+0x428>
    1ff4:	2800      	cmp	r0, #0
    1ff6:	d05d      	beq.n	20b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb4>
    1ff8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1ffc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    2000:	4633      	mov	r3, r6
    2002:	428a      	cmp	r2, r1
    2004:	d05a      	beq.n	20bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xbc>
    2006:	2005      	movs	r0, #5
    2008:	f7fe fd04 	bl	a14 <MPSL_IRQ_RADIO_Handler+0x40>
    200c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2010:	7048      	strb	r0, [r1, #1]
    2012:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2016:	2820      	cmp	r0, #32
    2018:	bf1c      	itt	ne
    201a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    201e:	f880 a001 	strbne.w	sl, [r0, #1]
    2022:	d057      	beq.n	20d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd4>
    2024:	4632      	mov	r2, r6
    2026:	4651      	mov	r1, sl
    2028:	f05f 0003 	movs.w	r0, #3
    202c:	f7ff fc24 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    2030:	b124      	cbz	r4, 203c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3c>
    2032:	2100      	movs	r1, #0
    2034:	f240 7069 	movw	r0, #1897	; 0x769
    2038:	f3af 8000 	nop.w
    203c:	4878      	ldr	r0, [pc, #480]	; (2220 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x220>)
    203e:	2800      	cmp	r0, #0
    2040:	bf18      	it	ne
    2042:	f3af 8000 	nopne.w
    2046:	f3ef 8910 	mrs	r9, PRIMASK
    204a:	b672      	cpsid	i
    204c:	b124      	cbz	r4, 2058 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x58>
    204e:	2100      	movs	r1, #0
    2050:	f240 706f 	movw	r0, #1903	; 0x76f
    2054:	f3af 8000 	nop.w
    2058:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    205c:	f88d 0008 	strb.w	r0, [sp, #8]
    2060:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2064:	2800      	cmp	r0, #0
    2066:	f47f af39 	bne.w	1edc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    206a:	b124      	cbz	r4, 2076 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x76>
    206c:	2100      	movs	r1, #0
    206e:	f240 7077 	movw	r0, #1911	; 0x777
    2072:	f3af 8000 	nop.w
    2076:	af09      	add	r7, sp, #36	; 0x24
    2078:	9800      	ldr	r0, [sp, #0]
    207a:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    207e:	f100 0708 	add.w	r7, r0, #8
    2082:	f1b8 0f00 	cmp.w	r8, #0
    2086:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    208a:	990d      	ldr	r1, [sp, #52]	; 0x34
    208c:	6181      	str	r1, [r0, #24]
    208e:	d051      	beq.n	2134 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x134>
    2090:	b124      	cbz	r4, 209c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9c>
    2092:	2100      	movs	r1, #0
    2094:	f240 7084 	movw	r0, #1924	; 0x784
    2098:	f3af 8000 	nop.w
    209c:	f1bb 0f00 	cmp.w	fp, #0
    20a0:	d139      	bne.n	2116 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x116>
    20a2:	e01f      	b.n	20e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe4>
    20a4:	4632      	mov	r2, r6
    20a6:	4651      	mov	r1, sl
    20a8:	2004      	movs	r0, #4
    20aa:	f7ff fbe5 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    20ae:	f04f 0801 	mov.w	r8, #1
    20b2:	e7bd      	b.n	2030 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x30>
    20b4:	4632      	mov	r2, r6
    20b6:	4651      	mov	r1, sl
    20b8:	2004      	movs	r0, #4
    20ba:	e7b7      	b.n	202c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c>
    20bc:	2920      	cmp	r1, #32
    20be:	bf19      	ittee	ne
    20c0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    20c4:	7840      	ldrbne	r0, [r0, #1]
    20c6:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    20ca:	4428      	addeq	r0, r5
    20cc:	bf08      	it	eq
    20ce:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    20d2:	e79b      	b.n	200c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc>
    20d4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    20d8:	4429      	add	r1, r5
    20da:	f881 a020 	strb.w	sl, [r1, #32]
    20de:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    20e2:	e79f      	b.n	2024 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x24>
    20e4:	9811      	ldr	r0, [sp, #68]	; 0x44
    20e6:	f010 0fff 	tst.w	r0, #255	; 0xff
    20ea:	d014      	beq.n	2116 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x116>
    20ec:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    20f0:	2820      	cmp	r0, #32
    20f2:	d110      	bne.n	2116 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x116>
    20f4:	b124      	cbz	r4, 2100 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x100>
    20f6:	2100      	movs	r1, #0
    20f8:	f240 7089 	movw	r0, #1929	; 0x789
    20fc:	f3af 8000 	nop.w
    2100:	4631      	mov	r1, r6
    2102:	2002      	movs	r0, #2
    2104:	f7ff fbea 	bl	18dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x554>
    2108:	9010      	str	r0, [sp, #64]	; 0x40
    210a:	b920      	cbnz	r0, 2116 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x116>
    210c:	9816      	ldr	r0, [sp, #88]	; 0x58
    210e:	7800      	ldrb	r0, [r0, #0]
    2110:	b1e8      	cbz	r0, 214e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14e>
    2112:	2801      	cmp	r0, #1
    2114:	d02a      	beq.n	216c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16c>
    2116:	b124      	cbz	r4, 2122 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x122>
    2118:	2100      	movs	r1, #0
    211a:	f240 70a6 	movw	r0, #1958	; 0x7a6
    211e:	f3af 8000 	nop.w
    2122:	20ff      	movs	r0, #255	; 0xff
    2124:	f1bb 0f00 	cmp.w	fp, #0
    2128:	bf18      	it	ne
    212a:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    212e:	d026      	beq.n	217e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x17e>
    2130:	f04f 0801 	mov.w	r8, #1
    2134:	b124      	cbz	r4, 2140 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x140>
    2136:	2100      	movs	r1, #0
    2138:	f240 70b7 	movw	r0, #1975	; 0x7b7
    213c:	f3af 8000 	nop.w
    2140:	9810      	ldr	r0, [sp, #64]	; 0x40
    2142:	4e38      	ldr	r6, [pc, #224]	; (2224 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x224>)
    2144:	2802      	cmp	r0, #2
    2146:	d023      	beq.n	2190 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x190>
    2148:	2801      	cmp	r0, #1
    214a:	d029      	beq.n	21a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a0>
    214c:	e02d      	b.n	21aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1aa>
    214e:	b124      	cbz	r4, 215a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x15a>
    2150:	2100      	movs	r1, #0
    2152:	f240 7091 	movw	r0, #1937	; 0x791
    2156:	f3af 8000 	nop.w
    215a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    215e:	4651      	mov	r1, sl
    2160:	2004      	movs	r0, #4
    2162:	f7ff fb89 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    2166:	f04f 0801 	mov.w	r8, #1
    216a:	e7e3      	b.n	2134 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x134>
    216c:	2c00      	cmp	r4, #0
    216e:	f43f aeb5 	beq.w	1edc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2172:	2100      	movs	r1, #0
    2174:	f240 709c 	movw	r0, #1948	; 0x79c
    2178:	f3af 8000 	nop.w
    217c:	e6ae      	b.n	1edc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    217e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2182:	2101      	movs	r1, #1
    2184:	4391      	bics	r1, r2
    2186:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    218a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    218e:	e7cf      	b.n	2130 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x130>
    2190:	68a8      	ldr	r0, [r5, #8]
    2192:	990e      	ldr	r1, [sp, #56]	; 0x38
    2194:	1a40      	subs	r0, r0, r1
    2196:	f00a f826 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    219a:	6871      	ldr	r1, [r6, #4]
    219c:	b921      	cbnz	r1, 21a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a8>
    219e:	e004      	b.n	21aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1aa>
    21a0:	6871      	ldr	r1, [r6, #4]
    21a2:	f04f 30ff 	mov.w	r0, #4294967295
    21a6:	b101      	cbz	r1, 21aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1aa>
    21a8:	4788      	blx	r1
    21aa:	f1b9 0f00 	cmp.w	r9, #0
    21ae:	d024      	beq.n	21fa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1fa>
    21b0:	b124      	cbz	r4, 21bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1bc>
    21b2:	2100      	movs	r1, #0
    21b4:	f240 70c7 	movw	r0, #1991	; 0x7c7
    21b8:	f3af 8000 	nop.w
    21bc:	f1b8 0f00 	cmp.w	r8, #0
    21c0:	d011      	beq.n	21e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e6>
    21c2:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    21c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    21ca:	4428      	add	r0, r5
    21cc:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    21d0:	2820      	cmp	r0, #32
    21d2:	d008      	beq.n	21e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e6>
    21d4:	b124      	cbz	r4, 21e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e0>
    21d6:	2100      	movs	r1, #0
    21d8:	f240 70ce 	movw	r0, #1998	; 0x7ce
    21dc:	f3af 8000 	nop.w
    21e0:	7870      	ldrb	r0, [r6, #1]
    21e2:	f001 ffb9 	bl	4158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    21e6:	b124      	cbz	r4, 21f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f2>
    21e8:	2100      	movs	r1, #0
    21ea:	f240 70d3 	movw	r0, #2003	; 0x7d3
    21ee:	f3af 8000 	nop.w
    21f2:	b017      	add	sp, #92	; 0x5c
    21f4:	4640      	mov	r0, r8
    21f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21fa:	4807      	ldr	r0, [pc, #28]	; (2218 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x218>)
    21fc:	2800      	cmp	r0, #0
    21fe:	bf18      	it	ne
    2200:	f3af 8000 	nopne.w
    2204:	b662      	cpsie	i
    2206:	e7d3      	b.n	21b0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1b0>
    2208:	e000ed04 	.word	0xe000ed04
    220c:	20001164 	.word	0x20001164
    2210:	00000000 	.word	0x00000000
    2214:	20000d64 	.word	0x20000d64
    2218:	00000000 	.word	0x00000000
    221c:	200010e4 	.word	0x200010e4
    2220:	00000000 	.word	0x00000000
    2224:	2000003c 	.word	0x2000003c

00002228 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    222c:	4606      	mov	r6, r0
    222e:	7800      	ldrb	r0, [r0, #0]
    2230:	b08d      	sub	sp, #52	; 0x34
    2232:	b118      	cbz	r0, 223c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    2234:	b00d      	add	sp, #52	; 0x34
    2236:	2000      	movs	r0, #0
    2238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    223c:	488c      	ldr	r0, [pc, #560]	; (2470 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    223e:	6800      	ldr	r0, [r0, #0]
    2240:	05c0      	lsls	r0, r0, #23
    2242:	0dc0      	lsrs	r0, r0, #23
    2244:	d00e      	beq.n	2264 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    2246:	3810      	subs	r0, #16
    2248:	b240      	sxtb	r0, r0
    224a:	2800      	cmp	r0, #0
    224c:	bfb8      	it	lt
    224e:	f000 000f 	andlt.w	r0, r0, #15
    2252:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2256:	bfac      	ite	ge
    2258:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    225c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2260:	0940      	lsrs	r0, r0, #5
    2262:	d0e7      	beq.n	2234 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    2264:	4d83      	ldr	r5, [pc, #524]	; (2474 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    2266:	4c84      	ldr	r4, [pc, #528]	; (2478 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    2268:	f04f 0b01 	mov.w	fp, #1
    226c:	2700      	movs	r7, #0
    226e:	b125      	cbz	r5, 227a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    2270:	2100      	movs	r1, #0
    2272:	f240 50e5 	movw	r0, #1509	; 0x5e5
    2276:	f3af 8000 	nop.w
    227a:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
    227e:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    2282:	f04f 0900 	mov.w	r9, #0
    2286:	b125      	cbz	r5, 2292 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    2288:	2100      	movs	r1, #0
    228a:	f240 50ea 	movw	r0, #1514	; 0x5ea
    228e:	f3af 8000 	nop.w
    2292:	487a      	ldr	r0, [pc, #488]	; (247c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    2294:	ea2b 080a 	bic.w	r8, fp, sl
    2298:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    229c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    22a0:	2240      	movs	r2, #64	; 0x40
    22a2:	f00a f8fa 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    22a6:	b125      	cbz	r5, 22b2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    22a8:	2100      	movs	r1, #0
    22aa:	f240 505e 	movw	r0, #1374	; 0x55e
    22ae:	f3af 8000 	nop.w
    22b2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    22b6:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    22ba:	4421      	add	r1, r4
    22bc:	4420      	add	r0, r4
    22be:	8c0a      	ldrh	r2, [r1, #32]
    22c0:	8402      	strh	r2, [r0, #32]
    22c2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    22c6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    22ca:	b125      	cbz	r5, 22d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    22cc:	2100      	movs	r1, #0
    22ce:	f240 5062 	movw	r0, #1378	; 0x562
    22d2:	f3af 8000 	nop.w
    22d6:	b125      	cbz	r5, 22e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    22d8:	2100      	movs	r1, #0
    22da:	f240 50ef 	movw	r0, #1519	; 0x5ef
    22de:	f3af 8000 	nop.w
    22e2:	a808      	add	r0, sp, #32
    22e4:	f000 ff4c 	bl	3180 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    22e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    22ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    22f0:	4643      	mov	r3, r8
    22f2:	466a      	mov	r2, sp
    22f4:	4631      	mov	r1, r6
    22f6:	a80a      	add	r0, sp, #40	; 0x28
    22f8:	f7ff f8aa 	bl	1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>
    22fc:	b125      	cbz	r5, 2308 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    22fe:	2100      	movs	r1, #0
    2300:	f240 50f5 	movw	r0, #1525	; 0x5f5
    2304:	f3af 8000 	nop.w
    2308:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    230c:	2820      	cmp	r0, #32
    230e:	d01a      	beq.n	2346 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    2310:	68e0      	ldr	r0, [r4, #12]
    2312:	9900      	ldr	r1, [sp, #0]
    2314:	1a09      	subs	r1, r1, r0
    2316:	0209      	lsls	r1, r1, #8
    2318:	17ca      	asrs	r2, r1, #31
    231a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    231e:	1209      	asrs	r1, r1, #8
    2320:	d511      	bpl.n	2346 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    2322:	9900      	ldr	r1, [sp, #0]
    2324:	4281      	cmp	r1, r0
    2326:	d902      	bls.n	232e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    2328:	9902      	ldr	r1, [sp, #8]
    232a:	1c49      	adds	r1, r1, #1
    232c:	9102      	str	r1, [sp, #8]
    232e:	e9dd 2100 	ldrd	r2, r1, [sp]
    2332:	1a89      	subs	r1, r1, r2
    2334:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2338:	4408      	add	r0, r1
    233a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    233e:	e9cd 2000 	strd	r2, r0, [sp]
    2342:	f04f 0901 	mov.w	r9, #1
    2346:	b125      	cbz	r5, 2352 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    2348:	2100      	movs	r1, #0
    234a:	f240 50ff 	movw	r0, #1535	; 0x5ff
    234e:	f3af 8000 	nop.w
    2352:	9900      	ldr	r1, [sp, #0]
    2354:	980a      	ldr	r0, [sp, #40]	; 0x28
    2356:	9a01      	ldr	r2, [sp, #4]
    2358:	1a09      	subs	r1, r1, r0
    235a:	1a10      	subs	r0, r2, r0
    235c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2360:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2364:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2368:	bf98      	it	ls
    236a:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    236e:	d809      	bhi.n	2384 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    2370:	4643      	mov	r3, r8
    2372:	4669      	mov	r1, sp
    2374:	4842      	ldr	r0, [pc, #264]	; (2480 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    2376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2378:	f7fe fb88 	bl	a8c <MPSL_IRQ_RADIO_Handler+0xb8>
    237c:	ea59 0000 	orrs.w	r0, r9, r0
    2380:	d129      	bne.n	23d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    2382:	e042      	b.n	240a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    2384:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2386:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    238a:	9002      	str	r0, [sp, #8]
    238c:	aa09      	add	r2, sp, #36	; 0x24
    238e:	a907      	add	r1, sp, #28
    2390:	4650      	mov	r0, sl
    2392:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    2396:	f000 fd83 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    239a:	f001 fa91 	bl	38c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    239e:	f000 fd63 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    23a2:	4681      	mov	r9, r0
    23a4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    23a8:	2820      	cmp	r0, #32
    23aa:	d03b      	beq.n	2424 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    23ac:	68e0      	ldr	r0, [r4, #12]
    23ae:	1d40      	adds	r0, r0, #5
    23b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23b4:	9900      	ldr	r1, [sp, #0]
    23b6:	4281      	cmp	r1, r0
    23b8:	d902      	bls.n	23c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    23ba:	9902      	ldr	r1, [sp, #8]
    23bc:	1c49      	adds	r1, r1, #1
    23be:	9102      	str	r1, [sp, #8]
    23c0:	e9dd 2100 	ldrd	r2, r1, [sp]
    23c4:	1a89      	subs	r1, r1, r2
    23c6:	9000      	str	r0, [sp, #0]
    23c8:	4408      	add	r0, r1
    23ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23ce:	9001      	str	r0, [sp, #4]
    23d0:	201f      	movs	r0, #31
    23d2:	f88d 000c 	strb.w	r0, [sp, #12]
    23d6:	9800      	ldr	r0, [sp, #0]
    23d8:	f009 ff05 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    23dc:	1c41      	adds	r1, r0, #1
    23de:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    23e2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    23e6:	4410      	add	r0, r2
    23e8:	4408      	add	r0, r1
    23ea:	e9c6 0704 	strd	r0, r7, [r6, #16]
    23ee:	b125      	cbz	r5, 23fa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    23f0:	2100      	movs	r1, #0
    23f2:	f240 601a 	movw	r0, #1562	; 0x61a
    23f6:	f3af 8000 	nop.w
    23fa:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    23fe:	4a21      	ldr	r2, [pc, #132]	; (2484 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    2400:	9b02      	ldr	r3, [sp, #8]
    2402:	fbe3 1002 	umlal	r1, r0, r3, r2
    2406:	e9c6 1004 	strd	r1, r0, [r6, #16]
    240a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    240e:	f88d 0014 	strb.w	r0, [sp, #20]
    2412:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2416:	2800      	cmp	r0, #0
    2418:	f47f af29 	bne.w	226e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    241c:	b00d      	add	sp, #52	; 0x34
    241e:	2001      	movs	r0, #1
    2420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2424:	f108 0809 	add.w	r8, r8, #9
    2428:	f1ba 0f00 	cmp.w	sl, #0
    242c:	d016      	beq.n	245c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    242e:	f001 fd47 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2432:	b998      	cbnz	r0, 245c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    2434:	f001 fc12 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2438:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    243c:	bf08      	it	eq
    243e:	200d      	moveq	r0, #13
    2440:	d00b      	beq.n	245a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    2442:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2446:	3856      	subs	r0, #86	; 0x56
    2448:	bf08      	it	eq
    244a:	201c      	moveq	r0, #28
    244c:	d005      	beq.n	245a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    244e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2452:	389f      	subs	r0, #159	; 0x9f
    2454:	bf14      	ite	ne
    2456:	4638      	movne	r0, r7
    2458:	2032      	moveq	r0, #50	; 0x32
    245a:	4480      	add	r8, r0
    245c:	9807      	ldr	r0, [sp, #28]
    245e:	4581      	cmp	r9, r0
    2460:	bf84      	itt	hi
    2462:	eba9 0000 	subhi.w	r0, r9, r0
    2466:	4480      	addhi	r8, r0
    2468:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    246c:	e7a2      	b.n	23b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    246e:	0000      	.short	0x0000
    2470:	e000ed04 	.word	0xe000ed04
    2474:	00000000 	.word	0x00000000
    2478:	20001164 	.word	0x20001164
    247c:	200010e4 	.word	0x200010e4
    2480:	0f424000 	.word	0x0f424000
    2484:	1e848000 	.word	0x1e848000

00002488 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2488:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    248c:	4d92      	ldr	r5, [pc, #584]	; (26d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    248e:	b08c      	sub	sp, #48	; 0x30
    2490:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2494:	2000      	movs	r0, #0
    2496:	9008      	str	r0, [sp, #32]
    2498:	9006      	str	r0, [sp, #24]
    249a:	2001      	movs	r0, #1
    249c:	4c8f      	ldr	r4, [pc, #572]	; (26dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    249e:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    24a2:	f04f 0800 	mov.w	r8, #0
    24a6:	4607      	mov	r7, r0
    24a8:	9007      	str	r0, [sp, #28]
    24aa:	b124      	cbz	r4, 24b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    24ac:	2100      	movs	r1, #0
    24ae:	f240 70e4 	movw	r0, #2020	; 0x7e4
    24b2:	f3af 8000 	nop.w
    24b6:	9807      	ldr	r0, [sp, #28]
    24b8:	2800      	cmp	r0, #0
    24ba:	d03c      	beq.n	2536 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    24bc:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    24c0:	b124      	cbz	r4, 24cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    24c2:	2100      	movs	r1, #0
    24c4:	f240 70e9 	movw	r0, #2025	; 0x7e9
    24c8:	f3af 8000 	nop.w
    24cc:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    24d0:	2240      	movs	r2, #64	; 0x40
    24d2:	ea27 060a 	bic.w	r6, r7, sl
    24d6:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    24da:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    24de:	4683      	mov	fp, r0
    24e0:	f009 ffdb 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    24e4:	b124      	cbz	r4, 24f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    24e6:	2100      	movs	r1, #0
    24e8:	f240 505e 	movw	r0, #1374	; 0x55e
    24ec:	f3af 8000 	nop.w
    24f0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    24f4:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    24f8:	4428      	add	r0, r5
    24fa:	4429      	add	r1, r5
    24fc:	9000      	str	r0, [sp, #0]
    24fe:	8c0a      	ldrh	r2, [r1, #32]
    2500:	8402      	strh	r2, [r0, #32]
    2502:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2506:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    250a:	b124      	cbz	r4, 2516 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    250c:	2100      	movs	r1, #0
    250e:	f240 5062 	movw	r0, #1378	; 0x562
    2512:	f3af 8000 	nop.w
    2516:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    251a:	f88d 0008 	strb.w	r0, [sp, #8]
    251e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2522:	b178      	cbz	r0, 2544 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2524:	2c00      	cmp	r4, #0
    2526:	bf1c      	itt	ne
    2528:	2100      	movne	r1, #0
    252a:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    252e:	d0bc      	beq.n	24aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    2530:	f3af 8000 	nop.w
    2534:	e7b9      	b.n	24aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    2536:	486a      	ldr	r0, [pc, #424]	; (26e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    2538:	2800      	cmp	r0, #0
    253a:	bf18      	it	ne
    253c:	f3af 8000 	nopne.w
    2540:	b662      	cpsie	i
    2542:	e7bb      	b.n	24bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2544:	b124      	cbz	r4, 2550 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    2546:	2100      	movs	r1, #0
    2548:	f240 70f3 	movw	r0, #2035	; 0x7f3
    254c:	f3af 8000 	nop.w
    2550:	980c      	ldr	r0, [sp, #48]	; 0x30
    2552:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2556:	2803      	cmp	r0, #3
    2558:	d17e      	bne.n	2658 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    255a:	9a00      	ldr	r2, [sp, #0]
    255c:	990c      	ldr	r1, [sp, #48]	; 0x30
    255e:	f892 0020 	ldrb.w	r0, [r2, #32]
    2562:	4288      	cmp	r0, r1
    2564:	bf14      	ite	ne
    2566:	f04f 0a00 	movne.w	sl, #0
    256a:	f04f 0a01 	moveq.w	sl, #1
    256e:	f102 0c20 	add.w	ip, r2, #32
    2572:	4683      	mov	fp, r0
    2574:	2220      	movs	r2, #32
    2576:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    257a:	e003      	b.n	2584 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    257c:	4602      	mov	r2, r0
    257e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2582:	7840      	ldrb	r0, [r0, #1]
    2584:	4288      	cmp	r0, r1
    2586:	d002      	beq.n	258e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    2588:	2820      	cmp	r0, #32
    258a:	d00a      	beq.n	25a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    258c:	e7f6      	b.n	257c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    258e:	2820      	cmp	r0, #32
    2590:	d007      	beq.n	25a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2592:	4583      	cmp	fp, r0
    2594:	d107      	bne.n	25a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    2596:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    259a:	7840      	ldrb	r0, [r0, #1]
    259c:	f88c 0000 	strb.w	r0, [ip]
    25a0:	e007      	b.n	25b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    25a2:	4640      	mov	r0, r8
    25a4:	e00c      	b.n	25c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    25a6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    25aa:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    25ae:	7840      	ldrb	r0, [r0, #1]
    25b0:	7048      	strb	r0, [r1, #1]
    25b2:	b124      	cbz	r4, 25be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    25b4:	2100      	movs	r1, #0
    25b6:	f240 40c9 	movw	r0, #1225	; 0x4c9
    25ba:	f3af 8000 	nop.w
    25be:	4638      	mov	r0, r7
    25c0:	46c3      	mov	fp, r8
    25c2:	ea10 0f0a 	tst.w	r0, sl
    25c6:	bf18      	it	ne
    25c8:	46bb      	movne	fp, r7
    25ca:	2800      	cmp	r0, #0
    25cc:	d04e      	beq.n	266c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    25ce:	b124      	cbz	r4, 25da <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    25d0:	2100      	movs	r1, #0
    25d2:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    25d6:	f3af 8000 	nop.w
    25da:	4632      	mov	r2, r6
    25dc:	2001      	movs	r0, #1
    25de:	990c      	ldr	r1, [sp, #48]	; 0x30
    25e0:	f7ff f94a 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    25e4:	b124      	cbz	r4, 25f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    25e6:	2100      	movs	r1, #0
    25e8:	f640 0001 	movw	r0, #2049	; 0x801
    25ec:	f3af 8000 	nop.w
    25f0:	483c      	ldr	r0, [pc, #240]	; (26e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    25f2:	2800      	cmp	r0, #0
    25f4:	bf18      	it	ne
    25f6:	f3af 8000 	nopne.w
    25fa:	f3ef 8010 	mrs	r0, PRIMASK
    25fe:	b672      	cpsid	i
    2600:	9007      	str	r0, [sp, #28]
    2602:	b124      	cbz	r4, 260e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    2604:	2100      	movs	r1, #0
    2606:	f640 0006 	movw	r0, #2054	; 0x806
    260a:	f3af 8000 	nop.w
    260e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2612:	f88d 0008 	strb.w	r0, [sp, #8]
    2616:	f89d 0008 	ldrb.w	r0, [sp, #8]
    261a:	b138      	cbz	r0, 262c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    261c:	2c00      	cmp	r4, #0
    261e:	bf1c      	itt	ne
    2620:	2100      	movne	r1, #0
    2622:	f640 000a 	movwne	r0, #2058	; 0x80a
    2626:	f43f af40 	beq.w	24aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    262a:	e781      	b.n	2530 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    262c:	f1bb 0f00 	cmp.w	fp, #0
    2630:	d009      	beq.n	2646 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    2632:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2636:	2820      	cmp	r0, #32
    2638:	d105      	bne.n	2646 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    263a:	4631      	mov	r1, r6
    263c:	2002      	movs	r0, #2
    263e:	f7ff f94d 	bl	18dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x554>
    2642:	9006      	str	r0, [sp, #24]
    2644:	b1f8      	cbz	r0, 2686 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    2646:	b124      	cbz	r4, 2652 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    2648:	2100      	movs	r1, #0
    264a:	f640 001e 	movw	r0, #2078	; 0x81e
    264e:	f3af 8000 	nop.w
    2652:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2656:	e000      	b.n	265a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2658:	e008      	b.n	266c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    265a:	ea27 0000 	bic.w	r0, r7, r0
    265e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    2662:	20ff      	movs	r0, #255	; 0xff
    2664:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    2668:	2001      	movs	r0, #1
    266a:	9008      	str	r0, [sp, #32]
    266c:	b124      	cbz	r4, 2678 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    266e:	2100      	movs	r1, #0
    2670:	f640 0027 	movw	r0, #2087	; 0x827
    2674:	f3af 8000 	nop.w
    2678:	9806      	ldr	r0, [sp, #24]
    267a:	4e1b      	ldr	r6, [pc, #108]	; (26e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    267c:	2802      	cmp	r0, #2
    267e:	d009      	beq.n	2694 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    2680:	2801      	cmp	r0, #1
    2682:	d010      	beq.n	26a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    2684:	e014      	b.n	26b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2686:	b19c      	cbz	r4, 26b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2688:	2100      	movs	r1, #0
    268a:	f640 0019 	movw	r0, #2073	; 0x819
    268e:	f3af 8000 	nop.w
    2692:	e7ec      	b.n	266e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2694:	f000 fd6e 	bl	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2698:	68a9      	ldr	r1, [r5, #8]
    269a:	1a08      	subs	r0, r1, r0
    269c:	f009 fda3 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    26a0:	6871      	ldr	r1, [r6, #4]
    26a2:	b921      	cbnz	r1, 26ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    26a4:	e004      	b.n	26b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    26a6:	6871      	ldr	r1, [r6, #4]
    26a8:	f04f 30ff 	mov.w	r0, #4294967295
    26ac:	b101      	cbz	r1, 26b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    26ae:	4788      	blx	r1
    26b0:	9807      	ldr	r0, [sp, #28]
    26b2:	b148      	cbz	r0, 26c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    26b4:	b124      	cbz	r4, 26c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    26b6:	2100      	movs	r1, #0
    26b8:	f640 003c 	movw	r0, #2108	; 0x83c
    26bc:	f3af 8000 	nop.w
    26c0:	9808      	ldr	r0, [sp, #32]
    26c2:	b00d      	add	sp, #52	; 0x34
    26c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26c8:	4805      	ldr	r0, [pc, #20]	; (26e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    26ca:	2800      	cmp	r0, #0
    26cc:	bf18      	it	ne
    26ce:	f3af 8000 	nopne.w
    26d2:	b662      	cpsie	i
    26d4:	e7ee      	b.n	26b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    26d6:	0000      	.short	0x0000
    26d8:	20001164 	.word	0x20001164
	...
    26e8:	2000003c 	.word	0x2000003c

000026ec <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    26ec:	2820      	cmp	r0, #32
    26ee:	bf24      	itt	cs
    26f0:	2000      	movcs	r0, #0
    26f2:	4770      	bxcs	lr
    26f4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    26f8:	4b03      	ldr	r3, [pc, #12]	; (2708 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    26fa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    26fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2702:	6042      	str	r2, [r0, #4]
    2704:	2001      	movs	r0, #1
    2706:	4770      	bx	lr
    2708:	20000d64 	.word	0x20000d64

0000270c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    270c:	b510      	push	{r4, lr}
    270e:	2820      	cmp	r0, #32
    2710:	d211      	bcs.n	2736 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2712:	490e      	ldr	r1, [pc, #56]	; (274c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2714:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2718:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    271c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2720:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2724:	b13b      	cbz	r3, 2736 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2726:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    272a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    272e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2732:	2a01      	cmp	r2, #1
    2734:	d001      	beq.n	273a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2736:	2000      	movs	r0, #0
    2738:	bd10      	pop	{r4, pc}
    273a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    273e:	4601      	mov	r1, r0
    2740:	2000      	movs	r0, #0
    2742:	f7ff f899 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    2746:	2001      	movs	r0, #1
    2748:	bd10      	pop	{r4, pc}
    274a:	0000      	.short	0x0000
    274c:	20001164 	.word	0x20001164

00002750 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2754:	4e86      	ldr	r6, [pc, #536]	; (2970 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    2756:	4680      	mov	r8, r0
    2758:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    275c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2760:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2764:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2768:	2800      	cmp	r0, #0
    276a:	d071      	beq.n	2850 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    276c:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    2770:	4d80      	ldr	r5, [pc, #512]	; (2974 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    2772:	b125      	cbz	r5, 277e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2774:	2100      	movs	r1, #0
    2776:	f640 30ae 	movw	r0, #2990	; 0xbae
    277a:	f3af 8000 	nop.w
    277e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2782:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2786:	2801      	cmp	r0, #1
    2788:	d018      	beq.n	27bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    278a:	b2c0      	uxtb	r0, r0
    278c:	2804      	cmp	r0, #4
    278e:	bf1c      	itt	ne
    2790:	2805      	cmpne	r0, #5
    2792:	2806      	cmpne	r0, #6
    2794:	d061      	beq.n	285a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    2796:	b12d      	cbz	r5, 27a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2798:	f04f 0100 	mov.w	r1, #0
    279c:	f640 30ba 	movw	r0, #3002	; 0xbba
    27a0:	f3af 8000 	nop.w
    27a4:	f001 fd3e 	bl	4224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    27a8:	b125      	cbz	r5, 27b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    27aa:	2100      	movs	r1, #0
    27ac:	f640 30be 	movw	r0, #3006	; 0xbbe
    27b0:	f3af 8000 	nop.w
    27b4:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    27b8:	2801      	cmp	r0, #1
    27ba:	d1e6      	bne.n	278a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    27bc:	2401      	movs	r4, #1
    27be:	b125      	cbz	r5, 27ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    27c0:	2100      	movs	r1, #0
    27c2:	f640 30c5 	movw	r0, #3013	; 0xbc5
    27c6:	f3af 8000 	nop.w
    27ca:	2c00      	cmp	r4, #0
    27cc:	d04b      	beq.n	2866 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    27ce:	2000      	movs	r0, #0
    27d0:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    27d4:	b125      	cbz	r5, 27e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    27d6:	2100      	movs	r1, #0
    27d8:	f640 30ca 	movw	r0, #3018	; 0xbca
    27dc:	f3af 8000 	nop.w
    27e0:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    27e4:	2001      	movs	r0, #1
    27e6:	ea20 090b 	bic.w	r9, r0, fp
    27ea:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    27ee:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    27f2:	2240      	movs	r2, #64	; 0x40
    27f4:	f009 fe51 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    27f8:	b125      	cbz	r5, 2804 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    27fa:	2100      	movs	r1, #0
    27fc:	f240 505e 	movw	r0, #1374	; 0x55e
    2800:	f3af 8000 	nop.w
    2804:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2808:	eb00 0a06 	add.w	sl, r0, r6
    280c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2810:	4430      	add	r0, r6
    2812:	8c01      	ldrh	r1, [r0, #32]
    2814:	f8aa 1020 	strh.w	r1, [sl, #32]
    2818:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    281c:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2820:	b125      	cbz	r5, 282c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2822:	2100      	movs	r1, #0
    2824:	f240 5062 	movw	r0, #1378	; 0x562
    2828:	f3af 8000 	nop.w
    282c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2830:	f88d 0000 	strb.w	r0, [sp]
    2834:	f89d 0000 	ldrb.w	r0, [sp]
    2838:	b1e0      	cbz	r0, 2874 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    283a:	2d00      	cmp	r5, #0
    283c:	bf1c      	itt	ne
    283e:	2100      	movne	r1, #0
    2840:	f44f 603d 	movne.w	r0, #3024	; 0xbd0
    2844:	d0bb      	beq.n	27be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2846:	bf00      	nop
    2848:	f3af 8000 	nop.w
    284c:	e7b7      	b.n	27be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    284e:	e7ff      	b.n	2850 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2850:	f640 31a5 	movw	r1, #2981	; 0xba5
    2854:	2070      	movs	r0, #112	; 0x70
    2856:	f001 fbab 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    285a:	464a      	mov	r2, r9
    285c:	4641      	mov	r1, r8
    285e:	2001      	movs	r0, #1
    2860:	f7ff f80a 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    2864:	e7a0      	b.n	27a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2866:	4844      	ldr	r0, [pc, #272]	; (2978 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2868:	2800      	cmp	r0, #0
    286a:	bf18      	it	ne
    286c:	f3af 8000 	nopne.w
    2870:	b662      	cpsie	i
    2872:	e7ac      	b.n	27ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2874:	b125      	cbz	r5, 2880 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    2876:	2100      	movs	r1, #0
    2878:	f640 30d4 	movw	r0, #3028	; 0xbd4
    287c:	f3af 8000 	nop.w
    2880:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2884:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2888:	4640      	mov	r0, r8
    288a:	461c      	mov	r4, r3
    288c:	f04f 0b20 	mov.w	fp, #32
    2890:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2894:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2898:	e004      	b.n	28a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    289a:	46a3      	mov	fp, r4
    289c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    28a0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    28a4:	4284      	cmp	r4, r0
    28a6:	d002      	beq.n	28ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    28a8:	2c20      	cmp	r4, #32
    28aa:	d02b      	beq.n	2904 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    28ac:	e7f5      	b.n	289a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    28ae:	2c20      	cmp	r4, #32
    28b0:	d028      	beq.n	2904 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    28b2:	42a3      	cmp	r3, r4
    28b4:	d104      	bne.n	28c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    28b6:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    28ba:	7840      	ldrb	r0, [r0, #1]
    28bc:	7008      	strb	r0, [r1, #0]
    28be:	e005      	b.n	28cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    28c0:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    28c4:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    28c8:	7840      	ldrb	r0, [r0, #1]
    28ca:	7048      	strb	r0, [r1, #1]
    28cc:	f1ba 0f00 	cmp.w	sl, #0
    28d0:	d011      	beq.n	28f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    28d2:	b125      	cbz	r5, 28de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    28d4:	2100      	movs	r1, #0
    28d6:	f240 40c1 	movw	r0, #1217	; 0x4c1
    28da:	f3af 8000 	nop.w
    28de:	f89a 0000 	ldrb.w	r0, [sl]
    28e2:	42a0      	cmp	r0, r4
    28e4:	d107      	bne.n	28f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    28e6:	b125      	cbz	r5, 28f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    28e8:	2100      	movs	r1, #0
    28ea:	f240 40c4 	movw	r0, #1220	; 0x4c4
    28ee:	f3af 8000 	nop.w
    28f2:	f88a b000 	strb.w	fp, [sl]
    28f6:	b15d      	cbz	r5, 2910 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    28f8:	2100      	movs	r1, #0
    28fa:	f240 40c9 	movw	r0, #1225	; 0x4c9
    28fe:	f3af 8000 	nop.w
    2902:	e000      	b.n	2906 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    2904:	b125      	cbz	r5, 2910 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2906:	2100      	movs	r1, #0
    2908:	f640 30d8 	movw	r0, #3032	; 0xbd8
    290c:	f3af 8000 	nop.w
    2910:	481a      	ldr	r0, [pc, #104]	; (297c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    2912:	2800      	cmp	r0, #0
    2914:	bf18      	it	ne
    2916:	f3af 8000 	nopne.w
    291a:	f3ef 8410 	mrs	r4, PRIMASK
    291e:	b672      	cpsid	i
    2920:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2924:	f88d 0000 	strb.w	r0, [sp]
    2928:	f89d 0000 	ldrb.w	r0, [sp]
    292c:	b138      	cbz	r0, 293e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    292e:	2d00      	cmp	r5, #0
    2930:	bf1c      	itt	ne
    2932:	2100      	movne	r1, #0
    2934:	f640 30de 	movwne	r0, #3038	; 0xbde
    2938:	f43f af41 	beq.w	27be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    293c:	e784      	b.n	2848 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    293e:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    2942:	20ff      	movs	r0, #255	; 0xff
    2944:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2948:	b154      	cbz	r4, 2960 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    294a:	2d00      	cmp	r5, #0
    294c:	bf08      	it	eq
    294e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2952:	2100      	movs	r1, #0
    2954:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2958:	f3af 8000 	nop.w
    295c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2960:	4805      	ldr	r0, [pc, #20]	; (2978 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2962:	2800      	cmp	r0, #0
    2964:	bf18      	it	ne
    2966:	f3af 8000 	nopne.w
    296a:	b662      	cpsie	i
    296c:	e7ed      	b.n	294a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    296e:	0000      	.short	0x0000
    2970:	20001164 	.word	0x20001164
	...

00002980 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2980:	b570      	push	{r4, r5, r6, lr}
    2982:	460d      	mov	r5, r1
    2984:	4606      	mov	r6, r0
    2986:	f001 fa89 	bl	3e9c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    298a:	480f      	ldr	r0, [pc, #60]	; (29c8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    298c:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    2990:	2400      	movs	r4, #0
    2992:	3880      	subs	r0, #128	; 0x80
    2994:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2998:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    299c:	b129      	cbz	r1, 29aa <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    299e:	1c61      	adds	r1, r4, #1
    29a0:	b2cc      	uxtb	r4, r1
    29a2:	2c20      	cmp	r4, #32
    29a4:	d3f8      	bcc.n	2998 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    29a6:	2020      	movs	r0, #32
    29a8:	bd70      	pop	{r4, r5, r6, pc}
    29aa:	4808      	ldr	r0, [pc, #32]	; (29cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    29ac:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    29b0:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    29b4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    29b8:	4621      	mov	r1, r4
    29ba:	6045      	str	r5, [r0, #4]
    29bc:	2001      	movs	r0, #1
    29be:	f7fe ff5b 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    29c2:	4620      	mov	r0, r4
    29c4:	bd70      	pop	{r4, r5, r6, pc}
    29c6:	0000      	.short	0x0000
    29c8:	20001164 	.word	0x20001164
    29cc:	20000d64 	.word	0x20000d64

000029d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    29d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29d4:	b083      	sub	sp, #12
    29d6:	f000 fbcd 	bl	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    29da:	4605      	mov	r5, r0
    29dc:	f000 fe9c 	bl	3718 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    29e0:	4c84      	ldr	r4, [pc, #528]	; (2bf4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    29e2:	6860      	ldr	r0, [r4, #4]
    29e4:	f1b0 3fff 	cmp.w	r0, #4294967295
    29e8:	bf1c      	itt	ne
    29ea:	f04f 30ff 	movne.w	r0, #4294967295
    29ee:	6060      	strne	r0, [r4, #4]
    29f0:	7fa0      	ldrb	r0, [r4, #30]
    29f2:	f8df 9204 	ldr.w	r9, [pc, #516]	; 2bf8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    29f6:	b990      	cbnz	r0, 2a1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    29f8:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    29fc:	1a40      	subs	r0, r0, r1
    29fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a02:	f44f 710c 	mov.w	r1, #560	; 0x230
    2a06:	f009 fc19 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2a0a:	68e1      	ldr	r1, [r4, #12]
    2a0c:	4408      	add	r0, r1
    2a0e:	1a28      	subs	r0, r5, r0
    2a10:	0200      	lsls	r0, r0, #8
    2a12:	17c1      	asrs	r1, r0, #31
    2a14:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2a18:	1200      	asrs	r0, r0, #8
    2a1a:	0fc0      	lsrs	r0, r0, #31
    2a1c:	d012      	beq.n	2a44 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    2a1e:	7e60      	ldrb	r0, [r4, #25]
    2a20:	b320      	cbz	r0, 2a6c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2a22:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2a26:	f88d 0000 	strb.w	r0, [sp]
    2a2a:	f89d 0000 	ldrb.w	r0, [sp]
    2a2e:	b1e8      	cbz	r0, 2a6c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2a30:	f000 fcce 	bl	33d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2a34:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    2a38:	b1f0      	cbz	r0, 2a78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    2a3a:	f240 31f5 	movw	r1, #1013	; 0x3f5
    2a3e:	2070      	movs	r0, #112	; 0x70
    2a40:	f001 fab6 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a44:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2a48:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2a4c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a50:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    2a54:	6840      	ldr	r0, [r0, #4]
    2a56:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2a5a:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    2a5e:	2108      	movs	r1, #8
    2a60:	4790      	blx	r2
    2a62:	f240 31dd 	movw	r1, #989	; 0x3dd
    2a66:	2070      	movs	r0, #112	; 0x70
    2a68:	f001 faa2 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a6c:	1ce8      	adds	r0, r5, #3
    2a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a72:	f000 fba5 	bl	31c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2a76:	e7dd      	b.n	2a34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    2a78:	2001      	movs	r0, #1
    2a7a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2a7e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2a82:	2820      	cmp	r0, #32
    2a84:	d021      	beq.n	2aca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    2a86:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
    2a8a:	2020      	movs	r0, #32
    2a8c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2a90:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2a94:	2000      	movs	r0, #0
    2a96:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2a9a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2a9e:	6020      	str	r0, [r4, #0]
    2aa0:	f000 ff14 	bl	38cc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    2aa4:	7720      	strb	r0, [r4, #28]
    2aa6:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    2aaa:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2aae:	1907      	adds	r7, r0, r4
    2ab0:	f897 0020 	ldrb.w	r0, [r7, #32]
    2ab4:	2820      	cmp	r0, #32
    2ab6:	d058      	beq.n	2b6a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2ab8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2abc:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    2ac0:	f899 001a 	ldrb.w	r0, [r9, #26]
    2ac4:	2801      	cmp	r0, #1
    2ac6:	d005      	beq.n	2ad4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    2ac8:	e04f      	b.n	2b6a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2aca:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    2ace:	2070      	movs	r0, #112	; 0x70
    2ad0:	f001 fa6e 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ad4:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    2ad8:	aa01      	add	r2, sp, #4
    2ada:	4669      	mov	r1, sp
    2adc:	4658      	mov	r0, fp
    2ade:	f000 f9df 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2ae2:	f000 feed 	bl	38c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    2ae6:	f000 f9bf 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2aea:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2aee:	2820      	cmp	r0, #32
    2af0:	d004      	beq.n	2afc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    2af2:	68e0      	ldr	r0, [r4, #12]
    2af4:	1d40      	adds	r0, r0, #5
    2af6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2afa:	e01d      	b.n	2b38 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    2afc:	f105 0a09 	add.w	sl, r5, #9
    2b00:	f1bb 0f00 	cmp.w	fp, #0
    2b04:	d016      	beq.n	2b34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2b06:	f001 f9db 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2b0a:	b998      	cbnz	r0, 2b34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2b0c:	f001 f8a6 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2b10:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2b14:	bf08      	it	eq
    2b16:	200d      	moveq	r0, #13
    2b18:	d00b      	beq.n	2b32 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    2b1a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2b1e:	3856      	subs	r0, #86	; 0x56
    2b20:	bf08      	it	eq
    2b22:	201c      	moveq	r0, #28
    2b24:	d005      	beq.n	2b32 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    2b26:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2b2a:	389f      	subs	r0, #159	; 0x9f
    2b2c:	bf14      	ite	ne
    2b2e:	2000      	movne	r0, #0
    2b30:	2032      	moveq	r0, #50	; 0x32
    2b32:	4482      	add	sl, r0
    2b34:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    2b38:	f8d9 2008 	ldr.w	r2, [r9, #8]
    2b3c:	1a81      	subs	r1, r0, r2
    2b3e:	0209      	lsls	r1, r1, #8
    2b40:	17cb      	asrs	r3, r1, #31
    2b42:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    2b46:	1209      	asrs	r1, r1, #8
    2b48:	2900      	cmp	r1, #0
    2b4a:	dc0e      	bgt.n	2b6a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2b4c:	f109 0308 	add.w	r3, r9, #8
    2b50:	4282      	cmp	r2, r0
    2b52:	d202      	bcs.n	2b5a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    2b54:	6899      	ldr	r1, [r3, #8]
    2b56:	1e49      	subs	r1, r1, #1
    2b58:	6099      	str	r1, [r3, #8]
    2b5a:	e9d3 2100 	ldrd	r2, r1, [r3]
    2b5e:	1a89      	subs	r1, r1, r2
    2b60:	6018      	str	r0, [r3, #0]
    2b62:	4408      	add	r0, r1
    2b64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b68:	6058      	str	r0, [r3, #4]
    2b6a:	4631      	mov	r1, r6
    2b6c:	2001      	movs	r0, #1
    2b6e:	f7fe feb5 	bl	18dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x554>
    2b72:	ea5f 0900 	movs.w	r9, r0
    2b76:	d0f8      	beq.n	2b6a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2b78:	4820      	ldr	r0, [pc, #128]	; (2bfc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    2b7a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2b7e:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2b82:	2802      	cmp	r0, #2
    2b84:	d104      	bne.n	2b90 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    2b86:	4632      	mov	r2, r6
    2b88:	4641      	mov	r1, r8
    2b8a:	2006      	movs	r0, #6
    2b8c:	f7fe fe74 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    2b90:	20ff      	movs	r0, #255	; 0xff
    2b92:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2b96:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    2b9a:	4e19      	ldr	r6, [pc, #100]	; (2c00 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    2b9c:	2820      	cmp	r0, #32
    2b9e:	bf1c      	itt	ne
    2ba0:	7870      	ldrbne	r0, [r6, #1]
    2ba2:	f001 fad9 	blne	4158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2ba6:	7f20      	ldrb	r0, [r4, #28]
    2ba8:	b120      	cbz	r0, 2bb4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    2baa:	f000 fe6b 	bl	3884 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2bae:	2000      	movs	r0, #0
    2bb0:	7720      	strb	r0, [r4, #28]
    2bb2:	7760      	strb	r0, [r4, #29]
    2bb4:	f1b9 0f02 	cmp.w	r9, #2
    2bb8:	d011      	beq.n	2bde <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    2bba:	f1b9 0f01 	cmp.w	r9, #1
    2bbe:	bf1c      	itt	ne
    2bc0:	b003      	addne	sp, #12
    2bc2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bc6:	f04f 30ff 	mov.w	r0, #4294967295
    2bca:	6871      	ldr	r1, [r6, #4]
    2bcc:	2900      	cmp	r1, #0
    2bce:	bf04      	itt	eq
    2bd0:	b003      	addeq	sp, #12
    2bd2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bd6:	b003      	add	sp, #12
    2bd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bdc:	4708      	bx	r1
    2bde:	68a0      	ldr	r0, [r4, #8]
    2be0:	1b40      	subs	r0, r0, r5
    2be2:	f009 fb00 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2be6:	6871      	ldr	r1, [r6, #4]
    2be8:	2900      	cmp	r1, #0
    2bea:	d1f4      	bne.n	2bd6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    2bec:	b003      	add	sp, #12
    2bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bf2:	0000      	.short	0x0000
    2bf4:	20001164 	.word	0x20001164
    2bf8:	20000d64 	.word	0x20000d64
    2bfc:	200010e4 	.word	0x200010e4
    2c00:	2000003c 	.word	0x2000003c

00002c04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2c04:	b570      	push	{r4, r5, r6, lr}
    2c06:	4c42      	ldr	r4, [pc, #264]	; (2d10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    2c08:	4605      	mov	r5, r0
    2c0a:	b082      	sub	sp, #8
    2c0c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2c10:	2820      	cmp	r0, #32
    2c12:	d008      	beq.n	2c26 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    2c14:	6860      	ldr	r0, [r4, #4]
    2c16:	f1b0 3fff 	cmp.w	r0, #4294967295
    2c1a:	d009      	beq.n	2c30 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    2c1c:	f640 21d9 	movw	r1, #2777	; 0xad9
    2c20:	2070      	movs	r0, #112	; 0x70
    2c22:	f001 f9c5 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c26:	f640 21d8 	movw	r1, #2776	; 0xad8
    2c2a:	2070      	movs	r0, #112	; 0x70
    2c2c:	f001 f9c0 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c30:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2c34:	4937      	ldr	r1, [pc, #220]	; (2d14 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    2c36:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c3a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    2c3e:	68b0      	ldr	r0, [r6, #8]
    2c40:	f009 fad1 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2c44:	4602      	mov	r2, r0
    2c46:	8af0      	ldrh	r0, [r6, #22]
    2c48:	7d31      	ldrb	r1, [r6, #20]
    2c4a:	4b33      	ldr	r3, [pc, #204]	; (2d18 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    2c4c:	4408      	add	r0, r1
    2c4e:	1c40      	adds	r0, r0, #1
    2c50:	1811      	adds	r1, r2, r0
    2c52:	429a      	cmp	r2, r3
    2c54:	d817      	bhi.n	2c86 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    2c56:	4a31      	ldr	r2, [pc, #196]	; (2d1c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    2c58:	4290      	cmp	r0, r2
    2c5a:	dc1b      	bgt.n	2c94 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    2c5c:	f1c2 0c00 	rsb	ip, r2, #0
    2c60:	4560      	cmp	r0, ip
    2c62:	db1e      	blt.n	2ca2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    2c64:	0056      	lsls	r6, r2, #1
    2c66:	428e      	cmp	r6, r1
    2c68:	bfdc      	itt	le
    2c6a:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2c6e:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2c72:	dd05      	ble.n	2c80 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2c74:	2900      	cmp	r1, #0
    2c76:	bfbc      	itt	lt
    2c78:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2c7c:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2c80:	1948      	adds	r0, r1, r5
    2c82:	4299      	cmp	r1, r3
    2c84:	d904      	bls.n	2c90 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    2c86:	f240 519e 	movw	r1, #1438	; 0x59e
    2c8a:	2070      	movs	r0, #112	; 0x70
    2c8c:	f001 f990 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c90:	4295      	cmp	r5, r2
    2c92:	dd04      	ble.n	2c9e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    2c94:	f240 519f 	movw	r1, #1439	; 0x59f
    2c98:	2070      	movs	r0, #112	; 0x70
    2c9a:	f001 f989 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c9e:	4565      	cmp	r5, ip
    2ca0:	da04      	bge.n	2cac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    2ca2:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    2ca6:	2070      	movs	r0, #112	; 0x70
    2ca8:	f001 f982 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cac:	4286      	cmp	r6, r0
    2cae:	bfdc      	itt	le
    2cb0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2cb4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2cb8:	dd05      	ble.n	2cc6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    2cba:	2800      	cmp	r0, #0
    2cbc:	bfbc      	itt	lt
    2cbe:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2cc2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2cc6:	aa01      	add	r2, sp, #4
    2cc8:	4669      	mov	r1, sp
    2cca:	f000 f8e9 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2cce:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2cd2:	280f      	cmp	r0, #15
    2cd4:	bf8c      	ite	hi
    2cd6:	2001      	movhi	r0, #1
    2cd8:	2000      	movls	r0, #0
    2cda:	9900      	ldr	r1, [sp, #0]
    2cdc:	4408      	add	r0, r1
    2cde:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2ce2:	6061      	str	r1, [r4, #4]
    2ce4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2ce8:	f88d 0000 	strb.w	r0, [sp]
    2cec:	f89d 0000 	ldrb.w	r0, [sp]
    2cf0:	2800      	cmp	r0, #0
    2cf2:	bf04      	itt	eq
    2cf4:	b002      	addeq	sp, #8
    2cf6:	bd70      	popeq	{r4, r5, r6, pc}
    2cf8:	2005      	movs	r0, #5
    2cfa:	f000 fbe7 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2cfe:	2800      	cmp	r0, #0
    2d00:	bf1c      	itt	ne
    2d02:	b002      	addne	sp, #8
    2d04:	bd70      	popne	{r4, r5, r6, pc}
    2d06:	f44f 612e 	mov.w	r1, #2784	; 0xae0
    2d0a:	2070      	movs	r0, #112	; 0x70
    2d0c:	f001 f950 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d10:	20001164 	.word	0x20001164
    2d14:	20000d64 	.word	0x20000d64
    2d18:	1e847fff 	.word	0x1e847fff
    2d1c:	0f424000 	.word	0x0f424000

00002d20 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2d20:	b570      	push	{r4, r5, r6, lr}
    2d22:	4c1c      	ldr	r4, [pc, #112]	; (2d94 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    2d24:	2120      	movs	r1, #32
    2d26:	f884 1020 	strb.w	r1, [r4, #32]
    2d2a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2d2e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2d32:	2000      	movs	r0, #0
    2d34:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2d38:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    2d3c:	1e42      	subs	r2, r0, #1
    2d3e:	e9c4 0200 	strd	r0, r2, [r4]
    2d42:	77a0      	strb	r0, [r4, #30]
    2d44:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2d48:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2d4c:	7720      	strb	r0, [r4, #28]
    2d4e:	7760      	strb	r0, [r4, #29]
    2d50:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    2d54:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    2d58:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2d5c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2d60:	2210      	movs	r2, #16
    2d62:	7088      	strb	r0, [r1, #2]
    2d64:	f801 0f04 	strb.w	r0, [r1, #4]!
    2d68:	1e52      	subs	r2, r2, #1
    2d6a:	d1fa      	bne.n	2d62 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    2d6c:	f000 fdb8 	bl	38e0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    2d70:	4d09      	ldr	r5, [pc, #36]	; (2d98 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    2d72:	2601      	movs	r6, #1
    2d74:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2d78:	20ff      	movs	r0, #255	; 0xff
    2d7a:	7028      	strb	r0, [r5, #0]
    2d7c:	4807      	ldr	r0, [pc, #28]	; (2d9c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2d7e:	f001 f9cd 	bl	411c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2d82:	7068      	strb	r0, [r5, #1]
    2d84:	f001 fa38 	bl	41f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2d88:	60a8      	str	r0, [r5, #8]
    2d8a:	f000 fd33 	bl	37f4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2d8e:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    2d92:	bd70      	pop	{r4, r5, r6, pc}
    2d94:	20001164 	.word	0x20001164
    2d98:	2000003c 	.word	0x2000003c
    2d9c:	000017a1 	.word	0x000017a1

00002da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    2da0:	b500      	push	{lr}
    2da2:	b083      	sub	sp, #12
    2da4:	4668      	mov	r0, sp
    2da6:	f000 f9eb 	bl	3180 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2daa:	9800      	ldr	r0, [sp, #0]
    2dac:	f009 fa1b 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2db0:	9a01      	ldr	r2, [sp, #4]
    2db2:	4b03      	ldr	r3, [pc, #12]	; (2dc0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    2db4:	2100      	movs	r1, #0
    2db6:	fbe2 0103 	umlal	r0, r1, r2, r3
    2dba:	b003      	add	sp, #12
    2dbc:	bd00      	pop	{pc}
    2dbe:	0000      	.short	0x0000
    2dc0:	1e848000 	.word	0x1e848000

00002dc4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2dc4:	b570      	push	{r4, r5, r6, lr}
    2dc6:	4606      	mov	r6, r0
    2dc8:	b082      	sub	sp, #8
    2dca:	461d      	mov	r5, r3
    2dcc:	4610      	mov	r0, r2
    2dce:	f009 fa0a 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2dd2:	4604      	mov	r4, r0
    2dd4:	4668      	mov	r0, sp
    2dd6:	f000 f9d3 	bl	3180 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2dda:	4920      	ldr	r1, [pc, #128]	; (2e5c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    2ddc:	9801      	ldr	r0, [sp, #4]
    2dde:	fba0 0201 	umull	r0, r2, r0, r1
    2de2:	1a30      	subs	r0, r6, r0
    2de4:	bf44      	itt	mi
    2de6:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    2dea:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    2dee:	d504      	bpl.n	2dfa <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    2df0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2df4:	2070      	movs	r0, #112	; 0x70
    2df6:	f001 f8db 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dfa:	4288      	cmp	r0, r1
    2dfc:	db04      	blt.n	2e08 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    2dfe:	f640 4101 	movw	r1, #3073	; 0xc01
    2e02:	2070      	movs	r0, #112	; 0x70
    2e04:	f001 f8d4 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e08:	4a15      	ldr	r2, [pc, #84]	; (2e60 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    2e0a:	1a21      	subs	r1, r4, r0
    2e0c:	2300      	movs	r3, #0
    2e0e:	1a8a      	subs	r2, r1, r2
    2e10:	f173 0200 	sbcs.w	r2, r3, #0
    2e14:	d318      	bcc.n	2e48 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2e16:	f8df c048 	ldr.w	ip, [pc, #72]	; 2e60 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    2e1a:	1b02      	subs	r2, r0, r4
    2e1c:	ebb2 0c0c 	subs.w	ip, r2, ip
    2e20:	f173 0300 	sbcs.w	r3, r3, #0
    2e24:	d310      	bcc.n	2e48 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2e26:	4b0f      	ldr	r3, [pc, #60]	; (2e64 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    2e28:	428b      	cmp	r3, r1
    2e2a:	bf3e      	ittt	cc
    2e2c:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    2e30:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    2e34:	1901      	addcc	r1, r0, r4
    2e36:	d307      	bcc.n	2e48 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2e38:	4293      	cmp	r3, r2
    2e3a:	d20a      	bcs.n	2e52 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    2e3c:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    2e40:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    2e44:	4408      	add	r0, r1
    2e46:	4241      	negs	r1, r0
    2e48:	f101 000f 	add.w	r0, r1, #15
    2e4c:	b002      	add	sp, #8
    2e4e:	1a28      	subs	r0, r5, r0
    2e50:	bd70      	pop	{r4, r5, r6, pc}
    2e52:	f640 21fa 	movw	r1, #2810	; 0xafa
    2e56:	2070      	movs	r0, #112	; 0x70
    2e58:	f001 f8aa 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e5c:	1e848000 	.word	0x1e848000
    2e60:	0f424000 	.word	0x0f424000
    2e64:	1e847fff 	.word	0x1e847fff

00002e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2e68:	0b41      	lsrs	r1, r0, #13
    2e6a:	f248 6237 	movw	r2, #34359	; 0x8637
    2e6e:	4351      	muls	r1, r2
    2e70:	0c0a      	lsrs	r2, r1, #16
    2e72:	4b09      	ldr	r3, [pc, #36]	; (2e98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2e74:	0251      	lsls	r1, r2, #9
    2e76:	fb02 0203 	mla	r2, r2, r3, r0
    2e7a:	4808      	ldr	r0, [pc, #32]	; (2e9c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2e7c:	4350      	muls	r0, r2
    2e7e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2e82:	306e      	adds	r0, #110	; 0x6e
    2e84:	0d40      	lsrs	r0, r0, #21
    2e86:	425b      	negs	r3, r3
    2e88:	fb10 f303 	smulbb	r3, r0, r3
    2e8c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2e90:	bf88      	it	hi
    2e92:	1c49      	addhi	r1, r1, #1
    2e94:	4408      	add	r0, r1
    2e96:	4770      	bx	lr
    2e98:	ffffc2f7 	.word	0xffffc2f7
    2e9c:	00010c6f 	.word	0x00010c6f

00002ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2ea0:	0b43      	lsrs	r3, r0, #13
    2ea2:	f248 6c37 	movw	ip, #34359	; 0x8637
    2ea6:	fb03 f30c 	mul.w	r3, r3, ip
    2eaa:	b430      	push	{r4, r5}
    2eac:	0c1b      	lsrs	r3, r3, #16
    2eae:	f8df c044 	ldr.w	ip, [pc, #68]	; 2ef4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2eb2:	025c      	lsls	r4, r3, #9
    2eb4:	fb03 030c 	mla	r3, r3, ip, r0
    2eb8:	480f      	ldr	r0, [pc, #60]	; (2ef8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2eba:	4358      	muls	r0, r3
    2ebc:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2ec0:	eb04 000c 	add.w	r0, r4, ip
    2ec4:	f643 5409 	movw	r4, #15625	; 0x3d09
    2ec8:	fb1c f404 	smulbb	r4, ip, r4
    2ecc:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2ed0:	f643 5508 	movw	r5, #15624	; 0x3d08
    2ed4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2ed8:	442c      	add	r4, r5
    2eda:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2ede:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2ee2:	bf84      	itt	hi
    2ee4:	f04f 0c00 	movhi.w	ip, #0
    2ee8:	1c40      	addhi	r0, r0, #1
    2eea:	6008      	str	r0, [r1, #0]
    2eec:	f882 c000 	strb.w	ip, [r2]
    2ef0:	bc30      	pop	{r4, r5}
    2ef2:	4770      	bx	lr
    2ef4:	ffffc2f7 	.word	0xffffc2f7
    2ef8:	00010c6f 	.word	0x00010c6f

00002efc <MPSL_IRQ_RTC0_Handler>:
    2efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f00:	4d3b      	ldr	r5, [pc, #236]	; (2ff0 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2f02:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2f06:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2ff4 <MPSL_IRQ_RTC0_Handler+0xf8>
    2f0a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2f0e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2f12:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2f16:	f04f 0400 	mov.w	r4, #0
    2f1a:	d019      	beq.n	2f50 <MPSL_IRQ_RTC0_Handler+0x54>
    2f1c:	4836      	ldr	r0, [pc, #216]	; (2ff8 <MPSL_IRQ_RTC0_Handler+0xfc>)
    2f1e:	6800      	ldr	r0, [r0, #0]
    2f20:	b1b0      	cbz	r0, 2f50 <MPSL_IRQ_RTC0_Handler+0x54>
    2f22:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2f26:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2f2a:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    2f2e:	f8d8 1000 	ldr.w	r1, [r8]
    2f32:	1a40      	subs	r0, r0, r1
    2f34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f38:	2802      	cmp	r0, #2
    2f3a:	d302      	bcc.n	2f42 <MPSL_IRQ_RTC0_Handler+0x46>
    2f3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2f40:	d906      	bls.n	2f50 <MPSL_IRQ_RTC0_Handler+0x54>
    2f42:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2f46:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2f4a:	2004      	movs	r0, #4
    2f4c:	f7fe fe9c 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f50:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2f54:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2f58:	d01a      	beq.n	2f90 <MPSL_IRQ_RTC0_Handler+0x94>
    2f5a:	4828      	ldr	r0, [pc, #160]	; (2ffc <MPSL_IRQ_RTC0_Handler+0x100>)
    2f5c:	6800      	ldr	r0, [r0, #0]
    2f5e:	b1b8      	cbz	r0, 2f90 <MPSL_IRQ_RTC0_Handler+0x94>
    2f60:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    2f64:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2f68:	4825      	ldr	r0, [pc, #148]	; (3000 <MPSL_IRQ_RTC0_Handler+0x104>)
    2f6a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2f6e:	f8d8 1000 	ldr.w	r1, [r8]
    2f72:	1a40      	subs	r0, r0, r1
    2f74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f78:	2802      	cmp	r0, #2
    2f7a:	d302      	bcc.n	2f82 <MPSL_IRQ_RTC0_Handler+0x86>
    2f7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2f80:	d906      	bls.n	2f90 <MPSL_IRQ_RTC0_Handler+0x94>
    2f82:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2f86:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2f8a:	2005      	movs	r0, #5
    2f8c:	f7fe fe7c 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f90:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2f94:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2f98:	d01a      	beq.n	2fd0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2f9a:	481a      	ldr	r0, [pc, #104]	; (3004 <MPSL_IRQ_RTC0_Handler+0x108>)
    2f9c:	6800      	ldr	r0, [r0, #0]
    2f9e:	b1b8      	cbz	r0, 2fd0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2fa0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    2fa4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2fa8:	4817      	ldr	r0, [pc, #92]	; (3008 <MPSL_IRQ_RTC0_Handler+0x10c>)
    2faa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2fae:	f8d8 1000 	ldr.w	r1, [r8]
    2fb2:	1a40      	subs	r0, r0, r1
    2fb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fb8:	2802      	cmp	r0, #2
    2fba:	d302      	bcc.n	2fc2 <MPSL_IRQ_RTC0_Handler+0xc6>
    2fbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2fc0:	d906      	bls.n	2fd0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2fc2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2fc6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2fca:	2006      	movs	r0, #6
    2fcc:	f7fe fe5c 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fd0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    2fd4:	2800      	cmp	r0, #0
    2fd6:	bf08      	it	eq
    2fd8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fdc:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    2fe0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2fe4:	4809      	ldr	r0, [pc, #36]	; (300c <MPSL_IRQ_RTC0_Handler+0x110>)
    2fe6:	68c1      	ldr	r1, [r0, #12]
    2fe8:	1c49      	adds	r1, r1, #1
    2fea:	60c1      	str	r1, [r0, #12]
    2fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ff0:	4000b000 	.word	0x4000b000
    2ff4:	4000b504 	.word	0x4000b504
    2ff8:	4000b140 	.word	0x4000b140
    2ffc:	4000b144 	.word	0x4000b144
    3000:	4000b004 	.word	0x4000b004
    3004:	4000b148 	.word	0x4000b148
    3008:	4000b008 	.word	0x4000b008
    300c:	20000048 	.word	0x20000048

00003010 <MPSL_IRQ_TIMER0_Handler>:
    3010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3014:	4d38      	ldr	r5, [pc, #224]	; (30f8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3016:	7828      	ldrb	r0, [r5, #0]
    3018:	2804      	cmp	r0, #4
    301a:	d068      	beq.n	30ee <MPSL_IRQ_TIMER0_Handler+0xde>
    301c:	1ca8      	adds	r0, r5, #2
    301e:	2201      	movs	r2, #1
    3020:	7801      	ldrb	r1, [r0, #0]
    3022:	b159      	cbz	r1, 303c <MPSL_IRQ_TIMER0_Handler+0x2c>
    3024:	2901      	cmp	r1, #1
    3026:	bf08      	it	eq
    3028:	706a      	strbeq	r2, [r5, #1]
    302a:	d002      	beq.n	3032 <MPSL_IRQ_TIMER0_Handler+0x22>
    302c:	7869      	ldrb	r1, [r5, #1]
    302e:	2900      	cmp	r1, #0
    3030:	d058      	beq.n	30e4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    3032:	2102      	movs	r1, #2
    3034:	7001      	strb	r1, [r0, #0]
    3036:	7840      	ldrb	r0, [r0, #1]
    3038:	f000 fafe 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    303c:	4c2f      	ldr	r4, [pc, #188]	; (30fc <MPSL_IRQ_TIMER0_Handler+0xec>)
    303e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3042:	f04f 0800 	mov.w	r8, #0
    3046:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    304a:	f44f 7780 	mov.w	r7, #256	; 0x100
    304e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    3052:	d00a      	beq.n	306a <MPSL_IRQ_TIMER0_Handler+0x5a>
    3054:	482a      	ldr	r0, [pc, #168]	; (3100 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3056:	6800      	ldr	r0, [r0, #0]
    3058:	b138      	cbz	r0, 306a <MPSL_IRQ_TIMER0_Handler+0x5a>
    305a:	2003      	movs	r0, #3
    305c:	f000 faec 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3060:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3064:	2003      	movs	r0, #3
    3066:	f7fe fe0f 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    306a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    306e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3072:	d00a      	beq.n	308a <MPSL_IRQ_TIMER0_Handler+0x7a>
    3074:	4823      	ldr	r0, [pc, #140]	; (3104 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    3076:	6800      	ldr	r0, [r0, #0]
    3078:	b138      	cbz	r0, 308a <MPSL_IRQ_TIMER0_Handler+0x7a>
    307a:	2002      	movs	r0, #2
    307c:	f000 fadc 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3080:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3084:	2002      	movs	r0, #2
    3086:	f7fe fdff 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    308a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    308e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3092:	d00a      	beq.n	30aa <MPSL_IRQ_TIMER0_Handler+0x9a>
    3094:	481c      	ldr	r0, [pc, #112]	; (3108 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3096:	6800      	ldr	r0, [r0, #0]
    3098:	b138      	cbz	r0, 30aa <MPSL_IRQ_TIMER0_Handler+0x9a>
    309a:	2001      	movs	r0, #1
    309c:	f000 facc 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30a0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30a4:	2001      	movs	r0, #1
    30a6:	f7fe fdef 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30aa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30ae:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    30b2:	bf08      	it	eq
    30b4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    30b8:	4814      	ldr	r0, [pc, #80]	; (310c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    30ba:	6800      	ldr	r0, [r0, #0]
    30bc:	2800      	cmp	r0, #0
    30be:	bf08      	it	eq
    30c0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    30c4:	2000      	movs	r0, #0
    30c6:	f000 fab7 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30ca:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30ce:	2004      	movs	r0, #4
    30d0:	7028      	strb	r0, [r5, #0]
    30d2:	f8c5 8004 	str.w	r8, [r5, #4]
    30d6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    30da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    30de:	2000      	movs	r0, #0
    30e0:	f7fe bdd2 	b.w	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30e4:	f240 41a3 	movw	r1, #1187	; 0x4a3
    30e8:	206c      	movs	r0, #108	; 0x6c
    30ea:	f000 ff61 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    30f2:	2007      	movs	r0, #7
    30f4:	f7fe bdc8 	b.w	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30f8:	20000048 	.word	0x20000048
    30fc:	40008000 	.word	0x40008000
    3100:	4000814c 	.word	0x4000814c
    3104:	40008148 	.word	0x40008148
    3108:	40008144 	.word	0x40008144
    310c:	40008140 	.word	0x40008140
    3110:	2201      	movs	r2, #1
    3112:	0211      	lsls	r1, r2, #8
    3114:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3118:	2000      	movs	r0, #0
    311a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    311e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    3122:	f3bf 8f4f 	dsb	sy
    3126:	f3bf 8f6f 	isb	sy
    312a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    312e:	490e      	ldr	r1, [pc, #56]	; (3168 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3130:	f841 2f04 	str.w	r2, [r1, #4]!
    3134:	1e43      	subs	r3, r0, #1
    3136:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    313a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    313e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3142:	4b0a      	ldr	r3, [pc, #40]	; (316c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3144:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3148:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    314c:	1d1b      	adds	r3, r3, #4
    314e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3152:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3156:	1d1b      	adds	r3, r3, #4
    3158:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    315c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3160:	60ca      	str	r2, [r1, #12]
    3162:	4903      	ldr	r1, [pc, #12]	; (3170 <MPSL_IRQ_TIMER0_Handler+0x160>)
    3164:	7048      	strb	r0, [r1, #1]
    3166:	4770      	bx	lr
    3168:	40008000 	.word	0x40008000
    316c:	40008004 	.word	0x40008004
    3170:	20000048 	.word	0x20000048

00003174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3174:	4801      	ldr	r0, [pc, #4]	; (317c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3176:	6800      	ldr	r0, [r0, #0]
    3178:	4770      	bx	lr
    317a:	0000      	.short	0x0000
    317c:	4000b504 	.word	0x4000b504

00003180 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    3180:	b430      	push	{r4, r5}
    3182:	f3ef 8c10 	mrs	ip, PRIMASK
    3186:	b672      	cpsid	i
    3188:	2500      	movs	r5, #0
    318a:	4b0b      	ldr	r3, [pc, #44]	; (31b8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    318c:	4a0b      	ldr	r2, [pc, #44]	; (31bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    318e:	bf00      	nop
    3190:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    3194:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    3198:	b12c      	cbz	r4, 31a6 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    319a:	68d1      	ldr	r1, [r2, #12]
    319c:	1c49      	adds	r1, r1, #1
    319e:	60d1      	str	r1, [r2, #12]
    31a0:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    31a4:	e7f4      	b.n	3190 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    31a6:	68d2      	ldr	r2, [r2, #12]
    31a8:	f1bc 0f00 	cmp.w	ip, #0
    31ac:	d100      	bne.n	31b0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    31ae:	b662      	cpsie	i
    31b0:	e9c0 1200 	strd	r1, r2, [r0]
    31b4:	bc30      	pop	{r4, r5}
    31b6:	4770      	bx	lr
    31b8:	4000b000 	.word	0x4000b000
    31bc:	20000048 	.word	0x20000048

000031c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    31c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31c4:	4e46      	ldr	r6, [pc, #280]	; (32e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    31c6:	4605      	mov	r5, r0
    31c8:	1eb7      	subs	r7, r6, #2
    31ca:	7833      	ldrb	r3, [r6, #0]
    31cc:	68b9      	ldr	r1, [r7, #8]
    31ce:	2b01      	cmp	r3, #1
    31d0:	bf04      	itt	eq
    31d2:	42a9      	cmpeq	r1, r5
    31d4:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31d8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    31dc:	4a41      	ldr	r2, [pc, #260]	; (32e4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    31de:	6010      	str	r0, [r2, #0]
    31e0:	4a42      	ldr	r2, [pc, #264]	; (32ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    31e2:	4841      	ldr	r0, [pc, #260]	; (32e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    31e4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    31e8:	f102 0c04 	add.w	ip, r2, #4
    31ec:	f04f 0400 	mov.w	r4, #0
    31f0:	2b00      	cmp	r3, #0
    31f2:	d062      	beq.n	32ba <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    31f4:	483e      	ldr	r0, [pc, #248]	; (32f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    31f6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    31fa:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    31fe:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3202:	bf00      	nop
    3204:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    3208:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    320c:	f04f 0801 	mov.w	r8, #1
    3210:	2800      	cmp	r0, #0
    3212:	bf01      	itttt	eq
    3214:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    3218:	2800      	cmpeq	r0, #0
    321a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    321e:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    3222:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3226:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    322a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    322e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3232:	4830      	ldr	r0, [pc, #192]	; (32f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3234:	f8d0 c000 	ldr.w	ip, [r0]
    3238:	eba5 0c0c 	sub.w	ip, r5, ip
    323c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3240:	f1bc 0f02 	cmp.w	ip, #2
    3244:	d344      	bcc.n	32d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3246:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    324a:	d841      	bhi.n	32d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    324c:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3250:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3254:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3258:	b12b      	cbz	r3, 3266 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    325a:	6802      	ldr	r2, [r0, #0]
    325c:	1a8a      	subs	r2, r1, r2
    325e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3262:	2a02      	cmp	r2, #2
    3264:	d3f9      	bcc.n	325a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    3266:	f8c7 8004 	str.w	r8, [r7, #4]
    326a:	703c      	strb	r4, [r7, #0]
    326c:	f7ff ff50 	bl	3110 <MPSL_IRQ_TIMER0_Handler+0x100>
    3270:	4821      	ldr	r0, [pc, #132]	; (32f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3272:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3276:	f364 0101 	bfi	r1, r4, #0, #2
    327a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    327e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3282:	2102      	movs	r1, #2
    3284:	f361 0201 	bfi	r2, r1, #0, #2
    3288:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    328c:	2104      	movs	r1, #4
    328e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    3292:	f8c0 800c 	str.w	r8, [r0, #12]
    3296:	6879      	ldr	r1, [r7, #4]
    3298:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    329c:	1580      	asrs	r0, r0, #22
    329e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    32a2:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    32a6:	4915      	ldr	r1, [pc, #84]	; (32fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    32a8:	05c0      	lsls	r0, r0, #23
    32aa:	6008      	str	r0, [r1, #0]
    32ac:	2004      	movs	r0, #4
    32ae:	60bd      	str	r5, [r7, #8]
    32b0:	7070      	strb	r0, [r6, #1]
    32b2:	f886 8000 	strb.w	r8, [r6]
    32b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32ba:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    32be:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    32c2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    32c6:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    32ca:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    32ce:	e799      	b.n	3204 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    32d0:	2000      	movs	r0, #0
    32d2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    32d6:	f240 2197 	movw	r1, #663	; 0x297
    32da:	206c      	movs	r0, #108	; 0x6c
    32dc:	f000 fe68 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32e0:	2000004a 	.word	0x2000004a
    32e4:	4001f508 	.word	0x4001f508
    32e8:	fffbfffd 	.word	0xfffbfffd
    32ec:	4000b000 	.word	0x4000b000
    32f0:	fffafffd 	.word	0xfffafffd
    32f4:	4000b504 	.word	0x4000b504
    32f8:	40008000 	.word	0x40008000
    32fc:	4001f504 	.word	0x4001f504

00003300 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3300:	b570      	push	{r4, r5, r6, lr}
    3302:	4c2a      	ldr	r4, [pc, #168]	; (33ac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    3304:	68a1      	ldr	r1, [r4, #8]
    3306:	4281      	cmp	r1, r0
    3308:	bf14      	ite	ne
    330a:	2201      	movne	r2, #1
    330c:	2200      	moveq	r2, #0
    330e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 33b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    3312:	f89c 5000 	ldrb.w	r5, [ip]
    3316:	2d02      	cmp	r5, #2
    3318:	d002      	beq.n	3320 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    331a:	2a00      	cmp	r2, #0
    331c:	d034      	beq.n	3388 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    331e:	e002      	b.n	3326 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3320:	2a00      	cmp	r2, #0
    3322:	bf08      	it	eq
    3324:	bd70      	popeq	{r4, r5, r6, pc}
    3326:	7862      	ldrb	r2, [r4, #1]
    3328:	b39a      	cbz	r2, 3392 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    332a:	4b22      	ldr	r3, [pc, #136]	; (33b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    332c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3330:	601a      	str	r2, [r3, #0]
    3332:	4b21      	ldr	r3, [pc, #132]	; (33b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3334:	1392      	asrs	r2, r2, #14
    3336:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    333a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    333e:	2200      	movs	r2, #0
    3340:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3344:	4a1d      	ldr	r2, [pc, #116]	; (33bc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3346:	6816      	ldr	r6, [r2, #0]
    3348:	1b86      	subs	r6, r0, r6
    334a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    334e:	2e02      	cmp	r6, #2
    3350:	d324      	bcc.n	339c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3352:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3356:	d821      	bhi.n	339c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3358:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    335c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3360:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3364:	b12d      	cbz	r5, 3372 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    3366:	6813      	ldr	r3, [r2, #0]
    3368:	1acb      	subs	r3, r1, r3
    336a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    336e:	2b02      	cmp	r3, #2
    3370:	d3f9      	bcc.n	3366 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    3372:	4b13      	ldr	r3, [pc, #76]	; (33c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3374:	2102      	movs	r1, #2
    3376:	074a      	lsls	r2, r1, #29
    3378:	601a      	str	r2, [r3, #0]
    337a:	60a0      	str	r0, [r4, #8]
    337c:	2004      	movs	r0, #4
    337e:	f88c 0001 	strb.w	r0, [ip, #1]
    3382:	f88c 1000 	strb.w	r1, [ip]
    3386:	bd70      	pop	{r4, r5, r6, pc}
    3388:	f240 21a5 	movw	r1, #677	; 0x2a5
    338c:	206c      	movs	r0, #108	; 0x6c
    338e:	f000 fe0f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3392:	f240 21a9 	movw	r1, #681	; 0x2a9
    3396:	206c      	movs	r0, #108	; 0x6c
    3398:	f000 fe0a 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    339c:	2000      	movs	r0, #0
    339e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    33a2:	f240 21b5 	movw	r1, #693	; 0x2b5
    33a6:	206c      	movs	r0, #108	; 0x6c
    33a8:	f000 fe02 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33ac:	20000048 	.word	0x20000048
    33b0:	2000004a 	.word	0x2000004a
    33b4:	4001f508 	.word	0x4001f508
    33b8:	4000b000 	.word	0x4000b000
    33bc:	4000b504 	.word	0x4000b504
    33c0:	4001f504 	.word	0x4001f504

000033c4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    33c4:	4801      	ldr	r0, [pc, #4]	; (33cc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    33c6:	6880      	ldr	r0, [r0, #8]
    33c8:	4770      	bx	lr
    33ca:	0000      	.short	0x0000
    33cc:	20000048 	.word	0x20000048

000033d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    33d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33d4:	4836      	ldr	r0, [pc, #216]	; (34b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    33d6:	4a35      	ldr	r2, [pc, #212]	; (34ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    33d8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    33dc:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 34b4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    33e0:	1d03      	adds	r3, r0, #4
    33e2:	2100      	movs	r1, #0
    33e4:	f89c 4000 	ldrb.w	r4, [ip]
    33e8:	b184      	cbz	r4, 340c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    33ea:	4a33      	ldr	r2, [pc, #204]	; (34b8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    33ec:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    33f0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    33f4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    33f8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    33fc:	2301      	movs	r3, #1
    33fe:	2a00      	cmp	r2, #0
    3400:	bf04      	itt	eq
    3402:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3406:	2800      	cmpeq	r0, #0
    3408:	d111      	bne.n	342e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    340a:	e00a      	b.n	3422 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    340c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3410:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3414:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3418:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    341c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3420:	e7ea      	b.n	33f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3422:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3426:	f44f 6000 	mov.w	r0, #2048	; 0x800
    342a:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    342e:	2c02      	cmp	r4, #2
    3430:	d004      	beq.n	343c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    3432:	f240 21c1 	movw	r1, #705	; 0x2c1
    3436:	206c      	movs	r0, #108	; 0x6c
    3438:	f000 fdba 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    343c:	4e1f      	ldr	r6, [pc, #124]	; (34bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    343e:	6830      	ldr	r0, [r6, #0]
    3440:	4c1f      	ldr	r4, [pc, #124]	; (34c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3442:	1cc0      	adds	r0, r0, #3
    3444:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3448:	68a2      	ldr	r2, [r4, #8]
    344a:	4d1e      	ldr	r5, [pc, #120]	; (34c4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    344c:	4290      	cmp	r0, r2
    344e:	d00b      	beq.n	3468 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3450:	6837      	ldr	r7, [r6, #0]
    3452:	1bd7      	subs	r7, r2, r7
    3454:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3458:	2f04      	cmp	r7, #4
    345a:	d305      	bcc.n	3468 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    345c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    3460:	d802      	bhi.n	3468 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3462:	f7ff fead 	bl	31c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3466:	e01b      	b.n	34a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3468:	6830      	ldr	r0, [r6, #0]
    346a:	1a10      	subs	r0, r2, r0
    346c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3470:	2802      	cmp	r0, #2
    3472:	d313      	bcc.n	349c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    3474:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3478:	d810      	bhi.n	349c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    347a:	4a13      	ldr	r2, [pc, #76]	; (34c8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    347c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3480:	6010      	str	r0, [r2, #0]
    3482:	6063      	str	r3, [r4, #4]
    3484:	7021      	strb	r1, [r4, #0]
    3486:	606b      	str	r3, [r5, #4]
    3488:	60eb      	str	r3, [r5, #12]
    348a:	0040      	lsls	r0, r0, #1
    348c:	1f11      	subs	r1, r2, #4
    348e:	6008      	str	r0, [r1, #0]
    3490:	2004      	movs	r0, #4
    3492:	f88c 0001 	strb.w	r0, [ip, #1]
    3496:	f88c 3000 	strb.w	r3, [ip]
    349a:	e001      	b.n	34a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    349c:	6063      	str	r3, [r4, #4]
    349e:	7021      	strb	r1, [r4, #0]
    34a0:	6860      	ldr	r0, [r4, #4]
    34a2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    34a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34aa:	0000      	.short	0x0000
    34ac:	fffbfffd 	.word	0xfffbfffd
    34b0:	4000b000 	.word	0x4000b000
    34b4:	2000004a 	.word	0x2000004a
    34b8:	fffafffd 	.word	0xfffafffd
    34bc:	4000b504 	.word	0x4000b504
    34c0:	20000048 	.word	0x20000048
    34c4:	40008000 	.word	0x40008000
    34c8:	4001f508 	.word	0x4001f508

000034cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    34cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34d0:	4a54      	ldr	r2, [pc, #336]	; (3624 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    34d2:	2500      	movs	r5, #0
    34d4:	2401      	movs	r4, #1
    34d6:	f892 c000 	ldrb.w	ip, [r2]
    34da:	7853      	ldrb	r3, [r2, #1]
    34dc:	f44f 76a0 	mov.w	r6, #320	; 0x140
    34e0:	2807      	cmp	r0, #7
    34e2:	d27d      	bcs.n	35e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    34e4:	e8df f000 	tbb	[pc, r0]
    34e8:	04040404 	.word	0x04040404
    34ec:	00585858 	.word	0x00585858
    34f0:	4a4d      	ldr	r2, [pc, #308]	; (3628 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    34f2:	6897      	ldr	r7, [r2, #8]
    34f4:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    34f8:	bf04      	itt	eq
    34fa:	7852      	ldrbeq	r2, [r2, #1]
    34fc:	2a00      	cmpeq	r2, #0
    34fe:	d003      	beq.n	3508 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3500:	f1bc 0f02 	cmp.w	ip, #2
    3504:	d005      	beq.n	3512 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3506:	e026      	b.n	3556 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3508:	f240 3151 	movw	r1, #849	; 0x351
    350c:	206c      	movs	r0, #108	; 0x6c
    350e:	f000 fd4f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3512:	1f1a      	subs	r2, r3, #4
    3514:	b2d2      	uxtb	r2, r2
    3516:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    351a:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    351e:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    3522:	2200      	movs	r2, #0
    3524:	f1bc 0f01 	cmp.w	ip, #1
    3528:	d003      	beq.n	3532 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    352a:	f1bc 0f02 	cmp.w	ip, #2
    352e:	d008      	beq.n	3542 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    3530:	e00e      	b.n	3550 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3532:	2b04      	cmp	r3, #4
    3534:	bf24      	itt	cs
    3536:	6837      	ldrcs	r7, [r6, #0]
    3538:	2f00      	cmpcs	r7, #0
    353a:	bf08      	it	eq
    353c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    3540:	e006      	b.n	3550 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3542:	2b04      	cmp	r3, #4
    3544:	bf24      	itt	cs
    3546:	6837      	ldrcs	r7, [r6, #0]
    3548:	2f00      	cmpcs	r7, #0
    354a:	bf08      	it	eq
    354c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    3550:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    3554:	d1e5      	bne.n	3522 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    3556:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 362c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    355a:	f100 0210 	add.w	r2, r0, #16
    355e:	fa04 f202 	lsl.w	r2, r4, r2
    3562:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3566:	f04f 0340 	mov.w	r3, #64	; 0x40
    356a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    356e:	b2db      	uxtb	r3, r3
    3570:	4463      	add	r3, ip
    3572:	601c      	str	r4, [r3, #0]
    3574:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3578:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    357c:	eba1 0303 	sub.w	r3, r1, r3
    3580:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3584:	2b03      	cmp	r3, #3
    3586:	bf26      	itte	cs
    3588:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    358c:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    3590:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3594:	d237      	bcs.n	3606 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    3596:	e03c      	b.n	3612 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    3598:	f1bc 0f00 	cmp.w	ip, #0
    359c:	d006      	beq.n	35ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    359e:	4283      	cmp	r3, r0
    35a0:	d104      	bne.n	35ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    35a2:	f240 3171 	movw	r1, #881	; 0x371
    35a6:	206c      	movs	r0, #108	; 0x6c
    35a8:	f000 fd02 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35ac:	1f02      	subs	r2, r0, #4
    35ae:	b2d3      	uxtb	r3, r2
    35b0:	2b03      	cmp	r3, #3
    35b2:	d304      	bcc.n	35be <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    35b4:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    35b8:	206c      	movs	r0, #108	; 0x6c
    35ba:	f000 fcf9 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35be:	f8df c070 	ldr.w	ip, [pc, #112]	; 3630 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    35c2:	f103 0210 	add.w	r2, r3, #16
    35c6:	fa04 f202 	lsl.w	r2, r4, r2
    35ca:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    35ce:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    35d2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    35d6:	f84c 5003 	str.w	r5, [ip, r3]
    35da:	4b16      	ldr	r3, [pc, #88]	; (3634 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    35dc:	681b      	ldr	r3, [r3, #0]
    35de:	e000      	b.n	35e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    35e0:	e01a      	b.n	3618 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    35e2:	1f00      	subs	r0, r0, #4
    35e4:	1acb      	subs	r3, r1, r3
    35e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    35ea:	b2c0      	uxtb	r0, r0
    35ec:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    35f0:	2b02      	cmp	r3, #2
    35f2:	d30b      	bcc.n	360c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    35f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    35f8:	d808      	bhi.n	360c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    35fa:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    35fe:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    3602:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    3606:	2001      	movs	r0, #1
    3608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    360c:	2100      	movs	r1, #0
    360e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3612:	2000      	movs	r0, #0
    3614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3618:	f240 3175 	movw	r1, #885	; 0x375
    361c:	206c      	movs	r0, #108	; 0x6c
    361e:	f000 fcc7 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3622:	0000      	.short	0x0000
    3624:	2000004a 	.word	0x2000004a
    3628:	20000048 	.word	0x20000048
    362c:	40008000 	.word	0x40008000
    3630:	4000b000 	.word	0x4000b000
    3634:	4000b504 	.word	0x4000b504

00003638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    363c:	2601      	movs	r6, #1
    363e:	2700      	movs	r7, #0
    3640:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3644:	2807      	cmp	r0, #7
    3646:	d251      	bcs.n	36ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    3648:	e8df f000 	tbb	[pc, r0]
    364c:	04040404 	.word	0x04040404
    3650:	00191919 	.word	0x00191919
    3654:	f100 0110 	add.w	r1, r0, #16
    3658:	fa06 f201 	lsl.w	r2, r6, r1
    365c:	4926      	ldr	r1, [pc, #152]	; (36f8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    365e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3662:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3666:	2200      	movs	r2, #0
    3668:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    366c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3670:	508f      	str	r7, [r1, r2]
    3672:	4922      	ldr	r1, [pc, #136]	; (36fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3674:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3678:	9000      	str	r0, [sp, #0]
    367a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    367e:	4d20      	ldr	r5, [pc, #128]	; (3700 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3680:	1f01      	subs	r1, r0, #4
    3682:	b2cc      	uxtb	r4, r1
    3684:	7829      	ldrb	r1, [r5, #0]
    3686:	b179      	cbz	r1, 36a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3688:	786a      	ldrb	r2, [r5, #1]
    368a:	4282      	cmp	r2, r0
    368c:	d10c      	bne.n	36a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    368e:	4a1d      	ldr	r2, [pc, #116]	; (3704 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3690:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3694:	6010      	str	r0, [r2, #0]
    3696:	2901      	cmp	r1, #1
    3698:	bf08      	it	eq
    369a:	f7ff fd39 	bleq	3110 <MPSL_IRQ_TIMER0_Handler+0x100>
    369e:	702f      	strb	r7, [r5, #0]
    36a0:	4919      	ldr	r1, [pc, #100]	; (3708 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    36a2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    36a6:	6088      	str	r0, [r1, #8]
    36a8:	4918      	ldr	r1, [pc, #96]	; (370c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    36aa:	f104 0010 	add.w	r0, r4, #16
    36ae:	fa06 f000 	lsl.w	r0, r6, r0
    36b2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    36b6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    36ba:	00a0      	lsls	r0, r4, #2
    36bc:	4408      	add	r0, r1
    36be:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    36c2:	4a13      	ldr	r2, [pc, #76]	; (3710 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    36c4:	6812      	ldr	r2, [r2, #0]
    36c6:	1a80      	subs	r0, r0, r2
    36c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    36cc:	2802      	cmp	r0, #2
    36ce:	d307      	bcc.n	36e0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    36d0:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    36d4:	2000      	movs	r0, #0
    36d6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    36da:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    36de:	500f      	str	r7, [r1, r0]
    36e0:	480c      	ldr	r0, [pc, #48]	; (3714 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    36e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    36e6:	9000      	str	r0, [sp, #0]
    36e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36ec:	f240 31f9 	movw	r1, #1017	; 0x3f9
    36f0:	206c      	movs	r0, #108	; 0x6c
    36f2:	f000 fc5d 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36f6:	0000      	.short	0x0000
    36f8:	40008000 	.word	0x40008000
    36fc:	40008140 	.word	0x40008140
    3700:	2000004a 	.word	0x2000004a
    3704:	4001f508 	.word	0x4001f508
    3708:	20000048 	.word	0x20000048
    370c:	4000b000 	.word	0x4000b000
    3710:	4000b504 	.word	0x4000b504
    3714:	4000b140 	.word	0x4000b140

00003718 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3718:	4825      	ldr	r0, [pc, #148]	; (37b0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    371a:	4a24      	ldr	r2, [pc, #144]	; (37ac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    371c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3720:	4924      	ldr	r1, [pc, #144]	; (37b4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    3722:	1d03      	adds	r3, r0, #4
    3724:	f891 c000 	ldrb.w	ip, [r1]
    3728:	2100      	movs	r1, #0
    372a:	f1bc 0f00 	cmp.w	ip, #0
    372e:	d010      	beq.n	3752 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    3730:	4a21      	ldr	r2, [pc, #132]	; (37b8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    3732:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3736:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    373a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    373e:	bf00      	nop
    3740:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3744:	2a00      	cmp	r2, #0
    3746:	bf04      	itt	eq
    3748:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    374c:	2800      	cmpeq	r0, #0
    374e:	d111      	bne.n	3774 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    3750:	e00a      	b.n	3768 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3752:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3756:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    375a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    375e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3762:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3766:	e7eb      	b.n	3740 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3768:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    376c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3770:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3774:	4811      	ldr	r0, [pc, #68]	; (37bc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    3776:	f04f 32ff 	mov.w	r2, #4294967295
    377a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    377e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3782:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3786:	f100 0204 	add.w	r2, r0, #4
    378a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    378e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3792:	f102 0204 	add.w	r2, r2, #4
    3796:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    379a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    379e:	f102 0204 	add.w	r2, r2, #4
    37a2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    37a6:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    37aa:	4770      	bx	lr
    37ac:	fffbfffd 	.word	0xfffbfffd
    37b0:	4000b000 	.word	0x4000b000
    37b4:	2000004a 	.word	0x2000004a
    37b8:	fffafffd 	.word	0xfffafffd
    37bc:	40008000 	.word	0x40008000

000037c0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    37c0:	b510      	push	{r4, lr}
    37c2:	2807      	cmp	r0, #7
    37c4:	d20d      	bcs.n	37e2 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    37c6:	e8df f000 	tbb	[pc, r0]
    37ca:	0404      	.short	0x0404
    37cc:	06060404 	.word	0x06060404
    37d0:	0006      	.short	0x0006
    37d2:	4906      	ldr	r1, [pc, #24]	; (37ec <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    37d4:	e002      	b.n	37dc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    37d6:	1f00      	subs	r0, r0, #4
    37d8:	4905      	ldr	r1, [pc, #20]	; (37f0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    37da:	b2c0      	uxtb	r0, r0
    37dc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    37e0:	bd10      	pop	{r4, pc}
    37e2:	f240 3199 	movw	r1, #921	; 0x399
    37e6:	206c      	movs	r0, #108	; 0x6c
    37e8:	f000 fbe2 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37ec:	40008140 	.word	0x40008140
    37f0:	4000b140 	.word	0x4000b140

000037f4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    37f4:	b570      	push	{r4, r5, r6, lr}
    37f6:	481f      	ldr	r0, [pc, #124]	; (3874 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    37f8:	2400      	movs	r4, #0
    37fa:	2104      	movs	r1, #4
    37fc:	7004      	strb	r4, [r0, #0]
    37fe:	1e80      	subs	r0, r0, #2
    3800:	7001      	strb	r1, [r0, #0]
    3802:	0589      	lsls	r1, r1, #22
    3804:	60c4      	str	r4, [r0, #12]
    3806:	6081      	str	r1, [r0, #8]
    3808:	f7ff fc82 	bl	3110 <MPSL_IRQ_TIMER0_Handler+0x100>
    380c:	2501      	movs	r5, #1
    380e:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3812:	02eb      	lsls	r3, r5, #11
    3814:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3818:	f3bf 8f4f 	dsb	sy
    381c:	f3bf 8f6f 	isb	sy
    3820:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3824:	4814      	ldr	r0, [pc, #80]	; (3878 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    3826:	6045      	str	r5, [r0, #4]
    3828:	6085      	str	r5, [r0, #8]
    382a:	4914      	ldr	r1, [pc, #80]	; (387c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    382c:	680a      	ldr	r2, [r1, #0]
    382e:	2a00      	cmp	r2, #0
    3830:	d1fc      	bne.n	382c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    3832:	1e51      	subs	r1, r2, #1
    3834:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3838:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    383c:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3840:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3844:	490e      	ldr	r1, [pc, #56]	; (3880 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    3846:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    384a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    384e:	1d09      	adds	r1, r1, #4
    3850:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3854:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3858:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    385c:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3860:	6005      	str	r5, [r0, #0]
    3862:	f44f 7182 	mov.w	r1, #260	; 0x104
    3866:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    386a:	2102      	movs	r1, #2
    386c:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    3870:	bd70      	pop	{r4, r5, r6, pc}
    3872:	0000      	.short	0x0000
    3874:	2000004a 	.word	0x2000004a
    3878:	4000b000 	.word	0x4000b000
    387c:	4000b504 	.word	0x4000b504
    3880:	4000b004 	.word	0x4000b004

00003884 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    3884:	4808      	ldr	r0, [pc, #32]	; (38a8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    3886:	f990 0000 	ldrsb.w	r0, [r0]
    388a:	2800      	cmp	r0, #0
    388c:	bfb8      	it	lt
    388e:	4770      	bxlt	lr
    3890:	f000 011f 	and.w	r1, r0, #31
    3894:	2201      	movs	r2, #1
    3896:	fa02 f101 	lsl.w	r1, r2, r1
    389a:	0940      	lsrs	r0, r0, #5
    389c:	0080      	lsls	r0, r0, #2
    389e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    38a2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    38a6:	4770      	bx	lr
    38a8:	20000354 	.word	0x20000354

000038ac <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    38ac:	4803      	ldr	r0, [pc, #12]	; (38bc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    38ae:	7800      	ldrb	r0, [r0, #0]
    38b0:	2803      	cmp	r0, #3
    38b2:	bf0c      	ite	eq
    38b4:	2001      	moveq	r0, #1
    38b6:	2000      	movne	r0, #0
    38b8:	4770      	bx	lr
    38ba:	0000      	.short	0x0000
    38bc:	20000340 	.word	0x20000340

000038c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    38c0:	4801      	ldr	r0, [pc, #4]	; (38c8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    38c2:	8840      	ldrh	r0, [r0, #2]
    38c4:	4770      	bx	lr
    38c6:	0000      	.short	0x0000
    38c8:	20000340 	.word	0x20000340

000038cc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    38cc:	4803      	ldr	r0, [pc, #12]	; (38dc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    38ce:	7800      	ldrb	r0, [r0, #0]
    38d0:	2802      	cmp	r0, #2
    38d2:	bf16      	itet	ne
    38d4:	2803      	cmpne	r0, #3
    38d6:	2001      	moveq	r0, #1
    38d8:	2000      	movne	r0, #0
    38da:	4770      	bx	lr
    38dc:	20000340 	.word	0x20000340

000038e0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    38e0:	4802      	ldr	r0, [pc, #8]	; (38ec <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    38e2:	2100      	movs	r1, #0
    38e4:	7001      	strb	r1, [r0, #0]
    38e6:	8041      	strh	r1, [r0, #2]
    38e8:	4770      	bx	lr
    38ea:	0000      	.short	0x0000
    38ec:	20000340 	.word	0x20000340

000038f0 <MPSL_IRQ_CLOCK_Handler>:
    38f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38f4:	4c16      	ldr	r4, [pc, #88]	; (3950 <MPSL_IRQ_CLOCK_Handler+0x60>)
    38f6:	7a60      	ldrb	r0, [r4, #9]
    38f8:	2800      	cmp	r0, #0
    38fa:	d027      	beq.n	394c <MPSL_IRQ_CLOCK_Handler+0x5c>
    38fc:	f44f 7180 	mov.w	r1, #256	; 0x100
    3900:	058d      	lsls	r5, r1, #22
    3902:	4628      	mov	r0, r5
    3904:	f008 fcbe 	bl	c284 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3908:	4680      	mov	r8, r0
    390a:	f44f 7182 	mov.w	r1, #260	; 0x104
    390e:	4628      	mov	r0, r5
    3910:	f008 fcb8 	bl	c284 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3914:	2600      	movs	r6, #0
    3916:	4607      	mov	r7, r0
    3918:	f1b8 0f00 	cmp.w	r8, #0
    391c:	d009      	beq.n	3932 <MPSL_IRQ_CLOCK_Handler+0x42>
    391e:	2001      	movs	r0, #1
    3920:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3924:	7920      	ldrb	r0, [r4, #4]
    3926:	b120      	cbz	r0, 3932 <MPSL_IRQ_CLOCK_Handler+0x42>
    3928:	7126      	strb	r6, [r4, #4]
    392a:	69e0      	ldr	r0, [r4, #28]
    392c:	b108      	cbz	r0, 3932 <MPSL_IRQ_CLOCK_Handler+0x42>
    392e:	4780      	blx	r0
    3930:	61e6      	str	r6, [r4, #28]
    3932:	b137      	cbz	r7, 3942 <MPSL_IRQ_CLOCK_Handler+0x52>
    3934:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3938:	2002      	movs	r0, #2
    393a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    393e:	f000 fa6b 	bl	3e18 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3942:	4640      	mov	r0, r8
    3944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3948:	f000 b858 	b.w	39fc <MPSL_IRQ_CLOCK_Handler+0x10c>
    394c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3950:	20000058 	.word	0x20000058
    3954:	b510      	push	{r4, lr}
    3956:	f008 fd3f 	bl	c3d8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    395a:	b930      	cbnz	r0, 396a <MPSL_IRQ_CLOCK_Handler+0x7a>
    395c:	f008 fd5d 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3960:	b918      	cbnz	r0, 396a <MPSL_IRQ_CLOCK_Handler+0x7a>
    3962:	f008 fd90 	bl	c486 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3966:	2800      	cmp	r0, #0
    3968:	d002      	beq.n	3970 <MPSL_IRQ_CLOCK_Handler+0x80>
    396a:	4902      	ldr	r1, [pc, #8]	; (3974 <MPSL_IRQ_CLOCK_Handler+0x84>)
    396c:	2002      	movs	r0, #2
    396e:	6008      	str	r0, [r1, #0]
    3970:	bd10      	pop	{r4, pc}
    3972:	0000      	.short	0x0000
    3974:	40000c34 	.word	0x40000c34
    3978:	b570      	push	{r4, r5, r6, lr}
    397a:	f000 f991 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    397e:	f000 fa9f 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3982:	4c09      	ldr	r4, [pc, #36]	; (39a8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3984:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3988:	b130      	cbz	r0, 3998 <MPSL_IRQ_CLOCK_Handler+0xa8>
    398a:	f7ff ffe3 	bl	3954 <MPSL_IRQ_CLOCK_Handler+0x64>
    398e:	2001      	movs	r0, #1
    3990:	6128      	str	r0, [r5, #16]
    3992:	2004      	movs	r0, #4
    3994:	72a0      	strb	r0, [r4, #10]
    3996:	e004      	b.n	39a2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    3998:	2003      	movs	r0, #3
    399a:	72a0      	strb	r0, [r4, #10]
    399c:	2001      	movs	r0, #1
    399e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    39a2:	2000      	movs	r0, #0
    39a4:	71e0      	strb	r0, [r4, #7]
    39a6:	bd70      	pop	{r4, r5, r6, pc}
    39a8:	20000058 	.word	0x20000058
    39ac:	b570      	push	{r4, r5, r6, lr}
    39ae:	4c12      	ldr	r4, [pc, #72]	; (39f8 <MPSL_IRQ_CLOCK_Handler+0x108>)
    39b0:	79a0      	ldrb	r0, [r4, #6]
    39b2:	b1e0      	cbz	r0, 39ee <MPSL_IRQ_CLOCK_Handler+0xfe>
    39b4:	79e1      	ldrb	r1, [r4, #7]
    39b6:	1e40      	subs	r0, r0, #1
    39b8:	4281      	cmp	r1, r0
    39ba:	da18      	bge.n	39ee <MPSL_IRQ_CLOCK_Handler+0xfe>
    39bc:	f000 fa80 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    39c0:	4605      	mov	r5, r0
    39c2:	f000 fb69 	bl	4098 <mpsl_temperature_get>
    39c6:	79a1      	ldrb	r1, [r4, #6]
    39c8:	2901      	cmp	r1, #1
    39ca:	d902      	bls.n	39d2 <MPSL_IRQ_CLOCK_Handler+0xe2>
    39cc:	79e1      	ldrb	r1, [r4, #7]
    39ce:	1c49      	adds	r1, r1, #1
    39d0:	71e1      	strb	r1, [r4, #7]
    39d2:	b10d      	cbz	r5, 39d8 <MPSL_IRQ_CLOCK_Handler+0xe8>
    39d4:	6961      	ldr	r1, [r4, #20]
    39d6:	e000      	b.n	39da <MPSL_IRQ_CLOCK_Handler+0xea>
    39d8:	6921      	ldr	r1, [r4, #16]
    39da:	1a41      	subs	r1, r0, r1
    39dc:	2902      	cmp	r1, #2
    39de:	da02      	bge.n	39e6 <MPSL_IRQ_CLOCK_Handler+0xf6>
    39e0:	f111 0f02 	cmn.w	r1, #2
    39e4:	dc07      	bgt.n	39f6 <MPSL_IRQ_CLOCK_Handler+0x106>
    39e6:	b10d      	cbz	r5, 39ec <MPSL_IRQ_CLOCK_Handler+0xfc>
    39e8:	6160      	str	r0, [r4, #20]
    39ea:	e000      	b.n	39ee <MPSL_IRQ_CLOCK_Handler+0xfe>
    39ec:	6120      	str	r0, [r4, #16]
    39ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    39f2:	f7ff bfc1 	b.w	3978 <MPSL_IRQ_CLOCK_Handler+0x88>
    39f6:	bd70      	pop	{r4, r5, r6, pc}
    39f8:	20000058 	.word	0x20000058
    39fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a00:	4606      	mov	r6, r0
    3a02:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3a06:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3a0a:	4628      	mov	r0, r5
    3a0c:	f008 fc3a 	bl	c284 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a10:	4680      	mov	r8, r0
    3a12:	f44f 7188 	mov.w	r1, #272	; 0x110
    3a16:	4628      	mov	r0, r5
    3a18:	f008 fc34 	bl	c284 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a1c:	4c27      	ldr	r4, [pc, #156]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a1e:	4682      	mov	sl, r0
    3a20:	7827      	ldrb	r7, [r4, #0]
    3a22:	f104 0008 	add.w	r0, r4, #8
    3a26:	f008 fca1 	bl	c36c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3a2a:	b110      	cbz	r0, 3a32 <MPSL_IRQ_CLOCK_Handler+0x142>
    3a2c:	f240 11b9 	movw	r1, #441	; 0x1b9
    3a30:	e016      	b.n	3a60 <MPSL_IRQ_CLOCK_Handler+0x170>
    3a32:	f04f 0901 	mov.w	r9, #1
    3a36:	b146      	cbz	r6, 3a4a <MPSL_IRQ_CLOCK_Handler+0x15a>
    3a38:	7aa0      	ldrb	r0, [r4, #10]
    3a3a:	2803      	cmp	r0, #3
    3a3c:	d105      	bne.n	3a4a <MPSL_IRQ_CLOCK_Handler+0x15a>
    3a3e:	2004      	movs	r0, #4
    3a40:	72a0      	strb	r0, [r4, #10]
    3a42:	f7ff ff87 	bl	3954 <MPSL_IRQ_CLOCK_Handler+0x64>
    3a46:	f8c5 9010 	str.w	r9, [r5, #16]
    3a4a:	2600      	movs	r6, #0
    3a4c:	f1b8 0f00 	cmp.w	r8, #0
    3a50:	d018      	beq.n	3a84 <MPSL_IRQ_CLOCK_Handler+0x194>
    3a52:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3a56:	7aa0      	ldrb	r0, [r4, #10]
    3a58:	2804      	cmp	r0, #4
    3a5a:	d004      	beq.n	3a66 <MPSL_IRQ_CLOCK_Handler+0x176>
    3a5c:	f240 11cb 	movw	r1, #459	; 0x1cb
    3a60:	206d      	movs	r0, #109	; 0x6d
    3a62:	f000 faa5 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a66:	f008 fcb7 	bl	c3d8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3a6a:	b928      	cbnz	r0, 3a78 <MPSL_IRQ_CLOCK_Handler+0x188>
    3a6c:	f008 fcd5 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a70:	b910      	cbnz	r0, 3a78 <MPSL_IRQ_CLOCK_Handler+0x188>
    3a72:	f008 fd08 	bl	c486 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3a76:	b108      	cbz	r0, 3a7c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3a78:	4811      	ldr	r0, [pc, #68]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3a7a:	6006      	str	r6, [r0, #0]
    3a7c:	2002      	movs	r0, #2
    3a7e:	72a0      	strb	r0, [r4, #10]
    3a80:	f000 f8f2 	bl	3c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3a84:	f1ba 0f00 	cmp.w	sl, #0
    3a88:	d008      	beq.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3a8a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3a8e:	7aa0      	ldrb	r0, [r4, #10]
    3a90:	2802      	cmp	r0, #2
    3a92:	d101      	bne.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a94:	f7ff ff8a 	bl	39ac <MPSL_IRQ_CLOCK_Handler+0xbc>
    3a98:	f8c5 9014 	str.w	r9, [r5, #20]
    3a9c:	b13f      	cbz	r7, 3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
    3a9e:	7026      	strb	r6, [r4, #0]
    3aa0:	7aa0      	ldrb	r0, [r4, #10]
    3aa2:	2802      	cmp	r0, #2
    3aa4:	d101      	bne.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    3aa6:	f7ff ff67 	bl	3978 <MPSL_IRQ_CLOCK_Handler+0x88>
    3aaa:	f000 f8dd 	bl	3c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3aae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ab2:	4802      	ldr	r0, [pc, #8]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3ab4:	3008      	adds	r0, #8
    3ab6:	f008 bc70 	b.w	c39a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3aba:	0000      	.short	0x0000
    3abc:	20000058 	.word	0x20000058
    3ac0:	40000c34 	.word	0x40000c34
    3ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ac8:	4c5f      	ldr	r4, [pc, #380]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3aca:	2700      	movs	r7, #0
    3acc:	4606      	mov	r6, r0
    3ace:	61a7      	str	r7, [r4, #24]
    3ad0:	7842      	ldrb	r2, [r0, #1]
    3ad2:	7881      	ldrb	r1, [r0, #2]
    3ad4:	7800      	ldrb	r0, [r0, #0]
    3ad6:	72e0      	strb	r0, [r4, #11]
    3ad8:	7162      	strb	r2, [r4, #5]
    3ada:	71a1      	strb	r1, [r4, #6]
    3adc:	71e7      	strb	r7, [r4, #7]
    3ade:	f04f 0801 	mov.w	r8, #1
    3ae2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3ae6:	2805      	cmp	r0, #5
    3ae8:	d225      	bcs.n	3b36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9e>
    3aea:	e8df f000 	tbb	[pc, r0]
    3aee:	0310      	.short	0x0310
    3af0:	00222006 	.word	0x00222006
    3af4:	f8c4 8018 	str.w	r8, [r4, #24]
    3af8:	e009      	b.n	3b0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x76>
    3afa:	f000 f8d1 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3afe:	2101      	movs	r1, #1
    3b00:	4628      	mov	r0, r5
    3b02:	f008 fbc4 	bl	c28e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3b06:	2800      	cmp	r0, #0
    3b08:	d0f9      	beq.n	3afe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x66>
    3b0a:	2002      	movs	r0, #2
    3b0c:	61a0      	str	r0, [r4, #24]
    3b0e:	f008 fbea 	bl	c2e6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3b12:	b1b0      	cbz	r0, 3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b14:	f000 f9ee 	bl	3ef4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3b18:	7e21      	ldrb	r1, [r4, #24]
    3b1a:	f001 0103 	and.w	r1, r1, #3
    3b1e:	4288      	cmp	r0, r1
    3b20:	d10f      	bne.n	3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b22:	79b0      	ldrb	r0, [r6, #6]
    3b24:	b150      	cbz	r0, 3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>
    3b26:	2002      	movs	r0, #2
    3b28:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b2c:	e070      	b.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3b2e:	4847      	ldr	r0, [pc, #284]	; (3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>)
    3b30:	e7ec      	b.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    3b32:	4847      	ldr	r0, [pc, #284]	; (3c50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b8>)
    3b34:	e7ea      	b.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    3b36:	f240 313a 	movw	r1, #826	; 0x33a
    3b3a:	e04d      	b.n	3bd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x140>
    3b3c:	f000 f9ae 	bl	3e9c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3b40:	e066      	b.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3b42:	f8c5 800c 	str.w	r8, [r5, #12]
    3b46:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3b4a:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3b4e:	69a0      	ldr	r0, [r4, #24]
    3b50:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3b54:	f008 fc2c 	bl	c3b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b58:	b940      	cbnz	r0, 3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3b5a:	f008 fc33 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b5e:	b928      	cbnz	r0, 3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3b60:	f008 fc47 	bl	c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b64:	b910      	cbnz	r0, 3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3b66:	f008 fc58 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b6a:	b138      	cbz	r0, 3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>
    3b6c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3b70:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    3b74:	4937      	ldr	r1, [pc, #220]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3b76:	f3c0 3042 	ubfx	r0, r0, #13, #3
    3b7a:	6008      	str	r0, [r1, #0]
    3b7c:	f008 fc18 	bl	c3b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b80:	b940      	cbnz	r0, 3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3b82:	f008 fc1f 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b86:	b928      	cbnz	r0, 3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3b88:	f008 fc33 	bl	c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b8c:	b910      	cbnz	r0, 3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3b8e:	f008 fc44 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b92:	b118      	cbz	r0, 3b9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x104>
    3b94:	492f      	ldr	r1, [pc, #188]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3b96:	3110      	adds	r1, #16
    3b98:	f8c1 8000 	str.w	r8, [r1]
    3b9c:	f8c5 8008 	str.w	r8, [r5, #8]
    3ba0:	2002      	movs	r0, #2
    3ba2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3ba6:	79b0      	ldrb	r0, [r6, #6]
    3ba8:	bb90      	cbnz	r0, 3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3baa:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3bae:	f010 0f02 	tst.w	r0, #2
    3bb2:	d00f      	beq.n	3bd4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13c>
    3bb4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3c58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c0>
    3bb8:	f8d9 1000 	ldr.w	r1, [r9]
    3bbc:	43c9      	mvns	r1, r1
    3bbe:	f341 1100 	sbfx	r1, r1, #4, #1
    3bc2:	f101 0801 	add.w	r8, r1, #1
    3bc6:	f8d9 1000 	ldr.w	r1, [r9]
    3bca:	f041 0110 	orr.w	r1, r1, #16
    3bce:	f8c9 1000 	str.w	r1, [r9]
    3bd2:	e007      	b.n	3be4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14c>
    3bd4:	f240 21fb 	movw	r1, #763	; 0x2fb
    3bd8:	206d      	movs	r0, #109	; 0x6d
    3bda:	f000 f9e9 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bde:	bf00      	nop
    3be0:	f000 fb20 	bl	4224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3be4:	4651      	mov	r1, sl
    3be6:	4628      	mov	r0, r5
    3be8:	f008 fb4c 	bl	c284 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3bec:	2800      	cmp	r0, #0
    3bee:	d0f7      	beq.n	3be0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x148>
    3bf0:	f000 f954 	bl	3e9c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3bf4:	f1b8 0f00 	cmp.w	r8, #0
    3bf8:	d105      	bne.n	3c06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16e>
    3bfa:	f8d9 1000 	ldr.w	r1, [r9]
    3bfe:	f021 0110 	bic.w	r1, r1, #16
    3c02:	f8c9 1000 	str.w	r1, [r9]
    3c06:	2002      	movs	r0, #2
    3c08:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3c0c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3c10:	79a0      	ldrb	r0, [r4, #6]
    3c12:	b170      	cbz	r0, 3c32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x19a>
    3c14:	7830      	ldrb	r0, [r6, #0]
    3c16:	b960      	cbnz	r0, 3c32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x19a>
    3c18:	f000 f952 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3c1c:	4606      	mov	r6, r0
    3c1e:	f000 fa3b 	bl	4098 <mpsl_temperature_get>
    3c22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3c26:	b116      	cbz	r6, 3c2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x196>
    3c28:	e9c4 1004 	strd	r1, r0, [r4, #16]
    3c2c:	e001      	b.n	3c32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x19a>
    3c2e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    3c32:	2101      	movs	r1, #1
    3c34:	4628      	mov	r0, r5
    3c36:	f008 fb2a 	bl	c28e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3c3a:	b108      	cbz	r0, 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    3c3c:	f000 f93a 	bl	3eb4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3c40:	72a7      	strb	r7, [r4, #10]
    3c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c46:	0000      	.short	0x0000
    3c48:	20000058 	.word	0x20000058
    3c4c:	00020001 	.word	0x00020001
    3c50:	00030001 	.word	0x00030001
    3c54:	4000053c 	.word	0x4000053c
    3c58:	e000ed10 	.word	0xe000ed10

00003c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    3c5c:	4801      	ldr	r0, [pc, #4]	; (3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    3c5e:	89c0      	ldrh	r0, [r0, #14]
    3c60:	4770      	bx	lr
    3c62:	0000      	.short	0x0000
    3c64:	20000058 	.word	0x20000058

00003c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3c68:	b510      	push	{r4, lr}
    3c6a:	f3ef 8410 	mrs	r4, PRIMASK
    3c6e:	b672      	cpsid	i
    3c70:	480a      	ldr	r0, [pc, #40]	; (3c9c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3c72:	7841      	ldrb	r1, [r0, #1]
    3c74:	b129      	cbz	r1, 3c82 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3c76:	7841      	ldrb	r1, [r0, #1]
    3c78:	1e49      	subs	r1, r1, #1
    3c7a:	7041      	strb	r1, [r0, #1]
    3c7c:	7841      	ldrb	r1, [r0, #1]
    3c7e:	b129      	cbz	r1, 3c8c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3c80:	e008      	b.n	3c94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c82:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3c86:	206d      	movs	r0, #109	; 0x6d
    3c88:	f000 f992 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c8c:	7880      	ldrb	r0, [r0, #2]
    3c8e:	b908      	cbnz	r0, 3c94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c90:	f000 f924 	bl	3edc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3c94:	2c00      	cmp	r4, #0
    3c96:	d100      	bne.n	3c9a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3c98:	b662      	cpsie	i
    3c9a:	bd10      	pop	{r4, pc}
    3c9c:	20000058 	.word	0x20000058

00003ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3ca0:	b510      	push	{r4, lr}
    3ca2:	f3ef 8410 	mrs	r4, PRIMASK
    3ca6:	b672      	cpsid	i
    3ca8:	4806      	ldr	r0, [pc, #24]	; (3cc4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3caa:	7841      	ldrb	r1, [r0, #1]
    3cac:	1c49      	adds	r1, r1, #1
    3cae:	7041      	strb	r1, [r0, #1]
    3cb0:	7840      	ldrb	r0, [r0, #1]
    3cb2:	2801      	cmp	r0, #1
    3cb4:	d101      	bne.n	3cba <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3cb6:	f008 fb01 	bl	c2bc <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3cba:	2c00      	cmp	r4, #0
    3cbc:	d100      	bne.n	3cc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3cbe:	b662      	cpsie	i
    3cc0:	bd10      	pop	{r4, pc}
    3cc2:	0000      	.short	0x0000
    3cc4:	20000058 	.word	0x20000058

00003cc8 <mpsl_clock_hfclk_release>:
    3cc8:	4805      	ldr	r0, [pc, #20]	; (3ce0 <mpsl_clock_hfclk_release+0x18>)
    3cca:	b510      	push	{r4, lr}
    3ccc:	78c1      	ldrb	r1, [r0, #3]
    3cce:	b121      	cbz	r1, 3cda <mpsl_clock_hfclk_release+0x12>
    3cd0:	2100      	movs	r1, #0
    3cd2:	7101      	strb	r1, [r0, #4]
    3cd4:	70c1      	strb	r1, [r0, #3]
    3cd6:	f7ff ffc7 	bl	3c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3cda:	2000      	movs	r0, #0
    3cdc:	bd10      	pop	{r4, pc}
    3cde:	0000      	.short	0x0000
    3ce0:	20000058 	.word	0x20000058

00003ce4 <mpsl_clock_hfclk_request>:
    3ce4:	b570      	push	{r4, r5, r6, lr}
    3ce6:	4c0c      	ldr	r4, [pc, #48]	; (3d18 <mpsl_clock_hfclk_request+0x34>)
    3ce8:	78e1      	ldrb	r1, [r4, #3]
    3cea:	b961      	cbnz	r1, 3d06 <mpsl_clock_hfclk_request+0x22>
    3cec:	2501      	movs	r5, #1
    3cee:	70e5      	strb	r5, [r4, #3]
    3cf0:	61e0      	str	r0, [r4, #28]
    3cf2:	f7ff ffd5 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3cf6:	f000 f8e3 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3cfa:	b130      	cbz	r0, 3d0a <mpsl_clock_hfclk_request+0x26>
    3cfc:	69e0      	ldr	r0, [r4, #28]
    3cfe:	b110      	cbz	r0, 3d06 <mpsl_clock_hfclk_request+0x22>
    3d00:	4780      	blx	r0
    3d02:	2000      	movs	r0, #0
    3d04:	61e0      	str	r0, [r4, #28]
    3d06:	2000      	movs	r0, #0
    3d08:	bd70      	pop	{r4, r5, r6, pc}
    3d0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3d0e:	7125      	strb	r5, [r4, #4]
    3d10:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3d14:	e7f7      	b.n	3d06 <mpsl_clock_hfclk_request+0x22>
    3d16:	0000      	.short	0x0000
    3d18:	20000058 	.word	0x20000058

00003d1c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d20:	0005      	movs	r5, r0
    3d22:	f06f 0015 	mvn.w	r0, #21
    3d26:	d03f      	beq.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d28:	7829      	ldrb	r1, [r5, #0]
    3d2a:	2904      	cmp	r1, #4
    3d2c:	d83c      	bhi.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d2e:	2900      	cmp	r1, #0
    3d30:	7869      	ldrb	r1, [r5, #1]
    3d32:	d03b      	beq.n	3dac <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    3d34:	2900      	cmp	r1, #0
    3d36:	d137      	bne.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d38:	78a9      	ldrb	r1, [r5, #2]
    3d3a:	2900      	cmp	r1, #0
    3d3c:	d134      	bne.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d3e:	2000      	movs	r0, #0
    3d40:	f008 fa6b 	bl	c21a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    3d44:	2000      	movs	r0, #0
    3d46:	f008 fa5b 	bl	c200 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3d4a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3d4e:	f04f 31ff 	mov.w	r1, #4294967295
    3d52:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3d56:	2600      	movs	r6, #0
    3d58:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3d5c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3d60:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3d64:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3d68:	4c14      	ldr	r4, [pc, #80]	; (3dbc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3d6a:	7066      	strb	r6, [r4, #1]
    3d6c:	88a8      	ldrh	r0, [r5, #4]
    3d6e:	81a0      	strh	r0, [r4, #12]
    3d70:	f008 fa9b 	bl	c2aa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3d74:	2701      	movs	r7, #1
    3d76:	b108      	cbz	r0, 3d7c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3d78:	70e7      	strb	r7, [r4, #3]
    3d7a:	7067      	strb	r7, [r4, #1]
    3d7c:	2101      	movs	r1, #1
    3d7e:	4640      	mov	r0, r8
    3d80:	f008 fa85 	bl	c28e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3d84:	b108      	cbz	r0, 3d8a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3d86:	f000 f895 	bl	3eb4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3d8a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    3d8e:	81e0      	strh	r0, [r4, #14]
    3d90:	4628      	mov	r0, r5
    3d92:	f7ff fe97 	bl	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
    3d96:	7267      	strb	r7, [r4, #9]
    3d98:	2000      	movs	r0, #0
    3d9a:	f008 fa31 	bl	c200 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3d9e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3da2:	4630      	mov	r0, r6
    3da4:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3dac:	2900      	cmp	r1, #0
    3dae:	d0fb      	beq.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3db0:	2920      	cmp	r1, #32
    3db2:	d8f9      	bhi.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3db4:	78a9      	ldrb	r1, [r5, #2]
    3db6:	2921      	cmp	r1, #33	; 0x21
    3db8:	d9c1      	bls.n	3d3e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3dba:	e7f5      	b.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3dbc:	20000058 	.word	0x20000058

00003dc0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3dc0:	4801      	ldr	r0, [pc, #4]	; (3dc8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3dc2:	8980      	ldrh	r0, [r0, #12]
    3dc4:	4770      	bx	lr
    3dc6:	0000      	.short	0x0000
    3dc8:	20000058 	.word	0x20000058

00003dcc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    3dcc:	b510      	push	{r4, lr}
    3dce:	480d      	ldr	r0, [pc, #52]	; (3e04 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3dd0:	f008 facc 	bl	c36c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3dd4:	490b      	ldr	r1, [pc, #44]	; (3e04 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3dd6:	3908      	subs	r1, #8
    3dd8:	b148      	cbz	r0, 3dee <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    3dda:	2001      	movs	r0, #1
    3ddc:	7008      	strb	r0, [r1, #0]
    3dde:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3de2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3dea:	f7ff bf59 	b.w	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3dee:	7a88      	ldrb	r0, [r1, #10]
    3df0:	2802      	cmp	r0, #2
    3df2:	d101      	bne.n	3df8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3df4:	f7ff fdc0 	bl	3978 <MPSL_IRQ_CLOCK_Handler+0x88>
    3df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3dfc:	4801      	ldr	r0, [pc, #4]	; (3e04 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3dfe:	f008 bacc 	b.w	c39a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3e02:	0000      	.short	0x0000
    3e04:	20000060 	.word	0x20000060

00003e08 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3e08:	4802      	ldr	r0, [pc, #8]	; (3e14 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3e0a:	7a80      	ldrb	r0, [r0, #10]
    3e0c:	2800      	cmp	r0, #0
    3e0e:	d000      	beq.n	3e12 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3e10:	2001      	movs	r0, #1
    3e12:	4770      	bx	lr
    3e14:	20000058 	.word	0x20000058

00003e18 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e1a:	4d1f      	ldr	r5, [pc, #124]	; (3e98 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3e1c:	7ae8      	ldrb	r0, [r5, #11]
    3e1e:	2800      	cmp	r0, #0
    3e20:	d10f      	bne.n	3e42 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e22:	7e28      	ldrb	r0, [r5, #24]
    3e24:	f000 0003 	and.w	r0, r0, #3
    3e28:	f008 fa4d 	bl	c2c6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3e2c:	2800      	cmp	r0, #0
    3e2e:	d008      	beq.n	3e42 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e30:	f3ef 8110 	mrs	r1, PRIMASK
    3e34:	b672      	cpsid	i
    3e36:	f7ff ffe7 	bl	3e08 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3e3a:	b118      	cbz	r0, 3e44 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3e3c:	2900      	cmp	r1, #0
    3e3e:	d100      	bne.n	3e42 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e40:	b662      	cpsie	i
    3e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e44:	2601      	movs	r6, #1
    3e46:	72ae      	strb	r6, [r5, #10]
    3e48:	b901      	cbnz	r1, 3e4c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3e4a:	b662      	cpsie	i
    3e4c:	2018      	movs	r0, #24
    3e4e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3e52:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3e56:	61a6      	str	r6, [r4, #24]
    3e58:	f44f 7020 	mov.w	r0, #640	; 0x280
    3e5c:	f8ad 0000 	strh.w	r0, [sp]
    3e60:	f8bd 0000 	ldrh.w	r0, [sp]
    3e64:	1e41      	subs	r1, r0, #1
    3e66:	f8ad 1000 	strh.w	r1, [sp]
    3e6a:	d2f9      	bcs.n	3e60 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3e6c:	2700      	movs	r7, #0
    3e6e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3e72:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3e76:	4808      	ldr	r0, [pc, #32]	; (3e98 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3e78:	3008      	adds	r0, #8
    3e7a:	f008 fa8a 	bl	c392 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3e7e:	702f      	strb	r7, [r5, #0]
    3e80:	f7ff fd7a 	bl	3978 <MPSL_IRQ_CLOCK_Handler+0x88>
    3e84:	6166      	str	r6, [r4, #20]
    3e86:	7968      	ldrb	r0, [r5, #5]
    3e88:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3e8c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3e90:	2018      	movs	r0, #24
    3e92:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e98:	20000058 	.word	0x20000058

00003e9c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3e9c:	b510      	push	{r4, lr}
    3e9e:	4c04      	ldr	r4, [pc, #16]	; (3eb0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3ea0:	7e20      	ldrb	r0, [r4, #24]
    3ea2:	f000 0003 	and.w	r0, r0, #3
    3ea6:	f008 fa0e 	bl	c2c6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3eaa:	2800      	cmp	r0, #0
    3eac:	d0f8      	beq.n	3ea0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3eae:	bd10      	pop	{r4, pc}
    3eb0:	20000058 	.word	0x20000058

00003eb4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3eb4:	4901      	ldr	r1, [pc, #4]	; (3ebc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3eb6:	2001      	movs	r0, #1
    3eb8:	7008      	strb	r0, [r1, #0]
    3eba:	4770      	bx	lr
    3ebc:	20000355 	.word	0x20000355

00003ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3ec0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3ec4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3ec8:	b918      	cbnz	r0, 3ed2 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3eca:	4803      	ldr	r0, [pc, #12]	; (3ed8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3ecc:	7800      	ldrb	r0, [r0, #0]
    3ece:	2800      	cmp	r0, #0
    3ed0:	d000      	beq.n	3ed4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3ed2:	2001      	movs	r0, #1
    3ed4:	4770      	bx	lr
    3ed6:	0000      	.short	0x0000
    3ed8:	20000355 	.word	0x20000355

00003edc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3edc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3ee0:	2101      	movs	r1, #1
    3ee2:	6041      	str	r1, [r0, #4]
    3ee4:	2100      	movs	r1, #0
    3ee6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3eea:	4801      	ldr	r0, [pc, #4]	; (3ef0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3eec:	7001      	strb	r1, [r0, #0]
    3eee:	4770      	bx	lr
    3ef0:	20000355 	.word	0x20000355

00003ef4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3ef4:	4802      	ldr	r0, [pc, #8]	; (3f00 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3ef6:	6800      	ldr	r0, [r0, #0]
    3ef8:	f000 0003 	and.w	r0, r0, #3
    3efc:	4770      	bx	lr
    3efe:	0000      	.short	0x0000
    3f00:	4000041c 	.word	0x4000041c
    3f04:	b510      	push	{r4, lr}
    3f06:	b131      	cbz	r1, 3f16 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3f08:	2901      	cmp	r1, #1
    3f0a:	d007      	beq.n	3f1c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3f0c:	f240 3102 	movw	r1, #770	; 0x302
    3f10:	a005      	add	r0, pc, #20	; (adr r0, 3f28 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3f12:	f000 f821 	bl	3f58 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3f16:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3f1a:	e001      	b.n	3f20 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3f1c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3f20:	f000 0001 	and.w	r0, r0, #1
    3f24:	bd10      	pop	{r4, pc}
    3f26:	0000      	.short	0x0000
    3f28:	5f66726e 	.word	0x5f66726e
    3f2c:	636f6c63 	.word	0x636f6c63
    3f30:	00682e6b 	.word	0x00682e6b
    3f34:	f3bf 8f4f 	dsb	sy
    3f38:	4805      	ldr	r0, [pc, #20]	; (3f50 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3f3a:	6801      	ldr	r1, [r0, #0]
    3f3c:	4a05      	ldr	r2, [pc, #20]	; (3f54 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3f3e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3f42:	4311      	orrs	r1, r2
    3f44:	6001      	str	r1, [r0, #0]
    3f46:	f3bf 8f4f 	dsb	sy
    3f4a:	bf00      	nop
    3f4c:	e7fd      	b.n	3f4a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3f4e:	0000      	.short	0x0000
    3f50:	e000ed0c 	.word	0xe000ed0c
    3f54:	05fa0004 	.word	0x05fa0004

00003f58 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3f58:	b672      	cpsid	i
    3f5a:	4a03      	ldr	r2, [pc, #12]	; (3f68 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3f5c:	6852      	ldr	r2, [r2, #4]
    3f5e:	b102      	cbz	r2, 3f62 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3f60:	4790      	blx	r2
    3f62:	f7ff ffe7 	bl	3f34 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3f66:	0000      	.short	0x0000
    3f68:	20000078 	.word	0x20000078
    3f6c:	4806      	ldr	r0, [pc, #24]	; (3f88 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3f6e:	b510      	push	{r4, lr}
    3f70:	2100      	movs	r1, #0
    3f72:	6001      	str	r1, [r0, #0]
    3f74:	2101      	movs	r1, #1
    3f76:	6001      	str	r1, [r0, #0]
    3f78:	4608      	mov	r0, r1
    3f7a:	f008 f9cb 	bl	c314 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f82:	2001      	movs	r0, #1
    3f84:	f008 b9b9 	b.w	c2fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3f88:	40001ffc 	.word	0x40001ffc
    3f8c:	4807      	ldr	r0, [pc, #28]	; (3fac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3f8e:	b510      	push	{r4, lr}
    3f90:	2101      	movs	r1, #1
    3f92:	6041      	str	r1, [r0, #4]
    3f94:	1e89      	subs	r1, r1, #2
    3f96:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3f9a:	200c      	movs	r0, #12
    3f9c:	f008 f9ba 	bl	c314 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3fa4:	200c      	movs	r0, #12
    3fa6:	f008 b9a8 	b.w	c2fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3faa:	0000      	.short	0x0000
    3fac:	4000c000 	.word	0x4000c000

00003fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3fb0:	b50e      	push	{r1, r2, r3, lr}
    3fb2:	b672      	cpsid	i
    3fb4:	4a0f      	ldr	r2, [pc, #60]	; (3ff4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3fb6:	6855      	ldr	r5, [r2, #4]
    3fb8:	b1d5      	cbz	r5, 3ff0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3fba:	2200      	movs	r2, #0
    3fbc:	4603      	mov	r3, r0
    3fbe:	466e      	mov	r6, sp
    3fc0:	240a      	movs	r4, #10
    3fc2:	e003      	b.n	3fcc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3fc4:	fbb0 f0f4 	udiv	r0, r0, r4
    3fc8:	1c52      	adds	r2, r2, #1
    3fca:	b2d2      	uxtb	r2, r2
    3fcc:	2800      	cmp	r0, #0
    3fce:	d1f9      	bne.n	3fc4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3fd0:	54b0      	strb	r0, [r6, r2]
    3fd2:	e009      	b.n	3fe8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3fd4:	fbb3 f0f4 	udiv	r0, r3, r4
    3fd8:	fb04 3010 	mls	r0, r4, r0, r3
    3fdc:	fbb3 f3f4 	udiv	r3, r3, r4
    3fe0:	1e52      	subs	r2, r2, #1
    3fe2:	b2d2      	uxtb	r2, r2
    3fe4:	3030      	adds	r0, #48	; 0x30
    3fe6:	54b0      	strb	r0, [r6, r2]
    3fe8:	2a00      	cmp	r2, #0
    3fea:	d1f3      	bne.n	3fd4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3fec:	4630      	mov	r0, r6
    3fee:	47a8      	blx	r5
    3ff0:	f7ff ffa0 	bl	3f34 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3ff4:	20000078 	.word	0x20000078

00003ff8 <mpsl_init>:
    3ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ffc:	4c18      	ldr	r4, [pc, #96]	; (4060 <mpsl_init+0x68>)
    3ffe:	4606      	mov	r6, r0
    4000:	4617      	mov	r7, r2
    4002:	7860      	ldrb	r0, [r4, #1]
    4004:	460d      	mov	r5, r1
    4006:	b118      	cbz	r0, 4010 <mpsl_init+0x18>
    4008:	f04f 30ff 	mov.w	r0, #4294967295
    400c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4010:	f7fc fbd8 	bl	7c4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    4014:	b906      	cbnz	r6, 4018 <mpsl_init+0x20>
    4016:	4e13      	ldr	r6, [pc, #76]	; (4064 <mpsl_init+0x6c>)
    4018:	6067      	str	r7, [r4, #4]
    401a:	7025      	strb	r5, [r4, #0]
    401c:	f7ff ffa6 	bl	3f6c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4020:	f7ff ffb4 	bl	3f8c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    4024:	4630      	mov	r0, r6
    4026:	f7ff fe79 	bl	3d1c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    402a:	0006      	movs	r6, r0
    402c:	d1ee      	bne.n	400c <mpsl_init+0x14>
    402e:	f7fe fe77 	bl	2d20 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4032:	f7ff fef1 	bl	3e18 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4036:	f008 f830 	bl	c09a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    403a:	4628      	mov	r0, r5
    403c:	f008 f95d 	bl	c2fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4040:	2001      	movs	r0, #1
    4042:	2d00      	cmp	r5, #0
    4044:	db09      	blt.n	405a <mpsl_init+0x62>
    4046:	f005 011f 	and.w	r1, r5, #31
    404a:	fa00 f101 	lsl.w	r1, r0, r1
    404e:	096a      	lsrs	r2, r5, #5
    4050:	0092      	lsls	r2, r2, #2
    4052:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4056:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    405a:	7060      	strb	r0, [r4, #1]
    405c:	4630      	mov	r0, r6
    405e:	e7d5      	b.n	400c <mpsl_init+0x14>
    4060:	20000078 	.word	0x20000078
    4064:	0000c336 	.word	0x0000c336

00004068 <mpsl_is_initialized>:
    4068:	4801      	ldr	r0, [pc, #4]	; (4070 <mpsl_is_initialized+0x8>)
    406a:	7840      	ldrb	r0, [r0, #1]
    406c:	4770      	bx	lr
    406e:	0000      	.short	0x0000
    4070:	20000078 	.word	0x20000078

00004074 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4074:	4807      	ldr	r0, [pc, #28]	; (4094 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    4076:	f990 0000 	ldrsb.w	r0, [r0]
    407a:	2800      	cmp	r0, #0
    407c:	db09      	blt.n	4092 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    407e:	f000 021f 	and.w	r2, r0, #31
    4082:	2101      	movs	r1, #1
    4084:	4091      	lsls	r1, r2
    4086:	0940      	lsrs	r0, r0, #5
    4088:	0080      	lsls	r0, r0, #2
    408a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    408e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4092:	4770      	bx	lr
    4094:	20000078 	.word	0x20000078

00004098 <mpsl_temperature_get>:
    4098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    409c:	2601      	movs	r6, #1
    409e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    40a2:	0331      	lsls	r1, r6, #12
    40a4:	f04f 0800 	mov.w	r8, #0
    40a8:	4640      	mov	r0, r8
    40aa:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    40ae:	f3bf 8f4f 	dsb	sy
    40b2:	f3bf 8f6f 	isb	sy
    40b6:	4c16      	ldr	r4, [pc, #88]	; (4110 <mpsl_temperature_get+0x78>)
    40b8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    40bc:	200c      	movs	r0, #12
    40be:	f008 f948 	bl	c352 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    40c2:	4d14      	ldr	r5, [pc, #80]	; (4114 <mpsl_temperature_get+0x7c>)
    40c4:	6828      	ldr	r0, [r5, #0]
    40c6:	43c0      	mvns	r0, r0
    40c8:	f340 1700 	sbfx	r7, r0, #4, #1
    40cc:	6828      	ldr	r0, [r5, #0]
    40ce:	f040 0010 	orr.w	r0, r0, #16
    40d2:	6028      	str	r0, [r5, #0]
    40d4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    40d8:	6026      	str	r6, [r4, #0]
    40da:	1c7f      	adds	r7, r7, #1
    40dc:	e002      	b.n	40e4 <mpsl_temperature_get+0x4c>
    40de:	bf00      	nop
    40e0:	f000 f8a0 	bl	4224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    40e4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    40e8:	2800      	cmp	r0, #0
    40ea:	d0f9      	beq.n	40e0 <mpsl_temperature_get+0x48>
    40ec:	b91f      	cbnz	r7, 40f6 <mpsl_temperature_get+0x5e>
    40ee:	6828      	ldr	r0, [r5, #0]
    40f0:	f020 0010 	bic.w	r0, r0, #16
    40f4:	6028      	str	r0, [r5, #0]
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <mpsl_temperature_get+0x80>)
    40f8:	6805      	ldr	r5, [r0, #0]
    40fa:	6066      	str	r6, [r4, #4]
    40fc:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4100:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4104:	200c      	movs	r0, #12
    4106:	f008 f924 	bl	c352 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    410a:	4628      	mov	r0, r5
    410c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4110:	4000c000 	.word	0x4000c000
    4114:	e000ed10 	.word	0xe000ed10
    4118:	4000c508 	.word	0x4000c508

0000411c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    411c:	b510      	push	{r4, lr}
    411e:	4602      	mov	r2, r0
    4120:	2005      	movs	r0, #5
    4122:	490c      	ldr	r1, [pc, #48]	; (4154 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4124:	e004      	b.n	4130 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4126:	bf00      	nop
    4128:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    412c:	791b      	ldrb	r3, [r3, #4]
    412e:	b133      	cbz	r3, 413e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4130:	1e40      	subs	r0, r0, #1
    4132:	b2c0      	uxtb	r0, r0
    4134:	d2f8      	bcs.n	4128 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4136:	2148      	movs	r1, #72	; 0x48
    4138:	2069      	movs	r0, #105	; 0x69
    413a:	f7ff ff39 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    413e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    4142:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4146:	2200      	movs	r2, #0
    4148:	714a      	strb	r2, [r1, #5]
    414a:	718a      	strb	r2, [r1, #6]
    414c:	2201      	movs	r2, #1
    414e:	710a      	strb	r2, [r1, #4]
    4150:	bd10      	pop	{r4, pc}
    4152:	0000      	.short	0x0000
    4154:	20001194 	.word	0x20001194

00004158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4158:	b510      	push	{r4, lr}
    415a:	2805      	cmp	r0, #5
    415c:	d301      	bcc.n	4162 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    415e:	2158      	movs	r1, #88	; 0x58
    4160:	e006      	b.n	4170 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4162:	490a      	ldr	r1, [pc, #40]	; (418c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4164:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4168:	7901      	ldrb	r1, [r0, #4]
    416a:	2901      	cmp	r1, #1
    416c:	d003      	beq.n	4176 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    416e:	2159      	movs	r1, #89	; 0x59
    4170:	2069      	movs	r0, #105	; 0x69
    4172:	f7ff ff1d 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4176:	7941      	ldrb	r1, [r0, #5]
    4178:	7982      	ldrb	r2, [r0, #6]
    417a:	1c49      	adds	r1, r1, #1
    417c:	b2c9      	uxtb	r1, r1
    417e:	428a      	cmp	r2, r1
    4180:	d000      	beq.n	4184 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4182:	7141      	strb	r1, [r0, #5]
    4184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4188:	f7ff bf74 	b.w	4074 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    418c:	20001194 	.word	0x20001194

00004190 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    4190:	b510      	push	{r4, lr}
    4192:	2805      	cmp	r0, #5
    4194:	d303      	bcc.n	419e <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    4196:	214f      	movs	r1, #79	; 0x4f
    4198:	2069      	movs	r0, #105	; 0x69
    419a:	f7ff ff09 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    419e:	4a03      	ldr	r2, [pc, #12]	; (41ac <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    41a0:	2100      	movs	r1, #0
    41a2:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    41a6:	7101      	strb	r1, [r0, #4]
    41a8:	bd10      	pop	{r4, pc}
    41aa:	0000      	.short	0x0000
    41ac:	20001194 	.word	0x20001194

000041b0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    41b0:	b570      	push	{r4, r5, r6, lr}
    41b2:	2505      	movs	r5, #5
    41b4:	4e0e      	ldr	r6, [pc, #56]	; (41f0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    41b6:	4c0f      	ldr	r4, [pc, #60]	; (41f4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    41b8:	e016      	b.n	41e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    41ba:	7821      	ldrb	r1, [r4, #0]
    41bc:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    41c0:	7902      	ldrb	r2, [r0, #4]
    41c2:	2a01      	cmp	r2, #1
    41c4:	d108      	bne.n	41d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    41c6:	7942      	ldrb	r2, [r0, #5]
    41c8:	7983      	ldrb	r3, [r0, #6]
    41ca:	429a      	cmp	r2, r3
    41cc:	d004      	beq.n	41d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    41ce:	7942      	ldrb	r2, [r0, #5]
    41d0:	7182      	strb	r2, [r0, #6]
    41d2:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    41d6:	4780      	blx	r0
    41d8:	7820      	ldrb	r0, [r4, #0]
    41da:	1c40      	adds	r0, r0, #1
    41dc:	b2c0      	uxtb	r0, r0
    41de:	7020      	strb	r0, [r4, #0]
    41e0:	2805      	cmp	r0, #5
    41e2:	d301      	bcc.n	41e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    41e4:	2000      	movs	r0, #0
    41e6:	7020      	strb	r0, [r4, #0]
    41e8:	1e6d      	subs	r5, r5, #1
    41ea:	b2ed      	uxtb	r5, r5
    41ec:	d2e5      	bcs.n	41ba <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    41ee:	bd70      	pop	{r4, r5, r6, pc}
    41f0:	20001194 	.word	0x20001194
    41f4:	20000356 	.word	0x20000356

000041f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    41f8:	b500      	push	{lr}
    41fa:	f008 f8d9 	bl	c3b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    41fe:	b940      	cbnz	r0, 4212 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4200:	f008 f8e0 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4204:	b928      	cbnz	r0, 4212 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4206:	f008 f8f4 	bl	c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    420a:	b910      	cbnz	r0, 4212 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    420c:	f008 f905 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4210:	b108      	cbz	r0, 4216 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4212:	4802      	ldr	r0, [pc, #8]	; (421c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4214:	bd00      	pop	{pc}
    4216:	4802      	ldr	r0, [pc, #8]	; (4220 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4218:	bd00      	pop	{pc}
    421a:	0000      	.short	0x0000
    421c:	4000050c 	.word	0x4000050c
    4220:	4001e700 	.word	0x4001e700

00004224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4224:	b510      	push	{r4, lr}
    4226:	f008 f8f8 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    422a:	b330      	cbz	r0, 427a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    422c:	f3ef 8010 	mrs	r0, PRIMASK
    4230:	b1c8      	cbz	r0, 4266 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4232:	2100      	movs	r1, #0
    4234:	b672      	cpsid	i
    4236:	4812      	ldr	r0, [pc, #72]	; (4280 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4238:	6802      	ldr	r2, [r0, #0]
    423a:	6803      	ldr	r3, [r0, #0]
    423c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4240:	f043 0310 	orr.w	r3, r3, #16
    4244:	6003      	str	r3, [r0, #0]
    4246:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    424a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    424e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4252:	431c      	orrs	r4, r3
    4254:	d000      	beq.n	4258 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4256:	bf40      	sev
    4258:	bf20      	wfe
    425a:	bf00      	nop
    425c:	bf00      	nop
    425e:	bf00      	nop
    4260:	bf00      	nop
    4262:	b112      	cbz	r2, 426a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4264:	e005      	b.n	4272 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4266:	2101      	movs	r1, #1
    4268:	e7e4      	b.n	4234 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    426a:	6802      	ldr	r2, [r0, #0]
    426c:	f022 0210 	bic.w	r2, r2, #16
    4270:	6002      	str	r2, [r0, #0]
    4272:	2900      	cmp	r1, #0
    4274:	d000      	beq.n	4278 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4276:	b662      	cpsie	i
    4278:	bd10      	pop	{r4, pc}
    427a:	bf20      	wfe
    427c:	bd10      	pop	{r4, pc}
    427e:	0000      	.short	0x0000
    4280:	e000ed10 	.word	0xe000ed10

00004284 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    4284:	4901      	ldr	r1, [pc, #4]	; (428c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    4286:	2001      	movs	r0, #1
    4288:	7088      	strb	r0, [r1, #2]
    428a:	4770      	bx	lr
    428c:	20000080 	.word	0x20000080

00004290 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4290:	0000c667 0000c69f 0000c689 0000c677     g...........w...
    42a0:	0000c683 0000c671 0000c665 0000c663     ....q...e...c...
    42b0:	0000c69b 0000c68f 0000c67d 0000c66b     ........}...k...
    42c0:	0000c65d 0000c655 0000c659 0000c64f     ]...U...Y...O...

000042d0 <mpsl_fem_disable>:
    42d0:	4801      	ldr	r0, [pc, #4]	; (42d8 <mpsl_fem_disable+0x8>)
    42d2:	6800      	ldr	r0, [r0, #0]
    42d4:	6800      	ldr	r0, [r0, #0]
    42d6:	4700      	bx	r0
    42d8:	20000094 	.word	0x20000094

000042dc <mpsl_fem_lna_configuration_clear>:
    42dc:	4801      	ldr	r0, [pc, #4]	; (42e4 <mpsl_fem_lna_configuration_clear+0x8>)
    42de:	6800      	ldr	r0, [r0, #0]
    42e0:	6940      	ldr	r0, [r0, #20]
    42e2:	4700      	bx	r0
    42e4:	20000094 	.word	0x20000094

000042e8 <mpsl_fem_lna_configuration_set>:
    42e8:	4a01      	ldr	r2, [pc, #4]	; (42f0 <mpsl_fem_lna_configuration_set+0x8>)
    42ea:	6812      	ldr	r2, [r2, #0]
    42ec:	68d2      	ldr	r2, [r2, #12]
    42ee:	4710      	bx	r2
    42f0:	20000094 	.word	0x20000094

000042f4 <mpsl_fem_lna_is_configured>:
    42f4:	4901      	ldr	r1, [pc, #4]	; (42fc <mpsl_fem_lna_is_configured+0x8>)
    42f6:	6809      	ldr	r1, [r1, #0]
    42f8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    42fa:	4708      	bx	r1
    42fc:	20000094 	.word	0x20000094

00004300 <mpsl_fem_pa_configuration_clear>:
    4300:	4801      	ldr	r0, [pc, #4]	; (4308 <mpsl_fem_pa_configuration_clear+0x8>)
    4302:	6800      	ldr	r0, [r0, #0]
    4304:	6900      	ldr	r0, [r0, #16]
    4306:	4700      	bx	r0
    4308:	20000094 	.word	0x20000094

0000430c <mpsl_fem_pa_configuration_set>:
    430c:	4a01      	ldr	r2, [pc, #4]	; (4314 <mpsl_fem_pa_configuration_set+0x8>)
    430e:	6812      	ldr	r2, [r2, #0]
    4310:	6892      	ldr	r2, [r2, #8]
    4312:	4710      	bx	r2
    4314:	20000094 	.word	0x20000094

00004318 <mpsl_fem_pa_gain_set>:
    4318:	4901      	ldr	r1, [pc, #4]	; (4320 <mpsl_fem_pa_gain_set+0x8>)
    431a:	6809      	ldr	r1, [r1, #0]
    431c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    431e:	4708      	bx	r1
    4320:	20000094 	.word	0x20000094

00004324 <mpsl_fem_pa_is_configured>:
    4324:	4901      	ldr	r1, [pc, #4]	; (432c <mpsl_fem_pa_is_configured+0x8>)
    4326:	6809      	ldr	r1, [r1, #0]
    4328:	6a89      	ldr	r1, [r1, #40]	; 0x28
    432a:	4708      	bx	r1
    432c:	20000094 	.word	0x20000094

00004330 <mpsl_fem_tx_power_split>:
    4330:	4b01      	ldr	r3, [pc, #4]	; (4338 <mpsl_fem_tx_power_split+0x8>)
    4332:	681b      	ldr	r3, [r3, #0]
    4334:	685b      	ldr	r3, [r3, #4]
    4336:	4718      	bx	r3
    4338:	20000094 	.word	0x20000094

0000433c <mpsl_fem_device_config_254_apply_get>:
    433c:	4801      	ldr	r0, [pc, #4]	; (4344 <mpsl_fem_device_config_254_apply_get+0x8>)
    433e:	7800      	ldrb	r0, [r0, #0]
    4340:	4770      	bx	lr
    4342:	0000      	.short	0x0000
    4344:	20000357 	.word	0x20000357
    4348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    434a:	4c14      	ldr	r4, [pc, #80]	; (439c <mpsl_fem_device_config_254_apply_get+0x60>)
    434c:	7a20      	ldrb	r0, [r4, #8]
    434e:	f88d 0001 	strb.w	r0, [sp, #1]
    4352:	79e0      	ldrb	r0, [r4, #7]
    4354:	f88d 0000 	strb.w	r0, [sp]
    4358:	79a0      	ldrb	r0, [r4, #6]
    435a:	f8ad 0004 	strh.w	r0, [sp, #4]
    435e:	7960      	ldrb	r0, [r4, #5]
    4360:	f8ad 0002 	strh.w	r0, [sp, #2]
    4364:	4668      	mov	r0, sp
    4366:	f005 fe73 	bl	a050 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    436a:	b108      	cbz	r0, 4370 <mpsl_fem_device_config_254_apply_get+0x34>
    436c:	2190      	movs	r1, #144	; 0x90
    436e:	e010      	b.n	4392 <mpsl_fem_device_config_254_apply_get+0x56>
    4370:	68e0      	ldr	r0, [r4, #12]
    4372:	9002      	str	r0, [sp, #8]
    4374:	a802      	add	r0, sp, #8
    4376:	f005 fe81 	bl	a07c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    437a:	b108      	cbz	r0, 4380 <mpsl_fem_device_config_254_apply_get+0x44>
    437c:	2194      	movs	r1, #148	; 0x94
    437e:	e008      	b.n	4392 <mpsl_fem_device_config_254_apply_get+0x56>
    4380:	4807      	ldr	r0, [pc, #28]	; (43a0 <mpsl_fem_device_config_254_apply_get+0x64>)
    4382:	6800      	ldr	r0, [r0, #0]
    4384:	9003      	str	r0, [sp, #12]
    4386:	a803      	add	r0, sp, #12
    4388:	f00b fd5b 	bl	fe42 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    438c:	2800      	cmp	r0, #0
    438e:	d003      	beq.n	4398 <mpsl_fem_device_config_254_apply_get+0x5c>
    4390:	2198      	movs	r1, #152	; 0x98
    4392:	2003      	movs	r0, #3
    4394:	f000 f8ea 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4398:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    439a:	0000      	.short	0x0000
    439c:	200011bc 	.word	0x200011bc
    43a0:	00004674 	.word	0x00004674

000043a4 <sdc_build_revision_get>:
    43a4:	b510      	push	{r4, lr}
    43a6:	b128      	cbz	r0, 43b4 <sdc_build_revision_get+0x10>
    43a8:	2214      	movs	r2, #20
    43aa:	4904      	ldr	r1, [pc, #16]	; (43bc <sdc_build_revision_get+0x18>)
    43ac:	f008 f875 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    43b0:	2000      	movs	r0, #0
    43b2:	bd10      	pop	{r4, pc}
    43b4:	f06f 0015 	mvn.w	r0, #21
    43b8:	bd10      	pop	{r4, pc}
    43ba:	0000      	.short	0x0000
    43bc:	00004698 	.word	0x00004698

000043c0 <sdc_cfg_set>:
    43c0:	b570      	push	{r4, r5, r6, lr}
    43c2:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    43c6:	bb90      	cbnz	r0, 442e <sdc_cfg_set+0x6e>
    43c8:	4c24      	ldr	r4, [pc, #144]	; (445c <sdc_cfg_set+0x9c>)
    43ca:	7860      	ldrb	r0, [r4, #1]
    43cc:	b108      	cbz	r0, 43d2 <sdc_cfg_set+0x12>
    43ce:	1198      	asrs	r0, r3, #6
    43d0:	bd70      	pop	{r4, r5, r6, pc}
    43d2:	b309      	cbz	r1, 4418 <sdc_cfg_set+0x58>
    43d4:	f06f 0515 	mvn.w	r5, #21
    43d8:	b33a      	cbz	r2, 442a <sdc_cfg_set+0x6a>
    43da:	4821      	ldr	r0, [pc, #132]	; (4460 <sdc_cfg_set+0xa0>)
    43dc:	2908      	cmp	r1, #8
    43de:	d237      	bcs.n	4450 <sdc_cfg_set+0x90>
    43e0:	e8df f001 	tbb	[pc, r1]
    43e4:	0a070436 	.word	0x0a070436
    43e8:	291e1b18 	.word	0x291e1b18
    43ec:	7811      	ldrb	r1, [r2, #0]
    43ee:	7001      	strb	r1, [r0, #0]
    43f0:	e023      	b.n	443a <sdc_cfg_set+0x7a>
    43f2:	7811      	ldrb	r1, [r2, #0]
    43f4:	7041      	strb	r1, [r0, #1]
    43f6:	e020      	b.n	443a <sdc_cfg_set+0x7a>
    43f8:	7891      	ldrb	r1, [r2, #2]
    43fa:	b1b1      	cbz	r1, 442a <sdc_cfg_set+0x6a>
    43fc:	78d1      	ldrb	r1, [r2, #3]
    43fe:	b1a1      	cbz	r1, 442a <sdc_cfg_set+0x6a>
    4400:	7811      	ldrb	r1, [r2, #0]
    4402:	291b      	cmp	r1, #27
    4404:	d311      	bcc.n	442a <sdc_cfg_set+0x6a>
    4406:	7851      	ldrb	r1, [r2, #1]
    4408:	291b      	cmp	r1, #27
    440a:	d30e      	bcc.n	442a <sdc_cfg_set+0x6a>
    440c:	6811      	ldr	r1, [r2, #0]
    440e:	f8c0 1005 	str.w	r1, [r0, #5]
    4412:	e012      	b.n	443a <sdc_cfg_set+0x7a>
    4414:	6811      	ldr	r1, [r2, #0]
    4416:	60c1      	str	r1, [r0, #12]
    4418:	e00f      	b.n	443a <sdc_cfg_set+0x7a>
    441a:	7811      	ldrb	r1, [r2, #0]
    441c:	7081      	strb	r1, [r0, #2]
    441e:	e00c      	b.n	443a <sdc_cfg_set+0x7a>
    4420:	78e1      	ldrb	r1, [r4, #3]
    4422:	b129      	cbz	r1, 4430 <sdc_cfg_set+0x70>
    4424:	7811      	ldrb	r1, [r2, #0]
    4426:	2902      	cmp	r1, #2
    4428:	d202      	bcs.n	4430 <sdc_cfg_set+0x70>
    442a:	4628      	mov	r0, r5
    442c:	bd70      	pop	{r4, r5, r6, pc}
    442e:	e00f      	b.n	4450 <sdc_cfg_set+0x90>
    4430:	7811      	ldrb	r1, [r2, #0]
    4432:	7401      	strb	r1, [r0, #16]
    4434:	e001      	b.n	443a <sdc_cfg_set+0x7a>
    4436:	8811      	ldrh	r1, [r2, #0]
    4438:	8241      	strh	r1, [r0, #18]
    443a:	2201      	movs	r2, #1
    443c:	4908      	ldr	r1, [pc, #32]	; (4460 <sdc_cfg_set+0xa0>)
    443e:	2000      	movs	r0, #0
    4440:	f008 f949 	bl	c6d6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    4444:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4448:	db04      	blt.n	4454 <sdc_cfg_set+0x94>
    444a:	f06f 000b 	mvn.w	r0, #11
    444e:	e7ed      	b.n	442c <sdc_cfg_set+0x6c>
    4450:	4618      	mov	r0, r3
    4452:	e7eb      	b.n	442c <sdc_cfg_set+0x6c>
    4454:	2101      	movs	r1, #1
    4456:	70a1      	strb	r1, [r4, #2]
    4458:	e7e8      	b.n	442c <sdc_cfg_set+0x6c>
    445a:	0000      	.short	0x0000
    445c:	20000098 	.word	0x20000098
    4460:	200011bc 	.word	0x200011bc

00004464 <sdc_disable>:
    4464:	b510      	push	{r4, lr}
    4466:	4c07      	ldr	r4, [pc, #28]	; (4484 <sdc_disable+0x20>)
    4468:	7860      	ldrb	r0, [r4, #1]
    446a:	b120      	cbz	r0, 4476 <sdc_disable+0x12>
    446c:	f006 f8aa 	bl	a5c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    4470:	7820      	ldrb	r0, [r4, #0]
    4472:	f7ff fe8d 	bl	4190 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    4476:	f000 fd85 	bl	4f84 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    447a:	f000 fe5f 	bl	513c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    447e:	2000      	movs	r0, #0
    4480:	7060      	strb	r0, [r4, #1]
    4482:	bd10      	pop	{r4, pc}
    4484:	20000098 	.word	0x20000098

00004488 <sdc_enable>:
    4488:	b570      	push	{r4, r5, r6, lr}
    448a:	460c      	mov	r4, r1
    448c:	0005      	movs	r5, r0
    448e:	d019      	beq.n	44c4 <sdc_enable+0x3c>
    4490:	b1c4      	cbz	r4, 44c4 <sdc_enable+0x3c>
    4492:	f000 f927 	bl	46e4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4496:	b1c0      	cbz	r0, 44ca <sdc_enable+0x42>
    4498:	4628      	mov	r0, r5
    449a:	f7ff fe3f 	bl	411c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    449e:	4d0c      	ldr	r5, [pc, #48]	; (44d0 <sdc_enable+0x48>)
    44a0:	2200      	movs	r2, #0
    44a2:	490c      	ldr	r1, [pc, #48]	; (44d4 <sdc_enable+0x4c>)
    44a4:	7028      	strb	r0, [r5, #0]
    44a6:	4620      	mov	r0, r4
    44a8:	f008 f915 	bl	c6d6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    44ac:	f00c f8cc 	bl	10648 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    44b0:	2100      	movs	r1, #0
    44b2:	7828      	ldrb	r0, [r5, #0]
    44b4:	f006 f876 	bl	a5a4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    44b8:	f7ff ff46 	bl	4348 <mpsl_fem_device_config_254_apply_get+0xc>
    44bc:	2001      	movs	r0, #1
    44be:	7068      	strb	r0, [r5, #1]
    44c0:	2000      	movs	r0, #0
    44c2:	bd70      	pop	{r4, r5, r6, pc}
    44c4:	f06f 0015 	mvn.w	r0, #21
    44c8:	bd70      	pop	{r4, r5, r6, pc}
    44ca:	f04f 30ff 	mov.w	r0, #4294967295
    44ce:	bd70      	pop	{r4, r5, r6, pc}
    44d0:	20000098 	.word	0x20000098
    44d4:	200011bc 	.word	0x200011bc

000044d8 <sdc_init>:
    44d8:	b530      	push	{r4, r5, lr}
    44da:	b089      	sub	sp, #36	; 0x24
    44dc:	0005      	movs	r5, r0
    44de:	d00c      	beq.n	44fa <sdc_init+0x22>
    44e0:	f7ff fdc2 	bl	4068 <mpsl_is_initialized>
    44e4:	f04f 34ff 	mov.w	r4, #4294967295
    44e8:	b120      	cbz	r0, 44f4 <sdc_init+0x1c>
    44ea:	f7ff fc69 	bl	3dc0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    44ee:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    44f2:	d905      	bls.n	4500 <sdc_init+0x28>
    44f4:	4620      	mov	r0, r4
    44f6:	b009      	add	sp, #36	; 0x24
    44f8:	bd30      	pop	{r4, r5, pc}
    44fa:	f06f 0015 	mvn.w	r0, #21
    44fe:	e7fa      	b.n	44f6 <sdc_init+0x1e>
    4500:	4c15      	ldr	r4, [pc, #84]	; (4558 <sdc_init+0x80>)
    4502:	4816      	ldr	r0, [pc, #88]	; (455c <sdc_init+0x84>)
    4504:	6065      	str	r5, [r4, #4]
    4506:	f000 fa0b 	bl	4920 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    450a:	2000      	movs	r0, #0
    450c:	7060      	strb	r0, [r4, #1]
    450e:	70a0      	strb	r0, [r4, #2]
    4510:	70e0      	strb	r0, [r4, #3]
    4512:	4601      	mov	r1, r0
    4514:	2220      	movs	r2, #32
    4516:	4668      	mov	r0, sp
    4518:	f008 f839 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    451c:	2220      	movs	r2, #32
    451e:	4910      	ldr	r1, [pc, #64]	; (4560 <sdc_init+0x88>)
    4520:	4668      	mov	r0, sp
    4522:	f007 ffba 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4526:	2220      	movs	r2, #32
    4528:	4669      	mov	r1, sp
    452a:	480e      	ldr	r0, [pc, #56]	; (4564 <sdc_init+0x8c>)
    452c:	f007 ffb5 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4530:	f3ef 8410 	mrs	r4, PRIMASK
    4534:	b672      	cpsid	i
    4536:	f06f 000c 	mvn.w	r0, #12
    453a:	f000 fd31 	bl	4fa0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    453e:	480a      	ldr	r0, [pc, #40]	; (4568 <sdc_init+0x90>)
    4540:	f000 fe08 	bl	5154 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4544:	b118      	cbz	r0, 454e <sdc_init+0x76>
    4546:	21ab      	movs	r1, #171	; 0xab
    4548:	2003      	movs	r0, #3
    454a:	f000 f80f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    454e:	b904      	cbnz	r4, 4552 <sdc_init+0x7a>
    4550:	b662      	cpsie	i
    4552:	2000      	movs	r0, #0
    4554:	e7cf      	b.n	44f6 <sdc_init+0x1e>
    4556:	0000      	.short	0x0000
    4558:	20000098 	.word	0x20000098
    455c:	00004349 	.word	0x00004349
    4560:	00004678 	.word	0x00004678
    4564:	200011bc 	.word	0x200011bc
    4568:	00004711 	.word	0x00004711

0000456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    456c:	b50e      	push	{r1, r2, r3, lr}
    456e:	b672      	cpsid	i
    4570:	4a15      	ldr	r2, [pc, #84]	; (45c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4572:	6855      	ldr	r5, [r2, #4]
    4574:	b1dd      	cbz	r5, 45ae <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    4576:	2200      	movs	r2, #0
    4578:	4603      	mov	r3, r0
    457a:	466e      	mov	r6, sp
    457c:	240a      	movs	r4, #10
    457e:	e003      	b.n	4588 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4580:	fbb0 f0f4 	udiv	r0, r0, r4
    4584:	1c52      	adds	r2, r2, #1
    4586:	b2d2      	uxtb	r2, r2
    4588:	2800      	cmp	r0, #0
    458a:	d1f9      	bne.n	4580 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    458c:	54b0      	strb	r0, [r6, r2]
    458e:	e00a      	b.n	45a6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    4590:	b2d8      	uxtb	r0, r3
    4592:	fbb0 f7f4 	udiv	r7, r0, r4
    4596:	fbb3 f3f4 	udiv	r3, r3, r4
    459a:	fb04 0017 	mls	r0, r4, r7, r0
    459e:	1e52      	subs	r2, r2, #1
    45a0:	b2d2      	uxtb	r2, r2
    45a2:	3030      	adds	r0, #48	; 0x30
    45a4:	54b0      	strb	r0, [r6, r2]
    45a6:	2a00      	cmp	r2, #0
    45a8:	d1f2      	bne.n	4590 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    45aa:	4630      	mov	r0, r6
    45ac:	47a8      	blx	r5
    45ae:	f3bf 8f4f 	dsb	sy
    45b2:	4806      	ldr	r0, [pc, #24]	; (45cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    45b4:	6801      	ldr	r1, [r0, #0]
    45b6:	4a06      	ldr	r2, [pc, #24]	; (45d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    45b8:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    45bc:	4311      	orrs	r1, r2
    45be:	6001      	str	r1, [r0, #0]
    45c0:	f3bf 8f4f 	dsb	sy
    45c4:	bf00      	nop
    45c6:	e7fd      	b.n	45c4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    45c8:	20000098 	.word	0x20000098
    45cc:	e000ed0c 	.word	0xe000ed0c
    45d0:	05fa0004 	.word	0x05fa0004

000045d4 <sdc_support_adv>:
    45d4:	4806      	ldr	r0, [pc, #24]	; (45f0 <sdc_support_adv+0x1c>)
    45d6:	b510      	push	{r4, lr}
    45d8:	7881      	ldrb	r1, [r0, #2]
    45da:	7840      	ldrb	r0, [r0, #1]
    45dc:	4301      	orrs	r1, r0
    45de:	d002      	beq.n	45e6 <sdc_support_adv+0x12>
    45e0:	f04f 30ff 	mov.w	r0, #4294967295
    45e4:	bd10      	pop	{r4, pc}
    45e6:	f005 fffb 	bl	a5e0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    45ea:	2000      	movs	r0, #0
    45ec:	bd10      	pop	{r4, pc}
    45ee:	0000      	.short	0x0000
    45f0:	20000098 	.word	0x20000098

000045f4 <sdc_support_dle_peripheral>:
    45f4:	4806      	ldr	r0, [pc, #24]	; (4610 <sdc_support_dle_peripheral+0x1c>)
    45f6:	b510      	push	{r4, lr}
    45f8:	7881      	ldrb	r1, [r0, #2]
    45fa:	7840      	ldrb	r0, [r0, #1]
    45fc:	4301      	orrs	r1, r0
    45fe:	d002      	beq.n	4606 <sdc_support_dle_peripheral+0x12>
    4600:	f04f 30ff 	mov.w	r0, #4294967295
    4604:	bd10      	pop	{r4, pc}
    4606:	f005 fd51 	bl	a0ac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    460a:	2000      	movs	r0, #0
    460c:	bd10      	pop	{r4, pc}
    460e:	0000      	.short	0x0000
    4610:	20000098 	.word	0x20000098

00004614 <sdc_support_le_2m_phy>:
    4614:	4806      	ldr	r0, [pc, #24]	; (4630 <sdc_support_le_2m_phy+0x1c>)
    4616:	b510      	push	{r4, lr}
    4618:	7881      	ldrb	r1, [r0, #2]
    461a:	7840      	ldrb	r0, [r0, #1]
    461c:	4301      	orrs	r1, r0
    461e:	d002      	beq.n	4626 <sdc_support_le_2m_phy+0x12>
    4620:	f04f 30ff 	mov.w	r0, #4294967295
    4624:	bd10      	pop	{r4, pc}
    4626:	f00b fdd7 	bl	101d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    462a:	2000      	movs	r0, #0
    462c:	bd10      	pop	{r4, pc}
    462e:	0000      	.short	0x0000
    4630:	20000098 	.word	0x20000098

00004634 <sdc_support_peripheral>:
    4634:	4806      	ldr	r0, [pc, #24]	; (4650 <sdc_support_peripheral+0x1c>)
    4636:	b510      	push	{r4, lr}
    4638:	7881      	ldrb	r1, [r0, #2]
    463a:	7840      	ldrb	r0, [r0, #1]
    463c:	4301      	orrs	r1, r0
    463e:	d002      	beq.n	4646 <sdc_support_peripheral+0x12>
    4640:	f04f 30ff 	mov.w	r0, #4294967295
    4644:	bd10      	pop	{r4, pc}
    4646:	f005 ffdd 	bl	a604 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    464a:	2000      	movs	r0, #0
    464c:	bd10      	pop	{r4, pc}
    464e:	0000      	.short	0x0000
    4650:	20000098 	.word	0x20000098

00004654 <sdc_support_phy_update_peripheral>:
    4654:	4806      	ldr	r0, [pc, #24]	; (4670 <sdc_support_phy_update_peripheral+0x1c>)
    4656:	b510      	push	{r4, lr}
    4658:	7881      	ldrb	r1, [r0, #2]
    465a:	7840      	ldrb	r0, [r0, #1]
    465c:	4301      	orrs	r1, r0
    465e:	d002      	beq.n	4666 <sdc_support_phy_update_peripheral+0x12>
    4660:	f04f 30ff 	mov.w	r0, #4294967295
    4664:	bd10      	pop	{r4, pc}
    4666:	f00b fdc7 	bl	101f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    466a:	2000      	movs	r0, #0
    466c:	bd10      	pop	{r4, pc}
    466e:	0000      	.short	0x0000
    4670:	20000098 	.word	0x20000098
    4674:	00000001 	.word	0x00000001
    4678:	00010101 	.word	0x00010101
    467c:	031b1b00 	.word	0x031b1b00
    4680:	00000002 	.word	0x00000002
    4684:	00001d4c 	.word	0x00001d4c
    4688:	001f0003 	.word	0x001f0003
	...
    4698:	2a41906d 	.word	0x2a41906d
    469c:	17ade838 	.word	0x17ade838
    46a0:	3803a529 	.word	0x3803a529
    46a4:	85d72739 	.word	0x85d72739
    46a8:	e1d8851f 	.word	0xe1d8851f

000046ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    46ac:	4a05      	ldr	r2, [pc, #20]	; (46c4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    46ae:	b510      	push	{r4, lr}
    46b0:	6852      	ldr	r2, [r2, #4]
    46b2:	b112      	cbz	r2, 46ba <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    46b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46b8:	4710      	bx	r2
    46ba:	2192      	movs	r1, #146	; 0x92
    46bc:	2004      	movs	r0, #4
    46be:	f7ff ff55 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46c2:	0000      	.short	0x0000
    46c4:	200011dc 	.word	0x200011dc

000046c8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    46c8:	4a05      	ldr	r2, [pc, #20]	; (46e0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    46ca:	b510      	push	{r4, lr}
    46cc:	6892      	ldr	r2, [r2, #8]
    46ce:	b112      	cbz	r2, 46d6 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    46d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46d4:	4710      	bx	r2
    46d6:	2198      	movs	r1, #152	; 0x98
    46d8:	2004      	movs	r0, #4
    46da:	f7ff ff47 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46de:	0000      	.short	0x0000
    46e0:	200011dc 	.word	0x200011dc

000046e4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    46e4:	4805      	ldr	r0, [pc, #20]	; (46fc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    46e6:	6801      	ldr	r1, [r0, #0]
    46e8:	b129      	cbz	r1, 46f6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46ea:	6841      	ldr	r1, [r0, #4]
    46ec:	b119      	cbz	r1, 46f6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46ee:	6880      	ldr	r0, [r0, #8]
    46f0:	b108      	cbz	r0, 46f6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46f2:	2001      	movs	r0, #1
    46f4:	4770      	bx	lr
    46f6:	2000      	movs	r0, #0
    46f8:	4770      	bx	lr
    46fa:	0000      	.short	0x0000
    46fc:	200011dc 	.word	0x200011dc

00004700 <sdc_rand_source_register>:
    4700:	4902      	ldr	r1, [pc, #8]	; (470c <sdc_rand_source_register+0xc>)
    4702:	c80d      	ldmia	r0, {r0, r2, r3}
    4704:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4708:	2000      	movs	r0, #0
    470a:	4770      	bx	lr
    470c:	200011dc 	.word	0x200011dc

00004710 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4712:	4c12      	ldr	r4, [pc, #72]	; (475c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4714:	2600      	movs	r6, #0
    4716:	6825      	ldr	r5, [r4, #0]
    4718:	e011      	b.n	473e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    471a:	9800      	ldr	r0, [sp, #0]
    471c:	2802      	cmp	r0, #2
    471e:	d002      	beq.n	4726 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4720:	2803      	cmp	r0, #3
    4722:	d10c      	bne.n	473e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4724:	e006      	b.n	4734 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4726:	6820      	ldr	r0, [r4, #0]
    4728:	b110      	cbz	r0, 4730 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    472a:	2000      	movs	r0, #0
    472c:	6026      	str	r6, [r4, #0]
    472e:	e005      	b.n	473c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4730:	2128      	movs	r1, #40	; 0x28
    4732:	e00c      	b.n	474e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4734:	6820      	ldr	r0, [r4, #0]
    4736:	b168      	cbz	r0, 4754 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4738:	2001      	movs	r0, #1
    473a:	6026      	str	r6, [r4, #0]
    473c:	47a8      	blx	r5
    473e:	4668      	mov	r0, sp
    4740:	f000 fcce 	bl	50e0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4744:	2800      	cmp	r0, #0
    4746:	d0e8      	beq.n	471a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4748:	2805      	cmp	r0, #5
    474a:	d005      	beq.n	4758 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    474c:	2135      	movs	r1, #53	; 0x35
    474e:	2004      	movs	r0, #4
    4750:	f7ff ff0c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4754:	212d      	movs	r1, #45	; 0x2d
    4756:	e7fa      	b.n	474e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    475a:	0000      	.short	0x0000
    475c:	200000a0 	.word	0x200000a0

00004760 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    4760:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4764:	4c29      	ldr	r4, [pc, #164]	; (480c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4766:	4605      	mov	r5, r0
    4768:	1d00      	adds	r0, r0, #4
    476a:	f504 7782 	add.w	r7, r4, #260	; 0x104
    476e:	60a0      	str	r0, [r4, #8]
    4770:	7838      	ldrb	r0, [r7, #0]
    4772:	b158      	cbz	r0, 478c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    4774:	78ba      	ldrb	r2, [r7, #2]
    4776:	463c      	mov	r4, r7
    4778:	1c79      	adds	r1, r7, #1
    477a:	4628      	mov	r0, r5
    477c:	1c92      	adds	r2, r2, #2
    477e:	f007 fe8c 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4782:	2000      	movs	r0, #0
    4784:	7020      	strb	r0, [r4, #0]
    4786:	2004      	movs	r0, #4
    4788:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    478c:	481f      	ldr	r0, [pc, #124]	; (480c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    478e:	f001 fe97 	bl	64c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4792:	4606      	mov	r6, r0
    4794:	2802      	cmp	r0, #2
    4796:	d002      	beq.n	479e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x3e>
    4798:	2e04      	cmp	r6, #4
    479a:	d005      	beq.n	47a8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x48>
    479c:	e026      	b.n	47ec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    479e:	491b      	ldr	r1, [pc, #108]	; (480c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    47a0:	4628      	mov	r0, r5
    47a2:	f008 f834 	bl	c80e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    47a6:	e021      	b.n	47ec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    47a8:	7820      	ldrb	r0, [r4, #0]
    47aa:	2811      	cmp	r0, #17
    47ac:	d104      	bne.n	47b8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x58>
    47ae:	210a      	movs	r1, #10
    47b0:	203e      	movs	r0, #62	; 0x3e
    47b2:	f007 fffe 	bl	c7b2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    47b6:	b118      	cbz	r0, 47c0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x60>
    47b8:	7820      	ldrb	r0, [r4, #0]
    47ba:	2808      	cmp	r0, #8
    47bc:	d005      	beq.n	47ca <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6a>
    47be:	e009      	b.n	47d4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x74>
    47c0:	4912      	ldr	r1, [pc, #72]	; (480c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    47c2:	4628      	mov	r0, r5
    47c4:	f008 fa1b 	bl	cbfe <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    47c8:	e00a      	b.n	47e0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
    47ca:	2105      	movs	r1, #5
    47cc:	203e      	movs	r0, #62	; 0x3e
    47ce:	f007 fff0 	bl	c7b2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    47d2:	b168      	cbz	r0, 47f0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    47d4:	490d      	ldr	r1, [pc, #52]	; (480c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    47d6:	4628      	mov	r0, r5
    47d8:	f008 f847 	bl	c86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    47dc:	2800      	cmp	r0, #0
    47de:	d0c7      	beq.n	4770 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    47e0:	78a9      	ldrb	r1, [r5, #2]
    47e2:	7828      	ldrb	r0, [r5, #0]
    47e4:	f007 ffe5 	bl	c7b2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    47e8:	2800      	cmp	r0, #0
    47ea:	d0c1      	beq.n	4770 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    47ec:	4630      	mov	r0, r6
    47ee:	e7cb      	b.n	4788 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    47f0:	88a0      	ldrh	r0, [r4, #4]
    47f2:	f8ad 0000 	strh.w	r0, [sp]
    47f6:	a901      	add	r1, sp, #4
    47f8:	4668      	mov	r0, sp
    47fa:	f008 fb33 	bl	ce64 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    47fe:	2800      	cmp	r0, #0
    4800:	d0b6      	beq.n	4770 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    4802:	21aa      	movs	r1, #170	; 0xaa
    4804:	2008      	movs	r0, #8
    4806:	f7ff feb1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    480a:	0000      	.short	0x0000
    480c:	200011e8 	.word	0x200011e8
    4810:	b570      	push	{r4, r5, r6, lr}
    4812:	780a      	ldrb	r2, [r1, #0]
    4814:	7082      	strb	r2, [r0, #2]
    4816:	b33a      	cbz	r2, 4868 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    4818:	2a01      	cmp	r2, #1
    481a:	d825      	bhi.n	4868 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    481c:	2313      	movs	r3, #19
    481e:	7003      	strb	r3, [r0, #0]
    4820:	2300      	movs	r3, #0
    4822:	e00a      	b.n	483a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xda>
    4824:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4828:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    482c:	78a6      	ldrb	r6, [r4, #2]
    482e:	70ee      	strb	r6, [r5, #3]
    4830:	8864      	ldrh	r4, [r4, #2]
    4832:	0a24      	lsrs	r4, r4, #8
    4834:	1c5b      	adds	r3, r3, #1
    4836:	712c      	strb	r4, [r5, #4]
    4838:	b2db      	uxtb	r3, r3
    483a:	4293      	cmp	r3, r2
    483c:	d3f2      	bcc.n	4824 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc4>
    483e:	2300      	movs	r3, #0
    4840:	e00b      	b.n	485a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xfa>
    4842:	bf00      	nop
    4844:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4848:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    484c:	792e      	ldrb	r6, [r5, #4]
    484e:	7166      	strb	r6, [r4, #5]
    4850:	88ad      	ldrh	r5, [r5, #4]
    4852:	0a2d      	lsrs	r5, r5, #8
    4854:	1c5b      	adds	r3, r3, #1
    4856:	71a5      	strb	r5, [r4, #6]
    4858:	b2db      	uxtb	r3, r3
    485a:	4293      	cmp	r3, r2
    485c:	d3f2      	bcc.n	4844 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe4>
    485e:	2101      	movs	r1, #1
    4860:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4864:	b2c0      	uxtb	r0, r0
    4866:	bd70      	pop	{r4, r5, r6, pc}
    4868:	2000      	movs	r0, #0
    486a:	bd70      	pop	{r4, r5, r6, pc}

0000486c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    486c:	2840      	cmp	r0, #64	; 0x40
    486e:	d203      	bcs.n	4878 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    4870:	1e40      	subs	r0, r0, #1
    4872:	b2c1      	uxtb	r1, r0
    4874:	4805      	ldr	r0, [pc, #20]	; (488c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4876:	e005      	b.n	4884 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    4878:	28ff      	cmp	r0, #255	; 0xff
    487a:	d005      	beq.n	4888 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    487c:	3840      	subs	r0, #64	; 0x40
    487e:	b2c1      	uxtb	r1, r0
    4880:	4802      	ldr	r0, [pc, #8]	; (488c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4882:	3008      	adds	r0, #8
    4884:	f008 b9e5 	b.w	cc52 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4888:	2001      	movs	r0, #1
    488a:	4770      	bx	lr
    488c:	200000a4 	.word	0x200000a4

00004890 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4890:	1e40      	subs	r0, r0, #1
    4892:	b2c1      	uxtb	r1, r0
    4894:	4801      	ldr	r0, [pc, #4]	; (489c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    4896:	f008 b9dc 	b.w	cc52 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    489a:	0000      	.short	0x0000
    489c:	200000b4 	.word	0x200000b4

000048a0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    48a0:	4902      	ldr	r1, [pc, #8]	; (48ac <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    48a2:	6802      	ldr	r2, [r0, #0]
    48a4:	610a      	str	r2, [r1, #16]
    48a6:	6840      	ldr	r0, [r0, #4]
    48a8:	6148      	str	r0, [r1, #20]
    48aa:	4770      	bx	lr
    48ac:	200000a4 	.word	0x200000a4

000048b0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    48b0:	4905      	ldr	r1, [pc, #20]	; (48c8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    48b2:	6802      	ldr	r2, [r0, #0]
    48b4:	600a      	str	r2, [r1, #0]
    48b6:	6840      	ldr	r0, [r0, #4]
    48b8:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    48bc:	600a      	str	r2, [r1, #0]
    48be:	4a03      	ldr	r2, [pc, #12]	; (48cc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    48c0:	4310      	orrs	r0, r2
    48c2:	6048      	str	r0, [r1, #4]
    48c4:	4770      	bx	lr
    48c6:	0000      	.short	0x0000
    48c8:	200000a4 	.word	0x200000a4
    48cc:	024007f8 	.word	0x024007f8

000048d0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    48d0:	4902      	ldr	r1, [pc, #8]	; (48dc <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    48d2:	6802      	ldr	r2, [r0, #0]
    48d4:	608a      	str	r2, [r1, #8]
    48d6:	6840      	ldr	r0, [r0, #4]
    48d8:	60c8      	str	r0, [r1, #12]
    48da:	4770      	bx	lr
    48dc:	200000a4 	.word	0x200000a4

000048e0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    48e0:	4807      	ldr	r0, [pc, #28]	; (4900 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    48e2:	f04f 31ff 	mov.w	r1, #4294967295
    48e6:	2200      	movs	r2, #0
    48e8:	6001      	str	r1, [r0, #0]
    48ea:	0cc9      	lsrs	r1, r1, #19
    48ec:	6041      	str	r1, [r0, #4]
    48ee:	f100 0108 	add.w	r1, r0, #8
    48f2:	201f      	movs	r0, #31
    48f4:	600a      	str	r2, [r1, #0]
    48f6:	604a      	str	r2, [r1, #4]
    48f8:	3108      	adds	r1, #8
    48fa:	e9c1 0200 	strd	r0, r2, [r1]
    48fe:	4770      	bx	lr
    4900:	200000a4 	.word	0x200000a4

00004904 <sdc_hci_cmd_cb_reset>:
    4904:	b510      	push	{r4, lr}
    4906:	f7ff ffeb 	bl	48e0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    490a:	f00b fbde 	bl	100ca <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    490e:	4604      	mov	r4, r0
    4910:	4802      	ldr	r0, [pc, #8]	; (491c <sdc_hci_cmd_cb_reset+0x18>)
    4912:	6800      	ldr	r0, [r0, #0]
    4914:	b100      	cbz	r0, 4918 <sdc_hci_cmd_cb_reset+0x14>
    4916:	4780      	blx	r0
    4918:	4620      	mov	r0, r4
    491a:	bd10      	pop	{r4, pc}
    491c:	200000bc 	.word	0x200000bc

00004920 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4920:	4901      	ldr	r1, [pc, #4]	; (4928 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4922:	6008      	str	r0, [r1, #0]
    4924:	4770      	bx	lr
    4926:	0000      	.short	0x0000
    4928:	200000bc 	.word	0x200000bc

0000492c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    492c:	2102      	movs	r1, #2
    492e:	8001      	strh	r1, [r0, #0]
    4930:	8041      	strh	r1, [r0, #2]
    4932:	2100      	movs	r1, #0
    4934:	7101      	strb	r1, [r0, #4]
    4936:	216d      	movs	r1, #109	; 0x6d
    4938:	7141      	strb	r1, [r0, #5]
    493a:	f244 1190 	movw	r1, #16784	; 0x4190
    493e:	80c1      	strh	r1, [r0, #6]
    4940:	4901      	ldr	r1, [pc, #4]	; (4948 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4942:	6081      	str	r1, [r0, #8]
    4944:	2000      	movs	r0, #0
    4946:	4770      	bx	lr
    4948:	ade8382a 	.word	0xade8382a

0000494c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    494c:	b510      	push	{r4, lr}
    494e:	2802      	cmp	r0, #2
    4950:	d304      	bcc.n	495c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4952:	f44f 7101 	mov.w	r1, #516	; 0x204
    4956:	2017      	movs	r0, #23
    4958:	f7ff fe08 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    495c:	4901      	ldr	r1, [pc, #4]	; (4964 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    495e:	5c08      	ldrb	r0, [r1, r0]
    4960:	bd10      	pop	{r4, pc}
    4962:	0000      	.short	0x0000
    4964:	200013f0 	.word	0x200013f0

00004968 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    496a:	0005      	movs	r5, r0
    496c:	9500      	str	r5, [sp, #0]
    496e:	d00d      	beq.n	498c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    4970:	2600      	movs	r6, #0
    4972:	7808      	ldrb	r0, [r1, #0]
    4974:	7849      	ldrb	r1, [r1, #1]
    4976:	4604      	mov	r4, r0
    4978:	42a1      	cmp	r1, r4
    497a:	d900      	bls.n	497e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    497c:	460c      	mov	r4, r1
    497e:	07aa      	lsls	r2, r5, #30
    4980:	d006      	beq.n	4990 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    4982:	f240 11cb 	movw	r1, #459	; 0x1cb
    4986:	2017      	movs	r0, #23
    4988:	f7ff fdf0 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    498c:	2601      	movs	r6, #1
    498e:	e7f0      	b.n	4972 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    4990:	4f12      	ldr	r7, [pc, #72]	; (49dc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    4992:	7038      	strb	r0, [r7, #0]
    4994:	7079      	strb	r1, [r7, #1]
    4996:	4631      	mov	r1, r6
    4998:	4668      	mov	r0, sp
    499a:	f000 f8d3 	bl	4b44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    499e:	2100      	movs	r1, #0
    49a0:	460b      	mov	r3, r1
    49a2:	9800      	ldr	r0, [sp, #0]
    49a4:	1cc0      	adds	r0, r0, #3
    49a6:	f020 0003 	bic.w	r0, r0, #3
    49aa:	9000      	str	r0, [sp, #0]
    49ac:	b966      	cbnz	r6, 49c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    49ae:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    49b2:	60d0      	str	r0, [r2, #12]
    49b4:	2000      	movs	r0, #0
    49b6:	e005      	b.n	49c4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    49b8:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    49bc:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    49c0:	1c40      	adds	r0, r0, #1
    49c2:	b2c0      	uxtb	r0, r0
    49c4:	42a0      	cmp	r0, r4
    49c6:	d3f7      	bcc.n	49b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    49c8:	9800      	ldr	r0, [sp, #0]
    49ca:	1c49      	adds	r1, r1, #1
    49cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    49d0:	b2c9      	uxtb	r1, r1
    49d2:	9000      	str	r0, [sp, #0]
    49d4:	2902      	cmp	r1, #2
    49d6:	d3e4      	bcc.n	49a2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    49d8:	1b40      	subs	r0, r0, r5
    49da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49dc:	200013f0 	.word	0x200013f0

000049e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    49e0:	b570      	push	{r4, r5, r6, lr}
    49e2:	4604      	mov	r4, r0
    49e4:	7985      	ldrb	r5, [r0, #6]
    49e6:	f000 f8e9 	bl	4bbc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    49ea:	4a0c      	ldr	r2, [pc, #48]	; (4a1c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    49ec:	79e1      	ldrb	r1, [r4, #7]
    49ee:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    49f2:	e00e      	b.n	4a12 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    49f4:	68d3      	ldr	r3, [r2, #12]
    49f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    49fa:	b143      	cbz	r3, 4a0e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    49fc:	1c48      	adds	r0, r1, #1
    49fe:	71e0      	strb	r0, [r4, #7]
    4a00:	80a1      	strh	r1, [r4, #4]
    4a02:	68d0      	ldr	r0, [r2, #12]
    4a04:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4a08:	6020      	str	r0, [r4, #0]
    4a0a:	2000      	movs	r0, #0
    4a0c:	bd70      	pop	{r4, r5, r6, pc}
    4a0e:	1c49      	adds	r1, r1, #1
    4a10:	b2c9      	uxtb	r1, r1
    4a12:	4281      	cmp	r1, r0
    4a14:	d3ee      	bcc.n	49f4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    4a16:	71e1      	strb	r1, [r4, #7]
    4a18:	2005      	movs	r0, #5
    4a1a:	bd70      	pop	{r4, r5, r6, pc}
    4a1c:	200013f0 	.word	0x200013f0

00004a20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4a20:	b4f0      	push	{r4, r5, r6, r7}
    4a22:	b121      	cbz	r1, 4a2e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4a24:	2901      	cmp	r1, #1
    4a26:	d002      	beq.n	4a2e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4a28:	bcf0      	pop	{r4, r5, r6, r7}
    4a2a:	2000      	movs	r0, #0
    4a2c:	4770      	bx	lr
    4a2e:	4a0f      	ldr	r2, [pc, #60]	; (4a6c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4a30:	2500      	movs	r5, #0
    4a32:	462b      	mov	r3, r5
    4a34:	f64f 74ff 	movw	r4, #65535	; 0xffff
    4a38:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    4a3c:	5c57      	ldrb	r7, [r2, r1]
    4a3e:	e00a      	b.n	4a56 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    4a40:	195a      	adds	r2, r3, r5
    4a42:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    4a46:	b292      	uxth	r2, r2
    4a48:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    4a4c:	f1bc 0f00 	cmp.w	ip, #0
    4a50:	d004      	beq.n	4a5c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    4a52:	1c5b      	adds	r3, r3, #1
    4a54:	b29b      	uxth	r3, r3
    4a56:	429f      	cmp	r7, r3
    4a58:	d8f2      	bhi.n	4a40 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4a5a:	4622      	mov	r2, r4
    4a5c:	8002      	strh	r2, [r0, #0]
    4a5e:	4610      	mov	r0, r2
    4a60:	42a2      	cmp	r2, r4
    4a62:	d0e1      	beq.n	4a28 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    4a64:	bcf0      	pop	{r4, r5, r6, r7}
    4a66:	f000 b835 	b.w	4ad4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4a6a:	0000      	.short	0x0000
    4a6c:	200013f0 	.word	0x200013f0

00004a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a74:	4606      	mov	r6, r0
    4a76:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4a7a:	460c      	mov	r4, r1
    4a7c:	f243 0702 	movw	r7, #12290	; 0x3002
    4a80:	38ff      	subs	r0, #255	; 0xff
    4a82:	d020      	beq.n	4ac6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4a84:	2c02      	cmp	r4, #2
    4a86:	d302      	bcc.n	4a8e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4a88:	2007      	movs	r0, #7
    4a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a8e:	4630      	mov	r0, r6
    4a90:	f000 f848 	bl	4b24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4a94:	0005      	movs	r5, r0
    4a96:	d016      	beq.n	4ac6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4a98:	480c      	ldr	r0, [pc, #48]	; (4acc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4a9a:	4629      	mov	r1, r5
    4a9c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4aa0:	4630      	mov	r0, r6
    4aa2:	4790      	blx	r2
    4aa4:	480a      	ldr	r0, [pc, #40]	; (4ad0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4aa6:	2100      	movs	r1, #0
    4aa8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4aac:	68f8      	ldr	r0, [r7, #12]
    4aae:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4ab2:	4620      	mov	r0, r4
    4ab4:	f000 f878 	bl	4ba8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4ab8:	4602      	mov	r2, r0
    4aba:	4629      	mov	r1, r5
    4abc:	6878      	ldr	r0, [r7, #4]
    4abe:	f008 fc63 	bl	d388 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4ac2:	2000      	movs	r0, #0
    4ac4:	e7e1      	b.n	4a8a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4ac6:	4638      	mov	r0, r7
    4ac8:	e7df      	b.n	4a8a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4aca:	0000      	.short	0x0000
    4acc:	00004bd4 	.word	0x00004bd4
    4ad0:	200013f0 	.word	0x200013f0
    4ad4:	b570      	push	{r4, r5, r6, lr}
    4ad6:	460e      	mov	r6, r1
    4ad8:	4605      	mov	r5, r0
    4ada:	f008 fc8f 	bl	d3fc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    4ade:	b158      	cbz	r0, 4af8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4ae0:	480f      	ldr	r0, [pc, #60]	; (4b20 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    4ae2:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    4ae6:	68e0      	ldr	r0, [r4, #12]
    4ae8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4aec:	b138      	cbz	r0, 4afe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4aee:	f240 118b 	movw	r1, #395	; 0x18b
    4af2:	2017      	movs	r0, #23
    4af4:	f7ff fd3a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4af8:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    4afc:	e7f9      	b.n	4af2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    4afe:	6860      	ldr	r0, [r4, #4]
    4b00:	2800      	cmp	r0, #0
    4b02:	d00b      	beq.n	4b1c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4b04:	4630      	mov	r0, r6
    4b06:	f000 f84f 	bl	4ba8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4b0a:	4601      	mov	r1, r0
    4b0c:	6860      	ldr	r0, [r4, #4]
    4b0e:	f008 fbe3 	bl	d2d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4b12:	2800      	cmp	r0, #0
    4b14:	d002      	beq.n	4b1c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4b16:	68e1      	ldr	r1, [r4, #12]
    4b18:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    4b1c:	bd70      	pop	{r4, r5, r6, pc}
    4b1e:	0000      	.short	0x0000
    4b20:	200013f0 	.word	0x200013f0
    4b24:	b570      	push	{r4, r5, r6, lr}
    4b26:	460c      	mov	r4, r1
    4b28:	4605      	mov	r5, r0
    4b2a:	f008 fc67 	bl	d3fc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    4b2e:	2800      	cmp	r0, #0
    4b30:	d005      	beq.n	4b3e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    4b32:	4803      	ldr	r0, [pc, #12]	; (4b40 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4b34:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4b38:	68c0      	ldr	r0, [r0, #12]
    4b3a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4b3e:	bd70      	pop	{r4, r5, r6, pc}
    4b40:	200013f0 	.word	0x200013f0
    4b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b48:	4e16      	ldr	r6, [pc, #88]	; (4ba4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    4b4a:	4688      	mov	r8, r1
    4b4c:	4605      	mov	r5, r0
    4b4e:	2400      	movs	r4, #0
    4b50:	6828      	ldr	r0, [r5, #0]
    4b52:	1cc0      	adds	r0, r0, #3
    4b54:	f020 0003 	bic.w	r0, r0, #3
    4b58:	6028      	str	r0, [r5, #0]
    4b5a:	4620      	mov	r0, r4
    4b5c:	f000 f824 	bl	4ba8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4b60:	5d31      	ldrb	r1, [r6, r4]
    4b62:	4348      	muls	r0, r1
    4b64:	f1b8 0f00 	cmp.w	r8, #0
    4b68:	d001      	beq.n	4b6e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    4b6a:	2200      	movs	r2, #0
    4b6c:	e000      	b.n	4b70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    4b6e:	682a      	ldr	r2, [r5, #0]
    4b70:	4601      	mov	r1, r0
    4b72:	9200      	str	r2, [sp, #0]
    4b74:	b132      	cbz	r2, 4b84 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    4b76:	2700      	movs	r7, #0
    4b78:	ea4f 000d 	mov.w	r0, sp
    4b7c:	f008 fbdd 	bl	d33a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4b80:	b11f      	cbz	r7, 4b8a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    4b82:	e006      	b.n	4b92 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    4b84:	2701      	movs	r7, #1
    4b86:	2000      	movs	r0, #0
    4b88:	e7f8      	b.n	4b7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    4b8a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4b8e:	9a00      	ldr	r2, [sp, #0]
    4b90:	604a      	str	r2, [r1, #4]
    4b92:	6829      	ldr	r1, [r5, #0]
    4b94:	1c64      	adds	r4, r4, #1
    4b96:	4408      	add	r0, r1
    4b98:	b2e4      	uxtb	r4, r4
    4b9a:	6028      	str	r0, [r5, #0]
    4b9c:	2c02      	cmp	r4, #2
    4b9e:	d3d7      	bcc.n	4b50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    4ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4ba4:	200013f0 	.word	0x200013f0
    4ba8:	4903      	ldr	r1, [pc, #12]	; (4bb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    4baa:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4bae:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4bb2:	1cc0      	adds	r0, r0, #3
    4bb4:	4008      	ands	r0, r1
    4bb6:	4770      	bx	lr
    4bb8:	00004bd0 	.word	0x00004bd0
    4bbc:	4903      	ldr	r1, [pc, #12]	; (4bcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    4bbe:	7808      	ldrb	r0, [r1, #0]
    4bc0:	7849      	ldrb	r1, [r1, #1]
    4bc2:	4288      	cmp	r0, r1
    4bc4:	d200      	bcs.n	4bc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    4bc6:	4608      	mov	r0, r1
    4bc8:	4770      	bx	lr
    4bca:	0000      	.short	0x0000
    4bcc:	200013f0 	.word	0x200013f0
    4bd0:	011802e8 	.word	0x011802e8
    4bd4:	0000f229 	.word	0x0000f229
    4bd8:	0000e59d 	.word	0x0000e59d

00004bdc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4bdc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4be0:	4c24      	ldr	r4, [pc, #144]	; (4c74 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    4be2:	4606      	mov	r6, r0
    4be4:	b081      	sub	sp, #4
    4be6:	6820      	ldr	r0, [r4, #0]
    4be8:	469a      	mov	sl, r3
    4bea:	4693      	mov	fp, r2
    4bec:	b158      	cbz	r0, 4c06 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4bee:	7a01      	ldrb	r1, [r0, #8]
    4bf0:	42b1      	cmp	r1, r6
    4bf2:	d903      	bls.n	4bfc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4bf4:	6840      	ldr	r0, [r0, #4]
    4bf6:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    4bfa:	b140      	cbz	r0, 4c0e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4bfc:	f243 0002 	movw	r0, #12290	; 0x3002
    4c00:	b005      	add	sp, #20
    4c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c06:	21a5      	movs	r1, #165	; 0xa5
    4c08:	2018      	movs	r0, #24
    4c0a:	f7ff fcaf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c0e:	4619      	mov	r1, r3
    4c10:	9802      	ldr	r0, [sp, #8]
    4c12:	f008 fc16 	bl	d442 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    4c16:	4680      	mov	r8, r0
    4c18:	4658      	mov	r0, fp
    4c1a:	990e      	ldr	r1, [sp, #56]	; 0x38
    4c1c:	f008 fc07 	bl	d42e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    4c20:	4605      	mov	r5, r0
    4c22:	eb08 0005 	add.w	r0, r8, r5
    4c26:	1d00      	adds	r0, r0, #4
    4c28:	b287      	uxth	r7, r0
    4c2a:	6820      	ldr	r0, [r4, #0]
    4c2c:	46a1      	mov	r9, r4
    4c2e:	4639      	mov	r1, r7
    4c30:	6800      	ldr	r0, [r0, #0]
    4c32:	f008 fb51 	bl	d2d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4c36:	0004      	movs	r4, r0
    4c38:	d01a      	beq.n	4c70 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    4c3a:	8067      	strh	r7, [r4, #2]
    4c3c:	8025      	strh	r5, [r4, #0]
    4c3e:	4629      	mov	r1, r5
    4c40:	1d20      	adds	r0, r4, #4
    4c42:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4c44:	4607      	mov	r7, r0
    4c46:	465a      	mov	r2, fp
    4c48:	2309      	movs	r3, #9
    4c4a:	9500      	str	r5, [sp, #0]
    4c4c:	f008 faba 	bl	d1c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4c50:	8820      	ldrh	r0, [r4, #0]
    4c52:	4641      	mov	r1, r8
    4c54:	4438      	add	r0, r7
    4c56:	230a      	movs	r3, #10
    4c58:	9a02      	ldr	r2, [sp, #8]
    4c5a:	f8cd a000 	str.w	sl, [sp]
    4c5e:	f008 fab1 	bl	d1c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4c62:	f8d9 0000 	ldr.w	r0, [r9]
    4c66:	6840      	ldr	r0, [r0, #4]
    4c68:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    4c6c:	2000      	movs	r0, #0
    4c6e:	e7c7      	b.n	4c00 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4c70:	2004      	movs	r0, #4
    4c72:	e7c5      	b.n	4c00 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4c74:	200000c0 	.word	0x200000c0

00004c78 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4c78:	b570      	push	{r4, r5, r6, lr}
    4c7a:	4c14      	ldr	r4, [pc, #80]	; (4ccc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4c7c:	6823      	ldr	r3, [r4, #0]
    4c7e:	b18b      	cbz	r3, 4ca4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4c80:	7a19      	ldrb	r1, [r3, #8]
    4c82:	4281      	cmp	r1, r0
    4c84:	d912      	bls.n	4cac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4c86:	685a      	ldr	r2, [r3, #4]
    4c88:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4c8c:	b171      	cbz	r1, 4cac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4c8e:	2500      	movs	r5, #0
    4c90:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4c94:	884a      	ldrh	r2, [r1, #2]
    4c96:	6818      	ldr	r0, [r3, #0]
    4c98:	f008 fb76 	bl	d388 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4c9c:	6821      	ldr	r1, [r4, #0]
    4c9e:	2000      	movs	r0, #0
    4ca0:	7a0a      	ldrb	r2, [r1, #8]
    4ca2:	e00c      	b.n	4cbe <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4ca4:	21c6      	movs	r1, #198	; 0xc6
    4ca6:	2018      	movs	r0, #24
    4ca8:	f7ff fc60 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cac:	f243 0002 	movw	r0, #12290	; 0x3002
    4cb0:	bd70      	pop	{r4, r5, r6, pc}
    4cb2:	684b      	ldr	r3, [r1, #4]
    4cb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4cb8:	b933      	cbnz	r3, 4cc8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4cba:	1c40      	adds	r0, r0, #1
    4cbc:	b2c0      	uxtb	r0, r0
    4cbe:	4282      	cmp	r2, r0
    4cc0:	d8f7      	bhi.n	4cb2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4cc2:	6808      	ldr	r0, [r1, #0]
    4cc4:	f008 fb55 	bl	d372 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4cc8:	2000      	movs	r0, #0
    4cca:	bd70      	pop	{r4, r5, r6, pc}
    4ccc:	200000c0 	.word	0x200000c0

00004cd0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cd4:	460d      	mov	r5, r1
    4cd6:	0004      	movs	r4, r0
    4cd8:	4690      	mov	r8, r2
    4cda:	f04f 0600 	mov.w	r6, #0
    4cde:	d006      	beq.n	4cee <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    4ce0:	2700      	movs	r7, #0
    4ce2:	07a0      	lsls	r0, r4, #30
    4ce4:	d005      	beq.n	4cf2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    4ce6:	2186      	movs	r1, #134	; 0x86
    4ce8:	2018      	movs	r0, #24
    4cea:	f7ff fc3f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cee:	2701      	movs	r7, #1
    4cf0:	e7f7      	b.n	4ce2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4cf2:	b1cd      	cbz	r5, 4d28 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4cf4:	4611      	mov	r1, r2
    4cf6:	2000      	movs	r0, #0
    4cf8:	f008 fb1f 	bl	d33a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4cfc:	300c      	adds	r0, #12
    4cfe:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4d02:	b98f      	cbnz	r7, 4d28 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4d04:	4f0a      	ldr	r7, [pc, #40]	; (4d30 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    4d06:	f104 000c 	add.w	r0, r4, #12
    4d0a:	00aa      	lsls	r2, r5, #2
    4d0c:	603c      	str	r4, [r7, #0]
    4d0e:	7225      	strb	r5, [r4, #8]
    4d10:	6060      	str	r0, [r4, #4]
    4d12:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4d16:	6020      	str	r0, [r4, #0]
    4d18:	2100      	movs	r1, #0
    4d1a:	6860      	ldr	r0, [r4, #4]
    4d1c:	f007 fc37 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4d20:	4641      	mov	r1, r8
    4d22:	6838      	ldr	r0, [r7, #0]
    4d24:	f008 fb09 	bl	d33a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4d28:	4630      	mov	r0, r6
    4d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d2e:	0000      	.short	0x0000
    4d30:	200000c0 	.word	0x200000c0

00004d34 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4d34:	b570      	push	{r4, r5, r6, lr}
    4d36:	4d08      	ldr	r5, [pc, #32]	; (4d58 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4d38:	6828      	ldr	r0, [r5, #0]
    4d3a:	2800      	cmp	r0, #0
    4d3c:	d00a      	beq.n	4d54 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4d3e:	2400      	movs	r4, #0
    4d40:	e004      	b.n	4d4c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4d42:	4620      	mov	r0, r4
    4d44:	f7ff ff98 	bl	4c78 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4d48:	1c64      	adds	r4, r4, #1
    4d4a:	b2e4      	uxtb	r4, r4
    4d4c:	6828      	ldr	r0, [r5, #0]
    4d4e:	7a00      	ldrb	r0, [r0, #8]
    4d50:	42a0      	cmp	r0, r4
    4d52:	d8f6      	bhi.n	4d42 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4d54:	bd70      	pop	{r4, r5, r6, pc}
    4d56:	0000      	.short	0x0000
    4d58:	200000c0 	.word	0x200000c0

00004d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4d5c:	4909      	ldr	r1, [pc, #36]	; (4d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4d5e:	b510      	push	{r4, lr}
    4d60:	4602      	mov	r2, r0
    4d62:	6809      	ldr	r1, [r1, #0]
    4d64:	2000      	movs	r0, #0
    4d66:	b149      	cbz	r1, 4d7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4d68:	7a0b      	ldrb	r3, [r1, #8]
    4d6a:	4293      	cmp	r3, r2
    4d6c:	d905      	bls.n	4d7a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4d6e:	6849      	ldr	r1, [r1, #4]
    4d70:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4d74:	2900      	cmp	r1, #0
    4d76:	d000      	beq.n	4d7a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4d78:	1d08      	adds	r0, r1, #4
    4d7a:	bd10      	pop	{r4, pc}
    4d7c:	21ec      	movs	r1, #236	; 0xec
    4d7e:	2018      	movs	r0, #24
    4d80:	f7ff fbf4 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d84:	200000c0 	.word	0x200000c0

00004d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4d88:	490a      	ldr	r1, [pc, #40]	; (4db4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4d8a:	b510      	push	{r4, lr}
    4d8c:	4602      	mov	r2, r0
    4d8e:	6809      	ldr	r1, [r1, #0]
    4d90:	2000      	movs	r0, #0
    4d92:	b159      	cbz	r1, 4dac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4d94:	7a0b      	ldrb	r3, [r1, #8]
    4d96:	4293      	cmp	r3, r2
    4d98:	d907      	bls.n	4daa <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4d9a:	6849      	ldr	r1, [r1, #4]
    4d9c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4da0:	2900      	cmp	r1, #0
    4da2:	d002      	beq.n	4daa <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4da4:	f831 0b04 	ldrh.w	r0, [r1], #4
    4da8:	4408      	add	r0, r1
    4daa:	bd10      	pop	{r4, pc}
    4dac:	21fa      	movs	r1, #250	; 0xfa
    4dae:	2018      	movs	r0, #24
    4db0:	f7ff fbdc 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4db4:	200000c0 	.word	0x200000c0
    4db8:	b570      	push	{r4, r5, r6, lr}
    4dba:	4b1e      	ldr	r3, [pc, #120]	; (4e34 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    4dbc:	6845      	ldr	r5, [r0, #4]
    4dbe:	4604      	mov	r4, r0
    4dc0:	2200      	movs	r2, #0
    4dc2:	b1a1      	cbz	r1, 4dee <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    4dc4:	2001      	movs	r0, #1
    4dc6:	7060      	strb	r0, [r4, #1]
    4dc8:	8858      	ldrh	r0, [r3, #2]
    4dca:	0881      	lsrs	r1, r0, #2
    4dcc:	f05f 0000 	movs.w	r0, #0
    4dd0:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    4dd4:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    4dd8:	831a      	strh	r2, [r3, #24]
    4dda:	8419      	strh	r1, [r3, #32]
    4ddc:	fb00 5301 	mla	r3, r0, r1, r5
    4de0:	6073      	str	r3, [r6, #4]
    4de2:	1823      	adds	r3, r4, r0
    4de4:	1c40      	adds	r0, r0, #1
    4de6:	751a      	strb	r2, [r3, #20]
    4de8:	2804      	cmp	r0, #4
    4dea:	d3f1      	bcc.n	4dd0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    4dec:	bd70      	pop	{r4, r5, r6, pc}
    4dee:	7062      	strb	r2, [r4, #1]
    4df0:	f05f 0000 	movs.w	r0, #0
    4df4:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    4df8:	830a      	strh	r2, [r1, #24]
    4dfa:	840a      	strh	r2, [r1, #32]
    4dfc:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    4e00:	604a      	str	r2, [r1, #4]
    4e02:	1821      	adds	r1, r4, r0
    4e04:	1c40      	adds	r0, r0, #1
    4e06:	750a      	strb	r2, [r1, #20]
    4e08:	2804      	cmp	r0, #4
    4e0a:	d3f3      	bcc.n	4df4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4e0c:	8858      	ldrh	r0, [r3, #2]
    4e0e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    4e12:	d201      	bcs.n	4e18 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    4e14:	0846      	lsrs	r6, r0, #1
    4e16:	e000      	b.n	4e1a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    4e18:	26ff      	movs	r6, #255	; 0xff
    4e1a:	f008 fb86 	bl	d52a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4e1e:	6065      	str	r5, [r4, #4]
    4e20:	8420      	strh	r0, [r4, #32]
    4e22:	1829      	adds	r1, r5, r0
    4e24:	60a1      	str	r1, [r4, #8]
    4e26:	8466      	strh	r6, [r4, #34]	; 0x22
    4e28:	60e5      	str	r5, [r4, #12]
    4e2a:	84a0      	strh	r0, [r4, #36]	; 0x24
    4e2c:	6121      	str	r1, [r4, #16]
    4e2e:	84e6      	strh	r6, [r4, #38]	; 0x26
    4e30:	bd70      	pop	{r4, r5, r6, pc}
    4e32:	0000      	.short	0x0000
    4e34:	200000c4 	.word	0x200000c4

00004e38 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e3c:	b158      	cbz	r0, 4e56 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    4e3e:	2500      	movs	r5, #0
    4e40:	4411      	add	r1, r2
    4e42:	4e24      	ldr	r6, [pc, #144]	; (4ed4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    4e44:	b2cc      	uxtb	r4, r1
    4e46:	2700      	movs	r7, #0
    4e48:	7034      	strb	r4, [r6, #0]
    4e4a:	0781      	lsls	r1, r0, #30
    4e4c:	d005      	beq.n	4e5a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    4e4e:	214e      	movs	r1, #78	; 0x4e
    4e50:	2009      	movs	r0, #9
    4e52:	f7ff fb8b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e56:	2501      	movs	r5, #1
    4e58:	e7f2      	b.n	4e40 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4e5a:	2b1f      	cmp	r3, #31
    4e5c:	d804      	bhi.n	4e68 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    4e5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4e62:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    4e66:	e009      	b.n	4e7c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    4e68:	0059      	lsls	r1, r3, #1
    4e6a:	2bff      	cmp	r3, #255	; 0xff
    4e6c:	d90c      	bls.n	4e88 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    4e6e:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    4e72:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4e76:	d200      	bcs.n	4e7a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4e78:	4611      	mov	r1, r2
    4e7a:	b289      	uxth	r1, r1
    4e7c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    4e80:	1cc9      	adds	r1, r1, #3
    4e82:	4011      	ands	r1, r2
    4e84:	b135      	cbz	r5, 4e94 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    4e86:	e007      	b.n	4e98 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    4e88:	227c      	movs	r2, #124	; 0x7c
    4e8a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4e8e:	d3f4      	bcc.n	4e7a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4e90:	217c      	movs	r1, #124	; 0x7c
    4e92:	e7f2      	b.n	4e7a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4e94:	6070      	str	r0, [r6, #4]
    4e96:	8071      	strh	r1, [r6, #2]
    4e98:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4e9c:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    4ea0:	2200      	movs	r2, #0
    4ea2:	6876      	ldr	r6, [r6, #4]
    4ea4:	f04f 0c01 	mov.w	ip, #1
    4ea8:	e00d      	b.n	4ec6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    4eaa:	b94d      	cbnz	r5, 4ec0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    4eac:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    4eb0:	eb00 0e03 	add.w	lr, r0, r3
    4eb4:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    4eb8:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    4ebc:	f8c7 e004 	str.w	lr, [r7, #4]
    4ec0:	1c52      	adds	r2, r2, #1
    4ec2:	440b      	add	r3, r1
    4ec4:	b2d2      	uxtb	r2, r2
    4ec6:	42a2      	cmp	r2, r4
    4ec8:	d3ef      	bcc.n	4eaa <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    4eca:	1ddb      	adds	r3, r3, #7
    4ecc:	f023 0007 	bic.w	r0, r3, #7
    4ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ed4:	200000c4 	.word	0x200000c4

00004ed8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4ed8:	b570      	push	{r4, r5, r6, lr}
    4eda:	4a10      	ldr	r2, [pc, #64]	; (4f1c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    4edc:	2000      	movs	r0, #0
    4ede:	6851      	ldr	r1, [r2, #4]
    4ee0:	7812      	ldrb	r2, [r2, #0]
    4ee2:	e014      	b.n	4f0e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    4ee4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4ee8:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    4eec:	b16b      	cbz	r3, 4f0a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    4eee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4ef2:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    4ef6:	d00c      	beq.n	4f12 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    4ef8:	2500      	movs	r5, #0
    4efa:	70a5      	strb	r5, [r4, #2]
    4efc:	2101      	movs	r1, #1
    4efe:	4620      	mov	r0, r4
    4f00:	f7ff ff5a 	bl	4db8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4f04:	7025      	strb	r5, [r4, #0]
    4f06:	4620      	mov	r0, r4
    4f08:	bd70      	pop	{r4, r5, r6, pc}
    4f0a:	1c40      	adds	r0, r0, #1
    4f0c:	b2c0      	uxtb	r0, r0
    4f0e:	4290      	cmp	r0, r2
    4f10:	d3e8      	bcc.n	4ee4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    4f12:	21a9      	movs	r1, #169	; 0xa9
    4f14:	2009      	movs	r0, #9
    4f16:	f7ff fb29 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f1a:	0000      	.short	0x0000
    4f1c:	200000c4 	.word	0x200000c4

00004f20 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    4f20:	4804      	ldr	r0, [pc, #16]	; (4f34 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    4f22:	b510      	push	{r4, lr}
    4f24:	8840      	ldrh	r0, [r0, #2]
    4f26:	0884      	lsrs	r4, r0, #2
    4f28:	f008 faff 	bl	d52a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4f2c:	4284      	cmp	r4, r0
    4f2e:	d300      	bcc.n	4f32 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    4f30:	4620      	mov	r0, r4
    4f32:	bd10      	pop	{r4, pc}
    4f34:	200000c4 	.word	0x200000c4
    4f38:	b530      	push	{r4, r5, lr}
    4f3a:	490d      	ldr	r1, [pc, #52]	; (4f70 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    4f3c:	2001      	movs	r0, #1
    4f3e:	6048      	str	r0, [r1, #4]
    4f40:	1e82      	subs	r2, r0, #2
    4f42:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4f46:	490b      	ldr	r1, [pc, #44]	; (4f74 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    4f48:	6088      	str	r0, [r1, #8]
    4f4a:	2300      	movs	r3, #0
    4f4c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    4f50:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4f54:	4c08      	ldr	r4, [pc, #32]	; (4f78 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    4f56:	6023      	str	r3, [r4, #0]
    4f58:	1d25      	adds	r5, r4, #4
    4f5a:	6028      	str	r0, [r5, #0]
    4f5c:	6088      	str	r0, [r1, #8]
    4f5e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4f62:	6023      	str	r3, [r4, #0]
    4f64:	6028      	str	r0, [r5, #0]
    4f66:	4906      	ldr	r1, [pc, #24]	; (4f80 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    4f68:	4804      	ldr	r0, [pc, #16]	; (4f7c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    4f6a:	6008      	str	r0, [r1, #0]
    4f6c:	bd30      	pop	{r4, r5, pc}
    4f6e:	0000      	.short	0x0000
    4f70:	4000e000 	.word	0x4000e000
    4f74:	4000f000 	.word	0x4000f000
    4f78:	4000f500 	.word	0x4000f500
    4f7c:	3ff60000 	.word	0x3ff60000
    4f80:	4001f508 	.word	0x4001f508

00004f84 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    4f84:	b510      	push	{r4, lr}
    4f86:	f7ff ffd7 	bl	4f38 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4f8a:	f008 fba1 	bl	d6d0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4f8e:	4903      	ldr	r1, [pc, #12]	; (4f9c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    4f90:	4801      	ldr	r0, [pc, #4]	; (4f98 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    4f92:	6008      	str	r0, [r1, #0]
    4f94:	bd10      	pop	{r4, pc}
    4f96:	0000      	.short	0x0000
    4f98:	3ff60000 	.word	0x3ff60000
    4f9c:	4001f508 	.word	0x4001f508

00004fa0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4fa0:	b510      	push	{r4, lr}
    4fa2:	4604      	mov	r4, r0
    4fa4:	f7ff ffc8 	bl	4f38 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4fa8:	f008 fb92 	bl	d6d0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4fac:	f000 f888 	bl	50c0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4fb0:	4905      	ldr	r1, [pc, #20]	; (4fc8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    4fb2:	4804      	ldr	r0, [pc, #16]	; (4fc4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    4fb4:	6008      	str	r0, [r1, #0]
    4fb6:	4620      	mov	r0, r4
    4fb8:	f000 f8b8 	bl	512c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fc0:	f000 b8dc 	b.w	517c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4fc4:	3ff60000 	.word	0x3ff60000
    4fc8:	4001f508 	.word	0x4001f508
    4fcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fd0:	4682      	mov	sl, r0
    4fd2:	4838      	ldr	r0, [pc, #224]	; (50b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4fd4:	f007 f9ca 	bl	c36c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4fd8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 50b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    4fdc:	b128      	cbz	r0, 4fea <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    4fde:	2601      	movs	r6, #1
    4fe0:	f10b 0001 	add.w	r0, fp, #1
    4fe4:	21ff      	movs	r1, #255	; 0xff
    4fe6:	7001      	strb	r1, [r0, #0]
    4fe8:	e000      	b.n	4fec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    4fea:	2600      	movs	r6, #0
    4fec:	f44f 7580 	mov.w	r5, #256	; 0x100
    4ff0:	4c31      	ldr	r4, [pc, #196]	; (50b8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    4ff2:	f04f 0800 	mov.w	r8, #0
    4ff6:	1d2f      	adds	r7, r5, #4
    4ff8:	2101      	movs	r1, #1
    4ffa:	6061      	str	r1, [r4, #4]
    4ffc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5000:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5004:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    5008:	6021      	str	r1, [r4, #0]
    500a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 50bc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    500e:	e01c      	b.n	504a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5010:	f8d9 0000 	ldr.w	r0, [r9]
    5014:	06c0      	lsls	r0, r0, #27
    5016:	d518      	bpl.n	504a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5018:	200e      	movs	r0, #14
    501a:	f008 fb68 	bl	d6ee <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    501e:	f3ef 8010 	mrs	r0, PRIMASK
    5022:	9000      	str	r0, [sp, #0]
    5024:	b672      	cpsid	i
    5026:	2103      	movs	r1, #3
    5028:	4620      	mov	r0, r4
    502a:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    502e:	4629      	mov	r1, r5
    5030:	f008 fb6a 	bl	d708 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5034:	b930      	cbnz	r0, 5044 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5036:	4639      	mov	r1, r7
    5038:	4620      	mov	r0, r4
    503a:	f008 fb65 	bl	d708 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    503e:	b908      	cbnz	r0, 5044 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5040:	f7ff f8f0 	bl	4224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5044:	9800      	ldr	r0, [sp, #0]
    5046:	b900      	cbnz	r0, 504a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5048:	b662      	cpsie	i
    504a:	4629      	mov	r1, r5
    504c:	4620      	mov	r0, r4
    504e:	f008 fb5b 	bl	d708 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5052:	b928      	cbnz	r0, 5060 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    5054:	4639      	mov	r1, r7
    5056:	4620      	mov	r0, r4
    5058:	f008 fb56 	bl	d708 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    505c:	2800      	cmp	r0, #0
    505e:	d0d7      	beq.n	5010 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    5060:	4639      	mov	r1, r7
    5062:	4620      	mov	r0, r4
    5064:	f008 fb50 	bl	d708 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5068:	2800      	cmp	r0, #0
    506a:	d1c5      	bne.n	4ff8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    506c:	bb06      	cbnz	r6, 50b0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    506e:	f89b 1001 	ldrb.w	r1, [fp, #1]
    5072:	f88d 1000 	strb.w	r1, [sp]
    5076:	9900      	ldr	r1, [sp, #0]
    5078:	9100      	str	r1, [sp, #0]
    507a:	f89d 1000 	ldrb.w	r1, [sp]
    507e:	b109      	cbz	r1, 5084 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    5080:	2501      	movs	r5, #1
    5082:	e000      	b.n	5086 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    5084:	2500      	movs	r5, #0
    5086:	f10b 0001 	add.w	r0, fp, #1
    508a:	f880 8000 	strb.w	r8, [r0]
    508e:	2003      	movs	r0, #3
    5090:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    5094:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5098:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    509c:	200e      	movs	r0, #14
    509e:	f008 fb26 	bl	d6ee <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    50a2:	4804      	ldr	r0, [pc, #16]	; (50b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    50a4:	f007 f979 	bl	c39a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    50a8:	b115      	cbz	r5, 50b0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    50aa:	2011      	movs	r0, #17
    50ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50b0:	2000      	movs	r0, #0
    50b2:	e7fb      	b.n	50ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    50b4:	20000358 	.word	0x20000358
    50b8:	4000e000 	.word	0x4000e000
    50bc:	e000ed10 	.word	0xe000ed10

000050c0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    50c0:	b510      	push	{r4, lr}
    50c2:	4806      	ldr	r0, [pc, #24]	; (50dc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    50c4:	f007 f965 	bl	c392 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    50c8:	b118      	cbz	r0, 50d2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    50ca:	2127      	movs	r1, #39	; 0x27
    50cc:	201d      	movs	r0, #29
    50ce:	f7ff fa4d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50d2:	4802      	ldr	r0, [pc, #8]	; (50dc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    50d4:	2100      	movs	r1, #0
    50d6:	7041      	strb	r1, [r0, #1]
    50d8:	bd10      	pop	{r4, pc}
    50da:	0000      	.short	0x0000
    50dc:	20000358 	.word	0x20000358

000050e0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    50e0:	b570      	push	{r4, r5, r6, lr}
    50e2:	4911      	ldr	r1, [pc, #68]	; (5128 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    50e4:	680a      	ldr	r2, [r1, #0]
    50e6:	b1ea      	cbz	r2, 5124 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    50e8:	2300      	movs	r3, #0
    50ea:	461d      	mov	r5, r3
    50ec:	2401      	movs	r4, #1
    50ee:	684a      	ldr	r2, [r1, #4]
    50f0:	1c52      	adds	r2, r2, #1
    50f2:	604a      	str	r2, [r1, #4]
    50f4:	2a09      	cmp	r2, #9
    50f6:	d300      	bcc.n	50fa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    50f8:	604d      	str	r5, [r1, #4]
    50fa:	790e      	ldrb	r6, [r1, #4]
    50fc:	fa04 f206 	lsl.w	r2, r4, r6
    5100:	680e      	ldr	r6, [r1, #0]
    5102:	4216      	tst	r6, r2
    5104:	d00b      	beq.n	511e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    5106:	f3ef 8310 	mrs	r3, PRIMASK
    510a:	b672      	cpsid	i
    510c:	680c      	ldr	r4, [r1, #0]
    510e:	4394      	bics	r4, r2
    5110:	600c      	str	r4, [r1, #0]
    5112:	b903      	cbnz	r3, 5116 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5114:	b662      	cpsie	i
    5116:	6849      	ldr	r1, [r1, #4]
    5118:	6001      	str	r1, [r0, #0]
    511a:	2000      	movs	r0, #0
    511c:	bd70      	pop	{r4, r5, r6, pc}
    511e:	1c5b      	adds	r3, r3, #1
    5120:	2b09      	cmp	r3, #9
    5122:	d3e4      	bcc.n	50ee <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5124:	2005      	movs	r0, #5
    5126:	bd70      	pop	{r4, r5, r6, pc}
    5128:	200000cc 	.word	0x200000cc

0000512c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    512c:	4802      	ldr	r0, [pc, #8]	; (5138 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    512e:	2100      	movs	r1, #0
    5130:	6001      	str	r1, [r0, #0]
    5132:	6041      	str	r1, [r0, #4]
    5134:	4770      	bx	lr
    5136:	0000      	.short	0x0000
    5138:	200000cc 	.word	0x200000cc

0000513c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    513c:	b510      	push	{r4, lr}
    513e:	4c04      	ldr	r4, [pc, #16]	; (5150 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    5140:	7820      	ldrb	r0, [r4, #0]
    5142:	28ff      	cmp	r0, #255	; 0xff
    5144:	d003      	beq.n	514e <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    5146:	f7ff f823 	bl	4190 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    514a:	20ff      	movs	r0, #255	; 0xff
    514c:	7020      	strb	r0, [r4, #0]
    514e:	bd10      	pop	{r4, pc}
    5150:	20000000 	.word	0x20000000

00005154 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5154:	b510      	push	{r4, lr}
    5156:	4c08      	ldr	r4, [pc, #32]	; (5178 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5158:	7861      	ldrb	r1, [r4, #1]
    515a:	b109      	cbz	r1, 5160 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    515c:	200f      	movs	r0, #15
    515e:	bd10      	pop	{r4, pc}
    5160:	f7fe ffdc 	bl	411c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5164:	7020      	strb	r0, [r4, #0]
    5166:	28ff      	cmp	r0, #255	; 0xff
    5168:	d001      	beq.n	516e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    516a:	2000      	movs	r0, #0
    516c:	bd10      	pop	{r4, pc}
    516e:	2178      	movs	r1, #120	; 0x78
    5170:	201f      	movs	r0, #31
    5172:	f7ff f9fb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5176:	0000      	.short	0x0000
    5178:	20000000 	.word	0x20000000

0000517c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    517c:	4901      	ldr	r1, [pc, #4]	; (5184 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    517e:	2000      	movs	r0, #0
    5180:	7048      	strb	r0, [r1, #1]
    5182:	4770      	bx	lr
    5184:	20000000 	.word	0x20000000

00005188 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5188:	4806      	ldr	r0, [pc, #24]	; (51a4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    518a:	4a07      	ldr	r2, [pc, #28]	; (51a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    518c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    518e:	8852      	ldrh	r2, [r2, #2]
    5190:	4291      	cmp	r1, r2
    5192:	d104      	bne.n	519e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5194:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5198:	b108      	cbz	r0, 519e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    519a:	2000      	movs	r0, #0
    519c:	4770      	bx	lr
    519e:	2001      	movs	r0, #1
    51a0:	4770      	bx	lr
    51a2:	0000      	.short	0x0000
    51a4:	200014a0 	.word	0x200014a0
    51a8:	20000344 	.word	0x20000344

000051ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    51ac:	4901      	ldr	r1, [pc, #4]	; (51b4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    51ae:	8048      	strh	r0, [r1, #2]
    51b0:	4770      	bx	lr
    51b2:	0000      	.short	0x0000
    51b4:	20000344 	.word	0x20000344

000051b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    51b8:	4808      	ldr	r0, [pc, #32]	; (51dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    51ba:	4a09      	ldr	r2, [pc, #36]	; (51e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    51bc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    51be:	8852      	ldrh	r2, [r2, #2]
    51c0:	4291      	cmp	r1, r2
    51c2:	d109      	bne.n	51d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    51c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    51c8:	8481      	strh	r1, [r0, #36]	; 0x24
    51ca:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    51ce:	b119      	cbz	r1, 51d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    51d0:	2100      	movs	r1, #0
    51d2:	7001      	strb	r1, [r0, #0]
    51d4:	2001      	movs	r0, #1
    51d6:	4770      	bx	lr
    51d8:	2000      	movs	r0, #0
    51da:	4770      	bx	lr
    51dc:	200014a0 	.word	0x200014a0
    51e0:	20000344 	.word	0x20000344

000051e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    51e4:	4807      	ldr	r0, [pc, #28]	; (5204 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    51e6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    51ea:	2901      	cmp	r1, #1
    51ec:	d007      	beq.n	51fe <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    51ee:	2101      	movs	r1, #1
    51f0:	7001      	strb	r1, [r0, #0]
    51f2:	4805      	ldr	r0, [pc, #20]	; (5208 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    51f4:	4903      	ldr	r1, [pc, #12]	; (5204 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    51f6:	8800      	ldrh	r0, [r0, #0]
    51f8:	8488      	strh	r0, [r1, #36]	; 0x24
    51fa:	2001      	movs	r0, #1
    51fc:	4770      	bx	lr
    51fe:	2000      	movs	r0, #0
    5200:	4770      	bx	lr
    5202:	0000      	.short	0x0000
    5204:	200014a0 	.word	0x200014a0
    5208:	20000344 	.word	0x20000344

0000520c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    520c:	4906      	ldr	r1, [pc, #24]	; (5228 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    520e:	4b07      	ldr	r3, [pc, #28]	; (522c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5210:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5212:	885b      	ldrh	r3, [r3, #2]
    5214:	429a      	cmp	r2, r3
    5216:	d105      	bne.n	5224 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5218:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    521c:	b112      	cbz	r2, 5224 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    521e:	6001      	str	r1, [r0, #0]
    5220:	2001      	movs	r0, #1
    5222:	4770      	bx	lr
    5224:	2000      	movs	r0, #0
    5226:	4770      	bx	lr
    5228:	200014a0 	.word	0x200014a0
    522c:	20000344 	.word	0x20000344

00005230 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5230:	4909      	ldr	r1, [pc, #36]	; (5258 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5232:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5234:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5238:	3bff      	subs	r3, #255	; 0xff
    523a:	d002      	beq.n	5242 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    523c:	2100      	movs	r1, #0
    523e:	6001      	str	r1, [r0, #0]
    5240:	e007      	b.n	5252 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5242:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5246:	4904      	ldr	r1, [pc, #16]	; (5258 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5248:	2a01      	cmp	r2, #1
    524a:	d002      	beq.n	5252 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    524c:	6001      	str	r1, [r0, #0]
    524e:	2001      	movs	r0, #1
    5250:	4770      	bx	lr
    5252:	2000      	movs	r0, #0
    5254:	4770      	bx	lr
    5256:	0000      	.short	0x0000
    5258:	200014a0 	.word	0x200014a0

0000525c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    525c:	4901      	ldr	r1, [pc, #4]	; (5264 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    525e:	8008      	strh	r0, [r1, #0]
    5260:	4770      	bx	lr
    5262:	0000      	.short	0x0000
    5264:	20000344 	.word	0x20000344

00005268 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5268:	4905      	ldr	r1, [pc, #20]	; (5280 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    526a:	2000      	movs	r0, #0
    526c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5270:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5274:	8488      	strh	r0, [r1, #36]	; 0x24
    5276:	4903      	ldr	r1, [pc, #12]	; (5284 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5278:	8008      	strh	r0, [r1, #0]
    527a:	8048      	strh	r0, [r1, #2]
    527c:	4770      	bx	lr
    527e:	0000      	.short	0x0000
    5280:	200014a0 	.word	0x200014a0
    5284:	20000344 	.word	0x20000344
    5288:	4905      	ldr	r1, [pc, #20]	; (52a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    528a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    528c:	4282      	cmp	r2, r0
    528e:	d105      	bne.n	529c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5290:	2000      	movs	r0, #0
    5292:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5296:	f64f 70ff 	movw	r0, #65535	; 0xffff
    529a:	8488      	strh	r0, [r1, #36]	; 0x24
    529c:	4770      	bx	lr
    529e:	0000      	.short	0x0000
    52a0:	200014a0 	.word	0x200014a0

000052a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    52a4:	4a0a      	ldr	r2, [pc, #40]	; (52d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    52a6:	b110      	cbz	r0, 52ae <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    52a8:	2801      	cmp	r0, #1
    52aa:	d007      	beq.n	52bc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    52ac:	e00e      	b.n	52cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    52ae:	7850      	ldrb	r0, [r2, #1]
    52b0:	b160      	cbz	r0, 52cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    52b2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    52b6:	6008      	str	r0, [r1, #0]
    52b8:	88d0      	ldrh	r0, [r2, #6]
    52ba:	e004      	b.n	52c6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    52bc:	7810      	ldrb	r0, [r2, #0]
    52be:	b128      	cbz	r0, 52cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    52c0:	6890      	ldr	r0, [r2, #8]
    52c2:	6008      	str	r0, [r1, #0]
    52c4:	8990      	ldrh	r0, [r2, #12]
    52c6:	8088      	strh	r0, [r1, #4]
    52c8:	2001      	movs	r0, #1
    52ca:	4770      	bx	lr
    52cc:	2000      	movs	r0, #0
    52ce:	4770      	bx	lr
    52d0:	2000035a 	.word	0x2000035a

000052d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    52d4:	4a08      	ldr	r2, [pc, #32]	; (52f8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    52d6:	2301      	movs	r3, #1
    52d8:	b138      	cbz	r0, 52ea <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    52da:	2801      	cmp	r0, #1
    52dc:	d104      	bne.n	52e8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    52de:	7013      	strb	r3, [r2, #0]
    52e0:	6808      	ldr	r0, [r1, #0]
    52e2:	6090      	str	r0, [r2, #8]
    52e4:	8888      	ldrh	r0, [r1, #4]
    52e6:	8190      	strh	r0, [r2, #12]
    52e8:	4770      	bx	lr
    52ea:	7053      	strb	r3, [r2, #1]
    52ec:	6808      	ldr	r0, [r1, #0]
    52ee:	f8c2 0002 	str.w	r0, [r2, #2]
    52f2:	8888      	ldrh	r0, [r1, #4]
    52f4:	80d0      	strh	r0, [r2, #6]
    52f6:	4770      	bx	lr
    52f8:	2000035a 	.word	0x2000035a

000052fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    52fc:	4906      	ldr	r1, [pc, #24]	; (5318 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    52fe:	b110      	cbz	r0, 5306 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5300:	2801      	cmp	r0, #1
    5302:	d002      	beq.n	530a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5304:	e005      	b.n	5312 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5306:	7848      	ldrb	r0, [r1, #1]
    5308:	e000      	b.n	530c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    530a:	7808      	ldrb	r0, [r1, #0]
    530c:	b108      	cbz	r0, 5312 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    530e:	2001      	movs	r0, #1
    5310:	4770      	bx	lr
    5312:	2000      	movs	r0, #0
    5314:	4770      	bx	lr
    5316:	0000      	.short	0x0000
    5318:	2000035a 	.word	0x2000035a

0000531c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    531c:	4901      	ldr	r1, [pc, #4]	; (5324 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    531e:	7708      	strb	r0, [r1, #28]
    5320:	4770      	bx	lr
    5322:	0000      	.short	0x0000
    5324:	20000d2a 	.word	0x20000d2a

00005328 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5328:	4801      	ldr	r0, [pc, #4]	; (5330 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    532a:	78c0      	ldrb	r0, [r0, #3]
    532c:	4770      	bx	lr
    532e:	0000      	.short	0x0000
    5330:	200000d4 	.word	0x200000d4

00005334 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5334:	4801      	ldr	r0, [pc, #4]	; (533c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5336:	7900      	ldrb	r0, [r0, #4]
    5338:	4770      	bx	lr
    533a:	0000      	.short	0x0000
    533c:	200000d4 	.word	0x200000d4

00005340 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5340:	b510      	push	{r4, lr}
    5342:	4604      	mov	r4, r0
    5344:	f000 f944 	bl	55d0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5348:	b118      	cbz	r0, 5352 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    534a:	21c5      	movs	r1, #197	; 0xc5
    534c:	2027      	movs	r0, #39	; 0x27
    534e:	f7ff f90d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5352:	4803      	ldr	r0, [pc, #12]	; (5360 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5354:	2101      	movs	r1, #1
    5356:	f008 fdfc 	bl	df52 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    535a:	4802      	ldr	r0, [pc, #8]	; (5364 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    535c:	62c4      	str	r4, [r0, #44]	; 0x2c
    535e:	bd10      	pop	{r4, pc}
    5360:	20000d08 	.word	0x20000d08
    5364:	200000d4 	.word	0x200000d4

00005368 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5368:	4901      	ldr	r1, [pc, #4]	; (5370 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    536a:	2001      	movs	r0, #1
    536c:	7188      	strb	r0, [r1, #6]
    536e:	4770      	bx	lr
    5370:	200000d4 	.word	0x200000d4

00005374 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5378:	4c5d      	ldr	r4, [pc, #372]	; (54f0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    537a:	9d06      	ldr	r5, [sp, #24]
    537c:	7826      	ldrb	r6, [r4, #0]
    537e:	2e00      	cmp	r6, #0
    5380:	d16a      	bne.n	5458 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5382:	2a00      	cmp	r2, #0
    5384:	d068      	beq.n	5458 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5386:	2b00      	cmp	r3, #0
    5388:	d066      	beq.n	5458 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    538a:	2d00      	cmp	r5, #0
    538c:	d064      	beq.n	5458 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    538e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5392:	f104 0614 	add.w	r6, r4, #20
    5396:	2000      	movs	r0, #0
    5398:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    539c:	71a0      	strb	r0, [r4, #6]
    539e:	7160      	strb	r0, [r4, #5]
    53a0:	70e0      	strb	r0, [r4, #3]
    53a2:	70a0      	strb	r0, [r4, #2]
    53a4:	7120      	strb	r0, [r4, #4]
    53a6:	81a0      	strh	r0, [r4, #12]
    53a8:	81e0      	strh	r0, [r4, #14]
    53aa:	f000 f955 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    53ae:	4606      	mov	r6, r0
    53b0:	f000 f94c 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    53b4:	4605      	mov	r5, r0
    53b6:	f005 fd87 	bl	aec8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    53ba:	f005 fadf 	bl	a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    53be:	f995 006e 	ldrsb.w	r0, [r5, #110]	; 0x6e
    53c2:	f005 fe05 	bl	afd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    53c6:	69e8      	ldr	r0, [r5, #28]
    53c8:	f005 fed8 	bl	b17c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    53cc:	6968      	ldr	r0, [r5, #20]
    53ce:	f005 fecb 	bl	b168 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    53d2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    53d6:	f005 ff01 	bl	b1dc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    53da:	f104 0038 	add.w	r0, r4, #56	; 0x38
    53de:	6840      	ldr	r0, [r0, #4]
    53e0:	f890 020c 	ldrb.w	r0, [r0, #524]	; 0x20c
    53e4:	b108      	cbz	r0, 53ea <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x76>
    53e6:	f005 fcef 	bl	adc8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    53ea:	f895 106b 	ldrb.w	r1, [r5, #107]	; 0x6b
    53ee:	2001      	movs	r0, #1
    53f0:	f005 fc2e 	bl	ac50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    53f4:	2800      	cmp	r0, #0
    53f6:	d074      	beq.n	54e2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    53f8:	483e      	ldr	r0, [pc, #248]	; (54f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    53fa:	f005 fc95 	bl	ad28 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    53fe:	8828      	ldrh	r0, [r5, #0]
    5400:	f7ff fcc2 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5404:	6320      	str	r0, [r4, #48]	; 0x30
    5406:	8828      	ldrh	r0, [r5, #0]
    5408:	f7ff fca8 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    540c:	6360      	str	r0, [r4, #52]	; 0x34
    540e:	f106 0080 	add.w	r0, r6, #128	; 0x80
    5412:	3680      	adds	r6, #128	; 0x80
    5414:	4938      	ldr	r1, [pc, #224]	; (54f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5416:	e896 108c 	ldmia.w	r6, {r2, r3, r7, ip}
    541a:	f101 0808 	add.w	r8, r1, #8
    541e:	3e80      	subs	r6, #128	; 0x80
    5420:	e888 108c 	stmia.w	r8, {r2, r3, r7, ip}
    5424:	6902      	ldr	r2, [r0, #16]
    5426:	f8c1 2021 	str.w	r2, [r1, #33]	; 0x21
    542a:	6940      	ldr	r0, [r0, #20]
    542c:	f8c1 0025 	str.w	r0, [r1, #37]	; 0x25
    5430:	f000 f972 	bl	5718 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12c>
    5434:	4601      	mov	r1, r0
    5436:	8f28      	ldrh	r0, [r5, #56]	; 0x38
    5438:	f008 faed 	bl	da16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    543c:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
    543e:	4281      	cmp	r1, r0
    5440:	d200      	bcs.n	5444 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd0>
    5442:	4608      	mov	r0, r1
    5444:	7220      	strb	r0, [r4, #8]
    5446:	46a0      	mov	r8, r4
    5448:	f895 106b 	ldrb.w	r1, [r5, #107]	; 0x6b
    544c:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
    544e:	7ef7      	ldrb	r7, [r6, #27]
    5450:	8fac      	ldrh	r4, [r5, #60]	; 0x3c
    5452:	2908      	cmp	r1, #8
    5454:	d104      	bne.n	5460 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5456:	e002      	b.n	545e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xea>
    5458:	f240 111d 	movw	r1, #285	; 0x11d
    545c:	e045      	b.n	54ea <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    545e:	2104      	movs	r1, #4
    5460:	f008 fad9 	bl	da16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5464:	b90f      	cbnz	r7, 546a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf6>
    5466:	1d00      	adds	r0, r0, #4
    5468:	b280      	uxth	r0, r0
    546a:	4284      	cmp	r4, r0
    546c:	d200      	bcs.n	5470 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    546e:	4620      	mov	r0, r4
    5470:	b2c4      	uxtb	r4, r0
    5472:	f888 4009 	strb.w	r4, [r8, #9]
    5476:	7ef1      	ldrb	r1, [r6, #27]
    5478:	2900      	cmp	r1, #0
    547a:	d001      	beq.n	5480 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    547c:	f04f 0104 	mov.w	r1, #4
    5480:	4421      	add	r1, r4
    5482:	f888 1007 	strb.w	r1, [r8, #7]
    5486:	d014      	beq.n	54b2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13e>
    5488:	481b      	ldr	r0, [pc, #108]	; (54f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    548a:	f04f 0701 	mov.w	r7, #1
    548e:	f100 0008 	add.w	r0, r0, #8
    5492:	7607      	strb	r7, [r0, #24]
    5494:	e9d6 121e 	ldrd	r1, r2, [r6, #120]	; 0x78
    5498:	e9c0 1204 	strd	r1, r2, [r0, #16]
    549c:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    54a0:	f008 f9be 	bl	d820 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    54a4:	4914      	ldr	r1, [pc, #80]	; (54f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    54a6:	4603      	mov	r3, r0
    54a8:	4622      	mov	r2, r4
    54aa:	3108      	adds	r1, #8
    54ac:	4638      	mov	r0, r7
    54ae:	f005 f9d1 	bl	a854 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    54b2:	2001      	movs	r0, #1
    54b4:	f000 fb88 	bl	5bc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>
    54b8:	4810      	ldr	r0, [pc, #64]	; (54fc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    54ba:	6800      	ldr	r0, [r0, #0]
    54bc:	2803      	cmp	r0, #3
    54be:	d012      	beq.n	54e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    54c0:	280b      	cmp	r0, #11
    54c2:	d010      	beq.n	54e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    54c4:	480c      	ldr	r0, [pc, #48]	; (54f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    54c6:	220e      	movs	r2, #14
    54c8:	2100      	movs	r1, #0
    54ca:	3052      	adds	r0, #82	; 0x52
    54cc:	f007 f85f 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    54d0:	4809      	ldr	r0, [pc, #36]	; (54f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    54d2:	89b1      	ldrh	r1, [r6, #12]
    54d4:	3052      	adds	r0, #82	; 0x52
    54d6:	8041      	strh	r1, [r0, #2]
    54d8:	8829      	ldrh	r1, [r5, #0]
    54da:	8001      	strh	r1, [r0, #0]
    54dc:	f896 102b 	ldrb.w	r1, [r6, #43]	; 0x2b
    54e0:	7101      	strb	r1, [r0, #4]
    54e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54e6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    54ea:	2027      	movs	r0, #39	; 0x27
    54ec:	f7ff f83e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54f0:	200000d4 	.word	0x200000d4
    54f4:	00005dc8 	.word	0x00005dc8
    54f8:	20000cd8 	.word	0x20000cd8
    54fc:	40001550 	.word	0x40001550

00005500 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5500:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5504:	468a      	mov	sl, r1
    5506:	4606      	mov	r6, r0
    5508:	f000 f8a6 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    550c:	4d2b      	ldr	r5, [pc, #172]	; (55bc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbc>)
    550e:	4604      	mov	r4, r0
    5510:	f04f 0800 	mov.w	r8, #0
    5514:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5516:	7847      	ldrb	r7, [r0, #1]
    5518:	b10e      	cbz	r6, 551e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1e>
    551a:	2e01      	cmp	r6, #1
    551c:	d101      	bne.n	5522 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x22>
    551e:	f885 8001 	strb.w	r8, [r5, #1]
    5522:	7868      	ldrb	r0, [r5, #1]
    5524:	f04f 0901 	mov.w	r9, #1
    5528:	b150      	cbz	r0, 5540 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x40>
    552a:	2801      	cmp	r0, #1
    552c:	d021      	beq.n	5572 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x72>
    552e:	2802      	cmp	r0, #2
    5530:	d02b      	beq.n	558a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    5532:	2803      	cmp	r0, #3
    5534:	d03a      	beq.n	55ac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5536:	f240 411d 	movw	r1, #1053	; 0x41d
    553a:	2027      	movs	r0, #39	; 0x27
    553c:	f7ff f816 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5540:	2e01      	cmp	r6, #1
    5542:	d028      	beq.n	5596 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5544:	f000 f8d4 	bl	56f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5548:	4669      	mov	r1, sp
    554a:	aa01      	add	r2, sp, #4
    554c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    554e:	f007 fdb6 	bl	d0be <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    5552:	9800      	ldr	r0, [sp, #0]
    5554:	f007 fd69 	bl	d02a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5558:	f8ca 0000 	str.w	r0, [sl]
    555c:	4639      	mov	r1, r7
    555e:	2201      	movs	r2, #1
    5560:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5562:	e00d      	b.n	5580 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x80>
    5564:	f884 8010 	strb.w	r8, [r4, #16]
    5568:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    556c:	f884 9010 	strb.w	r9, [r4, #16]
    5570:	e7fa      	b.n	5568 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    5572:	2e01      	cmp	r6, #1
    5574:	d00f      	beq.n	5596 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5576:	f000 f8bb 	bl	56f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    557a:	4639      	mov	r1, r7
    557c:	2200      	movs	r2, #0
    557e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5580:	f007 fd0a 	bl	cf98 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5584:	2e02      	cmp	r6, #2
    5586:	d106      	bne.n	5596 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5588:	e7ee      	b.n	5568 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    558a:	2e01      	cmp	r6, #1
    558c:	d003      	beq.n	5596 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    558e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5590:	f007 fe9e 	bl	d2d0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5594:	e7f6      	b.n	5584 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x84>
    5596:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    559a:	1c40      	adds	r0, r0, #1
    559c:	f141 0100 	adc.w	r1, r1, #0
    55a0:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    55a4:	7c20      	ldrb	r0, [r4, #16]
    55a6:	2801      	cmp	r0, #1
    55a8:	d1e0      	bne.n	556c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6c>
    55aa:	e7db      	b.n	5564 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    55ac:	2e01      	cmp	r6, #1
    55ae:	d0db      	beq.n	5568 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    55b0:	6b68      	ldr	r0, [r5, #52]	; 0x34
    55b2:	e8bd 47fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    55b6:	f007 be8b 	b.w	d2d0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    55ba:	0000      	.short	0x0000
    55bc:	200000d4 	.word	0x200000d4

000055c0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    55c0:	4802      	ldr	r0, [pc, #8]	; (55cc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    55c2:	89c0      	ldrh	r0, [r0, #14]
    55c4:	f3c0 2080 	ubfx	r0, r0, #10, #1
    55c8:	4770      	bx	lr
    55ca:	0000      	.short	0x0000
    55cc:	200000d4 	.word	0x200000d4

000055d0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    55d0:	4804      	ldr	r0, [pc, #16]	; (55e4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    55d2:	7800      	ldrb	r0, [r0, #0]
    55d4:	b108      	cbz	r0, 55da <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    55d6:	200c      	movs	r0, #12
    55d8:	4770      	bx	lr
    55da:	4903      	ldr	r1, [pc, #12]	; (55e8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    55dc:	2000      	movs	r0, #0
    55de:	7708      	strb	r0, [r1, #28]
    55e0:	4770      	bx	lr
    55e2:	0000      	.short	0x0000
    55e4:	200000d4 	.word	0x200000d4
    55e8:	20000d2a 	.word	0x20000d2a

000055ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    55ec:	480c      	ldr	r0, [pc, #48]	; (5620 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    55ee:	b510      	push	{r4, lr}
    55f0:	7801      	ldrb	r1, [r0, #0]
    55f2:	b149      	cbz	r1, 5608 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    55f4:	f100 0138 	add.w	r1, r0, #56	; 0x38
    55f8:	7800      	ldrb	r0, [r0, #0]
    55fa:	2802      	cmp	r0, #2
    55fc:	d008      	beq.n	5610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    55fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    5602:	2027      	movs	r0, #39	; 0x27
    5604:	f7fe ffb2 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    560c:	f000 b9f8 	b.w	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5610:	6848      	ldr	r0, [r1, #4]
    5612:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
    5616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    561a:	f005 bb8d 	b.w	ad38 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    561e:	0000      	.short	0x0000
    5620:	200000d4 	.word	0x200000d4
    5624:	4608      	mov	r0, r1
    5626:	2100      	movs	r1, #0
    5628:	7041      	strb	r1, [r0, #1]
    562a:	211c      	movs	r1, #28
    562c:	f800 1b04 	strb.w	r1, [r0], #4
    5630:	220e      	movs	r2, #14
    5632:	4901      	ldr	r1, [pc, #4]	; (5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    5634:	f006 bf31 	b.w	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5638:	20000d38 	.word	0x20000d38
    563c:	4a02      	ldr	r2, [pc, #8]	; (5648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    563e:	8993      	ldrh	r3, [r2, #12]
    5640:	4303      	orrs	r3, r0
    5642:	8193      	strh	r3, [r2, #12]
    5644:	6952      	ldr	r2, [r2, #20]
    5646:	4710      	bx	r2
    5648:	200000d4 	.word	0x200000d4
    564c:	4801      	ldr	r0, [pc, #4]	; (5654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    564e:	6840      	ldr	r0, [r0, #4]
    5650:	4770      	bx	lr
    5652:	0000      	.short	0x0000
    5654:	2000010c 	.word	0x2000010c
    5658:	4801      	ldr	r0, [pc, #4]	; (5660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    565a:	6840      	ldr	r0, [r0, #4]
    565c:	3080      	adds	r0, #128	; 0x80
    565e:	4770      	bx	lr
    5660:	2000010c 	.word	0x2000010c
    5664:	4a01      	ldr	r2, [pc, #4]	; (566c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    5666:	2100      	movs	r1, #0
    5668:	6952      	ldr	r2, [r2, #20]
    566a:	4710      	bx	r2
    566c:	200000d4 	.word	0x200000d4
    5670:	b570      	push	{r4, r5, r6, lr}
    5672:	4605      	mov	r5, r0
    5674:	2901      	cmp	r1, #1
    5676:	d818      	bhi.n	56aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5678:	4c12      	ldr	r4, [pc, #72]	; (56c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>)
    567a:	69a1      	ldr	r1, [r4, #24]
    567c:	4788      	blx	r1
    567e:	b1a0      	cbz	r0, 56aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5680:	7960      	ldrb	r0, [r4, #5]
    5682:	b990      	cbnz	r0, 56aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5684:	b9e5      	cbnz	r5, 56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd4>
    5686:	f104 0010 	add.w	r0, r4, #16
    568a:	7801      	ldrb	r1, [r0, #0]
    568c:	06c8      	lsls	r0, r1, #27
    568e:	d405      	bmi.n	569c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5690:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5692:	7800      	ldrb	r0, [r0, #0]
    5694:	06c0      	lsls	r0, r0, #27
    5696:	d401      	bmi.n	569c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5698:	2001      	movs	r0, #1
    569a:	e000      	b.n	569e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    569c:	2000      	movs	r0, #0
    569e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    56a0:	b92a      	cbnz	r2, 56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    56a2:	8962      	ldrh	r2, [r4, #10]
    56a4:	b11a      	cbz	r2, 56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    56a6:	06c9      	lsls	r1, r1, #27
    56a8:	d401      	bmi.n	56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    56aa:	2001      	movs	r0, #1
    56ac:	bd70      	pop	{r4, r5, r6, pc}
    56ae:	89a1      	ldrh	r1, [r4, #12]
    56b0:	078a      	lsls	r2, r1, #30
    56b2:	d503      	bpl.n	56bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    56b4:	6a22      	ldr	r2, [r4, #32]
    56b6:	78d2      	ldrb	r2, [r2, #3]
    56b8:	2a02      	cmp	r2, #2
    56ba:	d001      	beq.n	56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd4>
    56bc:	4308      	orrs	r0, r1
    56be:	d1f4      	bne.n	56aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    56c0:	2000      	movs	r0, #0
    56c2:	bd70      	pop	{r4, r5, r6, pc}
    56c4:	200000d4 	.word	0x200000d4
    56c8:	b530      	push	{r4, r5, lr}
    56ca:	4b08      	ldr	r3, [pc, #32]	; (56ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>)
    56cc:	88dd      	ldrh	r5, [r3, #6]
    56ce:	891c      	ldrh	r4, [r3, #8]
    56d0:	b12a      	cbz	r2, 56de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    56d2:	b908      	cbnz	r0, 56d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    56d4:	b905      	cbnz	r5, 56d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    56d6:	b114      	cbz	r4, 56de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    56d8:	8958      	ldrh	r0, [r3, #10]
    56da:	1c40      	adds	r0, r0, #1
    56dc:	8158      	strh	r0, [r3, #10]
    56de:	b111      	cbz	r1, 56e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    56e0:	1c6d      	adds	r5, r5, #1
    56e2:	80dd      	strh	r5, [r3, #6]
    56e4:	bd30      	pop	{r4, r5, pc}
    56e6:	1c64      	adds	r4, r4, #1
    56e8:	811c      	strh	r4, [r3, #8]
    56ea:	bd30      	pop	{r4, r5, pc}
    56ec:	20000d2a 	.word	0x20000d2a
    56f0:	b510      	push	{r4, lr}
    56f2:	4c08      	ldr	r4, [pc, #32]	; (5714 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>)
    56f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    56f6:	b138      	cbz	r0, 5708 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    56f8:	8962      	ldrh	r2, [r4, #10]
    56fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    56fc:	1cd2      	adds	r2, r2, #3
    56fe:	f006 fecc 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5702:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5704:	6260      	str	r0, [r4, #36]	; 0x24
    5706:	bd10      	pop	{r4, pc}
    5708:	f240 4163 	movw	r1, #1123	; 0x463
    570c:	2027      	movs	r0, #39	; 0x27
    570e:	f7fe ff2d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5712:	0000      	.short	0x0000
    5714:	200000d4 	.word	0x200000d4
    5718:	b510      	push	{r4, lr}
    571a:	f7ff ff97 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    571e:	4604      	mov	r4, r0
    5720:	f7ff ff9a 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5724:	4602      	mov	r2, r0
    5726:	7d41      	ldrb	r1, [r0, #21]
    5728:	4816      	ldr	r0, [pc, #88]	; (5784 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>)
    572a:	2926      	cmp	r1, #38	; 0x26
    572c:	d010      	beq.n	5750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    572e:	2927      	cmp	r1, #39	; 0x27
    5730:	d00e      	beq.n	5750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    5732:	7d92      	ldrb	r2, [r2, #22]
    5734:	2a26      	cmp	r2, #38	; 0x26
    5736:	d00b      	beq.n	5750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    5738:	2921      	cmp	r1, #33	; 0x21
    573a:	d00d      	beq.n	5758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    573c:	2922      	cmp	r1, #34	; 0x22
    573e:	d00b      	beq.n	5758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5740:	2a24      	cmp	r2, #36	; 0x24
    5742:	d00f      	beq.n	5764 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    5744:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5748:	2804      	cmp	r0, #4
    574a:	d100      	bne.n	574e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x162>
    574c:	2008      	movs	r0, #8
    574e:	bd10      	pop	{r4, pc}
    5750:	6840      	ldr	r0, [r0, #4]
    5752:	f890 12be 	ldrb.w	r1, [r0, #702]	; 0x2be
    5756:	e00e      	b.n	5776 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18a>
    5758:	2a24      	cmp	r2, #36	; 0x24
    575a:	d003      	beq.n	5764 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    575c:	6840      	ldr	r0, [r0, #4]
    575e:	f890 0136 	ldrb.w	r0, [r0, #310]	; 0x136
    5762:	e005      	b.n	5770 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    5764:	6841      	ldr	r1, [r0, #4]
    5766:	f891 0136 	ldrb.w	r0, [r1, #310]	; 0x136
    576a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    576e:	4008      	ands	r0, r1
    5770:	f008 f84c 	bl	d80c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5774:	4601      	mov	r1, r0
    5776:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    577a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    577e:	f008 b85d 	b.w	d83c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5782:	0000      	.short	0x0000
    5784:	2000010c 	.word	0x2000010c
    5788:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    578c:	468b      	mov	fp, r1
    578e:	4607      	mov	r7, r0
    5790:	f7ff ff62 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5794:	f04f 0900 	mov.w	r9, #0
    5798:	4c69      	ldr	r4, [pc, #420]	; (5940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    579a:	4606      	mov	r6, r0
    579c:	f88d 9004 	strb.w	r9, [sp, #4]
    57a0:	f8cd 9008 	str.w	r9, [sp, #8]
    57a4:	f8cd 9000 	str.w	r9, [sp]
    57a8:	7820      	ldrb	r0, [r4, #0]
    57aa:	464d      	mov	r5, r9
    57ac:	2802      	cmp	r0, #2
    57ae:	d004      	beq.n	57ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ce>
    57b0:	f240 41ee 	movw	r1, #1262	; 0x4ee
    57b4:	2027      	movs	r0, #39	; 0x27
    57b6:	f7fe fed9 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57ba:	7ba0      	ldrb	r0, [r4, #14]
    57bc:	0640      	lsls	r0, r0, #25
    57be:	d406      	bmi.n	57ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e2>
    57c0:	2040      	movs	r0, #64	; 0x40
    57c2:	f7ff ff4f 	bl	5664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    57c6:	89e0      	ldrh	r0, [r4, #14]
    57c8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    57cc:	81e0      	strh	r0, [r4, #14]
    57ce:	7ef0      	ldrb	r0, [r6, #27]
    57d0:	b3df      	cbz	r7, 584a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25e>
    57d2:	b180      	cbz	r0, 57f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57d4:	f005 f90c 	bl	a9f0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    57d8:	f005 f8e6 	bl	a9a8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    57dc:	b958      	cbnz	r0, 57f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57de:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57e0:	7841      	ldrb	r1, [r0, #1]
    57e2:	b141      	cbz	r1, 57f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57e4:	7800      	ldrb	r0, [r0, #0]
    57e6:	7c31      	ldrb	r1, [r6, #16]
    57e8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    57ec:	4288      	cmp	r0, r1
    57ee:	d102      	bne.n	57f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57f0:	2001      	movs	r0, #1
    57f2:	70a0      	strb	r0, [r4, #2]
    57f4:	e0a0      	b.n	5938 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    57f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57f8:	7841      	ldrb	r1, [r0, #1]
    57fa:	8161      	strh	r1, [r4, #10]
    57fc:	b121      	cbz	r1, 5808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    57fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5800:	f007 fd33 	bl	d26a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5804:	62a0      	str	r0, [r4, #40]	; 0x28
    5806:	e000      	b.n	580a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21e>
    5808:	62a5      	str	r5, [r4, #40]	; 0x28
    580a:	89e0      	ldrh	r0, [r4, #14]
    580c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5810:	81e0      	strh	r0, [r4, #14]
    5812:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5814:	7bf1      	ldrb	r1, [r6, #15]
    5816:	7800      	ldrb	r0, [r0, #0]
    5818:	f3c0 0080 	ubfx	r0, r0, #2, #1
    581c:	4288      	cmp	r0, r1
    581e:	d007      	beq.n	5830 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    5820:	a802      	add	r0, sp, #8
    5822:	f000 f983 	bl	5b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5826:	89e0      	ldrh	r0, [r4, #14]
    5828:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    582c:	81e0      	strh	r0, [r4, #14]
    582e:	e001      	b.n	5834 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x248>
    5830:	f04f 0901 	mov.w	r9, #1
    5834:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5836:	7c31      	ldrb	r1, [r6, #16]
    5838:	7800      	ldrb	r0, [r0, #0]
    583a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    583e:	4288      	cmp	r0, r1
    5840:	d10e      	bne.n	5860 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x274>
    5842:	a801      	add	r0, sp, #4
    5844:	f000 f934 	bl	5ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c4>
    5848:	e00a      	b.n	5860 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x274>
    584a:	e7ff      	b.n	584c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x260>
    584c:	b108      	cbz	r0, 5852 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x266>
    584e:	f005 f8c9 	bl	a9e4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5852:	78e0      	ldrb	r0, [r4, #3]
    5854:	1c40      	adds	r0, r0, #1
    5856:	70e0      	strb	r0, [r4, #3]
    5858:	89e0      	ldrh	r0, [r4, #14]
    585a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    585e:	81e0      	strh	r0, [r4, #14]
    5860:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 5940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5864:	7eb0      	ldrb	r0, [r6, #26]
    5866:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    586a:	b188      	cbz	r0, 5890 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a4>
    586c:	f7ff feee 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5870:	4934      	ldr	r1, [pc, #208]	; (5944 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>)
    5872:	760d      	strb	r5, [r1, #24]
    5874:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
    5878:	e9c1 2304 	strd	r2, r3, [r1, #16]
    587c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5880:	f007 ffce 	bl	d820 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5884:	4603      	mov	r3, r0
    5886:	22fb      	movs	r2, #251	; 0xfb
    5888:	492e      	ldr	r1, [pc, #184]	; (5944 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>)
    588a:	4628      	mov	r0, r5
    588c:	f004 ffe2 	bl	a854 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5890:	f04f 0800 	mov.w	r8, #0
    5894:	f1bb 0f00 	cmp.w	fp, #0
    5898:	d104      	bne.n	58a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b8>
    589a:	78e1      	ldrb	r1, [r4, #3]
    589c:	2001      	movs	r0, #1
    589e:	f7ff fee7 	bl	5670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    58a2:	b1b0      	cbz	r0, 58d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e6>
    58a4:	f005 fc4c 	bl	b140 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    58a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    58ac:	b118      	cbz	r0, 58b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    58ae:	4669      	mov	r1, sp
    58b0:	2000      	movs	r0, #0
    58b2:	f7ff fe25 	bl	5500 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    58b6:	89b0      	ldrh	r0, [r6, #12]
    58b8:	464a      	mov	r2, r9
    58ba:	4639      	mov	r1, r7
    58bc:	f7ff ff04 	bl	56c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    58c0:	b127      	cbz	r7, 58cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    58c2:	481f      	ldr	r0, [pc, #124]	; (5940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    58c4:	70e5      	strb	r5, [r4, #3]
    58c6:	3038      	adds	r0, #56	; 0x38
    58c8:	f008 fdbf 	bl	e44a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    58cc:	f04f 0801 	mov.w	r8, #1
    58d0:	e01b      	b.n	590a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31e>
    58d2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    58d6:	b118      	cbz	r0, 58e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    58d8:	4669      	mov	r1, sp
    58da:	2001      	movs	r0, #1
    58dc:	f7ff fe10 	bl	5500 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    58e0:	2000      	movs	r0, #0
    58e2:	f000 f9ad 	bl	5c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>
    58e6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    58ea:	b118      	cbz	r0, 58f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    58ec:	4669      	mov	r1, sp
    58ee:	2002      	movs	r0, #2
    58f0:	f7ff fe06 	bl	5500 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    58f4:	89b0      	ldrh	r0, [r6, #12]
    58f6:	464a      	mov	r2, r9
    58f8:	4639      	mov	r1, r7
    58fa:	f7ff fee5 	bl	56c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    58fe:	b127      	cbz	r7, 590a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31e>
    5900:	480f      	ldr	r0, [pc, #60]	; (5940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    5902:	70e5      	strb	r5, [r4, #3]
    5904:	3038      	adds	r0, #56	; 0x38
    5906:	f008 fda0 	bl	e44a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    590a:	9802      	ldr	r0, [sp, #8]
    590c:	b140      	cbz	r0, 5920 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>
    590e:	f007 fb8c 	bl	d02a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5912:	f8da 1004 	ldr.w	r1, [sl, #4]
    5916:	1c40      	adds	r0, r0, #1
    5918:	7205      	strb	r5, [r0, #8]
    591a:	220d      	movs	r2, #13
    591c:	f000 fd98 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5920:	9800      	ldr	r0, [sp, #0]
    5922:	b130      	cbz	r0, 5932 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x346>
    5924:	f8da 1004 	ldr.w	r1, [sl, #4]
    5928:	7205      	strb	r5, [r0, #8]
    592a:	2227      	movs	r2, #39	; 0x27
    592c:	9800      	ldr	r0, [sp, #0]
    592e:	f000 fd8f 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5932:	f1b8 0f00 	cmp.w	r8, #0
    5936:	d001      	beq.n	593c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    5938:	f000 f862 	bl	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    593c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5940:	200000d4 	.word	0x200000d4
    5944:	20000ce0 	.word	0x20000ce0
    5948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    594c:	460f      	mov	r7, r1
    594e:	4680      	mov	r8, r0
    5950:	f7ff fe82 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5954:	4d28      	ldr	r5, [pc, #160]	; (59f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>)
    5956:	4604      	mov	r4, r0
    5958:	7828      	ldrb	r0, [r5, #0]
    595a:	2801      	cmp	r0, #1
    595c:	d004      	beq.n	5968 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x37c>
    595e:	f240 4172 	movw	r1, #1138	; 0x472
    5962:	2027      	movs	r0, #39	; 0x27
    5964:	f7fe fe02 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5968:	7a21      	ldrb	r1, [r4, #8]
    596a:	2000      	movs	r0, #0
    596c:	2601      	movs	r6, #1
    596e:	b129      	cbz	r1, 597c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x390>
    5970:	7220      	strb	r0, [r4, #8]
    5972:	2100      	movs	r1, #0
    5974:	2004      	movs	r0, #4
    5976:	f7ff fe61 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    597a:	72a6      	strb	r6, [r4, #10]
    597c:	6a29      	ldr	r1, [r5, #32]
    597e:	7808      	ldrb	r0, [r1, #0]
    5980:	43c0      	mvns	r0, r0
    5982:	0780      	lsls	r0, r0, #30
    5984:	d109      	bne.n	599a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ae>
    5986:	7ba0      	ldrb	r0, [r4, #14]
    5988:	bb78      	cbnz	r0, 59ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fe>
    598a:	2002      	movs	r0, #2
    598c:	f7ff fe56 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5990:	6a28      	ldr	r0, [r5, #32]
    5992:	7800      	ldrb	r0, [r0, #0]
    5994:	43c0      	mvns	r0, r0
    5996:	0780      	lsls	r0, r0, #30
    5998:	d027      	beq.n	59ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fe>
    599a:	6a28      	ldr	r0, [r5, #32]
    599c:	7840      	ldrb	r0, [r0, #1]
    599e:	b110      	cbz	r0, 59a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ba>
    59a0:	2002      	movs	r0, #2
    59a2:	73a0      	strb	r0, [r4, #14]
    59a4:	e000      	b.n	59a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3bc>
    59a6:	73a6      	strb	r6, [r4, #14]
    59a8:	7ee0      	ldrb	r0, [r4, #27]
    59aa:	b190      	cbz	r0, 59d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e6>
    59ac:	f7ff fe4e 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    59b0:	4912      	ldr	r1, [pc, #72]	; (59fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>)
    59b2:	7a6d      	ldrb	r5, [r5, #9]
    59b4:	760e      	strb	r6, [r1, #24]
    59b6:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
    59ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
    59be:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    59c2:	f007 ff2d 	bl	d820 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    59c6:	4603      	mov	r3, r0
    59c8:	462a      	mov	r2, r5
    59ca:	490c      	ldr	r1, [pc, #48]	; (59fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>)
    59cc:	4630      	mov	r0, r6
    59ce:	f004 ff41 	bl	a854 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    59d2:	ea37 0708 	bics.w	r7, r7, r8
    59d6:	d004      	beq.n	59e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f6>
    59d8:	2100      	movs	r1, #0
    59da:	4608      	mov	r0, r1
    59dc:	f7ff fe48 	bl	5670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    59e0:	b128      	cbz	r0, 59ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    59e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    59e6:	f000 b80b 	b.w	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    59ea:	2003      	movs	r0, #3
    59ec:	e7d9      	b.n	59a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    59ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    59f2:	2000      	movs	r0, #0
    59f4:	f000 b8e8 	b.w	5bc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>
    59f8:	200000d4 	.word	0x200000d4
    59fc:	20000ce0 	.word	0x20000ce0
    5a00:	b510      	push	{r4, lr}
    5a02:	f005 f89b 	bl	ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5a06:	f004 ffb9 	bl	a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5a0a:	4c0d      	ldr	r4, [pc, #52]	; (5a40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>)
    5a0c:	89e0      	ldrh	r0, [r4, #14]
    5a0e:	f7ff fe29 	bl	5664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5a12:	480c      	ldr	r0, [pc, #48]	; (5a44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    5a14:	7f00      	ldrb	r0, [r0, #28]
    5a16:	b158      	cbz	r0, 5a30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    5a18:	490a      	ldr	r1, [pc, #40]	; (5a44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    5a1a:	220e      	movs	r2, #14
    5a1c:	f101 000e 	add.w	r0, r1, #14
    5a20:	f006 fd3b 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a24:	4807      	ldr	r0, [pc, #28]	; (5a44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    5a26:	2221      	movs	r2, #33	; 0x21
    5a28:	4907      	ldr	r1, [pc, #28]	; (5a48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>)
    5a2a:	301d      	adds	r0, #29
    5a2c:	f000 fd10 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5a30:	69e2      	ldr	r2, [r4, #28]
    5a32:	7961      	ldrb	r1, [r4, #5]
    5a34:	78a0      	ldrb	r0, [r4, #2]
    5a36:	4790      	blx	r2
    5a38:	2000      	movs	r0, #0
    5a3a:	7020      	strb	r0, [r4, #0]
    5a3c:	bd10      	pop	{r4, pc}
    5a3e:	0000      	.short	0x0000
    5a40:	200000d4 	.word	0x200000d4
    5a44:	20000d2a 	.word	0x20000d2a
    5a48:	00005625 	.word	0x00005625
    5a4c:	4808      	ldr	r0, [pc, #32]	; (5a70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x484>)
    5a4e:	b510      	push	{r4, lr}
    5a50:	7800      	ldrb	r0, [r0, #0]
    5a52:	2802      	cmp	r0, #2
    5a54:	d004      	beq.n	5a60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x474>
    5a56:	f240 211e 	movw	r1, #542	; 0x21e
    5a5a:	2027      	movs	r0, #39	; 0x27
    5a5c:	f7fe fd86 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a60:	4904      	ldr	r1, [pc, #16]	; (5a74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x488>)
    5a62:	2001      	movs	r0, #1
    5a64:	7308      	strb	r0, [r1, #12]
    5a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5a6a:	f7ff bfc9 	b.w	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5a6e:	0000      	.short	0x0000
    5a70:	200000d4 	.word	0x200000d4
    5a74:	20000d2a 	.word	0x20000d2a
    5a78:	4b0c      	ldr	r3, [pc, #48]	; (5aac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>)
    5a7a:	b430      	push	{r4, r5}
    5a7c:	79db      	ldrb	r3, [r3, #7]
    5a7e:	b93a      	cbnz	r2, 5a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    5a80:	2bff      	cmp	r3, #255	; 0xff
    5a82:	d105      	bne.n	5a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    5a84:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5a88:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5a8c:	42a2      	cmp	r2, r4
    5a8e:	d00a      	beq.n	5aa6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ba>
    5a90:	b129      	cbz	r1, 5a9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b2>
    5a92:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5a96:	bc30      	pop	{r4, r5}
    5a98:	4618      	mov	r0, r3
    5a9a:	f005 bb75 	b.w	b188 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    5a9e:	23ff      	movs	r3, #255	; 0xff
    5aa0:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5aa4:	e7f7      	b.n	5a96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4aa>
    5aa6:	bc30      	pop	{r4, r5}
    5aa8:	4770      	bx	lr
    5aaa:	0000      	.short	0x0000
    5aac:	200000d4 	.word	0x200000d4
    5ab0:	b570      	push	{r4, r5, r6, lr}
    5ab2:	4606      	mov	r6, r0
    5ab4:	f7ff fdd0 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ab8:	4a1b      	ldr	r2, [pc, #108]	; (5b28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>)
    5aba:	4604      	mov	r4, r0
    5abc:	2501      	movs	r5, #1
    5abe:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5ac0:	7808      	ldrb	r0, [r1, #0]
    5ac2:	f000 0003 	and.w	r0, r0, #3
    5ac6:	2801      	cmp	r0, #1
    5ac8:	d00c      	beq.n	5ae4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>
    5aca:	2802      	cmp	r0, #2
    5acc:	d00a      	beq.n	5ae4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>
    5ace:	2803      	cmp	r0, #3
    5ad0:	d121      	bne.n	5b16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5ad2:	7225      	strb	r5, [r4, #8]
    5ad4:	89d0      	ldrh	r0, [r2, #14]
    5ad6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    5ada:	81d0      	strh	r0, [r2, #14]
    5adc:	2001      	movs	r0, #1
    5ade:	f7ff fdad 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5ae2:	e018      	b.n	5b16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5ae4:	7848      	ldrb	r0, [r1, #1]
    5ae6:	b1b0      	cbz	r0, 5b16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5ae8:	89d1      	ldrh	r1, [r2, #14]
    5aea:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    5aee:	81d1      	strh	r1, [r2, #14]
    5af0:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5af2:	2900      	cmp	r1, #0
    5af4:	d009      	beq.n	5b0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51e>
    5af6:	28fb      	cmp	r0, #251	; 0xfb
    5af8:	d808      	bhi.n	5b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x520>
    5afa:	7990      	ldrb	r0, [r2, #6]
    5afc:	b120      	cbz	r0, 5b08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    5afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b02:	2020      	movs	r0, #32
    5b04:	f7ff bdae 	b.w	5664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5b08:	7035      	strb	r5, [r6, #0]
    5b0a:	bd70      	pop	{r4, r5, r6, pc}
    5b0c:	7950      	ldrb	r0, [r2, #5]
    5b0e:	f040 0010 	orr.w	r0, r0, #16
    5b12:	7150      	strb	r0, [r2, #5]
    5b14:	bd70      	pop	{r4, r5, r6, pc}
    5b16:	7c20      	ldrb	r0, [r4, #16]
    5b18:	2801      	cmp	r0, #1
    5b1a:	d001      	beq.n	5b20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x534>
    5b1c:	7425      	strb	r5, [r4, #16]
    5b1e:	bd70      	pop	{r4, r5, r6, pc}
    5b20:	2000      	movs	r0, #0
    5b22:	7420      	strb	r0, [r4, #16]
    5b24:	bd70      	pop	{r4, r5, r6, pc}
    5b26:	0000      	.short	0x0000
    5b28:	200000d4 	.word	0x200000d4
    5b2c:	b570      	push	{r4, r5, r6, lr}
    5b2e:	4605      	mov	r5, r0
    5b30:	f7ff fd92 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5b34:	4604      	mov	r4, r0
    5b36:	7b80      	ldrb	r0, [r0, #14]
    5b38:	2800      	cmp	r0, #0
    5b3a:	d02d      	beq.n	5b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ac>
    5b3c:	2802      	cmp	r0, #2
    5b3e:	d10c      	bne.n	5b5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56e>
    5b40:	481b      	ldr	r0, [pc, #108]	; (5bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c4>)
    5b42:	4629      	mov	r1, r5
    5b44:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5b46:	f007 f9ff 	bl	cf48 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5b4a:	b330      	cbz	r0, 5b9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ae>
    5b4c:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5b50:	1c40      	adds	r0, r0, #1
    5b52:	f141 0100 	adc.w	r1, r1, #0
    5b56:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5b5a:	2500      	movs	r5, #0
    5b5c:	73a5      	strb	r5, [r4, #14]
    5b5e:	7aa0      	ldrb	r0, [r4, #10]
    5b60:	b120      	cbz	r0, 5b6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>
    5b62:	72a5      	strb	r5, [r4, #10]
    5b64:	2100      	movs	r1, #0
    5b66:	2010      	movs	r0, #16
    5b68:	f7ff fd68 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5b6c:	7a60      	ldrb	r0, [r4, #9]
    5b6e:	b170      	cbz	r0, 5b8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a2>
    5b70:	7265      	strb	r5, [r4, #9]
    5b72:	f7ff fb21 	bl	51b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5b76:	b198      	cbz	r0, 5ba0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    5b78:	2100      	movs	r1, #0
    5b7a:	2008      	movs	r0, #8
    5b7c:	f7ff fd5e 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5b80:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5b84:	1c40      	adds	r0, r0, #1
    5b86:	f141 0100 	adc.w	r1, r1, #0
    5b8a:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5b8e:	7be0      	ldrb	r0, [r4, #15]
    5b90:	2801      	cmp	r0, #1
    5b92:	d00a      	beq.n	5baa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5b94:	2001      	movs	r0, #1
    5b96:	73e0      	strb	r0, [r4, #15]
    5b98:	bd70      	pop	{r4, r5, r6, pc}
    5b9a:	f240 31b9 	movw	r1, #953	; 0x3b9
    5b9e:	e001      	b.n	5ba4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    5ba0:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5ba4:	2027      	movs	r0, #39	; 0x27
    5ba6:	f7fe fce1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5baa:	73e5      	strb	r5, [r4, #15]
    5bac:	bd70      	pop	{r4, r5, r6, pc}
    5bae:	0000      	.short	0x0000
    5bb0:	200000d4 	.word	0x200000d4
    5bb4:	4803      	ldr	r0, [pc, #12]	; (5bc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>)
    5bb6:	7800      	ldrb	r0, [r0, #0]
    5bb8:	2800      	cmp	r0, #0
    5bba:	d001      	beq.n	5bc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>
    5bbc:	f7ff bf20 	b.w	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5bc0:	4770      	bx	lr
    5bc2:	0000      	.short	0x0000
    5bc4:	200000d4 	.word	0x200000d4
    5bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bcc:	4606      	mov	r6, r0
    5bce:	f7ff fd3d 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5bd2:	4680      	mov	r8, r0
    5bd4:	f7ff fd40 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5bd8:	4c16      	ldr	r4, [pc, #88]	; (5c34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x648>)
    5bda:	4605      	mov	r5, r0
    5bdc:	4632      	mov	r2, r6
    5bde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5be0:	6260      	str	r0, [r4, #36]	; 0x24
    5be2:	2101      	movs	r1, #1
    5be4:	4640      	mov	r0, r8
    5be6:	f7ff ff47 	bl	5a78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48c>
    5bea:	7ee8      	ldrb	r0, [r5, #27]
    5bec:	2700      	movs	r7, #0
    5bee:	b170      	cbz	r0, 5c0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x622>
    5bf0:	4811      	ldr	r0, [pc, #68]	; (5c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64c>)
    5bf2:	f005 fa0f 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5bf6:	4811      	ldr	r0, [pc, #68]	; (5c3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x650>)
    5bf8:	2101      	movs	r1, #1
    5bfa:	7601      	strb	r1, [r0, #24]
    5bfc:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    5c00:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5c04:	490c      	ldr	r1, [pc, #48]	; (5c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64c>)
    5c06:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c08:	f004 fe76 	bl	a8f8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    5c0c:	e004      	b.n	5c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62c>
    5c0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c10:	f005 fa00 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5c14:	f004 feb2 	bl	a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5c18:	b916      	cbnz	r6, 5c20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x634>
    5c1a:	4638      	mov	r0, r7
    5c1c:	f005 f8b0 	bl	ad80 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5c20:	2100      	movs	r1, #0
    5c22:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5c26:	4608      	mov	r0, r1
    5c28:	f005 fa6c 	bl	b104 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5c2c:	2002      	movs	r0, #2
    5c2e:	7020      	strb	r0, [r4, #0]
    5c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c34:	200000d4 	.word	0x200000d4
    5c38:	20000bd8 	.word	0x20000bd8
    5c3c:	20000ce0 	.word	0x20000ce0
    5c40:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5c44:	4604      	mov	r4, r0
    5c46:	f7ff fd07 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5c4a:	4605      	mov	r5, r0
    5c4c:	f7ff fcfe 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5c50:	2700      	movs	r7, #0
    5c52:	4606      	mov	r6, r0
    5c54:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    5c58:	f88d 7000 	strb.w	r7, [sp]
    5c5c:	4622      	mov	r2, r4
    5c5e:	4639      	mov	r1, r7
    5c60:	f7ff ff0a 	bl	5a78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48c>
    5c64:	7ba8      	ldrb	r0, [r5, #14]
    5c66:	f04f 0801 	mov.w	r8, #1
    5c6a:	f1a9 0420 	sub.w	r4, r9, #32
    5c6e:	b140      	cbz	r0, 5c82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x696>
    5c70:	2801      	cmp	r0, #1
    5c72:	d020      	beq.n	5cb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    5c74:	2802      	cmp	r0, #2
    5c76:	d02f      	beq.n	5cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    5c78:	2803      	cmp	r0, #3
    5c7a:	d03b      	beq.n	5cf4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x708>
    5c7c:	f240 21d5 	movw	r1, #725	; 0x2d5
    5c80:	e057      	b.n	5d32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    5c82:	7a20      	ldrb	r0, [r4, #8]
    5c84:	2150      	movs	r1, #80	; 0x50
    5c86:	f8ad 0004 	strh.w	r0, [sp, #4]
    5c8a:	5388      	strh	r0, [r1, r6]
    5c8c:	4648      	mov	r0, r9
    5c8e:	f7ff fabd 	bl	520c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5c92:	b130      	cbz	r0, 5ca2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b6>
    5c94:	2080      	movs	r0, #128	; 0x80
    5c96:	6a21      	ldr	r1, [r4, #32]
    5c98:	f7ff fcd0 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5c9c:	f885 8009 	strb.w	r8, [r5, #9]
    5ca0:	e02c      	b.n	5cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5ca2:	466a      	mov	r2, sp
    5ca4:	a901      	add	r1, sp, #4
    5ca6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5ca8:	f007 fdd2 	bl	d850 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5cac:	6220      	str	r0, [r4, #32]
    5cae:	b110      	cbz	r0, 5cb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    5cb0:	f895 1053 	ldrb.w	r1, [r5, #83]	; 0x53
    5cb4:	b111      	cbz	r1, 5cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    5cb6:	4842      	ldr	r0, [pc, #264]	; (5dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d4>)
    5cb8:	6220      	str	r0, [r4, #32]
    5cba:	e01f      	b.n	5cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5cbc:	f89d 1000 	ldrb.w	r1, [sp]
    5cc0:	b921      	cbnz	r1, 5ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e0>
    5cc2:	8007      	strh	r7, [r0, #0]
    5cc4:	7087      	strb	r7, [r0, #2]
    5cc6:	2101      	movs	r1, #1
    5cc8:	f008 f943 	bl	df52 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5ccc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5cd0:	6a20      	ldr	r0, [r4, #32]
    5cd2:	f008 f8c6 	bl	de62 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    5cd6:	e011      	b.n	5cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5cd8:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    5cdc:	f8ad 0004 	strh.w	r0, [sp, #4]
    5ce0:	466a      	mov	r2, sp
    5ce2:	a901      	add	r1, sp, #4
    5ce4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5ce6:	f007 fdb3 	bl	d850 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5cea:	6220      	str	r0, [r4, #32]
    5cec:	b930      	cbnz	r0, 5cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5cee:	f240 21bf 	movw	r1, #703	; 0x2bf
    5cf2:	e01e      	b.n	5d32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    5cf4:	4648      	mov	r0, r9
    5cf6:	f7ff fa89 	bl	520c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5cfa:	b1c0      	cbz	r0, 5d2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    5cfc:	6a20      	ldr	r0, [r4, #32]
    5cfe:	2308      	movs	r3, #8
    5d00:	7801      	ldrb	r1, [r0, #0]
    5d02:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    5d06:	7001      	strb	r1, [r0, #0]
    5d08:	7bea      	ldrb	r2, [r5, #15]
    5d0a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5d0e:	4311      	orrs	r1, r2
    5d10:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    5d14:	7001      	strb	r1, [r0, #0]
    5d16:	7c2a      	ldrb	r2, [r5, #16]
    5d18:	2304      	movs	r3, #4
    5d1a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5d1e:	4311      	orrs	r1, r2
    5d20:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5d24:	7001      	strb	r1, [r0, #0]
    5d26:	43c9      	mvns	r1, r1
    5d28:	0789      	lsls	r1, r1, #30
    5d2a:	d005      	beq.n	5d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74c>
    5d2c:	e007      	b.n	5d3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5d2e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
    5d32:	2027      	movs	r0, #39	; 0x27
    5d34:	f7fe fc1a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d38:	78c0      	ldrb	r0, [r0, #3]
    5d3a:	2802      	cmp	r0, #2
    5d3c:	d00f      	beq.n	5d5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x772>
    5d3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5d40:	f007 fa00 	bl	d144 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5d44:	b108      	cbz	r0, 5d4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    5d46:	2101      	movs	r1, #1
    5d48:	e00a      	b.n	5d60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x774>
    5d4a:	6a20      	ldr	r0, [r4, #32]
    5d4c:	7800      	ldrb	r0, [r0, #0]
    5d4e:	43c0      	mvns	r0, r0
    5d50:	0780      	lsls	r0, r0, #30
    5d52:	d004      	beq.n	5d5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x772>
    5d54:	f7ff fa18 	bl	5188 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5d58:	f080 0101 	eor.w	r1, r0, #1
    5d5c:	e000      	b.n	5d60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x774>
    5d5e:	2100      	movs	r1, #0
    5d60:	6a20      	ldr	r0, [r4, #32]
    5d62:	7802      	ldrb	r2, [r0, #0]
    5d64:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5d68:	7001      	strb	r1, [r0, #0]
    5d6a:	7ea9      	ldrb	r1, [r5, #26]
    5d6c:	b181      	cbz	r1, 5d90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    5d6e:	7841      	ldrb	r1, [r0, #1]
    5d70:	b171      	cbz	r1, 5d90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    5d72:	4814      	ldr	r0, [pc, #80]	; (5dc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d8>)
    5d74:	f005 f94e 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5d78:	4811      	ldr	r0, [pc, #68]	; (5dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d4>)
    5d7a:	3828      	subs	r0, #40	; 0x28
    5d7c:	7607      	strb	r7, [r0, #24]
    5d7e:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    5d82:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5d86:	480f      	ldr	r0, [pc, #60]	; (5dc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d8>)
    5d88:	6a21      	ldr	r1, [r4, #32]
    5d8a:	f004 fdb5 	bl	a8f8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    5d8e:	e003      	b.n	5d98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>
    5d90:	f005 f940 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5d94:	f004 fdf2 	bl	a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5d98:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    5d9c:	2101      	movs	r1, #1
    5d9e:	2000      	movs	r0, #0
    5da0:	f005 f9b0 	bl	b104 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5da4:	f884 8004 	strb.w	r8, [r4, #4]
    5da8:	6a21      	ldr	r1, [r4, #32]
    5daa:	880a      	ldrh	r2, [r1, #0]
    5dac:	8222      	strh	r2, [r4, #16]
    5dae:	7889      	ldrb	r1, [r1, #2]
    5db0:	74a1      	strb	r1, [r4, #18]
    5db2:	f884 8000 	strb.w	r8, [r4]
    5db6:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5dba:	0000      	.short	0x0000
    5dbc:	200000f4 	.word	0x200000f4
    5dc0:	20000d08 	.word	0x20000d08
    5dc4:	20000bd8 	.word	0x20000bd8
    5dc8:	00005a4d 	.word	0x00005a4d
    5dcc:	00005789 	.word	0x00005789
    5dd0:	00005949 	.word	0x00005949
    5dd4:	00005bb5 	.word	0x00005bb5

00005dd8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5dd8:	4800      	ldr	r0, [pc, #0]	; (5ddc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5dda:	4770      	bx	lr
    5ddc:	20001699 	.word	0x20001699

00005de0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5de0:	4904      	ldr	r1, [pc, #16]	; (5df4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5de2:	788a      	ldrb	r2, [r1, #2]
    5de4:	4282      	cmp	r2, r0
    5de6:	d903      	bls.n	5df0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5de8:	4408      	add	r0, r1
    5dea:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5dee:	4770      	bx	lr
    5df0:	2000      	movs	r0, #0
    5df2:	4770      	bx	lr
    5df4:	200014c6 	.word	0x200014c6

00005df8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5df8:	4904      	ldr	r1, [pc, #16]	; (5e0c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5dfa:	788a      	ldrb	r2, [r1, #2]
    5dfc:	4282      	cmp	r2, r0
    5dfe:	d903      	bls.n	5e08 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5e00:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5e04:	3083      	adds	r0, #131	; 0x83
    5e06:	4770      	bx	lr
    5e08:	2000      	movs	r0, #0
    5e0a:	4770      	bx	lr
    5e0c:	200014c6 	.word	0x200014c6

00005e10 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5e10:	4a05      	ldr	r2, [pc, #20]	; (5e28 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5e12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5e16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5e1a:	6802      	ldr	r2, [r0, #0]
    5e1c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5e20:	8880      	ldrh	r0, [r0, #4]
    5e22:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5e26:	4770      	bx	lr
    5e28:	200014c6 	.word	0x200014c6

00005e2c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5e2c:	4904      	ldr	r1, [pc, #16]	; (5e40 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5e2e:	788a      	ldrb	r2, [r1, #2]
    5e30:	4282      	cmp	r2, r0
    5e32:	d903      	bls.n	5e3c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5e34:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5e38:	1cc0      	adds	r0, r0, #3
    5e3a:	4770      	bx	lr
    5e3c:	2000      	movs	r0, #0
    5e3e:	4770      	bx	lr
    5e40:	200014c6 	.word	0x200014c6

00005e44 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5e44:	b510      	push	{r4, lr}
    5e46:	f240 12d3 	movw	r2, #467	; 0x1d3
    5e4a:	2100      	movs	r1, #0
    5e4c:	4808      	ldr	r0, [pc, #32]	; (5e70 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5e4e:	f006 fb9e 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e52:	2208      	movs	r2, #8
    5e54:	21ff      	movs	r1, #255	; 0xff
    5e56:	4807      	ldr	r0, [pc, #28]	; (5e74 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e58:	f006 fb99 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e5c:	4805      	ldr	r0, [pc, #20]	; (5e74 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e5e:	2100      	movs	r1, #0
    5e60:	1f00      	subs	r0, r0, #4
    5e62:	7001      	strb	r1, [r0, #0]
    5e64:	7041      	strb	r1, [r0, #1]
    5e66:	f44f 7161 	mov.w	r1, #900	; 0x384
    5e6a:	8041      	strh	r1, [r0, #2]
    5e6c:	bd10      	pop	{r4, pc}
    5e6e:	0000      	.short	0x0000
    5e70:	200014c6 	.word	0x200014c6
    5e74:	2000034c 	.word	0x2000034c

00005e78 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5e78:	4b0b      	ldr	r3, [pc, #44]	; (5ea8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5e7a:	b510      	push	{r4, lr}
    5e7c:	789c      	ldrb	r4, [r3, #2]
    5e7e:	4284      	cmp	r4, r0
    5e80:	d90f      	bls.n	5ea2 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5e82:	4418      	add	r0, r3
    5e84:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5e88:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5e8c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5e90:	700b      	strb	r3, [r1, #0]
    5e92:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5e96:	6011      	str	r1, [r2, #0]
    5e98:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5e9c:	8090      	strh	r0, [r2, #4]
    5e9e:	2001      	movs	r0, #1
    5ea0:	bd10      	pop	{r4, pc}
    5ea2:	2000      	movs	r0, #0
    5ea4:	bd10      	pop	{r4, pc}
    5ea6:	0000      	.short	0x0000
    5ea8:	200014c6 	.word	0x200014c6

00005eac <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5eac:	4907      	ldr	r1, [pc, #28]	; (5ecc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5eae:	788a      	ldrb	r2, [r1, #2]
    5eb0:	4282      	cmp	r2, r0
    5eb2:	d909      	bls.n	5ec8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5eb4:	4408      	add	r0, r1
    5eb6:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5eba:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5ebe:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5ec2:	f000 0001 	and.w	r0, r0, #1
    5ec6:	4770      	bx	lr
    5ec8:	2000      	movs	r0, #0
    5eca:	4770      	bx	lr
    5ecc:	200014c6 	.word	0x200014c6

00005ed0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5ed0:	4801      	ldr	r0, [pc, #4]	; (5ed8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5ed2:	8840      	ldrh	r0, [r0, #2]
    5ed4:	4770      	bx	lr
    5ed6:	0000      	.short	0x0000
    5ed8:	20000348 	.word	0x20000348

00005edc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5edc:	4905      	ldr	r1, [pc, #20]	; (5ef4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    5ede:	788a      	ldrb	r2, [r1, #2]
    5ee0:	4282      	cmp	r2, r0
    5ee2:	d903      	bls.n	5eec <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5ee4:	4408      	add	r0, r1
    5ee6:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5eea:	b108      	cbz	r0, 5ef0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    5eec:	2000      	movs	r0, #0
    5eee:	4770      	bx	lr
    5ef0:	2001      	movs	r0, #1
    5ef2:	4770      	bx	lr
    5ef4:	200014c6 	.word	0x200014c6

00005ef8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5ef8:	b570      	push	{r4, r5, r6, lr}
    5efa:	460d      	mov	r5, r1
    5efc:	4606      	mov	r6, r0
    5efe:	f000 f8c1 	bl	6084 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5f02:	4c10      	ldr	r4, [pc, #64]	; (5f44 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5f04:	2810      	cmp	r0, #16
    5f06:	d007      	beq.n	5f18 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5f08:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5f0c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5f10:	07c9      	lsls	r1, r1, #31
    5f12:	d001      	beq.n	5f18 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5f14:	2001      	movs	r0, #1
    5f16:	bd70      	pop	{r4, r5, r6, pc}
    5f18:	7861      	ldrb	r1, [r4, #1]
    5f1a:	2908      	cmp	r1, #8
    5f1c:	d210      	bcs.n	5f40 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5f1e:	2810      	cmp	r0, #16
    5f20:	d008      	beq.n	5f34 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5f22:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5f26:	2101      	movs	r1, #1
    5f28:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5f2c:	7860      	ldrb	r0, [r4, #1]
    5f2e:	1c40      	adds	r0, r0, #1
    5f30:	7060      	strb	r0, [r4, #1]
    5f32:	e7ef      	b.n	5f14 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5f34:	2201      	movs	r2, #1
    5f36:	4629      	mov	r1, r5
    5f38:	4630      	mov	r0, r6
    5f3a:	f000 f887 	bl	604c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5f3e:	e7f5      	b.n	5f2c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5f40:	2000      	movs	r0, #0
    5f42:	bd70      	pop	{r4, r5, r6, pc}
    5f44:	200014c6 	.word	0x200014c6

00005f48 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5f48:	b570      	push	{r4, r5, r6, lr}
    5f4a:	4d0b      	ldr	r5, [pc, #44]	; (5f78 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5f4c:	7828      	ldrb	r0, [r5, #0]
    5f4e:	1e40      	subs	r0, r0, #1
    5f50:	b244      	sxtb	r4, r0
    5f52:	e00a      	b.n	5f6a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5f54:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5f58:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5f5c:	07c0      	lsls	r0, r0, #31
    5f5e:	d002      	beq.n	5f66 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5f60:	b2e0      	uxtb	r0, r4
    5f62:	f000 f8ed 	bl	6140 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    5f66:	1e64      	subs	r4, r4, #1
    5f68:	b264      	sxtb	r4, r4
    5f6a:	2c00      	cmp	r4, #0
    5f6c:	daf2      	bge.n	5f54 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5f6e:	4903      	ldr	r1, [pc, #12]	; (5f7c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5f70:	2000      	movs	r0, #0
    5f72:	7048      	strb	r0, [r1, #1]
    5f74:	bd70      	pop	{r4, r5, r6, pc}
    5f76:	0000      	.short	0x0000
    5f78:	200014c6 	.word	0x200014c6
    5f7c:	20000348 	.word	0x20000348

00005f80 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f84:	2400      	movs	r4, #0
    5f86:	4625      	mov	r5, r4
    5f88:	4e18      	ldr	r6, [pc, #96]	; (5fec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5f8a:	e029      	b.n	5fe0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5f8c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5f90:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5f94:	07c0      	lsls	r0, r0, #31
    5f96:	d021      	beq.n	5fdc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5f98:	4628      	mov	r0, r5
    5f9a:	f000 f843 	bl	6024 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5f9e:	4603      	mov	r3, r0
    5fa0:	f7ff ff44 	bl	5e2c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5fa4:	4601      	mov	r1, r0
    5fa6:	2000      	movs	r0, #0
    5fa8:	2b10      	cmp	r3, #16
    5faa:	d009      	beq.n	5fc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5fac:	18f2      	adds	r2, r6, r3
    5fae:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5fb2:	f1bc 0f01 	cmp.w	ip, #1
    5fb6:	d002      	beq.n	5fbe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5fb8:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5fbc:	b102      	cbz	r2, 5fc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5fbe:	2001      	movs	r0, #1
    5fc0:	1e40      	subs	r0, r0, #1
    5fc2:	4201      	tst	r1, r0
    5fc4:	d10a      	bne.n	5fdc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5fc6:	480a      	ldr	r0, [pc, #40]	; (5ff0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5fc8:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5fcc:	5503      	strb	r3, [r0, r4]
    5fce:	4620      	mov	r0, r4
    5fd0:	1c64      	adds	r4, r4, #1
    5fd2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5fd6:	b2e4      	uxtb	r4, r4
    5fd8:	f005 f9b8 	bl	b34c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5fdc:	1c6d      	adds	r5, r5, #1
    5fde:	b2ed      	uxtb	r5, r5
    5fe0:	7830      	ldrb	r0, [r6, #0]
    5fe2:	42a8      	cmp	r0, r5
    5fe4:	d8d2      	bhi.n	5f8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fea:	0000      	.short	0x0000
    5fec:	200014c6 	.word	0x200014c6
    5ff0:	2000034c 	.word	0x2000034c
    5ff4:	4602      	mov	r2, r0
    5ff6:	4809      	ldr	r0, [pc, #36]	; (601c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5ff8:	b510      	push	{r4, lr}
    5ffa:	7800      	ldrb	r0, [r0, #0]
    5ffc:	460b      	mov	r3, r1
    5ffe:	b158      	cbz	r0, 6018 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6000:	4807      	ldr	r0, [pc, #28]	; (6020 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6002:	7881      	ldrb	r1, [r0, #2]
    6004:	b141      	cbz	r1, 6018 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6006:	b10b      	cbz	r3, 600c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6008:	1cc0      	adds	r0, r0, #3
    600a:	e001      	b.n	6010 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    600c:	4804      	ldr	r0, [pc, #16]	; (6020 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    600e:	3083      	adds	r0, #131	; 0x83
    6010:	f004 fb7a 	bl	a708 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6014:	2001      	movs	r0, #1
    6016:	bd10      	pop	{r4, pc}
    6018:	2000      	movs	r0, #0
    601a:	bd10      	pop	{r4, pc}
    601c:	20000348 	.word	0x20000348
    6020:	200014c6 	.word	0x200014c6
    6024:	4908      	ldr	r1, [pc, #32]	; (6048 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    6026:	b510      	push	{r4, lr}
    6028:	4603      	mov	r3, r0
    602a:	2000      	movs	r0, #0
    602c:	788a      	ldrb	r2, [r1, #2]
    602e:	e006      	b.n	603e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6030:	180c      	adds	r4, r1, r0
    6032:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    6036:	429c      	cmp	r4, r3
    6038:	d004      	beq.n	6044 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    603a:	1c40      	adds	r0, r0, #1
    603c:	b2c0      	uxtb	r0, r0
    603e:	4282      	cmp	r2, r0
    6040:	d8f6      	bhi.n	6030 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    6042:	2010      	movs	r0, #16
    6044:	bd10      	pop	{r4, pc}
    6046:	0000      	.short	0x0000
    6048:	200014c6 	.word	0x200014c6
    604c:	b570      	push	{r4, r5, r6, lr}
    604e:	4b0c      	ldr	r3, [pc, #48]	; (6080 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6050:	4604      	mov	r4, r0
    6052:	7818      	ldrb	r0, [r3, #0]
    6054:	1c45      	adds	r5, r0, #1
    6056:	701d      	strb	r5, [r3, #0]
    6058:	2810      	cmp	r0, #16
    605a:	d303      	bcc.n	6064 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    605c:	2146      	movs	r1, #70	; 0x46
    605e:	2028      	movs	r0, #40	; 0x28
    6060:	f7fe fa84 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6064:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6068:	680d      	ldr	r5, [r1, #0]
    606a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    606e:	8889      	ldrh	r1, [r1, #4]
    6070:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6074:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6078:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    607c:	bd70      	pop	{r4, r5, r6, pc}
    607e:	0000      	.short	0x0000
    6080:	200014c6 	.word	0x200014c6
    6084:	b5f0      	push	{r4, r5, r6, r7, lr}
    6086:	4c1a      	ldr	r4, [pc, #104]	; (60f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    6088:	4603      	mov	r3, r0
    608a:	2000      	movs	r0, #0
    608c:	7825      	ldrb	r5, [r4, #0]
    608e:	e02a      	b.n	60e6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    6090:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6094:	780f      	ldrb	r7, [r1, #0]
    6096:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    609a:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    609e:	ea87 070c 	eor.w	r7, r7, ip
    60a2:	405e      	eors	r6, r3
    60a4:	443e      	add	r6, r7
    60a6:	784f      	ldrb	r7, [r1, #1]
    60a8:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    60ac:	ea87 070c 	eor.w	r7, r7, ip
    60b0:	443e      	add	r6, r7
    60b2:	788f      	ldrb	r7, [r1, #2]
    60b4:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    60b8:	ea87 070c 	eor.w	r7, r7, ip
    60bc:	443e      	add	r6, r7
    60be:	78cf      	ldrb	r7, [r1, #3]
    60c0:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    60c4:	ea87 070c 	eor.w	r7, r7, ip
    60c8:	443e      	add	r6, r7
    60ca:	790f      	ldrb	r7, [r1, #4]
    60cc:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    60d0:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    60d4:	ea87 070c 	eor.w	r7, r7, ip
    60d8:	443e      	add	r6, r7
    60da:	794f      	ldrb	r7, [r1, #5]
    60dc:	4057      	eors	r7, r2
    60de:	42f7      	cmn	r7, r6
    60e0:	d004      	beq.n	60ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    60e2:	1c40      	adds	r0, r0, #1
    60e4:	b2c0      	uxtb	r0, r0
    60e6:	4285      	cmp	r5, r0
    60e8:	d8d2      	bhi.n	6090 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    60ea:	2010      	movs	r0, #16
    60ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60ee:	0000      	.short	0x0000
    60f0:	200014c6 	.word	0x200014c6
    60f4:	b570      	push	{r4, r5, r6, lr}
    60f6:	4605      	mov	r5, r0
    60f8:	f7ff ff94 	bl	6024 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    60fc:	2810      	cmp	r0, #16
    60fe:	d11c      	bne.n	613a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6100:	4c0e      	ldr	r4, [pc, #56]	; (613c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    6102:	7820      	ldrb	r0, [r4, #0]
    6104:	1e40      	subs	r0, r0, #1
    6106:	b2c0      	uxtb	r0, r0
    6108:	7020      	strb	r0, [r4, #0]
    610a:	42a8      	cmp	r0, r5
    610c:	d015      	beq.n	613a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    610e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6112:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6116:	f502 7080 	add.w	r0, r2, #256	; 0x100
    611a:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    611e:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6122:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6126:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    612a:	7820      	ldrb	r0, [r4, #0]
    612c:	f7ff ff7a 	bl	6024 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6130:	2810      	cmp	r0, #16
    6132:	d002      	beq.n	613a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6134:	4420      	add	r0, r4
    6136:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    613a:	bd70      	pop	{r4, r5, r6, pc}
    613c:	200014c6 	.word	0x200014c6
    6140:	4905      	ldr	r1, [pc, #20]	; (6158 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    6142:	784a      	ldrb	r2, [r1, #1]
    6144:	1e52      	subs	r2, r2, #1
    6146:	704a      	strb	r2, [r1, #1]
    6148:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    614c:	2200      	movs	r2, #0
    614e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6152:	f7ff bfcf 	b.w	60f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    6156:	0000      	.short	0x0000
    6158:	200014c6 	.word	0x200014c6

0000615c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6160:	4604      	mov	r4, r0
    6162:	f100 0580 	add.w	r5, r0, #128	; 0x80
    6166:	f04f 0901 	mov.w	r9, #1
    616a:	b171      	cbz	r1, 618a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    616c:	f104 079e 	add.w	r7, r4, #158	; 0x9e
    6170:	1e7e      	subs	r6, r7, #1
    6172:	2901      	cmp	r1, #1
    6174:	d020      	beq.n	61b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    6176:	2902      	cmp	r1, #2
    6178:	d045      	beq.n	6206 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    617a:	2903      	cmp	r1, #3
    617c:	d11a      	bne.n	61b4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    617e:	4639      	mov	r1, r7
    6180:	4630      	mov	r0, r6
    6182:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6186:	f007 bd68 	b.w	dc5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    618a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
    618e:	2100      	movs	r1, #0
    6190:	f006 f9fd 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6194:	f885 901d 	strb.w	r9, [r5, #29]
    6198:	4820      	ldr	r0, [pc, #128]	; (621c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    619a:	6668      	str	r0, [r5, #100]	; 0x64
    619c:	2007      	movs	r0, #7
    619e:	66a8      	str	r0, [r5, #104]	; 0x68
    61a0:	f814 0fe4 	ldrb.w	r0, [r4, #228]!
    61a4:	f020 0004 	bic.w	r0, r0, #4
    61a8:	7020      	strb	r0, [r4, #0]
    61aa:	20fe      	movs	r0, #254	; 0xfe
    61ac:	f885 009c 	strb.w	r0, [r5, #156]	; 0x9c
    61b0:	207f      	movs	r0, #127	; 0x7f
    61b2:	7468      	strb	r0, [r5, #17]
    61b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61b8:	f04f 0800 	mov.w	r8, #0
    61bc:	f8a4 8226 	strh.w	r8, [r4, #550]	; 0x226
    61c0:	f884 821b 	strb.w	r8, [r4, #539]	; 0x21b
    61c4:	6921      	ldr	r1, [r4, #16]
    61c6:	4816      	ldr	r0, [pc, #88]	; (6220 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>)
    61c8:	460a      	mov	r2, r1
    61ca:	4408      	add	r0, r1
    61cc:	fbb0 f0f1 	udiv	r0, r0, r1
    61d0:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    61d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    61d8:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    61dc:	8b63      	ldrh	r3, [r4, #26]
    61de:	4628      	mov	r0, r5
    61e0:	f000 f820 	bl	6224 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    61e4:	4639      	mov	r1, r7
    61e6:	4630      	mov	r0, r6
    61e8:	f007 fd37 	bl	dc5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    61ec:	f006 f931 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    61f0:	b118      	cbz	r0, 61fa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    61f2:	6960      	ldr	r0, [r4, #20]
    61f4:	f000 fb82 	bl	68fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    61f8:	b110      	cbz	r0, 6200 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    61fa:	f884 820c 	strb.w	r8, [r4, #524]	; 0x20c
    61fe:	e7d9      	b.n	61b4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    6200:	f884 920c 	strb.w	r9, [r4, #524]	; 0x20c
    6204:	e7d6      	b.n	61b4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    6206:	6901      	ldr	r1, [r0, #16]
    6208:	f8b4 32ca 	ldrh.w	r3, [r4, #714]	; 0x2ca
    620c:	f8d4 22c4 	ldr.w	r2, [r4, #708]	; 0x2c4
    6210:	4628      	mov	r0, r5
    6212:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6216:	f000 b805 	b.w	6224 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    621a:	0000      	.short	0x0000
    621c:	3004492f 	.word	0x3004492f
    6220:	01c9c37f 	.word	0x01c9c37f
    6224:	b510      	push	{r4, lr}
    6226:	2400      	movs	r4, #0
    6228:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
    622c:	f830 4f48 	ldrh.w	r4, [r0, #72]!
    6230:	434c      	muls	r4, r1
    6232:	fbb4 f4f2 	udiv	r4, r4, r2
    6236:	f820 4910 	strh.w	r4, [r0], #-16
    623a:	f240 2471 	movw	r4, #625	; 0x271
    623e:	4363      	muls	r3, r4
    6240:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6244:	1e5b      	subs	r3, r3, #1
    6246:	fbb3 f3f2 	udiv	r3, r3, r2
    624a:	81c3      	strh	r3, [r0, #14]
    624c:	4b09      	ldr	r3, [pc, #36]	; (6274 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x118>)
    624e:	fbb3 f3f2 	udiv	r3, r3, r2
    6252:	1c5b      	adds	r3, r3, #1
    6254:	8283      	strh	r3, [r0, #20]
    6256:	8903      	ldrh	r3, [r0, #8]
    6258:	4363      	muls	r3, r4
    625a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    625e:	1e5b      	subs	r3, r3, #1
    6260:	fbb3 f3f2 	udiv	r3, r3, r2
    6264:	6043      	str	r3, [r0, #4]
    6266:	6803      	ldr	r3, [r0, #0]
    6268:	434b      	muls	r3, r1
    626a:	fbb3 f1f2 	udiv	r1, r3, r2
    626e:	6001      	str	r1, [r0, #0]
    6270:	bd10      	pop	{r4, pc}
    6272:	0000      	.short	0x0000
    6274:	02625a00 	.word	0x02625a00

00006278 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6278:	b570      	push	{r4, r5, r6, lr}
    627a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    627e:	b28b      	uxth	r3, r1
    6280:	7ac5      	ldrb	r5, [r0, #11]
    6282:	ea83 0102 	eor.w	r1, r3, r2
    6286:	2200      	movs	r2, #0
    6288:	b2cc      	uxtb	r4, r1
    628a:	0a09      	lsrs	r1, r1, #8
    628c:	fa94 f4a4 	rbit	r4, r4
    6290:	fa91 f1a1 	rbit	r1, r1
    6294:	0e24      	lsrs	r4, r4, #24
    6296:	0e09      	lsrs	r1, r1, #24
    6298:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    629c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    62a0:	1c52      	adds	r2, r2, #1
    62a2:	4419      	add	r1, r3
    62a4:	b2d2      	uxtb	r2, r2
    62a6:	b289      	uxth	r1, r1
    62a8:	2a03      	cmp	r2, #3
    62aa:	d3ed      	bcc.n	6288 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    62ac:	4059      	eors	r1, r3
    62ae:	2225      	movs	r2, #37	; 0x25
    62b0:	fbb1 f3f2 	udiv	r3, r1, r2
    62b4:	fb02 1213 	mls	r2, r2, r3, r1
    62b8:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    62bc:	f002 0607 	and.w	r6, r2, #7
    62c0:	785b      	ldrb	r3, [r3, #1]
    62c2:	2401      	movs	r4, #1
    62c4:	fa04 f606 	lsl.w	r6, r4, r6
    62c8:	4233      	tst	r3, r6
    62ca:	d001      	beq.n	62d0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    62cc:	4610      	mov	r0, r2
    62ce:	bd70      	pop	{r4, r5, r6, pc}
    62d0:	434d      	muls	r5, r1
    62d2:	0c29      	lsrs	r1, r5, #16
    62d4:	1c49      	adds	r1, r1, #1
    62d6:	b2c9      	uxtb	r1, r1
    62d8:	2200      	movs	r2, #0
    62da:	1885      	adds	r5, r0, r2
    62dc:	79ab      	ldrb	r3, [r5, #6]
    62de:	428b      	cmp	r3, r1
    62e0:	d312      	bcc.n	6308 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    62e2:	f895 5001 	ldrb.w	r5, [r5, #1]
    62e6:	2300      	movs	r3, #0
    62e8:	fa04 f603 	lsl.w	r6, r4, r3
    62ec:	4235      	tst	r5, r6
    62ee:	d001      	beq.n	62f4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    62f0:	1e49      	subs	r1, r1, #1
    62f2:	b2c9      	uxtb	r1, r1
    62f4:	b121      	cbz	r1, 6300 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    62f6:	1c5b      	adds	r3, r3, #1
    62f8:	b2db      	uxtb	r3, r3
    62fa:	2b08      	cmp	r3, #8
    62fc:	d3f4      	bcc.n	62e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    62fe:	e005      	b.n	630c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6300:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6304:	b2c0      	uxtb	r0, r0
    6306:	bd70      	pop	{r4, r5, r6, pc}
    6308:	1ac9      	subs	r1, r1, r3
    630a:	b2c9      	uxtb	r1, r1
    630c:	1c52      	adds	r2, r2, #1
    630e:	b2d2      	uxtb	r2, r2
    6310:	2a05      	cmp	r2, #5
    6312:	d3e2      	bcc.n	62da <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6314:	21f9      	movs	r1, #249	; 0xf9
    6316:	2046      	movs	r0, #70	; 0x46
    6318:	f7fe f928 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000631c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    631c:	7841      	ldrb	r1, [r0, #1]
    631e:	b141      	cbz	r1, 6332 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    6320:	78c0      	ldrb	r0, [r0, #3]
    6322:	282b      	cmp	r0, #43	; 0x2b
    6324:	d203      	bcs.n	632e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    6326:	4a04      	ldr	r2, [pc, #16]	; (6338 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    6328:	5c10      	ldrb	r0, [r2, r0]
    632a:	4288      	cmp	r0, r1
    632c:	d101      	bne.n	6332 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    632e:	2001      	movs	r0, #1
    6330:	4770      	bx	lr
    6332:	2000      	movs	r0, #0
    6334:	4770      	bx	lr
    6336:	0000      	.short	0x0000
    6338:	00010792 	.word	0x00010792

0000633c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    633c:	b510      	push	{r4, lr}
    633e:	2201      	movs	r2, #1
    6340:	70c1      	strb	r1, [r0, #3]
    6342:	292b      	cmp	r1, #43	; 0x2b
    6344:	d202      	bcs.n	634c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    6346:	4a06      	ldr	r2, [pc, #24]	; (6360 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    6348:	5c52      	ldrb	r2, [r2, r1]
    634a:	e006      	b.n	635a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    634c:	29ff      	cmp	r1, #255	; 0xff
    634e:	d004      	beq.n	635a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    6350:	f44f 618f 	mov.w	r1, #1144	; 0x478
    6354:	202a      	movs	r0, #42	; 0x2a
    6356:	f7fe f909 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    635a:	7042      	strb	r2, [r0, #1]
    635c:	bd10      	pop	{r4, pc}
    635e:	0000      	.short	0x0000
    6360:	00010792 	.word	0x00010792

00006364 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    6364:	4904      	ldr	r1, [pc, #16]	; (6378 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    6366:	7c89      	ldrb	r1, [r1, #18]
    6368:	0749      	lsls	r1, r1, #29
    636a:	d400      	bmi.n	636e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    636c:	b108      	cbz	r0, 6372 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    636e:	2000      	movs	r0, #0
    6370:	4770      	bx	lr
    6372:	2001      	movs	r0, #1
    6374:	4770      	bx	lr
    6376:	0000      	.short	0x0000
    6378:	20001404 	.word	0x20001404

0000637c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    637c:	4803      	ldr	r0, [pc, #12]	; (638c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    637e:	7c80      	ldrb	r0, [r0, #18]
    6380:	0780      	lsls	r0, r0, #30
    6382:	d401      	bmi.n	6388 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    6384:	2001      	movs	r0, #1
    6386:	4770      	bx	lr
    6388:	2000      	movs	r0, #0
    638a:	4770      	bx	lr
    638c:	20001404 	.word	0x20001404

00006390 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    6390:	4803      	ldr	r0, [pc, #12]	; (63a0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    6392:	7c80      	ldrb	r0, [r0, #18]
    6394:	07c0      	lsls	r0, r0, #31
    6396:	d001      	beq.n	639c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    6398:	2000      	movs	r0, #0
    639a:	4770      	bx	lr
    639c:	2001      	movs	r0, #1
    639e:	4770      	bx	lr
    63a0:	20001404 	.word	0x20001404
    63a4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    63a8:	4688      	mov	r8, r1
    63aa:	4699      	mov	r9, r3
    63ac:	4615      	mov	r5, r2
    63ae:	4604      	mov	r4, r0
    63b0:	4669      	mov	r1, sp
    63b2:	f007 fa90 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    63b6:	bbc8      	cbnz	r0, 642c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    63b8:	9e01      	ldr	r6, [sp, #4]
    63ba:	2700      	movs	r7, #0
    63bc:	3680      	adds	r6, #128	; 0x80
    63be:	b17d      	cbz	r5, 63e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    63c0:	4620      	mov	r0, r4
    63c2:	f7fe fce1 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    63c6:	0004      	movs	r4, r0
    63c8:	d00d      	beq.n	63e6 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    63ca:	4629      	mov	r1, r5
    63cc:	f006 fe8c 	bl	d0e8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    63d0:	b118      	cbz	r0, 63da <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    63d2:	4919      	ldr	r1, [pc, #100]	; (6438 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>)
    63d4:	8849      	ldrh	r1, [r1, #2]
    63d6:	42a9      	cmp	r1, r5
    63d8:	d207      	bcs.n	63ea <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    63da:	2000      	movs	r0, #0
    63dc:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    63e0:	2001      	movs	r0, #1
    63e2:	7730      	strb	r0, [r6, #28]
    63e4:	e022      	b.n	642c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    63e6:	2168      	movs	r1, #104	; 0x68
    63e8:	e023      	b.n	6432 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    63ea:	4601      	mov	r1, r0
    63ec:	aa02      	add	r2, sp, #8
    63ee:	4620      	mov	r0, r4
    63f0:	f006 fe73 	bl	d0da <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    63f4:	9802      	ldr	r0, [sp, #8]
    63f6:	8007      	strh	r7, [r0, #0]
    63f8:	7087      	strb	r7, [r0, #2]
    63fa:	7f31      	ldrb	r1, [r6, #28]
    63fc:	b109      	cbz	r1, 6402 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x72>
    63fe:	f04f 0802 	mov.w	r8, #2
    6402:	4641      	mov	r1, r8
    6404:	f007 fda5 	bl	df52 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    6408:	9802      	ldr	r0, [sp, #8]
    640a:	462a      	mov	r2, r5
    640c:	4649      	mov	r1, r9
    640e:	1cc0      	adds	r0, r0, #3
    6410:	f006 f843 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6414:	4620      	mov	r0, r4
    6416:	4629      	mov	r1, r5
    6418:	f006 fe1d 	bl	d056 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    641c:	b140      	cbz	r0, 6430 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa0>
    641e:	4668      	mov	r0, sp
    6420:	f007 fdf2 	bl	e008 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6424:	9801      	ldr	r0, [sp, #4]
    6426:	f8a0 7212 	strh.w	r7, [r0, #530]	; 0x212
    642a:	7737      	strb	r7, [r6, #28]
    642c:	2001      	movs	r0, #1
    642e:	e7d5      	b.n	63dc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    6430:	217d      	movs	r1, #125	; 0x7d
    6432:	202b      	movs	r0, #43	; 0x2b
    6434:	f7fe f89a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6438:	20001404 	.word	0x20001404

0000643c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    643c:	2202      	movs	r2, #2
    643e:	4902      	ldr	r1, [pc, #8]	; (6448 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0xc>)
    6440:	4802      	ldr	r0, [pc, #8]	; (644c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x10>)
    6442:	f000 b805 	b.w	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6446:	0000      	.short	0x0000
    6448:	0000e147 	.word	0x0000e147
    644c:	2000141c 	.word	0x2000141c

00006450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    6450:	b538      	push	{r3, r4, r5, lr}
    6452:	b318      	cbz	r0, 649c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x4c>
    6454:	7a03      	ldrb	r3, [r0, #8]
    6456:	f88d 3000 	strb.w	r3, [sp]
    645a:	9b00      	ldr	r3, [sp, #0]
    645c:	9300      	str	r3, [sp, #0]
    645e:	f89d 3000 	ldrb.w	r3, [sp]
    6462:	2b00      	cmp	r3, #0
    6464:	d126      	bne.n	64b4 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x64>
    6466:	6041      	str	r1, [r0, #4]
    6468:	f100 0108 	add.w	r1, r0, #8
    646c:	700a      	strb	r2, [r1, #0]
    646e:	f3ef 8210 	mrs	r2, PRIMASK
    6472:	b672      	cpsid	i
    6474:	4b10      	ldr	r3, [pc, #64]	; (64b8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x68>)
    6476:	6003      	str	r3, [r0, #0]
    6478:	1f19      	subs	r1, r3, #4
    647a:	684c      	ldr	r4, [r1, #4]
    647c:	7a24      	ldrb	r4, [r4, #8]
    647e:	f88d 4000 	strb.w	r4, [sp]
    6482:	9c00      	ldr	r4, [sp, #0]
    6484:	9400      	str	r4, [sp, #0]
    6486:	f89d 5000 	ldrb.w	r5, [sp]
    648a:	2d01      	cmp	r5, #1
    648c:	d004      	beq.n	6498 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x48>
    648e:	680b      	ldr	r3, [r1, #0]
    6490:	6018      	str	r0, [r3, #0]
    6492:	6008      	str	r0, [r1, #0]
    6494:	b13a      	cbz	r2, 64a6 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x56>
    6496:	e007      	b.n	64a8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x58>
    6498:	600b      	str	r3, [r1, #0]
    649a:	e7f9      	b.n	6490 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    649c:	f44f 6192 	mov.w	r1, #1168	; 0x490
    64a0:	2010      	movs	r0, #16
    64a2:	f7fe f863 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64a6:	b662      	cpsie	i
    64a8:	4804      	ldr	r0, [pc, #16]	; (64bc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x6c>)
    64aa:	7800      	ldrb	r0, [r0, #0]
    64ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    64b0:	f7fd be52 	b.w	4158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    64b4:	bd38      	pop	{r3, r4, r5, pc}
    64b6:	0000      	.short	0x0000
    64b8:	20001434 	.word	0x20001434
    64bc:	20000368 	.word	0x20000368

000064c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    64c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64c4:	4f47      	ldr	r7, [pc, #284]	; (65e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x124>)
    64c6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 65e8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    64ca:	4682      	mov	sl, r0
    64cc:	2600      	movs	r6, #0
    64ce:	6878      	ldr	r0, [r7, #4]
    64d0:	7a00      	ldrb	r0, [r0, #8]
    64d2:	f88d 0000 	strb.w	r0, [sp]
    64d6:	9800      	ldr	r0, [sp, #0]
    64d8:	9000      	str	r0, [sp, #0]
    64da:	f89d 1000 	ldrb.w	r1, [sp]
    64de:	2927      	cmp	r1, #39	; 0x27
    64e0:	d106      	bne.n	64f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    64e2:	f899 1013 	ldrb.w	r1, [r9, #19]
    64e6:	b119      	cbz	r1, 64f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    64e8:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    64ec:	2800      	cmp	r0, #0
    64ee:	d06c      	beq.n	65ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    64f0:	f88d 6000 	strb.w	r6, [sp]
    64f4:	4668      	mov	r0, sp
    64f6:	f000 f8f3 	bl	66e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    64fa:	f89d 1000 	ldrb.w	r1, [sp]
    64fe:	2900      	cmp	r1, #0
    6500:	d1f8      	bne.n	64f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    6502:	2800      	cmp	r0, #0
    6504:	d061      	beq.n	65ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    6506:	4604      	mov	r4, r0
    6508:	7a00      	ldrb	r0, [r0, #8]
    650a:	f88d 0000 	strb.w	r0, [sp]
    650e:	9800      	ldr	r0, [sp, #0]
    6510:	9000      	str	r0, [sp, #0]
    6512:	f89d 5000 	ldrb.w	r5, [sp]
    6516:	1ea8      	subs	r0, r5, #2
    6518:	2826      	cmp	r0, #38	; 0x26
    651a:	d25d      	bcs.n	65d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    651c:	e8df f000 	tbb	[pc, r0]
    6520:	1a5c2213 	.word	0x1a5c2213
    6524:	3e22225c 	.word	0x3e22225c
    6528:	22222222 	.word	0x22222222
    652c:	5c1a5c22 	.word	0x5c1a5c22
    6530:	5c1a2222 	.word	0x5c1a2222
    6534:	225c5c5c 	.word	0x225c5c5c
    6538:	1a225c5c 	.word	0x1a225c5c
    653c:	435c2222 	.word	0x435c2222
    6540:	2f5c5c1a 	.word	0x2f5c5c1a
    6544:	4c34      	.short	0x4c34
    6546:	6862      	ldr	r2, [r4, #4]
    6548:	bb7a      	cbnz	r2, 65aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    654a:	f240 318a 	movw	r1, #906	; 0x38a
    654e:	e040      	b.n	65d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6550:	7226      	strb	r6, [r4, #8]
    6552:	e044      	b.n	65de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    6554:	4825      	ldr	r0, [pc, #148]	; (65ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    6556:	6803      	ldr	r3, [r0, #0]
    6558:	b11b      	cbz	r3, 6562 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    655a:	6860      	ldr	r0, [r4, #4]
    655c:	462a      	mov	r2, r5
    655e:	4651      	mov	r1, sl
    6560:	4798      	blx	r3
    6562:	e7f5      	b.n	6550 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6564:	462a      	mov	r2, r5
    6566:	4621      	mov	r1, r4
    6568:	4650      	mov	r0, sl
    656a:	f000 f8e1 	bl	6730 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x120>
    656e:	b110      	cbz	r0, 6576 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    6570:	2d0d      	cmp	r5, #13
    6572:	d034      	beq.n	65de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    6574:	e7ec      	b.n	6550 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6576:	2d0d      	cmp	r5, #13
    6578:	d031      	beq.n	65de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    657a:	7226      	strb	r6, [r4, #8]
    657c:	e7a7      	b.n	64ce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe>
    657e:	6862      	ldr	r2, [r4, #4]
    6580:	b99a      	cbnz	r2, 65aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    6582:	f240 412b 	movw	r1, #1067	; 0x42b
    6586:	e024      	b.n	65d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6588:	f88a 6001 	strb.w	r6, [sl, #1]
    658c:	2115      	movs	r1, #21
    658e:	f88a 1000 	strb.w	r1, [sl]
    6592:	f8d4 1009 	ldr.w	r1, [r4, #9]
    6596:	f8ca 1004 	str.w	r1, [sl, #4]
    659a:	e7d9      	b.n	6550 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    659c:	6862      	ldr	r2, [r4, #4]
    659e:	b922      	cbnz	r2, 65aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    65a0:	f240 413d 	movw	r1, #1085	; 0x43d
    65a4:	e015      	b.n	65d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    65a6:	6862      	ldr	r2, [r4, #4]
    65a8:	b11a      	cbz	r2, 65b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf2>
    65aa:	4651      	mov	r1, sl
    65ac:	4620      	mov	r0, r4
    65ae:	4790      	blx	r2
    65b0:	e7ce      	b.n	6550 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    65b2:	f240 4147 	movw	r1, #1095	; 0x447
    65b6:	e00c      	b.n	65d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    65b8:	480d      	ldr	r0, [pc, #52]	; (65f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>)
    65ba:	6802      	ldr	r2, [r0, #0]
    65bc:	b122      	cbz	r2, 65c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    65be:	6860      	ldr	r0, [r4, #4]
    65c0:	b128      	cbz	r0, 65ce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    65c2:	8800      	ldrh	r0, [r0, #0]
    65c4:	4651      	mov	r1, sl
    65c6:	4790      	blx	r2
    65c8:	2002      	movs	r0, #2
    65ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65ce:	f44f 618a 	mov.w	r1, #1104	; 0x450
    65d2:	2010      	movs	r0, #16
    65d4:	f7fd ffca 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65d8:	f240 416b 	movw	r1, #1131	; 0x46b
    65dc:	e7f9      	b.n	65d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    65de:	2004      	movs	r0, #4
    65e0:	e7f3      	b.n	65ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    65e2:	0000      	.short	0x0000
    65e4:	20001430 	.word	0x20001430
    65e8:	20001404 	.word	0x20001404
    65ec:	20000114 	.word	0x20000114
    65f0:	20000118 	.word	0x20000118

000065f4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    65f4:	4901      	ldr	r1, [pc, #4]	; (65fc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    65f6:	7008      	strb	r0, [r1, #0]
    65f8:	f000 b96a 	b.w	68d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c0>
    65fc:	20000368 	.word	0x20000368

00006600 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6600:	4902      	ldr	r1, [pc, #8]	; (660c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6602:	4801      	ldr	r0, [pc, #4]	; (6608 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6604:	6008      	str	r0, [r1, #0]
    6606:	4770      	bx	lr
    6608:	0000e61b 	.word	0x0000e61b
    660c:	20000114 	.word	0x20000114

00006610 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6610:	4905      	ldr	r1, [pc, #20]	; (6628 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6612:	4804      	ldr	r0, [pc, #16]	; (6624 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6614:	6008      	str	r0, [r1, #0]
    6616:	4906      	ldr	r1, [pc, #24]	; (6630 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6618:	4804      	ldr	r0, [pc, #16]	; (662c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    661a:	6008      	str	r0, [r1, #0]
    661c:	4906      	ldr	r1, [pc, #24]	; (6638 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    661e:	4805      	ldr	r0, [pc, #20]	; (6634 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6620:	6008      	str	r0, [r1, #0]
    6622:	4770      	bx	lr
    6624:	0000e61b 	.word	0x0000e61b
    6628:	20000114 	.word	0x20000114
    662c:	0000e053 	.word	0x0000e053
    6630:	2000011c 	.word	0x2000011c
    6634:	0000663d 	.word	0x0000663d
    6638:	20000118 	.word	0x20000118
    663c:	b538      	push	{r3, r4, r5, lr}
    663e:	000d      	movs	r5, r1
    6640:	d014      	beq.n	666c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x5c>
    6642:	8028      	strh	r0, [r5, #0]
    6644:	2100      	movs	r1, #0
    6646:	7169      	strb	r1, [r5, #5]
    6648:	f7fe fb88 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    664c:	4604      	mov	r4, r0
    664e:	f006 fd26 	bl	d09e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    6652:	b170      	cbz	r0, 6672 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x62>
    6654:	4601      	mov	r1, r0
    6656:	466a      	mov	r2, sp
    6658:	4620      	mov	r0, r4
    665a:	f006 fd3e 	bl	d0da <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    665e:	8068      	strh	r0, [r5, #2]
    6660:	b150      	cbz	r0, 6678 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    6662:	28fb      	cmp	r0, #251	; 0xfb
    6664:	d90b      	bls.n	667e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x6e>
    6666:	f240 21c2 	movw	r1, #706	; 0x2c2
    666a:	e033      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    666c:	f240 21b1 	movw	r1, #689	; 0x2b1
    6670:	e030      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6672:	f240 21ba 	movw	r1, #698	; 0x2ba
    6676:	e02d      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6678:	f240 21bf 	movw	r1, #703	; 0x2bf
    667c:	e02a      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    667e:	9800      	ldr	r0, [sp, #0]
    6680:	f007 fc13 	bl	deaa <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    6684:	2801      	cmp	r0, #1
    6686:	d004      	beq.n	6692 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x82>
    6688:	2802      	cmp	r0, #2
    668a:	d002      	beq.n	6692 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x82>
    668c:	f240 21d3 	movw	r1, #723	; 0x2d3
    6690:	e020      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6692:	7128      	strb	r0, [r5, #4]
    6694:	68a8      	ldr	r0, [r5, #8]
    6696:	b1a8      	cbz	r0, 66c4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    6698:	9900      	ldr	r1, [sp, #0]
    669a:	886a      	ldrh	r2, [r5, #2]
    669c:	1cc9      	adds	r1, r1, #3
    669e:	f005 fefc 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    66a2:	4620      	mov	r0, r4
    66a4:	f006 fcc3 	bl	d02e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    66a8:	b178      	cbz	r0, 66ca <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xba>
    66aa:	4620      	mov	r0, r4
    66ac:	2100      	movs	r1, #0
    66ae:	f006 fdb2 	bl	d216 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    66b2:	b168      	cbz	r0, 66d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc0>
    66b4:	4809      	ldr	r0, [pc, #36]	; (66dc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xcc>)
    66b6:	7cc1      	ldrb	r1, [r0, #19]
    66b8:	2900      	cmp	r1, #0
    66ba:	d002      	beq.n	66c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    66bc:	8a81      	ldrh	r1, [r0, #20]
    66be:	1e49      	subs	r1, r1, #1
    66c0:	8281      	strh	r1, [r0, #20]
    66c2:	bd38      	pop	{r3, r4, r5, pc}
    66c4:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    66c8:	e004      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    66ca:	f240 21e1 	movw	r1, #737	; 0x2e1
    66ce:	e001      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    66d0:	f240 21e6 	movw	r1, #742	; 0x2e6
    66d4:	2010      	movs	r0, #16
    66d6:	f7fd ff49 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66da:	0000      	.short	0x0000
    66dc:	20001404 	.word	0x20001404
    66e0:	b538      	push	{r3, r4, r5, lr}
    66e2:	4602      	mov	r2, r0
    66e4:	4b11      	ldr	r3, [pc, #68]	; (672c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>)
    66e6:	2000      	movs	r0, #0
    66e8:	7010      	strb	r0, [r2, #0]
    66ea:	6858      	ldr	r0, [r3, #4]
    66ec:	7a01      	ldrb	r1, [r0, #8]
    66ee:	f88d 1000 	strb.w	r1, [sp]
    66f2:	9900      	ldr	r1, [sp, #0]
    66f4:	9100      	str	r1, [sp, #0]
    66f6:	f89d 5000 	ldrb.w	r5, [sp]
    66fa:	2401      	movs	r4, #1
    66fc:	2d01      	cmp	r5, #1
    66fe:	d006      	beq.n	670e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    6700:	f3ef 8110 	mrs	r1, PRIMASK
    6704:	b672      	cpsid	i
    6706:	6805      	ldr	r5, [r0, #0]
    6708:	605d      	str	r5, [r3, #4]
    670a:	b111      	cbz	r1, 6712 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x102>
    670c:	e002      	b.n	6714 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x104>
    670e:	2000      	movs	r0, #0
    6710:	bd38      	pop	{r3, r4, r5, pc}
    6712:	b662      	cpsie	i
    6714:	7a01      	ldrb	r1, [r0, #8]
    6716:	f88d 1000 	strb.w	r1, [sp]
    671a:	9900      	ldr	r1, [sp, #0]
    671c:	9100      	str	r1, [sp, #0]
    671e:	f89d 3000 	ldrb.w	r3, [sp]
    6722:	2b00      	cmp	r3, #0
    6724:	d1f4      	bne.n	6710 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>
    6726:	7014      	strb	r4, [r2, #0]
    6728:	bd38      	pop	{r3, r4, r5, pc}
    672a:	0000      	.short	0x0000
    672c:	20001430 	.word	0x20001430
    6730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6734:	b086      	sub	sp, #24
    6736:	000f      	movs	r7, r1
    6738:	4604      	mov	r4, r0
    673a:	4691      	mov	r9, r2
    673c:	d013      	beq.n	6766 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    673e:	6878      	ldr	r0, [r7, #4]
    6740:	b188      	cbz	r0, 6766 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    6742:	f100 0580 	add.w	r5, r0, #128	; 0x80
    6746:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    674a:	8806      	ldrh	r6, [r0, #0]
    674c:	4610      	mov	r0, r2
    674e:	f04f 0800 	mov.w	r8, #0
    6752:	2a12      	cmp	r2, #18
    6754:	d078      	beq.n	6848 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x238>
    6756:	dc09      	bgt.n	676c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    6758:	f04f 0a01 	mov.w	sl, #1
    675c:	2803      	cmp	r0, #3
    675e:	d00a      	beq.n	6776 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x166>
    6760:	2a0d      	cmp	r2, #13
    6762:	d170      	bne.n	6846 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6764:	e01a      	b.n	679c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18c>
    6766:	f240 210b 	movw	r1, #523	; 0x20b
    676a:	e0ac      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    676c:	281e      	cmp	r0, #30
    676e:	d04c      	beq.n	680a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1fa>
    6770:	2a1f      	cmp	r2, #31
    6772:	d17f      	bne.n	6874 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x264>
    6774:	e026      	b.n	67c4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b4>
    6776:	2d00      	cmp	r5, #0
    6778:	d00f      	beq.n	679a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18a>
    677a:	f884 8001 	strb.w	r8, [r4, #1]
    677e:	f884 a000 	strb.w	sl, [r4]
    6782:	f884 8004 	strb.w	r8, [r4, #4]
    6786:	f8a4 6005 	strh.w	r6, [r4, #5]
    678a:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
    678e:	71e0      	strb	r0, [r4, #7]
    6790:	f835 0f60 	ldrh.w	r0, [r5, #96]!
    6794:	8120      	strh	r0, [r4, #8]
    6796:	8868      	ldrh	r0, [r5, #2]
    6798:	8160      	strh	r0, [r4, #10]
    679a:	e075      	b.n	6888 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    679c:	4630      	mov	r0, r6
    679e:	f7fe faf3 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    67a2:	b160      	cbz	r0, 67be <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ae>
    67a4:	f884 8001 	strb.w	r8, [r4, #1]
    67a8:	220d      	movs	r2, #13
    67aa:	7022      	strb	r2, [r4, #0]
    67ac:	80e6      	strh	r6, [r4, #6]
    67ae:	f8a4 a008 	strh.w	sl, [r4, #8]
    67b2:	4641      	mov	r1, r8
    67b4:	f884 a004 	strb.w	sl, [r4, #4]
    67b8:	f006 fd2d 	bl	d216 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    67bc:	e064      	b.n	6888 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    67be:	f240 1153 	movw	r1, #339	; 0x153
    67c2:	e080      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    67c4:	f7ff fde4 	bl	6390 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    67c8:	b3e8      	cbz	r0, 6846 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    67ca:	f887 8008 	strb.w	r8, [r7, #8]
    67ce:	4630      	mov	r0, r6
    67d0:	f8ad 6000 	strh.w	r6, [sp]
    67d4:	a902      	add	r1, sp, #8
    67d6:	f007 f87e 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    67da:	b110      	cbz	r0, 67e2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    67dc:	f240 1125 	movw	r1, #293	; 0x125
    67e0:	e071      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    67e2:	9803      	ldr	r0, [sp, #12]
    67e4:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    67e8:	f88d 1002 	strb.w	r1, [sp, #2]
    67ec:	7841      	ldrb	r1, [r0, #1]
    67ee:	f88d 1003 	strb.w	r1, [sp, #3]
    67f2:	8840      	ldrh	r0, [r0, #2]
    67f4:	f8ad 0004 	strh.w	r0, [sp, #4]
    67f8:	2102      	movs	r1, #2
    67fa:	4668      	mov	r0, sp
    67fc:	f009 fc8c 	bl	10118 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6800:	2800      	cmp	r0, #0
    6802:	d034      	beq.n	686e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    6804:	f240 113b 	movw	r1, #315	; 0x13b
    6808:	e05d      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    680a:	f7ff fdb7 	bl	637c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    680e:	b1d0      	cbz	r0, 6846 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6810:	f887 8008 	strb.w	r8, [r7, #8]
    6814:	a903      	add	r1, sp, #12
    6816:	4630      	mov	r0, r6
    6818:	f009 fae2 	bl	fde0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    681c:	b110      	cbz	r0, 6824 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x214>
    681e:	f44f 71a1 	mov.w	r1, #322	; 0x142
    6822:	e050      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6824:	f8ad 6000 	strh.w	r6, [sp]
    6828:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    682c:	f8ad 0002 	strh.w	r0, [sp, #2]
    6830:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6834:	f8ad 0004 	strh.w	r0, [sp, #4]
    6838:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    683c:	f8ad 0006 	strh.w	r0, [sp, #6]
    6840:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6844:	e001      	b.n	684a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23a>
    6846:	e015      	b.n	6874 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x264>
    6848:	e009      	b.n	685e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24e>
    684a:	f8ad 0008 	strh.w	r0, [sp, #8]
    684e:	4668      	mov	r0, sp
    6850:	f009 faff 	bl	fe52 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6854:	2800      	cmp	r0, #0
    6856:	d00a      	beq.n	686e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    6858:	f240 114b 	movw	r1, #331	; 0x14b
    685c:	e033      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    685e:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    6862:	f000 0001 	and.w	r0, r0, #1
    6866:	f7ff fd7d 	bl	6364 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    686a:	b130      	cbz	r0, 687a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    686c:	2000      	movs	r0, #0
    686e:	b006      	add	sp, #24
    6870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6874:	f1b9 0f0a 	cmp.w	r9, #10
    6878:	d008      	beq.n	688c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x27c>
    687a:	4814      	ldr	r0, [pc, #80]	; (68cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2bc>)
    687c:	6803      	ldr	r3, [r0, #0]
    687e:	b11b      	cbz	r3, 6888 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    6880:	6878      	ldr	r0, [r7, #4]
    6882:	464a      	mov	r2, r9
    6884:	4621      	mov	r1, r4
    6886:	4798      	blx	r3
    6888:	2001      	movs	r0, #1
    688a:	e7f0      	b.n	686e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    688c:	4630      	mov	r0, r6
    688e:	f7fe fa65 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6892:	f006 fb51 	bl	cf38 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6896:	b1a0      	cbz	r0, 68c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b2>
    6898:	4630      	mov	r0, r6
    689a:	f006 ff4c 	bl	d736 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    689e:	2100      	movs	r1, #0
    68a0:	4630      	mov	r0, r6
    68a2:	f7fe f8e5 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    68a6:	2d00      	cmp	r5, #0
    68a8:	d0ee      	beq.n	6888 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    68aa:	f884 8001 	strb.w	r8, [r4, #1]
    68ae:	210a      	movs	r1, #10
    68b0:	7021      	strb	r1, [r4, #0]
    68b2:	f884 8004 	strb.w	r8, [r4, #4]
    68b6:	f8a4 6005 	strh.w	r6, [r4, #5]
    68ba:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
    68be:	71e0      	strb	r0, [r4, #7]
    68c0:	e7e2      	b.n	6888 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    68c2:	f44f 7113 	mov.w	r1, #588	; 0x24c
    68c6:	2010      	movs	r0, #16
    68c8:	f7fd fe50 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68cc:	2000011c 	.word	0x2000011c
    68d0:	4809      	ldr	r0, [pc, #36]	; (68f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2e8>)
    68d2:	b510      	push	{r4, lr}
    68d4:	2100      	movs	r1, #0
    68d6:	6141      	str	r1, [r0, #20]
    68d8:	6181      	str	r1, [r0, #24]
    68da:	61c1      	str	r1, [r0, #28]
    68dc:	6201      	str	r1, [r0, #32]
    68de:	2212      	movs	r2, #18
    68e0:	f005 fe55 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    68e4:	4804      	ldr	r0, [pc, #16]	; (68f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2e8>)
    68e6:	3018      	adds	r0, #24
    68e8:	1f02      	subs	r2, r0, #4
    68ea:	1f01      	subs	r1, r0, #4
    68ec:	2301      	movs	r3, #1
    68ee:	6050      	str	r0, [r2, #4]
    68f0:	730b      	strb	r3, [r1, #12]
    68f2:	6010      	str	r0, [r2, #0]
    68f4:	bd10      	pop	{r4, pc}
    68f6:	0000      	.short	0x0000
    68f8:	2000141c 	.word	0x2000141c

000068fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    68fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    68fe:	f06f 021f 	mvn.w	r2, #31
    6902:	0c01      	lsrs	r1, r0, #16
    6904:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    6908:	251f      	movs	r5, #31
    690a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    690e:	3854      	subs	r0, #84	; 0x54
    6910:	d00d      	beq.n	692e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6912:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6916:	3855      	subs	r0, #85	; 0x55
    6918:	d009      	beq.n	692e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    691a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    691e:	38aa      	subs	r0, #170	; 0xaa
    6920:	d005      	beq.n	692e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6922:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    6926:	38aa      	subs	r0, #170	; 0xaa
    6928:	d001      	beq.n	692e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    692a:	2001      	movs	r0, #1
    692c:	e000      	b.n	6930 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    692e:	2000      	movs	r0, #0
    6930:	2200      	movs	r2, #0
    6932:	4613      	mov	r3, r2
    6934:	ea4f 0402 	mov.w	r4, r2
    6938:	ea82 0701 	eor.w	r7, r2, r1
    693c:	43ff      	mvns	r7, r7
    693e:	431f      	orrs	r7, r3
    6940:	1c7f      	adds	r7, r7, #1
    6942:	d00f      	beq.n	6964 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6944:	f006 0701 	and.w	r7, r6, #1
    6948:	0852      	lsrs	r2, r2, #1
    694a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    694e:	f005 0701 	and.w	r7, r5, #1
    6952:	085b      	lsrs	r3, r3, #1
    6954:	0876      	lsrs	r6, r6, #1
    6956:	086d      	lsrs	r5, r5, #1
    6958:	1c64      	adds	r4, r4, #1
    695a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    695e:	2c16      	cmp	r4, #22
    6960:	d3ea      	bcc.n	6938 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6964:	2000      	movs	r0, #0
    6966:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006968 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    6968:	b510      	push	{r4, lr}
    696a:	4804      	ldr	r0, [pc, #16]	; (697c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    696c:	f007 fd23 	bl	e3b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    6970:	4802      	ldr	r0, [pc, #8]	; (697c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    6972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6976:	3008      	adds	r0, #8
    6978:	f007 bd1d 	b.w	e3b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    697c:	20000120 	.word	0x20000120

00006980 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    6980:	4801      	ldr	r0, [pc, #4]	; (6988 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    6982:	f000 b809 	b.w	6998 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    6986:	0000      	.short	0x0000
    6988:	20000120 	.word	0x20000120

0000698c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    698c:	4801      	ldr	r0, [pc, #4]	; (6994 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    698e:	f000 b803 	b.w	6998 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    6992:	0000      	.short	0x0000
    6994:	20000128 	.word	0x20000128
    6998:	b510      	push	{r4, lr}
    699a:	e9d0 2100 	ldrd	r2, r1, [r0]
    699e:	4b09      	ldr	r3, [pc, #36]	; (69c4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    69a0:	4c09      	ldr	r4, [pc, #36]	; (69c8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    69a2:	4353      	muls	r3, r2
    69a4:	4354      	muls	r4, r2
    69a6:	4051      	eors	r1, r2
    69a8:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    69ac:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    69b0:	ea4f 41f1 	mov.w	r1, r1, ror #19
    69b4:	e9c0 2100 	strd	r2, r1, [r0]
    69b8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    69bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    69c0:	4618      	mov	r0, r3
    69c2:	bd10      	pop	{r4, pc}
    69c4:	c6ef3760 	.word	0xc6ef3760
    69c8:	9e3779bb 	.word	0x9e3779bb

000069cc <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    69cc:	b510      	push	{r4, lr}
    69ce:	6840      	ldr	r0, [r0, #4]
    69d0:	2200      	movs	r2, #0
    69d2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    69d6:	3080      	adds	r0, #128	; 0x80
    69d8:	1d09      	adds	r1, r1, #4
    69da:	07db      	lsls	r3, r3, #31
    69dc:	d001      	beq.n	69e2 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    69de:	2001      	movs	r0, #1
    69e0:	bd10      	pop	{r4, pc}
    69e2:	790c      	ldrb	r4, [r1, #4]
    69e4:	680b      	ldr	r3, [r1, #0]
    69e6:	4909      	ldr	r1, [pc, #36]	; (6a0c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>)
    69e8:	400b      	ands	r3, r1
    69ea:	f004 0107 	and.w	r1, r4, #7
    69ee:	6643      	str	r3, [r0, #100]	; 0x64
    69f0:	6681      	str	r1, [r0, #104]	; 0x68
    69f2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    69f6:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
    69fa:	1c49      	adds	r1, r1, #1
    69fc:	f880 1052 	strb.w	r1, [r0, #82]	; 0x52
    6a00:	6841      	ldr	r1, [r0, #4]
    6a02:	f041 0101 	orr.w	r1, r1, #1
    6a06:	6041      	str	r1, [r0, #4]
    6a08:	2000      	movs	r0, #0
    6a0a:	bd10      	pop	{r4, pc}
    6a0c:	3304492f 	.word	0x3304492f

00006a10 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    6a10:	b510      	push	{r4, lr}
    6a12:	1d04      	adds	r4, r0, #4
    6a14:	f003 fe48 	bl	a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6a18:	4a03      	ldr	r2, [pc, #12]	; (6a28 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    6a1a:	f001 0107 	and.w	r1, r1, #7
    6a1e:	4010      	ands	r0, r2
    6a20:	6020      	str	r0, [r4, #0]
    6a22:	6061      	str	r1, [r4, #4]
    6a24:	bd10      	pop	{r4, pc}
    6a26:	0000      	.short	0x0000
    6a28:	3304492f 	.word	0x3304492f

00006a2c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    6a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a30:	4605      	mov	r5, r0
    6a32:	7803      	ldrb	r3, [r0, #0]
    6a34:	6840      	ldr	r0, [r0, #4]
    6a36:	1d0f      	adds	r7, r1, #4
    6a38:	f100 0680 	add.w	r6, r0, #128	; 0x80
    6a3c:	f500 74a2 	add.w	r4, r0, #324	; 0x144
    6a40:	4680      	mov	r8, r0
    6a42:	f04f 0900 	mov.w	r9, #0
    6a46:	7d72      	ldrb	r2, [r6, #21]
    6a48:	2107      	movs	r1, #7
    6a4a:	4630      	mov	r0, r6
    6a4c:	f006 ff6d 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6a50:	b300      	cbz	r0, 6a94 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x68>
    6a52:	6838      	ldr	r0, [r7, #0]
    6a54:	4a10      	ldr	r2, [pc, #64]	; (6a98 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x6c>)
    6a56:	7939      	ldrb	r1, [r7, #4]
    6a58:	4010      	ands	r0, r2
    6a5a:	6670      	str	r0, [r6, #100]	; 0x64
    6a5c:	f001 0107 	and.w	r1, r1, #7
    6a60:	66b1      	str	r1, [r6, #104]	; 0x68
    6a62:	f886 904e 	strb.w	r9, [r6, #78]	; 0x4e
    6a66:	f886 9015 	strb.w	r9, [r6, #21]
    6a6a:	f8b8 1000 	ldrh.w	r1, [r8]
    6a6e:	f8a4 106c 	strh.w	r1, [r4, #108]	; 0x6c
    6a72:	f884 906a 	strb.w	r9, [r4, #106]	; 0x6a
    6a76:	6839      	ldr	r1, [r7, #0]
    6a78:	f8c4 106e 	str.w	r1, [r4, #110]	; 0x6e
    6a7c:	6879      	ldr	r1, [r7, #4]
    6a7e:	f8c4 1072 	str.w	r1, [r4, #114]	; 0x72
    6a82:	2207      	movs	r2, #7
    6a84:	f104 0060 	add.w	r0, r4, #96	; 0x60
    6a88:	6869      	ldr	r1, [r5, #4]
    6a8a:	f7ff fce1 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6a8e:	2000      	movs	r0, #0
    6a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a94:	2001      	movs	r0, #1
    6a96:	e7fb      	b.n	6a90 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    6a98:	3304492f 	.word	0x3304492f

00006a9c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    6a9c:	b570      	push	{r4, r5, r6, lr}
    6a9e:	1d0d      	adds	r5, r1, #4
    6aa0:	6844      	ldr	r4, [r0, #4]
    6aa2:	f003 fe01 	bl	a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6aa6:	4a06      	ldr	r2, [pc, #24]	; (6ac0 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    6aa8:	4010      	ands	r0, r2
    6aaa:	f001 0207 	and.w	r2, r1, #7
    6aae:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    6ab2:	4001      	ands	r1, r0
    6ab4:	f361 0007 	bfi	r0, r1, #0, #8
    6ab8:	6028      	str	r0, [r5, #0]
    6aba:	606a      	str	r2, [r5, #4]
    6abc:	bd70      	pop	{r4, r5, r6, pc}
    6abe:	0000      	.short	0x0000
    6ac0:	3304492f 	.word	0x3304492f

00006ac4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    6ac4:	4a04      	ldr	r2, [pc, #16]	; (6ad8 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    6ac6:	6812      	ldr	r2, [r2, #0]
    6ac8:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    6acc:	434b      	muls	r3, r1
    6ace:	4342      	muls	r2, r0
    6ad0:	eb03 3022 	add.w	r0, r3, r2, asr #12
    6ad4:	4770      	bx	lr
    6ad6:	0000      	.short	0x0000
    6ad8:	20000130 	.word	0x20000130

00006adc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6adc:	b570      	push	{r4, r5, r6, lr}
    6ade:	4604      	mov	r4, r0
    6ae0:	7c00      	ldrb	r0, [r0, #16]
    6ae2:	b300      	cbz	r0, 6b26 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6ae4:	2802      	cmp	r0, #2
    6ae6:	d01e      	beq.n	6b26 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6ae8:	f05f 0001 	movs.w	r0, #1
    6aec:	f104 0151 	add.w	r1, r4, #81	; 0x51
    6af0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    6af4:	460d      	mov	r5, r1
    6af6:	b1c0      	cbz	r0, 6b2a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    6af8:	7de0      	ldrb	r0, [r4, #23]
    6afa:	b1f0      	cbz	r0, 6b3a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    6afc:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6b00:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    6b04:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    6b08:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    6b0c:	7c20      	ldrb	r0, [r4, #16]
    6b0e:	f007 fd0c 	bl	e52a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xe0>
    6b12:	7620      	strb	r0, [r4, #24]
    6b14:	2008      	movs	r0, #8
    6b16:	7660      	strb	r0, [r4, #25]
    6b18:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    6b1c:	4629      	mov	r1, r5
    6b1e:	f007 fcf0 	bl	e502 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb8>
    6b22:	b9a8      	cbnz	r0, 6b50 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    6b24:	e00e      	b.n	6b44 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    6b26:	2000      	movs	r0, #0
    6b28:	e7e0      	b.n	6aec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    6b2a:	2000      	movs	r0, #0
    6b2c:	f7fe fbba 	bl	52a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6b30:	2800      	cmp	r0, #0
    6b32:	d1eb      	bne.n	6b0c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    6b34:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
    6b38:	e001      	b.n	6b3e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    6b3a:	f240 41bc 	movw	r1, #1212	; 0x4bc
    6b3e:	202d      	movs	r0, #45	; 0x2d
    6b40:	f7fd fd14 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b44:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    6b48:	4629      	mov	r1, r5
    6b4a:	f007 fce3 	bl	e514 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    6b4e:	b100      	cbz	r0, 6b52 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6b50:	2001      	movs	r0, #1
    6b52:	76a0      	strb	r0, [r4, #26]
    6b54:	7e20      	ldrb	r0, [r4, #24]
    6b56:	b130      	cbz	r0, 6b66 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    6b58:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    6b5c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6b60:	f006 fe85 	bl	d86e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6b64:	7660      	strb	r0, [r4, #25]
    6b66:	f7ff f9b3 	bl	5ed0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6b6a:	490c      	ldr	r1, [pc, #48]	; (6b9c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    6b6c:	fba0 2301 	umull	r2, r3, r0, r1
    6b70:	f104 0048 	add.w	r0, r4, #72	; 0x48
    6b74:	f007 fea3 	bl	e8be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    6b78:	2100      	movs	r1, #0
    6b7a:	4620      	mov	r0, r4
    6b7c:	f007 fe4d 	bl	e81a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    6b80:	2000      	movs	r0, #0
    6b82:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    6b86:	78a0      	ldrb	r0, [r4, #2]
    6b88:	0740      	lsls	r0, r0, #29
    6b8a:	d505      	bpl.n	6b98 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    6b8c:	4620      	mov	r0, r4
    6b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b92:	2100      	movs	r1, #0
    6b94:	f000 bda8 	b.w	76e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>
    6b98:	bd70      	pop	{r4, r5, r6, pc}
    6b9a:	0000      	.short	0x0000
    6b9c:	000f4240 	.word	0x000f4240

00006ba0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6ba0:	b530      	push	{r4, r5, lr}
    6ba2:	460c      	mov	r4, r1
    6ba4:	b08d      	sub	sp, #52	; 0x34
    6ba6:	4605      	mov	r5, r0
    6ba8:	4601      	mov	r1, r0
    6baa:	2224      	movs	r2, #36	; 0x24
    6bac:	a802      	add	r0, sp, #8
    6bae:	f005 fc74 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6bb2:	a80b      	add	r0, sp, #44	; 0x2c
    6bb4:	f007 fee0 	bl	e978 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6bb8:	7aa0      	ldrb	r0, [r4, #10]
    6bba:	f88d 0018 	strb.w	r0, [sp, #24]
    6bbe:	7820      	ldrb	r0, [r4, #0]
    6bc0:	f88d 0008 	strb.w	r0, [sp, #8]
    6bc4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6bc8:	f8ad 0000 	strh.w	r0, [sp]
    6bcc:	f89d 0000 	ldrb.w	r0, [sp]
    6bd0:	f000 0101 	and.w	r1, r0, #1
    6bd4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6bd8:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6bdc:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6be0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6be4:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6be8:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6bec:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6bf0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6bf4:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6bf8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6bfc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6c00:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6c04:	f8ad 000a 	strh.w	r0, [sp, #10]
    6c08:	7d20      	ldrb	r0, [r4, #20]
    6c0a:	2801      	cmp	r0, #1
    6c0c:	d006      	beq.n	6c1c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6c0e:	2802      	cmp	r0, #2
    6c10:	d004      	beq.n	6c1c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6c12:	f240 21e2 	movw	r1, #738	; 0x2e2
    6c16:	2006      	movs	r0, #6
    6c18:	f7fd fca8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c1c:	f88d 000c 	strb.w	r0, [sp, #12]
    6c20:	7a61      	ldrb	r1, [r4, #9]
    6c22:	a80b      	add	r0, sp, #44	; 0x2c
    6c24:	f007 fe8f 	bl	e946 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6c28:	7d20      	ldrb	r0, [r4, #20]
    6c2a:	2101      	movs	r1, #1
    6c2c:	2802      	cmp	r0, #2
    6c2e:	d102      	bne.n	6c36 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6c30:	7d60      	ldrb	r0, [r4, #21]
    6c32:	1c40      	adds	r0, r0, #1
    6c34:	b2c1      	uxtb	r1, r0
    6c36:	7ea0      	ldrb	r0, [r4, #26]
    6c38:	1c40      	adds	r0, r0, #1
    6c3a:	b2c2      	uxtb	r2, r0
    6c3c:	a80b      	add	r0, sp, #44	; 0x2c
    6c3e:	f007 fe49 	bl	e8d4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6c42:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    6c46:	0700      	lsls	r0, r0, #28
    6c48:	d501      	bpl.n	6c4e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    6c4a:	2000      	movs	r0, #0
    6c4c:	e020      	b.n	6c90 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    6c4e:	a80b      	add	r0, sp, #44	; 0x2c
    6c50:	f007 fe52 	bl	e8f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6c54:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    6c58:	2228      	movs	r2, #40	; 0x28
    6c5a:	f000 fde9 	bl	7830 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6c5e:	f240 2171 	movw	r1, #625	; 0x271
    6c62:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    6c66:	fbb0 f0f1 	udiv	r0, r0, r1
    6c6a:	4348      	muls	r0, r1
    6c6c:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6c70:	f240 2371 	movw	r3, #625	; 0x271
    6c74:	0a0a      	lsrs	r2, r1, #8
    6c76:	f240 2171 	movw	r1, #625	; 0x271
    6c7a:	434a      	muls	r2, r1
    6c7c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    6c80:	0a09      	lsrs	r1, r1, #8
    6c82:	4359      	muls	r1, r3
    6c84:	4290      	cmp	r0, r2
    6c86:	d801      	bhi.n	6c8c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    6c88:	9204      	str	r2, [sp, #16]
    6c8a:	e004      	b.n	6c96 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6c8c:	4288      	cmp	r0, r1
    6c8e:	d801      	bhi.n	6c94 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6c90:	9004      	str	r0, [sp, #16]
    6c92:	e000      	b.n	6c96 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6c94:	9104      	str	r1, [sp, #16]
    6c96:	7ca0      	ldrb	r0, [r4, #18]
    6c98:	f88d 0017 	strb.w	r0, [sp, #23]
    6c9c:	7e20      	ldrb	r0, [r4, #24]
    6c9e:	2801      	cmp	r0, #1
    6ca0:	d000      	beq.n	6ca4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6ca2:	2000      	movs	r0, #0
    6ca4:	f88d 0014 	strb.w	r0, [sp, #20]
    6ca8:	6b68      	ldr	r0, [r5, #52]	; 0x34
    6caa:	f006 fc4c 	bl	d546 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    6cae:	6b68      	ldr	r0, [r5, #52]	; 0x34
    6cb0:	f006 fced 	bl	d68e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    6cb4:	2224      	movs	r2, #36	; 0x24
    6cb6:	a902      	add	r1, sp, #8
    6cb8:	4628      	mov	r0, r5
    6cba:	f005 fbee 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6cbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6cc0:	62a8      	str	r0, [r5, #40]	; 0x28
    6cc2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    6cc6:	85a8      	strh	r0, [r5, #44]	; 0x2c
    6cc8:	7ae0      	ldrb	r0, [r4, #11]
    6cca:	b168      	cbz	r0, 6ce8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6ccc:	2802      	cmp	r0, #2
    6cce:	d00b      	beq.n	6ce8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6cd0:	f05f 0001 	movs.w	r0, #1
    6cd4:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    6cd8:	68e0      	ldr	r0, [r4, #12]
    6cda:	65a8      	str	r0, [r5, #88]	; 0x58
    6cdc:	8a20      	ldrh	r0, [r4, #16]
    6cde:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    6ce2:	b00d      	add	sp, #52	; 0x34
    6ce4:	2000      	movs	r0, #0
    6ce6:	bd30      	pop	{r4, r5, pc}
    6ce8:	2000      	movs	r0, #0
    6cea:	e7f3      	b.n	6cd4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00006cec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    6cec:	4a0a      	ldr	r2, [pc, #40]	; (6d18 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    6cee:	b510      	push	{r4, lr}
    6cf0:	2100      	movs	r1, #0
    6cf2:	7011      	strb	r1, [r2, #0]
    6cf4:	4c09      	ldr	r4, [pc, #36]	; (6d1c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    6cf6:	6060      	str	r0, [r4, #4]
    6cf8:	f000 f822 	bl	6d40 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    6cfc:	b110      	cbz	r0, 6d04 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    6cfe:	f44f 714b 	mov.w	r1, #812	; 0x32c
    6d02:	e004      	b.n	6d0e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6d04:	68a0      	ldr	r0, [r4, #8]
    6d06:	2800      	cmp	r0, #0
    6d08:	d104      	bne.n	6d14 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    6d0a:	f240 312f 	movw	r1, #815	; 0x32f
    6d0e:	202d      	movs	r0, #45	; 0x2d
    6d10:	f7fd fc2c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d14:	bd10      	pop	{r4, pc}
    6d16:	0000      	.short	0x0000
    6d18:	20001440 	.word	0x20001440
    6d1c:	20000134 	.word	0x20000134

00006d20 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6d20:	4902      	ldr	r1, [pc, #8]	; (6d2c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    6d22:	4801      	ldr	r0, [pc, #4]	; (6d28 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6d24:	6088      	str	r0, [r1, #8]
    6d26:	4770      	bx	lr
    6d28:	00007818 	.word	0x00007818
    6d2c:	20000134 	.word	0x20000134

00006d30 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    6d30:	4902      	ldr	r1, [pc, #8]	; (6d3c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    6d32:	6008      	str	r0, [r1, #0]
    6d34:	6889      	ldr	r1, [r1, #8]
    6d36:	6809      	ldr	r1, [r1, #0]
    6d38:	4708      	bx	r1
    6d3a:	0000      	.short	0x0000
    6d3c:	20000134 	.word	0x20000134

00006d40 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    6d40:	4808      	ldr	r0, [pc, #32]	; (6d64 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6d42:	b510      	push	{r4, lr}
    6d44:	7800      	ldrb	r0, [r0, #0]
    6d46:	b110      	cbz	r0, 6d4e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6d48:	240c      	movs	r4, #12
    6d4a:	4620      	mov	r0, r4
    6d4c:	bd10      	pop	{r4, pc}
    6d4e:	2400      	movs	r4, #0
    6d50:	2218      	movs	r2, #24
    6d52:	4621      	mov	r1, r4
    6d54:	4803      	ldr	r0, [pc, #12]	; (6d64 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6d56:	f005 fc1a 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6d5a:	f003 fec7 	bl	aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6d5e:	f003 fceb 	bl	a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6d62:	e7f2      	b.n	6d4a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    6d64:	20001440 	.word	0x20001440

00006d68 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6d68:	4904      	ldr	r1, [pc, #16]	; (6d7c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    6d6a:	b510      	push	{r4, lr}
    6d6c:	7809      	ldrb	r1, [r1, #0]
    6d6e:	2901      	cmp	r1, #1
    6d70:	d101      	bne.n	6d76 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    6d72:	f000 fb85 	bl	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6d76:	2000      	movs	r0, #0
    6d78:	bd10      	pop	{r4, pc}
    6d7a:	0000      	.short	0x0000
    6d7c:	20001440 	.word	0x20001440

00006d80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    6d80:	4902      	ldr	r1, [pc, #8]	; (6d8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    6d82:	4801      	ldr	r0, [pc, #4]	; (6d88 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    6d84:	6008      	str	r0, [r1, #0]
    6d86:	4770      	bx	lr
    6d88:	000075b1 	.word	0x000075b1
    6d8c:	20000140 	.word	0x20000140
    6d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d94:	000f      	movs	r7, r1
    6d96:	4604      	mov	r4, r0
    6d98:	d023      	beq.n	6de2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    6d9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6d9e:	4605      	mov	r5, r0
    6da0:	f007 fdd3 	bl	e94a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6da4:	b9b0      	cbnz	r0, 6dd4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6da6:	78a0      	ldrb	r0, [r4, #2]
    6da8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6dac:	b350      	cbz	r0, 6e04 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    6dae:	4628      	mov	r0, r5
    6db0:	f007 fda2 	bl	e8f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6db4:	4606      	mov	r6, r0
    6db6:	4628      	mov	r0, r5
    6db8:	f007 fdc7 	bl	e94a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6dbc:	1a30      	subs	r0, r6, r0
    6dbe:	b2c0      	uxtb	r0, r0
    6dc0:	f007 fe18 	bl	e9f4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6dc4:	4601      	mov	r1, r0
    6dc6:	4835      	ldr	r0, [pc, #212]	; (6e9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    6dc8:	6842      	ldr	r2, [r0, #4]
    6dca:	4411      	add	r1, r2
    6dcc:	6041      	str	r1, [r0, #4]
    6dce:	4628      	mov	r0, r5
    6dd0:	f007 fdd9 	bl	e986 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6dd4:	4628      	mov	r0, r5
    6dd6:	f007 fd9b 	bl	e910 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6dda:	4601      	mov	r1, r0
    6ddc:	4620      	mov	r0, r4
    6dde:	f007 fd58 	bl	e892 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    6de2:	4d2f      	ldr	r5, [pc, #188]	; (6ea0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6de4:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    6de8:	2100      	movs	r1, #0
    6dea:	6868      	ldr	r0, [r5, #4]
    6dec:	8001      	strh	r1, [r0, #0]
    6dee:	f007 fcf2 	bl	e7d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6df2:	8860      	ldrh	r0, [r4, #2]
    6df4:	2813      	cmp	r0, #19
    6df6:	d013      	beq.n	6e20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    6df8:	dc09      	bgt.n	6e0e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    6dfa:	2810      	cmp	r0, #16
    6dfc:	d036      	beq.n	6e6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    6dfe:	2812      	cmp	r0, #18
    6e00:	d109      	bne.n	6e16 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    6e02:	e031      	b.n	6e68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6e04:	4620      	mov	r0, r4
    6e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e0a:	f000 bb39 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6e0e:	2815      	cmp	r0, #21
    6e10:	d00f      	beq.n	6e32 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6e12:	281d      	cmp	r0, #29
    6e14:	d00d      	beq.n	6e32 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6e16:	f240 6172 	movw	r1, #1650	; 0x672
    6e1a:	202d      	movs	r0, #45	; 0x2d
    6e1c:	f7fd fba6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e20:	2100      	movs	r1, #0
    6e22:	6868      	ldr	r0, [r5, #4]
    6e24:	f006 ff9a 	bl	dd5c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6e28:	2101      	movs	r1, #1
    6e2a:	6868      	ldr	r0, [r5, #4]
    6e2c:	f007 fcd3 	bl	e7d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6e30:	e020      	b.n	6e74 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6e32:	2101      	movs	r1, #1
    6e34:	6868      	ldr	r0, [r5, #4]
    6e36:	f006 ff91 	bl	dd5c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6e3a:	2101      	movs	r1, #1
    6e3c:	6868      	ldr	r0, [r5, #4]
    6e3e:	f007 fcca 	bl	e7d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6e42:	b136      	cbz	r6, 6e52 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    6e44:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    6e48:	6868      	ldr	r0, [r5, #4]
    6e4a:	f006 ffa2 	bl	dd92 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    6e4e:	2101      	movs	r1, #1
    6e50:	e006      	b.n	6e60 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    6e52:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6e56:	6868      	ldr	r0, [r5, #4]
    6e58:	f006 ff9b 	bl	dd92 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    6e5c:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    6e60:	6868      	ldr	r0, [r5, #4]
    6e62:	f006 ff9c 	bl	dd9e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    6e66:	e005      	b.n	6e74 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6e68:	2106      	movs	r1, #6
    6e6a:	e000      	b.n	6e6e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    6e6c:	2102      	movs	r1, #2
    6e6e:	6868      	ldr	r0, [r5, #4]
    6e70:	f006 ff74 	bl	dd5c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6e74:	4620      	mov	r0, r4
    6e76:	f000 fcad 	bl	77d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>
    6e7a:	8860      	ldrh	r0, [r4, #2]
    6e7c:	281d      	cmp	r0, #29
    6e7e:	d007      	beq.n	6e90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    6e80:	2815      	cmp	r0, #21
    6e82:	d005      	beq.n	6e90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    6e84:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    6e88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6e8a:	6868      	ldr	r0, [r5, #4]
    6e8c:	f006 ff56 	bl	dd3c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    6e90:	4639      	mov	r1, r7
    6e92:	4620      	mov	r0, r4
    6e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e98:	f000 b9f0 	b.w	727c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    6e9c:	20001440 	.word	0x20001440
    6ea0:	20000134 	.word	0x20000134
    6ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ea8:	4d2e      	ldr	r5, [pc, #184]	; (6f64 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    6eaa:	4607      	mov	r7, r0
    6eac:	7828      	ldrb	r0, [r5, #0]
    6eae:	2802      	cmp	r0, #2
    6eb0:	d005      	beq.n	6ebe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6eb2:	7828      	ldrb	r0, [r5, #0]
    6eb4:	2803      	cmp	r0, #3
    6eb6:	d002      	beq.n	6ebe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6eb8:	f640 5129 	movw	r1, #3369	; 0xd29
    6ebc:	e028      	b.n	6f10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    6ebe:	4c2a      	ldr	r4, [pc, #168]	; (6f68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    6ec0:	6820      	ldr	r0, [r4, #0]
    6ec2:	7b01      	ldrb	r1, [r0, #12]
    6ec4:	b109      	cbz	r1, 6eca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    6ec6:	f007 fcef 	bl	e8a8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    6eca:	f8d4 c004 	ldr.w	ip, [r4, #4]
    6ece:	f04f 0800 	mov.w	r8, #0
    6ed2:	f89c 0000 	ldrb.w	r0, [ip]
    6ed6:	f000 060f 	and.w	r6, r0, #15
    6eda:	b33f      	cbz	r7, 6f2c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6edc:	6821      	ldr	r1, [r4, #0]
    6ede:	09c0      	lsrs	r0, r0, #7
    6ee0:	f101 0351 	add.w	r3, r1, #81	; 0x51
    6ee4:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    6ee8:	f10c 0109 	add.w	r1, ip, #9
    6eec:	f006 fc27 	bl	d73e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6ef0:	b1e0      	cbz	r0, 6f2c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6ef2:	4641      	mov	r1, r8
    6ef4:	6860      	ldr	r0, [r4, #4]
    6ef6:	f006 ff11 	bl	dd1c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    6efa:	b1b8      	cbz	r0, 6f2c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6efc:	782a      	ldrb	r2, [r5, #0]
    6efe:	6820      	ldr	r0, [r4, #0]
    6f00:	4631      	mov	r1, r6
    6f02:	2a02      	cmp	r2, #2
    6f04:	d007      	beq.n	6f16 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    6f06:	782a      	ldrb	r2, [r5, #0]
    6f08:	2a03      	cmp	r2, #3
    6f0a:	d004      	beq.n	6f16 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    6f0c:	f640 5102 	movw	r1, #3330	; 0xd02
    6f10:	202d      	movs	r0, #45	; 0x2d
    6f12:	f7fd fb2b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f16:	68a2      	ldr	r2, [r4, #8]
    6f18:	782b      	ldrb	r3, [r5, #0]
    6f1a:	6952      	ldr	r2, [r2, #20]
    6f1c:	f06f 0607 	mvn.w	r6, #7
    6f20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6f24:	58d2      	ldr	r2, [r2, r3]
    6f26:	4790      	blx	r2
    6f28:	4606      	mov	r6, r0
    6f2a:	e000      	b.n	6f2e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6f2c:	2601      	movs	r6, #1
    6f2e:	7ba8      	ldrb	r0, [r5, #14]
    6f30:	b118      	cbz	r0, 6f3a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    6f32:	f003 fddb 	bl	aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6f36:	f003 fbff 	bl	a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6f3a:	2e00      	cmp	r6, #0
    6f3c:	d00f      	beq.n	6f5e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    6f3e:	6820      	ldr	r0, [r4, #0]
    6f40:	f007 fd6e 	bl	ea20 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6f44:	b130      	cbz	r0, 6f54 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    6f46:	f003 fdf9 	bl	ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6f4a:	68a0      	ldr	r0, [r4, #8]
    6f4c:	6880      	ldr	r0, [r0, #8]
    6f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f52:	4700      	bx	r0
    6f54:	6820      	ldr	r0, [r4, #0]
    6f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f5a:	f000 ba91 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f62:	0000      	.short	0x0000
    6f64:	20001440 	.word	0x20001440
    6f68:	20000134 	.word	0x20000134
    6f6c:	b510      	push	{r4, lr}
    6f6e:	2903      	cmp	r1, #3
    6f70:	d002      	beq.n	6f78 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    6f72:	2905      	cmp	r1, #5
    6f74:	d10a      	bne.n	6f8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6f76:	e002      	b.n	6f7e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    6f78:	f000 fb7a 	bl	7670 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>
    6f7c:	e003      	b.n	6f86 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    6f7e:	4904      	ldr	r1, [pc, #16]	; (6f90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    6f80:	6809      	ldr	r1, [r1, #0]
    6f82:	b109      	cbz	r1, 6f88 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    6f84:	4788      	blx	r1
    6f86:	b108      	cbz	r0, 6f8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6f88:	2000      	movs	r0, #0
    6f8a:	bd10      	pop	{r4, pc}
    6f8c:	2001      	movs	r0, #1
    6f8e:	bd10      	pop	{r4, pc}
    6f90:	20000140 	.word	0x20000140
    6f94:	4a09      	ldr	r2, [pc, #36]	; (6fbc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    6f96:	0003      	movs	r3, r0
    6f98:	6810      	ldr	r0, [r2, #0]
    6f9a:	d001      	beq.n	6fa0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    6f9c:	f000 ba70 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6fa0:	2900      	cmp	r1, #0
    6fa2:	d009      	beq.n	6fb8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    6fa4:	6891      	ldr	r1, [r2, #8]
    6fa6:	4a06      	ldr	r2, [pc, #24]	; (6fc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    6fa8:	6909      	ldr	r1, [r1, #16]
    6faa:	7812      	ldrb	r2, [r2, #0]
    6fac:	f06f 030f 	mvn.w	r3, #15
    6fb0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6fb4:	5889      	ldr	r1, [r1, r2]
    6fb6:	4708      	bx	r1
    6fb8:	4770      	bx	lr
    6fba:	0000      	.short	0x0000
    6fbc:	20000134 	.word	0x20000134
    6fc0:	20001440 	.word	0x20001440
    6fc4:	b570      	push	{r4, r5, r6, lr}
    6fc6:	4604      	mov	r4, r0
    6fc8:	8840      	ldrh	r0, [r0, #2]
    6fca:	2810      	cmp	r0, #16
    6fcc:	d019      	beq.n	7002 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    6fce:	4d10      	ldr	r5, [pc, #64]	; (7010 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    6fd0:	7ba8      	ldrb	r0, [r5, #14]
    6fd2:	b120      	cbz	r0, 6fde <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    6fd4:	f003 fbd0 	bl	a778 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6fd8:	2040      	movs	r0, #64	; 0x40
    6fda:	f003 fd95 	bl	ab08 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6fde:	480d      	ldr	r0, [pc, #52]	; (7014 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    6fe0:	6840      	ldr	r0, [r0, #4]
    6fe2:	f004 f817 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6fe6:	78a0      	ldrb	r0, [r4, #2]
    6fe8:	0740      	lsls	r0, r0, #29
    6fea:	d404      	bmi.n	6ff6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    6fec:	2100      	movs	r1, #0
    6fee:	7922      	ldrb	r2, [r4, #4]
    6ff0:	4608      	mov	r0, r1
    6ff2:	f004 f887 	bl	b104 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6ff6:	2000      	movs	r0, #0
    6ff8:	f003 fec2 	bl	ad80 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6ffc:	2002      	movs	r0, #2
    6ffe:	7028      	strb	r0, [r5, #0]
    7000:	bd70      	pop	{r4, r5, r6, pc}
    7002:	4620      	mov	r0, r4
    7004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7008:	2101      	movs	r1, #1
    700a:	f7ff bec1 	b.w	6d90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    700e:	0000      	.short	0x0000
    7010:	20001440 	.word	0x20001440
    7014:	20000134 	.word	0x20000134
    7018:	b510      	push	{r4, lr}
    701a:	4c12      	ldr	r4, [pc, #72]	; (7064 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    701c:	6820      	ldr	r0, [r4, #0]
    701e:	f000 f825 	bl	706c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7022:	6820      	ldr	r0, [r4, #0]
    7024:	f007 fcfc 	bl	ea20 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7028:	2800      	cmp	r0, #0
    702a:	6820      	ldr	r0, [r4, #0]
    702c:	d00b      	beq.n	7046 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    702e:	490e      	ldr	r1, [pc, #56]	; (7068 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7030:	780a      	ldrb	r2, [r1, #0]
    7032:	2a02      	cmp	r2, #2
    7034:	d00b      	beq.n	704e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7036:	780a      	ldrb	r2, [r1, #0]
    7038:	2a03      	cmp	r2, #3
    703a:	d008      	beq.n	704e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    703c:	f640 4137 	movw	r1, #3127	; 0xc37
    7040:	202d      	movs	r0, #45	; 0x2d
    7042:	f7fd fa93 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    704a:	f000 ba19 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    704e:	68a2      	ldr	r2, [r4, #8]
    7050:	7809      	ldrb	r1, [r1, #0]
    7052:	68d2      	ldr	r2, [r2, #12]
    7054:	f06f 0307 	mvn.w	r3, #7
    7058:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    705c:	5851      	ldr	r1, [r2, r1]
    705e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7062:	4708      	bx	r1
    7064:	20000134 	.word	0x20000134
    7068:	20001440 	.word	0x20001440
    706c:	b510      	push	{r4, lr}
    706e:	7b01      	ldrb	r1, [r0, #12]
    7070:	b109      	cbz	r1, 7076 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    7072:	f007 fc19 	bl	e8a8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    7076:	4805      	ldr	r0, [pc, #20]	; (708c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    7078:	7b80      	ldrb	r0, [r0, #14]
    707a:	2800      	cmp	r0, #0
    707c:	d005      	beq.n	708a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    707e:	f003 fd35 	bl	aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7086:	f003 bb57 	b.w	a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    708a:	bd10      	pop	{r4, pc}
    708c:	20001440 	.word	0x20001440

00007090 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7094:	4d5d      	ldr	r5, [pc, #372]	; (720c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    7096:	4604      	mov	r4, r0
    7098:	b086      	sub	sp, #24
    709a:	7828      	ldrb	r0, [r5, #0]
    709c:	2800      	cmp	r0, #0
    709e:	d14e      	bne.n	713e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    70a0:	7820      	ldrb	r0, [r4, #0]
    70a2:	28ff      	cmp	r0, #255	; 0xff
    70a4:	d04b      	beq.n	713e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    70a6:	f04f 0800 	mov.w	r8, #0
    70aa:	f8a5 800c 	strh.w	r8, [r5, #12]
    70ae:	f8c5 8004 	str.w	r8, [r5, #4]
    70b2:	f885 8001 	strb.w	r8, [r5, #1]
    70b6:	f885 8002 	strb.w	r8, [r5, #2]
    70ba:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    70be:	4b54      	ldr	r3, [pc, #336]	; (7210 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    70c0:	4e54      	ldr	r6, [pc, #336]	; (7214 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    70c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    70c4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    70c8:	68b0      	ldr	r0, [r6, #8]
    70ca:	6840      	ldr	r0, [r0, #4]
    70cc:	9003      	str	r0, [sp, #12]
    70ce:	4668      	mov	r0, sp
    70d0:	f003 fe2a 	bl	ad28 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    70d4:	f003 fef8 	bl	aec8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    70d8:	f004 f968 	bl	b3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    70dc:	f003 fd06 	bl	aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    70e0:	f003 fb2a 	bl	a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    70e4:	484c      	ldr	r0, [pc, #304]	; (7218 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    70e6:	f004 f83f 	bl	b168 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    70ea:	484c      	ldr	r0, [pc, #304]	; (721c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    70ec:	f004 f846 	bl	b17c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    70f0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    70f4:	4607      	mov	r7, r0
    70f6:	f007 fc46 	bl	e986 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    70fa:	4638      	mov	r0, r7
    70fc:	f007 fc08 	bl	e910 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7100:	4601      	mov	r1, r0
    7102:	4620      	mov	r0, r4
    7104:	f007 fbc5 	bl	e892 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    7108:	f994 000e 	ldrsb.w	r0, [r4, #14]
    710c:	f003 ff60 	bl	afd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7110:	7921      	ldrb	r1, [r4, #4]
    7112:	2000      	movs	r0, #0
    7114:	f003 fd9c 	bl	ac50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7118:	2101      	movs	r1, #1
    711a:	60a8      	str	r0, [r5, #8]
    711c:	b198      	cbz	r0, 7146 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    711e:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7122:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7124:	f006 fa82 	bl	d62c <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7128:	4607      	mov	r7, r0
    712a:	f104 0140 	add.w	r1, r4, #64	; 0x40
    712e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7130:	f006 fa7f 	bl	d632 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    7134:	b14f      	cbz	r7, 714a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    7136:	f894 1020 	ldrb.w	r1, [r4, #32]
    713a:	b951      	cbnz	r1, 7152 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    713c:	e005      	b.n	714a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    713e:	200c      	movs	r0, #12
    7140:	b006      	add	sp, #24
    7142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7146:	7029      	strb	r1, [r5, #0]
    7148:	e05e      	b.n	7208 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    714a:	b120      	cbz	r0, 7156 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    714c:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    7150:	b108      	cbz	r0, 7156 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    7152:	2701      	movs	r7, #1
    7154:	e000      	b.n	7158 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    7156:	2700      	movs	r7, #0
    7158:	7ea0      	ldrb	r0, [r4, #26]
    715a:	b920      	cbnz	r0, 7166 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    715c:	7e20      	ldrb	r0, [r4, #24]
    715e:	b910      	cbnz	r0, 7166 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    7160:	78a0      	ldrb	r0, [r4, #2]
    7162:	0740      	lsls	r0, r0, #29
    7164:	d523      	bpl.n	71ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    7166:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    716a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    716e:	4050      	eors	r0, r2
    7170:	ea70 0101 	orns	r1, r0, r1
    7174:	d006      	beq.n	7184 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    7176:	f7fb fe13 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    717a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    717e:	1a80      	subs	r0, r0, r2
    7180:	4199      	sbcs	r1, r3
    7182:	d200      	bcs.n	7186 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6>
    7184:	b19f      	cbz	r7, 71ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    7186:	f7fe fea3 	bl	5ed0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    718a:	4925      	ldr	r1, [pc, #148]	; (7220 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>)
    718c:	fba0 2301 	umull	r2, r3, r0, r1
    7190:	f104 0048 	add.w	r0, r4, #72	; 0x48
    7194:	f007 fb93 	bl	e8be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    7198:	2101      	movs	r1, #1
    719a:	4620      	mov	r0, r4
    719c:	f007 fb3d 	bl	e81a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    71a0:	78a0      	ldrb	r0, [r4, #2]
    71a2:	0740      	lsls	r0, r0, #29
    71a4:	d503      	bpl.n	71ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    71a6:	2101      	movs	r1, #1
    71a8:	4620      	mov	r0, r4
    71aa:	f000 fa9d 	bl	76e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>
    71ae:	f7fe fee7 	bl	5f80 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    71b2:	6870      	ldr	r0, [r6, #4]
    71b4:	1cc0      	adds	r0, r0, #3
    71b6:	f006 fb4d 	bl	d854 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    71ba:	73a8      	strb	r0, [r5, #14]
    71bc:	78a0      	ldrb	r0, [r4, #2]
    71be:	07c0      	lsls	r0, r0, #31
    71c0:	d022      	beq.n	7208 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    71c2:	f8cd 8010 	str.w	r8, [sp, #16]
    71c6:	20ff      	movs	r0, #255	; 0xff
    71c8:	f8cd 8014 	str.w	r8, [sp, #20]
    71cc:	73e8      	strb	r0, [r5, #15]
    71ce:	69e6      	ldr	r6, [r4, #28]
    71d0:	f106 070a 	add.w	r7, r6, #10
    71d4:	e013      	b.n	71fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    71d6:	9c04      	ldr	r4, [sp, #16]
    71d8:	42b4      	cmp	r4, r6
    71da:	d010      	beq.n	71fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    71dc:	7a72      	ldrb	r2, [r6, #9]
    71de:	7a60      	ldrb	r0, [r4, #9]
    71e0:	463b      	mov	r3, r7
    71e2:	f104 010a 	add.w	r1, r4, #10
    71e6:	f006 faaa 	bl	d73e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    71ea:	b140      	cbz	r0, 71fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    71ec:	78a0      	ldrb	r0, [r4, #2]
    71ee:	73e8      	strb	r0, [r5, #15]
    71f0:	f8d4 0003 	ldr.w	r0, [r4, #3]
    71f4:	6128      	str	r0, [r5, #16]
    71f6:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    71fa:	82a8      	strh	r0, [r5, #20]
    71fc:	e004      	b.n	7208 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    71fe:	a804      	add	r0, sp, #16
    7200:	f7fd fbee 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7204:	2800      	cmp	r0, #0
    7206:	d0e6      	beq.n	71d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x146>
    7208:	2000      	movs	r0, #0
    720a:	e799      	b.n	7140 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    720c:	20001440 	.word	0x20001440
    7210:	000077f8 	.word	0x000077f8
    7214:	20000134 	.word	0x20000134
    7218:	8e89bed6 	.word	0x8e89bed6
    721c:	00555555 	.word	0x00555555
    7220:	000f4240 	.word	0x000f4240
    7224:	b510      	push	{r4, lr}
    7226:	4604      	mov	r4, r0
    7228:	f7ff ff32 	bl	7090 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    722c:	2800      	cmp	r0, #0
    722e:	d108      	bne.n	7242 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    7230:	4804      	ldr	r0, [pc, #16]	; (7244 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    7232:	7800      	ldrb	r0, [r0, #0]
    7234:	2801      	cmp	r0, #1
    7236:	d003      	beq.n	7240 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    7238:	2100      	movs	r1, #0
    723a:	4620      	mov	r0, r4
    723c:	f7ff fda8 	bl	6d90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7240:	2000      	movs	r0, #0
    7242:	bd10      	pop	{r4, pc}
    7244:	20001440 	.word	0x20001440
    7248:	480a      	ldr	r0, [pc, #40]	; (7274 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    724a:	b510      	push	{r4, lr}
    724c:	490a      	ldr	r1, [pc, #40]	; (7278 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    724e:	6804      	ldr	r4, [r0, #0]
    7250:	7808      	ldrb	r0, [r1, #0]
    7252:	2800      	cmp	r0, #0
    7254:	d00d      	beq.n	7272 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    7256:	7808      	ldrb	r0, [r1, #0]
    7258:	2802      	cmp	r0, #2
    725a:	d002      	beq.n	7262 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    725c:	7808      	ldrb	r0, [r1, #0]
    725e:	2803      	cmp	r0, #3
    7260:	d102      	bne.n	7268 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    7262:	4620      	mov	r0, r4
    7264:	f7ff ff02 	bl	706c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7268:	4620      	mov	r0, r4
    726a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    726e:	f000 b907 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    7272:	bd10      	pop	{r4, pc}
    7274:	20000134 	.word	0x20000134
    7278:	20001440 	.word	0x20001440
    727c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7280:	4604      	mov	r4, r0
    7282:	4827      	ldr	r0, [pc, #156]	; (7320 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    7284:	460d      	mov	r5, r1
    7286:	6840      	ldr	r0, [r0, #4]
    7288:	f003 fec4 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    728c:	4e25      	ldr	r6, [pc, #148]	; (7324 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    728e:	2004      	movs	r0, #4
    7290:	7030      	strb	r0, [r6, #0]
    7292:	b325      	cbz	r5, 72de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    7294:	8860      	ldrh	r0, [r4, #2]
    7296:	2810      	cmp	r0, #16
    7298:	d02a      	beq.n	72f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    729a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    729e:	4680      	mov	r8, r0
    72a0:	68b5      	ldr	r5, [r6, #8]
    72a2:	f007 fb29 	bl	e8f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    72a6:	4607      	mov	r7, r0
    72a8:	4640      	mov	r0, r8
    72aa:	f007 fb4e 	bl	e94a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    72ae:	1a38      	subs	r0, r7, r0
    72b0:	1e40      	subs	r0, r0, #1
    72b2:	b2c0      	uxtb	r0, r0
    72b4:	8861      	ldrh	r1, [r4, #2]
    72b6:	2228      	movs	r2, #40	; 0x28
    72b8:	f000 fada 	bl	7870 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    72bc:	4405      	add	r5, r0
    72be:	78a0      	ldrb	r0, [r4, #2]
    72c0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    72c4:	b130      	cbz	r0, 72d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    72c6:	6870      	ldr	r0, [r6, #4]
    72c8:	4405      	add	r5, r0
    72ca:	f007 fb97 	bl	e9fc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    72ce:	4428      	add	r0, r5
    72d0:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    72d4:	7922      	ldrb	r2, [r4, #4]
    72d6:	4629      	mov	r1, r5
    72d8:	2000      	movs	r0, #0
    72da:	f003 feb1 	bl	b040 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    72de:	8860      	ldrh	r0, [r4, #2]
    72e0:	2813      	cmp	r0, #19
    72e2:	d013      	beq.n	730c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    72e4:	dc09      	bgt.n	72fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26a>
    72e6:	2810      	cmp	r0, #16
    72e8:	d017      	beq.n	731a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    72ea:	2812      	cmp	r0, #18
    72ec:	d109      	bne.n	7302 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    72ee:	e00d      	b.n	730c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    72f0:	7921      	ldrb	r1, [r4, #4]
    72f2:	2000      	movs	r0, #0
    72f4:	f003 fc72 	bl	abdc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    72f8:	e7f1      	b.n	72de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    72fa:	2815      	cmp	r0, #21
    72fc:	d006      	beq.n	730c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    72fe:	281d      	cmp	r0, #29
    7300:	d004      	beq.n	730c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7302:	f640 51b8 	movw	r1, #3512	; 0xdb8
    7306:	202d      	movs	r0, #45	; 0x2d
    7308:	f7fd f930 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    730c:	7922      	ldrb	r2, [r4, #4]
    730e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7312:	2101      	movs	r1, #1
    7314:	2000      	movs	r0, #0
    7316:	f003 bef5 	b.w	b104 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    731a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    731e:	0000      	.short	0x0000
    7320:	20000134 	.word	0x20000134
    7324:	20001440 	.word	0x20001440
    7328:	b510      	push	{r4, lr}
    732a:	4604      	mov	r4, r0
    732c:	7800      	ldrb	r0, [r0, #0]
    732e:	460b      	mov	r3, r1
    7330:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    7334:	29ff      	cmp	r1, #255	; 0xff
    7336:	d010      	beq.n	735a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    7338:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    733c:	1e51      	subs	r1, r2, #1
    733e:	4618      	mov	r0, r3
    7340:	f7fe fd9a 	bl	5e78 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7344:	b130      	cbz	r0, 7354 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>
    7346:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    734a:	f040 0002 	orr.w	r0, r0, #2
    734e:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    7352:	e011      	b.n	7378 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    7354:	f241 0102 	movw	r1, #4098	; 0x1002
    7358:	e021      	b.n	739e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    735a:	4812      	ldr	r0, [pc, #72]	; (73a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x314>)
    735c:	6840      	ldr	r0, [r0, #4]
    735e:	7801      	ldrb	r1, [r0, #0]
    7360:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7364:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    7368:	f8d0 1003 	ldr.w	r1, [r0, #3]
    736c:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    7370:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7374:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    7378:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    737c:	287f      	cmp	r0, #127	; 0x7f
    737e:	d00c      	beq.n	739a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30a>
    7380:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    7384:	207f      	movs	r0, #127	; 0x7f
    7386:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    738a:	4621      	mov	r1, r4
    738c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    7390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7394:	221d      	movs	r2, #29
    7396:	f7ff b85b 	b.w	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    739a:	f640 616b 	movw	r1, #3691	; 0xe6b
    739e:	202d      	movs	r0, #45	; 0x2d
    73a0:	f7fd f8e4 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73a4:	20000134 	.word	0x20000134
    73a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    73ac:	4690      	mov	r8, r2
    73ae:	460e      	mov	r6, r1
    73b0:	4604      	mov	r4, r0
    73b2:	2903      	cmp	r1, #3
    73b4:	d004      	beq.n	73c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    73b6:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    73ba:	b108      	cbz	r0, 73c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    73bc:	2001      	movs	r0, #1
    73be:	e000      	b.n	73c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    73c0:	2000      	movs	r0, #0
    73c2:	4681      	mov	r9, r0
    73c4:	f003 fbac 	bl	ab20 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    73c8:	4605      	mov	r5, r0
    73ca:	2e03      	cmp	r6, #3
    73cc:	d003      	beq.n	73d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    73ce:	2701      	movs	r7, #1
    73d0:	2e05      	cmp	r6, #5
    73d2:	d005      	beq.n	73e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    73d4:	e008      	b.n	73e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x358>
    73d6:	78a0      	ldrb	r0, [r4, #2]
    73d8:	2702      	movs	r7, #2
    73da:	f3c0 0040 	ubfx	r0, r0, #1, #1
    73de:	e001      	b.n	73e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    73e0:	78a0      	ldrb	r0, [r4, #2]
    73e2:	07c0      	lsls	r0, r0, #31
    73e4:	2800      	cmp	r0, #0
    73e6:	d042      	beq.n	746e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    73e8:	f1b9 0f00 	cmp.w	r9, #0
    73ec:	d13e      	bne.n	746c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    73ee:	4822      	ldr	r0, [pc, #136]	; (7478 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>)
    73f0:	7b80      	ldrb	r0, [r0, #14]
    73f2:	b140      	cbz	r0, 7406 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    73f4:	f006 fa31 	bl	d85a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    73f8:	f888 0000 	strb.w	r0, [r8]
    73fc:	28ff      	cmp	r0, #255	; 0xff
    73fe:	d002      	beq.n	7406 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    7400:	f7fe fd54 	bl	5eac <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7404:	4305      	orrs	r5, r0
    7406:	4e1d      	ldr	r6, [pc, #116]	; (747c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>)
    7408:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    740c:	f104 0358 	add.w	r3, r4, #88	; 0x58
    7410:	6871      	ldr	r1, [r6, #4]
    7412:	f811 0b03 	ldrb.w	r0, [r1], #3
    7416:	f3c0 1080 	ubfx	r0, r0, #6, #1
    741a:	f006 f990 	bl	d73e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    741e:	f898 1000 	ldrb.w	r1, [r8]
    7422:	29ff      	cmp	r1, #255	; 0xff
    7424:	d004      	beq.n	7430 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    7426:	b990      	cbnz	r0, 744e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7428:	7e60      	ldrb	r0, [r4, #25]
    742a:	4288      	cmp	r0, r1
    742c:	d00f      	beq.n	744e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    742e:	e008      	b.n	7442 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7430:	b138      	cbz	r0, 7442 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7432:	6871      	ldr	r1, [r6, #4]
    7434:	f811 0b03 	ldrb.w	r0, [r1], #3
    7438:	f3c0 1080 	ubfx	r0, r0, #6, #1
    743c:	f007 f9d4 	bl	e7e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    7440:	b128      	cbz	r0, 744e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7442:	2000      	movs	r0, #0
    7444:	78a1      	ldrb	r1, [r4, #2]
    7446:	0749      	lsls	r1, r1, #29
    7448:	d503      	bpl.n	7452 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    744a:	b990      	cbnz	r0, 7472 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    744c:	e00e      	b.n	746c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    744e:	2001      	movs	r0, #1
    7450:	e7f8      	b.n	7444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    7452:	b975      	cbnz	r5, 7472 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    7454:	7be0      	ldrb	r0, [r4, #15]
    7456:	b108      	cbz	r0, 745c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    7458:	42b8      	cmp	r0, r7
    745a:	d107      	bne.n	746c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    745c:	6871      	ldr	r1, [r6, #4]
    745e:	f811 0b03 	ldrb.w	r0, [r1], #3
    7462:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7466:	f007 f9bf 	bl	e7e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    746a:	b110      	cbz	r0, 7472 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    746c:	2000      	movs	r0, #0
    746e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7472:	2001      	movs	r0, #1
    7474:	e7fb      	b.n	746e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    7476:	0000      	.short	0x0000
    7478:	20001440 	.word	0x20001440
    747c:	20000134 	.word	0x20000134
    7480:	b570      	push	{r4, r5, r6, lr}
    7482:	4604      	mov	r4, r0
    7484:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    7486:	4d10      	ldr	r5, [pc, #64]	; (74c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>)
    7488:	1c40      	adds	r0, r0, #1
    748a:	8620      	strh	r0, [r4, #48]	; 0x30
    748c:	7ba8      	ldrb	r0, [r5, #14]
    748e:	2600      	movs	r6, #0
    7490:	b120      	cbz	r0, 749c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x40c>
    7492:	f003 fb2b 	bl	aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7496:	f003 f94f 	bl	a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    749a:	73ae      	strb	r6, [r5, #14]
    749c:	702e      	strb	r6, [r5, #0]
    749e:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    74a2:	b108      	cbz	r0, 74a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x418>
    74a4:	2101      	movs	r1, #1
    74a6:	e00a      	b.n	74be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    74a8:	7b60      	ldrb	r0, [r4, #13]
    74aa:	b138      	cbz	r0, 74bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    74ac:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    74ae:	4288      	cmp	r0, r1
    74b0:	d804      	bhi.n	74bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    74b2:	2101      	movs	r1, #1
    74b4:	4620      	mov	r0, r4
    74b6:	f007 fac5 	bl	ea44 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    74ba:	bd70      	pop	{r4, r5, r6, pc}
    74bc:	2100      	movs	r1, #0
    74be:	4620      	mov	r0, r4
    74c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    74c4:	f007 babe 	b.w	ea44 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    74c8:	20001440 	.word	0x20001440
    74cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ce:	4604      	mov	r4, r0
    74d0:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    74d4:	4616      	mov	r6, r2
    74d6:	460d      	mov	r5, r1
    74d8:	f88d 0000 	strb.w	r0, [sp]
    74dc:	9800      	ldr	r0, [sp, #0]
    74de:	9000      	str	r0, [sp, #0]
    74e0:	f89d 0000 	ldrb.w	r0, [sp]
    74e4:	b110      	cbz	r0, 74ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>
    74e6:	f640 416b 	movw	r1, #3179	; 0xc6b
    74ea:	e055      	b.n	7598 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
    74ec:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    74f0:	2700      	movs	r7, #0
    74f2:	8828      	ldrh	r0, [r5, #0]
    74f4:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    74f8:	2b00      	cmp	r3, #0
    74fa:	d14a      	bne.n	7592 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x502>
    74fc:	6928      	ldr	r0, [r5, #16]
    74fe:	f006 f9fb 	bl	d8f8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7502:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    7506:	8b28      	ldrh	r0, [r5, #24]
    7508:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    750c:	8b68      	ldrh	r0, [r5, #26]
    750e:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    7512:	f895 020d 	ldrb.w	r0, [r5, #525]	; 0x20d
    7516:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    751a:	7e20      	ldrb	r0, [r4, #24]
    751c:	f104 0151 	add.w	r1, r4, #81	; 0x51
    7520:	460d      	mov	r5, r1
    7522:	b120      	cbz	r0, 752e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    7524:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    7528:	f006 fff4 	bl	e514 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    752c:	b940      	cbnz	r0, 7540 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    752e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    7532:	b170      	cbz	r0, 7552 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    7534:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    7538:	4629      	mov	r1, r5
    753a:	f006 ffe2 	bl	e502 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb8>
    753e:	b140      	cbz	r0, 7552 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    7540:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    7544:	f8c4 0082 	str.w	r0, [r4, #130]	; 0x82
    7548:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    754c:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    7550:	e003      	b.n	755a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ca>
    7552:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
    7556:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    755a:	4814      	ldr	r0, [pc, #80]	; (75ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>)
    755c:	2eff      	cmp	r6, #255	; 0xff
    755e:	6840      	ldr	r0, [r0, #4]
    7560:	7801      	ldrb	r1, [r0, #0]
    7562:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7566:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
    756a:	f850 1f03 	ldr.w	r1, [r0, #3]!
    756e:	d016      	beq.n	759e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    7570:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    7574:	8880      	ldrh	r0, [r0, #4]
    7576:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    757a:	f104 027c 	add.w	r2, r4, #124	; 0x7c
    757e:	1e51      	subs	r1, r2, #1
    7580:	4630      	mov	r0, r6
    7582:	f7fe fc79 	bl	5e78 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7586:	b128      	cbz	r0, 7594 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x504>
    7588:	f814 0f7b 	ldrb.w	r0, [r4, #123]!
    758c:	f040 0002 	orr.w	r0, r0, #2
    7590:	7020      	strb	r0, [r4, #0]
    7592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7594:	f640 418c 	movw	r1, #3212	; 0xc8c
    7598:	202d      	movs	r0, #45	; 0x2d
    759a:	f7fc ffe7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    759e:	f844 1f7c 	str.w	r1, [r4, #124]!
    75a2:	8880      	ldrh	r0, [r0, #4]
    75a4:	80a0      	strh	r0, [r4, #4]
    75a6:	60e7      	str	r7, [r4, #12]
    75a8:	8227      	strh	r7, [r4, #16]
    75aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75ac:	20000134 	.word	0x20000134
    75b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75b2:	4604      	mov	r4, r0
    75b4:	20ff      	movs	r0, #255	; 0xff
    75b6:	f88d 0000 	strb.w	r0, [sp]
    75ba:	2601      	movs	r6, #1
    75bc:	466a      	mov	r2, sp
    75be:	2105      	movs	r1, #5
    75c0:	4620      	mov	r0, r4
    75c2:	f7ff fef1 	bl	73a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    75c6:	b160      	cbz	r0, 75e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x552>
    75c8:	4d28      	ldr	r5, [pc, #160]	; (766c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>)
    75ca:	4f27      	ldr	r7, [pc, #156]	; (7668 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>)
    75cc:	6869      	ldr	r1, [r5, #4]
    75ce:	7bfa      	ldrb	r2, [r7, #15]
    75d0:	f107 0310 	add.w	r3, r7, #16
    75d4:	f811 0b03 	ldrb.w	r0, [r1], #3
    75d8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    75dc:	f006 f8af 	bl	d73e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    75e0:	b110      	cbz	r0, 75e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x558>
    75e2:	2600      	movs	r6, #0
    75e4:	4630      	mov	r0, r6
    75e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75e8:	686a      	ldr	r2, [r5, #4]
    75ea:	69e0      	ldr	r0, [r4, #28]
    75ec:	7812      	ldrb	r2, [r2, #0]
    75ee:	f810 1f9d 	ldrb.w	r1, [r0, #157]!
    75f2:	f3c2 1240 	ubfx	r2, r2, #5, #1
    75f6:	4011      	ands	r1, r2
    75f8:	7001      	strb	r1, [r0, #0]
    75fa:	2201      	movs	r2, #1
    75fc:	4620      	mov	r0, r4
    75fe:	69e1      	ldr	r1, [r4, #28]
    7600:	f000 f8a0 	bl	7744 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>
    7604:	2300      	movs	r3, #0
    7606:	f89d 2000 	ldrb.w	r2, [sp]
    760a:	4620      	mov	r0, r4
    760c:	69e1      	ldr	r1, [r4, #28]
    760e:	f7ff ff5d 	bl	74cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    7612:	2210      	movs	r2, #16
    7614:	4621      	mov	r1, r4
    7616:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    761a:	f7fe ff19 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    761e:	69e0      	ldr	r0, [r4, #28]
    7620:	2205      	movs	r2, #5
    7622:	8801      	ldrh	r1, [r0, #0]
    7624:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    7628:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    762c:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    7630:	4621      	mov	r1, r4
    7632:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    7636:	f7fe ff0b 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    763a:	2100      	movs	r1, #0
    763c:	69e0      	ldr	r0, [r4, #28]
    763e:	7039      	strb	r1, [r7, #0]
    7640:	460a      	mov	r2, r1
    7642:	4621      	mov	r1, r4
    7644:	f000 fa8c 	bl	7b60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    7648:	6868      	ldr	r0, [r5, #4]
    764a:	69e1      	ldr	r1, [r4, #28]
    764c:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7650:	f841 2f03 	str.w	r2, [r1, #3]!
    7654:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7658:	808a      	strh	r2, [r1, #4]
    765a:	7800      	ldrb	r0, [r0, #0]
    765c:	69e1      	ldr	r1, [r4, #28]
    765e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7662:	7088      	strb	r0, [r1, #2]
    7664:	e7be      	b.n	75e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x554>
    7666:	0000      	.short	0x0000
    7668:	20001440 	.word	0x20001440
    766c:	20000134 	.word	0x20000134
    7670:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7674:	4604      	mov	r4, r0
    7676:	20ff      	movs	r0, #255	; 0xff
    7678:	f88d 0000 	strb.w	r0, [sp]
    767c:	2501      	movs	r5, #1
    767e:	466a      	mov	r2, sp
    7680:	2103      	movs	r1, #3
    7682:	4620      	mov	r0, r4
    7684:	f7ff fe90 	bl	73a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7688:	b330      	cbz	r0, 76d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>
    768a:	7b20      	ldrb	r0, [r4, #12]
    768c:	2700      	movs	r7, #0
    768e:	b168      	cbz	r0, 76ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61c>
    7690:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    7694:	f88d 0004 	strb.w	r0, [sp, #4]
    7698:	9801      	ldr	r0, [sp, #4]
    769a:	9001      	str	r0, [sp, #4]
    769c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    76a0:	b920      	cbnz	r0, 76ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61c>
    76a2:	f89d 1000 	ldrb.w	r1, [sp]
    76a6:	4620      	mov	r0, r4
    76a8:	f7ff fe3e 	bl	7328 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>
    76ac:	4e0c      	ldr	r6, [pc, #48]	; (76e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>)
    76ae:	2104      	movs	r1, #4
    76b0:	6870      	ldr	r0, [r6, #4]
    76b2:	8007      	strh	r7, [r0, #0]
    76b4:	f006 fb52 	bl	dd5c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    76b8:	4620      	mov	r0, r4
    76ba:	f000 f88b 	bl	77d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>
    76be:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    76c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    76c4:	6870      	ldr	r0, [r6, #4]
    76c6:	f006 fb80 	bl	ddca <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    76ca:	4906      	ldr	r1, [pc, #24]	; (76e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    76cc:	2005      	movs	r0, #5
    76ce:	7008      	strb	r0, [r1, #0]
    76d0:	6870      	ldr	r0, [r6, #4]
    76d2:	f003 fc9f 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    76d6:	e000      	b.n	76da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64a>
    76d8:	2500      	movs	r5, #0
    76da:	4628      	mov	r0, r5
    76dc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    76e0:	20000134 	.word	0x20000134
    76e4:	20001440 	.word	0x20001440
    76e8:	b570      	push	{r4, r5, r6, lr}
    76ea:	4604      	mov	r4, r0
    76ec:	460e      	mov	r6, r1
    76ee:	7e40      	ldrb	r0, [r0, #25]
    76f0:	f7fe fb9c 	bl	5e2c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    76f4:	0005      	movs	r5, r0
    76f6:	d019      	beq.n	772c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    76f8:	2110      	movs	r1, #16
    76fa:	f006 fa7e 	bl	dbfa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    76fe:	2800      	cmp	r0, #0
    7700:	d114      	bne.n	772c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    7702:	2001      	movs	r0, #1
    7704:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    7708:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    770c:	4632      	mov	r2, r6
    770e:	460c      	mov	r4, r1
    7710:	4628      	mov	r0, r5
    7712:	f006 f844 	bl	d79e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7716:	4621      	mov	r1, r4
    7718:	4c05      	ldr	r4, [pc, #20]	; (7730 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>)
    771a:	6860      	ldr	r0, [r4, #4]
    771c:	f006 fb39 	bl	dd92 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    7720:	6860      	ldr	r0, [r4, #4]
    7722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7726:	2101      	movs	r1, #1
    7728:	f006 bb39 	b.w	dd9e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    772c:	bd70      	pop	{r4, r5, r6, pc}
    772e:	0000      	.short	0x0000
    7730:	20000134 	.word	0x20000134
    7734:	4802      	ldr	r0, [pc, #8]	; (7740 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>)
    7736:	2101      	movs	r1, #1
    7738:	6800      	ldr	r0, [r0, #0]
    773a:	f7ff bb29 	b.w	6d90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    773e:	0000      	.short	0x0000
    7740:	20000134 	.word	0x20000134
    7744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7748:	4e21      	ldr	r6, [pc, #132]	; (77d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x740>)
    774a:	4680      	mov	r8, r0
    774c:	460c      	mov	r4, r1
    774e:	6870      	ldr	r0, [r6, #4]
    7750:	4615      	mov	r5, r2
    7752:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7756:	6161      	str	r1, [r4, #20]
    7758:	6841      	ldr	r1, [r0, #4]
    775a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    775e:	61e1      	str	r1, [r4, #28]
    7760:	8940      	ldrh	r0, [r0, #10]
    7762:	f006 f8c5 	bl	d8f0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7766:	4607      	mov	r7, r0
    7768:	6120      	str	r0, [r4, #16]
    776a:	6870      	ldr	r0, [r6, #4]
    776c:	4639      	mov	r1, r7
    776e:	7d80      	ldrb	r0, [r0, #22]
    7770:	f006 fa3a 	bl	dbe8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7774:	84a0      	strh	r0, [r4, #36]	; 0x24
    7776:	6870      	ldr	r0, [r6, #4]
    7778:	4639      	mov	r1, r7
    777a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    777e:	f006 fa2f 	bl	dbe0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7782:	6220      	str	r0, [r4, #32]
    7784:	6870      	ldr	r0, [r6, #4]
    7786:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    778a:	8321      	strh	r1, [r4, #24]
    778c:	8841      	ldrh	r1, [r0, #2]
    778e:	8361      	strh	r1, [r4, #26]
    7790:	6841      	ldr	r1, [r0, #4]
    7792:	f8c4 109e 	str.w	r1, [r4, #158]	; 0x9e
    7796:	7a01      	ldrb	r1, [r0, #8]
    7798:	f884 10a2 	strb.w	r1, [r4, #162]	; 0xa2
    779c:	7a41      	ldrb	r1, [r0, #9]
    779e:	f001 011f 	and.w	r1, r1, #31
    77a2:	f884 10a9 	strb.w	r1, [r4, #169]	; 0xa9
    77a6:	7a40      	ldrb	r0, [r0, #9]
    77a8:	0940      	lsrs	r0, r0, #5
    77aa:	f884 020d 	strb.w	r0, [r4, #525]	; 0x20d
    77ae:	f104 0062 	add.w	r0, r4, #98	; 0x62
    77b2:	7205      	strb	r5, [r0, #8]
    77b4:	7245      	strb	r5, [r0, #9]
    77b6:	21ff      	movs	r1, #255	; 0xff
    77b8:	7281      	strb	r1, [r0, #10]
    77ba:	2100      	movs	r1, #0
    77bc:	3836      	subs	r0, #54	; 0x36
    77be:	f006 fd76 	bl	e2ae <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    77c2:	f898 000e 	ldrb.w	r0, [r8, #14]
    77c6:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    77ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77ce:	0000      	.short	0x0000
    77d0:	20000134 	.word	0x20000134
    77d4:	b570      	push	{r4, r5, r6, lr}
    77d6:	4d07      	ldr	r5, [pc, #28]	; (77f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x764>)
    77d8:	4604      	mov	r4, r0
    77da:	f100 0151 	add.w	r1, r0, #81	; 0x51
    77de:	6868      	ldr	r0, [r5, #4]
    77e0:	f006 fae4 	bl	ddac <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    77e4:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    77e8:	6868      	ldr	r0, [r5, #4]
    77ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77ee:	f006 bae3 	b.w	ddb8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    77f2:	0000      	.short	0x0000
    77f4:	20000134 	.word	0x20000134
    77f8:	00007019 	.word	0x00007019
    77fc:	00006ea5 	.word	0x00006ea5
    7800:	00006f95 	.word	0x00006f95
    7804:	00000000 	.word	0x00000000
    7808:	00006f6d 	.word	0x00006f6d
    780c:	00006fc5 	.word	0x00006fc5
    7810:	0000e80f 	.word	0x0000e80f
    7814:	0000e815 	.word	0x0000e815
    7818:	00007225 	.word	0x00007225
    781c:	00007249 	.word	0x00007249
    7820:	00007735 	.word	0x00007735
    7824:	00007814 	.word	0x00007814
    7828:	0000780c 	.word	0x0000780c
    782c:	00007808 	.word	0x00007808

00007830 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7830:	b510      	push	{r4, lr}
    7832:	1e42      	subs	r2, r0, #1
    7834:	2a02      	cmp	r2, #2
    7836:	d901      	bls.n	783c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7838:	21ca      	movs	r1, #202	; 0xca
    783a:	e009      	b.n	7850 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    783c:	1e40      	subs	r0, r0, #1
    783e:	2910      	cmp	r1, #16
    7840:	d009      	beq.n	7856 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7842:	2912      	cmp	r1, #18
    7844:	d00c      	beq.n	7860 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7846:	2913      	cmp	r1, #19
    7848:	d00a      	beq.n	7860 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    784a:	2915      	cmp	r1, #21
    784c:	d005      	beq.n	785a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    784e:	21d8      	movs	r1, #216	; 0xd8
    7850:	202f      	movs	r0, #47	; 0x2f
    7852:	f7fc fe8b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7856:	4905      	ldr	r1, [pc, #20]	; (786c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7858:	e004      	b.n	7864 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    785a:	4904      	ldr	r1, [pc, #16]	; (786c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    785c:	1d89      	adds	r1, r1, #6
    785e:	e001      	b.n	7864 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7860:	4902      	ldr	r1, [pc, #8]	; (786c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7862:	1f89      	subs	r1, r1, #6
    7864:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7868:	bd10      	pop	{r4, pc}
    786a:	0000      	.short	0x0000
    786c:	0000ea14 	.word	0x0000ea14

00007870 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7870:	1e42      	subs	r2, r0, #1
    7872:	b510      	push	{r4, lr}
    7874:	b2d2      	uxtb	r2, r2
    7876:	2a01      	cmp	r2, #1
    7878:	d903      	bls.n	7882 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    787a:	291d      	cmp	r1, #29
    787c:	d001      	beq.n	7882 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    787e:	21ee      	movs	r1, #238	; 0xee
    7880:	e00d      	b.n	789e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7882:	2913      	cmp	r1, #19
    7884:	d013      	beq.n	78ae <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7886:	dc04      	bgt.n	7892 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7888:	2910      	cmp	r1, #16
    788a:	d00b      	beq.n	78a4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    788c:	2912      	cmp	r1, #18
    788e:	d104      	bne.n	789a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7890:	e00d      	b.n	78ae <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7892:	2915      	cmp	r1, #21
    7894:	d008      	beq.n	78a8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7896:	291d      	cmp	r1, #29
    7898:	d00e      	beq.n	78b8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    789a:	f44f 7181 	mov.w	r1, #258	; 0x102
    789e:	202f      	movs	r0, #47	; 0x2f
    78a0:	f7fc fe64 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78a4:	4807      	ldr	r0, [pc, #28]	; (78c4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    78a6:	e004      	b.n	78b2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    78a8:	4806      	ldr	r0, [pc, #24]	; (78c4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    78aa:	3008      	adds	r0, #8
    78ac:	e001      	b.n	78b2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    78ae:	4805      	ldr	r0, [pc, #20]	; (78c4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    78b0:	1d00      	adds	r0, r0, #4
    78b2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    78b6:	bd10      	pop	{r4, pc}
    78b8:	f240 315a 	movw	r1, #858	; 0x35a
    78bc:	fb10 f001 	smulbb	r0, r0, r1
    78c0:	bd10      	pop	{r4, pc}
    78c2:	0000      	.short	0x0000
    78c4:	0000ea02 	.word	0x0000ea02

000078c8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    78c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78cc:	4604      	mov	r4, r0
    78ce:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    78d2:	4616      	mov	r6, r2
    78d4:	460d      	mov	r5, r1
    78d6:	2800      	cmp	r0, #0
    78d8:	d15e      	bne.n	7998 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    78da:	4621      	mov	r1, r4
    78dc:	484c      	ldr	r0, [pc, #304]	; (7a10 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x148>)
    78de:	f7fb f84f 	bl	2980 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    78e2:	4607      	mov	r7, r0
    78e4:	2820      	cmp	r0, #32
    78e6:	d057      	beq.n	7998 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    78e8:	2250      	movs	r2, #80	; 0x50
    78ea:	2100      	movs	r1, #0
    78ec:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    78f0:	f004 fe4d 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    78f4:	f884 70c8 	strb.w	r7, [r4, #200]	; 0xc8
    78f8:	2701      	movs	r7, #1
    78fa:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    78fe:	f884 70e0 	strb.w	r7, [r4, #224]	; 0xe0
    7902:	b135      	cbz	r5, 7912 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    7904:	f7ff f842 	bl	698c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7908:	f000 0007 	and.w	r0, r0, #7
    790c:	1c40      	adds	r0, r0, #1
    790e:	f885 023c 	strb.w	r0, [r5, #572]	; 0x23c
    7912:	4620      	mov	r0, r4
    7914:	f007 fa33 	bl	ed7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    7918:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    791c:	2002      	movs	r0, #2
    791e:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    7922:	f884 70f3 	strb.w	r7, [r4, #243]	; 0xf3
    7926:	2500      	movs	r5, #0
    7928:	46b8      	mov	r8, r7
    792a:	f804 5fe8 	strb.w	r5, [r4, #232]!
    792e:	f7fc f995 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    7932:	4607      	mov	r7, r0
    7934:	f004 fc4e 	bl	c1d4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7938:	8921      	ldrh	r1, [r4, #8]
    793a:	3ce8      	subs	r4, #232	; 0xe8
    793c:	4288      	cmp	r0, r1
    793e:	d800      	bhi.n	7942 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    7940:	4608      	mov	r0, r1
    7942:	4438      	add	r0, r7
    7944:	30cc      	adds	r0, #204	; 0xcc
    7946:	b287      	uxth	r7, r0
    7948:	4620      	mov	r0, r4
    794a:	f006 fef6 	bl	e73a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    794e:	b330      	cbz	r0, 799e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    7950:	f008 fe60 	bl	10614 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7954:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7958:	b281      	uxth	r1, r0
    795a:	4630      	mov	r0, r6
    795c:	f004 fc6e 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7960:	4430      	add	r0, r6
    7962:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    7966:	3490      	adds	r4, #144	; 0x90
    7968:	f7fb fa1a 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    796c:	19c0      	adds	r0, r0, r7
    796e:	4169      	adcs	r1, r5
    7970:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    7974:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    7978:	f824 5c6e 	strh.w	r5, [r4, #-110]
    797c:	2001      	movs	r0, #1
    797e:	f007 f839 	bl	e9f4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7982:	f500 7088 	add.w	r0, r0, #272	; 0x110
    7986:	1a30      	subs	r0, r6, r0
    7988:	6460      	str	r0, [r4, #68]	; 0x44
    798a:	f04f 30ff 	mov.w	r0, #4294967295
    798e:	0841      	lsrs	r1, r0, #1
    7990:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    7994:	3c90      	subs	r4, #144	; 0x90
    7996:	e023      	b.n	79e0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    7998:	200c      	movs	r0, #12
    799a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    799e:	2100      	movs	r1, #0
    79a0:	4620      	mov	r0, r4
    79a2:	f007 f93e 	bl	ec22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    79a6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7a14 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>
    79aa:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    79ae:	2000      	movs	r0, #0
    79b0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    79b4:	b139      	cbz	r1, 79c6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xfe>
    79b6:	f7fe ffe9 	bl	698c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    79ba:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    79be:	fbb0 f2f1 	udiv	r2, r0, r1
    79c2:	fb01 0012 	mls	r0, r1, r2, r0
    79c6:	4407      	add	r7, r0
    79c8:	f7fb f9ea 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    79cc:	19c0      	adds	r0, r0, r7
    79ce:	4169      	adcs	r1, r5
    79d0:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    79d4:	b19e      	cbz	r6, 79fe <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x136>
    79d6:	1980      	adds	r0, r0, r6
    79d8:	eb51 0105 	adcs.w	r1, r1, r5
    79dc:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    79e0:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    79e4:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    79e8:	f007 f9c7 	bl	ed7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    79ec:	b158      	cbz	r0, 7a06 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13e>
    79ee:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    79f2:	2100      	movs	r1, #0
    79f4:	4620      	mov	r0, r4
    79f6:	f006 fed0 	bl	e79a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    79fa:	2000      	movs	r0, #0
    79fc:	e7cd      	b.n	799a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    79fe:	f04f 30ff 	mov.w	r0, #4294967295
    7a02:	0841      	lsrs	r1, r0, #1
    7a04:	e7ea      	b.n	79dc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x114>
    7a06:	f240 11e7 	movw	r1, #487	; 0x1e7
    7a0a:	2030      	movs	r0, #48	; 0x30
    7a0c:	f7fc fdae 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a10:	0000eef7 	.word	0x0000eef7
    7a14:	20000144 	.word	0x20000144

00007a18 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    7a18:	4901      	ldr	r1, [pc, #4]	; (7a20 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    7a1a:	8088      	strh	r0, [r1, #4]
    7a1c:	4770      	bx	lr
    7a1e:	0000      	.short	0x0000
    7a20:	20000144 	.word	0x20000144

00007a24 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    7a24:	4805      	ldr	r0, [pc, #20]	; (7a3c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    7a26:	2100      	movs	r1, #0
    7a28:	7001      	strb	r1, [r0, #0]
    7a2a:	2201      	movs	r2, #1
    7a2c:	7082      	strb	r2, [r0, #2]
    7a2e:	7041      	strb	r1, [r0, #1]
    7a30:	f242 7110 	movw	r1, #10000	; 0x2710
    7a34:	8081      	strh	r1, [r0, #4]
    7a36:	f000 b803 	b.w	7a40 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    7a3a:	0000      	.short	0x0000
    7a3c:	20000144 	.word	0x20000144

00007a40 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    7a40:	b51c      	push	{r2, r3, r4, lr}
    7a42:	4909      	ldr	r1, [pc, #36]	; (7a68 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    7a44:	e9d1 0100 	ldrd	r0, r1, [r1]
    7a48:	e9cd 0100 	strd	r0, r1, [sp]
    7a4c:	e002      	b.n	7a54 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    7a4e:	9800      	ldr	r0, [sp, #0]
    7a50:	f007 f80c 	bl	ea6c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    7a54:	4668      	mov	r0, sp
    7a56:	f7fc ffc3 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7a5a:	2800      	cmp	r0, #0
    7a5c:	d0f7      	beq.n	7a4e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    7a5e:	f000 f8ab 	bl	7bb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    7a62:	2000      	movs	r0, #0
    7a64:	bd1c      	pop	{r2, r3, r4, pc}
    7a66:	0000      	.short	0x0000
    7a68:	000081d8 	.word	0x000081d8

00007a6c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    7a6c:	4901      	ldr	r1, [pc, #4]	; (7a74 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    7a6e:	7008      	strb	r0, [r1, #0]
    7a70:	4770      	bx	lr
    7a72:	0000      	.short	0x0000
    7a74:	20000144 	.word	0x20000144

00007a78 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    7a78:	4908      	ldr	r1, [pc, #32]	; (7a9c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    7a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7a7e:	fbb1 f1f2 	udiv	r1, r1, r2
    7a82:	b510      	push	{r4, lr}
    7a84:	f501 7125 	add.w	r1, r1, #660	; 0x294
    7a88:	f006 fc2a 	bl	e2e0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7a8c:	f640 0148 	movw	r1, #2120	; 0x848
    7a90:	4288      	cmp	r0, r1
    7a92:	d300      	bcc.n	7a96 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    7a94:	4608      	mov	r0, r1
    7a96:	b280      	uxth	r0, r0
    7a98:	bd10      	pop	{r4, pc}
    7a9a:	0000      	.short	0x0000
    7a9c:	0001527d 	.word	0x0001527d

00007aa0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7aa4:	4c10      	ldr	r4, [pc, #64]	; (7ae8 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    7aa6:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
    7aaa:	f003 f9cd 	bl	ae48 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7aae:	4606      	mov	r6, r0
    7ab0:	7820      	ldrb	r0, [r4, #0]
    7ab2:	b128      	cbz	r0, 7ac0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7ab4:	4632      	mov	r2, r6
    7ab6:	4639      	mov	r1, r7
    7ab8:	4628      	mov	r0, r5
    7aba:	f005 ff23 	bl	d904 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7abe:	4605      	mov	r5, r0
    7ac0:	68a0      	ldr	r0, [r4, #8]
    7ac2:	4285      	cmp	r5, r0
    7ac4:	d005      	beq.n	7ad2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    7ac6:	6921      	ldr	r1, [r4, #16]
    7ac8:	1a28      	subs	r0, r5, r0
    7aca:	4408      	add	r0, r1
    7acc:	6120      	str	r0, [r4, #16]
    7ace:	f7fb f899 	bl	2c04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7ad2:	60a5      	str	r5, [r4, #8]
    7ad4:	42ae      	cmp	r6, r5
    7ad6:	d801      	bhi.n	7adc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    7ad8:	7860      	ldrb	r0, [r4, #1]
    7ada:	b110      	cbz	r0, 7ae2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    7adc:	2000      	movs	r0, #0
    7ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ae2:	2001      	movs	r0, #1
    7ae4:	e7fb      	b.n	7ade <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    7ae6:	0000      	.short	0x0000
    7ae8:	20000144 	.word	0x20000144

00007aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    7aec:	b510      	push	{r4, lr}
    7aee:	4604      	mov	r4, r0
    7af0:	2906      	cmp	r1, #6
    7af2:	d22e      	bcs.n	7b52 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    7af4:	e8df f001 	tbb	[pc, r1]
    7af8:	14031105 	.word	0x14031105
    7afc:	2815      	.short	0x2815
    7afe:	2100      	movs	r1, #0
    7b00:	e006      	b.n	7b10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    7b02:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    7b06:	b110      	cbz	r0, 7b0e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    7b08:	4620      	mov	r0, r4
    7b0a:	f007 f8c9 	bl	eca0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1dc>
    7b0e:	2101      	movs	r1, #1
    7b10:	4620      	mov	r0, r4
    7b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b16:	f000 b8f7 	b.w	7d08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    7b1a:	2003      	movs	r0, #3
    7b1c:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7b20:	bd10      	pop	{r4, pc}
    7b22:	f003 f997 	bl	ae54 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7b26:	f8c4 029c 	str.w	r0, [r4, #668]	; 0x29c
    7b2a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7b2e:	f003 fa55 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7b32:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    7b36:	1a09      	subs	r1, r1, r0
    7b38:	4808      	ldr	r0, [pc, #32]	; (7b5c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    7b3a:	6882      	ldr	r2, [r0, #8]
    7b3c:	440a      	add	r2, r1
    7b3e:	6082      	str	r2, [r0, #8]
    7b40:	68c2      	ldr	r2, [r0, #12]
    7b42:	4411      	add	r1, r2
    7b44:	60c1      	str	r1, [r0, #12]
    7b46:	bd10      	pop	{r4, pc}
    7b48:	4620      	mov	r0, r4
    7b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b4e:	f007 b892 	b.w	ec76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    7b52:	f240 7143 	movw	r1, #1859	; 0x743
    7b56:	2030      	movs	r0, #48	; 0x30
    7b58:	f7fc fd08 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b5c:	20000144 	.word	0x20000144

00007b60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    7b60:	b570      	push	{r4, r5, r6, lr}
    7b62:	460c      	mov	r4, r1
    7b64:	4605      	mov	r5, r0
    7b66:	b112      	cbz	r2, 7b6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    7b68:	f240 716d 	movw	r1, #1901	; 0x76d
    7b6c:	e010      	b.n	7b90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    7b6e:	f003 f96b 	bl	ae48 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7b72:	4601      	mov	r1, r0
    7b74:	2200      	movs	r2, #0
    7b76:	4620      	mov	r0, r4
    7b78:	f007 f971 	bl	ee5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x39a>
    7b7c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    7b80:	462a      	mov	r2, r5
    7b82:	4905      	ldr	r1, [pc, #20]	; (7b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    7b84:	f7fa fdb2 	bl	26ec <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    7b88:	2800      	cmp	r0, #0
    7b8a:	d104      	bne.n	7b96 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    7b8c:	f240 7156 	movw	r1, #1878	; 0x756
    7b90:	2030      	movs	r0, #48	; 0x30
    7b92:	f7fc fceb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b96:	bd70      	pop	{r4, r5, r6, pc}
    7b98:	0000ef99 	.word	0x0000ef99
    7b9c:	b510      	push	{r4, lr}
    7b9e:	280c      	cmp	r0, #12
    7ba0:	d304      	bcc.n	7bac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    7ba2:	f240 3183 	movw	r1, #899	; 0x383
    7ba6:	2006      	movs	r0, #6
    7ba8:	f7fc fce0 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bac:	4901      	ldr	r1, [pc, #4]	; (7bb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    7bae:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7bb2:	bd10      	pop	{r4, pc}
    7bb4:	000081f4 	.word	0x000081f4
    7bb8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7bbc:	4d15      	ldr	r5, [pc, #84]	; (7c14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>)
    7bbe:	2001      	movs	r0, #1
    7bc0:	7068      	strb	r0, [r5, #1]
    7bc2:	2400      	movs	r4, #0
    7bc4:	f64f 76ff 	movw	r6, #65535	; 0xffff
    7bc8:	e00b      	b.n	7be2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x82>
    7bca:	2100      	movs	r1, #0
    7bcc:	f005 fc0c 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7bd0:	0007      	movs	r7, r0
    7bd2:	d009      	beq.n	7be8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x88>
    7bd4:	f897 0294 	ldrb.w	r0, [r7, #660]	; 0x294
    7bd8:	f7fa fdba 	bl	2750 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7bdc:	4638      	mov	r0, r7
    7bde:	f007 f931 	bl	ee44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    7be2:	9400      	str	r4, [sp, #0]
    7be4:	9401      	str	r4, [sp, #4]
    7be6:	e00d      	b.n	7c04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7be8:	f240 111f 	movw	r1, #287	; 0x11f
    7bec:	2030      	movs	r0, #48	; 0x30
    7bee:	f7fc fcbd 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bf2:	9800      	ldr	r0, [sp, #0]
    7bf4:	b130      	cbz	r0, 7c04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7bf6:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
    7bfa:	b119      	cbz	r1, 7c04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7bfc:	8800      	ldrh	r0, [r0, #0]
    7bfe:	42b0      	cmp	r0, r6
    7c00:	d1e3      	bne.n	7bca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a>
    7c02:	e004      	b.n	7c0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae>
    7c04:	4668      	mov	r0, sp
    7c06:	f7fc feeb 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7c0a:	2800      	cmp	r0, #0
    7c0c:	d0f1      	beq.n	7bf2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    7c0e:	706c      	strb	r4, [r5, #1]
    7c10:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7c14:	20000144 	.word	0x20000144
    7c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c1c:	4604      	mov	r4, r0
    7c1e:	4839      	ldr	r0, [pc, #228]	; (7d04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>)
    7c20:	461e      	mov	r6, r3
    7c22:	4690      	mov	r8, r2
    7c24:	7880      	ldrb	r0, [r0, #2]
    7c26:	4689      	mov	r9, r1
    7c28:	2500      	movs	r5, #0
    7c2a:	2800      	cmp	r0, #0
    7c2c:	d063      	beq.n	7cf6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7c2e:	f7fc f8eb 	bl	3e08 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7c32:	b3e0      	cbz	r0, 7cae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    7c34:	f8b4 0238 	ldrh.w	r0, [r4, #568]	; 0x238
    7c38:	2802      	cmp	r0, #2
    7c3a:	d35c      	bcc.n	7cf6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7c3c:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7c40:	2802      	cmp	r0, #2
    7c42:	d058      	beq.n	7cf6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7c44:	f894 0262 	ldrb.w	r0, [r4, #610]	; 0x262
    7c48:	bb88      	cbnz	r0, 7cae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    7c4a:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    7c4e:	f7ff ffa5 	bl	7b9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7c52:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7c56:	b281      	uxth	r1, r0
    7c58:	8031      	strh	r1, [r6, #0]
    7c5a:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7c5e:	2700      	movs	r7, #0
    7c60:	2801      	cmp	r0, #1
    7c62:	d00d      	beq.n	7c80 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x120>
    7c64:	6920      	ldr	r0, [r4, #16]
    7c66:	f004 fae9 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7c6a:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    7c6e:	4442      	add	r2, r8
    7c70:	eba2 0109 	sub.w	r1, r2, r9
    7c74:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7c78:	1a82      	subs	r2, r0, r2
    7c7a:	fb01 7502 	mla	r5, r1, r2, r7
    7c7e:	e035      	b.n	7cec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x18c>
    7c80:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
    7c84:	2803      	cmp	r0, #3
    7c86:	d039      	beq.n	7cfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19c>
    7c88:	2101      	movs	r1, #1
    7c8a:	2000      	movs	r0, #0
    7c8c:	f005 ff05 	bl	da9a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7c90:	6a21      	ldr	r1, [r4, #32]
    7c92:	1847      	adds	r7, r0, r1
    7c94:	8831      	ldrh	r1, [r6, #0]
    7c96:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7c9a:	f004 facf 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7c9e:	f8d4 2240 	ldr.w	r2, [r4, #576]	; 0x240
    7ca2:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
    7ca6:	1a82      	subs	r2, r0, r2
    7ca8:	fb01 5502 	mla	r5, r1, r2, r5
    7cac:	e000      	b.n	7cb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x150>
    7cae:	e022      	b.n	7cf6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7cb0:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
    7cb4:	8831      	ldrh	r1, [r6, #0]
    7cb6:	4638      	mov	r0, r7
    7cb8:	f004 fac0 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7cbc:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7cc0:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7cc4:	1a41      	subs	r1, r0, r1
    7cc6:	440d      	add	r5, r1
    7cc8:	8831      	ldrh	r1, [r6, #0]
    7cca:	6920      	ldr	r0, [r4, #16]
    7ccc:	f004 fab6 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7cd0:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    7cd4:	4442      	add	r2, r8
    7cd6:	eba2 0109 	sub.w	r1, r2, r9
    7cda:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    7cde:	1a89      	subs	r1, r1, r2
    7ce0:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7ce4:	1a82      	subs	r2, r0, r2
    7ce6:	1e49      	subs	r1, r1, #1
    7ce8:	fb01 5502 	mla	r5, r1, r2, r5
    7cec:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7cf0:	2001      	movs	r0, #1
    7cf2:	f884 0262 	strb.w	r0, [r4, #610]	; 0x262
    7cf6:	4628      	mov	r0, r5
    7cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7cfc:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7d00:	e7c6      	b.n	7c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7d02:	0000      	.short	0x0000
    7d04:	20000144 	.word	0x20000144
    7d08:	b538      	push	{r3, r4, r5, lr}
    7d0a:	2500      	movs	r5, #0
    7d0c:	4604      	mov	r4, r0
    7d0e:	2901      	cmp	r1, #1
    7d10:	d102      	bne.n	7d18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b8>
    7d12:	4810      	ldr	r0, [pc, #64]	; (7d54 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    7d14:	7840      	ldrb	r0, [r0, #1]
    7d16:	b170      	cbz	r0, 7d36 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d6>
    7d18:	2004      	movs	r0, #4
    7d1a:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7d1e:	bf00      	nop
    7d20:	f006 ffb7 	bl	ec92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    7d24:	f8a4 5292 	strh.w	r5, [r4, #658]	; 0x292
    7d28:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    7d2c:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    7d30:	f884 5261 	strb.w	r5, [r4, #609]	; 0x261
    7d34:	bd38      	pop	{r3, r4, r5, pc}
    7d36:	9500      	str	r5, [sp, #0]
    7d38:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    7d3c:	2301      	movs	r3, #1
    7d3e:	2200      	movs	r2, #0
    7d40:	4620      	mov	r0, r4
    7d42:	f000 f809 	bl	7d58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    7d46:	2800      	cmp	r0, #0
    7d48:	d0ea      	beq.n	7d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    7d4a:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
    7d4e:	2030      	movs	r0, #48	; 0x30
    7d50:	f7fc fc0c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d54:	20000144 	.word	0x20000144
    7d58:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d5c:	b08b      	sub	sp, #44	; 0x2c
    7d5e:	4604      	mov	r4, r0
    7d60:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    7d64:	4699      	mov	r9, r3
    7d66:	460f      	mov	r7, r1
    7d68:	9307      	str	r3, [sp, #28]
    7d6a:	9005      	str	r0, [sp, #20]
    7d6c:	f008 fc52 	bl	10614 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7d70:	4605      	mov	r5, r0
    7d72:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    7d76:	f7ff ff11 	bl	7b9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7d7a:	4428      	add	r0, r5
    7d7c:	f8ad 0004 	strh.w	r0, [sp, #4]
    7d80:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7d84:	280e      	cmp	r0, #14
    7d86:	d004      	beq.n	7d92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    7d88:	2000      	movs	r0, #0
    7d8a:	9008      	str	r0, [sp, #32]
    7d8c:	980d      	ldr	r0, [sp, #52]	; 0x34
    7d8e:	b110      	cbz	r0, 7d96 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    7d90:	e02e      	b.n	7df0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7d92:	2001      	movs	r0, #1
    7d94:	e7f9      	b.n	7d8a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    7d96:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7d9a:	2803      	cmp	r0, #3
    7d9c:	d128      	bne.n	7df0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7d9e:	9808      	ldr	r0, [sp, #32]
    7da0:	b330      	cbz	r0, 7df0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7da2:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
    7da6:	42b8      	cmp	r0, r7
    7da8:	d122      	bne.n	7df0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7daa:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    7dae:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
    7db2:	6920      	ldr	r0, [r4, #16]
    7db4:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
    7db8:	f8b4 0292 	ldrh.w	r0, [r4, #658]	; 0x292
    7dbc:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    7dc0:	4408      	add	r0, r1
    7dc2:	f8c4 0248 	str.w	r0, [r4, #584]	; 0x248
    7dc6:	4620      	mov	r0, r4
    7dc8:	f007 f9fe 	bl	f1c8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    7dcc:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
    7dd0:	6220      	str	r0, [r4, #32]
    7dd2:	f8b4 02be 	ldrh.w	r0, [r4, #702]	; 0x2be
    7dd6:	84a0      	strh	r0, [r4, #36]	; 0x24
    7dd8:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
    7ddc:	6120      	str	r0, [r4, #16]
    7dde:	f8b4 02c8 	ldrh.w	r0, [r4, #712]	; 0x2c8
    7de2:	8320      	strh	r0, [r4, #24]
    7de4:	f8b4 02ca 	ldrh.w	r0, [r4, #714]	; 0x2ca
    7de8:	8360      	strh	r0, [r4, #26]
    7dea:	2002      	movs	r0, #2
    7dec:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7df0:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    7df4:	f504 751a 	add.w	r5, r4, #616	; 0x268
    7df8:	1a38      	subs	r0, r7, r0
    7dfa:	fa0f fa80 	sxth.w	sl, r0
    7dfe:	f8b4 0290 	ldrh.w	r0, [r4, #656]	; 0x290
    7e02:	1a38      	subs	r0, r7, r0
    7e04:	fa0f f880 	sxth.w	r8, r0
    7e08:	f1b8 0f00 	cmp.w	r8, #0
    7e0c:	da08      	bge.n	7e20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    7e0e:	f8d4 0280 	ldr.w	r0, [r4, #640]	; 0x280
    7e12:	f8d4 1284 	ldr.w	r1, [r4, #644]	; 0x284
    7e16:	46d0      	mov	r8, sl
    7e18:	e9c4 01a2 	strd	r0, r1, [r4, #648]	; 0x288
    7e1c:	2001      	movs	r0, #1
    7e1e:	9007      	str	r0, [sp, #28]
    7e20:	ab01      	add	r3, sp, #4
    7e22:	4652      	mov	r2, sl
    7e24:	4641      	mov	r1, r8
    7e26:	4620      	mov	r0, r4
    7e28:	f7ff fef6 	bl	7c18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb8>
    7e2c:	9004      	str	r0, [sp, #16]
    7e2e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7e32:	f8df b334 	ldr.w	fp, [pc, #820]	; 8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    7e36:	b140      	cbz	r0, 7e4a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2ea>
    7e38:	2801      	cmp	r0, #1
    7e3a:	d07d      	beq.n	7f38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    7e3c:	2802      	cmp	r0, #2
    7e3e:	d051      	beq.n	7ee4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x384>
    7e40:	2803      	cmp	r0, #3
    7e42:	d07a      	beq.n	7f3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3da>
    7e44:	f240 5146 	movw	r1, #1350	; 0x546
    7e48:	e18a      	b.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    7e4a:	2101      	movs	r1, #1
    7e4c:	2000      	movs	r0, #0
    7e4e:	f005 fe24 	bl	da9a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7e52:	4606      	mov	r6, r0
    7e54:	6a20      	ldr	r0, [r4, #32]
    7e56:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7e5a:	4430      	add	r0, r6
    7e5c:	f004 f9ee 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7e60:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7e64:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7e68:	6920      	ldr	r0, [r4, #16]
    7e6a:	f004 f9e7 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7e6e:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7e72:	a907      	add	r1, sp, #28
    7e74:	a806      	add	r0, sp, #24
    7e76:	f002 ff4f 	bl	ad18 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    7e7a:	e9d4 01a2 	ldrd	r0, r1, [r4, #648]	; 0x288
    7e7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    7e82:	f7fa ff9f 	bl	2dc4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    7e86:	4682      	mov	sl, r0
    7e88:	4620      	mov	r0, r4
    7e8a:	f006 fef4 	bl	ec76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    7e8e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7e92:	f8d4 8298 	ldr.w	r8, [r4, #664]	; 0x298
    7e96:	f003 f8cd 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7e9a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7e9e:	4401      	add	r1, r0
    7ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7ea4:	fbb1 f0f0 	udiv	r0, r1, r0
    7ea8:	6a21      	ldr	r1, [r4, #32]
    7eaa:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    7eae:	4431      	add	r1, r6
    7eb0:	1a08      	subs	r0, r1, r0
    7eb2:	1a81      	subs	r1, r0, r2
    7eb4:	4441      	add	r1, r8
    7eb6:	3920      	subs	r1, #32
    7eb8:	eba1 060a 	sub.w	r6, r1, sl
    7ebc:	0050      	lsls	r0, r2, #1
    7ebe:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7ec0:	3060      	adds	r0, #96	; 0x60
    7ec2:	4401      	add	r1, r0
    7ec4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7ec8:	f006 ff45 	bl	ed56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    7ecc:	3022      	adds	r0, #34	; 0x22
    7ece:	f8cb 0014 	str.w	r0, [fp, #20]
    7ed2:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    7ed6:	1a30      	subs	r0, r6, r0
    7ed8:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    7edc:	d258      	bcs.n	7f90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    7ede:	f240 41df 	movw	r1, #1247	; 0x4df
    7ee2:	e13d      	b.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    7ee4:	6a21      	ldr	r1, [r4, #32]
    7ee6:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7eea:	4408      	add	r0, r1
    7eec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7ef0:	f004 f9a4 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7ef4:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7ef8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7efc:	6920      	ldr	r0, [r4, #16]
    7efe:	f004 f99d 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7f02:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7f06:	4620      	mov	r0, r4
    7f08:	f006 feb5 	bl	ec76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    7f0c:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
    7f10:	bb10      	cbnz	r0, 7f58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    7f12:	f1b9 0f00 	cmp.w	r9, #0
    7f16:	d01f      	beq.n	7f58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    7f18:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    7f1c:	4640      	mov	r0, r8
    7f1e:	f003 f889 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7f22:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7f26:	4401      	add	r1, r0
    7f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7f2c:	fbb1 f0f0 	udiv	r0, r1, r0
    7f30:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7f34:	4408      	add	r0, r1
    7f36:	e001      	b.n	7f3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3dc>
    7f38:	e02b      	b.n	7f92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    7f3a:	e047      	b.n	7fcc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    7f3c:	6a22      	ldr	r2, [r4, #32]
    7f3e:	f8d4 1244 	ldr.w	r1, [r4, #580]	; 0x244
    7f42:	4411      	add	r1, r2
    7f44:	1a0e      	subs	r6, r1, r0
    7f46:	4640      	mov	r0, r8
    7f48:	f003 f848 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7f4c:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    7f50:	1a08      	subs	r0, r1, r0
    7f52:	4406      	add	r6, r0
    7f54:	3e20      	subs	r6, #32
    7f56:	e006      	b.n	7f66 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x406>
    7f58:	6a21      	ldr	r1, [r4, #32]
    7f5a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7f5e:	4408      	add	r0, r1
    7f60:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7f64:	1a46      	subs	r6, r0, r1
    7f66:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    7f6a:	f8d4 1240 	ldr.w	r1, [r4, #576]	; 0x240
    7f6e:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    7f72:	fb01 0002 	mla	r0, r1, r2, r0
    7f76:	0040      	lsls	r0, r0, #1
    7f78:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7f7a:	3060      	adds	r0, #96	; 0x60
    7f7c:	4401      	add	r1, r0
    7f7e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7f82:	f006 fee8 	bl	ed56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    7f86:	f8cb 0014 	str.w	r0, [fp, #20]
    7f8a:	2001      	movs	r0, #1
    7f8c:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7f90:	e061      	b.n	8056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
    7f92:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7f96:	6920      	ldr	r0, [r4, #16]
    7f98:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    7f9c:	1a86      	subs	r6, r0, r2
    7f9e:	eb01 000a 	add.w	r0, r1, sl
    7fa2:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
    7fa6:	f8d4 c240 	ldr.w	ip, [r4, #576]	; 0x240
    7faa:	1a40      	subs	r0, r0, r1
    7fac:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
    7fb0:	1e40      	subs	r0, r0, #1
    7fb2:	fb0c 3101 	mla	r1, ip, r1, r3
    7fb6:	fb00 1002 	mla	r0, r0, r2, r1
    7fba:	0040      	lsls	r0, r0, #1
    7fbc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7fbe:	3060      	adds	r0, #96	; 0x60
    7fc0:	4401      	add	r1, r0
    7fc2:	fb06 f608 	mul.w	r6, r6, r8
    7fc6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7fca:	e040      	b.n	804e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
    7fcc:	6920      	ldr	r0, [r4, #16]
    7fce:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    7fd2:	fb00 f008 	mul.w	r0, r0, r8
    7fd6:	fb08 0611 	mls	r6, r8, r1, r0
    7fda:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
    7fde:	2826      	cmp	r0, #38	; 0x26
    7fe0:	d003      	beq.n	7fea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    7fe2:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7fe6:	2826      	cmp	r0, #38	; 0x26
    7fe8:	d109      	bne.n	7ffe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7fea:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
    7fee:	1a38      	subs	r0, r7, r0
    7ff0:	b200      	sxth	r0, r0
    7ff2:	2800      	cmp	r0, #0
    7ff4:	db03      	blt.n	7ffe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7ff6:	f894 02bf 	ldrb.w	r0, [r4, #703]	; 0x2bf
    7ffa:	b100      	cbz	r0, 7ffe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7ffc:	9005      	str	r0, [sp, #20]
    7ffe:	9807      	ldr	r0, [sp, #28]
    8000:	b1d8      	cbz	r0, 803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
    8002:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
    8006:	b9c0      	cbnz	r0, 803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
    8008:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    800c:	2800      	cmp	r0, #0
    800e:	d07d      	beq.n	810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    8010:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8014:	f003 f80e 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8018:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    801c:	4401      	add	r1, r0
    801e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8022:	fbb1 f0f0 	udiv	r0, r1, r0
    8026:	1a36      	subs	r6, r6, r0
    8028:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    802c:	f002 ffd6 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8030:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    8034:	1a08      	subs	r0, r1, r0
    8036:	4406      	add	r6, r0
    8038:	3e20      	subs	r6, #32
    803a:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    803e:	eb01 000a 	add.w	r0, r1, sl
    8042:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8046:	4348      	muls	r0, r1
    8048:	0041      	lsls	r1, r0, #1
    804a:	3160      	adds	r1, #96	; 0x60
    804c:	9805      	ldr	r0, [sp, #20]
    804e:	f006 fe82 	bl	ed56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    8052:	f8cb 0014 	str.w	r0, [fp, #20]
    8056:	9804      	ldr	r0, [sp, #16]
    8058:	f8db 2014 	ldr.w	r2, [fp, #20]
    805c:	1a31      	subs	r1, r6, r0
    805e:	f8d4 6254 	ldr.w	r6, [r4, #596]	; 0x254
    8062:	6920      	ldr	r0, [r4, #16]
    8064:	1b80      	subs	r0, r0, r6
    8066:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    806a:	f8cb 0018 	str.w	r0, [fp, #24]
    806e:	4282      	cmp	r2, r0
    8070:	d800      	bhi.n	8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    8072:	4610      	mov	r0, r2
    8074:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
    8078:	2600      	movs	r6, #0
    807a:	702e      	strb	r6, [r5, #0]
    807c:	2064      	movs	r0, #100	; 0x64
    807e:	8128      	strh	r0, [r5, #8]
    8080:	e9d4 20a2 	ldrd	r2, r0, [r4, #648]	; 0x288
    8084:	1851      	adds	r1, r2, r1
    8086:	4170      	adcs	r0, r6
    8088:	e9c5 1004 	strd	r1, r0, [r5, #16]
    808c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8090:	f006 f8f7 	bl	e282 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8094:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
    8098:	4408      	add	r0, r1
    809a:	6068      	str	r0, [r5, #4]
    809c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    80a0:	e9c4 01a2 	strd	r0, r1, [r4, #648]	; 0x288
    80a4:	f8a4 7290 	strh.w	r7, [r4, #656]	; 0x290
    80a8:	72ae      	strb	r6, [r5, #10]
    80aa:	f8b4 0210 	ldrh.w	r0, [r4, #528]	; 0x210
    80ae:	1bc0      	subs	r0, r0, r7
    80b0:	b200      	sxth	r0, r0
    80b2:	2800      	cmp	r0, #0
    80b4:	dd01      	ble.n	80ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xba>
    80b6:	2002      	movs	r0, #2
    80b8:	72a8      	strb	r0, [r5, #10]
    80ba:	9808      	ldr	r0, [sp, #32]
    80bc:	b338      	cbz	r0, 810e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10e>
    80be:	f1b9 0f00 	cmp.w	r9, #0
    80c2:	d01c      	beq.n	80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    80c4:	f8b4 1238 	ldrh.w	r1, [r4, #568]	; 0x238
    80c8:	b3f1      	cbz	r1, 8148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>
    80ca:	f8b4 023a 	ldrh.w	r0, [r4, #570]	; 0x23a
    80ce:	bf00      	nop
    80d0:	f8a4 023a 	strh.w	r0, [r4, #570]	; 0x23a
    80d4:	f894 223c 	ldrb.w	r2, [r4, #572]	; 0x23c
    80d8:	1c40      	adds	r0, r0, #1
    80da:	4342      	muls	r2, r0
    80dc:	428a      	cmp	r2, r1
    80de:	d20e      	bcs.n	80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    80e0:	7aa8      	ldrb	r0, [r5, #10]
    80e2:	b160      	cbz	r0, 80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    80e4:	72ae      	strb	r6, [r5, #10]
    80e6:	f8b4 023a 	ldrh.w	r0, [r4, #570]	; 0x23a
    80ea:	1c40      	adds	r0, r0, #1
    80ec:	f8a4 023a 	strh.w	r0, [r4, #570]	; 0x23a
    80f0:	f7fe fc46 	bl	6980 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    80f4:	f000 0007 	and.w	r0, r0, #7
    80f8:	1c40      	adds	r0, r0, #1
    80fa:	f884 023c 	strb.w	r0, [r4, #572]	; 0x23c
    80fe:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    8102:	4629      	mov	r1, r5
    8104:	f006 fe39 	bl	ed7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    8108:	b340      	cbz	r0, 815c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    810a:	e001      	b.n	8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
    810c:	e009      	b.n	8122 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x122>
    810e:	e00b      	b.n	8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>
    8110:	980d      	ldr	r0, [sp, #52]	; 0x34
    8112:	f080 0001 	eor.w	r0, r0, #1
    8116:	f884 0260 	strb.w	r0, [r4, #608]	; 0x260
    811a:	2000      	movs	r0, #0
    811c:	b00f      	add	sp, #60	; 0x3c
    811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8122:	f240 5131 	movw	r1, #1329	; 0x531
    8126:	e01b      	b.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    8128:	f1b9 0f00 	cmp.w	r9, #0
    812c:	d1ca      	bne.n	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    812e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    8132:	2800      	cmp	r0, #0
    8134:	d0e3      	beq.n	80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    8136:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    813a:	6920      	ldr	r0, [r4, #16]
    813c:	1a41      	subs	r1, r0, r1
    813e:	4628      	mov	r0, r5
    8140:	f005 fcbd 	bl	dabe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8144:	0400      	lsls	r0, r0, #16
    8146:	e000      	b.n	814a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14a>
    8148:	e006      	b.n	8158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>
    814a:	0c00      	lsrs	r0, r0, #16
    814c:	d0d7      	beq.n	80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    814e:	9918      	ldr	r1, [sp, #96]	; 0x60
    8150:	b101      	cbz	r1, 8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    8152:	8008      	strh	r0, [r1, #0]
    8154:	2001      	movs	r0, #1
    8156:	e7e1      	b.n	811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>
    8158:	2000      	movs	r0, #0
    815a:	e7b9      	b.n	80d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>
    815c:	f240 518f 	movw	r1, #1423	; 0x58f
    8160:	2030      	movs	r0, #48	; 0x30
    8162:	f7fc fa03 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8166:	0000      	.short	0x0000
    8168:	20000144 	.word	0x20000144
    816c:	b570      	push	{r4, r5, r6, lr}
    816e:	4604      	mov	r4, r0
    8170:	f004 f830 	bl	c1d4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8174:	2864      	cmp	r0, #100	; 0x64
    8176:	d901      	bls.n	817c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>
    8178:	4605      	mov	r5, r0
    817a:	e000      	b.n	817e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17e>
    817c:	2564      	movs	r5, #100	; 0x64
    817e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8182:	2128      	movs	r1, #40	; 0x28
    8184:	f006 fd05 	bl	eb92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    8188:	4428      	add	r0, r5
    818a:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    818e:	f500 7010 	add.w	r0, r0, #576	; 0x240
    8192:	180e      	adds	r6, r1, r0
    8194:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8198:	2128      	movs	r1, #40	; 0x28
    819a:	f006 fcfa 	bl	eb92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    819e:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    81a2:	4620      	mov	r0, r4
    81a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    81a6:	f006 f80b 	bl	e1c0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    81aa:	4605      	mov	r5, r0
    81ac:	4632      	mov	r2, r6
    81ae:	4620      	mov	r0, r4
    81b0:	6921      	ldr	r1, [r4, #16]
    81b2:	f006 f805 	bl	e1c0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    81b6:	4907      	ldr	r1, [pc, #28]	; (81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>)
    81b8:	4285      	cmp	r5, r0
    81ba:	60c8      	str	r0, [r1, #12]
    81bc:	d200      	bcs.n	81c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0>
    81be:	4628      	mov	r0, r5
    81c0:	6088      	str	r0, [r1, #8]
    81c2:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    81c6:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    81ca:	6108      	str	r0, [r1, #16]
    81cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81d0:	f7fa bd18 	b.w	2c04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    81d4:	20000144 	.word	0x20000144
    81d8:	00000000 	.word	0x00000000
    81dc:	00010000 	.word	0x00010000
    81e0:	00000000 	.word	0x00000000
    81e4:	00010000 	.word	0x00010000
    81e8:	00000000 	.word	0x00000000
    81ec:	00001e14 	.word	0x00001e14
    81f0:	00001130 	.word	0x00001130
    81f4:	00fa01f4 	.word	0x00fa01f4
    81f8:	00640096 	.word	0x00640096
    81fc:	0032004b 	.word	0x0032004b
    8200:	0014001e 	.word	0x0014001e
    8204:	0005000a 	.word	0x0005000a
    8208:	00010002 	.word	0x00010002

0000820c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    820c:	4806      	ldr	r0, [pc, #24]	; (8228 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    820e:	4905      	ldr	r1, [pc, #20]	; (8224 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8210:	6501      	str	r1, [r0, #80]	; 0x50
    8212:	4906      	ldr	r1, [pc, #24]	; (822c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8214:	6541      	str	r1, [r0, #84]	; 0x54
    8216:	4807      	ldr	r0, [pc, #28]	; (8234 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8218:	4905      	ldr	r1, [pc, #20]	; (8230 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    821a:	6501      	str	r1, [r0, #80]	; 0x50
    821c:	4906      	ldr	r1, [pc, #24]	; (8238 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    821e:	6541      	str	r1, [r0, #84]	; 0x54
    8220:	4770      	bx	lr
    8222:	0000      	.short	0x0000
    8224:	000095a1 	.word	0x000095a1
    8228:	20000178 	.word	0x20000178
    822c:	00009685 	.word	0x00009685
    8230:	0000f477 	.word	0x0000f477
    8234:	20000224 	.word	0x20000224
    8238:	0000f4a1 	.word	0x0000f4a1

0000823c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    823c:	481e      	ldr	r0, [pc, #120]	; (82b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    823e:	491d      	ldr	r1, [pc, #116]	; (82b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8240:	6081      	str	r1, [r0, #8]
    8242:	491e      	ldr	r1, [pc, #120]	; (82bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8244:	6041      	str	r1, [r0, #4]
    8246:	491e      	ldr	r1, [pc, #120]	; (82c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8248:	6001      	str	r1, [r0, #0]
    824a:	491e      	ldr	r1, [pc, #120]	; (82c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    824c:	6281      	str	r1, [r0, #40]	; 0x28
    824e:	491e      	ldr	r1, [pc, #120]	; (82c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8250:	62c1      	str	r1, [r0, #44]	; 0x2c
    8252:	491e      	ldr	r1, [pc, #120]	; (82cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8254:	60c1      	str	r1, [r0, #12]
    8256:	491e      	ldr	r1, [pc, #120]	; (82d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8258:	6181      	str	r1, [r0, #24]
    825a:	491e      	ldr	r1, [pc, #120]	; (82d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    825c:	6301      	str	r1, [r0, #48]	; 0x30
    825e:	491e      	ldr	r1, [pc, #120]	; (82d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8260:	6201      	str	r1, [r0, #32]
    8262:	491e      	ldr	r1, [pc, #120]	; (82dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8264:	64c1      	str	r1, [r0, #76]	; 0x4c
    8266:	491e      	ldr	r1, [pc, #120]	; (82e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8268:	6481      	str	r1, [r0, #72]	; 0x48
    826a:	491e      	ldr	r1, [pc, #120]	; (82e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    826c:	6441      	str	r1, [r0, #68]	; 0x44
    826e:	491e      	ldr	r1, [pc, #120]	; (82e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8270:	6341      	str	r1, [r0, #52]	; 0x34
    8272:	491e      	ldr	r1, [pc, #120]	; (82ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8274:	61c1      	str	r1, [r0, #28]
    8276:	491e      	ldr	r1, [pc, #120]	; (82f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8278:	6241      	str	r1, [r0, #36]	; 0x24
    827a:	481f      	ldr	r0, [pc, #124]	; (82f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    827c:	491d      	ldr	r1, [pc, #116]	; (82f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    827e:	6081      	str	r1, [r0, #8]
    8280:	491e      	ldr	r1, [pc, #120]	; (82fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8282:	61c1      	str	r1, [r0, #28]
    8284:	491e      	ldr	r1, [pc, #120]	; (8300 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    8286:	6241      	str	r1, [r0, #36]	; 0x24
    8288:	491e      	ldr	r1, [pc, #120]	; (8304 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    828a:	62c1      	str	r1, [r0, #44]	; 0x2c
    828c:	491e      	ldr	r1, [pc, #120]	; (8308 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    828e:	6101      	str	r1, [r0, #16]
    8290:	491e      	ldr	r1, [pc, #120]	; (830c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8292:	6141      	str	r1, [r0, #20]
    8294:	491e      	ldr	r1, [pc, #120]	; (8310 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8296:	6441      	str	r1, [r0, #68]	; 0x44
    8298:	491e      	ldr	r1, [pc, #120]	; (8314 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    829a:	6341      	str	r1, [r0, #52]	; 0x34
    829c:	491e      	ldr	r1, [pc, #120]	; (8318 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    829e:	6181      	str	r1, [r0, #24]
    82a0:	491e      	ldr	r1, [pc, #120]	; (831c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    82a2:	6301      	str	r1, [r0, #48]	; 0x30
    82a4:	491e      	ldr	r1, [pc, #120]	; (8320 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    82a6:	6481      	str	r1, [r0, #72]	; 0x48
    82a8:	491e      	ldr	r1, [pc, #120]	; (8324 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    82aa:	64c1      	str	r1, [r0, #76]	; 0x4c
    82ac:	491e      	ldr	r1, [pc, #120]	; (8328 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    82ae:	6381      	str	r1, [r0, #56]	; 0x38
    82b0:	4770      	bx	lr
    82b2:	0000      	.short	0x0000
    82b4:	00009989 	.word	0x00009989
    82b8:	20000178 	.word	0x20000178
    82bc:	0000937d 	.word	0x0000937d
    82c0:	000093e5 	.word	0x000093e5
    82c4:	0000f339 	.word	0x0000f339
    82c8:	0000f383 	.word	0x0000f383
    82cc:	000094a1 	.word	0x000094a1
    82d0:	0000f39b 	.word	0x0000f39b
    82d4:	00009ab9 	.word	0x00009ab9
    82d8:	00009559 	.word	0x00009559
    82dc:	0000f30b 	.word	0x0000f30b
    82e0:	0000f2e5 	.word	0x0000f2e5
    82e4:	00009929 	.word	0x00009929
    82e8:	00009959 	.word	0x00009959
    82ec:	000099c1 	.word	0x000099c1
    82f0:	00009565 	.word	0x00009565
    82f4:	0000f66d 	.word	0x0000f66d
    82f8:	20000224 	.word	0x20000224
    82fc:	00009bc9 	.word	0x00009bc9
    8300:	0000f473 	.word	0x0000f473
    8304:	0000f50b 	.word	0x0000f50b
    8308:	0000f44d 	.word	0x0000f44d
    830c:	0000f5cd 	.word	0x0000f5cd
    8310:	0000f57b 	.word	0x0000f57b
    8314:	0000f5ab 	.word	0x0000f5ab
    8318:	0000f5eb 	.word	0x0000f5eb
    831c:	0000f68f 	.word	0x0000f68f
    8320:	0000f4d1 	.word	0x0000f4d1
    8324:	0000f4fb 	.word	0x0000f4fb
    8328:	0000f5c9 	.word	0x0000f5c9

0000832c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    832c:	4806      	ldr	r0, [pc, #24]	; (8348 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    832e:	4905      	ldr	r1, [pc, #20]	; (8344 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8330:	6581      	str	r1, [r0, #88]	; 0x58
    8332:	4906      	ldr	r1, [pc, #24]	; (834c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8334:	6601      	str	r1, [r0, #96]	; 0x60
    8336:	4807      	ldr	r0, [pc, #28]	; (8354 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8338:	4905      	ldr	r1, [pc, #20]	; (8350 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    833a:	6581      	str	r1, [r0, #88]	; 0x58
    833c:	4906      	ldr	r1, [pc, #24]	; (8358 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    833e:	65c1      	str	r1, [r0, #92]	; 0x5c
    8340:	4770      	bx	lr
    8342:	0000      	.short	0x0000
    8344:	000096fd 	.word	0x000096fd
    8348:	20000178 	.word	0x20000178
    834c:	000097d9 	.word	0x000097d9
    8350:	0000f531 	.word	0x0000f531
    8354:	20000224 	.word	0x20000224
    8358:	0000f55b 	.word	0x0000f55b

0000835c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    835e:	4c7c      	ldr	r4, [pc, #496]	; (8550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    8360:	2101      	movs	r1, #1
    8362:	f1a4 0610 	sub.w	r6, r4, #16
    8366:	7021      	strb	r1, [r4, #0]
    8368:	2500      	movs	r5, #0
    836a:	6060      	str	r0, [r4, #4]
    836c:	8075      	strh	r5, [r6, #2]
    836e:	7075      	strb	r5, [r6, #1]
    8370:	7035      	strb	r5, [r6, #0]
    8372:	f880 121b 	strb.w	r1, [r0, #539]	; 0x21b
    8376:	8800      	ldrh	r0, [r0, #0]
    8378:	f7fc fd06 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    837c:	b180      	cbz	r0, 83a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    837e:	6860      	ldr	r0, [r4, #4]
    8380:	8800      	ldrh	r0, [r0, #0]
    8382:	f7fc ff6b 	bl	525c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8386:	6860      	ldr	r0, [r4, #4]
    8388:	8800      	ldrh	r0, [r0, #0]
    838a:	f7fc ff0f 	bl	51ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    838e:	6860      	ldr	r0, [r4, #4]
    8390:	f8b0 1212 	ldrh.w	r1, [r0, #530]	; 0x212
    8394:	b1c9      	cbz	r1, 83ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8396:	3080      	adds	r0, #128	; 0x80
    8398:	f006 ff5b 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    839c:	b118      	cbz	r0, 83a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    839e:	e014      	b.n	83ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    83a0:	f640 41dc 	movw	r1, #3292	; 0xcdc
    83a4:	e06c      	b.n	8480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    83a6:	6860      	ldr	r0, [r4, #4]
    83a8:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    83ac:	f88d 1000 	strb.w	r1, [sp]
    83b0:	9900      	ldr	r1, [sp, #0]
    83b2:	9100      	str	r1, [sp, #0]
    83b4:	f89d 1000 	ldrb.w	r1, [sp]
    83b8:	b139      	cbz	r1, 83ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    83ba:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    83be:	2301      	movs	r3, #1
    83c0:	4619      	mov	r1, r3
    83c2:	3080      	adds	r0, #128	; 0x80
    83c4:	f005 fab1 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83c8:	b180      	cbz	r0, 83ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    83ca:	6860      	ldr	r0, [r4, #4]
    83cc:	3080      	adds	r0, #128	; 0x80
    83ce:	f006 ff40 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    83d2:	b128      	cbz	r0, 83e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    83d4:	6860      	ldr	r0, [r4, #4]
    83d6:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    83da:	bf00      	nop
    83dc:	f000 fbbc 	bl	8b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fc>
    83e0:	6860      	ldr	r0, [r4, #4]
    83e2:	f890 121d 	ldrb.w	r1, [r0, #541]	; 0x21d
    83e6:	b189      	cbz	r1, 840c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    83e8:	80b5      	strh	r5, [r6, #4]
    83ea:	e01e      	b.n	842a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    83ec:	6860      	ldr	r0, [r4, #4]
    83ee:	f8a0 50c8 	strh.w	r5, [r0, #200]	; 0xc8
    83f2:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    83f6:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    83fa:	2100      	movs	r1, #0
    83fc:	2002      	movs	r0, #2
    83fe:	f000 fe69 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8402:	6860      	ldr	r0, [r4, #4]
    8404:	f880 521a 	strb.w	r5, [r0, #538]	; 0x21a
    8408:	2002      	movs	r0, #2
    840a:	e7e7      	b.n	83dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    840c:	f890 11c2 	ldrb.w	r1, [r0, #450]	; 0x1c2
    8410:	f88d 1000 	strb.w	r1, [sp]
    8414:	9900      	ldr	r1, [sp, #0]
    8416:	9100      	str	r1, [sp, #0]
    8418:	f89d 1000 	ldrb.w	r1, [sp]
    841c:	b919      	cbnz	r1, 8426 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    841e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    8420:	8b02      	ldrh	r2, [r0, #24]
    8422:	4291      	cmp	r1, r2
    8424:	d800      	bhi.n	8428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    8426:	8b01      	ldrh	r1, [r0, #24]
    8428:	80b1      	strh	r1, [r6, #4]
    842a:	f8b0 1216 	ldrh.w	r1, [r0, #534]	; 0x216
    842e:	1e49      	subs	r1, r1, #1
    8430:	b28f      	uxth	r7, r1
    8432:	f8b0 1218 	ldrh.w	r1, [r0, #536]	; 0x218
    8436:	4439      	add	r1, r7
    8438:	f8a0 1218 	strh.w	r1, [r0, #536]	; 0x218
    843c:	f830 1fc4 	ldrh.w	r1, [r0, #196]!
    8440:	4439      	add	r1, r7
    8442:	8001      	strh	r1, [r0, #0]
    8444:	f001 fbee 	bl	9c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    8448:	b120      	cbz	r0, 8454 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    844a:	6860      	ldr	r0, [r4, #4]
    844c:	f850 1fb8 	ldr.w	r1, [r0, #184]!
    8450:	4439      	add	r1, r7
    8452:	6001      	str	r1, [r0, #0]
    8454:	6861      	ldr	r1, [r4, #4]
    8456:	f8b1 0212 	ldrh.w	r0, [r1, #530]	; 0x212
    845a:	2801      	cmp	r0, #1
    845c:	d802      	bhi.n	8464 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    845e:	1c40      	adds	r0, r0, #1
    8460:	f8a1 0212 	strh.w	r0, [r1, #530]	; 0x212
    8464:	b10f      	cbz	r7, 846a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    8466:	f881 5224 	strb.w	r5, [r1, #548]	; 0x224
    846a:	f881 521a 	strb.w	r5, [r1, #538]	; 0x21a
    846e:	f8b1 2216 	ldrh.w	r2, [r1, #534]	; 0x216
    8472:	f101 0080 	add.w	r0, r1, #128	; 0x80
    8476:	f005 fbcf 	bl	dc18 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    847a:	b120      	cbz	r0, 8486 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    847c:	f640 5123 	movw	r1, #3363	; 0xd23
    8480:	2031      	movs	r0, #49	; 0x31
    8482:	f7fc f873 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8486:	6860      	ldr	r0, [r4, #4]
    8488:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    848c:	290b      	cmp	r1, #11
    848e:	d001      	beq.n	8494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    8490:	290c      	cmp	r1, #12
    8492:	d119      	bne.n	84c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8494:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
    8498:	f8b0 32bc 	ldrh.w	r3, [r0, #700]	; 0x2bc
    849c:	1ad2      	subs	r2, r2, r3
    849e:	b212      	sxth	r2, r2
    84a0:	2a00      	cmp	r2, #0
    84a2:	db11      	blt.n	84c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    84a4:	f8d0 12be 	ldr.w	r1, [r0, #702]	; 0x2be
    84a8:	f8c0 109e 	str.w	r1, [r0, #158]	; 0x9e
    84ac:	f890 12c2 	ldrb.w	r1, [r0, #706]	; 0x2c2
    84b0:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    84b4:	2103      	movs	r1, #3
    84b6:	f7fd fe51 	bl	615c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    84ba:	6860      	ldr	r0, [r4, #4]
    84bc:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    84c0:	21ff      	movs	r1, #255	; 0xff
    84c2:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    84c6:	e026      	b.n	8516 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    84c8:	2926      	cmp	r1, #38	; 0x26
    84ca:	d111      	bne.n	84f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    84cc:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    84d0:	f8b0 22bc 	ldrh.w	r2, [r0, #700]	; 0x2bc
    84d4:	1a89      	subs	r1, r1, r2
    84d6:	b209      	sxth	r1, r1
    84d8:	2900      	cmp	r1, #0
    84da:	db09      	blt.n	84f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    84dc:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    84e0:	f000 feb2 	bl	9248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeec>
    84e4:	2800      	cmp	r0, #0
    84e6:	6860      	ldr	r0, [r4, #4]
    84e8:	f880 5134 	strb.w	r5, [r0, #308]	; 0x134
    84ec:	d029      	beq.n	8542 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    84ee:	e012      	b.n	8516 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    84f0:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    84f4:	2926      	cmp	r1, #38	; 0x26
    84f6:	d001      	beq.n	84fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    84f8:	2928      	cmp	r1, #40	; 0x28
    84fa:	d10c      	bne.n	8516 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    84fc:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    8500:	f8b0 22bc 	ldrh.w	r2, [r0, #700]	; 0x2bc
    8504:	1a89      	subs	r1, r1, r2
    8506:	b209      	sxth	r1, r1
    8508:	2900      	cmp	r1, #0
    850a:	db04      	blt.n	8516 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    850c:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
    8510:	f000 fe9a 	bl	9248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeec>
    8514:	b1a8      	cbz	r0, 8542 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8516:	480f      	ldr	r0, [pc, #60]	; (8554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    8518:	9000      	str	r0, [sp, #0]
    851a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    851e:	4b0e      	ldr	r3, [pc, #56]	; (8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8520:	4a0e      	ldr	r2, [pc, #56]	; (855c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8522:	f7fc ff27 	bl	5374 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8526:	6860      	ldr	r0, [r4, #4]
    8528:	2301      	movs	r3, #1
    852a:	2105      	movs	r1, #5
    852c:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8530:	3080      	adds	r0, #128	; 0x80
    8532:	f005 f9fa 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8536:	2800      	cmp	r0, #0
    8538:	d009      	beq.n	854e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    853a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    853e:	f7fc bf13 	b.w	5368 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8542:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8546:	2100      	movs	r1, #0
    8548:	4608      	mov	r0, r1
    854a:	f000 bbd1 	b.w	8cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x994>
    854e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8550:	20000170 	.word	0x20000170
    8554:	00008cf1 	.word	0x00008cf1
    8558:	00008815 	.word	0x00008815
    855c:	00009195 	.word	0x00009195
    8560:	4804      	ldr	r0, [pc, #16]	; (8574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    8562:	2100      	movs	r1, #0
    8564:	6840      	ldr	r0, [r0, #4]
    8566:	f820 1fd0 	strh.w	r1, [r0, #208]!
    856a:	7881      	ldrb	r1, [r0, #2]
    856c:	1c49      	adds	r1, r1, #1
    856e:	7081      	strb	r1, [r0, #2]
    8570:	4770      	bx	lr
    8572:	0000      	.short	0x0000
    8574:	20000170 	.word	0x20000170
    8578:	4807      	ldr	r0, [pc, #28]	; (8598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    857a:	b510      	push	{r4, lr}
    857c:	6841      	ldr	r1, [r0, #4]
    857e:	f811 0fd2 	ldrb.w	r0, [r1, #210]!
    8582:	1e40      	subs	r0, r0, #1
    8584:	b240      	sxtb	r0, r0
    8586:	7008      	strb	r0, [r1, #0]
    8588:	2800      	cmp	r0, #0
    858a:	da04      	bge.n	8596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    858c:	f240 11f3 	movw	r1, #499	; 0x1f3
    8590:	2031      	movs	r0, #49	; 0x31
    8592:	f7fb ffeb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8596:	bd10      	pop	{r4, pc}
    8598:	20000170 	.word	0x20000170
    859c:	491d      	ldr	r1, [pc, #116]	; (8614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    859e:	b508      	push	{r3, lr}
    85a0:	6849      	ldr	r1, [r1, #4]
    85a2:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    85a6:	b1c0      	cbz	r0, 85da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    85a8:	2a12      	cmp	r2, #18
    85aa:	d006      	beq.n	85ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    85ac:	2a16      	cmp	r2, #22
    85ae:	d007      	beq.n	85c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    85b0:	2a17      	cmp	r2, #23
    85b2:	d009      	beq.n	85c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26c>
    85b4:	2a1d      	cmp	r2, #29
    85b6:	d128      	bne.n	860a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    85b8:	e009      	b.n	85ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    85ba:	2101      	movs	r1, #1
    85bc:	200b      	movs	r0, #11
    85be:	e008      	b.n	85d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    85c0:	4814      	ldr	r0, [pc, #80]	; (8614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    85c2:	f006 fefb 	bl	f3bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    85c6:	e006      	b.n	85d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    85c8:	f000 fda2 	bl	9110 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb4>
    85cc:	e003      	b.n	85d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    85ce:	2101      	movs	r1, #1
    85d0:	2006      	movs	r0, #6
    85d2:	f000 fd7f 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    85d6:	2001      	movs	r0, #1
    85d8:	bd08      	pop	{r3, pc}
    85da:	2a23      	cmp	r2, #35	; 0x23
    85dc:	d004      	beq.n	85e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    85de:	2a2f      	cmp	r2, #47	; 0x2f
    85e0:	d113      	bne.n	860a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    85e2:	2101      	movs	r1, #1
    85e4:	2011      	movs	r0, #17
    85e6:	e7f4      	b.n	85d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    85e8:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    85ec:	2802      	cmp	r0, #2
    85ee:	d00e      	beq.n	860e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    85f0:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    85f4:	2801      	cmp	r0, #1
    85f6:	d108      	bne.n	860a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    85f8:	f891 0135 	ldrb.w	r0, [r1, #309]	; 0x135
    85fc:	f88d 0000 	strb.w	r0, [sp]
    8600:	9800      	ldr	r0, [sp, #0]
    8602:	9000      	str	r0, [sp, #0]
    8604:	f89d 0000 	ldrb.w	r0, [sp]
    8608:	b108      	cbz	r0, 860e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    860a:	2000      	movs	r0, #0
    860c:	bd08      	pop	{r3, pc}
    860e:	2101      	movs	r1, #1
    8610:	2017      	movs	r0, #23
    8612:	e7de      	b.n	85d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    8614:	20000170 	.word	0x20000170
    8618:	b538      	push	{r3, r4, r5, lr}
    861a:	2800      	cmp	r0, #0
    861c:	d172      	bne.n	8704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    861e:	4c3a      	ldr	r4, [pc, #232]	; (8708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ac>)
    8620:	6860      	ldr	r0, [r4, #4]
    8622:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    8626:	07ca      	lsls	r2, r1, #31
    8628:	d002      	beq.n	8630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    862a:	2101      	movs	r1, #1
    862c:	2009      	movs	r0, #9
    862e:	e065      	b.n	86fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8630:	078a      	lsls	r2, r1, #30
    8632:	d50a      	bpl.n	864a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    8634:	2101      	movs	r1, #1
    8636:	200c      	movs	r0, #12
    8638:	f000 fd4c 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    863c:	6860      	ldr	r0, [r4, #4]
    863e:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    8642:	f041 0101 	orr.w	r1, r1, #1
    8646:	7001      	strb	r1, [r0, #0]
    8648:	e05a      	b.n	8700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>
    864a:	074a      	lsls	r2, r1, #29
    864c:	d502      	bpl.n	8654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    864e:	2101      	movs	r1, #1
    8650:	2013      	movs	r0, #19
    8652:	e053      	b.n	86fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8654:	070a      	lsls	r2, r1, #28
    8656:	d506      	bpl.n	8666 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    8658:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    865c:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    8660:	2101      	movs	r1, #1
    8662:	2007      	movs	r0, #7
    8664:	e04a      	b.n	86fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8666:	f011 0f30 	tst.w	r1, #48	; 0x30
    866a:	d043      	beq.n	86f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    866c:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    8670:	f88d 1000 	strb.w	r1, [sp]
    8674:	9900      	ldr	r1, [sp, #0]
    8676:	9100      	str	r1, [sp, #0]
    8678:	f89d 1000 	ldrb.w	r1, [sp]
    867c:	bbb9      	cbnz	r1, 86ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x392>
    867e:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    8682:	2500      	movs	r5, #0
    8684:	f88d 1000 	strb.w	r1, [sp]
    8688:	9900      	ldr	r1, [sp, #0]
    868a:	9100      	str	r1, [sp, #0]
    868c:	f89d 1000 	ldrb.w	r1, [sp]
    8690:	b1c1      	cbz	r1, 86c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    8692:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8696:	2926      	cmp	r1, #38	; 0x26
    8698:	d02a      	beq.n	86f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    869a:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    869e:	2926      	cmp	r1, #38	; 0x26
    86a0:	d026      	beq.n	86f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    86a2:	2300      	movs	r3, #0
    86a4:	f200 22be 	addw	r2, r0, #702	; 0x2be
    86a8:	f500 7195 	add.w	r1, r0, #298	; 0x12a
    86ac:	f005 fd7a 	bl	e1a4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    86b0:	6860      	ldr	r0, [r4, #4]
    86b2:	f850 1f84 	ldr.w	r1, [r0, #132]!
    86b6:	f021 0120 	bic.w	r1, r1, #32
    86ba:	f041 0110 	orr.w	r1, r1, #16
    86be:	6001      	str	r1, [r0, #0]
    86c0:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    86c4:	6860      	ldr	r0, [r4, #4]
    86c6:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    86ca:	06c9      	lsls	r1, r1, #27
    86cc:	d51a      	bpl.n	8704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    86ce:	f005 fd84 	bl	e1da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    86d2:	f000 f925 	bl	8920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    86d6:	6861      	ldr	r1, [r4, #4]
    86d8:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    86dc:	8bc2      	ldrh	r2, [r0, #30]
    86de:	f8a1 211e 	strh.w	r2, [r1, #286]	; 0x11e
    86e2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    86e4:	f8a1 0120 	strh.w	r0, [r1, #288]	; 0x120
    86e8:	2101      	movs	r1, #1
    86ea:	2015      	movs	r0, #21
    86ec:	e006      	b.n	86fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    86ee:	e009      	b.n	8704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    86f0:	2301      	movs	r3, #1
    86f2:	e7d7      	b.n	86a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    86f4:	0648      	lsls	r0, r1, #25
    86f6:	d505      	bpl.n	8704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    86f8:	2101      	movs	r1, #1
    86fa:	2024      	movs	r0, #36	; 0x24
    86fc:	f000 fcea 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8700:	2001      	movs	r0, #1
    8702:	bd38      	pop	{r3, r4, r5, pc}
    8704:	2000      	movs	r0, #0
    8706:	bd38      	pop	{r3, r4, r5, pc}
    8708:	20000170 	.word	0x20000170
    870c:	b570      	push	{r4, r5, r6, lr}
    870e:	460d      	mov	r5, r1
    8710:	4606      	mov	r6, r0
    8712:	f005 fc04 	bl	df1e <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    8716:	4604      	mov	r4, r0
    8718:	4630      	mov	r0, r6
    871a:	f005 fc02 	bl	df22 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    871e:	4629      	mov	r1, r5
    8720:	f000 f81e 	bl	8760 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x404>
    8724:	b1b8      	cbz	r0, 8756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fa>
    8726:	4620      	mov	r0, r4
    8728:	f005 f9a9 	bl	da7e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    872c:	0001      	movs	r1, r0
    872e:	d00d      	beq.n	874c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    8730:	480a      	ldr	r0, [pc, #40]	; (875c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x400>)
    8732:	6840      	ldr	r0, [r0, #4]
    8734:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    8738:	428a      	cmp	r2, r1
    873a:	d007      	beq.n	874c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    873c:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    8740:	2901      	cmp	r1, #1
    8742:	d005      	beq.n	8750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f4>
    8744:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8748:	4220      	tst	r0, r4
    874a:	d004      	beq.n	8756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fa>
    874c:	2001      	movs	r0, #1
    874e:	bd70      	pop	{r4, r5, r6, pc}
    8750:	f890 0137 	ldrb.w	r0, [r0, #311]	; 0x137
    8754:	e7f8      	b.n	8748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    8756:	2000      	movs	r0, #0
    8758:	bd70      	pop	{r4, r5, r6, pc}
    875a:	0000      	.short	0x0000
    875c:	20000170 	.word	0x20000170
    8760:	b570      	push	{r4, r5, r6, lr}
    8762:	460d      	mov	r5, r1
    8764:	4604      	mov	r4, r0
    8766:	f005 f98a 	bl	da7e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    876a:	b350      	cbz	r0, 87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    876c:	4916      	ldr	r1, [pc, #88]	; (87c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46c>)
    876e:	6849      	ldr	r1, [r1, #4]
    8770:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    8774:	4282      	cmp	r2, r0
    8776:	d024      	beq.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    8778:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
    877c:	2b01      	cmp	r3, #1
    877e:	d005      	beq.n	878c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>
    8780:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    8784:	4223      	tst	r3, r4
    8786:	d013      	beq.n	87b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>
    8788:	b11d      	cbz	r5, 8792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x436>
    878a:	e01a      	b.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    878c:	f891 3136 	ldrb.w	r3, [r1, #310]	; 0x136
    8790:	e7f8      	b.n	8784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    8792:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    8796:	4221      	tst	r1, r4
    8798:	d113      	bne.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    879a:	b15a      	cbz	r2, 87b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
    879c:	2a04      	cmp	r2, #4
    879e:	d00e      	beq.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    87a0:	2804      	cmp	r0, #4
    87a2:	d00c      	beq.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    87a4:	2a08      	cmp	r2, #8
    87a6:	d00a      	beq.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    87a8:	2808      	cmp	r0, #8
    87aa:	d008      	beq.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    87ac:	4282      	cmp	r2, r0
    87ae:	d908      	bls.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    87b0:	2000      	movs	r0, #0
    87b2:	bd70      	pop	{r4, r5, r6, pc}
    87b4:	f240 1193 	movw	r1, #403	; 0x193
    87b8:	2006      	movs	r0, #6
    87ba:	f7fb fed7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87be:	4282      	cmp	r2, r0
    87c0:	d3f6      	bcc.n	87b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>
    87c2:	2001      	movs	r0, #1
    87c4:	bd70      	pop	{r4, r5, r6, pc}
    87c6:	0000      	.short	0x0000
    87c8:	20000170 	.word	0x20000170
    87cc:	b510      	push	{r4, lr}
    87ce:	4c10      	ldr	r4, [pc, #64]	; (8810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b4>)
    87d0:	2301      	movs	r3, #1
    87d2:	2100      	movs	r1, #0
    87d4:	6860      	ldr	r0, [r4, #4]
    87d6:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    87da:	3080      	adds	r0, #128	; 0x80
    87dc:	f005 f8a5 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    87e0:	b140      	cbz	r0, 87f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x498>
    87e2:	6860      	ldr	r0, [r4, #4]
    87e4:	2301      	movs	r3, #1
    87e6:	2104      	movs	r1, #4
    87e8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    87ec:	3080      	adds	r0, #128	; 0x80
    87ee:	f005 f89c 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    87f2:	b108      	cbz	r0, 87f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>
    87f4:	2000      	movs	r0, #0
    87f6:	bd10      	pop	{r4, pc}
    87f8:	6860      	ldr	r0, [r4, #4]
    87fa:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
    87fe:	2800      	cmp	r0, #0
    8800:	d0f9      	beq.n	87f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    8802:	2100      	movs	r1, #0
    8804:	2012      	movs	r0, #18
    8806:	f000 fc65 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    880a:	2001      	movs	r0, #1
    880c:	bd10      	pop	{r4, pc}
    880e:	0000      	.short	0x0000
    8810:	20000170 	.word	0x20000170
    8814:	490d      	ldr	r1, [pc, #52]	; (884c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f0>)
    8816:	4602      	mov	r2, r0
    8818:	7848      	ldrb	r0, [r1, #1]
    881a:	b9a0      	cbnz	r0, 8846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    881c:	f101 0010 	add.w	r0, r1, #16
    8820:	6840      	ldr	r0, [r0, #4]
    8822:	b142      	cbz	r2, 8836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4da>
    8824:	7889      	ldrb	r1, [r1, #2]
    8826:	0709      	lsls	r1, r1, #28
    8828:	d503      	bpl.n	8832 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d6>
    882a:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
    882e:	2808      	cmp	r0, #8
    8830:	d009      	beq.n	8846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    8832:	2001      	movs	r0, #1
    8834:	4770      	bx	lr
    8836:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    883a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    883c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    883e:	428a      	cmp	r2, r1
    8840:	d801      	bhi.n	8846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    8842:	f7ff b92d 	b.w	7aa0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8846:	2000      	movs	r0, #0
    8848:	4770      	bx	lr
    884a:	0000      	.short	0x0000
    884c:	20000160 	.word	0x20000160
    8850:	b538      	push	{r3, r4, r5, lr}
    8852:	4c32      	ldr	r4, [pc, #200]	; (891c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c0>)
    8854:	4605      	mov	r5, r0
    8856:	6860      	ldr	r0, [r4, #4]
    8858:	3080      	adds	r0, #128	; 0x80
    885a:	f006 fcfa 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    885e:	2800      	cmp	r0, #0
    8860:	d15b      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8862:	2d00      	cmp	r5, #0
    8864:	d159      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8866:	6860      	ldr	r0, [r4, #4]
    8868:	2301      	movs	r3, #1
    886a:	4619      	mov	r1, r3
    886c:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    8870:	3080      	adds	r0, #128	; 0x80
    8872:	f005 f85a 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8876:	2800      	cmp	r0, #0
    8878:	d14f      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    887a:	6860      	ldr	r0, [r4, #4]
    887c:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    8880:	f88d 1000 	strb.w	r1, [sp]
    8884:	9900      	ldr	r1, [sp, #0]
    8886:	9100      	str	r1, [sp, #0]
    8888:	f89d 2000 	ldrb.w	r2, [sp]
    888c:	2100      	movs	r1, #0
    888e:	b142      	cbz	r2, 88a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x546>
    8890:	f8a0 10c8 	strh.w	r1, [r0, #200]	; 0xc8
    8894:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    8898:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    889c:	2100      	movs	r1, #0
    889e:	2002      	movs	r0, #2
    88a0:	e030      	b.n	8904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    88a2:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    88a6:	2301      	movs	r3, #1
    88a8:	2104      	movs	r1, #4
    88aa:	3080      	adds	r0, #128	; 0x80
    88ac:	f005 f83d 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    88b0:	4605      	mov	r5, r0
    88b2:	f7ff feb1 	bl	8618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    88b6:	2800      	cmp	r0, #0
    88b8:	d12f      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88ba:	4628      	mov	r0, r5
    88bc:	f7ff fe6e 	bl	859c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    88c0:	2800      	cmp	r0, #0
    88c2:	d12a      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88c4:	f7ff ff82 	bl	87cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x470>
    88c8:	2800      	cmp	r0, #0
    88ca:	d126      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88cc:	6860      	ldr	r0, [r4, #4]
    88ce:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    88d2:	290a      	cmp	r1, #10
    88d4:	d01a      	beq.n	890c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    88d6:	2d00      	cmp	r5, #0
    88d8:	d11f      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88da:	f000 fb27 	bl	8f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd0>
    88de:	2800      	cmp	r0, #0
    88e0:	d11b      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88e2:	6860      	ldr	r0, [r4, #4]
    88e4:	2301      	movs	r3, #1
    88e6:	2100      	movs	r1, #0
    88e8:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    88ec:	3080      	adds	r0, #128	; 0x80
    88ee:	f005 f81c 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    88f2:	2800      	cmp	r0, #0
    88f4:	d011      	beq.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88f6:	6860      	ldr	r0, [r4, #4]
    88f8:	f890 02b4 	ldrb.w	r0, [r0, #692]	; 0x2b4
    88fc:	2800      	cmp	r0, #0
    88fe:	d00c      	beq.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8900:	2100      	movs	r1, #0
    8902:	20ff      	movs	r0, #255	; 0xff
    8904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8908:	f000 bbe4 	b.w	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    890c:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    8910:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    8914:	2100      	movs	r1, #0
    8916:	2007      	movs	r0, #7
    8918:	e7f4      	b.n	8904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    891a:	bd38      	pop	{r3, r4, r5, pc}
    891c:	20000170 	.word	0x20000170
    8920:	4808      	ldr	r0, [pc, #32]	; (8944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>)
    8922:	6843      	ldr	r3, [r0, #4]
    8924:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    8928:	2801      	cmp	r0, #1
    892a:	d006      	beq.n	893a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5de>
    892c:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
    8930:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    8934:	8818      	ldrh	r0, [r3, #0]
    8936:	f005 bc0d 	b.w	e154 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    893a:	2002      	movs	r0, #2
    893c:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    8940:	4770      	bx	lr
    8942:	0000      	.short	0x0000
    8944:	20000170 	.word	0x20000170
    8948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    894a:	4d2b      	ldr	r5, [pc, #172]	; (89f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    894c:	0006      	movs	r6, r0
    894e:	f105 0410 	add.w	r4, r5, #16
    8952:	d133      	bne.n	89bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8954:	f000 f8b6 	bl	8ac4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x768>
    8958:	f000 f852 	bl	8a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
    895c:	0006      	movs	r6, r0
    895e:	d12d      	bne.n	89bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8960:	8869      	ldrh	r1, [r5, #2]
    8962:	0748      	lsls	r0, r1, #29
    8964:	d506      	bpl.n	8974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x618>
    8966:	6860      	ldr	r0, [r4, #4]
    8968:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
    896c:	2807      	cmp	r0, #7
    896e:	d101      	bne.n	8974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x618>
    8970:	2001      	movs	r0, #1
    8972:	7028      	strb	r0, [r5, #0]
    8974:	0788      	lsls	r0, r1, #30
    8976:	d516      	bpl.n	89a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    8978:	68a8      	ldr	r0, [r5, #8]
    897a:	78c0      	ldrb	r0, [r0, #3]
    897c:	282b      	cmp	r0, #43	; 0x2b
    897e:	d207      	bcs.n	8990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    8980:	491e      	ldr	r1, [pc, #120]	; (89fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
    8982:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    8986:	b119      	cbz	r1, 8990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    8988:	481b      	ldr	r0, [pc, #108]	; (89f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    898a:	3010      	adds	r0, #16
    898c:	4788      	blx	r1
    898e:	e00a      	b.n	89a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    8990:	28ff      	cmp	r0, #255	; 0xff
    8992:	d004      	beq.n	899e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x642>
    8994:	f640 01c1 	movw	r1, #2241	; 0x8c1
    8998:	2031      	movs	r0, #49	; 0x31
    899a:	f7fb fde7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    899e:	4816      	ldr	r0, [pc, #88]	; (89f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    89a0:	3010      	adds	r0, #16
    89a2:	f006 fd4a 	bl	f43a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x206>
    89a6:	78a8      	ldrb	r0, [r5, #2]
    89a8:	06c0      	lsls	r0, r0, #27
    89aa:	d507      	bpl.n	89bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    89ac:	6860      	ldr	r0, [r4, #4]
    89ae:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    89b2:	290b      	cmp	r1, #11
    89b4:	d102      	bne.n	89bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    89b6:	210c      	movs	r1, #12
    89b8:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    89bc:	7868      	ldrb	r0, [r5, #1]
    89be:	0700      	lsls	r0, r0, #28
    89c0:	d518      	bpl.n	89f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    89c2:	6860      	ldr	r0, [r4, #4]
    89c4:	2301      	movs	r3, #1
    89c6:	2105      	movs	r1, #5
    89c8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    89cc:	3080      	adds	r0, #128	; 0x80
    89ce:	f004 ffac 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89d2:	b108      	cbz	r0, 89d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67c>
    89d4:	2608      	movs	r6, #8
    89d6:	e00d      	b.n	89f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    89d8:	2500      	movs	r5, #0
    89da:	4669      	mov	r1, sp
    89dc:	4628      	mov	r0, r5
    89de:	9500      	str	r5, [sp, #0]
    89e0:	f7fc fd8e 	bl	5500 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    89e4:	9800      	ldr	r0, [sp, #0]
    89e6:	b128      	cbz	r0, 89f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    89e8:	7205      	strb	r5, [r0, #8]
    89ea:	2227      	movs	r2, #39	; 0x27
    89ec:	6861      	ldr	r1, [r4, #4]
    89ee:	9800      	ldr	r0, [sp, #0]
    89f0:	f7fd fd2e 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    89f4:	4630      	mov	r0, r6
    89f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    89f8:	20000160 	.word	0x20000160
    89fc:	20000224 	.word	0x20000224
    8a00:	b570      	push	{r4, r5, r6, lr}
    8a02:	4d2e      	ldr	r5, [pc, #184]	; (8abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8a04:	2000      	movs	r0, #0
    8a06:	78a9      	ldrb	r1, [r5, #2]
    8a08:	07c9      	lsls	r1, r1, #31
    8a0a:	d017      	beq.n	8a3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e0>
    8a0c:	68e8      	ldr	r0, [r5, #12]
    8a0e:	f105 0410 	add.w	r4, r5, #16
    8a12:	2301      	movs	r3, #1
    8a14:	78c6      	ldrb	r6, [r0, #3]
    8a16:	6860      	ldr	r0, [r4, #4]
    8a18:	2105      	movs	r1, #5
    8a1a:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8a1e:	3080      	adds	r0, #128	; 0x80
    8a20:	f004 ff83 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a24:	b158      	cbz	r0, 8a3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    8a26:	1eb6      	subs	r6, r6, #2
    8a28:	2e0a      	cmp	r6, #10
    8a2a:	d206      	bcs.n	8a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    8a2c:	e8df f006 	tbb	[pc, r6]
    8a30:	05050707 	.word	0x05050707
    8a34:	05050707 	.word	0x05050707
    8a38:	0707      	.short	0x0707
    8a3a:	2008      	movs	r0, #8
    8a3c:	bd70      	pop	{r4, r5, r6, pc}
    8a3e:	68e8      	ldr	r0, [r5, #12]
    8a40:	f7fd fc6c 	bl	631c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    8a44:	b138      	cbz	r0, 8a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    8a46:	68e8      	ldr	r0, [r5, #12]
    8a48:	78c5      	ldrb	r5, [r0, #3]
    8a4a:	b155      	cbz	r5, 8a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8a4c:	2d01      	cmp	r5, #1
    8a4e:	d008      	beq.n	8a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8a50:	2d16      	cmp	r5, #22
    8a52:	d11a      	bne.n	8a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8a54:	e005      	b.n	8a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8a5a:	4818      	ldr	r0, [pc, #96]	; (8abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8a5c:	3010      	adds	r0, #16
    8a5e:	f000 bd87 	b.w	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    8a62:	6860      	ldr	r0, [r4, #4]
    8a64:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    8a68:	f004 ffb7 	bl	d9da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8a6c:	b168      	cbz	r0, 8a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8a6e:	6860      	ldr	r0, [r4, #4]
    8a70:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8a74:	2921      	cmp	r1, #33	; 0x21
    8a76:	d008      	beq.n	8a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8a78:	2922      	cmp	r1, #34	; 0x22
    8a7a:	d003      	beq.n	8a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    8a7c:	2d16      	cmp	r5, #22
    8a7e:	d00e      	beq.n	8a9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    8a80:	2002      	movs	r0, #2
    8a82:	bd70      	pop	{r4, r5, r6, pc}
    8a84:	212e      	movs	r1, #46	; 0x2e
    8a86:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8a8a:	2d2b      	cmp	r5, #43	; 0x2b
    8a8c:	d209      	bcs.n	8aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    8a8e:	480c      	ldr	r0, [pc, #48]	; (8ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x764>)
    8a90:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    8a94:	b129      	cbz	r1, 8aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    8a96:	4809      	ldr	r0, [pc, #36]	; (8abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8a98:	3010      	adds	r0, #16
    8a9a:	4788      	blx	r1
    8a9c:	e005      	b.n	8aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74e>
    8a9e:	2020      	movs	r0, #32
    8aa0:	bd70      	pop	{r4, r5, r6, pc}
    8aa2:	4806      	ldr	r0, [pc, #24]	; (8abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8aa4:	3010      	adds	r0, #16
    8aa6:	f000 fd63 	bl	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    8aaa:	6862      	ldr	r2, [r4, #4]
    8aac:	e9f2 133e 	ldrd	r1, r3, [r2, #248]!	; 0xf8
    8ab0:	1c49      	adds	r1, r1, #1
    8ab2:	f143 0300 	adc.w	r3, r3, #0
    8ab6:	e9c2 1300 	strd	r1, r3, [r2]
    8aba:	bd70      	pop	{r4, r5, r6, pc}
    8abc:	20000160 	.word	0x20000160
    8ac0:	20000178 	.word	0x20000178
    8ac4:	b570      	push	{r4, r5, r6, lr}
    8ac6:	4e23      	ldr	r6, [pc, #140]	; (8b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f8>)
    8ac8:	78b0      	ldrb	r0, [r6, #2]
    8aca:	0700      	lsls	r0, r0, #28
    8acc:	d540      	bpl.n	8b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f4>
    8ace:	f106 0410 	add.w	r4, r6, #16
    8ad2:	6860      	ldr	r0, [r4, #4]
    8ad4:	3080      	adds	r0, #128	; 0x80
    8ad6:	f006 fbbc 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8ada:	b148      	cbz	r0, 8af0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x794>
    8adc:	6860      	ldr	r0, [r4, #4]
    8ade:	21fe      	movs	r1, #254	; 0xfe
    8ae0:	2500      	movs	r5, #0
    8ae2:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    8ae6:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8aea:	291b      	cmp	r1, #27
    8aec:	d10c      	bne.n	8b08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ac>
    8aee:	e004      	b.n	8afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x79e>
    8af0:	f640 01cd 	movw	r1, #2253	; 0x8cd
    8af4:	2031      	movs	r0, #49	; 0x31
    8af6:	f7fb fd39 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8afa:	f880 50d3 	strb.w	r5, [r0, #211]	; 0xd3
    8afe:	f7ff fd3b 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8b02:	6860      	ldr	r0, [r4, #4]
    8b04:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    8b08:	6860      	ldr	r0, [r4, #4]
    8b0a:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8b0e:	2921      	cmp	r1, #33	; 0x21
    8b10:	d002      	beq.n	8b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7bc>
    8b12:	2930      	cmp	r1, #48	; 0x30
    8b14:	d113      	bne.n	8b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    8b16:	e00b      	b.n	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d4>
    8b18:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    8b1c:	f004 ff5d 	bl	d9da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8b20:	b108      	cbz	r0, 8b26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ca>
    8b22:	202e      	movs	r0, #46	; 0x2e
    8b24:	e000      	b.n	8b28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7cc>
    8b26:	2022      	movs	r0, #34	; 0x22
    8b28:	6861      	ldr	r1, [r4, #4]
    8b2a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    8b2e:	e006      	b.n	8b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    8b30:	2101      	movs	r1, #1
    8b32:	f880 12b5 	strb.w	r1, [r0, #693]	; 0x2b5
    8b36:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
    8b3a:	f880 50ce 	strb.w	r5, [r0, #206]	; 0xce
    8b3e:	6860      	ldr	r0, [r4, #4]
    8b40:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
    8b44:	2908      	cmp	r1, #8
    8b46:	d103      	bne.n	8b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f4>
    8b48:	2102      	movs	r1, #2
    8b4a:	7031      	strb	r1, [r6, #0]
    8b4c:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    8b50:	bd70      	pop	{r4, r5, r6, pc}
    8b52:	0000      	.short	0x0000
    8b54:	20000160 	.word	0x20000160
    8b58:	b538      	push	{r3, r4, r5, lr}
    8b5a:	4605      	mov	r5, r0
    8b5c:	4668      	mov	r0, sp
    8b5e:	f7fc fb67 	bl	5230 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    8b62:	b308      	cbz	r0, 8ba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84c>
    8b64:	2222      	movs	r2, #34	; 0x22
    8b66:	2100      	movs	r1, #0
    8b68:	9800      	ldr	r0, [sp, #0]
    8b6a:	f003 fd10 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8b6e:	2103      	movs	r1, #3
    8b70:	9800      	ldr	r0, [sp, #0]
    8b72:	f005 f9ee 	bl	df52 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    8b76:	9800      	ldr	r0, [sp, #0]
    8b78:	7801      	ldrb	r1, [r0, #0]
    8b7a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    8b7e:	7001      	strb	r1, [r0, #0]
    8b80:	4629      	mov	r1, r5
    8b82:	f7fd fbdb 	bl	633c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    8b86:	4c59      	ldr	r4, [pc, #356]	; (8cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    8b88:	2d11      	cmp	r5, #17
    8b8a:	d02d      	beq.n	8be8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88c>
    8b8c:	dc0f      	bgt.n	8bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x852>
    8b8e:	f1a5 0502 	sub.w	r5, r5, #2
    8b92:	2d0d      	cmp	r5, #13
    8b94:	d21f      	bcs.n	8bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87a>
    8b96:	e8df f005 	tbb	[pc, r5]
    8b9a:	1e21      	.short	0x1e21
    8b9c:	219e9e51 	.word	0x219e9e51
    8ba0:	9e1e5e1e 	.word	0x9e1e5e1e
    8ba4:	008c343a 	.word	0x008c343a
    8ba8:	f640 314c 	movw	r1, #2892	; 0xb4c
    8bac:	e099      	b.n	8ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x986>
    8bae:	2d17      	cmp	r5, #23
    8bb0:	d070      	beq.n	8c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    8bb2:	dc08      	bgt.n	8bc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    8bb4:	f1a5 0512 	sub.w	r5, r5, #18
    8bb8:	2d05      	cmp	r5, #5
    8bba:	d20c      	bcs.n	8bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87a>
    8bbc:	e8df f005 	tbb	[pc, r5]
    8bc0:	50508b8b 	.word	0x50508b8b
    8bc4:	0033      	.short	0x0033
    8bc6:	2d23      	cmp	r5, #35	; 0x23
    8bc8:	d077      	beq.n	8cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8bca:	2d24      	cmp	r5, #36	; 0x24
    8bcc:	d075      	beq.n	8cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8bce:	2d25      	cmp	r5, #37	; 0x25
    8bd0:	d073      	beq.n	8cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8bd2:	2dff      	cmp	r5, #255	; 0xff
    8bd4:	d077      	beq.n	8cc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    8bd6:	f640 31e3 	movw	r1, #3043	; 0xbe3
    8bda:	e082      	b.n	8ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x986>
    8bdc:	6860      	ldr	r0, [r4, #4]
    8bde:	9900      	ldr	r1, [sp, #0]
    8be0:	f890 011e 	ldrb.w	r0, [r0, #286]	; 0x11e
    8be4:	7108      	strb	r0, [r1, #4]
    8be6:	e076      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8be8:	6860      	ldr	r0, [r4, #4]
    8bea:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    8bee:	9800      	ldr	r0, [sp, #0]
    8bf0:	f005 f99b 	bl	df2a <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    8bf4:	6860      	ldr	r0, [r4, #4]
    8bf6:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    8bfa:	9800      	ldr	r0, [sp, #0]
    8bfc:	f005 f999 	bl	df32 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    8c00:	e069      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c02:	6861      	ldr	r1, [r4, #4]
    8c04:	9800      	ldr	r0, [sp, #0]
    8c06:	f891 111a 	ldrb.w	r1, [r1, #282]	; 0x11a
    8c0a:	7101      	strb	r1, [r0, #4]
    8c0c:	e063      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c0e:	9800      	ldr	r0, [sp, #0]
    8c10:	210c      	movs	r1, #12
    8c12:	7101      	strb	r1, [r0, #4]
    8c14:	2159      	movs	r1, #89	; 0x59
    8c16:	7141      	strb	r1, [r0, #5]
    8c18:	2100      	movs	r1, #0
    8c1a:	7181      	strb	r1, [r0, #6]
    8c1c:	21fa      	movs	r1, #250	; 0xfa
    8c1e:	71c1      	strb	r1, [r0, #7]
    8c20:	2111      	movs	r1, #17
    8c22:	7201      	strb	r1, [r0, #8]
    8c24:	e057      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c26:	9800      	ldr	r0, [sp, #0]
    8c28:	f8d4 1004 	ldr.w	r1, [r4, #4]
    8c2c:	f891 1136 	ldrb.w	r1, [r1, #310]	; 0x136
    8c30:	7101      	strb	r1, [r0, #4]
    8c32:	6861      	ldr	r1, [r4, #4]
    8c34:	f891 1137 	ldrb.w	r1, [r1, #311]	; 0x137
    8c38:	7141      	strb	r1, [r0, #5]
    8c3a:	e04c      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c3c:	6861      	ldr	r1, [r4, #4]
    8c3e:	9800      	ldr	r0, [sp, #0]
    8c40:	f501 710c 	add.w	r1, r1, #560	; 0x230
    8c44:	f005 f92c 	bl	dea0 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    8c48:	6861      	ldr	r1, [r4, #4]
    8c4a:	9800      	ldr	r0, [sp, #0]
    8c4c:	f501 718a 	add.w	r1, r1, #276	; 0x114
    8c50:	f005 f923 	bl	de9a <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    8c54:	e03f      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c56:	4825      	ldr	r0, [pc, #148]	; (8cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    8c58:	9900      	ldr	r1, [sp, #0]
    8c5a:	f7fd ff1f 	bl	6a9c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    8c5e:	e03a      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c60:	6860      	ldr	r0, [r4, #4]
    8c62:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    8c66:	9800      	ldr	r0, [sp, #0]
    8c68:	f005 f97b 	bl	df62 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    8c6c:	6860      	ldr	r0, [r4, #4]
    8c6e:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    8c72:	9800      	ldr	r0, [sp, #0]
    8c74:	f005 f979 	bl	df6a <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    8c78:	6860      	ldr	r0, [r4, #4]
    8c7a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    8c7e:	9800      	ldr	r0, [sp, #0]
    8c80:	f005 f977 	bl	df72 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    8c84:	6860      	ldr	r0, [r4, #4]
    8c86:	f8b0 111e 	ldrh.w	r1, [r0, #286]	; 0x11e
    8c8a:	9800      	ldr	r0, [sp, #0]
    8c8c:	f005 f975 	bl	df7a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    8c90:	e021      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c92:	e7ff      	b.n	8c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    8c94:	6861      	ldr	r1, [r4, #4]
    8c96:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    8c9a:	2801      	cmp	r0, #1
    8c9c:	9800      	ldr	r0, [sp, #0]
    8c9e:	d0c5      	beq.n	8c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d0>
    8ca0:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    8ca4:	7101      	strb	r1, [r0, #4]
    8ca6:	6861      	ldr	r1, [r4, #4]
    8ca8:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    8cac:	e7c4      	b.n	8c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8dc>
    8cae:	e004      	b.n	8cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8cb0:	e009      	b.n	8cc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    8cb2:	9800      	ldr	r0, [sp, #0]
    8cb4:	f7fd feac 	bl	6a10 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    8cb8:	e00d      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8cba:	4a0c      	ldr	r2, [pc, #48]	; (8cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    8cbc:	4628      	mov	r0, r5
    8cbe:	9900      	ldr	r1, [sp, #0]
    8cc0:	f006 fd12 	bl	f6e8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    8cc4:	e007      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8cc6:	6860      	ldr	r0, [r4, #4]
    8cc8:	f890 22b7 	ldrb.w	r2, [r0, #695]	; 0x2b7
    8ccc:	f8d0 12b8 	ldr.w	r1, [r0, #696]	; 0x2b8
    8cd0:	9800      	ldr	r0, [sp, #0]
    8cd2:	f005 f930 	bl	df36 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    8cd6:	f7fc fa85 	bl	51e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8cda:	2800      	cmp	r0, #0
    8cdc:	d104      	bne.n	8ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98c>
    8cde:	f640 31e7 	movw	r1, #3047	; 0xbe7
    8ce2:	2031      	movs	r0, #49	; 0x31
    8ce4:	f7fb fc42 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ce8:	bd38      	pop	{r3, r4, r5, pc}
    8cea:	0000      	.short	0x0000
    8cec:	20000170 	.word	0x20000170
    8cf0:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8cf4:	4e8c      	ldr	r6, [pc, #560]	; (8f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbcc>)
    8cf6:	468a      	mov	sl, r1
    8cf8:	6870      	ldr	r0, [r6, #4]
    8cfa:	8800      	ldrh	r0, [r0, #0]
    8cfc:	f7fc f844 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8d00:	0007      	movs	r7, r0
    8d02:	d00c      	beq.n	8d1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c2>
    8d04:	f1a6 0510 	sub.w	r5, r6, #16
    8d08:	f04f 0400 	mov.w	r4, #0
    8d0c:	8868      	ldrh	r0, [r5, #2]
    8d0e:	05c0      	lsls	r0, r0, #23
    8d10:	d50a      	bpl.n	8d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9cc>
    8d12:	6870      	ldr	r0, [r6, #4]
    8d14:	f8a0 40c4 	strh.w	r4, [r0, #196]	; 0xc4
    8d18:	f880 4224 	strb.w	r4, [r0, #548]	; 0x224
    8d1c:	e009      	b.n	8d32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d6>
    8d1e:	f640 61d2 	movw	r1, #3794	; 0xed2
    8d22:	2031      	movs	r0, #49	; 0x31
    8d24:	f7fb fc22 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d28:	6871      	ldr	r1, [r6, #4]
    8d2a:	f831 0fc4 	ldrh.w	r0, [r1, #196]!
    8d2e:	1c40      	adds	r0, r0, #1
    8d30:	8008      	strh	r0, [r1, #0]
    8d32:	f000 ff77 	bl	9c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    8d36:	f04f 0901 	mov.w	r9, #1
    8d3a:	b338      	cbz	r0, 8d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8d3c:	8868      	ldrh	r0, [r5, #2]
    8d3e:	0500      	lsls	r0, r0, #20
    8d40:	d506      	bpl.n	8d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    8d42:	6870      	ldr	r0, [r6, #4]
    8d44:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
    8d48:	b111      	cbz	r1, 8d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    8d4a:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8
    8d4e:	e01d      	b.n	8d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8d50:	6871      	ldr	r1, [r6, #4]
    8d52:	f8d1 00b8 	ldr.w	r0, [r1, #184]	; 0xb8
    8d56:	1c40      	adds	r0, r0, #1
    8d58:	f8c1 00b8 	str.w	r0, [r1, #184]	; 0xb8
    8d5c:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    8d60:	4282      	cmp	r2, r0
    8d62:	d301      	bcc.n	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0c>
    8d64:	1a13      	subs	r3, r2, r0
    8d66:	e000      	b.n	8d6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    8d68:	2300      	movs	r3, #0
    8d6a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    8d6e:	f10c 0c05 	add.w	ip, ip, #5
    8d72:	4563      	cmp	r3, ip
    8d74:	d801      	bhi.n	8d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    8d76:	f881 90c2 	strb.w	r9, [r1, #194]	; 0xc2
    8d7a:	4290      	cmp	r0, r2
    8d7c:	d306      	bcc.n	8d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8d7e:	f501 70a9 	add.w	r0, r1, #338	; 0x152
    8d82:	220e      	movs	r2, #14
    8d84:	f8c1 40b8 	str.w	r4, [r1, #184]	; 0xb8
    8d88:	f7fd fb62 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8d8c:	8868      	ldrh	r0, [r5, #2]
    8d8e:	f04f 0b02 	mov.w	fp, #2
    8d92:	f410 7f40 	tst.w	r0, #768	; 0x300
    8d96:	d00e      	beq.n	8db6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    8d98:	6870      	ldr	r0, [r6, #4]
    8d9a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8d9e:	b111      	cbz	r1, 8da6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4a>
    8da0:	2903      	cmp	r1, #3
    8da2:	d108      	bne.n	8db6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    8da4:	e002      	b.n	8dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa50>
    8da6:	f880 9099 	strb.w	r9, [r0, #153]	; 0x99
    8daa:	e001      	b.n	8db0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa54>
    8dac:	f880 b099 	strb.w	fp, [r0, #153]	; 0x99
    8db0:	2101      	movs	r1, #1
    8db2:	f7fe fe9b 	bl	7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8db6:	6870      	ldr	r0, [r6, #4]
    8db8:	46b0      	mov	r8, r6
    8dba:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8dbe:	2901      	cmp	r1, #1
    8dc0:	d104      	bne.n	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa70>
    8dc2:	8869      	ldrh	r1, [r5, #2]
    8dc4:	0549      	lsls	r1, r1, #21
    8dc6:	d501      	bpl.n	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa70>
    8dc8:	f880 b099 	strb.w	fp, [r0, #153]	; 0x99
    8dcc:	9900      	ldr	r1, [sp, #0]
    8dce:	2900      	cmp	r1, #0
    8dd0:	d179      	bne.n	8ec6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
    8dd2:	78a9      	ldrb	r1, [r5, #2]
    8dd4:	0649      	lsls	r1, r1, #25
    8dd6:	d502      	bpl.n	8dde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    8dd8:	f8a0 4238 	strh.w	r4, [r0, #568]	; 0x238
    8ddc:	e004      	b.n	8de8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa8c>
    8dde:	f8b0 1238 	ldrh.w	r1, [r0, #568]	; 0x238
    8de2:	1c49      	adds	r1, r1, #1
    8de4:	f8a0 1238 	strh.w	r1, [r0, #568]	; 0x238
    8de8:	4650      	mov	r0, sl
    8dea:	f7ff fdad 	bl	8948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ec>
    8dee:	ea40 000a 	orr.w	r0, r0, sl
    8df2:	4682      	mov	sl, r0
    8df4:	f7ff fd2c 	bl	8850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f4>
    8df8:	f8d8 6004 	ldr.w	r6, [r8, #4]
    8dfc:	f8b6 0218 	ldrh.w	r0, [r6, #536]	; 0x218
    8e00:	1c40      	adds	r0, r0, #1
    8e02:	f8a6 0218 	strh.w	r0, [r6, #536]	; 0x218
    8e06:	f896 021c 	ldrb.w	r0, [r6, #540]	; 0x21c
    8e0a:	b128      	cbz	r0, 8e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xabc>
    8e0c:	f7fc fbd8 	bl	55c0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    8e10:	b1b0      	cbz	r0, 8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8e12:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8e16:	e013      	b.n	8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8e18:	f7fc fa8c 	bl	5334 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8e1c:	b108      	cbz	r0, 8e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac6>
    8e1e:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8e22:	f7fc fa81 	bl	5328 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8e26:	b158      	cbz	r0, 8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8e28:	f896 0224 	ldrb.w	r0, [r6, #548]	; 0x224
    8e2c:	1c40      	adds	r0, r0, #1
    8e2e:	b2c0      	uxtb	r0, r0
    8e30:	f886 0224 	strb.w	r0, [r6, #548]	; 0x224
    8e34:	2802      	cmp	r0, #2
    8e36:	d903      	bls.n	8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8e38:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8e3c:	f886 4224 	strb.w	r4, [r6, #548]	; 0x224
    8e40:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8e44:	4646      	mov	r6, r8
    8e46:	2301      	movs	r3, #1
    8e48:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8e4c:	2100      	movs	r1, #0
    8e4e:	3080      	adds	r0, #128	; 0x80
    8e50:	f004 fd6b 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e54:	b920      	cbnz	r0, 8e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    8e56:	6870      	ldr	r0, [r6, #4]
    8e58:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    8e5c:	280c      	cmp	r0, #12
    8e5e:	d160      	bne.n	8f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8e60:	6870      	ldr	r0, [r6, #4]
    8e62:	2301      	movs	r3, #1
    8e64:	2100      	movs	r1, #0
    8e66:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    8e6a:	3080      	adds	r0, #128	; 0x80
    8e6c:	f004 fd5d 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e70:	b350      	cbz	r0, 8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e72:	6870      	ldr	r0, [r6, #4]
    8e74:	2301      	movs	r3, #1
    8e76:	2100      	movs	r1, #0
    8e78:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    8e7c:	3080      	adds	r0, #128	; 0x80
    8e7e:	f004 fd54 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e82:	b308      	cbz	r0, 8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e84:	6870      	ldr	r0, [r6, #4]
    8e86:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8e8a:	2902      	cmp	r1, #2
    8e8c:	d149      	bne.n	8f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8e8e:	f890 0224 	ldrb.w	r0, [r0, #548]	; 0x224
    8e92:	b9c8      	cbnz	r0, 8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e94:	4638      	mov	r0, r7
    8e96:	f004 f84f 	bl	cf38 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8e9a:	b1a8      	cbz	r0, 8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e9c:	6870      	ldr	r0, [r6, #4]
    8e9e:	3080      	adds	r0, #128	; 0x80
    8ea0:	f006 f9d7 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8ea4:	b980      	cbnz	r0, 8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8ea6:	6871      	ldr	r1, [r6, #4]
    8ea8:	f8b1 0212 	ldrh.w	r0, [r1, #530]	; 0x212
    8eac:	2801      	cmp	r0, #1
    8eae:	d938      	bls.n	8f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8eb0:	f881 921a 	strb.w	r9, [r1, #538]	; 0x21a
    8eb4:	f8b1 00c6 	ldrh.w	r0, [r1, #198]	; 0xc6
    8eb8:	f8b1 20c4 	ldrh.w	r2, [r1, #196]	; 0xc4
    8ebc:	1e83      	subs	r3, r0, #2
    8ebe:	429a      	cmp	r2, r3
    8ec0:	db03      	blt.n	8eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6e>
    8ec2:	2001      	movs	r0, #1
    8ec4:	e004      	b.n	8ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb74>
    8ec6:	e01d      	b.n	8f04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    8ec8:	e02b      	b.n	8f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8eca:	1a80      	subs	r0, r0, r2
    8ecc:	1e40      	subs	r0, r0, #1
    8ece:	b280      	uxth	r0, r0
    8ed0:	f8b1 2218 	ldrh.w	r2, [r1, #536]	; 0x218
    8ed4:	88ab      	ldrh	r3, [r5, #4]
    8ed6:	429a      	cmp	r2, r3
    8ed8:	d301      	bcc.n	8ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    8eda:	2201      	movs	r2, #1
    8edc:	e002      	b.n	8ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    8ede:	1a9a      	subs	r2, r3, r2
    8ee0:	1c52      	adds	r2, r2, #1
    8ee2:	b292      	uxth	r2, r2
    8ee4:	4290      	cmp	r0, r2
    8ee6:	d900      	bls.n	8eea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8e>
    8ee8:	4610      	mov	r0, r2
    8eea:	2801      	cmp	r0, #1
    8eec:	d102      	bne.n	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb98>
    8eee:	bf00      	nop
    8ef0:	f881 421a 	strb.w	r4, [r1, #538]	; 0x21a
    8ef4:	6871      	ldr	r1, [r6, #4]
    8ef6:	f8b1 208c 	ldrh.w	r2, [r1, #140]	; 0x8c
    8efa:	4410      	add	r0, r2
    8efc:	f8a1 0214 	strh.w	r0, [r1, #532]	; 0x214
    8f00:	f000 ff64 	bl	9dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a70>
    8f04:	78a8      	ldrb	r0, [r5, #2]
    8f06:	4652      	mov	r2, sl
    8f08:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8f0c:	9800      	ldr	r0, [sp, #0]
    8f0e:	f000 fe9d 	bl	9c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    8f12:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8f16:	f880 421b 	strb.w	r4, [r0, #539]	; 0x21b
    8f1a:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8f1e:	f7fc b94b 	b.w	51b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8f22:	2001      	movs	r0, #1
    8f24:	6871      	ldr	r1, [r6, #4]
    8f26:	e7e3      	b.n	8ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb94>
    8f28:	20000170 	.word	0x20000170
    8f2c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8f2e:	4c68      	ldr	r4, [pc, #416]	; (90d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd74>)
    8f30:	2301      	movs	r3, #1
    8f32:	2100      	movs	r1, #0
    8f34:	6860      	ldr	r0, [r4, #4]
    8f36:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    8f3a:	3080      	adds	r0, #128	; 0x80
    8f3c:	f004 fcf5 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f40:	2800      	cmp	r0, #0
    8f42:	d07a      	beq.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcde>
    8f44:	6860      	ldr	r0, [r4, #4]
    8f46:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    8f4a:	2500      	movs	r5, #0
    8f4c:	b139      	cbz	r1, 8f5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc02>
    8f4e:	2100      	movs	r1, #0
    8f50:	200e      	movs	r0, #14
    8f52:	f000 f8bf 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8f56:	6860      	ldr	r0, [r4, #4]
    8f58:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    8f5c:	e0b5      	b.n	90ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8f5e:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    8f62:	b119      	cbz	r1, 8f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc10>
    8f64:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    8f68:	0789      	lsls	r1, r1, #30
    8f6a:	d016      	beq.n	8f9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    8f6c:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    8f70:	f88d 1004 	strb.w	r1, [sp, #4]
    8f74:	9901      	ldr	r1, [sp, #4]
    8f76:	9101      	str	r1, [sp, #4]
    8f78:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8f7c:	b141      	cbz	r1, 8f90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc34>
    8f7e:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    8f82:	f88d 1000 	strb.w	r1, [sp]
    8f86:	9900      	ldr	r1, [sp, #0]
    8f88:	9100      	str	r1, [sp, #0]
    8f8a:	f89d 1000 	ldrb.w	r1, [sp]
    8f8e:	b189      	cbz	r1, 8fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc58>
    8f90:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    8f94:	2901      	cmp	r1, #1
    8f96:	d030      	beq.n	8ffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9e>
    8f98:	e040      	b.n	901c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc0>
    8f9a:	2100      	movs	r1, #0
    8f9c:	200c      	movs	r0, #12
    8f9e:	f000 f899 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8fa2:	6860      	ldr	r0, [r4, #4]
    8fa4:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    8fa8:	f041 0101 	orr.w	r1, r1, #1
    8fac:	7001      	strb	r1, [r0, #0]
    8fae:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    8fb2:	e08a      	b.n	90ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8fb4:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8fb8:	2926      	cmp	r1, #38	; 0x26
    8fba:	d01c      	beq.n	8ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9a>
    8fbc:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8fc0:	2926      	cmp	r1, #38	; 0x26
    8fc2:	d018      	beq.n	8ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9a>
    8fc4:	f05f 0300 	movs.w	r3, #0
    8fc8:	f200 22be 	addw	r2, r0, #702	; 0x2be
    8fcc:	f500 7195 	add.w	r1, r0, #298	; 0x12a
    8fd0:	f005 f8e8 	bl	e1a4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8fd4:	6860      	ldr	r0, [r4, #4]
    8fd6:	f880 512a 	strb.w	r5, [r0, #298]	; 0x12a
    8fda:	2100      	movs	r1, #0
    8fdc:	2014      	movs	r0, #20
    8fde:	f000 f879 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8fe2:	6861      	ldr	r1, [r4, #4]
    8fe4:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8fe8:	8bc2      	ldrh	r2, [r0, #30]
    8fea:	f8a1 211e 	strh.w	r2, [r1, #286]	; 0x11e
    8fee:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8ff0:	f8a1 0120 	strh.w	r0, [r1, #288]	; 0x120
    8ff4:	e069      	b.n	90ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8ff6:	2301      	movs	r3, #1
    8ff8:	e7e6      	b.n	8fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    8ffa:	f890 1135 	ldrb.w	r1, [r0, #309]	; 0x135
    8ffe:	f88d 1000 	strb.w	r1, [sp]
    9002:	9900      	ldr	r1, [sp, #0]
    9004:	9100      	str	r1, [sp, #0]
    9006:	f89d 1000 	ldrb.w	r1, [sp]
    900a:	b939      	cbnz	r1, 901c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc0>
    900c:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9010:	2301      	movs	r3, #1
    9012:	210b      	movs	r1, #11
    9014:	3080      	adds	r0, #128	; 0x80
    9016:	f004 fc88 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    901a:	b178      	cbz	r0, 903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    901c:	6860      	ldr	r0, [r4, #4]
    901e:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    9022:	f88d 1000 	strb.w	r1, [sp]
    9026:	9900      	ldr	r1, [sp, #0]
    9028:	9100      	str	r1, [sp, #0]
    902a:	f89d 1000 	ldrb.w	r1, [sp]
    902e:	b3b9      	cbz	r1, 90a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9030:	2100      	movs	r1, #0
    9032:	2023      	movs	r0, #35	; 0x23
    9034:	f000 f84e 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9038:	e047      	b.n	90ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    903a:	e030      	b.n	909e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    903c:	6860      	ldr	r0, [r4, #4]
    903e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9042:	f006 f90e 	bl	f262 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9046:	4605      	mov	r5, r0
    9048:	6860      	ldr	r0, [r4, #4]
    904a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    904e:	f006 f908 	bl	f262 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9052:	4606      	mov	r6, r0
    9054:	6860      	ldr	r0, [r4, #4]
    9056:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
    905a:	4628      	mov	r0, r5
    905c:	f006 f90c 	bl	f278 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9060:	b150      	cbz	r0, 9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    9062:	6860      	ldr	r0, [r4, #4]
    9064:	f890 1137 	ldrb.w	r1, [r0, #311]	; 0x137
    9068:	4630      	mov	r0, r6
    906a:	f006 f905 	bl	f278 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    906e:	b118      	cbz	r0, 9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    9070:	2000      	movs	r0, #0
    9072:	f000 f93f 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9076:	e011      	b.n	909c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    9078:	6860      	ldr	r0, [r4, #4]
    907a:	2301      	movs	r3, #1
    907c:	2103      	movs	r1, #3
    907e:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9082:	3080      	adds	r0, #128	; 0x80
    9084:	f004 fc51 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9088:	b940      	cbnz	r0, 909c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    908a:	6860      	ldr	r0, [r4, #4]
    908c:	2301      	movs	r3, #1
    908e:	2102      	movs	r1, #2
    9090:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9094:	3080      	adds	r0, #128	; 0x80
    9096:	f004 fc48 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    909a:	b110      	cbz	r0, 90a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd46>
    909c:	2000      	movs	r0, #0
    909e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    90a0:	e002      	b.n	90a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    90a2:	2100      	movs	r1, #0
    90a4:	2016      	movs	r0, #22
    90a6:	e7c5      	b.n	9034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
    90a8:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    90ac:	f88d 0000 	strb.w	r0, [sp]
    90b0:	9800      	ldr	r0, [sp, #0]
    90b2:	9000      	str	r0, [sp, #0]
    90b4:	f89d 0000 	ldrb.w	r0, [sp]
    90b8:	2800      	cmp	r0, #0
    90ba:	d0f0      	beq.n	909e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    90bc:	2100      	movs	r1, #0
    90be:	2025      	movs	r0, #37	; 0x25
    90c0:	f000 f808 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    90c4:	6860      	ldr	r0, [r4, #4]
    90c6:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    90ca:	2001      	movs	r0, #1
    90cc:	e7e7      	b.n	909e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    90ce:	0000      	.short	0x0000
    90d0:	20000170 	.word	0x20000170
    90d4:	b570      	push	{r4, r5, r6, lr}
    90d6:	4c0d      	ldr	r4, [pc, #52]	; (910c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb0>)
    90d8:	4606      	mov	r6, r0
    90da:	460d      	mov	r5, r1
    90dc:	6860      	ldr	r0, [r4, #4]
    90de:	3080      	adds	r0, #128	; 0x80
    90e0:	f006 f8b7 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    90e4:	b120      	cbz	r0, 90f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd94>
    90e6:	f640 31ec 	movw	r1, #3052	; 0xbec
    90ea:	2031      	movs	r0, #49	; 0x31
    90ec:	f7fb fa3e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90f0:	6862      	ldr	r2, [r4, #4]
    90f2:	2000      	movs	r0, #0
    90f4:	2d01      	cmp	r5, #1
    90f6:	f882 611c 	strb.w	r6, [r2, #284]	; 0x11c
    90fa:	d004      	beq.n	9106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdaa>
    90fc:	f822 0fca 	strh.w	r0, [r2, #202]!
    9100:	2001      	movs	r0, #1
    9102:	7110      	strb	r0, [r2, #4]
    9104:	bd70      	pop	{r4, r5, r6, pc}
    9106:	f8a2 00d0 	strh.w	r0, [r2, #208]	; 0xd0
    910a:	bd70      	pop	{r4, r5, r6, pc}
    910c:	20000170 	.word	0x20000170
    9110:	b538      	push	{r3, r4, r5, lr}
    9112:	4c1f      	ldr	r4, [pc, #124]	; (9190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe34>)
    9114:	2500      	movs	r5, #0
    9116:	6860      	ldr	r0, [r4, #4]
    9118:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    911c:	2901      	cmp	r1, #1
    911e:	d00c      	beq.n	913a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdde>
    9120:	2902      	cmp	r1, #2
    9122:	d133      	bne.n	918c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe30>
    9124:	f890 10d4 	ldrb.w	r1, [r0, #212]	; 0xd4
    9128:	2900      	cmp	r1, #0
    912a:	f04f 0106 	mov.w	r1, #6
    912e:	d01a      	beq.n	9166 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    9130:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    9134:	2101      	movs	r1, #1
    9136:	2002      	movs	r0, #2
    9138:	e023      	b.n	9182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    913a:	f890 1205 	ldrb.w	r1, [r0, #517]	; 0x205
    913e:	f88d 1000 	strb.w	r1, [sp]
    9142:	9900      	ldr	r1, [sp, #0]
    9144:	9100      	str	r1, [sp, #0]
    9146:	f89d 1000 	ldrb.w	r1, [sp]
    914a:	2900      	cmp	r1, #0
    914c:	d11e      	bne.n	918c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe30>
    914e:	f500 7380 	add.w	r3, r0, #256	; 0x100
    9152:	f500 710a 	add.w	r1, r0, #552	; 0x228
    9156:	2200      	movs	r2, #0
    9158:	f200 20a1 	addw	r0, r0, #673	; 0x2a1
    915c:	f004 fb9d 	bl	d89a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9160:	2101      	movs	r1, #1
    9162:	2005      	movs	r0, #5
    9164:	e00d      	b.n	9182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    9166:	2003      	movs	r0, #3
    9168:	f000 fd24 	bl	9bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1858>
    916c:	6860      	ldr	r0, [r4, #4]
    916e:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    9172:	0880      	lsrs	r0, r0, #2
    9174:	f010 0f01 	tst.w	r0, #1
    9178:	d001      	beq.n	917e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe22>
    917a:	2011      	movs	r0, #17
    917c:	e000      	b.n	9180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    917e:	200d      	movs	r0, #13
    9180:	2101      	movs	r1, #1
    9182:	f7ff ffa7 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9186:	6860      	ldr	r0, [r4, #4]
    9188:	f880 52a0 	strb.w	r5, [r0, #672]	; 0x2a0
    918c:	bd38      	pop	{r3, r4, r5, pc}
    918e:	0000      	.short	0x0000
    9190:	20000170 	.word	0x20000170
    9194:	b570      	push	{r4, r5, r6, lr}
    9196:	4b2b      	ldr	r3, [pc, #172]	; (9244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>)
    9198:	4602      	mov	r2, r0
    919a:	8858      	ldrh	r0, [r3, #2]
    919c:	4310      	orrs	r0, r2
    919e:	8058      	strh	r0, [r3, #2]
    91a0:	f103 0010 	add.w	r0, r3, #16
    91a4:	2a40      	cmp	r2, #64	; 0x40
    91a6:	6840      	ldr	r0, [r0, #4]
    91a8:	d00d      	beq.n	91c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6a>
    91aa:	0796      	lsls	r6, r2, #30
    91ac:	f04f 0500 	mov.w	r5, #0
    91b0:	f04f 0401 	mov.w	r4, #1
    91b4:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    91b8:	d50c      	bpl.n	91d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe78>
    91ba:	b14e      	cbz	r6, 91d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe74>
    91bc:	f640 613f 	movw	r1, #3647	; 0xe3f
    91c0:	2031      	movs	r0, #49	; 0x31
    91c2:	f7fb f9d3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    91ca:	2104      	movs	r1, #4
    91cc:	f7fe bc8e 	b.w	7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    91d0:	6099      	str	r1, [r3, #8]
    91d2:	e01c      	b.n	920e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    91d4:	b1c6      	cbz	r6, 9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91d6:	60d9      	str	r1, [r3, #12]
    91d8:	78c9      	ldrb	r1, [r1, #3]
    91da:	2906      	cmp	r1, #6
    91dc:	d002      	beq.n	91e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>
    91de:	290b      	cmp	r1, #11
    91e0:	d112      	bne.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91e2:	e009      	b.n	91f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe9c>
    91e4:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    91e8:	2919      	cmp	r1, #25
    91ea:	d10d      	bne.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91ec:	2100      	movs	r1, #0
    91ee:	e9c0 113c 	strd	r1, r1, [r0, #240]	; 0xf0
    91f2:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
    91f6:	e007      	b.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91f8:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    91fc:	2913      	cmp	r1, #19
    91fe:	d103      	bne.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9200:	f880 509a 	strb.w	r5, [r0, #154]	; 0x9a
    9204:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
    9208:	0791      	lsls	r1, r2, #30
    920a:	d516      	bpl.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    920c:	6899      	ldr	r1, [r3, #8]
    920e:	78c9      	ldrb	r1, [r1, #3]
    9210:	2905      	cmp	r1, #5
    9212:	d002      	beq.n	921a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebe>
    9214:	290b      	cmp	r1, #11
    9216:	d110      	bne.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9218:	e009      	b.n	922e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    921a:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    921e:	2917      	cmp	r1, #23
    9220:	d10b      	bne.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9222:	2100      	movs	r1, #0
    9224:	e9e0 113e 	strd	r1, r1, [r0, #248]!	; 0xf8
    9228:	f800 4c5d 	strb.w	r4, [r0, #-93]
    922c:	e005      	b.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    922e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    9232:	2912      	cmp	r1, #18
    9234:	d101      	bne.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9236:	f880 509b 	strb.w	r5, [r0, #155]	; 0x9b
    923a:	0690      	lsls	r0, r2, #26
    923c:	d501      	bpl.n	9242 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee6>
    923e:	2008      	movs	r0, #8
    9240:	7058      	strb	r0, [r3, #1]
    9242:	bd70      	pop	{r4, r5, r6, pc}
    9244:	20000160 	.word	0x20000160
    9248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    924c:	4c28      	ldr	r4, [pc, #160]	; (92f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf94>)
    924e:	2701      	movs	r7, #1
    9250:	6860      	ldr	r0, [r4, #4]
    9252:	f890 12be 	ldrb.w	r1, [r0, #702]	; 0x2be
    9256:	b109      	cbz	r1, 925c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf00>
    9258:	2601      	movs	r6, #1
    925a:	e000      	b.n	925e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf02>
    925c:	2600      	movs	r6, #0
    925e:	f890 22bf 	ldrb.w	r2, [r0, #703]	; 0x2bf
    9262:	b10a      	cbz	r2, 9268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    9264:	2501      	movs	r5, #1
    9266:	e000      	b.n	926a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    9268:	2500      	movs	r5, #0
    926a:	b90e      	cbnz	r6, 9270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
    926c:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    9270:	b90d      	cbnz	r5, 9276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1a>
    9272:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    9276:	f100 0362 	add.w	r3, r0, #98	; 0x62
    927a:	7219      	strb	r1, [r3, #8]
    927c:	725a      	strb	r2, [r3, #9]
    927e:	22ff      	movs	r2, #255	; 0xff
    9280:	729a      	strb	r2, [r3, #10]
    9282:	f006 fae1 	bl	f848 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    9286:	6860      	ldr	r0, [r4, #4]
    9288:	f890 0134 	ldrb.w	r0, [r0, #308]	; 0x134
    928c:	2801      	cmp	r0, #1
    928e:	d001      	beq.n	9294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9290:	b906      	cbnz	r6, 9294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9292:	b115      	cbz	r5, 929a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3e>
    9294:	2000      	movs	r0, #0
    9296:	f000 f82d 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    929a:	6860      	ldr	r0, [r4, #4]
    929c:	302c      	adds	r0, #44	; 0x2c
    929e:	f004 fff0 	bl	e282 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    92a2:	4606      	mov	r6, r0
    92a4:	2105      	movs	r1, #5
    92a6:	6860      	ldr	r0, [r4, #4]
    92a8:	f7fe fc20 	bl	7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    92ac:	6860      	ldr	r0, [r4, #4]
    92ae:	302c      	adds	r0, #44	; 0x2c
    92b0:	f004 ffe7 	bl	e282 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    92b4:	4605      	mov	r5, r0
    92b6:	42ae      	cmp	r6, r5
    92b8:	d20a      	bcs.n	92d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf74>
    92ba:	f7f8 fcbb 	bl	1c34 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    92be:	4601      	mov	r1, r0
    92c0:	1ba8      	subs	r0, r5, r6
    92c2:	2865      	cmp	r0, #101	; 0x65
    92c4:	d200      	bcs.n	92c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>
    92c6:	2065      	movs	r0, #101	; 0x65
    92c8:	f7f8 fbd6 	bl	1a78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    92cc:	b100      	cbz	r0, 92d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf74>
    92ce:	2700      	movs	r7, #0
    92d0:	6860      	ldr	r0, [r4, #4]
    92d2:	f004 ff82 	bl	e1da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    92d6:	b138      	cbz	r0, 92e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>
    92d8:	6863      	ldr	r3, [r4, #4]
    92da:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
    92de:	8818      	ldrh	r0, [r3, #0]
    92e0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    92e4:	f004 ff36 	bl	e154 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    92e8:	4638      	mov	r0, r7
    92ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92ee:	0000      	.short	0x0000
    92f0:	20000170 	.word	0x20000170
    92f4:	b510      	push	{r4, lr}
    92f6:	4c0f      	ldr	r4, [pc, #60]	; (9334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    92f8:	6861      	ldr	r1, [r4, #4]
    92fa:	880a      	ldrh	r2, [r1, #0]
    92fc:	f8a1 21a0 	strh.w	r2, [r1, #416]	; 0x1a0
    9300:	f881 019e 	strb.w	r0, [r1, #414]	; 0x19e
    9304:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9308:	f005 ffab 	bl	f262 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    930c:	6861      	ldr	r1, [r4, #4]
    930e:	f881 01a2 	strb.w	r0, [r1, #418]	; 0x1a2
    9312:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    9316:	f005 ffa4 	bl	f262 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    931a:	6861      	ldr	r1, [r4, #4]
    931c:	2213      	movs	r2, #19
    931e:	f881 01a3 	strb.w	r0, [r1, #419]	; 0x1a3
    9322:	f501 70ca 	add.w	r0, r1, #404	; 0x194
    9326:	f7fd f893 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    932a:	6861      	ldr	r1, [r4, #4]
    932c:	2000      	movs	r0, #0
    932e:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    9332:	bd10      	pop	{r4, pc}
    9334:	20000170 	.word	0x20000170
    9338:	b570      	push	{r4, r5, r6, lr}
    933a:	4d0f      	ldr	r5, [pc, #60]	; (9378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101c>)
    933c:	686c      	ldr	r4, [r5, #4]
    933e:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
    9342:	2922      	cmp	r1, #34	; 0x22
    9344:	d002      	beq.n	934c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9346:	292e      	cmp	r1, #46	; 0x2e
    9348:	d003      	beq.n	9352 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff6>
    934a:	e011      	b.n	9370 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1014>
    934c:	f7ff ffd2 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9350:	e008      	b.n	9364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1008>
    9352:	f894 2096 	ldrb.w	r2, [r4, #150]	; 0x96
    9356:	f104 0080 	add.w	r0, r4, #128	; 0x80
    935a:	2301      	movs	r3, #1
    935c:	210b      	movs	r1, #11
    935e:	f004 fae4 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9362:	b138      	cbz	r0, 9374 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1018>
    9364:	6869      	ldr	r1, [r5, #4]
    9366:	2000      	movs	r0, #0
    9368:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    936c:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    9370:	2000      	movs	r0, #0
    9372:	bd70      	pop	{r4, r5, r6, pc}
    9374:	202a      	movs	r0, #42	; 0x2a
    9376:	e7e9      	b.n	934c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9378:	20000170 	.word	0x20000170
    937c:	b570      	push	{r4, r5, r6, lr}
    937e:	4604      	mov	r4, r0
    9380:	6840      	ldr	r0, [r0, #4]
    9382:	2301      	movs	r3, #1
    9384:	2100      	movs	r1, #0
    9386:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    938a:	3080      	adds	r0, #128	; 0x80
    938c:	f004 facd 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9390:	b1b8      	cbz	r0, 93c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1066>
    9392:	4d13      	ldr	r5, [pc, #76]	; (93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    9394:	68e8      	ldr	r0, [r5, #12]
    9396:	f004 fd2e 	bl	ddf6 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    939a:	6861      	ldr	r1, [r4, #4]
    939c:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    93a0:	6861      	ldr	r1, [r4, #4]
    93a2:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    93a6:	f005 ff75 	bl	f294 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    93aa:	b160      	cbz	r0, 93c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x106a>
    93ac:	6861      	ldr	r1, [r4, #4]
    93ae:	2028      	movs	r0, #40	; 0x28
    93b0:	220a      	movs	r2, #10
    93b2:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    93b6:	6861      	ldr	r1, [r4, #4]
    93b8:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    93bc:	f7fd f848 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    93c0:	e00b      	b.n	93da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    93c2:	2001      	movs	r0, #1
    93c4:	bd70      	pop	{r4, r5, r6, pc}
    93c6:	6861      	ldr	r1, [r4, #4]
    93c8:	68e8      	ldr	r0, [r5, #12]
    93ca:	f201 21be 	addw	r1, r1, #702	; 0x2be
    93ce:	f004 fd0d 	bl	ddec <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    93d2:	6861      	ldr	r1, [r4, #4]
    93d4:	200b      	movs	r0, #11
    93d6:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    93da:	2000      	movs	r0, #0
    93dc:	bd70      	pop	{r4, r5, r6, pc}
    93de:	0000      	.short	0x0000
    93e0:	20000160 	.word	0x20000160
    93e4:	b570      	push	{r4, r5, r6, lr}
    93e6:	4604      	mov	r4, r0
    93e8:	6840      	ldr	r0, [r0, #4]
    93ea:	2301      	movs	r3, #1
    93ec:	2100      	movs	r1, #0
    93ee:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    93f2:	3080      	adds	r0, #128	; 0x80
    93f4:	f004 fa99 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93f8:	b1e0      	cbz	r0, 9434 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10d8>
    93fa:	4d28      	ldr	r5, [pc, #160]	; (949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>)
    93fc:	2100      	movs	r1, #0
    93fe:	68e8      	ldr	r0, [r5, #12]
    9400:	f004 fcfc 	bl	ddfc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    9404:	b1c0      	cbz	r0, 9438 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10dc>
    9406:	68e8      	ldr	r0, [r5, #12]
    9408:	6861      	ldr	r1, [r4, #4]
    940a:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    940e:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    9412:	6861      	ldr	r1, [r4, #4]
    9414:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    9418:	f005 ff3c 	bl	f294 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    941c:	b188      	cbz	r0, 9442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e6>
    941e:	6861      	ldr	r1, [r4, #4]
    9420:	2028      	movs	r0, #40	; 0x28
    9422:	220a      	movs	r2, #10
    9424:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9428:	6861      	ldr	r1, [r4, #4]
    942a:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    942e:	f7fd f80f 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9432:	e030      	b.n	9496 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113a>
    9434:	2001      	movs	r0, #1
    9436:	bd70      	pop	{r4, r5, r6, pc}
    9438:	4620      	mov	r0, r4
    943a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    943e:	f000 b897 	b.w	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    9442:	68e8      	ldr	r0, [r5, #12]
    9444:	f004 fd04 	bl	de50 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    9448:	f004 fa52 	bl	d8f0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    944c:	4606      	mov	r6, r0
    944e:	6860      	ldr	r0, [r4, #4]
    9450:	4631      	mov	r1, r6
    9452:	f8c0 62c4 	str.w	r6, [r0, #708]	; 0x2c4
    9456:	68e8      	ldr	r0, [r5, #12]
    9458:	7900      	ldrb	r0, [r0, #4]
    945a:	f004 fbc5 	bl	dbe8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    945e:	6861      	ldr	r1, [r4, #4]
    9460:	f8a1 02be 	strh.w	r0, [r1, #702]	; 0x2be
    9464:	68e8      	ldr	r0, [r5, #12]
    9466:	4631      	mov	r1, r6
    9468:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    946c:	f004 fbb8 	bl	dbe0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9470:	6861      	ldr	r1, [r4, #4]
    9472:	f8c1 02c0 	str.w	r0, [r1, #704]	; 0x2c0
    9476:	68e8      	ldr	r0, [r5, #12]
    9478:	f004 fced 	bl	de56 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    947c:	6861      	ldr	r1, [r4, #4]
    947e:	f8a1 02c8 	strh.w	r0, [r1, #712]	; 0x2c8
    9482:	68e8      	ldr	r0, [r5, #12]
    9484:	f004 fcea 	bl	de5c <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    9488:	6861      	ldr	r1, [r4, #4]
    948a:	f8a1 02ca 	strh.w	r0, [r1, #714]	; 0x2ca
    948e:	6861      	ldr	r1, [r4, #4]
    9490:	200e      	movs	r0, #14
    9492:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    9496:	2000      	movs	r0, #0
    9498:	bd70      	pop	{r4, r5, r6, pc}
    949a:	0000      	.short	0x0000
    949c:	20000160 	.word	0x20000160
    94a0:	b538      	push	{r3, r4, r5, lr}
    94a2:	4604      	mov	r4, r0
    94a4:	6840      	ldr	r0, [r0, #4]
    94a6:	2301      	movs	r3, #1
    94a8:	2100      	movs	r1, #0
    94aa:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    94ae:	3080      	adds	r0, #128	; 0x80
    94b0:	f004 fa3b 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94b4:	b970      	cbnz	r0, 94d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    94b6:	6860      	ldr	r0, [r4, #4]
    94b8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    94bc:	2a14      	cmp	r2, #20
    94be:	d009      	beq.n	94d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    94c0:	2301      	movs	r3, #1
    94c2:	2105      	movs	r1, #5
    94c4:	3080      	adds	r0, #128	; 0x80
    94c6:	f004 fa30 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94ca:	b108      	cbz	r0, 94d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    94cc:	2008      	movs	r0, #8
    94ce:	bd38      	pop	{r3, r4, r5, pc}
    94d0:	2001      	movs	r0, #1
    94d2:	bd38      	pop	{r3, r4, r5, pc}
    94d4:	6860      	ldr	r0, [r4, #4]
    94d6:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    94da:	b908      	cbnz	r0, 94e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    94dc:	f7ff f840 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    94e0:	4d1b      	ldr	r5, [pc, #108]	; (9550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f4>)
    94e2:	6861      	ldr	r1, [r4, #4]
    94e4:	f501 710a 	add.w	r1, r1, #552	; 0x228
    94e8:	68e8      	ldr	r0, [r5, #12]
    94ea:	f004 fcd0 	bl	de8e <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    94ee:	6861      	ldr	r1, [r4, #4]
    94f0:	68e8      	ldr	r0, [r5, #12]
    94f2:	f501 7188 	add.w	r1, r1, #272	; 0x110
    94f6:	f004 fcc1 	bl	de7c <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    94fa:	6860      	ldr	r0, [r4, #4]
    94fc:	f890 12d4 	ldrb.w	r1, [r0, #724]	; 0x2d4
    9500:	f88d 1000 	strb.w	r1, [sp]
    9504:	9900      	ldr	r1, [sp, #0]
    9506:	9100      	str	r1, [sp, #0]
    9508:	f89d 1000 	ldrb.w	r1, [sp]
    950c:	b121      	cbz	r1, 9518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    950e:	f240 3117 	movw	r1, #791	; 0x317
    9512:	2031      	movs	r0, #49	; 0x31
    9514:	f7fb f82a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9518:	8801      	ldrh	r1, [r0, #0]
    951a:	f8a0 12d6 	strh.w	r1, [r0, #726]	; 0x2d6
    951e:	6861      	ldr	r1, [r4, #4]
    9520:	68e8      	ldr	r0, [r5, #12]
    9522:	f501 7136 	add.w	r1, r1, #728	; 0x2d8
    9526:	f004 fcad 	bl	de84 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    952a:	6861      	ldr	r1, [r4, #4]
    952c:	68e8      	ldr	r0, [r5, #12]
    952e:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
    9532:	f004 fca0 	bl	de76 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    9536:	6860      	ldr	r0, [r4, #4]
    9538:	2209      	movs	r2, #9
    953a:	4906      	ldr	r1, [pc, #24]	; (9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f8>)
    953c:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
    9540:	f7fc ff86 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9544:	6861      	ldr	r1, [r4, #4]
    9546:	2016      	movs	r0, #22
    9548:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    954c:	2000      	movs	r0, #0
    954e:	bd38      	pop	{r3, r4, r5, pc}
    9550:	20000160 	.word	0x20000160
    9554:	0000f2ad 	.word	0x0000f2ad
    9558:	4901      	ldr	r1, [pc, #4]	; (9560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>)
    955a:	68c9      	ldr	r1, [r1, #12]
    955c:	f7fd ba36 	b.w	69cc <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    9560:	20000160 	.word	0x20000160
    9564:	4901      	ldr	r1, [pc, #4]	; (956c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>)
    9566:	68c9      	ldr	r1, [r1, #12]
    9568:	f7fd ba60 	b.w	6a2c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    956c:	20000160 	.word	0x20000160
    9570:	b510      	push	{r4, lr}
    9572:	6842      	ldr	r2, [r0, #4]
    9574:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
    9578:	070b      	lsls	r3, r1, #28
    957a:	d501      	bpl.n	9580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1224>
    957c:	2001      	movs	r0, #1
    957e:	bd10      	pop	{r4, pc}
    9580:	f041 0108 	orr.w	r1, r1, #8
    9584:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    9588:	4904      	ldr	r1, [pc, #16]	; (959c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1240>)
    958a:	6840      	ldr	r0, [r0, #4]
    958c:	68c9      	ldr	r1, [r1, #12]
    958e:	78c9      	ldrb	r1, [r1, #3]
    9590:	f880 1118 	strb.w	r1, [r0, #280]	; 0x118
    9594:	f7fe ffe4 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9598:	2000      	movs	r0, #0
    959a:	bd10      	pop	{r4, pc}
    959c:	20000160 	.word	0x20000160
    95a0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    95a4:	4605      	mov	r5, r0
    95a6:	6840      	ldr	r0, [r0, #4]
    95a8:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    95ac:	f010 0f30 	tst.w	r0, #48	; 0x30
    95b0:	d002      	beq.n	95b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125c>
    95b2:	2001      	movs	r0, #1
    95b4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    95b8:	4c31      	ldr	r4, [pc, #196]	; (9680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1324>)
    95ba:	68e0      	ldr	r0, [r4, #12]
    95bc:	f004 fc81 	bl	dec2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    95c0:	b330      	cbz	r0, 9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b4>
    95c2:	68e0      	ldr	r0, [r4, #12]
    95c4:	f004 fc77 	bl	deb6 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    95c8:	4680      	mov	r8, r0
    95ca:	68e0      	ldr	r0, [r4, #12]
    95cc:	f004 fc77 	bl	debe <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    95d0:	4607      	mov	r7, r0
    95d2:	68e0      	ldr	r0, [r4, #12]
    95d4:	f004 fc6d 	bl	deb2 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    95d8:	4606      	mov	r6, r0
    95da:	68e0      	ldr	r0, [r4, #12]
    95dc:	f004 fc6d 	bl	deba <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    95e0:	4601      	mov	r1, r0
    95e2:	f8cd 8000 	str.w	r8, [sp]
    95e6:	6868      	ldr	r0, [r5, #4]
    95e8:	463b      	mov	r3, r7
    95ea:	4632      	mov	r2, r6
    95ec:	302c      	adds	r0, #44	; 0x2c
    95ee:	f004 fe82 	bl	e2f6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    95f2:	78a0      	ldrb	r0, [r4, #2]
    95f4:	0781      	lsls	r1, r0, #30
    95f6:	f04f 0001 	mov.w	r0, #1
    95fa:	d503      	bpl.n	9604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a8>
    95fc:	68a1      	ldr	r1, [r4, #8]
    95fe:	78c9      	ldrb	r1, [r1, #3]
    9600:	2914      	cmp	r1, #20
    9602:	d00a      	beq.n	961a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12be>
    9604:	6869      	ldr	r1, [r5, #4]
    9606:	f891 1095 	ldrb.w	r1, [r1, #149]	; 0x95
    960a:	291e      	cmp	r1, #30
    960c:	d005      	beq.n	961a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12be>
    960e:	e007      	b.n	9620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    9610:	4628      	mov	r0, r5
    9612:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9616:	f7ff bfab 	b.w	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    961a:	6869      	ldr	r1, [r5, #4]
    961c:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9620:	6868      	ldr	r0, [r5, #4]
    9622:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    9626:	2901      	cmp	r1, #1
    9628:	d011      	beq.n	964e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f2>
    962a:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    962e:	f88d 1004 	strb.w	r1, [sp, #4]
    9632:	9901      	ldr	r1, [sp, #4]
    9634:	9101      	str	r1, [sp, #4]
    9636:	f89d 1004 	ldrb.w	r1, [sp, #4]
    963a:	b941      	cbnz	r1, 964e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f2>
    963c:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    9640:	f88d 1000 	strb.w	r1, [sp]
    9644:	9900      	ldr	r1, [sp, #0]
    9646:	9100      	str	r1, [sp, #0]
    9648:	f89d 1000 	ldrb.w	r1, [sp]
    964c:	b141      	cbz	r1, 9660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1304>
    964e:	f850 1f84 	ldr.w	r1, [r0, #132]!
    9652:	f041 0110 	orr.w	r1, r1, #16
    9656:	6001      	str	r1, [r0, #0]
    9658:	f7fe ff82 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    965c:	2000      	movs	r0, #0
    965e:	e7a9      	b.n	95b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1258>
    9660:	f850 1f84 	ldr.w	r1, [r0, #132]!
    9664:	f041 0120 	orr.w	r1, r1, #32
    9668:	6001      	str	r1, [r0, #0]
    966a:	4805      	ldr	r0, [pc, #20]	; (9680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1324>)
    966c:	3010      	adds	r0, #16
    966e:	6843      	ldr	r3, [r0, #4]
    9670:	f503 72b9 	add.w	r2, r3, #370	; 0x172
    9674:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    9678:	8818      	ldrh	r0, [r3, #0]
    967a:	f004 fe43 	bl	e304 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    967e:	e7eb      	b.n	9658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12fc>
    9680:	20000160 	.word	0x20000160
    9684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9688:	4604      	mov	r4, r0
    968a:	6840      	ldr	r0, [r0, #4]
    968c:	2301      	movs	r3, #1
    968e:	210a      	movs	r1, #10
    9690:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9694:	3080      	adds	r0, #128	; 0x80
    9696:	f004 f948 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    969a:	b350      	cbz	r0, 96f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    969c:	4d16      	ldr	r5, [pc, #88]	; (96f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x139c>)
    969e:	68e8      	ldr	r0, [r5, #12]
    96a0:	f004 fc0f 	bl	dec2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    96a4:	b1c8      	cbz	r0, 96da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137e>
    96a6:	68e8      	ldr	r0, [r5, #12]
    96a8:	f004 fc05 	bl	deb6 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    96ac:	4607      	mov	r7, r0
    96ae:	68e8      	ldr	r0, [r5, #12]
    96b0:	f004 fc05 	bl	debe <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    96b4:	4680      	mov	r8, r0
    96b6:	68e8      	ldr	r0, [r5, #12]
    96b8:	f004 fbfb 	bl	deb2 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    96bc:	4606      	mov	r6, r0
    96be:	68e8      	ldr	r0, [r5, #12]
    96c0:	f004 fbfb 	bl	deba <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    96c4:	4601      	mov	r1, r0
    96c6:	9700      	str	r7, [sp, #0]
    96c8:	6860      	ldr	r0, [r4, #4]
    96ca:	4643      	mov	r3, r8
    96cc:	4632      	mov	r2, r6
    96ce:	302c      	adds	r0, #44	; 0x2c
    96d0:	f004 fe11 	bl	e2f6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    96d4:	6860      	ldr	r0, [r4, #4]
    96d6:	f004 fd80 	bl	e1da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    96da:	6861      	ldr	r1, [r4, #4]
    96dc:	2000      	movs	r0, #0
    96de:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    96e2:	6861      	ldr	r1, [r4, #4]
    96e4:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    96e8:	f7ff f91a 	bl	8920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    96ec:	2000      	movs	r0, #0
    96ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    96f2:	2001      	movs	r0, #1
    96f4:	e7fb      	b.n	96ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1392>
    96f6:	0000      	.short	0x0000
    96f8:	20000160 	.word	0x20000160
    96fc:	b538      	push	{r3, r4, r5, lr}
    96fe:	4604      	mov	r4, r0
    9700:	6840      	ldr	r0, [r0, #4]
    9702:	2301      	movs	r3, #1
    9704:	210b      	movs	r1, #11
    9706:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    970a:	3080      	adds	r0, #128	; 0x80
    970c:	f004 f90d 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9710:	bb60      	cbnz	r0, 976c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1410>
    9712:	6860      	ldr	r0, [r4, #4]
    9714:	2301      	movs	r3, #1
    9716:	2100      	movs	r1, #0
    9718:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    971c:	3080      	adds	r0, #128	; 0x80
    971e:	f004 f904 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9722:	b308      	cbz	r0, 9768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140c>
    9724:	6860      	ldr	r0, [r4, #4]
    9726:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    972a:	2826      	cmp	r0, #38	; 0x26
    972c:	d01e      	beq.n	976c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1410>
    972e:	4d29      	ldr	r5, [pc, #164]	; (97d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1478>)
    9730:	68e8      	ldr	r0, [r5, #12]
    9732:	f004 fbd8 	bl	dee6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    9736:	b1d8      	cbz	r0, 9770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1414>
    9738:	68e8      	ldr	r0, [r5, #12]
    973a:	6862      	ldr	r2, [r4, #4]
    973c:	7941      	ldrb	r1, [r0, #5]
    973e:	f001 0107 	and.w	r1, r1, #7
    9742:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    9746:	7900      	ldrb	r0, [r0, #4]
    9748:	f000 0107 	and.w	r1, r0, #7
    974c:	6860      	ldr	r0, [r4, #4]
    974e:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    9752:	6860      	ldr	r0, [r4, #4]
    9754:	f890 2135 	ldrb.w	r2, [r0, #309]	; 0x135
    9758:	f88d 2000 	strb.w	r2, [sp]
    975c:	9a00      	ldr	r2, [sp, #0]
    975e:	9200      	str	r2, [sp, #0]
    9760:	f89d 2000 	ldrb.w	r2, [sp]
    9764:	bb72      	cbnz	r2, 97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    9766:	e008      	b.n	977a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x141e>
    9768:	2001      	movs	r0, #1
    976a:	bd38      	pop	{r3, r4, r5, pc}
    976c:	2020      	movs	r0, #32
    976e:	bd38      	pop	{r3, r4, r5, pc}
    9770:	4620      	mov	r0, r4
    9772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9776:	f7ff befb 	b.w	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    977a:	f890 2134 	ldrb.w	r2, [r0, #308]	; 0x134
    977e:	2a01      	cmp	r2, #1
    9780:	d020      	beq.n	97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    9782:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    9786:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    978a:	7855      	ldrb	r5, [r2, #1]
    978c:	428d      	cmp	r5, r1
    978e:	d106      	bne.n	979e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1442>
    9790:	7811      	ldrb	r1, [r2, #0]
    9792:	4299      	cmp	r1, r3
    9794:	d103      	bne.n	979e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1442>
    9796:	2102      	movs	r1, #2
    9798:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    979c:	e012      	b.n	97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    979e:	480d      	ldr	r0, [pc, #52]	; (97d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1478>)
    97a0:	3010      	adds	r0, #16
    97a2:	6841      	ldr	r1, [r0, #4]
    97a4:	f501 70c8 	add.w	r0, r1, #400	; 0x190
    97a8:	880a      	ldrh	r2, [r1, #0]
    97aa:	f820 2b02 	strh.w	r2, [r0], #2
    97ae:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    97b2:	f800 2b01 	strb.w	r2, [r0], #1
    97b6:	f891 2063 	ldrb.w	r2, [r1, #99]	; 0x63
    97ba:	f800 290d 	strb.w	r2, [r0], #-13
    97be:	221f      	movs	r2, #31
    97c0:	f7fc fe46 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    97c4:	6861      	ldr	r1, [r4, #4]
    97c6:	2023      	movs	r0, #35	; 0x23
    97c8:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    97cc:	f7fe fec8 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    97d0:	2000      	movs	r0, #0
    97d2:	bd38      	pop	{r3, r4, r5, pc}
    97d4:	20000160 	.word	0x20000160
    97d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97dc:	6845      	ldr	r5, [r0, #4]
    97de:	4604      	mov	r4, r0
    97e0:	f895 0095 	ldrb.w	r0, [r5, #149]	; 0x95
    97e4:	2822      	cmp	r0, #34	; 0x22
    97e6:	d008      	beq.n	97fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149e>
    97e8:	f05f 0600 	movs.w	r6, #0
    97ec:	f895 0096 	ldrb.w	r0, [r5, #150]	; 0x96
    97f0:	2824      	cmp	r0, #36	; 0x24
    97f2:	d004      	beq.n	97fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    97f4:	b38e      	cbz	r6, 985a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    97f6:	3595      	adds	r5, #149	; 0x95
    97f8:	e002      	b.n	9800 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a4>
    97fa:	2601      	movs	r6, #1
    97fc:	e7f6      	b.n	97ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1490>
    97fe:	3596      	adds	r5, #150	; 0x96
    9800:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>
    9804:	f8d8 000c 	ldr.w	r0, [r8, #12]
    9808:	f004 fb79 	bl	defe <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    980c:	2700      	movs	r7, #0
    980e:	b340      	cbz	r0, 9862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1506>
    9810:	4631      	mov	r1, r6
    9812:	f8d8 000c 	ldr.w	r0, [r8, #12]
    9816:	f7fe ff79 	bl	870c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    981a:	b310      	cbz	r0, 9862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1506>
    981c:	466a      	mov	r2, sp
    981e:	4646      	mov	r6, r8
    9820:	6860      	ldr	r0, [r4, #4]
    9822:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9826:	f004 f995 	bl	db54 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    982a:	b3c0      	cbz	r0, 989e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    982c:	68f0      	ldr	r0, [r6, #12]
    982e:	f004 fb64 	bl	defa <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    9832:	6861      	ldr	r1, [r4, #4]
    9834:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    9838:	6861      	ldr	r1, [r4, #4]
    983a:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    983e:	f005 fd29 	bl	f294 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9842:	b368      	cbz	r0, 98a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1544>
    9844:	6861      	ldr	r1, [r4, #4]
    9846:	2028      	movs	r0, #40	; 0x28
    9848:	220a      	movs	r2, #10
    984a:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    984e:	6861      	ldr	r1, [r4, #4]
    9850:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9854:	f7fc fdfc 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9858:	e058      	b.n	990c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    985a:	e7ff      	b.n	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1500>
    985c:	2002      	movs	r0, #2
    985e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9862:	6860      	ldr	r0, [r4, #4]
    9864:	f04f 0900 	mov.w	r9, #0
    9868:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    986c:	2901      	cmp	r1, #1
    986e:	d018      	beq.n	98a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
    9870:	f880 7134 	strb.w	r7, [r0, #308]	; 0x134
    9874:	b30e      	cbz	r6, 98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155e>
    9876:	f8d8 000c 	ldr.w	r0, [r8, #12]
    987a:	6861      	ldr	r1, [r4, #4]
    987c:	2201      	movs	r2, #1
    987e:	78c0      	ldrb	r0, [r0, #3]
    9880:	f881 0119 	strb.w	r0, [r1, #281]	; 0x119
    9884:	4082      	lsls	r2, r0
    9886:	6861      	ldr	r1, [r4, #4]
    9888:	f3c2 6000 	ubfx	r0, r2, #24, #1
    988c:	b168      	cbz	r0, 98aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154e>
    988e:	200a      	movs	r0, #10
    9890:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    9894:	6860      	ldr	r0, [r4, #4]
    9896:	f890 00ce 	ldrb.w	r0, [r0, #206]	; 0xce
    989a:	b9a8      	cbnz	r0, 98c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156c>
    989c:	e008      	b.n	98b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>
    989e:	e015      	b.n	98cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1570>
    98a0:	e028      	b.n	98f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1598>
    98a2:	201e      	movs	r0, #30
    98a4:	f7ff fd26 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    98a8:	e7e4      	b.n	9874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1518>
    98aa:	f240 4163 	movw	r1, #1123	; 0x463
    98ae:	e001      	b.n	98b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
    98b0:	f240 416b 	movw	r1, #1131	; 0x46b
    98b4:	2031      	movs	r0, #49	; 0x31
    98b6:	f7fa fe59 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98ba:	702f      	strb	r7, [r5, #0]
    98bc:	f7fe fe5c 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    98c0:	4620      	mov	r0, r4
    98c2:	f7ff fe55 	bl	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    98c6:	4681      	mov	r9, r0
    98c8:	4648      	mov	r0, r9
    98ca:	e7c8      	b.n	985e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    98cc:	6860      	ldr	r0, [r4, #4]
    98ce:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    98d2:	2901      	cmp	r1, #1
    98d4:	d009      	beq.n	98ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158e>
    98d6:	f880 7134 	strb.w	r7, [r0, #308]	; 0x134
    98da:	6860      	ldr	r0, [r4, #4]
    98dc:	f100 0196 	add.w	r1, r0, #150	; 0x96
    98e0:	42a9      	cmp	r1, r5
    98e2:	d113      	bne.n	990c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    98e4:	f880 7096 	strb.w	r7, [r0, #150]	; 0x96
    98e8:	e010      	b.n	990c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    98ea:	2000      	movs	r0, #0
    98ec:	f7ff fd02 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    98f0:	702f      	strb	r7, [r5, #0]
    98f2:	e7f2      	b.n	98da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157e>
    98f4:	6861      	ldr	r1, [r4, #4]
    98f6:	f89d 0000 	ldrb.w	r0, [sp]
    98fa:	f881 02be 	strb.w	r0, [r1, #702]	; 0x2be
    98fe:	6861      	ldr	r1, [r4, #4]
    9900:	f89d 0001 	ldrb.w	r0, [sp, #1]
    9904:	f881 02bf 	strb.w	r0, [r1, #703]	; 0x2bf
    9908:	2026      	movs	r0, #38	; 0x26
    990a:	7028      	strb	r0, [r5, #0]
    990c:	6860      	ldr	r0, [r4, #4]
    990e:	f100 0196 	add.w	r1, r0, #150	; 0x96
    9912:	42a9      	cmp	r1, r5
    9914:	d102      	bne.n	991c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    9916:	f7fe fe2f 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    991a:	e001      	b.n	9920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    991c:	f880 70ce 	strb.w	r7, [r0, #206]	; 0xce
    9920:	2000      	movs	r0, #0
    9922:	e79c      	b.n	985e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    9924:	20000160 	.word	0x20000160
    9928:	b570      	push	{r4, r5, r6, lr}
    992a:	6840      	ldr	r0, [r0, #4]
    992c:	4d09      	ldr	r5, [pc, #36]	; (9954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
    992e:	f810 1fe4 	ldrb.w	r1, [r0, #228]!
    9932:	f041 0104 	orr.w	r1, r1, #4
    9936:	7001      	strb	r1, [r0, #0]
    9938:	68e8      	ldr	r0, [r5, #12]
    993a:	f004 faf4 	bl	df26 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    993e:	4604      	mov	r4, r0
    9940:	68e8      	ldr	r0, [r5, #12]
    9942:	f004 faf4 	bl	df2e <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    9946:	4601      	mov	r1, r0
    9948:	4620      	mov	r0, r4
    994a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    994e:	f000 b91b 	b.w	9b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    9952:	0000      	.short	0x0000
    9954:	20000160 	.word	0x20000160
    9958:	480a      	ldr	r0, [pc, #40]	; (9984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1628>)
    995a:	68c0      	ldr	r0, [r0, #12]
    995c:	7901      	ldrb	r1, [r0, #4]
    995e:	4809      	ldr	r0, [pc, #36]	; (9984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1628>)
    9960:	3010      	adds	r0, #16
    9962:	6840      	ldr	r0, [r0, #4]
    9964:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    9968:	2822      	cmp	r0, #34	; 0x22
    996a:	d007      	beq.n	997c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1620>
    996c:	282e      	cmp	r0, #46	; 0x2e
    996e:	d005      	beq.n	997c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1620>
    9970:	2829      	cmp	r0, #41	; 0x29
    9972:	d005      	beq.n	9980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1624>
    9974:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    9978:	f000 b906 	b.w	9b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    997c:	2016      	movs	r0, #22
    997e:	e7fb      	b.n	9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    9980:	2023      	movs	r0, #35	; 0x23
    9982:	e7f9      	b.n	9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    9984:	20000160 	.word	0x20000160
    9988:	b510      	push	{r4, lr}
    998a:	4604      	mov	r4, r0
    998c:	6840      	ldr	r0, [r0, #4]
    998e:	2301      	movs	r3, #1
    9990:	4619      	mov	r1, r3
    9992:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    9996:	3080      	adds	r0, #128	; 0x80
    9998:	f003 ffc7 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    999c:	b108      	cbz	r0, 99a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    999e:	2000      	movs	r0, #0
    99a0:	bd10      	pop	{r4, pc}
    99a2:	4806      	ldr	r0, [pc, #24]	; (99bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1660>)
    99a4:	68c0      	ldr	r0, [r0, #12]
    99a6:	f004 faec 	bl	df82 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    99aa:	6861      	ldr	r1, [r4, #4]
    99ac:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    99b0:	6861      	ldr	r1, [r4, #4]
    99b2:	2007      	movs	r0, #7
    99b4:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    99b8:	e7f1      	b.n	999e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1642>
    99ba:	0000      	.short	0x0000
    99bc:	20000160 	.word	0x20000160
    99c0:	b570      	push	{r4, r5, r6, lr}
    99c2:	4604      	mov	r4, r0
    99c4:	483a      	ldr	r0, [pc, #232]	; (9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    99c6:	6861      	ldr	r1, [r4, #4]
    99c8:	2500      	movs	r5, #0
    99ca:	68c0      	ldr	r0, [r0, #12]
    99cc:	7902      	ldrb	r2, [r0, #4]
    99ce:	f891 0095 	ldrb.w	r0, [r1, #149]	; 0x95
    99d2:	2a16      	cmp	r2, #22
    99d4:	d034      	beq.n	9a40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    99d6:	dc06      	bgt.n	99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x168a>
    99d8:	2a0e      	cmp	r2, #14
    99da:	d009      	beq.n	99f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
    99dc:	2a12      	cmp	r2, #18
    99de:	d01b      	beq.n	9a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    99e0:	2a14      	cmp	r2, #20
    99e2:	d162      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    99e4:	e01f      	b.n	9a26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ca>
    99e6:	2a17      	cmp	r2, #23
    99e8:	d043      	beq.n	9a72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1716>
    99ea:	2a23      	cmp	r2, #35	; 0x23
    99ec:	d15d      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    99ee:	e055      	b.n	9a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1740>
    99f0:	2804      	cmp	r0, #4
    99f2:	d15a      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    99f4:	4620      	mov	r0, r4
    99f6:	f005 fc6a 	bl	f2ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    99fa:	482d      	ldr	r0, [pc, #180]	; (9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    99fc:	2207      	movs	r2, #7
    99fe:	3010      	adds	r0, #16
    9a00:	6841      	ldr	r1, [r0, #4]
    9a02:	8808      	ldrh	r0, [r1, #0]
    9a04:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    9a08:	201a      	movs	r0, #26
    9a0a:	f881 01ae 	strb.w	r0, [r1, #430]	; 0x1ae
    9a0e:	f501 70d2 	add.w	r0, r1, #420	; 0x1a4
    9a12:	f7fc fd1d 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9a16:	e048      	b.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a18:	2810      	cmp	r0, #16
    9a1a:	d146      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a1c:	4620      	mov	r0, r4
    9a1e:	f005 fc74 	bl	f30a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xd6>
    9a22:	4605      	mov	r5, r0
    9a24:	e041      	b.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a26:	281e      	cmp	r0, #30
    9a28:	d13f      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a2a:	4620      	mov	r0, r4
    9a2c:	f005 fc4f 	bl	f2ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    9a30:	6860      	ldr	r0, [r4, #4]
    9a32:	2105      	movs	r1, #5
    9a34:	30e4      	adds	r0, #228	; 0xe4
    9a36:	f005 fbbd 	bl	f1b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9a3a:	f7fe ff71 	bl	8920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    9a3e:	e034      	b.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a40:	2822      	cmp	r0, #34	; 0x22
    9a42:	d001      	beq.n	9a48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ec>
    9a44:	282e      	cmp	r0, #46	; 0x2e
    9a46:	d130      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a48:	4620      	mov	r0, r4
    9a4a:	f005 fc40 	bl	f2ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    9a4e:	6860      	ldr	r0, [r4, #4]
    9a50:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    9a54:	2923      	cmp	r1, #35	; 0x23
    9a56:	d028      	beq.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a58:	2108      	movs	r1, #8
    9a5a:	30e4      	adds	r0, #228	; 0xe4
    9a5c:	f005 fbaa 	bl	f1b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9a60:	6860      	ldr	r0, [r4, #4]
    9a62:	210b      	movs	r1, #11
    9a64:	30e4      	adds	r0, #228	; 0xe4
    9a66:	f005 fba5 	bl	f1b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9a6a:	201a      	movs	r0, #26
    9a6c:	f7ff fc42 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9a70:	e01b      	b.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a72:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
    9a76:	2824      	cmp	r0, #36	; 0x24
    9a78:	d117      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a7a:	2600      	movs	r6, #0
    9a7c:	f881 6096 	strb.w	r6, [r1, #150]	; 0x96
    9a80:	f7fe fd7a 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9a84:	6860      	ldr	r0, [r4, #4]
    9a86:	f890 0134 	ldrb.w	r0, [r0, #308]	; 0x134
    9a8a:	2801      	cmp	r0, #1
    9a8c:	d102      	bne.n	9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1738>
    9a8e:	2000      	movs	r0, #0
    9a90:	f7ff fc30 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9a94:	6860      	ldr	r0, [r4, #4]
    9a96:	f880 6134 	strb.w	r6, [r0, #308]	; 0x134
    9a9a:	e006      	b.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a9c:	2829      	cmp	r0, #41	; 0x29
    9a9e:	d104      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9aa0:	4804      	ldr	r0, [pc, #16]	; (9ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1758>)
    9aa2:	6801      	ldr	r1, [r0, #0]
    9aa4:	b109      	cbz	r1, 9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9aa6:	4620      	mov	r0, r4
    9aa8:	4788      	blx	r1
    9aaa:	4628      	mov	r0, r5
    9aac:	bd70      	pop	{r4, r5, r6, pc}
    9aae:	0000      	.short	0x0000
    9ab0:	20000160 	.word	0x20000160
    9ab4:	200002d4 	.word	0x200002d4
    9ab8:	b570      	push	{r4, r5, r6, lr}
    9aba:	4604      	mov	r4, r0
    9abc:	6840      	ldr	r0, [r0, #4]
    9abe:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    9ac2:	0789      	lsls	r1, r1, #30
    9ac4:	d507      	bpl.n	9ad6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177a>
    9ac6:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9aca:	2301      	movs	r3, #1
    9acc:	2108      	movs	r1, #8
    9ace:	3080      	adds	r0, #128	; 0x80
    9ad0:	f003 ff2b 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ad4:	b308      	cbz	r0, 9b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17be>
    9ad6:	6860      	ldr	r0, [r4, #4]
    9ad8:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
    9adc:	0780      	lsls	r0, r0, #30
    9ade:	d416      	bmi.n	9b0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    9ae0:	4d28      	ldr	r5, [pc, #160]	; (9b84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    9ae2:	68e8      	ldr	r0, [r5, #12]
    9ae4:	f004 fa4f 	bl	df86 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    9ae8:	6861      	ldr	r1, [r4, #4]
    9aea:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
    9aee:	68e8      	ldr	r0, [r5, #12]
    9af0:	6862      	ldr	r2, [r4, #4]
    9af2:	f830 1f05 	ldrh.w	r1, [r0, #5]!
    9af6:	f8a2 10e0 	strh.w	r1, [r2, #224]	; 0xe0
    9afa:	6861      	ldr	r1, [r4, #4]
    9afc:	8840      	ldrh	r0, [r0, #2]
    9afe:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    9b02:	6860      	ldr	r0, [r4, #4]
    9b04:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    9b08:	f041 0102 	orr.w	r1, r1, #2
    9b0c:	7001      	strb	r1, [r0, #0]
    9b0e:	6860      	ldr	r0, [r4, #4]
    9b10:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    9b14:	07c9      	lsls	r1, r1, #31
    9b16:	d002      	beq.n	9b1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c2>
    9b18:	e015      	b.n	9b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ea>
    9b1a:	2001      	movs	r0, #1
    9b1c:	bd70      	pop	{r4, r5, r6, pc}
    9b1e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    9b22:	078a      	lsls	r2, r1, #30
    9b24:	d504      	bpl.n	9b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d4>
    9b26:	f240 3155 	movw	r1, #853	; 0x355
    9b2a:	2031      	movs	r0, #49	; 0x31
    9b2c:	f7fa fd1e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b30:	f041 0102 	orr.w	r1, r1, #2
    9b34:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    9b38:	f7fe fd12 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9b3c:	6860      	ldr	r0, [r4, #4]
    9b3e:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
    9b42:	07c0      	lsls	r0, r0, #31
    9b44:	d005      	beq.n	9b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f6>
    9b46:	6861      	ldr	r1, [r4, #4]
    9b48:	2203      	movs	r2, #3
    9b4a:	f101 00d6 	add.w	r0, r1, #214	; 0xd6
    9b4e:	f7fc fc7f 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9b52:	6861      	ldr	r1, [r4, #4]
    9b54:	2000      	movs	r0, #0
    9b56:	f891 2095 	ldrb.w	r2, [r1, #149]	; 0x95
    9b5a:	2a06      	cmp	r2, #6
    9b5c:	d104      	bne.n	9b68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x180c>
    9b5e:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    9b62:	6861      	ldr	r1, [r4, #4]
    9b64:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    9b68:	6861      	ldr	r1, [r4, #4]
    9b6a:	f891 213a 	ldrb.w	r2, [r1, #314]	; 0x13a
    9b6e:	b13a      	cbz	r2, 9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>
    9b70:	f881 013a 	strb.w	r0, [r1, #314]	; 0x13a
    9b74:	6861      	ldr	r1, [r4, #4]
    9b76:	f891 2095 	ldrb.w	r2, [r1, #149]	; 0x95
    9b7a:	b90a      	cbnz	r2, 9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>
    9b7c:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    9b80:	2000      	movs	r0, #0
    9b82:	bd70      	pop	{r4, r5, r6, pc}
    9b84:	20000160 	.word	0x20000160
    9b88:	4603      	mov	r3, r0
    9b8a:	2000      	movs	r0, #0
    9b8c:	2b16      	cmp	r3, #22
    9b8e:	d00b      	beq.n	9ba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    9b90:	2b23      	cmp	r3, #35	; 0x23
    9b92:	d003      	beq.n	9b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1840>
    9b94:	2b24      	cmp	r3, #36	; 0x24
    9b96:	d001      	beq.n	9b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1840>
    9b98:	2b25      	cmp	r3, #37	; 0x25
    9b9a:	d108      	bne.n	9bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    9b9c:	4a04      	ldr	r2, [pc, #16]	; (9bb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>)
    9b9e:	6812      	ldr	r2, [r2, #0]
    9ba0:	2a00      	cmp	r2, #0
    9ba2:	d004      	beq.n	9bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    9ba4:	4618      	mov	r0, r3
    9ba6:	4710      	bx	r2
    9ba8:	4608      	mov	r0, r1
    9baa:	f7ff bbc5 	b.w	9338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    9bae:	4770      	bx	lr
    9bb0:	200002d0 	.word	0x200002d0
    9bb4:	4a03      	ldr	r2, [pc, #12]	; (9bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>)
    9bb6:	6852      	ldr	r2, [r2, #4]
    9bb8:	f882 011b 	strb.w	r0, [r2, #283]	; 0x11b
    9bbc:	f882 111a 	strb.w	r1, [r2, #282]	; 0x11a
    9bc0:	4770      	bx	lr
    9bc2:	0000      	.short	0x0000
    9bc4:	20000170 	.word	0x20000170
    9bc8:	4915      	ldr	r1, [pc, #84]	; (9c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c4>)
    9bca:	b510      	push	{r4, lr}
    9bcc:	6889      	ldr	r1, [r1, #8]
    9bce:	790a      	ldrb	r2, [r1, #4]
    9bd0:	6841      	ldr	r1, [r0, #4]
    9bd2:	f891 3095 	ldrb.w	r3, [r1, #149]	; 0x95
    9bd6:	2b0a      	cmp	r3, #10
    9bd8:	d10a      	bne.n	9bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>
    9bda:	f891 3119 	ldrb.w	r3, [r1, #281]	; 0x119
    9bde:	4293      	cmp	r3, r2
    9be0:	d106      	bne.n	9bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>
    9be2:	2200      	movs	r2, #0
    9be4:	f881 2095 	strb.w	r2, [r1, #149]	; 0x95
    9be8:	6840      	ldr	r0, [r0, #4]
    9bea:	f880 20ce 	strb.w	r2, [r0, #206]	; 0xce
    9bee:	bd10      	pop	{r4, pc}
    9bf0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    9bf4:	071c      	lsls	r4, r3, #28
    9bf6:	d507      	bpl.n	9c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ac>
    9bf8:	f023 0008 	bic.w	r0, r3, #8
    9bfc:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    9c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c04:	f7fe bcb8 	b.w	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9c08:	2aff      	cmp	r2, #255	; 0xff
    9c0a:	d004      	beq.n	9c16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ba>
    9c0c:	f240 719c 	movw	r1, #1948	; 0x79c
    9c10:	2031      	movs	r0, #49	; 0x31
    9c12:	f7fa fcab 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c1a:	f005 bc0e 	b.w	f43a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x206>
    9c1e:	0000      	.short	0x0000
    9c20:	20000160 	.word	0x20000160
    9c24:	4808      	ldr	r0, [pc, #32]	; (9c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ec>)
    9c26:	b510      	push	{r4, lr}
    9c28:	6840      	ldr	r0, [r0, #4]
    9c2a:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
    9c2e:	b941      	cbnz	r1, 9c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e6>
    9c30:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9c34:	2301      	movs	r3, #1
    9c36:	2106      	movs	r1, #6
    9c38:	3080      	adds	r0, #128	; 0x80
    9c3a:	f003 fe76 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c3e:	2800      	cmp	r0, #0
    9c40:	d000      	beq.n	9c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e8>
    9c42:	2001      	movs	r0, #1
    9c44:	bd10      	pop	{r4, pc}
    9c46:	0000      	.short	0x0000
    9c48:	20000170 	.word	0x20000170
    9c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c4e:	4c5e      	ldr	r4, [pc, #376]	; (9dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    9c50:	4607      	mov	r7, r0
    9c52:	4615      	mov	r5, r2
    9c54:	6860      	ldr	r0, [r4, #4]
    9c56:	2200      	movs	r2, #0
    9c58:	b111      	cbz	r1, 9c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1904>
    9c5a:	f8a0 2226 	strh.w	r2, [r0, #550]	; 0x226
    9c5e:	e006      	b.n	9c6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1912>
    9c60:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    9c64:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
    9c68:	4411      	add	r1, r2
    9c6a:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    9c6e:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    9c72:	f88d 1000 	strb.w	r1, [sp]
    9c76:	9900      	ldr	r1, [sp, #0]
    9c78:	9100      	str	r1, [sp, #0]
    9c7a:	f89d 1000 	ldrb.w	r1, [sp]
    9c7e:	b939      	cbnz	r1, 9c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1934>
    9c80:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    9c84:	2301      	movs	r3, #1
    9c86:	4619      	mov	r1, r3
    9c88:	3080      	adds	r0, #128	; 0x80
    9c8a:	f003 fe4e 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c8e:	b130      	cbz	r0, 9c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1942>
    9c90:	6860      	ldr	r0, [r4, #4]
    9c92:	f830 1fc8 	ldrh.w	r1, [r0, #200]!
    9c96:	f8b0 214e 	ldrh.w	r2, [r0, #334]	; 0x14e
    9c9a:	4411      	add	r1, r2
    9c9c:	8001      	strh	r1, [r0, #0]
    9c9e:	6861      	ldr	r1, [r4, #4]
    9ca0:	f891 00ce 	ldrb.w	r0, [r1, #206]	; 0xce
    9ca4:	b130      	cbz	r0, 9cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1958>
    9ca6:	f8b1 20ca 	ldrh.w	r2, [r1, #202]	; 0xca
    9caa:	f8b1 3216 	ldrh.w	r3, [r1, #534]	; 0x216
    9cae:	441a      	add	r2, r3
    9cb0:	f8a1 20ca 	strh.w	r2, [r1, #202]	; 0xca
    9cb4:	f991 20d2 	ldrsb.w	r2, [r1, #210]	; 0xd2
    9cb8:	2a00      	cmp	r2, #0
    9cba:	dd06      	ble.n	9cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    9cbc:	f8b1 30d0 	ldrh.w	r3, [r1, #208]	; 0xd0
    9cc0:	f8b1 6216 	ldrh.w	r6, [r1, #534]	; 0x216
    9cc4:	4433      	add	r3, r6
    9cc6:	f8a1 30d0 	strh.w	r3, [r1, #208]	; 0xd0
    9cca:	263d      	movs	r6, #61	; 0x3d
    9ccc:	b117      	cbz	r7, 9cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    9cce:	f881 60b5 	strb.w	r6, [r1, #181]	; 0xb5
    9cd2:	e016      	b.n	9d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    9cd4:	4b3c      	ldr	r3, [pc, #240]	; (9dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    9cd6:	3b10      	subs	r3, #16
    9cd8:	781b      	ldrb	r3, [r3, #0]
    9cda:	2b02      	cmp	r3, #2
    9cdc:	d00b      	beq.n	9cf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199a>
    9cde:	2b01      	cmp	r3, #1
    9ce0:	d015      	beq.n	9d0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b2>
    9ce2:	b36d      	cbz	r5, 9d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e4>
    9ce4:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9ce8:	220a      	movs	r2, #10
    9cea:	f7fc fbb1 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9cee:	06e8      	lsls	r0, r5, #27
    9cf0:	d510      	bpl.n	9d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b8>
    9cf2:	201e      	movs	r0, #30
    9cf4:	e01b      	b.n	9d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d2>
    9cf6:	f891 011e 	ldrb.w	r0, [r1, #286]	; 0x11e
    9cfa:	2806      	cmp	r0, #6
    9cfc:	d048      	beq.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9cfe:	2016      	movs	r0, #22
    9d00:	e046      	b.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9d02:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9d06:	220a      	movs	r2, #10
    9d08:	f7fc fba2 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9d0c:	e049      	b.n	9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d0e:	f891 0098 	ldrb.w	r0, [r1, #152]	; 0x98
    9d12:	e03d      	b.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9d14:	0728      	lsls	r0, r5, #28
    9d16:	d503      	bpl.n	9d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    9d18:	6860      	ldr	r0, [r4, #4]
    9d1a:	f880 60b5 	strb.w	r6, [r0, #181]	; 0xb5
    9d1e:	e040      	b.n	9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d20:	06a8      	lsls	r0, r5, #26
    9d22:	d501      	bpl.n	9d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19cc>
    9d24:	2023      	movs	r0, #35	; 0x23
    9d26:	e002      	b.n	9d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d2>
    9d28:	07a8      	lsls	r0, r5, #30
    9d2a:	d004      	beq.n	9d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19da>
    9d2c:	202a      	movs	r0, #42	; 0x2a
    9d2e:	6861      	ldr	r1, [r4, #4]
    9d30:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9d34:	e035      	b.n	9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d36:	f640 51e9 	movw	r1, #3561	; 0xde9
    9d3a:	2031      	movs	r0, #49	; 0x31
    9d3c:	f7fa fc16 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d40:	b128      	cbz	r0, 9d4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f2>
    9d42:	f8b1 00ca 	ldrh.w	r0, [r1, #202]	; 0xca
    9d46:	f8b1 30cc 	ldrh.w	r3, [r1, #204]	; 0xcc
    9d4a:	4298      	cmp	r0, r3
    9d4c:	d216      	bcs.n	9d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a20>
    9d4e:	2a00      	cmp	r2, #0
    9d50:	dd05      	ble.n	9d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a02>
    9d52:	f8b1 00d0 	ldrh.w	r0, [r1, #208]	; 0xd0
    9d56:	f8b1 20cc 	ldrh.w	r2, [r1, #204]	; 0xcc
    9d5a:	4290      	cmp	r0, r2
    9d5c:	d20e      	bcs.n	9d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a20>
    9d5e:	f8b1 20c8 	ldrh.w	r2, [r1, #200]	; 0xc8
    9d62:	f8b1 00c6 	ldrh.w	r0, [r1, #198]	; 0xc6
    9d66:	4282      	cmp	r2, r0
    9d68:	d30a      	bcc.n	9d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    9d6a:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
    9d6e:	f88d 2000 	strb.w	r2, [sp]
    9d72:	9a00      	ldr	r2, [sp, #0]
    9d74:	9200      	str	r2, [sp, #0]
    9d76:	f89d 2000 	ldrb.w	r2, [sp]
    9d7a:	b10a      	cbz	r2, 9d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    9d7c:	2022      	movs	r0, #34	; 0x22
    9d7e:	e007      	b.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9d80:	f891 2099 	ldrb.w	r2, [r1, #153]	; 0x99
    9d84:	b13a      	cbz	r2, 9d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3a>
    9d86:	f8b1 20c4 	ldrh.w	r2, [r1, #196]	; 0xc4
    9d8a:	4282      	cmp	r2, r0
    9d8c:	d309      	bcc.n	9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d8e:	2008      	movs	r0, #8
    9d90:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9d94:	e7b5      	b.n	9d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    9d96:	f8b1 00c4 	ldrh.w	r0, [r1, #196]	; 0xc4
    9d9a:	2806      	cmp	r0, #6
    9d9c:	d301      	bcc.n	9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d9e:	203e      	movs	r0, #62	; 0x3e
    9da0:	e7f6      	b.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9da2:	6860      	ldr	r0, [r4, #4]
    9da4:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9da8:	f88d 1000 	strb.w	r1, [sp]
    9dac:	9900      	ldr	r1, [sp, #0]
    9dae:	9100      	str	r1, [sp, #0]
    9db0:	f89d 1000 	ldrb.w	r1, [sp]
    9db4:	b119      	cbz	r1, 9dbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a62>
    9db6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9dba:	f005 ba3b 	b.w	f234 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9dbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9dc2:	2100      	movs	r1, #0
    9dc4:	f7fd be92 	b.w	7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9dc8:	20000170 	.word	0x20000170
    9dcc:	b570      	push	{r4, r5, r6, lr}
    9dce:	4d2e      	ldr	r5, [pc, #184]	; (9e88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b2c>)
    9dd0:	6868      	ldr	r0, [r5, #4]
    9dd2:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    9dd6:	b151      	cbz	r1, 9dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9dd8:	2901      	cmp	r1, #1
    9dda:	d008      	beq.n	9dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9ddc:	2902      	cmp	r1, #2
    9dde:	d009      	beq.n	9df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    9de0:	2903      	cmp	r1, #3
    9de2:	d007      	beq.n	9df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    9de4:	f640 4159 	movw	r1, #3161	; 0xc59
    9de8:	2031      	movs	r0, #49	; 0x31
    9dea:	f7fa fbbf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9dee:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    9df2:	e037      	b.n	9e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b08>
    9df4:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
    9df8:	2908      	cmp	r1, #8
    9dfa:	d036      	beq.n	9e6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0e>
    9dfc:	f8b0 20c4 	ldrh.w	r2, [r0, #196]	; 0xc4
    9e00:	f8b0 10c6 	ldrh.w	r1, [r0, #198]	; 0xc6
    9e04:	2400      	movs	r4, #0
    9e06:	1c93      	adds	r3, r2, #2
    9e08:	4299      	cmp	r1, r3
    9e0a:	d306      	bcc.n	9e1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abe>
    9e0c:	1a89      	subs	r1, r1, r2
    9e0e:	1e89      	subs	r1, r1, #2
    9e10:	040c      	lsls	r4, r1, #16
    9e12:	0c24      	lsrs	r4, r4, #16
    9e14:	d001      	beq.n	9e1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abe>
    9e16:	1e64      	subs	r4, r4, #1
    9e18:	b2a4      	uxth	r4, r4
    9e1a:	f890 10c2 	ldrb.w	r1, [r0, #194]	; 0xc2
    9e1e:	b139      	cbz	r1, 9e30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ad4>
    9e20:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9e24:	2301      	movs	r3, #1
    9e26:	2109      	movs	r1, #9
    9e28:	3080      	adds	r0, #128	; 0x80
    9e2a:	f003 fd7e 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e2e:	b340      	cbz	r0, 9e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b26>
    9e30:	f7ff fef8 	bl	9c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    9e34:	b178      	cbz	r0, 9e56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afa>
    9e36:	686a      	ldr	r2, [r5, #4]
    9e38:	2000      	movs	r0, #0
    9e3a:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
    9e3e:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
    9e42:	1c93      	adds	r3, r2, #2
    9e44:	4299      	cmp	r1, r3
    9e46:	d303      	bcc.n	9e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    9e48:	1a88      	subs	r0, r1, r2
    9e4a:	1e80      	subs	r0, r0, #2
    9e4c:	d000      	beq.n	9e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    9e4e:	1e40      	subs	r0, r0, #1
    9e50:	42a0      	cmp	r0, r4
    9e52:	d200      	bcs.n	9e56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afa>
    9e54:	b284      	uxth	r4, r0
    9e56:	b10c      	cbz	r4, 9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b00>
    9e58:	1e64      	subs	r4, r4, #1
    9e5a:	b2a4      	uxth	r4, r4
    9e5c:	6868      	ldr	r0, [r5, #4]
    9e5e:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    9e62:	4421      	add	r1, r4
    9e64:	f8a0 1210 	strh.w	r1, [r0, #528]	; 0x210
    9e68:	bd70      	pop	{r4, r5, r6, pc}
    9e6a:	f8b0 10c4 	ldrh.w	r1, [r0, #196]	; 0xc4
    9e6e:	2903      	cmp	r1, #3
    9e70:	d3bd      	bcc.n	9dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9e72:	f830 1f8c 	ldrh.w	r1, [r0, #140]!
    9e76:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    9e78:	4411      	add	r1, r2
    9e7a:	1c49      	adds	r1, r1, #1
    9e7c:	f8a0 1184 	strh.w	r1, [r0, #388]	; 0x184
    9e80:	bd70      	pop	{r4, r5, r6, pc}
    9e82:	2400      	movs	r4, #0
    9e84:	e7ea      	b.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b00>
    9e86:	0000      	.short	0x0000
    9e88:	20000170 	.word	0x20000170

00009e8c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9e8c:	4903      	ldr	r1, [pc, #12]	; (9e9c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9e8e:	884a      	ldrh	r2, [r1, #2]
    9e90:	8002      	strh	r2, [r0, #0]
    9e92:	7809      	ldrb	r1, [r1, #0]
    9e94:	7081      	strb	r1, [r0, #2]
    9e96:	2000      	movs	r0, #0
    9e98:	4770      	bx	lr
    9e9a:	0000      	.short	0x0000
    9e9c:	20001404 	.word	0x20001404

00009ea0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9ea0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9ea2:	460c      	mov	r4, r1
    9ea4:	4605      	mov	r5, r0
    9ea6:	8800      	ldrh	r0, [r0, #0]
    9ea8:	4669      	mov	r1, sp
    9eaa:	f003 fd14 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9eae:	2200      	movs	r2, #0
    9eb0:	b128      	cbz	r0, 9ebe <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    9eb2:	f8c4 2002 	str.w	r2, [r4, #2]
    9eb6:	71a2      	strb	r2, [r4, #6]
    9eb8:	8022      	strh	r2, [r4, #0]
    9eba:	2002      	movs	r0, #2
    9ebc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9ebe:	9901      	ldr	r1, [sp, #4]
    9ec0:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    9ec4:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    9ec8:	f8d1 001e 	ldr.w	r0, [r1, #30]
    9ecc:	f8c4 0002 	str.w	r0, [r4, #2]
    9ed0:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
    9ed4:	71a0      	strb	r0, [r4, #6]
    9ed6:	8828      	ldrh	r0, [r5, #0]
    9ed8:	8020      	strh	r0, [r4, #0]
    9eda:	f891 006c 	ldrb.w	r0, [r1, #108]	; 0x6c
    9ede:	f88d 0008 	strb.w	r0, [sp, #8]
    9ee2:	9802      	ldr	r0, [sp, #8]
    9ee4:	9002      	str	r0, [sp, #8]
    9ee6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9eea:	2800      	cmp	r0, #0
    9eec:	d1ea      	bne.n	9ec4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    9eee:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00009ef0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    9ef0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9ef2:	460d      	mov	r5, r1
    9ef4:	4606      	mov	r6, r0
    9ef6:	8800      	ldrh	r0, [r0, #0]
    9ef8:	4669      	mov	r1, sp
    9efa:	f003 fcec 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9efe:	2800      	cmp	r0, #0
    9f00:	d11a      	bne.n	9f38 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    9f02:	f8dd 4004 	ldr.w	r4, [sp, #4]
    9f06:	2700      	movs	r7, #0
    9f08:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    9f0c:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    9f10:	f006 f989 	bl	10226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    9f14:	70a8      	strb	r0, [r5, #2]
    9f16:	7860      	ldrb	r0, [r4, #1]
    9f18:	f006 f985 	bl	10226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    9f1c:	70e8      	strb	r0, [r5, #3]
    9f1e:	78a0      	ldrb	r0, [r4, #2]
    9f20:	f88d 0008 	strb.w	r0, [sp, #8]
    9f24:	9802      	ldr	r0, [sp, #8]
    9f26:	9002      	str	r0, [sp, #8]
    9f28:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9f2c:	3c6a      	subs	r4, #106	; 0x6a
    9f2e:	2800      	cmp	r0, #0
    9f30:	d1ea      	bne.n	9f08 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    9f32:	8830      	ldrh	r0, [r6, #0]
    9f34:	8028      	strh	r0, [r5, #0]
    9f36:	2000      	movs	r0, #0
    9f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00009f3c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9f3c:	4903      	ldr	r1, [pc, #12]	; (9f4c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    9f3e:	888a      	ldrh	r2, [r1, #4]
    9f40:	8002      	strh	r2, [r0, #0]
    9f42:	88c9      	ldrh	r1, [r1, #6]
    9f44:	8041      	strh	r1, [r0, #2]
    9f46:	2000      	movs	r0, #0
    9f48:	4770      	bx	lr
    9f4a:	0000      	.short	0x0000
    9f4c:	200002e0 	.word	0x200002e0

00009f50 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9f50:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9f52:	2400      	movs	r4, #0
    9f54:	a902      	add	r1, sp, #8
    9f56:	f88d 4004 	strb.w	r4, [sp, #4]
    9f5a:	f88d 4008 	strb.w	r4, [sp, #8]
    9f5e:	9100      	str	r1, [sp, #0]
    9f60:	7882      	ldrb	r2, [r0, #2]
    9f62:	7841      	ldrb	r1, [r0, #1]
    9f64:	7800      	ldrb	r0, [r0, #0]
    9f66:	ab01      	add	r3, sp, #4
    9f68:	f006 fad0 	bl	1050c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    9f6c:	2800      	cmp	r0, #0
    9f6e:	d112      	bne.n	9f96 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    9f70:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9f74:	f006 fa0b 	bl	1038e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    9f78:	b170      	cbz	r0, 9f98 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    9f7a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9f7e:	f006 fa06 	bl	1038e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    9f82:	b148      	cbz	r0, 9f98 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    9f84:	4805      	ldr	r0, [pc, #20]	; (9f9c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    9f86:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9f8a:	7381      	strb	r1, [r0, #14]
    9f8c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9f90:	73c1      	strb	r1, [r0, #15]
    9f92:	8204      	strh	r4, [r0, #16]
    9f94:	2000      	movs	r0, #0
    9f96:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9f98:	2011      	movs	r0, #17
    9f9a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9f9c:	20001404 	.word	0x20001404

00009fa0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    9fa0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9fa4:	460f      	mov	r7, r1
    9fa6:	4605      	mov	r5, r0
    9fa8:	7806      	ldrb	r6, [r0, #0]
    9faa:	f006 f9a3 	bl	102f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    9fae:	2800      	cmp	r0, #0
    9fb0:	d10a      	bne.n	9fc8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9fb2:	4628      	mov	r0, r5
    9fb4:	f006 f978 	bl	102a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    9fb8:	2800      	cmp	r0, #0
    9fba:	d105      	bne.n	9fc8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9fbc:	2001      	movs	r0, #1
    9fbe:	f7fa fcc5 	bl	494c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    9fc2:	4286      	cmp	r6, r0
    9fc4:	d302      	bcc.n	9fcc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    9fc6:	2007      	movs	r0, #7
    9fc8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9fcc:	2101      	movs	r1, #1
    9fce:	4630      	mov	r0, r6
    9fd0:	f003 fa0a 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9fd4:	0004      	movs	r4, r0
    9fd6:	d004      	beq.n	9fe2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    9fd8:	f004 fd71 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9fdc:	b168      	cbz	r0, 9ffa <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    9fde:	200c      	movs	r0, #12
    9fe0:	e7f2      	b.n	9fc8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9fe2:	2101      	movs	r1, #1
    9fe4:	4630      	mov	r0, r6
    9fe6:	f003 f9f5 	bl	d3d4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    9fea:	0004      	movs	r4, r0
    9fec:	d013      	beq.n	a016 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    9fee:	4817      	ldr	r0, [pc, #92]	; (a04c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    9ff0:	f990 1000 	ldrsb.w	r1, [r0]
    9ff4:	4620      	mov	r0, r4
    9ff6:	f004 fad6 	bl	e5a6 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    9ffa:	4620      	mov	r0, r4
    9ffc:	f004 fba7 	bl	e74e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    a000:	7038      	strb	r0, [r7, #0]
    a002:	74e8      	strb	r0, [r5, #19]
    a004:	4629      	mov	r1, r5
    a006:	4620      	mov	r0, r4
    a008:	f7fc fdca 	bl	6ba0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    a00c:	4606      	mov	r6, r0
    a00e:	7e68      	ldrb	r0, [r5, #25]
    a010:	b1d0      	cbz	r0, a048 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    a012:	b12e      	cbz	r6, a020 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    a014:	e018      	b.n	a048 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    a016:	f241 3162 	movw	r1, #4962	; 0x1362
    a01a:	2039      	movs	r0, #57	; 0x39
    a01c:	f7fa faa6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a020:	2200      	movs	r2, #0
    a022:	4668      	mov	r0, sp
    a024:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a026:	f003 fa91 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a02a:	2200      	movs	r2, #0
    a02c:	2101      	movs	r1, #1
    a02e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a030:	f003 fb02 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a034:	2204      	movs	r2, #4
    a036:	4668      	mov	r0, sp
    a038:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a03a:	f003 fa87 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a03e:	2200      	movs	r2, #0
    a040:	4611      	mov	r1, r2
    a042:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a044:	f003 faf8 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a048:	4630      	mov	r0, r6
    a04a:	e7bd      	b.n	9fc8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a04c:	200002d8 	.word	0x200002d8

0000a050 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a050:	7801      	ldrb	r1, [r0, #0]
    a052:	b171      	cbz	r1, a072 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a054:	7841      	ldrb	r1, [r0, #1]
    a056:	b161      	cbz	r1, a072 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a058:	8841      	ldrh	r1, [r0, #2]
    a05a:	291b      	cmp	r1, #27
    a05c:	d309      	bcc.n	a072 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a05e:	8881      	ldrh	r1, [r0, #4]
    a060:	291b      	cmp	r1, #27
    a062:	d306      	bcc.n	a072 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a064:	4904      	ldr	r1, [pc, #16]	; (a078 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a066:	6802      	ldr	r2, [r0, #0]
    a068:	600a      	str	r2, [r1, #0]
    a06a:	8880      	ldrh	r0, [r0, #4]
    a06c:	8088      	strh	r0, [r1, #4]
    a06e:	2000      	movs	r0, #0
    a070:	4770      	bx	lr
    a072:	2012      	movs	r0, #18
    a074:	4770      	bx	lr
    a076:	0000      	.short	0x0000
    a078:	20001404 	.word	0x20001404

0000a07c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a07c:	6800      	ldr	r0, [r0, #0]
    a07e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    a082:	4288      	cmp	r0, r1
    a084:	d303      	bcc.n	a08e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    a086:	4903      	ldr	r1, [pc, #12]	; (a094 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    a088:	6088      	str	r0, [r1, #8]
    a08a:	2000      	movs	r0, #0
    a08c:	4770      	bx	lr
    a08e:	2012      	movs	r0, #18
    a090:	4770      	bx	lr
    a092:	0000      	.short	0x0000
    a094:	20001404 	.word	0x20001404

0000a098 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a098:	4a03      	ldr	r2, [pc, #12]	; (a0a8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a09a:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    a09e:	6001      	str	r1, [r0, #0]
    a0a0:	6042      	str	r2, [r0, #4]
    a0a2:	2000      	movs	r0, #0
    a0a4:	4770      	bx	lr
    a0a6:	0000      	.short	0x0000
    a0a8:	0000a57c 	.word	0x0000a57c

0000a0ac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    a0ac:	b510      	push	{r4, lr}
    a0ae:	2005      	movs	r0, #5
    a0b0:	f000 faee 	bl	a690 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    a0b4:	f7fe f8aa 	bl	820c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    a0b8:	4902      	ldr	r1, [pc, #8]	; (a0c4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    a0ba:	4801      	ldr	r0, [pc, #4]	; (a0c0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    a0bc:	6048      	str	r0, [r1, #4]
    a0be:	bd10      	pop	{r4, pc}
    a0c0:	0000a0f5 	.word	0x0000a0f5
    a0c4:	200002d8 	.word	0x200002d8
    a0c8:	b51c      	push	{r2, r3, r4, lr}
    a0ca:	4909      	ldr	r1, [pc, #36]	; (a0f0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    a0cc:	e9d1 0100 	ldrd	r0, r1, [r1]
    a0d0:	e9cd 0100 	strd	r0, r1, [sp]
    a0d4:	e005      	b.n	a0e2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    a0d6:	9800      	ldr	r0, [sp, #0]
    a0d8:	f004 fcf1 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a0dc:	b108      	cbz	r0, a0e2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    a0de:	2001      	movs	r0, #1
    a0e0:	bd1c      	pop	{r2, r3, r4, pc}
    a0e2:	4668      	mov	r0, sp
    a0e4:	f7fa fc7c 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a0e8:	2800      	cmp	r0, #0
    a0ea:	d0f4      	beq.n	a0d6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    a0ec:	2000      	movs	r0, #0
    a0ee:	bd1c      	pop	{r2, r3, r4, pc}
    a0f0:	0000a57c 	.word	0x0000a57c
    a0f4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    a0f8:	4613      	mov	r3, r2
    a0fa:	4a33      	ldr	r2, [pc, #204]	; (a1c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>)
    a0fc:	460f      	mov	r7, r1
    a0fe:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    a102:	8814      	ldrh	r4, [r2, #0]
    a104:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    a108:	428c      	cmp	r4, r1
    a10a:	d200      	bcs.n	a10e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
    a10c:	4621      	mov	r1, r4
    a10e:	4688      	mov	r8, r1
    a110:	8891      	ldrh	r1, [r2, #4]
    a112:	42b1      	cmp	r1, r6
    a114:	d200      	bcs.n	a118 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6c>
    a116:	460e      	mov	r6, r1
    a118:	8851      	ldrh	r1, [r2, #2]
    a11a:	f640 0448 	movw	r4, #2120	; 0x848
    a11e:	42a1      	cmp	r1, r4
    a120:	d300      	bcc.n	a124 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x78>
    a122:	4621      	mov	r1, r4
    a124:	88d5      	ldrh	r5, [r2, #6]
    a126:	42a5      	cmp	r5, r4
    a128:	d300      	bcc.n	a12c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>
    a12a:	4625      	mov	r5, r4
    a12c:	42a1      	cmp	r1, r4
    a12e:	d200      	bcs.n	a132 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
    a130:	460c      	mov	r4, r1
    a132:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a136:	2e1b      	cmp	r6, #27
    a138:	d001      	beq.n	a13e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x92>
    a13a:	4295      	cmp	r5, r2
    a13c:	d104      	bne.n	a148 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    a13e:	f1b8 0f1b 	cmp.w	r8, #27
    a142:	d03e      	beq.n	a1c2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a144:	4294      	cmp	r4, r2
    a146:	d03c      	beq.n	a1c2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a148:	466a      	mov	r2, sp
    a14a:	4619      	mov	r1, r3
    a14c:	f006 f942 	bl	103d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    a150:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a154:	4641      	mov	r1, r8
    a156:	4540      	cmp	r0, r8
    a158:	d900      	bls.n	a15c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    a15a:	4608      	mov	r0, r1
    a15c:	80f8      	strh	r0, [r7, #6]
    a15e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a162:	42a1      	cmp	r1, r4
    a164:	d800      	bhi.n	a168 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>
    a166:	460c      	mov	r4, r1
    a168:	813c      	strh	r4, [r7, #8]
    a16a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a16e:	42b1      	cmp	r1, r6
    a170:	d800      	bhi.n	a174 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc8>
    a172:	460e      	mov	r6, r1
    a174:	807e      	strh	r6, [r7, #2]
    a176:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a17a:	42a9      	cmp	r1, r5
    a17c:	d800      	bhi.n	a180 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd4>
    a17e:	460d      	mov	r5, r1
    a180:	80bd      	strh	r5, [r7, #4]
    a182:	21ff      	movs	r1, #255	; 0xff
    a184:	7039      	strb	r1, [r7, #0]
    a186:	381b      	subs	r0, #27
    a188:	28e0      	cmp	r0, #224	; 0xe0
    a18a:	d902      	bls.n	a192 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe6>
    a18c:	f640 51a2 	movw	r1, #3490	; 0xda2
    a190:	e014      	b.n	a1bc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a192:	3e1b      	subs	r6, #27
    a194:	2ee0      	cmp	r6, #224	; 0xe0
    a196:	d902      	bls.n	a19e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf2>
    a198:	f640 51a4 	movw	r1, #3492	; 0xda4
    a19c:	e00e      	b.n	a1bc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a19e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a1a2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a1a6:	4284      	cmp	r4, r0
    a1a8:	d902      	bls.n	a1b0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x104>
    a1aa:	f640 51a6 	movw	r1, #3494	; 0xda6
    a1ae:	e005      	b.n	a1bc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a1b0:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    a1b4:	4285      	cmp	r5, r0
    a1b6:	d904      	bls.n	a1c2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a1b8:	f640 51a8 	movw	r1, #3496	; 0xda8
    a1bc:	2039      	movs	r0, #57	; 0x39
    a1be:	f7fa f9d5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1c2:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    a1c6:	0000      	.short	0x0000
    a1c8:	200002e0 	.word	0x200002e0
    a1cc:	b510      	push	{r4, lr}
    a1ce:	480d      	ldr	r0, [pc, #52]	; (a204 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x158>)
    a1d0:	2100      	movs	r1, #0
    a1d2:	4b0d      	ldr	r3, [pc, #52]	; (a208 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>)
    a1d4:	74c1      	strb	r1, [r0, #19]
    a1d6:	8281      	strh	r1, [r0, #20]
    a1d8:	221b      	movs	r2, #27
    a1da:	801a      	strh	r2, [r3, #0]
    a1dc:	f44f 74a4 	mov.w	r4, #328	; 0x148
    a1e0:	805c      	strh	r4, [r3, #2]
    a1e2:	809a      	strh	r2, [r3, #4]
    a1e4:	80dc      	strh	r4, [r3, #6]
    a1e6:	7381      	strb	r1, [r0, #14]
    a1e8:	73c1      	strb	r1, [r0, #15]
    a1ea:	2303      	movs	r3, #3
    a1ec:	7003      	strb	r3, [r0, #0]
    a1ee:	2302      	movs	r3, #2
    a1f0:	7043      	strb	r3, [r0, #1]
    a1f2:	8042      	strh	r2, [r0, #2]
    a1f4:	8082      	strh	r2, [r0, #4]
    a1f6:	f640 62a6 	movw	r2, #3750	; 0xea6
    a1fa:	6082      	str	r2, [r0, #8]
    a1fc:	7481      	strb	r1, [r0, #18]
    a1fe:	7301      	strb	r1, [r0, #12]
    a200:	bd10      	pop	{r4, pc}
    a202:	0000      	.short	0x0000
    a204:	20001404 	.word	0x20001404
    a208:	200002e0 	.word	0x200002e0
    a20c:	b510      	push	{r4, lr}
    a20e:	2101      	movs	r1, #1
    a210:	2000      	movs	r0, #0
    a212:	f003 f8e9 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a216:	0004      	movs	r4, r0
    a218:	d10a      	bne.n	a230 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x184>
    a21a:	2101      	movs	r1, #1
    a21c:	f003 f8da 	bl	d3d4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a220:	0004      	movs	r4, r0
    a222:	d007      	beq.n	a234 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x188>
    a224:	4806      	ldr	r0, [pc, #24]	; (a240 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x194>)
    a226:	f990 1000 	ldrsb.w	r1, [r0]
    a22a:	4620      	mov	r0, r4
    a22c:	f004 f9bb 	bl	e5a6 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a230:	4620      	mov	r0, r4
    a232:	bd10      	pop	{r4, pc}
    a234:	f240 2167 	movw	r1, #615	; 0x267
    a238:	2039      	movs	r0, #57	; 0x39
    a23a:	f7fa f997 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a23e:	0000      	.short	0x0000
    a240:	200002d8 	.word	0x200002d8

0000a244 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a248:	b087      	sub	sp, #28
    a24a:	460c      	mov	r4, r1
    a24c:	4680      	mov	r8, r0
    a24e:	4605      	mov	r5, r0
    a250:	f004 fa80 	bl	e754 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a254:	b198      	cbz	r0, a27e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a256:	4628      	mov	r0, r5
    a258:	f004 fa6f 	bl	e73a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a25c:	b130      	cbz	r0, a26c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    a25e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a262:	2012      	movs	r0, #18
    a264:	2900      	cmp	r1, #0
    a266:	d00b      	beq.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a268:	2980      	cmp	r1, #128	; 0x80
    a26a:	d809      	bhi.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a26c:	4628      	mov	r0, r5
    a26e:	f004 fa53 	bl	e718 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a272:	b140      	cbz	r0, a286 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a274:	4640      	mov	r0, r8
    a276:	f004 f960 	bl	e53a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a27a:	b130      	cbz	r0, a28a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    a27c:	e009      	b.n	a292 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    a27e:	2042      	movs	r0, #66	; 0x42
    a280:	b007      	add	sp, #28
    a282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a286:	200c      	movs	r0, #12
    a288:	e7fa      	b.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a28a:	4640      	mov	r0, r8
    a28c:	f004 fa4f 	bl	e72e <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a290:	b3c8      	cbz	r0, a306 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    a292:	4640      	mov	r0, r8
    a294:	f004 fc13 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a298:	2800      	cmp	r0, #0
    a29a:	d1f4      	bne.n	a286 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a29c:	4640      	mov	r0, r8
    a29e:	f004 f967 	bl	e570 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a2a2:	2800      	cmp	r0, #0
    a2a4:	d1ef      	bne.n	a286 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a2a6:	4640      	mov	r0, r8
    a2a8:	f7fc fc18 	bl	6adc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a2ac:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a2b0:	f242 7110 	movw	r1, #10000	; 0x2710
    a2b4:	fb00 f901 	mul.w	r9, r0, r1
    a2b8:	78e1      	ldrb	r1, [r4, #3]
    a2ba:	4640      	mov	r0, r8
    a2bc:	f004 fa23 	bl	e706 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a2c0:	4640      	mov	r0, r8
    a2c2:	f004 fa36 	bl	e732 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a2c6:	b308      	cbz	r0, a30c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    a2c8:	2100      	movs	r1, #0
    a2ca:	a801      	add	r0, sp, #4
    a2cc:	f7fa fba8 	bl	4a20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a2d0:	0004      	movs	r4, r0
    a2d2:	d07b      	beq.n	a3cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    a2d4:	2100      	movs	r1, #0
    a2d6:	f7fb ff41 	bl	615c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a2da:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a2de:	8020      	strh	r0, [r4, #0]
    a2e0:	4621      	mov	r1, r4
    a2e2:	4640      	mov	r0, r8
    a2e4:	f004 fa4d 	bl	e782 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a2e8:	f000 f9de 	bl	a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a2ec:	0940      	lsrs	r0, r0, #5
    a2ee:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    a2f2:	07c0      	lsls	r0, r0, #31
    a2f4:	4d41      	ldr	r5, [pc, #260]	; (a3fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    a2f6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a2fa:	d011      	beq.n	a320 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    a2fc:	8869      	ldrh	r1, [r5, #2]
    a2fe:	88aa      	ldrh	r2, [r5, #4]
    a300:	84c1      	strh	r1, [r0, #38]	; 0x26
    a302:	8502      	strh	r2, [r0, #40]	; 0x28
    a304:	e00f      	b.n	a326 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    a306:	e7ff      	b.n	a308 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    a308:	2012      	movs	r0, #18
    a30a:	e7b9      	b.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a30c:	464a      	mov	r2, r9
    a30e:	2100      	movs	r1, #0
    a310:	4640      	mov	r0, r8
    a312:	f7fd fad9 	bl	78c8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a316:	2800      	cmp	r0, #0
    a318:	d0b2      	beq.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a31a:	f241 51b5 	movw	r1, #5557	; 0x15b5
    a31e:	e05f      	b.n	a3e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a320:	221b      	movs	r2, #27
    a322:	84c2      	strh	r2, [r0, #38]	; 0x26
    a324:	8502      	strh	r2, [r0, #40]	; 0x28
    a326:	f000 f9bf 	bl	a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a32a:	0788      	lsls	r0, r1, #30
    a32c:	f04f 0601 	mov.w	r6, #1
    a330:	d505      	bpl.n	a33e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    a332:	f88d 6008 	strb.w	r6, [sp, #8]
    a336:	a802      	add	r0, sp, #8
    a338:	9403      	str	r4, [sp, #12]
    a33a:	f005 fa2c 	bl	f796 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    a33e:	68a8      	ldr	r0, [r5, #8]
    a340:	62e0      	str	r0, [r4, #44]	; 0x2c
    a342:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a346:	4640      	mov	r0, r8
    a348:	f004 f9fb 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a34c:	b910      	cbnz	r0, a354 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    a34e:	4640      	mov	r0, r8
    a350:	f004 fa15 	bl	e77e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a354:	6127      	str	r7, [r4, #16]
    a356:	8821      	ldrh	r1, [r4, #0]
    a358:	f8ad 1008 	strh.w	r1, [sp, #8]
    a35c:	7ba9      	ldrb	r1, [r5, #14]
    a35e:	f88d 100a 	strb.w	r1, [sp, #10]
    a362:	7be9      	ldrb	r1, [r5, #15]
    a364:	f88d 100b 	strb.w	r1, [sp, #11]
    a368:	8a29      	ldrh	r1, [r5, #16]
    a36a:	f8ad 100c 	strh.w	r1, [sp, #12]
    a36e:	a905      	add	r1, sp, #20
    a370:	9100      	str	r1, [sp, #0]
    a372:	4630      	mov	r0, r6
    a374:	ab04      	add	r3, sp, #16
    a376:	aa02      	add	r2, sp, #8
    a378:	4621      	mov	r1, r4
    a37a:	f006 f861 	bl	10440 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    a37e:	b140      	cbz	r0, a392 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    a380:	2100      	movs	r1, #0
    a382:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a386:	f7fa fb73 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a38a:	b1f0      	cbz	r0, a3ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    a38c:	f241 6117 	movw	r1, #5655	; 0x1617
    a390:	e026      	b.n	a3e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a392:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a396:	f88d 0018 	strb.w	r0, [sp, #24]
    a39a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a39e:	f88d 0019 	strb.w	r0, [sp, #25]
    a3a2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a3a6:	f8ad 001a 	strh.w	r0, [sp, #26]
    a3aa:	a906      	add	r1, sp, #24
    a3ac:	4620      	mov	r0, r4
    a3ae:	f003 fb62 	bl	da76 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a3b2:	7868      	ldrb	r0, [r5, #1]
    a3b4:	9000      	str	r0, [sp, #0]
    a3b6:	782b      	ldrb	r3, [r5, #0]
    a3b8:	88aa      	ldrh	r2, [r5, #4]
    a3ba:	8869      	ldrh	r1, [r5, #2]
    a3bc:	8820      	ldrh	r0, [r4, #0]
    a3be:	f7fa fc0d 	bl	4bdc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a3c2:	b128      	cbz	r0, a3d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    a3c4:	f241 6122 	movw	r1, #5666	; 0x1622
    a3c8:	e00a      	b.n	a3e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a3ca:	e7ff      	b.n	a3cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    a3cc:	2009      	movs	r0, #9
    a3ce:	e757      	b.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a3d0:	464a      	mov	r2, r9
    a3d2:	4621      	mov	r1, r4
    a3d4:	4640      	mov	r0, r8
    a3d6:	f7fd fa77 	bl	78c8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a3da:	b120      	cbz	r0, a3e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    a3dc:	f241 6124 	movw	r1, #5668	; 0x1624
    a3e0:	2039      	movs	r0, #57	; 0x39
    a3e2:	f7fa f8c3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3e6:	4806      	ldr	r0, [pc, #24]	; (a400 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    a3e8:	6843      	ldr	r3, [r0, #4]
    a3ea:	b123      	cbz	r3, a3f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    a3ec:	2200      	movs	r2, #0
    a3ee:	f504 7195 	add.w	r1, r4, #298	; 0x12a
    a3f2:	4620      	mov	r0, r4
    a3f4:	4798      	blx	r3
    a3f6:	2000      	movs	r0, #0
    a3f8:	e742      	b.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a3fa:	0000      	.short	0x0000
    a3fc:	20001404 	.word	0x20001404
    a400:	200002d8 	.word	0x200002d8
    a404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a408:	b088      	sub	sp, #32
    a40a:	4604      	mov	r4, r0
    a40c:	8800      	ldrh	r0, [r0, #0]
    a40e:	a906      	add	r1, sp, #24
    a410:	f003 fa61 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a414:	2800      	cmp	r0, #0
    a416:	d147      	bne.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a418:	9807      	ldr	r0, [sp, #28]
    a41a:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    a41e:	f88d 1008 	strb.w	r1, [sp, #8]
    a422:	9902      	ldr	r1, [sp, #8]
    a424:	9102      	str	r1, [sp, #8]
    a426:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a42a:	3080      	adds	r0, #128	; 0x80
    a42c:	b101      	cbz	r1, a430 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a42e:	2101      	movs	r1, #1
    a430:	f88d 100c 	strb.w	r1, [sp, #12]
    a434:	7901      	ldrb	r1, [r0, #4]
    a436:	f04f 0800 	mov.w	r8, #0
    a43a:	0689      	lsls	r1, r1, #26
    a43c:	d502      	bpl.n	a444 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    a43e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a442:	b149      	cbz	r1, a458 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    a444:	f05f 0100 	movs.w	r1, #0
    a448:	f88d 1004 	strb.w	r1, [sp, #4]
    a44c:	2105      	movs	r1, #5
    a44e:	3064      	adds	r0, #100	; 0x64
    a450:	f005 fa2d 	bl	f8ae <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
    a454:	b110      	cbz	r0, a45c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    a456:	e004      	b.n	a462 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    a458:	2101      	movs	r1, #1
    a45a:	e7f5      	b.n	a448 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    a45c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a460:	b308      	cbz	r0, a4a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    a462:	8921      	ldrh	r1, [r4, #8]
    a464:	88e0      	ldrh	r0, [r4, #6]
    a466:	f005 ffa7 	bl	103b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a46a:	2800      	cmp	r0, #0
    a46c:	d11c      	bne.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a46e:	88a1      	ldrh	r1, [r4, #4]
    a470:	8860      	ldrh	r0, [r4, #2]
    a472:	f005 ffa1 	bl	103b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a476:	2800      	cmp	r0, #0
    a478:	d116      	bne.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a47a:	8921      	ldrh	r1, [r4, #8]
    a47c:	88e0      	ldrh	r0, [r4, #6]
    a47e:	f005 ff91 	bl	103a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    a482:	2800      	cmp	r0, #0
    a484:	d110      	bne.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a486:	88a1      	ldrh	r1, [r4, #4]
    a488:	8860      	ldrh	r0, [r4, #2]
    a48a:	f005 ff8b 	bl	103a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    a48e:	0006      	movs	r6, r0
    a490:	d10a      	bne.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a492:	9807      	ldr	r0, [sp, #28]
    a494:	f500 7595 	add.w	r5, r0, #298	; 0x12a
    a498:	27ff      	movs	r7, #255	; 0xff
    a49a:	706f      	strb	r7, [r5, #1]
    a49c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a4a0:	b129      	cbz	r1, a4ae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    a4a2:	263a      	movs	r6, #58	; 0x3a
    a4a4:	e02e      	b.n	a504 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    a4a6:	201a      	movs	r0, #26
    a4a8:	b008      	add	sp, #32
    a4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4ae:	4641      	mov	r1, r8
    a4b0:	aa03      	add	r2, sp, #12
    a4b2:	f005 ff8f 	bl	103d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    a4b6:	8861      	ldrh	r1, [r4, #2]
    a4b8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a4bc:	4281      	cmp	r1, r0
    a4be:	d200      	bcs.n	a4c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    a4c0:	4608      	mov	r0, r1
    a4c2:	80e8      	strh	r0, [r5, #6]
    a4c4:	88a1      	ldrh	r1, [r4, #4]
    a4c6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a4ca:	4281      	cmp	r1, r0
    a4cc:	d200      	bcs.n	a4d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    a4ce:	4608      	mov	r0, r1
    a4d0:	8128      	strh	r0, [r5, #8]
    a4d2:	88e2      	ldrh	r2, [r4, #6]
    a4d4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a4d8:	428a      	cmp	r2, r1
    a4da:	d200      	bcs.n	a4de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    a4dc:	4611      	mov	r1, r2
    a4de:	8069      	strh	r1, [r5, #2]
    a4e0:	8922      	ldrh	r2, [r4, #8]
    a4e2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a4e6:	428a      	cmp	r2, r1
    a4e8:	d200      	bcs.n	a4ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    a4ea:	4611      	mov	r1, r2
    a4ec:	f640 0248 	movw	r2, #2120	; 0x848
    a4f0:	80a9      	strh	r1, [r5, #4]
    a4f2:	4291      	cmp	r1, r2
    a4f4:	d300      	bcc.n	a4f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    a4f6:	4611      	mov	r1, r2
    a4f8:	80a9      	strh	r1, [r5, #4]
    a4fa:	4290      	cmp	r0, r2
    a4fc:	d200      	bcs.n	a500 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    a4fe:	4602      	mov	r2, r0
    a500:	812a      	strh	r2, [r5, #8]
    a502:	702f      	strb	r7, [r5, #0]
    a504:	f885 8001 	strb.w	r8, [r5, #1]
    a508:	4630      	mov	r0, r6
    a50a:	e7cd      	b.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a50c:	b51c      	push	{r2, r3, r4, lr}
    a50e:	490c      	ldr	r1, [pc, #48]	; (a540 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    a510:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    a514:	e9cd 0100 	strd	r0, r1, [sp]
    a518:	e00a      	b.n	a530 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a51a:	9c00      	ldr	r4, [sp, #0]
    a51c:	4620      	mov	r0, r4
    a51e:	f004 face 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a522:	b128      	cbz	r0, a530 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a524:	4620      	mov	r0, r4
    a526:	f004 f951 	bl	e7cc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    a52a:	b108      	cbz	r0, a530 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a52c:	2001      	movs	r0, #1
    a52e:	bd1c      	pop	{r2, r3, r4, pc}
    a530:	4668      	mov	r0, sp
    a532:	f7fa fa55 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a536:	2800      	cmp	r0, #0
    a538:	d0ef      	beq.n	a51a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    a53a:	2000      	movs	r0, #0
    a53c:	bd1c      	pop	{r2, r3, r4, pc}
    a53e:	0000      	.short	0x0000
    a540:	0000a57c 	.word	0x0000a57c
    a544:	b510      	push	{r4, lr}
    a546:	4604      	mov	r4, r0
    a548:	88c1      	ldrh	r1, [r0, #6]
    a54a:	8880      	ldrh	r0, [r0, #4]
    a54c:	f005 ff34 	bl	103b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a550:	2800      	cmp	r0, #0
    a552:	d10f      	bne.n	a574 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    a554:	8861      	ldrh	r1, [r4, #2]
    a556:	8820      	ldrh	r0, [r4, #0]
    a558:	f005 ff2e 	bl	103b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a55c:	2800      	cmp	r0, #0
    a55e:	d109      	bne.n	a574 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    a560:	4805      	ldr	r0, [pc, #20]	; (a578 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x334>)
    a562:	88a1      	ldrh	r1, [r4, #4]
    a564:	8081      	strh	r1, [r0, #4]
    a566:	8821      	ldrh	r1, [r4, #0]
    a568:	8001      	strh	r1, [r0, #0]
    a56a:	88e1      	ldrh	r1, [r4, #6]
    a56c:	80c1      	strh	r1, [r0, #6]
    a56e:	8861      	ldrh	r1, [r4, #2]
    a570:	8041      	strh	r1, [r0, #2]
    a572:	2000      	movs	r0, #0
    a574:	bd10      	pop	{r4, pc}
    a576:	0000      	.short	0x0000
    a578:	200002e0 	.word	0x200002e0
    a57c:	00000000 	.word	0x00000000
    a580:	00010000 	.word	0x00010000
    a584:	00000000 	.word	0x00000000
    a588:	00010000 	.word	0x00010000
    a58c:	0c11fa0c 	.word	0x0c11fa0c
    a590:	11fa0059 	.word	0x11fa0059
    a594:	00000000 	.word	0x00000000
    a598:	00010000 	.word	0x00010000
    a59c:	00000000 	.word	0x00000000
    a5a0:	00010000 	.word	0x00010000

0000a5a4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a5a4:	b510      	push	{r4, lr}
    a5a6:	f7fc f825 	bl	65f4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a5aa:	4805      	ldr	r0, [pc, #20]	; (a5c0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    a5ac:	6840      	ldr	r0, [r0, #4]
    a5ae:	f006 f80a 	bl	105c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a5b2:	f005 fdaf 	bl	10114 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5ba:	f7fc b9d5 	b.w	6968 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    a5be:	0000      	.short	0x0000
    a5c0:	200002e8 	.word	0x200002e8

0000a5c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a5c4:	b510      	push	{r4, lr}
    a5c6:	4c05      	ldr	r4, [pc, #20]	; (a5dc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    a5c8:	68a0      	ldr	r0, [r4, #8]
    a5ca:	f005 fffc 	bl	105c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a5ce:	68e0      	ldr	r0, [r4, #12]
    a5d0:	f005 fff9 	bl	105c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5d8:	f005 be01 	b.w	101de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a5dc:	200002e8 	.word	0x200002e8

0000a5e0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a5e0:	b510      	push	{r4, lr}
    a5e2:	4905      	ldr	r1, [pc, #20]	; (a5f8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a5e4:	4805      	ldr	r0, [pc, #20]	; (a5fc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a5e6:	f005 ffe1 	bl	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a5ea:	4804      	ldr	r0, [pc, #16]	; (a5fc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5f0:	4903      	ldr	r1, [pc, #12]	; (a600 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a5f2:	1d00      	adds	r0, r0, #4
    a5f4:	f005 bfda 	b.w	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a5f8:	200002f8 	.word	0x200002f8
    a5fc:	200002ec 	.word	0x200002ec
    a600:	20000300 	.word	0x20000300

0000a604 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a604:	b510      	push	{r4, lr}
    a606:	4908      	ldr	r1, [pc, #32]	; (a628 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a608:	4808      	ldr	r0, [pc, #32]	; (a62c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a60a:	f005 ffcf 	bl	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a60e:	4807      	ldr	r0, [pc, #28]	; (a62c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a610:	4907      	ldr	r1, [pc, #28]	; (a630 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a612:	1d00      	adds	r0, r0, #4
    a614:	f005 ffca 	bl	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a618:	4804      	ldr	r0, [pc, #16]	; (a62c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a61a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a61e:	4905      	ldr	r1, [pc, #20]	; (a634 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a620:	3008      	adds	r0, #8
    a622:	f005 bfc3 	b.w	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a626:	0000      	.short	0x0000
    a628:	20000310 	.word	0x20000310
    a62c:	200002ec 	.word	0x200002ec
    a630:	20000318 	.word	0x20000318
    a634:	20000308 	.word	0x20000308

0000a638 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a638:	4801      	ldr	r0, [pc, #4]	; (a640 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a63a:	7800      	ldrb	r0, [r0, #0]
    a63c:	4770      	bx	lr
    a63e:	0000      	.short	0x0000
    a640:	200002e8 	.word	0x200002e8
    a644:	b510      	push	{r4, lr}
    a646:	f7fc fb6b 	bl	6d20 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a64a:	f7fd f9eb 	bl	7a24 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    a64e:	4803      	ldr	r0, [pc, #12]	; (a65c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    a650:	f7fc fb4c 	bl	6cec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a658:	f7fb bfd2 	b.w	6600 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    a65c:	200016a9 	.word	0x200016a9
    a660:	4909      	ldr	r1, [pc, #36]	; (a688 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    a662:	b510      	push	{r4, lr}
    a664:	2001      	movs	r0, #1
    a666:	7008      	strb	r0, [r1, #0]
    a668:	f7fc fb8a 	bl	6d80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a66c:	f7fd fde6 	bl	823c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a670:	f003 f863 	bl	d73a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a674:	4805      	ldr	r0, [pc, #20]	; (a68c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    a676:	f7fa fe63 	bl	5340 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a67a:	2000      	movs	r0, #0
    a67c:	f002 fe91 	bl	d3a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a684:	f7fb bfc4 	b.w	6610 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    a688:	200002e8 	.word	0x200002e8
    a68c:	200016a9 	.word	0x200016a9

0000a690 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a690:	4a04      	ldr	r2, [pc, #16]	; (a6a4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    a692:	08c1      	lsrs	r1, r0, #3
    a694:	f000 0307 	and.w	r3, r0, #7
    a698:	2001      	movs	r0, #1
    a69a:	4098      	lsls	r0, r3
    a69c:	5c53      	ldrb	r3, [r2, r1]
    a69e:	4303      	orrs	r3, r0
    a6a0:	5453      	strb	r3, [r2, r1]
    a6a2:	4770      	bx	lr
    a6a4:	20000020 	.word	0x20000020

0000a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a6a8:	4901      	ldr	r1, [pc, #4]	; (a6b0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a6aa:	e9d1 0100 	ldrd	r0, r1, [r1]
    a6ae:	4770      	bx	lr
    a6b0:	20000020 	.word	0x20000020

0000a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a6b4:	4806      	ldr	r0, [pc, #24]	; (a6d0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    a6b6:	8801      	ldrh	r1, [r0, #0]
    a6b8:	7900      	ldrb	r0, [r0, #4]
    a6ba:	0602      	lsls	r2, r0, #24
    a6bc:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    a6c0:	f000 0001 	and.w	r0, r0, #1
    a6c4:	1800      	adds	r0, r0, r0
    a6c6:	b2c0      	uxtb	r0, r0
    a6c8:	f040 0001 	orr.w	r0, r0, #1
    a6cc:	4770      	bx	lr
    a6ce:	0000      	.short	0x0000
    a6d0:	20000020 	.word	0x20000020

0000a6d4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    a6d4:	b510      	push	{r4, lr}
    a6d6:	f7f9 fb73 	bl	3dc0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a6da:	2200      	movs	r2, #0
    a6dc:	4b08      	ldr	r3, [pc, #32]	; (a700 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    a6de:	4611      	mov	r1, r2
    a6e0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    a6e4:	4284      	cmp	r4, r0
    a6e6:	d303      	bcc.n	a6f0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    a6e8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a6ec:	7882      	ldrb	r2, [r0, #2]
    a6ee:	e003      	b.n	a6f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    a6f0:	1c49      	adds	r1, r1, #1
    a6f2:	b2c9      	uxtb	r1, r1
    a6f4:	290c      	cmp	r1, #12
    a6f6:	d3f3      	bcc.n	a6e0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    a6f8:	4802      	ldr	r0, [pc, #8]	; (a704 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    a6fa:	7002      	strb	r2, [r0, #0]
    a6fc:	bd10      	pop	{r4, pc}
    a6fe:	0000      	.short	0x0000
    a700:	00010618 	.word	0x00010618
    a704:	20000369 	.word	0x20000369

0000a708 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a708:	b570      	push	{r4, r5, r6, lr}
    a70a:	4605      	mov	r5, r0
    a70c:	4616      	mov	r6, r2
    a70e:	460c      	mov	r4, r1
    a710:	2002      	movs	r0, #2
    a712:	f000 f9b7 	bl	aa84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a716:	4906      	ldr	r1, [pc, #24]	; (a730 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a718:	2001      	movs	r0, #1
    a71a:	1ef6      	subs	r6, r6, #3
    a71c:	7008      	strb	r0, [r1, #0]
    a71e:	4805      	ldr	r0, [pc, #20]	; (a734 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a720:	6006      	str	r6, [r0, #0]
    a722:	4804      	ldr	r0, [pc, #16]	; (a734 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a724:	3808      	subs	r0, #8
    a726:	6005      	str	r5, [r0, #0]
    a728:	1f00      	subs	r0, r0, #4
    a72a:	6004      	str	r4, [r0, #0]
    a72c:	bd70      	pop	{r4, r5, r6, pc}
    a72e:	0000      	.short	0x0000
    a730:	2000036a 	.word	0x2000036a
    a734:	4000f510 	.word	0x4000f510

0000a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a738:	b510      	push	{r4, lr}
    a73a:	4c0c      	ldr	r4, [pc, #48]	; (a76c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a73c:	7820      	ldrb	r0, [r4, #0]
    a73e:	b180      	cbz	r0, a762 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a740:	490b      	ldr	r1, [pc, #44]	; (a770 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a742:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a746:	6008      	str	r0, [r1, #0]
    a748:	f000 f86a 	bl	a820 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a74c:	2100      	movs	r1, #0
    a74e:	b120      	cbz	r0, a75a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a750:	2001      	movs	r0, #1
    a752:	7060      	strb	r0, [r4, #1]
    a754:	4807      	ldr	r0, [pc, #28]	; (a774 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a756:	6800      	ldr	r0, [r0, #0]
    a758:	e001      	b.n	a75e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a75a:	7061      	strb	r1, [r4, #1]
    a75c:	2010      	movs	r0, #16
    a75e:	70a0      	strb	r0, [r4, #2]
    a760:	7021      	strb	r1, [r4, #0]
    a762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a766:	2000      	movs	r0, #0
    a768:	f000 b98c 	b.w	aa84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a76c:	2000036a 	.word	0x2000036a
    a770:	4001f508 	.word	0x4001f508
    a774:	4000f400 	.word	0x4000f400

0000a778 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a778:	b510      	push	{r4, lr}
    a77a:	2002      	movs	r0, #2
    a77c:	f000 f982 	bl	aa84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a780:	4904      	ldr	r1, [pc, #16]	; (a794 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a782:	2001      	movs	r0, #1
    a784:	7008      	strb	r0, [r1, #0]
    a786:	f000 f859 	bl	a83c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a78a:	4903      	ldr	r1, [pc, #12]	; (a798 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a78c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a790:	6008      	str	r0, [r1, #0]
    a792:	bd10      	pop	{r4, pc}
    a794:	2000036a 	.word	0x2000036a
    a798:	4001f504 	.word	0x4001f504

0000a79c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a79c:	4803      	ldr	r0, [pc, #12]	; (a7ac <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a79e:	2100      	movs	r1, #0
    a7a0:	7001      	strb	r1, [r0, #0]
    a7a2:	7041      	strb	r1, [r0, #1]
    a7a4:	2110      	movs	r1, #16
    a7a6:	7081      	strb	r1, [r0, #2]
    a7a8:	4770      	bx	lr
    a7aa:	0000      	.short	0x0000
    a7ac:	2000036a 	.word	0x2000036a

0000a7b0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a7b0:	4807      	ldr	r0, [pc, #28]	; (a7d0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a7b2:	b510      	push	{r4, lr}
    a7b4:	7801      	ldrb	r1, [r0, #0]
    a7b6:	b141      	cbz	r1, a7ca <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a7b8:	f000 f832 	bl	a820 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a7bc:	b118      	cbz	r0, a7c6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a7be:	4805      	ldr	r0, [pc, #20]	; (a7d4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a7c0:	6800      	ldr	r0, [r0, #0]
    a7c2:	b2c0      	uxtb	r0, r0
    a7c4:	bd10      	pop	{r4, pc}
    a7c6:	2010      	movs	r0, #16
    a7c8:	bd10      	pop	{r4, pc}
    a7ca:	7880      	ldrb	r0, [r0, #2]
    a7cc:	bd10      	pop	{r4, pc}
    a7ce:	0000      	.short	0x0000
    a7d0:	2000036a 	.word	0x2000036a
    a7d4:	4000f400 	.word	0x4000f400

0000a7d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a7d8:	4808      	ldr	r0, [pc, #32]	; (a7fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a7da:	b510      	push	{r4, lr}
    a7dc:	7801      	ldrb	r1, [r0, #0]
    a7de:	b159      	cbz	r1, a7f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a7e0:	4807      	ldr	r0, [pc, #28]	; (a800 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a7e2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a7e6:	b128      	cbz	r0, a7f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a7e8:	f000 f80c 	bl	a804 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a7ec:	2800      	cmp	r0, #0
    a7ee:	d000      	beq.n	a7f2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a7f0:	2001      	movs	r0, #1
    a7f2:	bd10      	pop	{r4, pc}
    a7f4:	2002      	movs	r0, #2
    a7f6:	bd10      	pop	{r4, pc}
    a7f8:	7840      	ldrb	r0, [r0, #1]
    a7fa:	bd10      	pop	{r4, pc}
    a7fc:	2000036a 	.word	0x2000036a
    a800:	4000f000 	.word	0x4000f000
    a804:	4805      	ldr	r0, [pc, #20]	; (a81c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a806:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a80a:	b111      	cbz	r1, a812 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a80c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a810:	b108      	cbz	r0, a816 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a812:	2000      	movs	r0, #0
    a814:	4770      	bx	lr
    a816:	2001      	movs	r0, #1
    a818:	4770      	bx	lr
    a81a:	0000      	.short	0x0000
    a81c:	4000f000 	.word	0x4000f000
    a820:	4805      	ldr	r0, [pc, #20]	; (a838 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a822:	b510      	push	{r4, lr}
    a824:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a828:	b120      	cbz	r0, a834 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a82a:	f7ff ffeb 	bl	a804 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a82e:	b108      	cbz	r0, a834 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a830:	2001      	movs	r0, #1
    a832:	bd10      	pop	{r4, pc}
    a834:	2000      	movs	r0, #0
    a836:	bd10      	pop	{r4, pc}
    a838:	4000f000 	.word	0x4000f000
    a83c:	4804      	ldr	r0, [pc, #16]	; (a850 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a83e:	2100      	movs	r1, #0
    a840:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a844:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a848:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a84c:	4770      	bx	lr
    a84e:	0000      	.short	0x0000
    a850:	4000f000 	.word	0x4000f000

0000a854 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a858:	4604      	mov	r4, r0
    a85a:	461e      	mov	r6, r3
    a85c:	4690      	mov	r8, r2
    a85e:	460f      	mov	r7, r1
    a860:	2001      	movs	r0, #1
    a862:	f000 f90f 	bl	aa84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a866:	4d1e      	ldr	r5, [pc, #120]	; (a8e0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    a868:	481e      	ldr	r0, [pc, #120]	; (a8e4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    a86a:	f004 0103 	and.w	r1, r4, #3
    a86e:	712e      	strb	r6, [r5, #4]
    a870:	6800      	ldr	r0, [r0, #0]
    a872:	0432      	lsls	r2, r6, #16
    a874:	f361 0007 	bfi	r0, r1, #0, #8
    a878:	f366 200f 	bfi	r0, r6, #8, #8
    a87c:	0c00      	lsrs	r0, r0, #16
    a87e:	4e1a      	ldr	r6, [pc, #104]	; (a8e8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    a880:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    a884:	4308      	orrs	r0, r1
    a886:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    a88a:	4818      	ldr	r0, [pc, #96]	; (a8ec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    a88c:	6007      	str	r7, [r0, #0]
    a88e:	f001 fdc4 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a892:	b938      	cbnz	r0, a8a4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    a894:	4815      	ldr	r0, [pc, #84]	; (a8ec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    a896:	3010      	adds	r0, #16
    a898:	6801      	ldr	r1, [r0, #0]
    a89a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a89e:	ea41 0108 	orr.w	r1, r1, r8
    a8a2:	6001      	str	r1, [r0, #0]
    a8a4:	f000 f8e4 	bl	aa70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    a8a8:	b10c      	cbz	r4, a8ae <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    a8aa:	2c04      	cmp	r4, #4
    a8ac:	d107      	bne.n	a8be <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    a8ae:	4811      	ldr	r0, [pc, #68]	; (a8f4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    a8b0:	490d      	ldr	r1, [pc, #52]	; (a8e8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    a8b2:	4a0f      	ldr	r2, [pc, #60]	; (a8f0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    a8b4:	1d09      	adds	r1, r1, #4
    a8b6:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    a8ba:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    a8be:	2001      	movs	r0, #1
    a8c0:	7068      	strb	r0, [r5, #1]
    a8c2:	70ec      	strb	r4, [r5, #3]
    a8c4:	b11c      	cbz	r4, a8ce <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    a8c6:	2c01      	cmp	r4, #1
    a8c8:	d001      	beq.n	a8ce <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    a8ca:	2c02      	cmp	r4, #2
    a8cc:	d106      	bne.n	a8dc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    a8ce:	7028      	strb	r0, [r5, #0]
    a8d0:	2100      	movs	r1, #0
    a8d2:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    a8d6:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    a8da:	6030      	str	r0, [r6, #0]
    a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a8e0:	2000036d 	.word	0x2000036d
    a8e4:	0000aa80 	.word	0x0000aa80
    a8e8:	4000f000 	.word	0x4000f000
    a8ec:	4000f508 	.word	0x4000f508
    a8f0:	4000f100 	.word	0x4000f100
    a8f4:	4001f088 	.word	0x4001f088

0000a8f8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    a8f8:	b570      	push	{r4, r5, r6, lr}
    a8fa:	4a1c      	ldr	r2, [pc, #112]	; (a96c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    a8fc:	7853      	ldrb	r3, [r2, #1]
    a8fe:	b1a3      	cbz	r3, a92a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    a900:	4b1b      	ldr	r3, [pc, #108]	; (a970 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    a902:	6019      	str	r1, [r3, #0]
    a904:	1d19      	adds	r1, r3, #4
    a906:	6008      	str	r0, [r1, #0]
    a908:	2501      	movs	r5, #1
    a90a:	7095      	strb	r5, [r2, #2]
    a90c:	4610      	mov	r0, r2
    a90e:	78d6      	ldrb	r6, [r2, #3]
    a910:	4b18      	ldr	r3, [pc, #96]	; (a974 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    a912:	7800      	ldrb	r0, [r0, #0]
    a914:	4c18      	ldr	r4, [pc, #96]	; (a978 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    a916:	2100      	movs	r1, #0
    a918:	b156      	cbz	r6, a930 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    a91a:	2e04      	cmp	r6, #4
    a91c:	d01b      	beq.n	a956 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    a91e:	b308      	cbz	r0, a964 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    a920:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a924:	0668      	lsls	r0, r5, #25
    a926:	6018      	str	r0, [r3, #0]
    a928:	bd70      	pop	{r4, r5, r6, pc}
    a92a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    a92e:	e01a      	b.n	a966 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    a930:	b178      	cbz	r0, a952 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    a932:	4620      	mov	r0, r4
    a934:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a938:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    a93c:	601e      	str	r6, [r3, #0]
    a93e:	1271      	asrs	r1, r6, #9
    a940:	f005 fe9f 	bl	10682 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    a944:	2800      	cmp	r0, #0
    a946:	d0ef      	beq.n	a928 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    a948:	6065      	str	r5, [r4, #4]
    a94a:	480a      	ldr	r0, [pc, #40]	; (a974 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    a94c:	1d00      	adds	r0, r0, #4
    a94e:	6006      	str	r6, [r0, #0]
    a950:	bd70      	pop	{r4, r5, r6, pc}
    a952:	21b3      	movs	r1, #179	; 0xb3
    a954:	e007      	b.n	a966 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    a956:	7015      	strb	r5, [r2, #0]
    a958:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a95c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    a960:	6025      	str	r5, [r4, #0]
    a962:	bd70      	pop	{r4, r5, r6, pc}
    a964:	21c6      	movs	r1, #198	; 0xc6
    a966:	203c      	movs	r0, #60	; 0x3c
    a968:	f7f9 fe00 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a96c:	2000036d 	.word	0x2000036d
    a970:	4000f50c 	.word	0x4000f50c
    a974:	4001f504 	.word	0x4001f504
    a978:	4000f000 	.word	0x4000f000

0000a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a97c:	b570      	push	{r4, r5, r6, lr}
    a97e:	4d05      	ldr	r5, [pc, #20]	; (a994 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    a980:	2400      	movs	r4, #0
    a982:	7828      	ldrb	r0, [r5, #0]
    a984:	b110      	cbz	r0, a98c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    a986:	f000 f873 	bl	aa70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    a98a:	702c      	strb	r4, [r5, #0]
    a98c:	706c      	strb	r4, [r5, #1]
    a98e:	70ac      	strb	r4, [r5, #2]
    a990:	bd70      	pop	{r4, r5, r6, pc}
    a992:	0000      	.short	0x0000
    a994:	2000036d 	.word	0x2000036d

0000a998 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a998:	4802      	ldr	r0, [pc, #8]	; (a9a4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    a99a:	2100      	movs	r1, #0
    a99c:	7001      	strb	r1, [r0, #0]
    a99e:	7041      	strb	r1, [r0, #1]
    a9a0:	7081      	strb	r1, [r0, #2]
    a9a2:	4770      	bx	lr
    a9a4:	2000036d 	.word	0x2000036d

0000a9a8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a9a8:	480b      	ldr	r0, [pc, #44]	; (a9d8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    a9aa:	b510      	push	{r4, lr}
    a9ac:	7800      	ldrb	r0, [r0, #0]
    a9ae:	b158      	cbz	r0, a9c8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    a9b0:	f44f 7182 	mov.w	r1, #260	; 0x104
    a9b4:	4809      	ldr	r0, [pc, #36]	; (a9dc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    a9b6:	f005 fe64 	bl	10682 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    a9ba:	b140      	cbz	r0, a9ce <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    a9bc:	4808      	ldr	r0, [pc, #32]	; (a9e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    a9be:	6800      	ldr	r0, [r0, #0]
    a9c0:	2800      	cmp	r0, #0
    a9c2:	d000      	beq.n	a9c6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    a9c4:	2001      	movs	r0, #1
    a9c6:	bd10      	pop	{r4, pc}
    a9c8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    a9cc:	e001      	b.n	a9d2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    a9ce:	f240 11eb 	movw	r1, #491	; 0x1eb
    a9d2:	203c      	movs	r0, #60	; 0x3c
    a9d4:	f7f9 fdca 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9d8:	2000036d 	.word	0x2000036d
    a9dc:	4000f000 	.word	0x4000f000
    a9e0:	4000f400 	.word	0x4000f400

0000a9e4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a9e4:	4801      	ldr	r0, [pc, #4]	; (a9ec <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a9e6:	2101      	movs	r1, #1
    a9e8:	6081      	str	r1, [r0, #8]
    a9ea:	4770      	bx	lr
    a9ec:	4000f000 	.word	0x4000f000

0000a9f0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9f4:	481b      	ldr	r0, [pc, #108]	; (aa64 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    a9f6:	7800      	ldrb	r0, [r0, #0]
    a9f8:	b1d8      	cbz	r0, aa32 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    a9fa:	f8df 806c 	ldr.w	r8, [pc, #108]	; aa68 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a9fe:	f44f 7682 	mov.w	r6, #260	; 0x104
    aa02:	4631      	mov	r1, r6
    aa04:	4640      	mov	r0, r8
    aa06:	f005 fe3c 	bl	10682 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    aa0a:	2800      	cmp	r0, #0
    aa0c:	d128      	bne.n	aa60 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    aa0e:	2002      	movs	r0, #2
    aa10:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    aa14:	4c15      	ldr	r4, [pc, #84]	; (aa6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    aa16:	6820      	ldr	r0, [r4, #0]
    aa18:	43c0      	mvns	r0, r0
    aa1a:	f340 1500 	sbfx	r5, r0, #4, #1
    aa1e:	6820      	ldr	r0, [r4, #0]
    aa20:	f040 0010 	orr.w	r0, r0, #16
    aa24:	6020      	str	r0, [r4, #0]
    aa26:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    aa2a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    aa2e:	1c6d      	adds	r5, r5, #1
    aa30:	e008      	b.n	aa44 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    aa32:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    aa36:	203c      	movs	r0, #60	; 0x3c
    aa38:	f7f9 fd98 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa3c:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    aa40:	f7f9 fbf0 	bl	4224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    aa44:	4631      	mov	r1, r6
    aa46:	4640      	mov	r0, r8
    aa48:	f005 fe1b 	bl	10682 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    aa4c:	2800      	cmp	r0, #0
    aa4e:	d0f5      	beq.n	aa3c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    aa50:	b91d      	cbnz	r5, aa5a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    aa52:	6820      	ldr	r0, [r4, #0]
    aa54:	f020 0010 	bic.w	r0, r0, #16
    aa58:	6020      	str	r0, [r4, #0]
    aa5a:	2002      	movs	r0, #2
    aa5c:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    aa60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa64:	2000036d 	.word	0x2000036d
    aa68:	4000f000 	.word	0x4000f000
    aa6c:	e000ed10 	.word	0xe000ed10
    aa70:	4902      	ldr	r1, [pc, #8]	; (aa7c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    aa72:	4801      	ldr	r0, [pc, #4]	; (aa78 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    aa74:	6008      	str	r0, [r1, #0]
    aa76:	4770      	bx	lr
    aa78:	02020000 	.word	0x02020000
    aa7c:	4001f508 	.word	0x4001f508
    aa80:	00010000 	.word	0x00010000

0000aa84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    aa84:	b510      	push	{r4, lr}
    aa86:	4604      	mov	r4, r0
    aa88:	f000 f820 	bl	aacc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    aa8c:	2c00      	cmp	r4, #0
    aa8e:	d00e      	beq.n	aaae <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    aa90:	4a0b      	ldr	r2, [pc, #44]	; (aac0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    aa92:	480b      	ldr	r0, [pc, #44]	; (aac0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    aa94:	490b      	ldr	r1, [pc, #44]	; (aac4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    aa96:	3214      	adds	r2, #20
    aa98:	2c01      	cmp	r4, #1
    aa9a:	d005      	beq.n	aaa8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    aa9c:	2c02      	cmp	r4, #2
    aa9e:	d007      	beq.n	aab0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    aaa0:	2182      	movs	r1, #130	; 0x82
    aaa2:	203d      	movs	r0, #61	; 0x3d
    aaa4:	f7f9 fd62 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aaa8:	2302      	movs	r3, #2
    aaaa:	6003      	str	r3, [r0, #0]
    aaac:	6011      	str	r1, [r2, #0]
    aaae:	bd10      	pop	{r4, pc}
    aab0:	2303      	movs	r3, #3
    aab2:	6003      	str	r3, [r0, #0]
    aab4:	6011      	str	r1, [r2, #0]
    aab6:	4904      	ldr	r1, [pc, #16]	; (aac8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    aab8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    aabc:	6008      	str	r0, [r1, #0]
    aabe:	bd10      	pop	{r4, pc}
    aac0:	4000f500 	.word	0x4000f500
    aac4:	200017ab 	.word	0x200017ab
    aac8:	4001f504 	.word	0x4001f504
    aacc:	4805      	ldr	r0, [pc, #20]	; (aae4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    aace:	b510      	push	{r4, lr}
    aad0:	2100      	movs	r1, #0
    aad2:	6001      	str	r1, [r0, #0]
    aad4:	6001      	str	r1, [r0, #0]
    aad6:	f7ff ff51 	bl	a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    aada:	4903      	ldr	r1, [pc, #12]	; (aae8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    aadc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    aae0:	6008      	str	r0, [r1, #0]
    aae2:	bd10      	pop	{r4, pc}
    aae4:	4000f500 	.word	0x4000f500
    aae8:	4001f508 	.word	0x4001f508

0000aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    aaec:	4805      	ldr	r0, [pc, #20]	; (ab04 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    aaee:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    aaf2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    aaf6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    aafa:	2100      	movs	r1, #0
    aafc:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    ab00:	4770      	bx	lr
    ab02:	0000      	.short	0x0000
    ab04:	40001000 	.word	0x40001000

0000ab08 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    ab08:	4904      	ldr	r1, [pc, #16]	; (ab1c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    ab0a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    ab0e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    ab12:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ab16:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    ab1a:	4770      	bx	lr
    ab1c:	40001000 	.word	0x40001000

0000ab20 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    ab20:	4801      	ldr	r0, [pc, #4]	; (ab28 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    ab22:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    ab26:	4770      	bx	lr
    ab28:	20001468 	.word	0x20001468

0000ab2c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    ab2c:	4902      	ldr	r1, [pc, #8]	; (ab38 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    ab2e:	5c08      	ldrb	r0, [r1, r0]
    ab30:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    ab34:	4770      	bx	lr
    ab36:	0000      	.short	0x0000
    ab38:	0000b852 	.word	0x0000b852

0000ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    ab3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab3e:	4c24      	ldr	r4, [pc, #144]	; (abd0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    ab40:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    ab44:	f010 0f10 	tst.w	r0, #16
    ab48:	d001      	beq.n	ab4e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    ab4a:	2701      	movs	r7, #1
    ab4c:	e000      	b.n	ab50 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    ab4e:	2700      	movs	r7, #0
    ab50:	2010      	movs	r0, #16
    ab52:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    ab56:	2002      	movs	r0, #2
    ab58:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ab5c:	481d      	ldr	r0, [pc, #116]	; (abd4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    ab5e:	2500      	movs	r5, #0
    ab60:	491d      	ldr	r1, [pc, #116]	; (abd8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    ab62:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    ab66:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    ab6a:	6008      	str	r0, [r1, #0]
    ab6c:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    ab70:	f44f 7688 	mov.w	r6, #272	; 0x110
    ab74:	f010 0fff 	tst.w	r0, #255	; 0xff
    ab78:	d019      	beq.n	abae <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    ab7a:	20ff      	movs	r0, #255	; 0xff
    ab7c:	f88d 0000 	strb.w	r0, [sp]
    ab80:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    ab84:	2001      	movs	r0, #1
    ab86:	6120      	str	r0, [r4, #16]
    ab88:	e005      	b.n	ab96 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    ab8a:	bf00      	nop
    ab8c:	f89d 0000 	ldrb.w	r0, [sp]
    ab90:	1e40      	subs	r0, r0, #1
    ab92:	f88d 0000 	strb.w	r0, [sp]
    ab96:	f89d 0000 	ldrb.w	r0, [sp]
    ab9a:	b128      	cbz	r0, aba8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    ab9c:	4631      	mov	r1, r6
    ab9e:	4620      	mov	r0, r4
    aba0:	f005 fd9e 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    aba4:	2800      	cmp	r0, #0
    aba6:	d0f1      	beq.n	ab8c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    aba8:	f89d 0000 	ldrb.w	r0, [sp]
    abac:	b158      	cbz	r0, abc6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    abae:	f000 fc45 	bl	b43c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    abb2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    abb6:	f000 fdcd 	bl	b754 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    abba:	2f00      	cmp	r7, #0
    abbc:	d002      	beq.n	abc4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    abbe:	2010      	movs	r0, #16
    abc0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    abc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abc6:	f640 018f 	movw	r1, #2191	; 0x88f
    abca:	203e      	movs	r0, #62	; 0x3e
    abcc:	f7f9 fcce 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abd0:	40001000 	.word	0x40001000
    abd4:	20001468 	.word	0x20001468
    abd8:	4001f508 	.word	0x4001f508

0000abdc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    abdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abe0:	4d18      	ldr	r5, [pc, #96]	; (ac44 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    abe2:	4607      	mov	r7, r0
    abe4:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    abe8:	07c2      	lsls	r2, r0, #31
    abea:	d00f      	beq.n	ac0c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    abec:	4c16      	ldr	r4, [pc, #88]	; (ac48 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    abee:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    abf2:	f042 0201 	orr.w	r2, r2, #1
    abf6:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    abfa:	f040 0002 	orr.w	r0, r0, #2
    abfe:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    ac02:	2601      	movs	r6, #1
    ac04:	b13f      	cbz	r7, ac16 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    ac06:	2f01      	cmp	r7, #1
    ac08:	d00b      	beq.n	ac22 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    ac0a:	e010      	b.n	ac2e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    ac0c:	f240 717c 	movw	r1, #1916	; 0x77c
    ac10:	203e      	movs	r0, #62	; 0x3e
    ac12:	f7f9 fcab 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac16:	4608      	mov	r0, r1
    ac18:	f000 fdf6 	bl	b808 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    ac1c:	726e      	strb	r6, [r5, #9]
    ac1e:	6026      	str	r6, [r4, #0]
    ac20:	e005      	b.n	ac2e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    ac22:	4608      	mov	r0, r1
    ac24:	f000 fdd6 	bl	b7d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    ac28:	2002      	movs	r0, #2
    ac2a:	7268      	strb	r0, [r5, #9]
    ac2c:	6066      	str	r6, [r4, #4]
    ac2e:	4807      	ldr	r0, [pc, #28]	; (ac4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    ac30:	64c6      	str	r6, [r0, #76]	; 0x4c
    ac32:	4806      	ldr	r0, [pc, #24]	; (ac4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    ac34:	300c      	adds	r0, #12
    ac36:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    ac3a:	4638      	mov	r0, r7
    ac3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ac40:	f000 bd5a 	b.w	b6f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    ac44:	20001468 	.word	0x20001468
    ac48:	40001000 	.word	0x40001000
    ac4c:	40008000 	.word	0x40008000

0000ac50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac54:	4c2c      	ldr	r4, [pc, #176]	; (ad08 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    ac56:	0006      	movs	r6, r0
    ac58:	4d2c      	ldr	r5, [pc, #176]	; (ad0c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    ac5a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    ac5e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; ad10 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    ac62:	f040 0002 	orr.w	r0, r0, #2
    ac66:	4689      	mov	r9, r1
    ac68:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    ac6c:	f04f 0700 	mov.w	r7, #0
    ac70:	d002      	beq.n	ac78 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    ac72:	2e01      	cmp	r6, #1
    ac74:	d020      	beq.n	acb8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    ac76:	e036      	b.n	ace6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    ac78:	4608      	mov	r0, r1
    ac7a:	f000 fdc5 	bl	b808 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    ac7e:	2001      	movs	r0, #1
    ac80:	7260      	strb	r0, [r4, #9]
    ac82:	79e0      	ldrb	r0, [r4, #7]
    ac84:	2801      	cmp	r0, #1
    ac86:	d105      	bne.n	ac94 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    ac88:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    ac8c:	f040 0008 	orr.w	r0, r0, #8
    ac90:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    ac94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ac96:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    ac9a:	62a0      	str	r0, [r4, #40]	; 0x28
    ac9c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    aca0:	f8c8 0000 	str.w	r0, [r8]
    aca4:	491b      	ldr	r1, [pc, #108]	; (ad14 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    aca6:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    acaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    acae:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    acb2:	fbb0 f7f1 	udiv	r7, r0, r1
    acb6:	e016      	b.n	ace6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    acb8:	4608      	mov	r0, r1
    acba:	f000 fd8b 	bl	b7d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    acbe:	2002      	movs	r0, #2
    acc0:	7260      	strb	r0, [r4, #9]
    acc2:	79e0      	ldrb	r0, [r4, #7]
    acc4:	2801      	cmp	r0, #1
    acc6:	d105      	bne.n	acd4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    acc8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    accc:	f040 0004 	orr.w	r0, r0, #4
    acd0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    acd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    acd6:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    acda:	62a0      	str	r0, [r4, #40]	; 0x28
    acdc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    ace0:	f8c8 0000 	str.w	r0, [r8]
    ace4:	2729      	movs	r7, #41	; 0x29
    ace6:	f000 fc15 	bl	b514 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    acea:	f001 fa6a 	bl	c1c2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    acee:	b120      	cbz	r0, acfa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    acf0:	f7ff ff24 	bl	ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    acf4:	2000      	movs	r0, #0
    acf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    acfa:	2100      	movs	r1, #0
    acfc:	4630      	mov	r0, r6
    acfe:	f000 fcfb 	bl	b6f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    ad02:	4638      	mov	r0, r7
    ad04:	e7f7      	b.n	acf6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    ad06:	0000      	.short	0x0000
    ad08:	20001468 	.word	0x20001468
    ad0c:	40001000 	.word	0x40001000
    ad10:	4001f504 	.word	0x4001f504
    ad14:	0000b84c 	.word	0x0000b84c

0000ad18 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    ad18:	4a02      	ldr	r2, [pc, #8]	; (ad24 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    ad1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ad1c:	6003      	str	r3, [r0, #0]
    ad1e:	6b50      	ldr	r0, [r2, #52]	; 0x34
    ad20:	6008      	str	r0, [r1, #0]
    ad22:	4770      	bx	lr
    ad24:	20001468 	.word	0x20001468

0000ad28 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    ad28:	b510      	push	{r4, lr}
    ad2a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    ad2c:	4901      	ldr	r1, [pc, #4]	; (ad34 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    ad2e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    ad32:	bd10      	pop	{r4, pc}
    ad34:	20001458 	.word	0x20001458

0000ad38 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    ad38:	490f      	ldr	r1, [pc, #60]	; (ad78 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    ad3a:	b510      	push	{r4, lr}
    ad3c:	69ca      	ldr	r2, [r1, #28]
    ad3e:	4282      	cmp	r2, r0
    ad40:	d302      	bcc.n	ad48 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    ad42:	f640 111f 	movw	r1, #2335	; 0x91f
    ad46:	e00b      	b.n	ad60 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    ad48:	2201      	movs	r2, #1
    ad4a:	730a      	strb	r2, [r1, #12]
    ad4c:	6108      	str	r0, [r1, #16]
    ad4e:	490b      	ldr	r1, [pc, #44]	; (ad7c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    ad50:	644a      	str	r2, [r1, #68]	; 0x44
    ad52:	1d0a      	adds	r2, r1, #4
    ad54:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    ad58:	4283      	cmp	r3, r0
    ad5a:	d304      	bcc.n	ad66 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    ad5c:	f640 1128 	movw	r1, #2344	; 0x928
    ad60:	203e      	movs	r0, #62	; 0x3e
    ad62:	f7f9 fc03 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad66:	2300      	movs	r3, #0
    ad68:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    ad6c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ad70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad74:	f000 bc94 	b.w	b6a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    ad78:	20001468 	.word	0x20001468
    ad7c:	40008000 	.word	0x40008000

0000ad80 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    ad80:	b570      	push	{r4, r5, r6, lr}
    ad82:	4c0f      	ldr	r4, [pc, #60]	; (adc0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    ad84:	4603      	mov	r3, r0
    ad86:	2002      	movs	r0, #2
    ad88:	7320      	strb	r0, [r4, #12]
    ad8a:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    ad8e:	2096      	movs	r0, #150	; 0x96
    ad90:	f894 1020 	ldrb.w	r1, [r4, #32]
    ad94:	7d22      	ldrb	r2, [r4, #20]
    ad96:	2d01      	cmp	r5, #1
    ad98:	d00e      	beq.n	adb8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    ad9a:	f000 fd93 	bl	b8c4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ad9e:	6120      	str	r0, [r4, #16]
    ada0:	4808      	ldr	r0, [pc, #32]	; (adc4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    ada2:	2100      	movs	r1, #0
    ada4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    ada8:	6921      	ldr	r1, [r4, #16]
    adaa:	69e0      	ldr	r0, [r4, #28]
    adac:	4408      	add	r0, r1
    adae:	4905      	ldr	r1, [pc, #20]	; (adc4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    adb0:	1d09      	adds	r1, r1, #4
    adb2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    adb6:	bd70      	pop	{r4, r5, r6, pc}
    adb8:	f000 fda2 	bl	b900 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    adbc:	e7ef      	b.n	ad9e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    adbe:	0000      	.short	0x0000
    adc0:	20001468 	.word	0x20001468
    adc4:	40008000 	.word	0x40008000

0000adc8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    adc8:	b510      	push	{r4, lr}
    adca:	f001 fb42 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    adce:	2800      	cmp	r0, #0
    add0:	d006      	beq.n	ade0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    add2:	4804      	ldr	r0, [pc, #16]	; (ade4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    add4:	6801      	ldr	r1, [r0, #0]
    add6:	f021 0101 	bic.w	r1, r1, #1
    adda:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    adde:	6001      	str	r1, [r0, #0]
    ade0:	bd10      	pop	{r4, pc}
    ade2:	0000      	.short	0x0000
    ade4:	40001774 	.word	0x40001774

0000ade8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    ade8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adec:	2238      	movs	r2, #56	; 0x38
    adee:	2100      	movs	r1, #0
    adf0:	4813      	ldr	r0, [pc, #76]	; (ae40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    adf2:	f001 fbcc 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    adf6:	f000 fcad 	bl	b754 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    adfa:	f001 fae3 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    adfe:	4d11      	ldr	r5, [pc, #68]	; (ae44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ae00:	4e10      	ldr	r6, [pc, #64]	; (ae44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ae02:	2400      	movs	r4, #0
    ae04:	4f0f      	ldr	r7, [pc, #60]	; (ae44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ae06:	3508      	adds	r5, #8
    ae08:	3610      	adds	r6, #16
    ae0a:	b928      	cbnz	r0, ae18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ae0c:	f001 faf1 	bl	c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ae10:	b910      	cbnz	r0, ae18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ae12:	f001 faf8 	bl	c406 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    ae16:	b108      	cbz	r0, ae1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    ae18:	2224      	movs	r2, #36	; 0x24
    ae1a:	e006      	b.n	ae2a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ae1c:	f001 fb33 	bl	c486 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ae20:	b910      	cbnz	r0, ae28 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    ae22:	f001 fb26 	bl	c472 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    ae26:	b140      	cbz	r0, ae3a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    ae28:	2240      	movs	r2, #64	; 0x40
    ae2a:	21ff      	movs	r1, #255	; 0xff
    ae2c:	4638      	mov	r0, r7
    ae2e:	f001 fbae 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ae32:	602c      	str	r4, [r5, #0]
    ae34:	6034      	str	r4, [r6, #0]
    ae36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae3a:	2238      	movs	r2, #56	; 0x38
    ae3c:	e7f5      	b.n	ae2a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ae3e:	0000      	.short	0x0000
    ae40:	20001468 	.word	0x20001468
    ae44:	40000e00 	.word	0x40000e00

0000ae48 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    ae48:	4801      	ldr	r0, [pc, #4]	; (ae50 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    ae4a:	69c0      	ldr	r0, [r0, #28]
    ae4c:	4770      	bx	lr
    ae4e:	0000      	.short	0x0000
    ae50:	20001468 	.word	0x20001468

0000ae54 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ae54:	4801      	ldr	r0, [pc, #4]	; (ae5c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    ae56:	6980      	ldr	r0, [r0, #24]
    ae58:	4770      	bx	lr
    ae5a:	0000      	.short	0x0000
    ae5c:	20001468 	.word	0x20001468

0000ae60 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ae60:	b510      	push	{r4, lr}
    ae62:	f000 fc2b 	bl	b6bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    ae66:	f7ff fe69 	bl	ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ae6a:	f7f9 fa31 	bl	42d0 <mpsl_fem_disable>
    ae6e:	b130      	cbz	r0, ae7e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    ae70:	1c40      	adds	r0, r0, #1
    ae72:	d004      	beq.n	ae7e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    ae74:	f240 516d 	movw	r1, #1389	; 0x56d
    ae78:	203e      	movs	r0, #62	; 0x3e
    ae7a:	f7f9 fb77 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae7e:	480f      	ldr	r0, [pc, #60]	; (aebc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    ae80:	4a0f      	ldr	r2, [pc, #60]	; (aec0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    ae82:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ae84:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    ae88:	6011      	str	r1, [r2, #0]
    ae8a:	2400      	movs	r4, #0
    ae8c:	6284      	str	r4, [r0, #40]	; 0x28
    ae8e:	7304      	strb	r4, [r0, #12]
    ae90:	61c4      	str	r4, [r0, #28]
    ae92:	6184      	str	r4, [r0, #24]
    ae94:	f000 fc12 	bl	b6bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    ae98:	480a      	ldr	r0, [pc, #40]	; (aec4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    ae9a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    ae9e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    aea2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    aea6:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    aeaa:	2001      	movs	r0, #1
    aeac:	f005 fc07 	bl	106be <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    aeb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aeb4:	2001      	movs	r0, #1
    aeb6:	f005 bbf5 	b.w	106a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    aeba:	0000      	.short	0x0000
    aebc:	20001468 	.word	0x20001468
    aec0:	4001f508 	.word	0x4001f508
    aec4:	40008000 	.word	0x40008000

0000aec8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    aec8:	b570      	push	{r4, r5, r6, lr}
    aeca:	2001      	movs	r0, #1
    aecc:	f005 fbf7 	bl	106be <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    aed0:	4c37      	ldr	r4, [pc, #220]	; (afb0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    aed2:	2000      	movs	r0, #0
    aed4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    aed8:	2001      	movs	r0, #1
    aeda:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    aede:	f001 faa8 	bl	c432 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    aee2:	4d34      	ldr	r5, [pc, #208]	; (afb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aee4:	b118      	cbz	r0, aeee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    aee6:	6828      	ldr	r0, [r5, #0]
    aee8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    aeec:	6028      	str	r0, [r5, #0]
    aeee:	f001 fa94 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    aef2:	b128      	cbz	r0, af00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    aef4:	6828      	ldr	r0, [r5, #0]
    aef6:	4930      	ldr	r1, [pc, #192]	; (afb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    aef8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    aefc:	4308      	orrs	r0, r1
    aefe:	6028      	str	r0, [r5, #0]
    af00:	f001 faa7 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    af04:	b138      	cbz	r0, af16 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    af06:	482b      	ldr	r0, [pc, #172]	; (afb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    af08:	1d00      	adds	r0, r0, #4
    af0a:	6801      	ldr	r1, [r0, #0]
    af0c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    af10:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    af14:	6001      	str	r1, [r0, #0]
    af16:	4927      	ldr	r1, [pc, #156]	; (afb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    af18:	4828      	ldr	r0, [pc, #160]	; (afbc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    af1a:	313c      	adds	r1, #60	; 0x3c
    af1c:	6008      	str	r0, [r1, #0]
    af1e:	f7f9 fa0d 	bl	433c <mpsl_fem_device_config_254_apply_get>
    af22:	b140      	cbz	r0, af36 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    af24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    af28:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    af2c:	1c41      	adds	r1, r0, #1
    af2e:	d002      	beq.n	af36 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    af30:	4920      	ldr	r1, [pc, #128]	; (afb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    af32:	3110      	adds	r1, #16
    af34:	6008      	str	r0, [r1, #0]
    af36:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    af3a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    af3c:	1c41      	adds	r1, r0, #1
    af3e:	d004      	beq.n	af4a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    af40:	491f      	ldr	r1, [pc, #124]	; (afc0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    af42:	680a      	ldr	r2, [r1, #0]
    af44:	f360 4217 	bfi	r2, r0, #16, #8
    af48:	600a      	str	r2, [r1, #0]
    af4a:	f240 1103 	movw	r1, #259	; 0x103
    af4e:	f240 605b 	movw	r0, #1627	; 0x65b
    af52:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    af56:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    af5a:	2001      	movs	r0, #1
    af5c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    af60:	f000 f842 	bl	afe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    af64:	f240 2001 	movw	r0, #513	; 0x201
    af68:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    af6c:	2002      	movs	r0, #2
    af6e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    af72:	4914      	ldr	r1, [pc, #80]	; (afc4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    af74:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    af78:	6008      	str	r0, [r1, #0]
    af7a:	4913      	ldr	r1, [pc, #76]	; (afc8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    af7c:	2000      	movs	r0, #0
    af7e:	4d13      	ldr	r5, [pc, #76]	; (afcc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    af80:	8608      	strh	r0, [r1, #48]	; 0x30
    af82:	3110      	adds	r1, #16
    af84:	61c8      	str	r0, [r1, #28]
    af86:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    af8a:	7028      	strb	r0, [r5, #0]
    af8c:	2001      	movs	r0, #1
    af8e:	f005 fb89 	bl	106a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    af92:	2010      	movs	r0, #16
    af94:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    af98:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    af9c:	2002      	movs	r0, #2
    af9e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    afa2:	6868      	ldr	r0, [r5, #4]
    afa4:	2800      	cmp	r0, #0
    afa6:	d002      	beq.n	afae <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    afa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    afac:	4700      	bx	r0
    afae:	bd70      	pop	{r4, r5, r6, pc}
    afb0:	40001000 	.word	0x40001000
    afb4:	4000173c 	.word	0x4000173c
    afb8:	80000096 	.word	0x80000096
    afbc:	8900002c 	.word	0x8900002c
    afc0:	4000158c 	.word	0x4000158c
    afc4:	4001f504 	.word	0x4001f504
    afc8:	20001458 	.word	0x20001458
    afcc:	20000320 	.word	0x20000320

0000afd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    afd0:	4901      	ldr	r1, [pc, #4]	; (afd8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    afd2:	7548      	strb	r0, [r1, #21]
    afd4:	4770      	bx	lr
    afd6:	0000      	.short	0x0000
    afd8:	20001468 	.word	0x20001468

0000afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    afdc:	4901      	ldr	r1, [pc, #4]	; (afe4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    afde:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    afe2:	4770      	bx	lr
    afe4:	0000b8a0 	.word	0x0000b8a0

0000afe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    afe8:	4908      	ldr	r1, [pc, #32]	; (b00c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    afea:	b510      	push	{r4, lr}
    afec:	7508      	strb	r0, [r1, #20]
    afee:	4908      	ldr	r1, [pc, #32]	; (b010 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    aff0:	2801      	cmp	r0, #1
    aff2:	d006      	beq.n	b002 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    aff4:	2802      	cmp	r0, #2
    aff6:	d006      	beq.n	b006 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    aff8:	f640 5169 	movw	r1, #3433	; 0xd69
    affc:	203e      	movs	r0, #62	; 0x3e
    affe:	f7f9 fab5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b002:	2003      	movs	r0, #3
    b004:	e000      	b.n	b008 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    b006:	2004      	movs	r0, #4
    b008:	6008      	str	r0, [r1, #0]
    b00a:	bd10      	pop	{r4, pc}
    b00c:	20001468 	.word	0x20001468
    b010:	40001510 	.word	0x40001510

0000b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b014:	4905      	ldr	r1, [pc, #20]	; (b02c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b016:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    b01a:	4805      	ldr	r0, [pc, #20]	; (b030 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    b01c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    b020:	f041 0101 	orr.w	r1, r1, #1
    b024:	7001      	strb	r1, [r0, #0]
    b026:	f000 ba3b 	b.w	b4a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b02a:	0000      	.short	0x0000
    b02c:	40001000 	.word	0x40001000
    b030:	20001468 	.word	0x20001468

0000b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    b034:	4901      	ldr	r1, [pc, #4]	; (b03c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    b036:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b03a:	4770      	bx	lr
    b03c:	0000b8ac 	.word	0x0000b8ac

0000b040 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b044:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b0e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    b048:	4d28      	ldr	r5, [pc, #160]	; (b0ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    b04a:	460f      	mov	r7, r1
    b04c:	0006      	movs	r6, r0
    b04e:	4614      	mov	r4, r2
    b050:	f04f 0801 	mov.w	r8, #1
    b054:	d004      	beq.n	b060 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    b056:	2e01      	cmp	r6, #1
    b058:	d010      	beq.n	b07c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    b05a:	f640 0124 	movw	r1, #2084	; 0x824
    b05e:	e039      	b.n	b0d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    b060:	4610      	mov	r0, r2
    b062:	f000 fbd1 	bl	b808 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b066:	4822      	ldr	r0, [pc, #136]	; (b0f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    b068:	f885 8009 	strb.w	r8, [r5, #9]
    b06c:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    b070:	4638      	mov	r0, r7
    b072:	f000 fb77 	bl	b764 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    b076:	4604      	mov	r4, r0
    b078:	4648      	mov	r0, r9
    b07a:	e00c      	b.n	b096 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    b07c:	4610      	mov	r0, r2
    b07e:	f000 fba9 	bl	b7d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b082:	2002      	movs	r0, #2
    b084:	7268      	strb	r0, [r5, #9]
    b086:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b08a:	4638      	mov	r0, r7
    b08c:	f000 fb6a 	bl	b764 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    b090:	4604      	mov	r4, r0
    b092:	4815      	ldr	r0, [pc, #84]	; (b0e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    b094:	1d00      	adds	r0, r0, #4
    b096:	f000 fb23 	bl	b6e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    b09a:	4f16      	ldr	r7, [pc, #88]	; (b0f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    b09c:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    b0a0:	4916      	ldr	r1, [pc, #88]	; (b0fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    b0a2:	4815      	ldr	r0, [pc, #84]	; (b0f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    b0a4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b0a8:	2010      	movs	r0, #16
    b0aa:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    b0ae:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    b0b0:	4913      	ldr	r1, [pc, #76]	; (b100 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    b0b2:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b0b6:	62a8      	str	r0, [r5, #40]	; 0x28
    b0b8:	0138      	lsls	r0, r7, #4
    b0ba:	6008      	str	r0, [r1, #0]
    b0bc:	f000 fa2a 	bl	b514 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    b0c0:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    b0c4:	480b      	ldr	r0, [pc, #44]	; (b0f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    b0c6:	300c      	adds	r0, #12
    b0c8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b0cc:	42a0      	cmp	r0, r4
    b0ce:	d304      	bcc.n	b0da <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    b0d0:	f640 013a 	movw	r1, #2106	; 0x83a
    b0d4:	203e      	movs	r0, #62	; 0x3e
    b0d6:	f7f9 fa49 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0da:	4621      	mov	r1, r4
    b0dc:	4630      	mov	r0, r6
    b0de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0e2:	f000 bb09 	b.w	b6f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b0e6:	0000      	.short	0x0000
    b0e8:	40001000 	.word	0x40001000
    b0ec:	20001468 	.word	0x20001468
    b0f0:	0000b84c 	.word	0x0000b84c
    b0f4:	40008000 	.word	0x40008000
    b0f8:	40008140 	.word	0x40008140
    b0fc:	4001f098 	.word	0x4001f098
    b100:	4001f504 	.word	0x4001f504

0000b104 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b104:	4b0d      	ldr	r3, [pc, #52]	; (b13c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    b106:	b510      	push	{r4, lr}
    b108:	71d8      	strb	r0, [r3, #7]
    b10a:	729a      	strb	r2, [r3, #10]
    b10c:	b151      	cbz	r1, b124 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    b10e:	2002      	movs	r0, #2
    b110:	7218      	strb	r0, [r3, #8]
    b112:	2801      	cmp	r0, #1
    b114:	d008      	beq.n	b128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    b116:	2802      	cmp	r0, #2
    b118:	d00f      	beq.n	b13a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b11a:	f640 2145 	movw	r1, #2629	; 0xa45
    b11e:	203e      	movs	r0, #62	; 0x3e
    b120:	f7f9 fa24 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b124:	2001      	movs	r0, #1
    b126:	e7f3      	b.n	b110 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    b128:	7a58      	ldrb	r0, [r3, #9]
    b12a:	2802      	cmp	r0, #2
    b12c:	d105      	bne.n	b13a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b12e:	f000 f97b 	bl	b428 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    b132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b136:	f000 baa9 	b.w	b68c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    b13a:	bd10      	pop	{r4, pc}
    b13c:	20001468 	.word	0x20001468

0000b140 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    b140:	4902      	ldr	r1, [pc, #8]	; (b14c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    b142:	2000      	movs	r0, #0
    b144:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b148:	4770      	bx	lr
    b14a:	0000      	.short	0x0000
    b14c:	40008000 	.word	0x40008000

0000b150 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b150:	4904      	ldr	r1, [pc, #16]	; (b164 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    b152:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    b156:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    b15a:	4249      	negs	r1, r1
    b15c:	7001      	strb	r1, [r0, #0]
    b15e:	2001      	movs	r0, #1
    b160:	4770      	bx	lr
    b162:	0000      	.short	0x0000
    b164:	40001000 	.word	0x40001000

0000b168 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b168:	4903      	ldr	r1, [pc, #12]	; (b178 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    b16a:	0e02      	lsrs	r2, r0, #24
    b16c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    b170:	0200      	lsls	r0, r0, #8
    b172:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    b176:	4770      	bx	lr
    b178:	40001000 	.word	0x40001000

0000b17c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b17c:	4901      	ldr	r1, [pc, #4]	; (b184 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    b17e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b182:	4770      	bx	lr
    b184:	40001000 	.word	0x40001000

0000b188 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    b188:	b510      	push	{r4, lr}
    b18a:	2200      	movs	r2, #0
    b18c:	2901      	cmp	r1, #1
    b18e:	d006      	beq.n	b19e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    b190:	2902      	cmp	r1, #2
    b192:	d002      	beq.n	b19a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    b194:	f240 21d9 	movw	r1, #729	; 0x2d9
    b198:	e014      	b.n	b1c4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    b19a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b19e:	490b      	ldr	r1, [pc, #44]	; (b1cc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    b1a0:	430a      	orrs	r2, r1
    b1a2:	490b      	ldr	r1, [pc, #44]	; (b1d0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    b1a4:	600a      	str	r2, [r1, #0]
    b1a6:	490b      	ldr	r1, [pc, #44]	; (b1d4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    b1a8:	4308      	orrs	r0, r1
    b1aa:	4909      	ldr	r1, [pc, #36]	; (b1d0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    b1ac:	1d09      	adds	r1, r1, #4
    b1ae:	6008      	str	r0, [r1, #0]
    b1b0:	4809      	ldr	r0, [pc, #36]	; (b1d8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    b1b2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b1b6:	b2c0      	uxtb	r0, r0
    b1b8:	2803      	cmp	r0, #3
    b1ba:	d001      	beq.n	b1c0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    b1bc:	280b      	cmp	r0, #11
    b1be:	d104      	bne.n	b1ca <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    b1c0:	f240 21f1 	movw	r1, #753	; 0x2f1
    b1c4:	203e      	movs	r0, #62	; 0x3e
    b1c6:	f7f9 f9d1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1ca:	bd10      	pop	{r4, pc}
    b1cc:	00100108 	.word	0x00100108
    b1d0:	40001514 	.word	0x40001514
    b1d4:	02030000 	.word	0x02030000
    b1d8:	40001000 	.word	0x40001000

0000b1dc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b1dc:	4901      	ldr	r1, [pc, #4]	; (b1e4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b1de:	7588      	strb	r0, [r1, #22]
    b1e0:	4770      	bx	lr
    b1e2:	0000      	.short	0x0000
    b1e4:	20001468 	.word	0x20001468

0000b1e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1ec:	4852      	ldr	r0, [pc, #328]	; (b338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b1ee:	f04f 0a01 	mov.w	sl, #1
    b1f2:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    b1f6:	4850      	ldr	r0, [pc, #320]	; (b338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b1f8:	300c      	adds	r0, #12
    b1fa:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    b1fe:	f000 ffde 	bl	c1be <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    b202:	4c4e      	ldr	r4, [pc, #312]	; (b33c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b204:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    b208:	f000 f918 	bl	b43c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    b20c:	494c      	ldr	r1, [pc, #304]	; (b340 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    b20e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b210:	6008      	str	r0, [r1, #0]
    b212:	f8df 9130 	ldr.w	r9, [pc, #304]	; b344 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b216:	2000      	movs	r0, #0
    b218:	62a0      	str	r0, [r4, #40]	; 0x28
    b21a:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    b21e:	f240 131d 	movw	r3, #285	; 0x11d
    b222:	439a      	bics	r2, r3
    b224:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    b228:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b22c:	f000 f986 	bl	b53c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    b230:	4605      	mov	r5, r0
    b232:	4841      	ldr	r0, [pc, #260]	; (b338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b234:	3008      	adds	r0, #8
    b236:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b23a:	4e3f      	ldr	r6, [pc, #252]	; (b338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b23c:	61e0      	str	r0, [r4, #28]
    b23e:	1d36      	adds	r6, r6, #4
    b240:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    b244:	61a0      	str	r0, [r4, #24]
    b246:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b24a:	7d21      	ldrb	r1, [r4, #20]
    b24c:	f884 1020 	strb.w	r1, [r4, #32]
    b250:	7a61      	ldrb	r1, [r4, #9]
    b252:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b256:	46a0      	mov	r8, r4
    b258:	2400      	movs	r4, #0
    b25a:	4639      	mov	r1, r7
    b25c:	4628      	mov	r0, r5
    b25e:	f000 f9e1 	bl	b624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    b262:	b910      	cbnz	r0, b26a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    b264:	f8c9 a010 	str.w	sl, [r9, #16]
    b268:	2401      	movs	r4, #1
    b26a:	4f34      	ldr	r7, [pc, #208]	; (b33c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b26c:	07e8      	lsls	r0, r5, #31
    b26e:	f1a7 0710 	sub.w	r7, r7, #16
    b272:	d002      	beq.n	b27a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    b274:	6838      	ldr	r0, [r7, #0]
    b276:	4780      	blx	r0
    b278:	e032      	b.n	b2e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    b27a:	07a8      	lsls	r0, r5, #30
    b27c:	d527      	bpl.n	b2ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    b27e:	0768      	lsls	r0, r5, #29
    b280:	d41f      	bmi.n	b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b282:	f001 f8e6 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b286:	b9e0      	cbnz	r0, b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b288:	f001 f8d3 	bl	c432 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b28c:	b9c8      	cbnz	r0, b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b28e:	482e      	ldr	r0, [pc, #184]	; (b348 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b290:	6800      	ldr	r0, [r0, #0]
    b292:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    b296:	f3c0 5142 	ubfx	r1, r0, #21, #3
    b29a:	f000 030f 	and.w	r3, r0, #15
    b29e:	f3c0 1203 	ubfx	r2, r0, #4, #4
    b2a2:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b2a6:	f1bc 0f00 	cmp.w	ip, #0
    b2aa:	d00a      	beq.n	b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b2ac:	b10b      	cbz	r3, b2b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    b2ae:	b102      	cbz	r2, b2b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    b2b0:	b938      	cbnz	r0, b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b2b2:	4825      	ldr	r0, [pc, #148]	; (b348 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b2b4:	1d00      	adds	r0, r0, #4
    b2b6:	6800      	ldr	r0, [r0, #0]
    b2b8:	b118      	cbz	r0, b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b2ba:	2903      	cmp	r1, #3
    b2bc:	d201      	bcs.n	b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b2be:	f045 0504 	orr.w	r5, r5, #4
    b2c2:	f345 0080 	sbfx	r0, r5, #2, #1
    b2c6:	4621      	mov	r1, r4
    b2c8:	1c40      	adds	r0, r0, #1
    b2ca:	687a      	ldr	r2, [r7, #4]
    b2cc:	e007      	b.n	b2de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    b2ce:	f015 0f28 	tst.w	r5, #40	; 0x28
    b2d2:	d005      	beq.n	b2e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    b2d4:	f345 1140 	sbfx	r1, r5, #5, #1
    b2d8:	68ba      	ldr	r2, [r7, #8]
    b2da:	4620      	mov	r0, r4
    b2dc:	1c49      	adds	r1, r1, #1
    b2de:	4790      	blx	r2
    b2e0:	06e8      	lsls	r0, r5, #27
    b2e2:	d501      	bpl.n	b2e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    b2e4:	68f8      	ldr	r0, [r7, #12]
    b2e6:	4780      	blx	r0
    b2e8:	f898 1009 	ldrb.w	r1, [r8, #9]
    b2ec:	4640      	mov	r0, r8
    b2ee:	2902      	cmp	r1, #2
    b2f0:	d120      	bne.n	b334 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    b2f2:	7b01      	ldrb	r1, [r0, #12]
    b2f4:	2900      	cmp	r1, #0
    b2f6:	d01d      	beq.n	b334 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    b2f8:	2902      	cmp	r1, #2
    b2fa:	d004      	beq.n	b306 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    b2fc:	2901      	cmp	r1, #1
    b2fe:	d009      	beq.n	b314 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    b300:	f640 4148 	movw	r1, #3144	; 0xc48
    b304:	e00d      	b.n	b322 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    b306:	69c1      	ldr	r1, [r0, #28]
    b308:	f8d8 0010 	ldr.w	r0, [r8, #16]
    b30c:	4408      	add	r0, r1
    b30e:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b312:	e00b      	b.n	b32c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    b314:	6901      	ldr	r1, [r0, #16]
    b316:	f8d8 001c 	ldr.w	r0, [r8, #28]
    b31a:	4281      	cmp	r1, r0
    b31c:	d804      	bhi.n	b328 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    b31e:	f640 4149 	movw	r1, #3145	; 0xc49
    b322:	203e      	movs	r0, #62	; 0x3e
    b324:	f7f9 f922 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b328:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    b32c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b330:	f000 b9b6 	b.w	b6a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b338:	40008000 	.word	0x40008000
    b33c:	20001468 	.word	0x20001468
    b340:	4001f508 	.word	0x4001f508
    b344:	40001000 	.word	0x40001000
    b348:	40001450 	.word	0x40001450

0000b34c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b34c:	b570      	push	{r4, r5, r6, lr}
    b34e:	4b16      	ldr	r3, [pc, #88]	; (b3a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    b350:	888c      	ldrh	r4, [r1, #4]
    b352:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    b356:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    b35a:	780c      	ldrb	r4, [r1, #0]
    b35c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b360:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b364:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    b368:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    b36c:	2401      	movs	r4, #1
    b36e:	4084      	lsls	r4, r0
    b370:	b2c9      	uxtb	r1, r1
    b372:	b2e5      	uxtb	r5, r4
    b374:	4329      	orrs	r1, r5
    b376:	b132      	cbz	r2, b386 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b378:	2a01      	cmp	r2, #1
    b37a:	d00a      	beq.n	b392 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    b37c:	f240 51d4 	movw	r1, #1492	; 0x5d4
    b380:	203e      	movs	r0, #62	; 0x3e
    b382:	f7f9 f8f3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b386:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b38a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b38e:	43a0      	bics	r0, r4
    b390:	e004      	b.n	b39c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b392:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b396:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b39a:	4328      	orrs	r0, r5
    b39c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b3a0:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b3a4:	bd70      	pop	{r4, r5, r6, pc}
    b3a6:	0000      	.short	0x0000
    b3a8:	40001000 	.word	0x40001000

0000b3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    b3ac:	4901      	ldr	r1, [pc, #4]	; (b3b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    b3ae:	2001      	movs	r0, #1
    b3b0:	7008      	strb	r0, [r1, #0]
    b3b2:	4770      	bx	lr
    b3b4:	20000320 	.word	0x20000320
    b3b8:	480b      	ldr	r0, [pc, #44]	; (b3e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    b3ba:	7d81      	ldrb	r1, [r0, #22]
    b3bc:	480b      	ldr	r0, [pc, #44]	; (b3ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    b3be:	5c40      	ldrb	r0, [r0, r1]
    b3c0:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    b3c4:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    b3c8:	d204      	bcs.n	b3d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    b3ca:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    b3ce:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b3d2:	e001      	b.n	b3d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    b3d4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    b3d8:	4a05      	ldr	r2, [pc, #20]	; (b3f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    b3da:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    b3de:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    b3e2:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    b3e6:	4770      	bx	lr
    b3e8:	20001468 	.word	0x20001468
    b3ec:	0000b852 	.word	0x0000b852
    b3f0:	40001000 	.word	0x40001000
    b3f4:	b508      	push	{r3, lr}
    b3f6:	490b      	ldr	r1, [pc, #44]	; (b424 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    b3f8:	466b      	mov	r3, sp
    b3fa:	f991 2015 	ldrsb.w	r2, [r1, #21]
    b3fe:	7d89      	ldrb	r1, [r1, #22]
    b400:	f000 faca 	bl	b998 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    b404:	f99d 0000 	ldrsb.w	r0, [sp]
    b408:	f000 fa9a 	bl	b940 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b40c:	f10d 0001 	add.w	r0, sp, #1
    b410:	f7f8 ff82 	bl	4318 <mpsl_fem_pa_gain_set>
    b414:	2800      	cmp	r0, #0
    b416:	d004      	beq.n	b422 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    b418:	f240 6115 	movw	r1, #1557	; 0x615
    b41c:	203e      	movs	r0, #62	; 0x3e
    b41e:	f7f9 f8a5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b422:	bd08      	pop	{r3, pc}
    b424:	20001468 	.word	0x20001468
    b428:	4803      	ldr	r0, [pc, #12]	; (b438 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    b42a:	7a01      	ldrb	r1, [r0, #8]
    b42c:	2901      	cmp	r1, #1
    b42e:	d102      	bne.n	b436 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    b430:	7a80      	ldrb	r0, [r0, #10]
    b432:	f7ff bfdf 	b.w	b3f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    b436:	4770      	bx	lr
    b438:	20001468 	.word	0x20001468
    b43c:	480d      	ldr	r0, [pc, #52]	; (b474 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    b43e:	b510      	push	{r4, lr}
    b440:	7a40      	ldrb	r0, [r0, #9]
    b442:	2801      	cmp	r0, #1
    b444:	d00c      	beq.n	b460 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    b446:	2802      	cmp	r0, #2
    b448:	d113      	bne.n	b472 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b44a:	f7f8 ff47 	bl	42dc <mpsl_fem_lna_configuration_clear>
    b44e:	2800      	cmp	r0, #0
    b450:	d00f      	beq.n	b472 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b452:	1c40      	adds	r0, r0, #1
    b454:	d00d      	beq.n	b472 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b456:	f640 01a6 	movw	r1, #2214	; 0x8a6
    b45a:	203e      	movs	r0, #62	; 0x3e
    b45c:	f7f9 f886 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b460:	f7f8 ff4e 	bl	4300 <mpsl_fem_pa_configuration_clear>
    b464:	2800      	cmp	r0, #0
    b466:	d004      	beq.n	b472 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b468:	1c40      	adds	r0, r0, #1
    b46a:	d002      	beq.n	b472 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b46c:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    b470:	e7f3      	b.n	b45a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    b472:	bd10      	pop	{r4, pc}
    b474:	20001468 	.word	0x20001468
    b478:	4808      	ldr	r0, [pc, #32]	; (b49c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    b47a:	2100      	movs	r1, #0
    b47c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b480:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b484:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b488:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b48c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b490:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b494:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b498:	4770      	bx	lr
    b49a:	0000      	.short	0x0000
    b49c:	40001000 	.word	0x40001000
    b4a0:	4818      	ldr	r0, [pc, #96]	; (b504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    b4a2:	b510      	push	{r4, lr}
    b4a4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b4a8:	07c1      	lsls	r1, r0, #31
    b4aa:	d029      	beq.n	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b4ac:	0781      	lsls	r1, r0, #30
    b4ae:	d514      	bpl.n	b4da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    b4b0:	4815      	ldr	r0, [pc, #84]	; (b508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    b4b2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b4b6:	f041 0101 	orr.w	r1, r1, #1
    b4ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b4be:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b4c2:	b2c0      	uxtb	r0, r0
    b4c4:	280b      	cmp	r0, #11
    b4c6:	d005      	beq.n	b4d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b4c8:	280a      	cmp	r0, #10
    b4ca:	d003      	beq.n	b4d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b4cc:	2803      	cmp	r0, #3
    b4ce:	d001      	beq.n	b4d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b4d0:	2802      	cmp	r0, #2
    b4d2:	d115      	bne.n	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b4d4:	f240 613e 	movw	r1, #1598	; 0x63e
    b4d8:	e00f      	b.n	b4fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    b4da:	0740      	lsls	r0, r0, #29
    b4dc:	d510      	bpl.n	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b4de:	480a      	ldr	r0, [pc, #40]	; (b508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    b4e0:	490a      	ldr	r1, [pc, #40]	; (b50c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    b4e2:	3008      	adds	r0, #8
    b4e4:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b4e8:	f44f 71a0 	mov.w	r1, #320	; 0x140
    b4ec:	4808      	ldr	r0, [pc, #32]	; (b510 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    b4ee:	f005 f8fc 	bl	106ea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    b4f2:	2800      	cmp	r0, #0
    b4f4:	d004      	beq.n	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b4f6:	f240 6146 	movw	r1, #1606	; 0x646
    b4fa:	203e      	movs	r0, #62	; 0x3e
    b4fc:	f7f9 f836 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b500:	bd10      	pop	{r4, pc}
    b502:	0000      	.short	0x0000
    b504:	20001468 	.word	0x20001468
    b508:	40001000 	.word	0x40001000
    b50c:	4001f098 	.word	0x4001f098
    b510:	40008000 	.word	0x40008000
    b514:	4808      	ldr	r0, [pc, #32]	; (b538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    b516:	4601      	mov	r1, r0
    b518:	79c2      	ldrb	r2, [r0, #7]
    b51a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    b51e:	b112      	cbz	r2, b526 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    b520:	2a01      	cmp	r2, #1
    b522:	d003      	beq.n	b52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    b524:	e006      	b.n	b534 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    b526:	f041 0102 	orr.w	r1, r1, #2
    b52a:	e001      	b.n	b530 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    b52c:	f041 0104 	orr.w	r1, r1, #4
    b530:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    b534:	f7ff bfb4 	b.w	b4a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b538:	20001468 	.word	0x20001468
    b53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b540:	4d34      	ldr	r5, [pc, #208]	; (b614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    b542:	2400      	movs	r4, #0
    b544:	7b28      	ldrb	r0, [r5, #12]
    b546:	b138      	cbz	r0, b558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    b548:	f44f 71a2 	mov.w	r1, #324	; 0x144
    b54c:	4832      	ldr	r0, [pc, #200]	; (b618 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    b54e:	f005 f8cc 	bl	106ea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    b552:	b108      	cbz	r0, b558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    b554:	2601      	movs	r6, #1
    b556:	e000      	b.n	b55a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    b558:	2600      	movs	r6, #0
    b55a:	7a68      	ldrb	r0, [r5, #9]
    b55c:	4f2f      	ldr	r7, [pc, #188]	; (b61c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    b55e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    b562:	2801      	cmp	r0, #1
    b564:	d002      	beq.n	b56c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    b566:	2802      	cmp	r0, #2
    b568:	d006      	beq.n	b578 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b56a:	e016      	b.n	b59a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b56c:	4638      	mov	r0, r7
    b56e:	f005 f8b7 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b572:	b190      	cbz	r0, b59a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b574:	2408      	movs	r4, #8
    b576:	e010      	b.n	b59a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b578:	4638      	mov	r0, r7
    b57a:	f005 f8b1 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b57e:	b100      	cbz	r0, b582 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    b580:	2402      	movs	r4, #2
    b582:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    b586:	43c0      	mvns	r0, r0
    b588:	f340 0000 	sbfx	r0, r0, #0, #1
    b58c:	1c40      	adds	r0, r0, #1
    b58e:	d101      	bne.n	b594 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    b590:	f044 0404 	orr.w	r4, r4, #4
    b594:	b10e      	cbz	r6, b59a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b596:	f044 0401 	orr.w	r4, r4, #1
    b59a:	f014 0f0b 	tst.w	r4, #11
    b59e:	d107      	bne.n	b5b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    b5a0:	f44f 7188 	mov.w	r1, #272	; 0x110
    b5a4:	4638      	mov	r0, r7
    b5a6:	f005 f89b 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b5aa:	b108      	cbz	r0, b5b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    b5ac:	f044 0410 	orr.w	r4, r4, #16
    b5b0:	481b      	ldr	r0, [pc, #108]	; (b620 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    b5b2:	7800      	ldrb	r0, [r0, #0]
    b5b4:	b1f8      	cbz	r0, b5f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    b5b6:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    b5ba:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    b5be:	d007      	beq.n	b5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b5c0:	f44f 718a 	mov.w	r1, #276	; 0x114
    b5c4:	4638      	mov	r0, r7
    b5c6:	f005 f88b 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b5ca:	b108      	cbz	r0, b5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b5cc:	2001      	movs	r0, #1
    b5ce:	e000      	b.n	b5d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    b5d0:	2000      	movs	r0, #0
    b5d2:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    b5d6:	b13e      	cbz	r6, b5e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    b5d8:	f44f 718c 	mov.w	r1, #280	; 0x118
    b5dc:	4638      	mov	r0, r7
    b5de:	f005 f87f 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b5e2:	b108      	cbz	r0, b5e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    b5e4:	2001      	movs	r0, #1
    b5e6:	e000      	b.n	b5ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    b5e8:	2000      	movs	r0, #0
    b5ea:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    b5ee:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    b5f2:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    b5f6:	f7ff ff3f 	bl	b478 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    b5fa:	06e0      	lsls	r0, r4, #27
    b5fc:	d506      	bpl.n	b60c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b5fe:	0720      	lsls	r0, r4, #28
    b600:	d404      	bmi.n	b60c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b602:	7a68      	ldrb	r0, [r5, #9]
    b604:	2801      	cmp	r0, #1
    b606:	d101      	bne.n	b60c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b608:	f044 0420 	orr.w	r4, r4, #32
    b60c:	4620      	mov	r0, r4
    b60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b612:	0000      	.short	0x0000
    b614:	20001468 	.word	0x20001468
    b618:	40008000 	.word	0x40008000
    b61c:	40001000 	.word	0x40001000
    b620:	20000320 	.word	0x20000320
    b624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b628:	4c17      	ldr	r4, [pc, #92]	; (b688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    b62a:	460d      	mov	r5, r1
    b62c:	7a21      	ldrb	r1, [r4, #8]
    b62e:	b129      	cbz	r1, b63c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    b630:	f010 0f11 	tst.w	r0, #17
    b634:	d007      	beq.n	b646 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    b636:	f7ff fa81 	bl	ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b63a:	e023      	b.n	b684 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    b63c:	f000 f88a 	bl	b754 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b640:	2000      	movs	r0, #0
    b642:	7320      	strb	r0, [r4, #12]
    b644:	e01e      	b.n	b684 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    b646:	2901      	cmp	r1, #1
    b648:	d001      	beq.n	b64e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    b64a:	2601      	movs	r6, #1
    b64c:	e000      	b.n	b650 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    b64e:	2600      	movs	r6, #0
    b650:	79e0      	ldrb	r0, [r4, #7]
    b652:	2801      	cmp	r0, #1
    b654:	d00e      	beq.n	b674 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    b656:	2700      	movs	r7, #0
    b658:	f000 f87c 	bl	b754 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b65c:	2196      	movs	r1, #150	; 0x96
    b65e:	4630      	mov	r0, r6
    b660:	f000 f88e 	bl	b780 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    b664:	4601      	mov	r1, r0
    b666:	b14f      	cbz	r7, b67c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    b668:	353b      	adds	r5, #59	; 0x3b
    b66a:	428d      	cmp	r5, r1
    b66c:	d904      	bls.n	b678 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    b66e:	2000      	movs	r0, #0
    b670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b674:	2701      	movs	r7, #1
    b676:	e7ef      	b.n	b658 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    b678:	2001      	movs	r0, #1
    b67a:	71e0      	strb	r0, [r4, #7]
    b67c:	7aa2      	ldrb	r2, [r4, #10]
    b67e:	4630      	mov	r0, r6
    b680:	f7ff fcde 	bl	b040 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b684:	2001      	movs	r0, #1
    b686:	e7f3      	b.n	b670 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    b688:	20001468 	.word	0x20001468
    b68c:	4803      	ldr	r0, [pc, #12]	; (b69c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    b68e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b692:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b696:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b69a:	4770      	bx	lr
    b69c:	40001000 	.word	0x40001000
    b6a0:	4804      	ldr	r0, [pc, #16]	; (b6b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    b6a2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b6a4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b6a8:	6281      	str	r1, [r0, #40]	; 0x28
    b6aa:	4903      	ldr	r1, [pc, #12]	; (b6b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    b6ac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b6b0:	6008      	str	r0, [r1, #0]
    b6b2:	4770      	bx	lr
    b6b4:	20001468 	.word	0x20001468
    b6b8:	4001f504 	.word	0x4001f504
    b6bc:	4a07      	ldr	r2, [pc, #28]	; (b6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b6be:	2000      	movs	r0, #0
    b6c0:	3208      	adds	r2, #8
    b6c2:	4906      	ldr	r1, [pc, #24]	; (b6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b6c4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b6c8:	1d0a      	adds	r2, r1, #4
    b6ca:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b6ce:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b6d2:	4902      	ldr	r1, [pc, #8]	; (b6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b6d4:	310c      	adds	r1, #12
    b6d6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b6da:	4770      	bx	lr
    b6dc:	40008000 	.word	0x40008000
    b6e0:	4903      	ldr	r1, [pc, #12]	; (b6f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    b6e2:	79c9      	ldrb	r1, [r1, #7]
    b6e4:	2900      	cmp	r1, #0
    b6e6:	d102      	bne.n	b6ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    b6e8:	4902      	ldr	r1, [pc, #8]	; (b6f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    b6ea:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b6ee:	4770      	bx	lr
    b6f0:	20001468 	.word	0x20001468
    b6f4:	4001f098 	.word	0x4001f098
    b6f8:	b510      	push	{r4, lr}
    b6fa:	4a14      	ldr	r2, [pc, #80]	; (b74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b6fc:	b120      	cbz	r0, b708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    b6fe:	2801      	cmp	r0, #1
    b700:	d011      	beq.n	b726 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    b702:	f44f 61ec 	mov.w	r1, #1888	; 0x760
    b706:	e01c      	b.n	b742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    b708:	f101 0028 	add.w	r0, r1, #40	; 0x28
    b70c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    b710:	490f      	ldr	r1, [pc, #60]	; (b750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    b712:	480e      	ldr	r0, [pc, #56]	; (b74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b714:	f7f8 fdfa 	bl	430c <mpsl_fem_pa_configuration_set>
    b718:	2800      	cmp	r0, #0
    b71a:	d015      	beq.n	b748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b71c:	1c40      	adds	r0, r0, #1
    b71e:	d013      	beq.n	b748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b720:	f240 714f 	movw	r1, #1871	; 0x74f
    b724:	e00d      	b.n	b742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    b726:	f101 0029 	add.w	r0, r1, #41	; 0x29
    b72a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    b72e:	4908      	ldr	r1, [pc, #32]	; (b750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    b730:	4806      	ldr	r0, [pc, #24]	; (b74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b732:	f7f8 fdd9 	bl	42e8 <mpsl_fem_lna_configuration_set>
    b736:	2800      	cmp	r0, #0
    b738:	d006      	beq.n	b748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b73a:	1c40      	adds	r0, r0, #1
    b73c:	d004      	beq.n	b748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b73e:	f240 715c 	movw	r1, #1884	; 0x75c
    b742:	203e      	movs	r0, #62	; 0x3e
    b744:	f7f8 ff12 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b748:	bd10      	pop	{r4, pc}
    b74a:	0000      	.short	0x0000
    b74c:	20000328 	.word	0x20000328
    b750:	0000b87c 	.word	0x0000b87c
    b754:	4802      	ldr	r0, [pc, #8]	; (b760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    b756:	2100      	movs	r1, #0
    b758:	71c1      	strb	r1, [r0, #7]
    b75a:	7201      	strb	r1, [r0, #8]
    b75c:	7241      	strb	r1, [r0, #9]
    b75e:	4770      	bx	lr
    b760:	20001468 	.word	0x20001468
    b764:	4a05      	ldr	r2, [pc, #20]	; (b77c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    b766:	79d2      	ldrb	r2, [r2, #7]
    b768:	2a01      	cmp	r2, #1
    b76a:	d006      	beq.n	b77a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    b76c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b770:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b774:	fbb1 f1f2 	udiv	r1, r1, r2
    b778:	1a40      	subs	r0, r0, r1
    b77a:	4770      	bx	lr
    b77c:	20001468 	.word	0x20001468
    b780:	b570      	push	{r4, r5, r6, lr}
    b782:	4c13      	ldr	r4, [pc, #76]	; (b7d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    b784:	4603      	mov	r3, r0
    b786:	460d      	mov	r5, r1
    b788:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b78c:	2000      	movs	r0, #0
    b78e:	b15a      	cbz	r2, b7a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    b790:	4621      	mov	r1, r4
    b792:	f891 1020 	ldrb.w	r1, [r1, #32]
    b796:	b163      	cbz	r3, b7b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    b798:	2b01      	cmp	r3, #1
    b79a:	d111      	bne.n	b7c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    b79c:	2a01      	cmp	r2, #1
    b79e:	4628      	mov	r0, r5
    b7a0:	d012      	beq.n	b7c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    b7a2:	f004 ffa7 	bl	106f4 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b7a6:	e009      	b.n	b7bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b7a8:	f640 0153 	movw	r1, #2131	; 0x853
    b7ac:	203e      	movs	r0, #62	; 0x3e
    b7ae:	f7f8 fedd 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7b2:	2a01      	cmp	r2, #1
    b7b4:	4628      	mov	r0, r5
    b7b6:	d004      	beq.n	b7c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    b7b8:	f004 ffaa 	bl	10710 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b7bc:	69e1      	ldr	r1, [r4, #28]
    b7be:	4408      	add	r0, r1
    b7c0:	bd70      	pop	{r4, r5, r6, pc}
    b7c2:	f000 f8d1 	bl	b968 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b7c6:	e7f9      	b.n	b7bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b7c8:	f000 f8c0 	bl	b94c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b7cc:	e7f6      	b.n	b7bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b7ce:	0000      	.short	0x0000
    b7d0:	20001468 	.word	0x20001468
    b7d4:	b510      	push	{r4, lr}
    b7d6:	f7ff fc07 	bl	afe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b7da:	f7ff fded 	bl	b3b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b7de:	f7ff fe23 	bl	b428 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    b7e2:	f7ff ff53 	bl	b68c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    b7e6:	f000 fe34 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b7ea:	2800      	cmp	r0, #0
    b7ec:	d108      	bne.n	b800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b7ee:	f000 fe20 	bl	c432 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b7f2:	2800      	cmp	r0, #0
    b7f4:	d104      	bne.n	b800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b7f6:	4803      	ldr	r0, [pc, #12]	; (b804 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    b7f8:	6801      	ldr	r1, [r0, #0]
    b7fa:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b7fe:	6001      	str	r1, [r0, #0]
    b800:	bd10      	pop	{r4, pc}
    b802:	0000      	.short	0x0000
    b804:	40001568 	.word	0x40001568
    b808:	b510      	push	{r4, lr}
    b80a:	4604      	mov	r4, r0
    b80c:	f7ff fbec 	bl	afe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b810:	f7ff fdd2 	bl	b3b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b814:	4620      	mov	r0, r4
    b816:	f7ff fded 	bl	b3f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    b81a:	f000 fe1a 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b81e:	2800      	cmp	r0, #0
    b820:	d00d      	beq.n	b83e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    b822:	4a09      	ldr	r2, [pc, #36]	; (b848 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    b824:	6811      	ldr	r1, [r2, #0]
    b826:	0650      	lsls	r0, r2, #25
    b828:	2c02      	cmp	r4, #2
    b82a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b82e:	d007      	beq.n	b840 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    b830:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b834:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b838:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b83c:	6010      	str	r0, [r2, #0]
    b83e:	bd10      	pop	{r4, pc}
    b840:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b844:	e7f6      	b.n	b834 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    b846:	0000      	.short	0x0000
    b848:	40001588 	.word	0x40001588
    b84c:	a62c0000 	.word	0xa62c0000
    b850:	0604a1e0 	.word	0x0604a1e0
    b854:	0e0c0a08 	.word	0x0e0c0a08
    b858:	16141210 	.word	0x16141210
    b85c:	201e1c18 	.word	0x201e1c18
    b860:	28262422 	.word	0x28262422
    b864:	302e2c2a 	.word	0x302e2c2a
    b868:	38363432 	.word	0x38363432
    b86c:	403e3c3a 	.word	0x403e3c3a
    b870:	48464442 	.word	0x48464442
    b874:	024e4c4a 	.word	0x024e4c4a
    b878:	0000501a 	.word	0x0000501a
    b87c:	00000001 	.word	0x00000001
    b880:	40001110 	.word	0x40001110
	...
    b898:	00001e14 	.word	0x00001e14
    b89c:	00001130 	.word	0x00001130
    b8a0:	00000000 	.word	0x00000000
    b8a4:	00000028 	.word	0x00000028
    b8a8:	00000018 	.word	0x00000018
    b8ac:	00000000 	.word	0x00000000
    b8b0:	00001e14 	.word	0x00001e14
    b8b4:	00001130 	.word	0x00001130
    b8b8:	00000000 	.word	0x00000000
    b8bc:	00001770 	.word	0x00001770
    b8c0:	00000fa0 	.word	0x00000fa0

0000b8c4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    b8c4:	b570      	push	{r4, r5, r6, lr}
    b8c6:	4605      	mov	r5, r0
    b8c8:	4614      	mov	r4, r2
    b8ca:	4608      	mov	r0, r1
    b8cc:	f7ff fbb2 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    b8d0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    b8d4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    b8d8:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    b8dc:	4807      	ldr	r0, [pc, #28]	; (b8fc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    b8de:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    b8e2:	4408      	add	r0, r1
    b8e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b8e8:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    b8ec:	fbb0 f5f1 	udiv	r5, r0, r1
    b8f0:	4620      	mov	r0, r4
    b8f2:	f7ff fb73 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b8f6:	4428      	add	r0, r5
    b8f8:	1d40      	adds	r0, r0, #5
    b8fa:	bd70      	pop	{r4, r5, r6, pc}
    b8fc:	0000b98c 	.word	0x0000b98c

0000b900 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    b900:	b570      	push	{r4, r5, r6, lr}
    b902:	4d0e      	ldr	r5, [pc, #56]	; (b93c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    b904:	461c      	mov	r4, r3
    b906:	3d08      	subs	r5, #8
    b908:	4b0c      	ldr	r3, [pc, #48]	; (b93c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    b90a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    b90e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    b912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b916:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    b91a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    b91e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    b922:	4418      	add	r0, r3
    b924:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b928:	fbb0 f5f1 	udiv	r5, r0, r1
    b92c:	4610      	mov	r0, r2
    b92e:	f7ff fb55 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b932:	4428      	add	r0, r5
    b934:	4420      	add	r0, r4
    b936:	1d40      	adds	r0, r0, #5
    b938:	bd70      	pop	{r4, r5, r6, pc}
    b93a:	0000      	.short	0x0000
    b93c:	0000b98c 	.word	0x0000b98c

0000b940 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b940:	4901      	ldr	r1, [pc, #4]	; (b948 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b942:	b2c0      	uxtb	r0, r0
    b944:	6008      	str	r0, [r1, #0]
    b946:	4770      	bx	lr
    b948:	4000150c 	.word	0x4000150c

0000b94c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    b94c:	4a05      	ldr	r2, [pc, #20]	; (b964 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    b94e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    b952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b956:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    b95a:	fbb1 f1f2 	udiv	r1, r1, r2
    b95e:	4408      	add	r0, r1
    b960:	1e80      	subs	r0, r0, #2
    b962:	4770      	bx	lr
    b964:	0000b984 	.word	0x0000b984

0000b968 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    b968:	4a05      	ldr	r2, [pc, #20]	; (b980 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    b96a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    b96e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b972:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    b976:	fbb1 f1f2 	udiv	r1, r1, r2
    b97a:	4408      	add	r0, r1
    b97c:	4770      	bx	lr
    b97e:	0000      	.short	0x0000
    b980:	0000b984 	.word	0x0000b984
    b984:	05dc0000 	.word	0x05dc0000
    b988:	000003e8 	.word	0x000003e8
    b98c:	00000000 	.word	0x00000000
    b990:	00001e14 	.word	0x00001e14
    b994:	00001130 	.word	0x00001130

0000b998 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    b998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b99c:	461e      	mov	r6, r3
    b99e:	4617      	mov	r7, r2
    b9a0:	460c      	mov	r4, r1
    b9a2:	4605      	mov	r5, r0
    b9a4:	f7f4 ff08 	bl	7b8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    b9a8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba50 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    b9ac:	4680      	mov	r8, r0
    b9ae:	f899 0000 	ldrb.w	r0, [r9]
    b9b2:	42a8      	cmp	r0, r5
    b9b4:	d110      	bne.n	b9d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b9b6:	f899 1001 	ldrb.w	r1, [r9, #1]
    b9ba:	4648      	mov	r0, r9
    b9bc:	42a1      	cmp	r1, r4
    b9be:	d10b      	bne.n	b9d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b9c0:	f990 1002 	ldrsb.w	r1, [r0, #2]
    b9c4:	42b9      	cmp	r1, r7
    b9c6:	d107      	bne.n	b9d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b9c8:	78c2      	ldrb	r2, [r0, #3]
    b9ca:	4542      	cmp	r2, r8
    b9cc:	d104      	bne.n	b9d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b9ce:	8881      	ldrh	r1, [r0, #4]
    b9d0:	8031      	strh	r1, [r6, #0]
    b9d2:	7980      	ldrb	r0, [r0, #6]
    b9d4:	70b0      	strb	r0, [r6, #2]
    b9d6:	e036      	b.n	ba46 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    b9d8:	463a      	mov	r2, r7
    b9da:	4621      	mov	r1, r4
    b9dc:	2d01      	cmp	r5, #1
    b9de:	d009      	beq.n	b9f4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    b9e0:	2d02      	cmp	r5, #2
    b9e2:	d009      	beq.n	b9f8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    b9e4:	2d04      	cmp	r5, #4
    b9e6:	d009      	beq.n	b9fc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    b9e8:	2d08      	cmp	r5, #8
    b9ea:	d009      	beq.n	ba00 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    b9ec:	f240 415a 	movw	r1, #1114	; 0x45a
    b9f0:	2006      	movs	r0, #6
    b9f2:	e00c      	b.n	ba0e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    b9f4:	2000      	movs	r0, #0
    b9f6:	e004      	b.n	ba02 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    b9f8:	2001      	movs	r0, #1
    b9fa:	e002      	b.n	ba02 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    b9fc:	2003      	movs	r0, #3
    b9fe:	e000      	b.n	ba02 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    ba00:	2002      	movs	r0, #2
    ba02:	466b      	mov	r3, sp
    ba04:	f7f4 ff28 	bl	858 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    ba08:	b118      	cbz	r0, ba12 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    ba0a:	213d      	movs	r1, #61	; 0x3d
    ba0c:	2075      	movs	r0, #117	; 0x75
    ba0e:	f7f8 fdad 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba12:	4620      	mov	r0, r4
    ba14:	f7ff f88a 	bl	ab2c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    ba18:	4602      	mov	r2, r0
    ba1a:	4631      	mov	r1, r6
    ba1c:	f99d 0000 	ldrsb.w	r0, [sp]
    ba20:	f7f8 fc86 	bl	4330 <mpsl_fem_tx_power_split>
    ba24:	4601      	mov	r1, r0
    ba26:	f889 1007 	strb.w	r1, [r9, #7]
    ba2a:	8831      	ldrh	r1, [r6, #0]
    ba2c:	f8a9 1004 	strh.w	r1, [r9, #4]
    ba30:	78b1      	ldrb	r1, [r6, #2]
    ba32:	f889 1006 	strb.w	r1, [r9, #6]
    ba36:	f889 5000 	strb.w	r5, [r9]
    ba3a:	f889 4001 	strb.w	r4, [r9, #1]
    ba3e:	f889 7002 	strb.w	r7, [r9, #2]
    ba42:	f889 8003 	strb.w	r8, [r9, #3]
    ba46:	f999 0007 	ldrsb.w	r0, [r9, #7]
    ba4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba4e:	0000      	.short	0x0000
    ba50:	20000372 	.word	0x20000372

0000ba54 <__udivmoddi4>:
    ba54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba58:	4686      	mov	lr, r0
    ba5a:	468c      	mov	ip, r1
    ba5c:	4608      	mov	r0, r1
    ba5e:	9e08      	ldr	r6, [sp, #32]
    ba60:	4615      	mov	r5, r2
    ba62:	4674      	mov	r4, lr
    ba64:	4619      	mov	r1, r3
    ba66:	2b00      	cmp	r3, #0
    ba68:	f040 80c2 	bne.w	bbf0 <__udivmoddi4+0x19c>
    ba6c:	4285      	cmp	r5, r0
    ba6e:	fab2 f282 	clz	r2, r2
    ba72:	d945      	bls.n	bb00 <__udivmoddi4+0xac>
    ba74:	b14a      	cbz	r2, ba8a <__udivmoddi4+0x36>
    ba76:	f1c2 0320 	rsb	r3, r2, #32
    ba7a:	fa00 fc02 	lsl.w	ip, r0, r2
    ba7e:	fa2e f303 	lsr.w	r3, lr, r3
    ba82:	4095      	lsls	r5, r2
    ba84:	ea43 0c0c 	orr.w	ip, r3, ip
    ba88:	4094      	lsls	r4, r2
    ba8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ba8e:	b2a8      	uxth	r0, r5
    ba90:	fbbc f8fe 	udiv	r8, ip, lr
    ba94:	0c23      	lsrs	r3, r4, #16
    ba96:	fb0e cc18 	mls	ip, lr, r8, ip
    ba9a:	fb08 f900 	mul.w	r9, r8, r0
    ba9e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    baa2:	4599      	cmp	r9, r3
    baa4:	d928      	bls.n	baf8 <__udivmoddi4+0xa4>
    baa6:	18eb      	adds	r3, r5, r3
    baa8:	f108 37ff 	add.w	r7, r8, #4294967295
    baac:	d204      	bcs.n	bab8 <__udivmoddi4+0x64>
    baae:	4599      	cmp	r9, r3
    bab0:	d902      	bls.n	bab8 <__udivmoddi4+0x64>
    bab2:	f1a8 0702 	sub.w	r7, r8, #2
    bab6:	442b      	add	r3, r5
    bab8:	eba3 0309 	sub.w	r3, r3, r9
    babc:	b2a4      	uxth	r4, r4
    babe:	fbb3 fcfe 	udiv	ip, r3, lr
    bac2:	fb0e 331c 	mls	r3, lr, ip, r3
    bac6:	fb0c f000 	mul.w	r0, ip, r0
    baca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    bace:	42a0      	cmp	r0, r4
    bad0:	d914      	bls.n	bafc <__udivmoddi4+0xa8>
    bad2:	192c      	adds	r4, r5, r4
    bad4:	f10c 33ff 	add.w	r3, ip, #4294967295
    bad8:	d204      	bcs.n	bae4 <__udivmoddi4+0x90>
    bada:	42a0      	cmp	r0, r4
    badc:	d902      	bls.n	bae4 <__udivmoddi4+0x90>
    bade:	f1ac 0302 	sub.w	r3, ip, #2
    bae2:	442c      	add	r4, r5
    bae4:	1a24      	subs	r4, r4, r0
    bae6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    baea:	b11e      	cbz	r6, baf4 <__udivmoddi4+0xa0>
    baec:	40d4      	lsrs	r4, r2
    baee:	2300      	movs	r3, #0
    baf0:	6034      	str	r4, [r6, #0]
    baf2:	6073      	str	r3, [r6, #4]
    baf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    baf8:	4647      	mov	r7, r8
    bafa:	e7dd      	b.n	bab8 <__udivmoddi4+0x64>
    bafc:	4663      	mov	r3, ip
    bafe:	e7f1      	b.n	bae4 <__udivmoddi4+0x90>
    bb00:	bb92      	cbnz	r2, bb68 <__udivmoddi4+0x114>
    bb02:	1b43      	subs	r3, r0, r5
    bb04:	2101      	movs	r1, #1
    bb06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    bb0a:	b2af      	uxth	r7, r5
    bb0c:	fbb3 fcfe 	udiv	ip, r3, lr
    bb10:	0c20      	lsrs	r0, r4, #16
    bb12:	fb0e 331c 	mls	r3, lr, ip, r3
    bb16:	fb0c f807 	mul.w	r8, ip, r7
    bb1a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    bb1e:	4598      	cmp	r8, r3
    bb20:	d962      	bls.n	bbe8 <__udivmoddi4+0x194>
    bb22:	18eb      	adds	r3, r5, r3
    bb24:	f10c 30ff 	add.w	r0, ip, #4294967295
    bb28:	d204      	bcs.n	bb34 <__udivmoddi4+0xe0>
    bb2a:	4598      	cmp	r8, r3
    bb2c:	d902      	bls.n	bb34 <__udivmoddi4+0xe0>
    bb2e:	f1ac 0002 	sub.w	r0, ip, #2
    bb32:	442b      	add	r3, r5
    bb34:	eba3 0308 	sub.w	r3, r3, r8
    bb38:	b2a4      	uxth	r4, r4
    bb3a:	fbb3 fcfe 	udiv	ip, r3, lr
    bb3e:	fb0e 331c 	mls	r3, lr, ip, r3
    bb42:	fb0c f707 	mul.w	r7, ip, r7
    bb46:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    bb4a:	42a7      	cmp	r7, r4
    bb4c:	d94e      	bls.n	bbec <__udivmoddi4+0x198>
    bb4e:	192c      	adds	r4, r5, r4
    bb50:	f10c 33ff 	add.w	r3, ip, #4294967295
    bb54:	d204      	bcs.n	bb60 <__udivmoddi4+0x10c>
    bb56:	42a7      	cmp	r7, r4
    bb58:	d902      	bls.n	bb60 <__udivmoddi4+0x10c>
    bb5a:	f1ac 0302 	sub.w	r3, ip, #2
    bb5e:	442c      	add	r4, r5
    bb60:	1be4      	subs	r4, r4, r7
    bb62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    bb66:	e7c0      	b.n	baea <__udivmoddi4+0x96>
    bb68:	f1c2 0320 	rsb	r3, r2, #32
    bb6c:	fa20 f103 	lsr.w	r1, r0, r3
    bb70:	4095      	lsls	r5, r2
    bb72:	4090      	lsls	r0, r2
    bb74:	fa2e f303 	lsr.w	r3, lr, r3
    bb78:	4303      	orrs	r3, r0
    bb7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    bb7e:	b2af      	uxth	r7, r5
    bb80:	fbb1 fcfe 	udiv	ip, r1, lr
    bb84:	fb0e 101c 	mls	r0, lr, ip, r1
    bb88:	0c19      	lsrs	r1, r3, #16
    bb8a:	fb0c f807 	mul.w	r8, ip, r7
    bb8e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    bb92:	4588      	cmp	r8, r1
    bb94:	fa04 f402 	lsl.w	r4, r4, r2
    bb98:	d922      	bls.n	bbe0 <__udivmoddi4+0x18c>
    bb9a:	1869      	adds	r1, r5, r1
    bb9c:	f10c 30ff 	add.w	r0, ip, #4294967295
    bba0:	d204      	bcs.n	bbac <__udivmoddi4+0x158>
    bba2:	4588      	cmp	r8, r1
    bba4:	d902      	bls.n	bbac <__udivmoddi4+0x158>
    bba6:	f1ac 0002 	sub.w	r0, ip, #2
    bbaa:	4429      	add	r1, r5
    bbac:	eba1 0108 	sub.w	r1, r1, r8
    bbb0:	b29b      	uxth	r3, r3
    bbb2:	fbb1 fcfe 	udiv	ip, r1, lr
    bbb6:	fb0e 111c 	mls	r1, lr, ip, r1
    bbba:	fb0c f707 	mul.w	r7, ip, r7
    bbbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    bbc2:	429f      	cmp	r7, r3
    bbc4:	d90e      	bls.n	bbe4 <__udivmoddi4+0x190>
    bbc6:	18eb      	adds	r3, r5, r3
    bbc8:	f10c 31ff 	add.w	r1, ip, #4294967295
    bbcc:	d204      	bcs.n	bbd8 <__udivmoddi4+0x184>
    bbce:	429f      	cmp	r7, r3
    bbd0:	d902      	bls.n	bbd8 <__udivmoddi4+0x184>
    bbd2:	f1ac 0102 	sub.w	r1, ip, #2
    bbd6:	442b      	add	r3, r5
    bbd8:	1bdb      	subs	r3, r3, r7
    bbda:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    bbde:	e792      	b.n	bb06 <__udivmoddi4+0xb2>
    bbe0:	4660      	mov	r0, ip
    bbe2:	e7e3      	b.n	bbac <__udivmoddi4+0x158>
    bbe4:	4661      	mov	r1, ip
    bbe6:	e7f7      	b.n	bbd8 <__udivmoddi4+0x184>
    bbe8:	4660      	mov	r0, ip
    bbea:	e7a3      	b.n	bb34 <__udivmoddi4+0xe0>
    bbec:	4663      	mov	r3, ip
    bbee:	e7b7      	b.n	bb60 <__udivmoddi4+0x10c>
    bbf0:	4283      	cmp	r3, r0
    bbf2:	d906      	bls.n	bc02 <__udivmoddi4+0x1ae>
    bbf4:	b916      	cbnz	r6, bbfc <__udivmoddi4+0x1a8>
    bbf6:	2100      	movs	r1, #0
    bbf8:	4608      	mov	r0, r1
    bbfa:	e77b      	b.n	baf4 <__udivmoddi4+0xa0>
    bbfc:	e9c6 e000 	strd	lr, r0, [r6]
    bc00:	e7f9      	b.n	bbf6 <__udivmoddi4+0x1a2>
    bc02:	fab3 f783 	clz	r7, r3
    bc06:	b98f      	cbnz	r7, bc2c <__udivmoddi4+0x1d8>
    bc08:	4283      	cmp	r3, r0
    bc0a:	d301      	bcc.n	bc10 <__udivmoddi4+0x1bc>
    bc0c:	4572      	cmp	r2, lr
    bc0e:	d808      	bhi.n	bc22 <__udivmoddi4+0x1ce>
    bc10:	ebbe 0402 	subs.w	r4, lr, r2
    bc14:	eb60 0303 	sbc.w	r3, r0, r3
    bc18:	2001      	movs	r0, #1
    bc1a:	469c      	mov	ip, r3
    bc1c:	b91e      	cbnz	r6, bc26 <__udivmoddi4+0x1d2>
    bc1e:	2100      	movs	r1, #0
    bc20:	e768      	b.n	baf4 <__udivmoddi4+0xa0>
    bc22:	4638      	mov	r0, r7
    bc24:	e7fa      	b.n	bc1c <__udivmoddi4+0x1c8>
    bc26:	e9c6 4c00 	strd	r4, ip, [r6]
    bc2a:	e7f8      	b.n	bc1e <__udivmoddi4+0x1ca>
    bc2c:	f1c7 0c20 	rsb	ip, r7, #32
    bc30:	40bb      	lsls	r3, r7
    bc32:	fa22 f40c 	lsr.w	r4, r2, ip
    bc36:	431c      	orrs	r4, r3
    bc38:	fa2e f10c 	lsr.w	r1, lr, ip
    bc3c:	fa20 f30c 	lsr.w	r3, r0, ip
    bc40:	40b8      	lsls	r0, r7
    bc42:	4301      	orrs	r1, r0
    bc44:	ea4f 4914 	mov.w	r9, r4, lsr #16
    bc48:	fa0e f507 	lsl.w	r5, lr, r7
    bc4c:	fbb3 f8f9 	udiv	r8, r3, r9
    bc50:	fa1f fe84 	uxth.w	lr, r4
    bc54:	fb09 3018 	mls	r0, r9, r8, r3
    bc58:	0c0b      	lsrs	r3, r1, #16
    bc5a:	fb08 fa0e 	mul.w	sl, r8, lr
    bc5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    bc62:	459a      	cmp	sl, r3
    bc64:	fa02 f207 	lsl.w	r2, r2, r7
    bc68:	d940      	bls.n	bcec <__udivmoddi4+0x298>
    bc6a:	18e3      	adds	r3, r4, r3
    bc6c:	f108 30ff 	add.w	r0, r8, #4294967295
    bc70:	d204      	bcs.n	bc7c <__udivmoddi4+0x228>
    bc72:	459a      	cmp	sl, r3
    bc74:	d902      	bls.n	bc7c <__udivmoddi4+0x228>
    bc76:	f1a8 0002 	sub.w	r0, r8, #2
    bc7a:	4423      	add	r3, r4
    bc7c:	eba3 030a 	sub.w	r3, r3, sl
    bc80:	b289      	uxth	r1, r1
    bc82:	fbb3 f8f9 	udiv	r8, r3, r9
    bc86:	fb09 3318 	mls	r3, r9, r8, r3
    bc8a:	fb08 fe0e 	mul.w	lr, r8, lr
    bc8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    bc92:	458e      	cmp	lr, r1
    bc94:	d92c      	bls.n	bcf0 <__udivmoddi4+0x29c>
    bc96:	1861      	adds	r1, r4, r1
    bc98:	f108 33ff 	add.w	r3, r8, #4294967295
    bc9c:	d204      	bcs.n	bca8 <__udivmoddi4+0x254>
    bc9e:	458e      	cmp	lr, r1
    bca0:	d902      	bls.n	bca8 <__udivmoddi4+0x254>
    bca2:	f1a8 0302 	sub.w	r3, r8, #2
    bca6:	4421      	add	r1, r4
    bca8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    bcac:	fba0 9802 	umull	r9, r8, r0, r2
    bcb0:	eba1 010e 	sub.w	r1, r1, lr
    bcb4:	4541      	cmp	r1, r8
    bcb6:	46ce      	mov	lr, r9
    bcb8:	4643      	mov	r3, r8
    bcba:	d302      	bcc.n	bcc2 <__udivmoddi4+0x26e>
    bcbc:	d106      	bne.n	bccc <__udivmoddi4+0x278>
    bcbe:	454d      	cmp	r5, r9
    bcc0:	d204      	bcs.n	bccc <__udivmoddi4+0x278>
    bcc2:	ebb9 0e02 	subs.w	lr, r9, r2
    bcc6:	eb68 0304 	sbc.w	r3, r8, r4
    bcca:	3801      	subs	r0, #1
    bccc:	2e00      	cmp	r6, #0
    bcce:	d0a6      	beq.n	bc1e <__udivmoddi4+0x1ca>
    bcd0:	ebb5 020e 	subs.w	r2, r5, lr
    bcd4:	eb61 0103 	sbc.w	r1, r1, r3
    bcd8:	fa01 fc0c 	lsl.w	ip, r1, ip
    bcdc:	fa22 f307 	lsr.w	r3, r2, r7
    bce0:	ea4c 0303 	orr.w	r3, ip, r3
    bce4:	40f9      	lsrs	r1, r7
    bce6:	e9c6 3100 	strd	r3, r1, [r6]
    bcea:	e798      	b.n	bc1e <__udivmoddi4+0x1ca>
    bcec:	4640      	mov	r0, r8
    bcee:	e7c5      	b.n	bc7c <__udivmoddi4+0x228>
    bcf0:	4643      	mov	r3, r8
    bcf2:	e7d9      	b.n	bca8 <__udivmoddi4+0x254>
    bcf4:	2804      	cmp	r0, #4
    bcf6:	d202      	bcs.n	bcfe <__udivmoddi4+0x2aa>
    bcf8:	f04f 0028 	mov.w	r0, #40	; 0x28
    bcfc:	4770      	bx	lr
    bcfe:	d102      	bne.n	bd06 <__udivmoddi4+0x2b2>
    bd00:	f04f 0010 	mov.w	r0, #16
    bd04:	4770      	bx	lr
    bd06:	f04f 0000 	mov.w	r0, #0
    bd0a:	4770      	bx	lr
    bd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd10:	000d      	movs	r5, r1
    bd12:	4604      	mov	r4, r0
    bd14:	f04f 0602 	mov.w	r6, #2
    bd18:	f04f 0701 	mov.w	r7, #1
    bd1c:	d008      	beq.n	bd30 <__udivmoddi4+0x2dc>
    bd1e:	7828      	ldrb	r0, [r5, #0]
    bd20:	b1d0      	cbz	r0, bd58 <__udivmoddi4+0x304>
    bd22:	2801      	cmp	r0, #1
    bd24:	d007      	beq.n	bd36 <__udivmoddi4+0x2e2>
    bd26:	2802      	cmp	r0, #2
    bd28:	d014      	beq.n	bd54 <__udivmoddi4+0x300>
    bd2a:	2803      	cmp	r0, #3
    bd2c:	d13e      	bne.n	bdac <__udivmoddi4+0x358>
    bd2e:	e016      	b.n	bd5e <__udivmoddi4+0x30a>
    bd30:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    bd34:	e00e      	b.n	bd54 <__udivmoddi4+0x300>
    bd36:	6868      	ldr	r0, [r5, #4]
    bd38:	28c8      	cmp	r0, #200	; 0xc8
    bd3a:	d303      	bcc.n	bd44 <__udivmoddi4+0x2f0>
    bd3c:	2103      	movs	r1, #3
    bd3e:	f7f5 fe9b 	bl	1a78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    bd42:	b108      	cbz	r0, bd48 <__udivmoddi4+0x2f4>
    bd44:	2600      	movs	r6, #0
    bd46:	e007      	b.n	bd58 <__udivmoddi4+0x304>
    bd48:	4620      	mov	r0, r4
    bd4a:	6869      	ldr	r1, [r5, #4]
    bd4c:	f000 f943 	bl	bfd6 <__udivmoddi4+0x582>
    bd50:	2601      	movs	r6, #1
    bd52:	e001      	b.n	bd58 <__udivmoddi4+0x304>
    bd54:	f7f4 fdce 	bl	8f4 <CONFIG_BT_RX_STACK_SIZE+0x5c>
    bd58:	4630      	mov	r0, r6
    bd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd5e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    bd62:	2800      	cmp	r0, #0
    bd64:	d1f6      	bne.n	bd54 <__udivmoddi4+0x300>
    bd66:	6868      	ldr	r0, [r5, #4]
    bd68:	f7f4 fd96 	bl	898 <CONFIG_BT_RX_STACK_SIZE>
    bd6c:	b1f0      	cbz	r0, bdac <__udivmoddi4+0x358>
    bd6e:	6869      	ldr	r1, [r5, #4]
    bd70:	7808      	ldrb	r0, [r1, #0]
    bd72:	b130      	cbz	r0, bd82 <__udivmoddi4+0x32e>
    bd74:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bd78:	2805      	cmp	r0, #5
    bd7a:	d008      	beq.n	bd8e <__udivmoddi4+0x33a>
    bd7c:	f44f 71be 	mov.w	r1, #380	; 0x17c
    bd80:	e011      	b.n	bda6 <__udivmoddi4+0x352>
    bd82:	4620      	mov	r0, r4
    bd84:	f000 f92f 	bl	bfe6 <__udivmoddi4+0x592>
    bd88:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    bd8c:	e7e2      	b.n	bd54 <__udivmoddi4+0x300>
    bd8e:	4620      	mov	r0, r4
    bd90:	f000 f942 	bl	c018 <__udivmoddi4+0x5c4>
    bd94:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    bd98:	4621      	mov	r1, r4
    bd9a:	f000 f80a 	bl	bdb2 <__udivmoddi4+0x35e>
    bd9e:	2800      	cmp	r0, #0
    bda0:	d1d8      	bne.n	bd54 <__udivmoddi4+0x300>
    bda2:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    bda6:	206a      	movs	r0, #106	; 0x6a
    bda8:	f7f8 f902 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bdac:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    bdb0:	e7d0      	b.n	bd54 <__udivmoddi4+0x300>
    bdb2:	f7f6 b847 	b.w	1e44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    bdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdba:	460d      	mov	r5, r1
    bdbc:	0004      	movs	r4, r0
    bdbe:	d00c      	beq.n	bdda <__udivmoddi4+0x386>
    bdc0:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    bdc4:	2700      	movs	r7, #0
    bdc6:	2002      	movs	r0, #2
    bdc8:	2d09      	cmp	r5, #9
    bdca:	d270      	bcs.n	beae <__udivmoddi4+0x45a>
    bdcc:	e8df f005 	tbb	[pc, r5]
    bdd0:	35351108 	.word	0x35351108
    bdd4:	a5887065 	.word	0xa5887065
    bdd8:	0093      	.short	0x0093
    bdda:	f44f 71cb 	mov.w	r1, #406	; 0x196
    bdde:	e0f7      	b.n	bfd0 <__udivmoddi4+0x57c>
    bde0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bde4:	2804      	cmp	r0, #4
    bde6:	d07a      	beq.n	bede <__udivmoddi4+0x48a>
    bde8:	2803      	cmp	r0, #3
    bdea:	d0fc      	beq.n	bde6 <__udivmoddi4+0x392>
    bdec:	f240 11a1 	movw	r1, #417	; 0x1a1
    bdf0:	e0ee      	b.n	bfd0 <__udivmoddi4+0x57c>
    bdf2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bdf6:	2804      	cmp	r0, #4
    bdf8:	d004      	beq.n	be04 <__udivmoddi4+0x3b0>
    bdfa:	2803      	cmp	r0, #3
    bdfc:	d002      	beq.n	be04 <__udivmoddi4+0x3b0>
    bdfe:	f240 11a5 	movw	r1, #421	; 0x1a5
    be02:	e0e5      	b.n	bfd0 <__udivmoddi4+0x57c>
    be04:	2005      	movs	r0, #5
    be06:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    be0a:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    be0e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    be12:	bbb0      	cbnz	r0, be82 <__udivmoddi4+0x42e>
    be14:	2100      	movs	r1, #0
    be16:	4620      	mov	r0, r4
    be18:	f000 f8dd 	bl	bfd6 <__udivmoddi4+0x582>
    be1c:	7820      	ldrb	r0, [r4, #0]
    be1e:	2801      	cmp	r0, #1
    be20:	d006      	beq.n	be30 <__udivmoddi4+0x3dc>
    be22:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    be26:	e9c4 0106 	strd	r0, r1, [r4, #24]
    be2a:	2100      	movs	r1, #0
    be2c:	6a22      	ldr	r2, [r4, #32]
    be2e:	e048      	b.n	bec2 <__udivmoddi4+0x46e>
    be30:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    be34:	f7f5 ff0e 	bl	1c54 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    be38:	e7f5      	b.n	be26 <__udivmoddi4+0x3d2>
    be3a:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    be3e:	2904      	cmp	r1, #4
    be40:	d004      	beq.n	be4c <__udivmoddi4+0x3f8>
    be42:	2903      	cmp	r1, #3
    be44:	d002      	beq.n	be4c <__udivmoddi4+0x3f8>
    be46:	f240 11c3 	movw	r1, #451	; 0x1c3
    be4a:	e0c1      	b.n	bfd0 <__udivmoddi4+0x57c>
    be4c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    be50:	b122      	cbz	r2, be5c <__udivmoddi4+0x408>
    be52:	4621      	mov	r1, r4
    be54:	4630      	mov	r0, r6
    be56:	f000 f8fe 	bl	c056 <__udivmoddi4+0x602>
    be5a:	e0b1      	b.n	bfc0 <__udivmoddi4+0x56c>
    be5c:	2904      	cmp	r1, #4
    be5e:	d000      	beq.n	be62 <__udivmoddi4+0x40e>
    be60:	2001      	movs	r0, #1
    be62:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    be66:	6a22      	ldr	r2, [r4, #32]
    be68:	2d02      	cmp	r5, #2
    be6a:	d00b      	beq.n	be84 <__udivmoddi4+0x430>
    be6c:	2106      	movs	r1, #6
    be6e:	4630      	mov	r0, r6
    be70:	4790      	blx	r2
    be72:	2800      	cmp	r0, #0
    be74:	d06d      	beq.n	bf52 <__udivmoddi4+0x4fe>
    be76:	7800      	ldrb	r0, [r0, #0]
    be78:	2800      	cmp	r0, #0
    be7a:	d06a      	beq.n	bf52 <__udivmoddi4+0x4fe>
    be7c:	f240 11dd 	movw	r1, #477	; 0x1dd
    be80:	e0a6      	b.n	bfd0 <__udivmoddi4+0x57c>
    be82:	e034      	b.n	beee <__udivmoddi4+0x49a>
    be84:	2105      	movs	r1, #5
    be86:	4630      	mov	r0, r6
    be88:	4790      	blx	r2
    be8a:	2800      	cmp	r0, #0
    be8c:	d07c      	beq.n	bf88 <__udivmoddi4+0x534>
    be8e:	7800      	ldrb	r0, [r0, #0]
    be90:	2800      	cmp	r0, #0
    be92:	d079      	beq.n	bf88 <__udivmoddi4+0x534>
    be94:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    be98:	e09a      	b.n	bfd0 <__udivmoddi4+0x57c>
    be9a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    be9e:	2805      	cmp	r0, #5
    bea0:	d002      	beq.n	bea8 <__udivmoddi4+0x454>
    bea2:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    bea6:	e093      	b.n	bfd0 <__udivmoddi4+0x57c>
    bea8:	2102      	movs	r1, #2
    beaa:	6a22      	ldr	r2, [r4, #32]
    beac:	e009      	b.n	bec2 <__udivmoddi4+0x46e>
    beae:	e07e      	b.n	bfae <__udivmoddi4+0x55a>
    beb0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    beb4:	2805      	cmp	r0, #5
    beb6:	d002      	beq.n	bebe <__udivmoddi4+0x46a>
    beb8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    bebc:	e088      	b.n	bfd0 <__udivmoddi4+0x57c>
    bebe:	6a22      	ldr	r2, [r4, #32]
    bec0:	2101      	movs	r1, #1
    bec2:	4630      	mov	r0, r6
    bec4:	4790      	blx	r2
    bec6:	4601      	mov	r1, r0
    bec8:	4620      	mov	r0, r4
    beca:	f7ff ff1f 	bl	bd0c <__udivmoddi4+0x2b8>
    bece:	2802      	cmp	r0, #2
    bed0:	d076      	beq.n	bfc0 <__udivmoddi4+0x56c>
    bed2:	b3e8      	cbz	r0, bf50 <__udivmoddi4+0x4fc>
    bed4:	2801      	cmp	r0, #1
    bed6:	d06d      	beq.n	bfb4 <__udivmoddi4+0x560>
    bed8:	f240 212a 	movw	r1, #554	; 0x22a
    bedc:	e078      	b.n	bfd0 <__udivmoddi4+0x57c>
    bede:	e071      	b.n	bfc4 <__udivmoddi4+0x570>
    bee0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bee4:	2805      	cmp	r0, #5
    bee6:	d002      	beq.n	beee <__udivmoddi4+0x49a>
    bee8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    beec:	e070      	b.n	bfd0 <__udivmoddi4+0x57c>
    beee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bef2:	f7f4 bcff 	b.w	8f4 <CONFIG_BT_RX_STACK_SIZE+0x5c>
    bef6:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    befa:	2805      	cmp	r0, #5
    befc:	d002      	beq.n	bf04 <__udivmoddi4+0x4b0>
    befe:	f240 11f5 	movw	r1, #501	; 0x1f5
    bf02:	e065      	b.n	bfd0 <__udivmoddi4+0x57c>
    bf04:	6a22      	ldr	r2, [r4, #32]
    bf06:	210a      	movs	r1, #10
    bf08:	4630      	mov	r0, r6
    bf0a:	4790      	blx	r2
    bf0c:	4601      	mov	r1, r0
    bf0e:	4620      	mov	r0, r4
    bf10:	f7ff fefc 	bl	bd0c <__udivmoddi4+0x2b8>
    bf14:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    bf18:	e05a      	b.n	bfd0 <__udivmoddi4+0x57c>
    bf1a:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    bf1e:	2905      	cmp	r1, #5
    bf20:	d007      	beq.n	bf32 <__udivmoddi4+0x4de>
    bf22:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    bf26:	b10a      	cbz	r2, bf2c <__udivmoddi4+0x4d8>
    bf28:	2903      	cmp	r1, #3
    bf2a:	d002      	beq.n	bf32 <__udivmoddi4+0x4de>
    bf2c:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    bf30:	e04e      	b.n	bfd0 <__udivmoddi4+0x57c>
    bf32:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    bf36:	b129      	cbz	r1, bf44 <__udivmoddi4+0x4f0>
    bf38:	4621      	mov	r1, r4
    bf3a:	4630      	mov	r0, r6
    bf3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bf40:	f000 b889 	b.w	c056 <__udivmoddi4+0x602>
    bf44:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    bf48:	b199      	cbz	r1, bf72 <__udivmoddi4+0x51e>
    bf4a:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    bf4e:	e001      	b.n	bf54 <__udivmoddi4+0x500>
    bf50:	e033      	b.n	bfba <__udivmoddi4+0x566>
    bf52:	e035      	b.n	bfc0 <__udivmoddi4+0x56c>
    bf54:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    bf58:	6a22      	ldr	r2, [r4, #32]
    bf5a:	2108      	movs	r1, #8
    bf5c:	4630      	mov	r0, r6
    bf5e:	4790      	blx	r2
    bf60:	2800      	cmp	r0, #0
    bf62:	d011      	beq.n	bf88 <__udivmoddi4+0x534>
    bf64:	7800      	ldrb	r0, [r0, #0]
    bf66:	2800      	cmp	r0, #0
    bf68:	d00e      	beq.n	bf88 <__udivmoddi4+0x534>
    bf6a:	f44f 7102 	mov.w	r1, #520	; 0x208
    bf6e:	e02f      	b.n	bfd0 <__udivmoddi4+0x57c>
    bf70:	e00a      	b.n	bf88 <__udivmoddi4+0x534>
    bf72:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    bf76:	b161      	cbz	r1, bf92 <__udivmoddi4+0x53e>
    bf78:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    bf7c:	4621      	mov	r1, r4
    bf7e:	f7ff ff18 	bl	bdb2 <__udivmoddi4+0x35e>
    bf82:	b118      	cbz	r0, bf8c <__udivmoddi4+0x538>
    bf84:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    bf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf8c:	f44f 7103 	mov.w	r1, #524	; 0x20c
    bf90:	e01e      	b.n	bfd0 <__udivmoddi4+0x57c>
    bf92:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    bf96:	6a22      	ldr	r2, [r4, #32]
    bf98:	2107      	movs	r1, #7
    bf9a:	4630      	mov	r0, r6
    bf9c:	4790      	blx	r2
    bf9e:	2800      	cmp	r0, #0
    bfa0:	d0f2      	beq.n	bf88 <__udivmoddi4+0x534>
    bfa2:	7800      	ldrb	r0, [r0, #0]
    bfa4:	2800      	cmp	r0, #0
    bfa6:	d0ef      	beq.n	bf88 <__udivmoddi4+0x534>
    bfa8:	f44f 7105 	mov.w	r1, #532	; 0x214
    bfac:	e010      	b.n	bfd0 <__udivmoddi4+0x57c>
    bfae:	f240 2119 	movw	r1, #537	; 0x219
    bfb2:	e00d      	b.n	bfd0 <__udivmoddi4+0x57c>
    bfb4:	2104      	movs	r1, #4
    bfb6:	6a22      	ldr	r2, [r4, #32]
    bfb8:	e783      	b.n	bec2 <__udivmoddi4+0x46e>
    bfba:	2103      	movs	r1, #3
    bfbc:	6a22      	ldr	r2, [r4, #32]
    bfbe:	e780      	b.n	bec2 <__udivmoddi4+0x46e>
    bfc0:	2d00      	cmp	r5, #0
    bfc2:	d1e1      	bne.n	bf88 <__udivmoddi4+0x534>
    bfc4:	f000 f8fd 	bl	c1c2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    bfc8:	2800      	cmp	r0, #0
    bfca:	d0dd      	beq.n	bf88 <__udivmoddi4+0x534>
    bfcc:	f240 2133 	movw	r1, #563	; 0x233
    bfd0:	206a      	movs	r0, #106	; 0x6a
    bfd2:	f7f7 ffed 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bfd6:	4602      	mov	r2, r0
    bfd8:	7803      	ldrb	r3, [r0, #0]
    bfda:	6840      	ldr	r0, [r0, #4]
    bfdc:	4408      	add	r0, r1
    bfde:	6050      	str	r0, [r2, #4]
    bfe0:	3859      	subs	r0, #89	; 0x59
    bfe2:	f7f6 be0f 	b.w	2c04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    bfe6:	2201      	movs	r2, #1
    bfe8:	7002      	strb	r2, [r0, #0]
    bfea:	2200      	movs	r2, #0
    bfec:	72c2      	strb	r2, [r0, #11]
    bfee:	790a      	ldrb	r2, [r1, #4]
    bff0:	b172      	cbz	r2, c010 <__udivmoddi4+0x5bc>
    bff2:	2200      	movs	r2, #0
    bff4:	8102      	strh	r2, [r0, #8]
    bff6:	794a      	ldrb	r2, [r1, #5]
    bff8:	b162      	cbz	r2, c014 <__udivmoddi4+0x5c0>
    bffa:	2203      	movs	r2, #3
    bffc:	7282      	strb	r2, [r0, #10]
    bffe:	688a      	ldr	r2, [r1, #8]
    c000:	326a      	adds	r2, #106	; 0x6a
    c002:	6042      	str	r2, [r0, #4]
    c004:	68c9      	ldr	r1, [r1, #12]
    c006:	6101      	str	r1, [r0, #16]
    c008:	2103      	movs	r1, #3
    c00a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    c00e:	4770      	bx	lr
    c010:	222b      	movs	r2, #43	; 0x2b
    c012:	e7ef      	b.n	bff4 <__udivmoddi4+0x5a0>
    c014:	2202      	movs	r2, #2
    c016:	e7f1      	b.n	bffc <__udivmoddi4+0x5a8>
    c018:	b510      	push	{r4, lr}
    c01a:	2200      	movs	r2, #0
    c01c:	7002      	strb	r2, [r0, #0]
    c01e:	72c2      	strb	r2, [r0, #11]
    c020:	790a      	ldrb	r2, [r1, #4]
    c022:	b1a2      	cbz	r2, c04e <__udivmoddi4+0x5fa>
    c024:	2200      	movs	r2, #0
    c026:	8102      	strh	r2, [r0, #8]
    c028:	794a      	ldrb	r2, [r1, #5]
    c02a:	b192      	cbz	r2, c052 <__udivmoddi4+0x5fe>
    c02c:	2203      	movs	r2, #3
    c02e:	7282      	strb	r2, [r0, #10]
    c030:	68ca      	ldr	r2, [r1, #12]
    c032:	326a      	adds	r2, #106	; 0x6a
    c034:	6042      	str	r2, [r0, #4]
    c036:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    c03a:	6889      	ldr	r1, [r1, #8]
    c03c:	17cb      	asrs	r3, r1, #31
    c03e:	1861      	adds	r1, r4, r1
    c040:	415a      	adcs	r2, r3
    c042:	e9c0 1204 	strd	r1, r2, [r0, #16]
    c046:	2104      	movs	r1, #4
    c048:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    c04c:	bd10      	pop	{r4, pc}
    c04e:	222b      	movs	r2, #43	; 0x2b
    c050:	e7e9      	b.n	c026 <__udivmoddi4+0x5d2>
    c052:	2202      	movs	r2, #2
    c054:	e7eb      	b.n	c02e <__udivmoddi4+0x5da>
    c056:	b570      	push	{r4, r5, r6, lr}
    c058:	4605      	mov	r5, r0
    c05a:	460c      	mov	r4, r1
    c05c:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    c060:	f7f6 fb54 	bl	270c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    c064:	b178      	cbz	r0, c086 <__udivmoddi4+0x632>
    c066:	4620      	mov	r0, r4
    c068:	f000 f810 	bl	c08c <__udivmoddi4+0x638>
    c06c:	6a22      	ldr	r2, [r4, #32]
    c06e:	2109      	movs	r1, #9
    c070:	4628      	mov	r0, r5
    c072:	4790      	blx	r2
    c074:	2800      	cmp	r0, #0
    c076:	d008      	beq.n	c08a <__udivmoddi4+0x636>
    c078:	7800      	ldrb	r0, [r0, #0]
    c07a:	2800      	cmp	r0, #0
    c07c:	d005      	beq.n	c08a <__udivmoddi4+0x636>
    c07e:	21dc      	movs	r1, #220	; 0xdc
    c080:	206a      	movs	r0, #106	; 0x6a
    c082:	f7f7 ff95 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c086:	21d8      	movs	r1, #216	; 0xd8
    c088:	e7fa      	b.n	c080 <__udivmoddi4+0x62c>
    c08a:	bd70      	pop	{r4, r5, r6, pc}
    c08c:	2100      	movs	r1, #0
    c08e:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    c092:	f800 1f24 	strb.w	r1, [r0, #36]!
    c096:	7041      	strb	r1, [r0, #1]
    c098:	4770      	bx	lr

0000c09a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c09a:	b570      	push	{r4, r5, r6, lr}
    c09c:	f7f4 fc86 	bl	9ac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c0a0:	4605      	mov	r5, r0
    c0a2:	2400      	movs	r4, #0
    c0a4:	e006      	b.n	c0b4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c0a6:	4620      	mov	r0, r4
    c0a8:	f7f4 fc86 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c0ac:	f7ff ffee 	bl	c08c <__udivmoddi4+0x638>
    c0b0:	1c64      	adds	r4, r4, #1
    c0b2:	b2e4      	uxtb	r4, r4
    c0b4:	42ac      	cmp	r4, r5
    c0b6:	d3f6      	bcc.n	c0a6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c0b8:	bd70      	pop	{r4, r5, r6, pc}

0000c0ba <mpsl_timeslot_request>:
    c0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0be:	460d      	mov	r5, r1
    c0c0:	f7f4 fc7a 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c0c4:	0004      	movs	r4, r0
    c0c6:	d008      	beq.n	c0da <mpsl_timeslot_request+0x20>
    c0c8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c0cc:	f06f 0622 	mvn.w	r6, #34	; 0x22
    c0d0:	2801      	cmp	r0, #1
    c0d2:	d006      	beq.n	c0e2 <mpsl_timeslot_request+0x28>
    c0d4:	2802      	cmp	r0, #2
    c0d6:	d111      	bne.n	c0fc <mpsl_timeslot_request+0x42>
    c0d8:	e003      	b.n	c0e2 <mpsl_timeslot_request+0x28>
    c0da:	f06f 0001 	mvn.w	r0, #1
    c0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0e2:	f06f 0715 	mvn.w	r7, #21
    c0e6:	b15d      	cbz	r5, c100 <mpsl_timeslot_request+0x46>
    c0e8:	4628      	mov	r0, r5
    c0ea:	f7f4 fbd5 	bl	898 <CONFIG_BT_RX_STACK_SIZE>
    c0ee:	b138      	cbz	r0, c100 <mpsl_timeslot_request+0x46>
    c0f0:	7828      	ldrb	r0, [r5, #0]
    c0f2:	b138      	cbz	r0, c104 <mpsl_timeslot_request+0x4a>
    c0f4:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c0f8:	2802      	cmp	r0, #2
    c0fa:	d008      	beq.n	c10e <mpsl_timeslot_request+0x54>
    c0fc:	4630      	mov	r0, r6
    c0fe:	e7ee      	b.n	c0de <mpsl_timeslot_request+0x24>
    c100:	4638      	mov	r0, r7
    c102:	e7ec      	b.n	c0de <mpsl_timeslot_request+0x24>
    c104:	4629      	mov	r1, r5
    c106:	4620      	mov	r0, r4
    c108:	f7ff ff6d 	bl	bfe6 <__udivmoddi4+0x592>
    c10c:	e003      	b.n	c116 <mpsl_timeslot_request+0x5c>
    c10e:	4629      	mov	r1, r5
    c110:	4620      	mov	r0, r4
    c112:	f7ff ff81 	bl	c018 <__udivmoddi4+0x5c4>
    c116:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    c11a:	4621      	mov	r1, r4
    c11c:	f7ff fe49 	bl	bdb2 <__udivmoddi4+0x35e>
    c120:	b108      	cbz	r0, c126 <mpsl_timeslot_request+0x6c>
    c122:	2000      	movs	r0, #0
    c124:	e7db      	b.n	c0de <mpsl_timeslot_request+0x24>
    c126:	f240 21b1 	movw	r1, #689	; 0x2b1
    c12a:	206a      	movs	r0, #106	; 0x6a
    c12c:	f7f7 ff40 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000c130 <mpsl_timeslot_session_close>:
    c130:	b510      	push	{r4, lr}
    c132:	4604      	mov	r4, r0
    c134:	f7f4 fc40 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c138:	0001      	movs	r1, r0
    c13a:	d005      	beq.n	c148 <mpsl_timeslot_session_close+0x18>
    c13c:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    c140:	f06f 0222 	mvn.w	r2, #34	; 0x22
    c144:	b978      	cbnz	r0, c166 <mpsl_timeslot_session_close+0x36>
    c146:	e002      	b.n	c14e <mpsl_timeslot_session_close+0x1e>
    c148:	f06f 0001 	mvn.w	r0, #1
    c14c:	bd10      	pop	{r4, pc}
    c14e:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    c152:	b140      	cbz	r0, c166 <mpsl_timeslot_session_close+0x36>
    c154:	2802      	cmp	r0, #2
    c156:	d008      	beq.n	c16a <mpsl_timeslot_session_close+0x3a>
    c158:	2801      	cmp	r0, #1
    c15a:	d006      	beq.n	c16a <mpsl_timeslot_session_close+0x3a>
    c15c:	2001      	movs	r0, #1
    c15e:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    c162:	2000      	movs	r0, #0
    c164:	bd10      	pop	{r4, pc}
    c166:	4610      	mov	r0, r2
    c168:	bd10      	pop	{r4, pc}
    c16a:	4620      	mov	r0, r4
    c16c:	f7ff ff73 	bl	c056 <__udivmoddi4+0x602>
    c170:	e7f7      	b.n	c162 <mpsl_timeslot_session_close+0x32>

0000c172 <mpsl_timeslot_session_count_set>:
    c172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c176:	460e      	mov	r6, r1
    c178:	4607      	mov	r7, r0
    c17a:	f7f4 fc17 	bl	9ac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c17e:	4605      	mov	r5, r0
    c180:	2400      	movs	r4, #0
    c182:	e00b      	b.n	c19c <mpsl_timeslot_session_count_set+0x2a>
    c184:	4620      	mov	r0, r4
    c186:	f7f4 fc17 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c18a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    c18e:	b118      	cbz	r0, c198 <mpsl_timeslot_session_count_set+0x26>
    c190:	f04f 30ff 	mov.w	r0, #4294967295
    c194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c198:	1c64      	adds	r4, r4, #1
    c19a:	b2e4      	uxtb	r4, r4
    c19c:	42ac      	cmp	r4, r5
    c19e:	d3f1      	bcc.n	c184 <mpsl_timeslot_session_count_set+0x12>
    c1a0:	2e08      	cmp	r6, #8
    c1a2:	d902      	bls.n	c1aa <mpsl_timeslot_session_count_set+0x38>
    c1a4:	f06f 0015 	mvn.w	r0, #21
    c1a8:	e7f4      	b.n	c194 <mpsl_timeslot_session_count_set+0x22>
    c1aa:	b117      	cbz	r7, c1b2 <mpsl_timeslot_session_count_set+0x40>
    c1ac:	4631      	mov	r1, r6
    c1ae:	4638      	mov	r0, r7
    c1b0:	e001      	b.n	c1b6 <mpsl_timeslot_session_count_set+0x44>
    c1b2:	2100      	movs	r1, #0
    c1b4:	4608      	mov	r0, r1
    c1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c1ba:	f7f4 bbe3 	b.w	984 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000c1be <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    c1be:	f7f6 bfd9 	b.w	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000c1c2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    c1c2:	b510      	push	{r4, lr}
    c1c4:	2000      	movs	r0, #0
    c1c6:	f7f7 fafb 	bl	37c0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    c1ca:	6800      	ldr	r0, [r0, #0]
    c1cc:	2800      	cmp	r0, #0
    c1ce:	bf18      	it	ne
    c1d0:	2001      	movne	r0, #1
    c1d2:	bd10      	pop	{r4, pc}

0000c1d4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    c1d4:	b510      	push	{r4, lr}
    c1d6:	f7f7 fb73 	bl	38c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    c1da:	f7f6 fe45 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    c1de:	f000 f802 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    c1e2:	b280      	uxth	r0, r0
    c1e4:	bd10      	pop	{r4, pc}

0000c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c1e6:	0a41      	lsrs	r1, r0, #9
    c1e8:	f643 5209 	movw	r2, #15625	; 0x3d09
    c1ec:	4351      	muls	r1, r2
    c1ee:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c1f2:	fb10 f002 	smulbb	r0, r0, r2
    c1f6:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c1fa:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c1fe:	4770      	bx	lr
    c200:	2800      	cmp	r0, #0
    c202:	db09      	blt.n	c218 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    c204:	f000 021f 	and.w	r2, r0, #31
    c208:	2101      	movs	r1, #1
    c20a:	4091      	lsls	r1, r2
    c20c:	0940      	lsrs	r0, r0, #5
    c20e:	0080      	lsls	r0, r0, #2
    c210:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c214:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c218:	4770      	bx	lr
    c21a:	2800      	cmp	r0, #0
    c21c:	db0d      	blt.n	c23a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    c21e:	f000 021f 	and.w	r2, r0, #31
    c222:	2101      	movs	r1, #1
    c224:	4091      	lsls	r1, r2
    c226:	0940      	lsrs	r0, r0, #5
    c228:	0080      	lsls	r0, r0, #2
    c22a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c22e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c232:	f3bf 8f4f 	dsb	sy
    c236:	f3bf 8f6f 	isb	sy
    c23a:	4770      	bx	lr

0000c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c23c:	b570      	push	{r4, r5, r6, lr}
    c23e:	4602      	mov	r2, r0
    c240:	2000      	movs	r0, #0
    c242:	2900      	cmp	r1, #0
    c244:	d01d      	beq.n	c282 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c246:	fba2 0101 	umull	r0, r1, r2, r1
    c24a:	0a40      	lsrs	r0, r0, #9
    c24c:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c250:	0a49      	lsrs	r1, r1, #9
    c252:	1c40      	adds	r0, r0, #1
    c254:	f141 0100 	adc.w	r1, r1, #0
    c258:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c25c:	1883      	adds	r3, r0, r2
    c25e:	f141 0100 	adc.w	r1, r1, #0
    c262:	1c5b      	adds	r3, r3, #1
    c264:	f141 0400 	adc.w	r4, r1, #0
    c268:	2100      	movs	r1, #0
    c26a:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c26e:	41a1      	sbcs	r1, r4
    c270:	d203      	bcs.n	c27a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c272:	2172      	movs	r1, #114	; 0x72
    c274:	206d      	movs	r0, #109	; 0x6d
    c276:	f7f7 fe9b 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c27a:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c27e:	fbb0 f0f2 	udiv	r0, r0, r2
    c282:	bd70      	pop	{r4, r5, r6, pc}
    c284:	5840      	ldr	r0, [r0, r1]
    c286:	2800      	cmp	r0, #0
    c288:	d000      	beq.n	c28c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c28a:	2001      	movs	r0, #1
    c28c:	4770      	bx	lr
    c28e:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c292:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c296:	f002 0201 	and.w	r2, r2, #1
    c29a:	03c0      	lsls	r0, r0, #15
    c29c:	d503      	bpl.n	c2a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c29e:	428a      	cmp	r2, r1
    c2a0:	d101      	bne.n	c2a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c2a2:	2001      	movs	r0, #1
    c2a4:	4770      	bx	lr
    c2a6:	2000      	movs	r0, #0
    c2a8:	4770      	bx	lr

0000c2aa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c2aa:	b510      	push	{r4, lr}
    c2ac:	2101      	movs	r1, #1
    c2ae:	0788      	lsls	r0, r1, #30
    c2b0:	f7f7 fe28 	bl	3f04 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c2b4:	2800      	cmp	r0, #0
    c2b6:	d000      	beq.n	c2ba <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c2b8:	2001      	movs	r0, #1
    c2ba:	bd10      	pop	{r4, pc}

0000c2bc <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c2bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c2c0:	2101      	movs	r1, #1
    c2c2:	6001      	str	r1, [r0, #0]
    c2c4:	4770      	bx	lr

0000c2c6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c2c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c2ca:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c2ce:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c2d2:	f002 0203 	and.w	r2, r2, #3
    c2d6:	03c9      	lsls	r1, r1, #15
    c2d8:	d503      	bpl.n	c2e2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c2da:	4282      	cmp	r2, r0
    c2dc:	d101      	bne.n	c2e2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c2de:	2001      	movs	r0, #1
    c2e0:	4770      	bx	lr
    c2e2:	2000      	movs	r0, #0
    c2e4:	4770      	bx	lr

0000c2e6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c2e6:	b510      	push	{r4, lr}
    c2e8:	2100      	movs	r1, #0
    c2ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c2ee:	f7f7 fe09 	bl	3f04 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c2f2:	2800      	cmp	r0, #0
    c2f4:	d000      	beq.n	c2f8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c2f6:	2001      	movs	r0, #1
    c2f8:	bd10      	pop	{r4, pc}
    c2fa:	2800      	cmp	r0, #0
    c2fc:	db09      	blt.n	c312 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c2fe:	f000 021f 	and.w	r2, r0, #31
    c302:	2101      	movs	r1, #1
    c304:	4091      	lsls	r1, r2
    c306:	0940      	lsrs	r0, r0, #5
    c308:	0080      	lsls	r0, r0, #2
    c30a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c30e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c312:	4770      	bx	lr
    c314:	2800      	cmp	r0, #0
    c316:	db0d      	blt.n	c334 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c318:	f000 021f 	and.w	r2, r0, #31
    c31c:	2101      	movs	r1, #1
    c31e:	4091      	lsls	r1, r2
    c320:	0940      	lsrs	r0, r0, #5
    c322:	0080      	lsls	r0, r0, #2
    c324:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c328:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c32c:	f3bf 8f4f 	dsb	sy
    c330:	f3bf 8f6f 	isb	sy
    c334:	4770      	bx	lr
    c336:	1000      	.short	0x1000
    c338:	00fa0002 	.word	0x00fa0002
    c33c:	edb80000 	.word	0xedb80000
    c340:	0ef2aa4d 	.word	0x0ef2aa4d
    c344:	b5ea3202 	.word	0xb5ea3202
    c348:	d1502fde 	.word	0xd1502fde
    c34c:	d2b55ab7 	.word	0xd2b55ab7
    c350:	41c7      	.short	0x41c7
    c352:	2800      	cmp	r0, #0
    c354:	db09      	blt.n	c36a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c356:	f000 021f 	and.w	r2, r0, #31
    c35a:	2101      	movs	r1, #1
    c35c:	4091      	lsls	r1, r2
    c35e:	0940      	lsrs	r0, r0, #5
    c360:	0080      	lsls	r0, r0, #2
    c362:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c366:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c36a:	4770      	bx	lr

0000c36c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c36c:	f3ef 8110 	mrs	r1, PRIMASK
    c370:	b672      	cpsid	i
    c372:	7802      	ldrb	r2, [r0, #0]
    c374:	2a01      	cmp	r2, #1
    c376:	d001      	beq.n	c37c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c378:	2201      	movs	r2, #1
    c37a:	e000      	b.n	c37e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c37c:	2200      	movs	r2, #0
    c37e:	2301      	movs	r3, #1
    c380:	7003      	strb	r3, [r0, #0]
    c382:	b901      	cbnz	r1, c386 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c384:	b662      	cpsie	i
    c386:	b10a      	cbz	r2, c38c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c388:	2000      	movs	r0, #0
    c38a:	4770      	bx	lr
    c38c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c390:	4770      	bx	lr

0000c392 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c392:	2100      	movs	r1, #0
    c394:	7001      	strb	r1, [r0, #0]
    c396:	4608      	mov	r0, r1
    c398:	4770      	bx	lr

0000c39a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c39a:	f3ef 8110 	mrs	r1, PRIMASK
    c39e:	b672      	cpsid	i
    c3a0:	2200      	movs	r2, #0
    c3a2:	7002      	strb	r2, [r0, #0]
    c3a4:	b901      	cbnz	r1, c3a8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c3a6:	b662      	cpsie	i
    c3a8:	2000      	movs	r0, #0
    c3aa:	4770      	bx	lr

0000c3ac <mpsl_low_priority_process>:
    c3ac:	f7f7 bf00 	b.w	41b0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c3b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c3b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3b4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3b8:	280f      	cmp	r0, #15
    c3ba:	d001      	beq.n	c3c0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c3bc:	2000      	movs	r0, #0
    c3be:	4770      	bx	lr
    c3c0:	2001      	movs	r0, #1
    c3c2:	4770      	bx	lr

0000c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c3c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3c8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3cc:	280a      	cmp	r0, #10
    c3ce:	d001      	beq.n	c3d4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c3d0:	2000      	movs	r0, #0
    c3d2:	4770      	bx	lr
    c3d4:	2001      	movs	r0, #1
    c3d6:	4770      	bx	lr

0000c3d8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c3d8:	b500      	push	{lr}
    c3da:	f7ff fff3 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c3de:	b120      	cbz	r0, c3ea <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c3e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3e4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c3e8:	b108      	cbz	r0, c3ee <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c3ea:	2000      	movs	r0, #0
    c3ec:	bd00      	pop	{pc}
    c3ee:	2001      	movs	r0, #1
    c3f0:	bd00      	pop	{pc}

0000c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c3f2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3f6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3fa:	280e      	cmp	r0, #14
    c3fc:	d001      	beq.n	c402 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c3fe:	2000      	movs	r0, #0
    c400:	4770      	bx	lr
    c402:	2001      	movs	r0, #1
    c404:	4770      	bx	lr

0000c406 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c406:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c40a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c40e:	2810      	cmp	r0, #16
    c410:	d001      	beq.n	c416 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c412:	2000      	movs	r0, #0
    c414:	4770      	bx	lr
    c416:	2001      	movs	r0, #1
    c418:	4770      	bx	lr

0000c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c41a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c41e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c422:	2806      	cmp	r0, #6
    c424:	d003      	beq.n	c42e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c426:	1c40      	adds	r0, r0, #1
    c428:	d001      	beq.n	c42e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c42a:	2000      	movs	r0, #0
    c42c:	4770      	bx	lr
    c42e:	2001      	movs	r0, #1
    c430:	4770      	bx	lr

0000c432 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c432:	b500      	push	{lr}
    c434:	f7ff fff1 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c438:	b148      	cbz	r0, c44e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c43a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c43e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c442:	2806      	cmp	r0, #6
    c444:	d303      	bcc.n	c44e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c446:	1c40      	adds	r0, r0, #1
    c448:	d001      	beq.n	c44e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c44a:	2001      	movs	r0, #1
    c44c:	bd00      	pop	{pc}
    c44e:	2000      	movs	r0, #0
    c450:	bd00      	pop	{pc}

0000c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c452:	b500      	push	{lr}
    c454:	f7ff ffe1 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c458:	b138      	cbz	r0, c46a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c45a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c45e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c462:	2806      	cmp	r0, #6
    c464:	d303      	bcc.n	c46e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c466:	1c40      	adds	r0, r0, #1
    c468:	d001      	beq.n	c46e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c46a:	2000      	movs	r0, #0
    c46c:	bd00      	pop	{pc}
    c46e:	2001      	movs	r0, #1
    c470:	bd00      	pop	{pc}

0000c472 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c472:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c476:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c47a:	280d      	cmp	r0, #13
    c47c:	d001      	beq.n	c482 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c47e:	2000      	movs	r0, #0
    c480:	4770      	bx	lr
    c482:	2001      	movs	r0, #1
    c484:	4770      	bx	lr

0000c486 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c486:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c48a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c48e:	2808      	cmp	r0, #8
    c490:	d001      	beq.n	c496 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c492:	2000      	movs	r0, #0
    c494:	4770      	bx	lr
    c496:	2001      	movs	r0, #1
    c498:	4770      	bx	lr

0000c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c49a:	b4f0      	push	{r4, r5, r6, r7}
    c49c:	ea80 0c01 	eor.w	ip, r0, r1
    c4a0:	4603      	mov	r3, r0
    c4a2:	f01c 0f03 	tst.w	ip, #3
    c4a6:	d13c      	bne.n	c522 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c4a8:	f013 0f03 	tst.w	r3, #3
    c4ac:	d00b      	beq.n	c4c6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c4ae:	2a00      	cmp	r2, #0
    c4b0:	bf04      	itt	eq
    c4b2:	bcf0      	popeq	{r4, r5, r6, r7}
    c4b4:	4770      	bxeq	lr
    c4b6:	f811 cb01 	ldrb.w	ip, [r1], #1
    c4ba:	f803 cb01 	strb.w	ip, [r3], #1
    c4be:	1e52      	subs	r2, r2, #1
    c4c0:	f013 0f03 	tst.w	r3, #3
    c4c4:	d1f3      	bne.n	c4ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c4c6:	2a03      	cmp	r2, #3
    c4c8:	d94f      	bls.n	c56a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c4ca:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c4ce:	d24c      	bcs.n	c56a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c4d0:	f1c2 0c00 	rsb	ip, r2, #0
    c4d4:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c4d8:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c4dc:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c4e0:	f1cc 0c00 	rsb	ip, ip, #0
    c4e4:	f1bc 0f00 	cmp.w	ip, #0
    c4e8:	dd1b      	ble.n	c522 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c4ea:	1f0d      	subs	r5, r1, #4
    c4ec:	1f1c      	subs	r4, r3, #4
    c4ee:	f01c 0f01 	tst.w	ip, #1
    c4f2:	d003      	beq.n	c4fc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c4f4:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c4f8:	f844 6f04 	str.w	r6, [r4, #4]!
    c4fc:	ea5f 066c 	movs.w	r6, ip, asr #1
    c500:	d007      	beq.n	c512 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c502:	686f      	ldr	r7, [r5, #4]
    c504:	6067      	str	r7, [r4, #4]
    c506:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c50a:	f844 7f08 	str.w	r7, [r4, #8]!
    c50e:	1e76      	subs	r6, r6, #1
    c510:	d1f7      	bne.n	c502 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c512:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c516:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c51a:	f1cc 0c00 	rsb	ip, ip, #0
    c51e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c522:	2a00      	cmp	r2, #0
    c524:	bf04      	itt	eq
    c526:	bcf0      	popeq	{r4, r5, r6, r7}
    c528:	4770      	bxeq	lr
    c52a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c52e:	d226      	bcs.n	c57e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c530:	2a00      	cmp	r2, #0
    c532:	bfdc      	itt	le
    c534:	bcf0      	pople	{r4, r5, r6, r7}
    c536:	4770      	bxle	lr
    c538:	1e49      	subs	r1, r1, #1
    c53a:	1e5b      	subs	r3, r3, #1
    c53c:	f012 0f01 	tst.w	r2, #1
    c540:	d003      	beq.n	c54a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c542:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c546:	f803 cf01 	strb.w	ip, [r3, #1]!
    c54a:	1052      	asrs	r2, r2, #1
    c54c:	bf04      	itt	eq
    c54e:	bcf0      	popeq	{r4, r5, r6, r7}
    c550:	4770      	bxeq	lr
    c552:	f891 c001 	ldrb.w	ip, [r1, #1]
    c556:	f883 c001 	strb.w	ip, [r3, #1]
    c55a:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c55e:	f803 cf02 	strb.w	ip, [r3, #2]!
    c562:	1e52      	subs	r2, r2, #1
    c564:	d1f5      	bne.n	c552 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c566:	bcf0      	pop	{r4, r5, r6, r7}
    c568:	4770      	bx	lr
    c56a:	2a04      	cmp	r2, #4
    c56c:	d3d9      	bcc.n	c522 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c56e:	f851 cb04 	ldr.w	ip, [r1], #4
    c572:	1f12      	subs	r2, r2, #4
    c574:	f843 cb04 	str.w	ip, [r3], #4
    c578:	2a04      	cmp	r2, #4
    c57a:	d2f8      	bcs.n	c56e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c57c:	e7d1      	b.n	c522 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c57e:	f811 cb01 	ldrb.w	ip, [r1], #1
    c582:	f803 cb01 	strb.w	ip, [r3], #1
    c586:	1e52      	subs	r2, r2, #1
    c588:	d1f9      	bne.n	c57e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c58a:	bcf0      	pop	{r4, r5, r6, r7}
    c58c:	4770      	bx	lr

0000c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c58e:	b470      	push	{r4, r5, r6}
    c590:	4603      	mov	r3, r0
    c592:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c596:	f010 0f03 	tst.w	r0, #3
    c59a:	d009      	beq.n	c5b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c59c:	2a00      	cmp	r2, #0
    c59e:	bf04      	itt	eq
    c5a0:	bc70      	popeq	{r4, r5, r6}
    c5a2:	4770      	bxeq	lr
    c5a4:	f803 cb01 	strb.w	ip, [r3], #1
    c5a8:	1e52      	subs	r2, r2, #1
    c5aa:	f013 0f03 	tst.w	r3, #3
    c5ae:	d1f5      	bne.n	c59c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c5b0:	b2c9      	uxtb	r1, r1
    c5b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c5b6:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c5ba:	2a03      	cmp	r2, #3
    c5bc:	d939      	bls.n	c632 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c5be:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c5c2:	d236      	bcs.n	c632 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c5c4:	4251      	negs	r1, r2
    c5c6:	17cc      	asrs	r4, r1, #31
    c5c8:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c5cc:	1089      	asrs	r1, r1, #2
    c5ce:	424e      	negs	r6, r1
    c5d0:	2e00      	cmp	r6, #0
    c5d2:	dd11      	ble.n	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c5d4:	1f19      	subs	r1, r3, #4
    c5d6:	f016 0f01 	tst.w	r6, #1
    c5da:	bf18      	it	ne
    c5dc:	f841 5f04 	strne.w	r5, [r1, #4]!
    c5e0:	1074      	asrs	r4, r6, #1
    c5e2:	d004      	beq.n	c5ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c5e4:	604d      	str	r5, [r1, #4]
    c5e6:	f841 5f08 	str.w	r5, [r1, #8]!
    c5ea:	1e64      	subs	r4, r4, #1
    c5ec:	d1fa      	bne.n	c5e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c5ee:	4271      	negs	r1, r6
    c5f0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c5f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c5f8:	2a00      	cmp	r2, #0
    c5fa:	bf04      	itt	eq
    c5fc:	bc70      	popeq	{r4, r5, r6}
    c5fe:	4770      	bxeq	lr
    c600:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c604:	d21d      	bcs.n	c642 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c606:	2a00      	cmp	r2, #0
    c608:	bfdc      	itt	le
    c60a:	bc70      	pople	{r4, r5, r6}
    c60c:	4770      	bxle	lr
    c60e:	1e59      	subs	r1, r3, #1
    c610:	f012 0f01 	tst.w	r2, #1
    c614:	bf18      	it	ne
    c616:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c61a:	1052      	asrs	r2, r2, #1
    c61c:	bf04      	itt	eq
    c61e:	bc70      	popeq	{r4, r5, r6}
    c620:	4770      	bxeq	lr
    c622:	f881 c001 	strb.w	ip, [r1, #1]
    c626:	f801 cf02 	strb.w	ip, [r1, #2]!
    c62a:	1e52      	subs	r2, r2, #1
    c62c:	d1f9      	bne.n	c622 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c62e:	bc70      	pop	{r4, r5, r6}
    c630:	4770      	bx	lr
    c632:	2a04      	cmp	r2, #4
    c634:	d3e0      	bcc.n	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c636:	1f12      	subs	r2, r2, #4
    c638:	f843 5b04 	str.w	r5, [r3], #4
    c63c:	2a04      	cmp	r2, #4
    c63e:	d2fa      	bcs.n	c636 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c640:	e7da      	b.n	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c642:	f803 cb01 	strb.w	ip, [r3], #1
    c646:	1e52      	subs	r2, r2, #1
    c648:	d1fb      	bne.n	c642 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c64a:	bc70      	pop	{r4, r5, r6}
    c64c:	4770      	bx	lr
    c64e:	f04f 30ff 	mov.w	r0, #4294967295
    c652:	4770      	bx	lr
    c654:	2000      	movs	r0, #0
    c656:	4770      	bx	lr
    c658:	2000      	movs	r0, #0
    c65a:	4770      	bx	lr
    c65c:	f04f 30ff 	mov.w	r0, #4294967295
    c660:	4770      	bx	lr
    c662:	4770      	bx	lr
    c664:	4770      	bx	lr
    c666:	2000      	movs	r0, #0
    c668:	4770      	bx	lr
    c66a:	2100      	movs	r1, #0
    c66c:	7001      	strb	r1, [r0, #0]
    c66e:	4770      	bx	lr
    c670:	f04f 30ff 	mov.w	r0, #4294967295
    c674:	4770      	bx	lr
    c676:	f04f 30ff 	mov.w	r0, #4294967295
    c67a:	4770      	bx	lr
    c67c:	2100      	movs	r1, #0
    c67e:	7001      	strb	r1, [r0, #0]
    c680:	4770      	bx	lr
    c682:	f04f 30ff 	mov.w	r0, #4294967295
    c686:	4770      	bx	lr
    c688:	f04f 30ff 	mov.w	r0, #4294967295
    c68c:	4770      	bx	lr
    c68e:	7800      	ldrb	r0, [r0, #0]
    c690:	2800      	cmp	r0, #0
    c692:	d001      	beq.n	c698 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    c694:	f06f 0015 	mvn.w	r0, #21
    c698:	4770      	bx	lr
    c69a:	2000      	movs	r0, #0
    c69c:	4770      	bx	lr
    c69e:	2200      	movs	r2, #0
    c6a0:	f000 b802 	b.w	c6a8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000c6a4 <mpsl_fem_init>:
    c6a4:	f7f4 b88e 	b.w	7c4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000c6a8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    c6a8:	b570      	push	{r4, r5, r6, lr}
    c6aa:	4614      	mov	r4, r2
    c6ac:	460d      	mov	r5, r1
    c6ae:	1b00      	subs	r0, r0, r4
    c6b0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    c6b4:	4288      	cmp	r0, r1
    c6b6:	da01      	bge.n	c6bc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    c6b8:	4608      	mov	r0, r1
    c6ba:	e002      	b.n	c6c2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c6bc:	287f      	cmp	r0, #127	; 0x7f
    c6be:	dd00      	ble.n	c6c2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c6c0:	207f      	movs	r0, #127	; 0x7f
    c6c2:	b240      	sxtb	r0, r0
    c6c4:	f7f4 f8b2 	bl	82c <mpsl_tx_power_radio_supported_power_adjust>
    c6c8:	7028      	strb	r0, [r5, #0]
    c6ca:	706c      	strb	r4, [r5, #1]
    c6cc:	2100      	movs	r1, #0
    c6ce:	4420      	add	r0, r4
    c6d0:	70a9      	strb	r1, [r5, #2]
    c6d2:	b240      	sxtb	r0, r0
    c6d4:	bd70      	pop	{r4, r5, r6, pc}
    c6d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6da:	460c      	mov	r4, r1
    c6dc:	4681      	mov	r9, r0
    c6de:	7849      	ldrb	r1, [r1, #1]
    c6e0:	f100 0003 	add.w	r0, r0, #3
    c6e4:	f88d 1000 	strb.w	r1, [sp]
    c6e8:	f020 0003 	bic.w	r0, r0, #3
    c6ec:	78a1      	ldrb	r1, [r4, #2]
    c6ee:	0016      	movs	r6, r2
    c6f0:	4605      	mov	r5, r0
    c6f2:	f88d 1001 	strb.w	r1, [sp, #1]
    c6f6:	d000      	beq.n	c6fa <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    c6f8:	2000      	movs	r0, #0
    c6fa:	4669      	mov	r1, sp
    c6fc:	f7f8 f934 	bl	4968 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c700:	4428      	add	r0, r5
    c702:	78a1      	ldrb	r1, [r4, #2]
    c704:	4605      	mov	r5, r0
    c706:	b131      	cbz	r1, c716 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    c708:	8a63      	ldrh	r3, [r4, #18]
    c70a:	78e2      	ldrb	r2, [r4, #3]
    c70c:	b106      	cbz	r6, c710 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    c70e:	2000      	movs	r0, #0
    c710:	f7f8 fb92 	bl	4e38 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c714:	4405      	add	r5, r0
    c716:	7820      	ldrb	r0, [r4, #0]
    c718:	7861      	ldrb	r1, [r4, #1]
    c71a:	46b2      	mov	sl, r6
    c71c:	2600      	movs	r6, #0
    c71e:	4408      	add	r0, r1
    c720:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c724:	4637      	mov	r7, r6
    c726:	e008      	b.n	c73a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    c728:	7a23      	ldrb	r3, [r4, #8]
    c72a:	79e2      	ldrb	r2, [r4, #7]
    c72c:	79a1      	ldrb	r1, [r4, #6]
    c72e:	7960      	ldrb	r0, [r4, #5]
    c730:	f000 fe6e 	bl	d410 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c734:	1c7f      	adds	r7, r7, #1
    c736:	4406      	add	r6, r0
    c738:	b2ff      	uxtb	r7, r7
    c73a:	4547      	cmp	r7, r8
    c73c:	d3f4      	bcc.n	c728 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    c73e:	1ced      	adds	r5, r5, #3
    c740:	f025 0003 	bic.w	r0, r5, #3
    c744:	4604      	mov	r4, r0
    c746:	f1ba 0f00 	cmp.w	sl, #0
    c74a:	d000      	beq.n	c74e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    c74c:	2000      	movs	r0, #0
    c74e:	4632      	mov	r2, r6
    c750:	4641      	mov	r1, r8
    c752:	f7f8 fabd 	bl	4cd0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c756:	4420      	add	r0, r4
    c758:	1dc0      	adds	r0, r0, #7
    c75a:	f020 0007 	bic.w	r0, r0, #7
    c75e:	eba0 0009 	sub.w	r0, r0, r9
    c762:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c766 <sdc_soc_ecb_block_encrypt>:
    c766:	b530      	push	{r4, r5, lr}
    c768:	460d      	mov	r5, r1
    c76a:	b08d      	sub	sp, #52	; 0x34
    c76c:	4614      	mov	r4, r2
    c76e:	4601      	mov	r1, r0
    c770:	2210      	movs	r2, #16
    c772:	4668      	mov	r0, sp
    c774:	f7ff fe91 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c778:	2210      	movs	r2, #16
    c77a:	4629      	mov	r1, r5
    c77c:	a804      	add	r0, sp, #16
    c77e:	f7ff fe8c 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c782:	4668      	mov	r0, sp
    c784:	f000 ffc5 	bl	d712 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c788:	b118      	cbz	r0, c792 <sdc_soc_ecb_block_encrypt+0x2c>
    c78a:	f06f 0015 	mvn.w	r0, #21
    c78e:	b00d      	add	sp, #52	; 0x34
    c790:	bd30      	pop	{r4, r5, pc}
    c792:	2210      	movs	r2, #16
    c794:	4620      	mov	r0, r4
    c796:	a908      	add	r1, sp, #32
    c798:	f7ff fe7f 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c79c:	2000      	movs	r0, #0
    c79e:	e7f6      	b.n	c78e <sdc_soc_ecb_block_encrypt+0x28>

0000c7a0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c7a0:	b50e      	push	{r1, r2, r3, lr}
    c7a2:	4601      	mov	r1, r0
    c7a4:	4668      	mov	r0, sp
    c7a6:	f000 f818 	bl	c7da <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c7aa:	4668      	mov	r0, sp
    c7ac:	f001 fc38 	bl	e020 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c7b0:	bd0e      	pop	{r1, r2, r3, pc}
    c7b2:	b570      	push	{r4, r5, r6, lr}
    c7b4:	460c      	mov	r4, r1
    c7b6:	4605      	mov	r5, r0
    c7b8:	f7f8 f858 	bl	486c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c7bc:	2800      	cmp	r0, #0
    c7be:	d002      	beq.n	c7c6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    c7c0:	2d3e      	cmp	r5, #62	; 0x3e
    c7c2:	d001      	beq.n	c7c8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    c7c4:	2001      	movs	r0, #1
    c7c6:	bd70      	pop	{r4, r5, r6, pc}
    c7c8:	2c12      	cmp	r4, #18
    c7ca:	d004      	beq.n	c7d6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    c7cc:	4620      	mov	r0, r4
    c7ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c7d2:	f7f8 b85d 	b.w	4890 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c7d6:	2000      	movs	r0, #0
    c7d8:	bd70      	pop	{r4, r5, r6, pc}

0000c7da <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c7da:	880a      	ldrh	r2, [r1, #0]
    c7dc:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c7e0:	8002      	strh	r2, [r0, #0]
    c7e2:	884a      	ldrh	r2, [r1, #2]
    c7e4:	8042      	strh	r2, [r0, #2]
    c7e6:	784a      	ldrb	r2, [r1, #1]
    c7e8:	0993      	lsrs	r3, r2, #6
    c7ea:	2200      	movs	r2, #0
    c7ec:	7142      	strb	r2, [r0, #5]
    c7ee:	784b      	ldrb	r3, [r1, #1]
    c7f0:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c7f4:	b11b      	cbz	r3, c7fe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c7f6:	2b01      	cmp	r3, #1
    c7f8:	d005      	beq.n	c806 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c7fa:	2b02      	cmp	r3, #2
    c7fc:	d005      	beq.n	c80a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c7fe:	7102      	strb	r2, [r0, #4]
    c800:	1d09      	adds	r1, r1, #4
    c802:	6081      	str	r1, [r0, #8]
    c804:	4770      	bx	lr
    c806:	2201      	movs	r2, #1
    c808:	e7f9      	b.n	c7fe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c80a:	2202      	movs	r2, #2
    c80c:	e7f7      	b.n	c7fe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c80e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c80e:	b510      	push	{r4, lr}
    c810:	460c      	mov	r4, r1
    c812:	7809      	ldrb	r1, [r1, #0]
    c814:	7001      	strb	r1, [r0, #0]
    c816:	7841      	ldrb	r1, [r0, #1]
    c818:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c81c:	7041      	strb	r1, [r0, #1]
    c81e:	8822      	ldrh	r2, [r4, #0]
    c820:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c824:	4311      	orrs	r1, r2
    c826:	7041      	strb	r1, [r0, #1]
    c828:	78a2      	ldrb	r2, [r4, #2]
    c82a:	7082      	strb	r2, [r0, #2]
    c82c:	8862      	ldrh	r2, [r4, #2]
    c82e:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    c832:	0a12      	lsrs	r2, r2, #8
    c834:	70c2      	strb	r2, [r0, #3]
    c836:	7041      	strb	r1, [r0, #1]
    c838:	7922      	ldrb	r2, [r4, #4]
    c83a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c83e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    c842:	7041      	strb	r1, [r0, #1]
    c844:	7962      	ldrb	r2, [r4, #5]
    c846:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c84a:	7041      	strb	r1, [r0, #1]
    c84c:	68a1      	ldr	r1, [r4, #8]
    c84e:	1d02      	adds	r2, r0, #4
    c850:	4291      	cmp	r1, r2
    c852:	d006      	beq.n	c862 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    c854:	8862      	ldrh	r2, [r4, #2]
    c856:	2afb      	cmp	r2, #251	; 0xfb
    c858:	d300      	bcc.n	c85c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    c85a:	22fb      	movs	r2, #251	; 0xfb
    c85c:	1d00      	adds	r0, r0, #4
    c85e:	f7ff fe1c 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c862:	78a0      	ldrb	r0, [r4, #2]
    c864:	1d00      	adds	r0, r0, #4
    c866:	b2c0      	uxtb	r0, r0
    c868:	bd10      	pop	{r4, pc}

0000c86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c86e:	4604      	mov	r4, r0
    c870:	f891 c000 	ldrb.w	ip, [r1]
    c874:	2000      	movs	r0, #0
    c876:	2513      	movs	r5, #19
    c878:	260c      	movs	r6, #12
    c87a:	2705      	movs	r7, #5
    c87c:	223e      	movs	r2, #62	; 0x3e
    c87e:	23ff      	movs	r3, #255	; 0xff
    c880:	f1bc 0f1d 	cmp.w	ip, #29
    c884:	d27d      	bcs.n	c982 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    c886:	e8df f00c 	tbb	[pc, ip]
    c88a:	0f7c      	.short	0x0f7c
    c88c:	882e2826 	.word	0x882e2826
    c890:	d1bea492 	.word	0xd1bea492
    c894:	f5f7ded3 	.word	0xf5f7ded3
    c898:	547c7cf4 	.word	0x547c7cf4
    c89c:	f0f1f2f3 	.word	0xf0f1f2f3
    c8a0:	ecedeeef 	.word	0xecedeeef
    c8a4:	00e9eaeb 	.word	0x00e9eaeb
    c8a8:	7026      	strb	r6, [r4, #0]
    c8aa:	7908      	ldrb	r0, [r1, #4]
    c8ac:	70a0      	strb	r0, [r4, #2]
    c8ae:	7948      	ldrb	r0, [r1, #5]
    c8b0:	70e0      	strb	r0, [r4, #3]
    c8b2:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c8b6:	0a00      	lsrs	r0, r0, #8
    c8b8:	7120      	strb	r0, [r4, #4]
    c8ba:	79c8      	ldrb	r0, [r1, #7]
    c8bc:	7160      	strb	r0, [r4, #5]
    c8be:	7a08      	ldrb	r0, [r1, #8]
    c8c0:	71a0      	strb	r0, [r4, #6]
    c8c2:	8908      	ldrh	r0, [r1, #8]
    c8c4:	0a00      	lsrs	r0, r0, #8
    c8c6:	71e0      	strb	r0, [r4, #7]
    c8c8:	7a88      	ldrb	r0, [r1, #10]
    c8ca:	7220      	strb	r0, [r4, #8]
    c8cc:	8948      	ldrh	r0, [r1, #10]
    c8ce:	0a00      	lsrs	r0, r0, #8
    c8d0:	7260      	strb	r0, [r4, #9]
    c8d2:	2008      	movs	r0, #8
    c8d4:	e190      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c8d6:	2010      	movs	r0, #16
    c8d8:	e000      	b.n	c8dc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x72>
    c8da:	201a      	movs	r0, #26
    c8dc:	7020      	strb	r0, [r4, #0]
    c8de:	7908      	ldrb	r0, [r1, #4]
    c8e0:	70a0      	strb	r0, [r4, #2]
    c8e2:	2001      	movs	r0, #1
    c8e4:	e188      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c8e6:	7022      	strb	r2, [r4, #0]
    c8e8:	2001      	movs	r0, #1
    c8ea:	70a0      	strb	r0, [r4, #2]
    c8ec:	7908      	ldrb	r0, [r1, #4]
    c8ee:	70e0      	strb	r0, [r4, #3]
    c8f0:	7988      	ldrb	r0, [r1, #6]
    c8f2:	7120      	strb	r0, [r4, #4]
    c8f4:	88c8      	ldrh	r0, [r1, #6]
    c8f6:	0a00      	lsrs	r0, r0, #8
    c8f8:	7160      	strb	r0, [r4, #5]
    c8fa:	7a08      	ldrb	r0, [r1, #8]
    c8fc:	71a0      	strb	r0, [r4, #6]
    c8fe:	7a48      	ldrb	r0, [r1, #9]
    c900:	71e0      	strb	r0, [r4, #7]
    c902:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c906:	60a0      	str	r0, [r4, #8]
    c908:	89c8      	ldrh	r0, [r1, #14]
    c90a:	81a0      	strh	r0, [r4, #12]
    c90c:	7c08      	ldrb	r0, [r1, #16]
    c90e:	73a0      	strb	r0, [r4, #14]
    c910:	8a08      	ldrh	r0, [r1, #16]
    c912:	0a00      	lsrs	r0, r0, #8
    c914:	73e0      	strb	r0, [r4, #15]
    c916:	7c88      	ldrb	r0, [r1, #18]
    c918:	7420      	strb	r0, [r4, #16]
    c91a:	8a48      	ldrh	r0, [r1, #18]
    c91c:	0a00      	lsrs	r0, r0, #8
    c91e:	7460      	strb	r0, [r4, #17]
    c920:	7d08      	ldrb	r0, [r1, #20]
    c922:	74a0      	strb	r0, [r4, #18]
    c924:	8a88      	ldrh	r0, [r1, #20]
    c926:	0a00      	lsrs	r0, r0, #8
    c928:	74e0      	strb	r0, [r4, #19]
    c92a:	7d88      	ldrb	r0, [r1, #22]
    c92c:	7520      	strb	r0, [r4, #20]
    c92e:	4628      	mov	r0, r5
    c930:	e162      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c932:	7022      	strb	r2, [r4, #0]
    c934:	200a      	movs	r0, #10
    c936:	70a0      	strb	r0, [r4, #2]
    c938:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c93c:	70e0      	strb	r0, [r4, #3]
    c93e:	7888      	ldrb	r0, [r1, #2]
    c940:	7120      	strb	r0, [r4, #4]
    c942:	8848      	ldrh	r0, [r1, #2]
    c944:	0a00      	lsrs	r0, r0, #8
    c946:	7160      	strb	r0, [r4, #5]
    c948:	7908      	ldrb	r0, [r1, #4]
    c94a:	71a0      	strb	r0, [r4, #6]
    c94c:	7948      	ldrb	r0, [r1, #5]
    c94e:	71e0      	strb	r0, [r4, #7]
    c950:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c954:	60a0      	str	r0, [r4, #8]
    c956:	8948      	ldrh	r0, [r1, #10]
    c958:	81a0      	strh	r0, [r4, #12]
    c95a:	68c8      	ldr	r0, [r1, #12]
    c95c:	f8c4 000e 	str.w	r0, [r4, #14]
    c960:	8a08      	ldrh	r0, [r1, #16]
    c962:	8260      	strh	r0, [r4, #18]
    c964:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c968:	6160      	str	r0, [r4, #20]
    c96a:	8ac8      	ldrh	r0, [r1, #22]
    c96c:	8320      	strh	r0, [r4, #24]
    c96e:	7e08      	ldrb	r0, [r1, #24]
    c970:	76a0      	strb	r0, [r4, #26]
    c972:	8b08      	ldrh	r0, [r1, #24]
    c974:	0a00      	lsrs	r0, r0, #8
    c976:	76e0      	strb	r0, [r4, #27]
    c978:	7e88      	ldrb	r0, [r1, #26]
    c97a:	7720      	strb	r0, [r4, #28]
    c97c:	8b48      	ldrh	r0, [r1, #26]
    c97e:	0a00      	lsrs	r0, r0, #8
    c980:	e000      	b.n	c984 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    c982:	e09a      	b.n	caba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    c984:	7760      	strb	r0, [r4, #29]
    c986:	7f08      	ldrb	r0, [r1, #28]
    c988:	77a0      	strb	r0, [r4, #30]
    c98a:	8b88      	ldrh	r0, [r1, #28]
    c98c:	0a00      	lsrs	r0, r0, #8
    c98e:	77e0      	strb	r0, [r4, #31]
    c990:	7f88      	ldrb	r0, [r1, #30]
    c992:	f884 0020 	strb.w	r0, [r4, #32]
    c996:	201f      	movs	r0, #31
    c998:	e12e      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c99a:	7022      	strb	r2, [r4, #0]
    c99c:	2014      	movs	r0, #20
    c99e:	70a0      	strb	r0, [r4, #2]
    c9a0:	7908      	ldrb	r0, [r1, #4]
    c9a2:	70e0      	strb	r0, [r4, #3]
    c9a4:	8888      	ldrh	r0, [r1, #4]
    c9a6:	0a00      	lsrs	r0, r0, #8
    c9a8:	7120      	strb	r0, [r4, #4]
    c9aa:	7988      	ldrb	r0, [r1, #6]
    c9ac:	e0c2      	b.n	cb34 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    c9ae:	7022      	strb	r2, [r4, #0]
    c9b0:	2004      	movs	r0, #4
    c9b2:	70a0      	strb	r0, [r4, #2]
    c9b4:	7908      	ldrb	r0, [r1, #4]
    c9b6:	70e0      	strb	r0, [r4, #3]
    c9b8:	7988      	ldrb	r0, [r1, #6]
    c9ba:	7120      	strb	r0, [r4, #4]
    c9bc:	88c8      	ldrh	r0, [r1, #6]
    c9be:	0a00      	lsrs	r0, r0, #8
    c9c0:	7160      	strb	r0, [r4, #5]
    c9c2:	6888      	ldr	r0, [r1, #8]
    c9c4:	f8c4 0006 	str.w	r0, [r4, #6]
    c9c8:	68c8      	ldr	r0, [r1, #12]
    c9ca:	f8c4 000a 	str.w	r0, [r4, #10]
    c9ce:	200c      	movs	r0, #12
    c9d0:	e112      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c9d2:	7022      	strb	r2, [r4, #0]
    c9d4:	2003      	movs	r0, #3
    c9d6:	70a0      	strb	r0, [r4, #2]
    c9d8:	7908      	ldrb	r0, [r1, #4]
    c9da:	70e0      	strb	r0, [r4, #3]
    c9dc:	7988      	ldrb	r0, [r1, #6]
    c9de:	7120      	strb	r0, [r4, #4]
    c9e0:	88c8      	ldrh	r0, [r1, #6]
    c9e2:	0a00      	lsrs	r0, r0, #8
    c9e4:	7160      	strb	r0, [r4, #5]
    c9e6:	7a08      	ldrb	r0, [r1, #8]
    c9e8:	71a0      	strb	r0, [r4, #6]
    c9ea:	8908      	ldrh	r0, [r1, #8]
    c9ec:	0a00      	lsrs	r0, r0, #8
    c9ee:	71e0      	strb	r0, [r4, #7]
    c9f0:	7a88      	ldrb	r0, [r1, #10]
    c9f2:	7220      	strb	r0, [r4, #8]
    c9f4:	8948      	ldrh	r0, [r1, #10]
    c9f6:	0a00      	lsrs	r0, r0, #8
    c9f8:	7260      	strb	r0, [r4, #9]
    c9fa:	7b08      	ldrb	r0, [r1, #12]
    c9fc:	72a0      	strb	r0, [r4, #10]
    c9fe:	8988      	ldrh	r0, [r1, #12]
    ca00:	0a00      	lsrs	r0, r0, #8
    ca02:	72e0      	strb	r0, [r4, #11]
    ca04:	e0d2      	b.n	cbac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    ca06:	7022      	strb	r2, [r4, #0]
    ca08:	70a7      	strb	r7, [r4, #2]
    ca0a:	7908      	ldrb	r0, [r1, #4]
    ca0c:	70e0      	strb	r0, [r4, #3]
    ca0e:	8888      	ldrh	r0, [r1, #4]
    ca10:	0a00      	lsrs	r0, r0, #8
    ca12:	7120      	strb	r0, [r4, #4]
    ca14:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ca18:	f8c4 0005 	str.w	r0, [r4, #5]
    ca1c:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ca20:	f8c4 0009 	str.w	r0, [r4, #9]
    ca24:	89c8      	ldrh	r0, [r1, #14]
    ca26:	f8a4 000d 	strh.w	r0, [r4, #13]
    ca2a:	e0e4      	b.n	cbf6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38c>
    ca2c:	2011      	movs	r0, #17
    ca2e:	e047      	b.n	cac0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x256>
    ca30:	7027      	strb	r7, [r4, #0]
    ca32:	7908      	ldrb	r0, [r1, #4]
    ca34:	70a0      	strb	r0, [r4, #2]
    ca36:	7948      	ldrb	r0, [r1, #5]
    ca38:	70e0      	strb	r0, [r4, #3]
    ca3a:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ca3e:	0a00      	lsrs	r0, r0, #8
    ca40:	7120      	strb	r0, [r4, #4]
    ca42:	79c8      	ldrb	r0, [r1, #7]
    ca44:	e076      	b.n	cb34 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    ca46:	2008      	movs	r0, #8
    ca48:	7020      	strb	r0, [r4, #0]
    ca4a:	7908      	ldrb	r0, [r1, #4]
    ca4c:	70a0      	strb	r0, [r4, #2]
    ca4e:	7988      	ldrb	r0, [r1, #6]
    ca50:	70e0      	strb	r0, [r4, #3]
    ca52:	88c8      	ldrh	r0, [r1, #6]
    ca54:	0a00      	lsrs	r0, r0, #8
    ca56:	7120      	strb	r0, [r4, #4]
    ca58:	7a08      	ldrb	r0, [r1, #8]
    ca5a:	e06b      	b.n	cb34 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    ca5c:	e0b6      	b.n	cbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x362>
    ca5e:	e08a      	b.n	cb76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    ca60:	e06b      	b.n	cb3a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d0>
    ca62:	e096      	b.n	cb92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ca64:	e0a4      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x346>
    ca66:	e05d      	b.n	cb24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    ca68:	e045      	b.n	caf6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28c>
    ca6a:	e041      	b.n	caf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    ca6c:	e030      	b.n	cad0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x266>
    ca6e:	e011      	b.n	ca94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22a>
    ca70:	e00d      	b.n	ca8e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    ca72:	e024      	b.n	cabe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x254>
    ca74:	e01b      	b.n	caae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    ca76:	e7ff      	b.n	ca78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20e>
    ca78:	2030      	movs	r0, #48	; 0x30
    ca7a:	7020      	strb	r0, [r4, #0]
    ca7c:	7908      	ldrb	r0, [r1, #4]
    ca7e:	70a0      	strb	r0, [r4, #2]
    ca80:	7988      	ldrb	r0, [r1, #6]
    ca82:	70e0      	strb	r0, [r4, #3]
    ca84:	88c8      	ldrh	r0, [r1, #6]
    ca86:	0a00      	lsrs	r0, r0, #8
    ca88:	7120      	strb	r0, [r4, #4]
    ca8a:	2003      	movs	r0, #3
    ca8c:	e0b4      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    ca8e:	7022      	strb	r2, [r4, #0]
    ca90:	2007      	movs	r0, #7
    ca92:	e054      	b.n	cb3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d4>
    ca94:	7022      	strb	r2, [r4, #0]
    ca96:	70a6      	strb	r6, [r4, #2]
    ca98:	7908      	ldrb	r0, [r1, #4]
    ca9a:	70e0      	strb	r0, [r4, #3]
    ca9c:	7988      	ldrb	r0, [r1, #6]
    ca9e:	7120      	strb	r0, [r4, #4]
    caa0:	88c8      	ldrh	r0, [r1, #6]
    caa2:	0a00      	lsrs	r0, r0, #8
    caa4:	7160      	strb	r0, [r4, #5]
    caa6:	7a08      	ldrb	r0, [r1, #8]
    caa8:	71a0      	strb	r0, [r4, #6]
    caaa:	7a48      	ldrb	r0, [r1, #9]
    caac:	e01d      	b.n	caea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    caae:	4620      	mov	r0, r4
    cab0:	1d09      	adds	r1, r1, #4
    cab2:	f7f7 fead 	bl	4810 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb0>
    cab6:	2800      	cmp	r0, #0
    cab8:	d109      	bne.n	cace <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x264>
    caba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cabe:	2057      	movs	r0, #87	; 0x57
    cac0:	7020      	strb	r0, [r4, #0]
    cac2:	7908      	ldrb	r0, [r1, #4]
    cac4:	70a0      	strb	r0, [r4, #2]
    cac6:	8888      	ldrh	r0, [r1, #4]
    cac8:	0a00      	lsrs	r0, r0, #8
    caca:	70e0      	strb	r0, [r4, #3]
    cacc:	2002      	movs	r0, #2
    cace:	e093      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cad0:	7022      	strb	r2, [r4, #0]
    cad2:	2012      	movs	r0, #18
    cad4:	70a0      	strb	r0, [r4, #2]
    cad6:	7908      	ldrb	r0, [r1, #4]
    cad8:	70e0      	strb	r0, [r4, #3]
    cada:	7948      	ldrb	r0, [r1, #5]
    cadc:	7120      	strb	r0, [r4, #4]
    cade:	7988      	ldrb	r0, [r1, #6]
    cae0:	7160      	strb	r0, [r4, #5]
    cae2:	88c8      	ldrh	r0, [r1, #6]
    cae4:	0a00      	lsrs	r0, r0, #8
    cae6:	71a0      	strb	r0, [r4, #6]
    cae8:	7a08      	ldrb	r0, [r1, #8]
    caea:	71e0      	strb	r0, [r4, #7]
    caec:	2006      	movs	r0, #6
    caee:	e083      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    caf0:	7022      	strb	r2, [r4, #0]
    caf2:	2020      	movs	r0, #32
    caf4:	e041      	b.n	cb7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x310>
    caf6:	7022      	strb	r2, [r4, #0]
    caf8:	2021      	movs	r0, #33	; 0x21
    cafa:	70a0      	strb	r0, [r4, #2]
    cafc:	7908      	ldrb	r0, [r1, #4]
    cafe:	70e0      	strb	r0, [r4, #3]
    cb00:	7948      	ldrb	r0, [r1, #5]
    cb02:	7120      	strb	r0, [r4, #4]
    cb04:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cb08:	0a00      	lsrs	r0, r0, #8
    cb0a:	7160      	strb	r0, [r4, #5]
    cb0c:	79c8      	ldrb	r0, [r1, #7]
    cb0e:	71a0      	strb	r0, [r4, #6]
    cb10:	7a08      	ldrb	r0, [r1, #8]
    cb12:	71e0      	strb	r0, [r4, #7]
    cb14:	7a48      	ldrb	r0, [r1, #9]
    cb16:	7220      	strb	r0, [r4, #8]
    cb18:	7a88      	ldrb	r0, [r1, #10]
    cb1a:	7260      	strb	r0, [r4, #9]
    cb1c:	7ac8      	ldrb	r0, [r1, #11]
    cb1e:	72a0      	strb	r0, [r4, #10]
    cb20:	2009      	movs	r0, #9
    cb22:	e069      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb24:	7023      	strb	r3, [r4, #0]
    cb26:	20a1      	movs	r0, #161	; 0xa1
    cb28:	70a0      	strb	r0, [r4, #2]
    cb2a:	7908      	ldrb	r0, [r1, #4]
    cb2c:	70e0      	strb	r0, [r4, #3]
    cb2e:	7948      	ldrb	r0, [r1, #5]
    cb30:	7120      	strb	r0, [r4, #4]
    cb32:	2000      	movs	r0, #0
    cb34:	7160      	strb	r0, [r4, #5]
    cb36:	2004      	movs	r0, #4
    cb38:	e05e      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb3a:	7023      	strb	r3, [r4, #0]
    cb3c:	20a2      	movs	r0, #162	; 0xa2
    cb3e:	70a0      	strb	r0, [r4, #2]
    cb40:	7908      	ldrb	r0, [r1, #4]
    cb42:	70e0      	strb	r0, [r4, #3]
    cb44:	8888      	ldrh	r0, [r1, #4]
    cb46:	0a00      	lsrs	r0, r0, #8
    cb48:	7120      	strb	r0, [r4, #4]
    cb4a:	7988      	ldrb	r0, [r1, #6]
    cb4c:	7160      	strb	r0, [r4, #5]
    cb4e:	88c8      	ldrh	r0, [r1, #6]
    cb50:	0a00      	lsrs	r0, r0, #8
    cb52:	71a0      	strb	r0, [r4, #6]
    cb54:	7a08      	ldrb	r0, [r1, #8]
    cb56:	71e0      	strb	r0, [r4, #7]
    cb58:	8908      	ldrh	r0, [r1, #8]
    cb5a:	0a00      	lsrs	r0, r0, #8
    cb5c:	7220      	strb	r0, [r4, #8]
    cb5e:	7a88      	ldrb	r0, [r1, #10]
    cb60:	7260      	strb	r0, [r4, #9]
    cb62:	8948      	ldrh	r0, [r1, #10]
    cb64:	0a00      	lsrs	r0, r0, #8
    cb66:	72a0      	strb	r0, [r4, #10]
    cb68:	7b08      	ldrb	r0, [r1, #12]
    cb6a:	72e0      	strb	r0, [r4, #11]
    cb6c:	8988      	ldrh	r0, [r1, #12]
    cb6e:	0a00      	lsrs	r0, r0, #8
    cb70:	7320      	strb	r0, [r4, #12]
    cb72:	200b      	movs	r0, #11
    cb74:	e040      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb76:	7023      	strb	r3, [r4, #0]
    cb78:	20a3      	movs	r0, #163	; 0xa3
    cb7a:	70a0      	strb	r0, [r4, #2]
    cb7c:	7908      	ldrb	r0, [r1, #4]
    cb7e:	70e0      	strb	r0, [r4, #3]
    cb80:	8888      	ldrh	r0, [r1, #4]
    cb82:	0a00      	lsrs	r0, r0, #8
    cb84:	7120      	strb	r0, [r4, #4]
    cb86:	7988      	ldrb	r0, [r1, #6]
    cb88:	7160      	strb	r0, [r4, #5]
    cb8a:	79c8      	ldrb	r0, [r1, #7]
    cb8c:	71a0      	strb	r0, [r4, #6]
    cb8e:	2005      	movs	r0, #5
    cb90:	e032      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb92:	7022      	strb	r2, [r4, #0]
    cb94:	70a5      	strb	r5, [r4, #2]
    cb96:	7908      	ldrb	r0, [r1, #4]
    cb98:	70e0      	strb	r0, [r4, #3]
    cb9a:	7948      	ldrb	r0, [r1, #5]
    cb9c:	7120      	strb	r0, [r4, #4]
    cb9e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cba2:	f8c4 0005 	str.w	r0, [r4, #5]
    cba6:	8948      	ldrh	r0, [r1, #10]
    cba8:	f8a4 0009 	strh.w	r0, [r4, #9]
    cbac:	200a      	movs	r0, #10
    cbae:	e023      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cbb0:	7023      	strb	r3, [r4, #0]
    cbb2:	20a4      	movs	r0, #164	; 0xa4
    cbb4:	70a0      	strb	r0, [r4, #2]
    cbb6:	7908      	ldrb	r0, [r1, #4]
    cbb8:	70e0      	strb	r0, [r4, #3]
    cbba:	8888      	ldrh	r0, [r1, #4]
    cbbc:	0a00      	lsrs	r0, r0, #8
    cbbe:	7120      	strb	r0, [r4, #4]
    cbc0:	7988      	ldrb	r0, [r1, #6]
    cbc2:	7160      	strb	r0, [r4, #5]
    cbc4:	79c8      	ldrb	r0, [r1, #7]
    cbc6:	71a0      	strb	r0, [r4, #6]
    cbc8:	2007      	movs	r0, #7
    cbca:	e015      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cbcc:	7023      	strb	r3, [r4, #0]
    cbce:	2080      	movs	r0, #128	; 0x80
    cbd0:	70a0      	strb	r0, [r4, #2]
    cbd2:	888a      	ldrh	r2, [r1, #4]
    cbd4:	f8a4 2003 	strh.w	r2, [r4, #3]
    cbd8:	88ca      	ldrh	r2, [r1, #6]
    cbda:	f8a4 2005 	strh.w	r2, [r4, #5]
    cbde:	7a0a      	ldrb	r2, [r1, #8]
    cbe0:	71e2      	strb	r2, [r4, #7]
    cbe2:	894a      	ldrh	r2, [r1, #10]
    cbe4:	8122      	strh	r2, [r4, #8]
    cbe6:	898a      	ldrh	r2, [r1, #12]
    cbe8:	8162      	strh	r2, [r4, #10]
    cbea:	89ca      	ldrh	r2, [r1, #14]
    cbec:	81a2      	strh	r2, [r4, #12]
    cbee:	7c09      	ldrb	r1, [r1, #16]
    cbf0:	f001 0101 	and.w	r1, r1, #1
    cbf4:	73a1      	strb	r1, [r4, #14]
    cbf6:	200d      	movs	r0, #13
    cbf8:	7060      	strb	r0, [r4, #1]
    cbfa:	1c80      	adds	r0, r0, #2
    cbfc:	e75d      	b.n	caba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>

0000cbfe <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    cbfe:	223e      	movs	r2, #62	; 0x3e
    cc00:	7002      	strb	r2, [r0, #0]
    cc02:	2201      	movs	r2, #1
    cc04:	7082      	strb	r2, [r0, #2]
    cc06:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cc0a:	70c2      	strb	r2, [r0, #3]
    cc0c:	788a      	ldrb	r2, [r1, #2]
    cc0e:	7102      	strb	r2, [r0, #4]
    cc10:	884a      	ldrh	r2, [r1, #2]
    cc12:	0a12      	lsrs	r2, r2, #8
    cc14:	7142      	strb	r2, [r0, #5]
    cc16:	790a      	ldrb	r2, [r1, #4]
    cc18:	7182      	strb	r2, [r0, #6]
    cc1a:	794a      	ldrb	r2, [r1, #5]
    cc1c:	71c2      	strb	r2, [r0, #7]
    cc1e:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cc22:	6082      	str	r2, [r0, #8]
    cc24:	894a      	ldrh	r2, [r1, #10]
    cc26:	8182      	strh	r2, [r0, #12]
    cc28:	7e0a      	ldrb	r2, [r1, #24]
    cc2a:	7382      	strb	r2, [r0, #14]
    cc2c:	8b0a      	ldrh	r2, [r1, #24]
    cc2e:	0a12      	lsrs	r2, r2, #8
    cc30:	73c2      	strb	r2, [r0, #15]
    cc32:	7e8a      	ldrb	r2, [r1, #26]
    cc34:	7402      	strb	r2, [r0, #16]
    cc36:	8b4a      	ldrh	r2, [r1, #26]
    cc38:	0a12      	lsrs	r2, r2, #8
    cc3a:	7442      	strb	r2, [r0, #17]
    cc3c:	7f0a      	ldrb	r2, [r1, #28]
    cc3e:	7482      	strb	r2, [r0, #18]
    cc40:	8b8a      	ldrh	r2, [r1, #28]
    cc42:	0a12      	lsrs	r2, r2, #8
    cc44:	74c2      	strb	r2, [r0, #19]
    cc46:	7f89      	ldrb	r1, [r1, #30]
    cc48:	7501      	strb	r1, [r0, #20]
    cc4a:	2113      	movs	r1, #19
    cc4c:	7041      	strb	r1, [r0, #1]
    cc4e:	4608      	mov	r0, r1
    cc50:	4770      	bx	lr
    cc52:	094a      	lsrs	r2, r1, #5
    cc54:	f001 011f 	and.w	r1, r1, #31
    cc58:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cc5c:	40c8      	lsrs	r0, r1
    cc5e:	f000 0001 	and.w	r0, r0, #1
    cc62:	4770      	bx	lr

0000cc64 <sdc_hci_data_put>:
    cc64:	b510      	push	{r4, lr}
    cc66:	f06f 0415 	mvn.w	r4, #21
    cc6a:	b120      	cbz	r0, cc76 <sdc_hci_data_put+0x12>
    cc6c:	f7ff fd98 	bl	c7a0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cc70:	b108      	cbz	r0, cc76 <sdc_hci_data_put+0x12>
    cc72:	2000      	movs	r0, #0
    cc74:	bd10      	pop	{r4, pc}
    cc76:	4620      	mov	r0, r4
    cc78:	bd10      	pop	{r4, pc}

0000cc7a <sdc_hci_get>:
    cc7a:	b510      	push	{r4, lr}
    cc7c:	460c      	mov	r4, r1
    cc7e:	b130      	cbz	r0, cc8e <sdc_hci_get+0x14>
    cc80:	b12c      	cbz	r4, cc8e <sdc_hci_get+0x14>
    cc82:	f7f7 fd6d 	bl	4760 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cc86:	b128      	cbz	r0, cc94 <sdc_hci_get+0x1a>
    cc88:	7020      	strb	r0, [r4, #0]
    cc8a:	2000      	movs	r0, #0
    cc8c:	bd10      	pop	{r4, pc}
    cc8e:	f06f 0015 	mvn.w	r0, #21
    cc92:	bd10      	pop	{r4, pc}
    cc94:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cc98:	bd10      	pop	{r4, pc}

0000cc9a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cc9a:	f003 b9b1 	b.w	10000 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cc9e <sdc_hci_cmd_cb_read_transmit_power_level>:
    cc9e:	f003 b9fd 	b.w	1009c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cca2 <sdc_hci_cmd_cb_set_event_mask>:
    cca2:	b510      	push	{r4, lr}
    cca4:	f7f7 fe04 	bl	48b0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cca8:	2000      	movs	r0, #0
    ccaa:	bd10      	pop	{r4, pc}

0000ccac <sdc_hci_cmd_cb_set_event_mask_page_2>:
    ccac:	b510      	push	{r4, lr}
    ccae:	f7f7 fe0f 	bl	48d0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    ccb2:	2000      	movs	r0, #0
    ccb4:	bd10      	pop	{r4, pc}

0000ccb6 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    ccb6:	f003 ba0d 	b.w	100d4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000ccba <sdc_hci_cmd_vs_conn_event_extend>:
    ccba:	b508      	push	{r3, lr}
    ccbc:	7800      	ldrb	r0, [r0, #0]
    ccbe:	f88d 0000 	strb.w	r0, [sp]
    ccc2:	4668      	mov	r0, sp
    ccc4:	f003 f8bd 	bl	fe42 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    ccc8:	bd08      	pop	{r3, pc}

0000ccca <sdc_hci_cmd_vs_conn_update>:
    ccca:	2001      	movs	r0, #1
    cccc:	4770      	bx	lr

0000ccce <sdc_hci_cmd_vs_event_length_set>:
    ccce:	f7fd b9d5 	b.w	a07c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ccd2 <sdc_hci_cmd_vs_llpm_mode_set>:
    ccd2:	2001      	movs	r0, #1
    ccd4:	4770      	bx	lr

0000ccd6 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    ccd6:	7881      	ldrb	r1, [r0, #2]
    ccd8:	8800      	ldrh	r0, [r0, #0]
    ccda:	f003 b865 	b.w	fda8 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000ccde <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ccde:	7800      	ldrb	r0, [r0, #0]
    cce0:	b100      	cbz	r0, cce4 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    cce2:	2001      	movs	r0, #1
    cce4:	f003 b85b 	b.w	fd9e <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000cce8 <sdc_hci_cmd_vs_set_adv_randomness>:
    cce8:	f003 b888 	b.w	fdfc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000ccec <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    ccec:	b510      	push	{r4, lr}
    ccee:	4604      	mov	r4, r0
    ccf0:	f7f7 f9d2 	bl	4098 <mpsl_temperature_get>
    ccf4:	17c1      	asrs	r1, r0, #31
    ccf6:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ccfa:	1080      	asrs	r0, r0, #2
    ccfc:	287f      	cmp	r0, #127	; 0x7f
    ccfe:	dd01      	ble.n	cd04 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    cd00:	207f      	movs	r0, #127	; 0x7f
    cd02:	e004      	b.n	cd0e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cd04:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    cd08:	4288      	cmp	r0, r1
    cd0a:	da00      	bge.n	cd0e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cd0c:	4608      	mov	r0, r1
    cd0e:	7020      	strb	r0, [r4, #0]
    cd10:	2000      	movs	r0, #0
    cd12:	bd10      	pop	{r4, pc}

0000cd14 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    cd14:	b570      	push	{r4, r5, r6, lr}
    cd16:	4605      	mov	r5, r0
    cd18:	2210      	movs	r2, #16
    cd1a:	2100      	movs	r1, #0
    cd1c:	f7ff fc37 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd20:	2210      	movs	r2, #16
    cd22:	2100      	movs	r1, #0
    cd24:	f105 0010 	add.w	r0, r5, #16
    cd28:	f7ff fc31 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd2c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    cd30:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    cd34:	1c40      	adds	r0, r0, #1
    cd36:	d10b      	bne.n	cd50 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd38:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cd3c:	1c40      	adds	r0, r0, #1
    cd3e:	d107      	bne.n	cd50 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd40:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cd44:	1c40      	adds	r0, r0, #1
    cd46:	d103      	bne.n	cd50 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd48:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    cd4c:	1c40      	adds	r0, r0, #1
    cd4e:	d00b      	beq.n	cd68 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    cd50:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cd54:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cd58:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    cd5c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    cd60:	612a      	str	r2, [r5, #16]
    cd62:	6168      	str	r0, [r5, #20]
    cd64:	61a9      	str	r1, [r5, #24]
    cd66:	61eb      	str	r3, [r5, #28]
    cd68:	2000      	movs	r0, #0
    cd6a:	f7f8 fac7 	bl	52fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cd6e:	b918      	cbnz	r0, cd78 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    cd70:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cd74:	07c0      	lsls	r0, r0, #31
    cd76:	d118      	bne.n	cdaa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cd78:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    cd7c:	1c40      	adds	r0, r0, #1
    cd7e:	d10b      	bne.n	cd98 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd80:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    cd84:	1c40      	adds	r0, r0, #1
    cd86:	d107      	bne.n	cd98 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd88:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    cd8c:	1c40      	adds	r0, r0, #1
    cd8e:	d103      	bne.n	cd98 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd90:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cd94:	1c40      	adds	r0, r0, #1
    cd96:	d008      	beq.n	cdaa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cd98:	f854 0f90 	ldr.w	r0, [r4, #144]!
    cd9c:	6861      	ldr	r1, [r4, #4]
    cd9e:	68a2      	ldr	r2, [r4, #8]
    cda0:	68e3      	ldr	r3, [r4, #12]
    cda2:	6028      	str	r0, [r5, #0]
    cda4:	6069      	str	r1, [r5, #4]
    cda6:	60aa      	str	r2, [r5, #8]
    cda8:	60eb      	str	r3, [r5, #12]
    cdaa:	2000      	movs	r0, #0
    cdac:	bd70      	pop	{r4, r5, r6, pc}

0000cdae <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    cdae:	b538      	push	{r3, r4, r5, lr}
    cdb0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cdb4:	4604      	mov	r4, r0
    cdb6:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cdba:	1c40      	adds	r0, r0, #1
    cdbc:	d105      	bne.n	cdca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    cdbe:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cdc2:	43c0      	mvns	r0, r0
    cdc4:	0400      	lsls	r0, r0, #16
    cdc6:	0c00      	lsrs	r0, r0, #16
    cdc8:	d03e      	beq.n	ce48 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cdca:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    cdce:	07c0      	lsls	r0, r0, #31
    cdd0:	d03a      	beq.n	ce48 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cdd2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cdd6:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    cdda:	f8ad 1000 	strh.w	r1, [sp]
    cdde:	f8c4 0001 	str.w	r0, [r4, #1]
    cde2:	f8bd 0000 	ldrh.w	r0, [sp]
    cde6:	f8a4 0005 	strh.w	r0, [r4, #5]
    cdea:	79a0      	ldrb	r0, [r4, #6]
    cdec:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    cdf0:	71a0      	strb	r0, [r4, #6]
    cdf2:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    cdf6:	1c40      	adds	r0, r0, #1
    cdf8:	d00f      	beq.n	ce1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cdfa:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cdfe:	1c40      	adds	r0, r0, #1
    ce00:	d00b      	beq.n	ce1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ce02:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    ce06:	1c40      	adds	r0, r0, #1
    ce08:	d007      	beq.n	ce1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ce0a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    ce0e:	1c40      	adds	r0, r0, #1
    ce10:	d003      	beq.n	ce1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ce12:	2000      	movs	r0, #0
    ce14:	f7f8 fa72 	bl	52fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    ce18:	b140      	cbz	r0, ce2c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    ce1a:	2210      	movs	r2, #16
    ce1c:	2100      	movs	r1, #0
    ce1e:	1de0      	adds	r0, r4, #7
    ce20:	f7ff fbb5 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce24:	2001      	movs	r0, #1
    ce26:	7020      	strb	r0, [r4, #0]
    ce28:	2000      	movs	r0, #0
    ce2a:	bd38      	pop	{r3, r4, r5, pc}
    ce2c:	f855 2f90 	ldr.w	r2, [r5, #144]!
    ce30:	6869      	ldr	r1, [r5, #4]
    ce32:	68a8      	ldr	r0, [r5, #8]
    ce34:	68eb      	ldr	r3, [r5, #12]
    ce36:	f8c4 2007 	str.w	r2, [r4, #7]
    ce3a:	f8c4 100b 	str.w	r1, [r4, #11]
    ce3e:	f8c4 000f 	str.w	r0, [r4, #15]
    ce42:	f8c4 3013 	str.w	r3, [r4, #19]
    ce46:	e7ed      	b.n	ce24 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    ce48:	2000      	movs	r0, #0
    ce4a:	e7ec      	b.n	ce26 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000ce4c <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    ce4c:	f002 bfeb 	b.w	fe26 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000ce50 <sdc_hci_cmd_ip_read_bd_addr>:
    ce50:	f003 b8e7 	b.w	10022 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000ce54 <sdc_hci_cmd_ip_read_local_version_information>:
    ce54:	f7fd b920 	b.w	a098 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000ce58 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    ce58:	f002 bd87 	b.w	f96a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000ce5c <sdc_hci_cmd_le_clear_filter_accept_list>:
    ce5c:	f002 bd9c 	b.w	f998 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000ce60 <sdc_hci_cmd_le_encrypt>:
    ce60:	f002 bda4 	b.w	f9ac <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000ce64 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    ce64:	8802      	ldrh	r2, [r0, #0]
    ce66:	800a      	strh	r2, [r1, #0]
    ce68:	f002 bda9 	b.w	f9be <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000ce6c <sdc_hci_cmd_le_long_term_key_request_reply>:
    ce6c:	8802      	ldrh	r2, [r0, #0]
    ce6e:	800a      	strh	r2, [r1, #0]
    ce70:	f002 bdbe 	b.w	f9f0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000ce74 <sdc_hci_cmd_le_rand>:
    ce74:	f002 bde6 	b.w	fa44 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000ce78 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    ce78:	f002 bdea 	b.w	fa50 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000ce7c <sdc_hci_cmd_le_read_buffer_size>:
    ce7c:	f7fd b806 	b.w	9e8c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000ce80 <sdc_hci_cmd_le_read_channel_map>:
    ce80:	f7fd b80e 	b.w	9ea0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000ce84 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    ce84:	f002 be1b 	b.w	fabe <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000ce88 <sdc_hci_cmd_le_read_max_data_length>:
    ce88:	f002 bdeb 	b.w	fa62 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000ce8c <sdc_hci_cmd_le_read_phy>:
    ce8c:	f7fd b830 	b.w	9ef0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000ce90 <sdc_hci_cmd_le_read_remote_features>:
    ce90:	f002 bdf0 	b.w	fa74 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000ce94 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    ce94:	f7fd b852 	b.w	9f3c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000ce98 <sdc_hci_cmd_le_read_transmit_power>:
    ce98:	f002 be08 	b.w	faac <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000ce9c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    ce9c:	f002 be13 	b.w	fac6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cea0 <sdc_hci_cmd_le_set_adv_data>:
    cea0:	f002 be26 	b.w	faf0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000cea4 <sdc_hci_cmd_le_set_adv_enable>:
    cea4:	f002 be39 	b.w	fb1a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000cea8 <sdc_hci_cmd_le_set_adv_params>:
    cea8:	f002 be6a 	b.w	fb80 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000ceac <sdc_hci_cmd_le_set_data_length>:
    ceac:	f002 befd 	b.w	fcaa <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000ceb0 <sdc_hci_cmd_le_set_data_related_address_changes>:
    ceb0:	f002 bf1b 	b.w	fcea <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000ceb4 <sdc_hci_cmd_le_set_default_phy>:
    ceb4:	f7fd b84c 	b.w	9f50 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000ceb8 <sdc_hci_cmd_le_set_event_mask>:
    ceb8:	b510      	push	{r4, lr}
    ceba:	f7f7 fcf1 	bl	48a0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cebe:	2000      	movs	r0, #0
    cec0:	bd10      	pop	{r4, pc}

0000cec2 <sdc_hci_cmd_le_set_phy>:
    cec2:	f002 bf1f 	b.w	fd04 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cec6 <sdc_hci_cmd_le_set_random_address>:
    cec6:	f002 bf36 	b.w	fd36 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000ceca <sdc_hci_cmd_le_set_scan_response_data>:
    ceca:	f002 bf42 	b.w	fd52 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000cece <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cece:	f002 bf55 	b.w	fd7c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000ced2 <sdc_hci_cmd_lc_disconnect>:
    ced2:	f002 bcfc 	b.w	f8ce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000ced6 <sdc_hci_cmd_lc_read_remote_version_information>:
    ced6:	f003 b8b0 	b.w	1003a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    ceda:	b570      	push	{r4, r5, r6, lr}
    cedc:	880b      	ldrh	r3, [r1, #0]
    cede:	7cc4      	ldrb	r4, [r0, #19]
    cee0:	f100 0518 	add.w	r5, r0, #24
    cee4:	f3c3 060e 	ubfx	r6, r3, #0, #15
    cee8:	8802      	ldrh	r2, [r0, #0]
    ceea:	4435      	add	r5, r6
    ceec:	1d64      	adds	r4, r4, #5
    ceee:	882d      	ldrh	r5, [r5, #0]
    cef0:	4422      	add	r2, r4
    cef2:	b292      	uxth	r2, r2
    cef4:	4425      	add	r5, r4
    cef6:	1e54      	subs	r4, r2, #1
    cef8:	442c      	add	r4, r5
    cefa:	fb94 f4f2 	sdiv	r4, r4, r2
    cefe:	fb02 6204 	mla	r2, r2, r4, r6
    cf02:	8840      	ldrh	r0, [r0, #2]
    cf04:	b292      	uxth	r2, r2
    cf06:	4290      	cmp	r0, r2
    cf08:	d903      	bls.n	cf12 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    cf0a:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    cf0e:	4310      	orrs	r0, r2
    cf10:	e002      	b.n	cf18 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    cf12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cf16:	4398      	bics	r0, r3
    cf18:	8008      	strh	r0, [r1, #0]
    cf1a:	bd70      	pop	{r4, r5, r6, pc}
    cf1c:	0442      	lsls	r2, r0, #17
    cf1e:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    cf22:	d107      	bne.n	cf34 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    cf24:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    cf28:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    cf2c:	4288      	cmp	r0, r1
    cf2e:	d001      	beq.n	cf34 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    cf30:	2001      	movs	r0, #1
    cf32:	4770      	bx	lr
    cf34:	2000      	movs	r0, #0
    cf36:	4770      	bx	lr

0000cf38 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    cf38:	8881      	ldrh	r1, [r0, #4]
    cf3a:	88c0      	ldrh	r0, [r0, #6]
    cf3c:	4288      	cmp	r0, r1
    cf3e:	d101      	bne.n	cf44 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    cf40:	2001      	movs	r0, #1
    cf42:	4770      	bx	lr
    cf44:	2000      	movs	r0, #0
    cf46:	4770      	bx	lr

0000cf48 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    cf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf4c:	460f      	mov	r7, r1
    cf4e:	4604      	mov	r4, r0
    cf50:	f100 0118 	add.w	r1, r0, #24
    cf54:	8880      	ldrh	r0, [r0, #4]
    cf56:	2600      	movs	r6, #0
    cf58:	f3c0 000e 	ubfx	r0, r0, #0, #15
    cf5c:	1845      	adds	r5, r0, r1
    cf5e:	603e      	str	r6, [r7, #0]
    cf60:	89e0      	ldrh	r0, [r4, #14]
    cf62:	2800      	cmp	r0, #0
    cf64:	d016      	beq.n	cf94 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    cf66:	8961      	ldrh	r1, [r4, #10]
    cf68:	4408      	add	r0, r1
    cf6a:	b280      	uxth	r0, r0
    cf6c:	8160      	strh	r0, [r4, #10]
    cf6e:	8829      	ldrh	r1, [r5, #0]
    cf70:	4288      	cmp	r0, r1
    cf72:	d905      	bls.n	cf80 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    cf74:	f44f 71a9 	mov.w	r1, #338	; 0x152
    cf78:	f04f 0014 	mov.w	r0, #20
    cf7c:	f7f7 faf6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf80:	d106      	bne.n	cf90 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    cf82:	f104 0104 	add.w	r1, r4, #4
    cf86:	4620      	mov	r0, r4
    cf88:	f7ff ffa7 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cf8c:	8166      	strh	r6, [r4, #10]
    cf8e:	603d      	str	r5, [r7, #0]
    cf90:	81e6      	strh	r6, [r4, #14]
    cf92:	2001      	movs	r0, #1
    cf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cf98 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    cf98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf9c:	4604      	mov	r4, r0
    cf9e:	f100 0318 	add.w	r3, r0, #24
    cfa2:	88c0      	ldrh	r0, [r0, #6]
    cfa4:	460e      	mov	r6, r1
    cfa6:	f3c0 070e 	ubfx	r7, r0, #0, #15
    cfaa:	8a20      	ldrh	r0, [r4, #16]
    cfac:	19d9      	adds	r1, r3, r7
    cfae:	b108      	cbz	r0, cfb4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    cfb0:	42b0      	cmp	r0, r6
    cfb2:	d202      	bcs.n	cfba <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    cfb4:	2000      	movs	r0, #0
    cfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cfba:	89a0      	ldrh	r0, [r4, #12]
    cfbc:	2500      	movs	r5, #0
    cfbe:	b140      	cbz	r0, cfd2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    cfc0:	f8b1 c000 	ldrh.w	ip, [r1]
    cfc4:	4560      	cmp	r0, ip
    cfc6:	d006      	beq.n	cfd6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    cfc8:	f240 2105 	movw	r1, #517	; 0x205
    cfcc:	2014      	movs	r0, #20
    cfce:	f7f7 facd 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfd2:	800d      	strh	r5, [r1, #0]
    cfd4:	e00e      	b.n	cff4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    cfd6:	f894 c013 	ldrb.w	ip, [r4, #19]
    cfda:	4418      	add	r0, r3
    cfdc:	f10c 0c05 	add.w	ip, ip, #5
    cfe0:	44bc      	add	ip, r7
    cfe2:	4460      	add	r0, ip
    cfe4:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    cfe8:	f820 cc03 	strh.w	ip, [r0, #-3]
    cfec:	f894 c016 	ldrb.w	ip, [r4, #22]
    cff0:	f800 cc01 	strb.w	ip, [r0, #-1]
    cff4:	89a0      	ldrh	r0, [r4, #12]
    cff6:	4430      	add	r0, r6
    cff8:	81a0      	strh	r0, [r4, #12]
    cffa:	8808      	ldrh	r0, [r1, #0]
    cffc:	4430      	add	r0, r6
    cffe:	8008      	strh	r0, [r1, #0]
    d000:	b12a      	cbz	r2, d00e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d002:	1da1      	adds	r1, r4, #6
    d004:	4620      	mov	r0, r4
    d006:	f7ff ff68 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d00a:	81a5      	strh	r5, [r4, #12]
    d00c:	e00a      	b.n	d024 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d00e:	7ce0      	ldrb	r0, [r4, #19]
    d010:	89a1      	ldrh	r1, [r4, #12]
    d012:	1d40      	adds	r0, r0, #5
    d014:	4438      	add	r0, r7
    d016:	4419      	add	r1, r3
    d018:	4408      	add	r0, r1
    d01a:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d01e:	82a1      	strh	r1, [r4, #20]
    d020:	7880      	ldrb	r0, [r0, #2]
    d022:	75a0      	strb	r0, [r4, #22]
    d024:	8225      	strh	r5, [r4, #16]
    d026:	2001      	movs	r0, #1
    d028:	e7c5      	b.n	cfb6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d02a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d02a:	1c80      	adds	r0, r0, #2
    d02c:	4770      	bx	lr

0000d02e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d02e:	b510      	push	{r4, lr}
    d030:	4604      	mov	r4, r0
    d032:	88c0      	ldrh	r0, [r0, #6]
    d034:	88a1      	ldrh	r1, [r4, #4]
    d036:	4281      	cmp	r1, r0
    d038:	d003      	beq.n	d042 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d03a:	8960      	ldrh	r0, [r4, #10]
    d03c:	b908      	cbnz	r0, d042 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d03e:	89e0      	ldrh	r0, [r4, #14]
    d040:	b108      	cbz	r0, d046 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d042:	2000      	movs	r0, #0
    d044:	bd10      	pop	{r4, pc}
    d046:	1d21      	adds	r1, r4, #4
    d048:	4620      	mov	r0, r4
    d04a:	f7ff ff46 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d04e:	2000      	movs	r0, #0
    d050:	81e0      	strh	r0, [r4, #14]
    d052:	2001      	movs	r0, #1
    d054:	bd10      	pop	{r4, pc}

0000d056 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d056:	b510      	push	{r4, lr}
    d058:	4604      	mov	r4, r0
    d05a:	f100 0218 	add.w	r2, r0, #24
    d05e:	88c0      	ldrh	r0, [r0, #6]
    d060:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d064:	4402      	add	r2, r0
    d066:	8820      	ldrh	r0, [r4, #0]
    d068:	2845      	cmp	r0, #69	; 0x45
    d06a:	d200      	bcs.n	d06e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d06c:	2045      	movs	r0, #69	; 0x45
    d06e:	4288      	cmp	r0, r1
    d070:	d204      	bcs.n	d07c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d072:	f240 1105 	movw	r1, #261	; 0x105
    d076:	2014      	movs	r0, #20
    d078:	f7f7 fa78 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d07c:	7ca0      	ldrb	r0, [r4, #18]
    d07e:	2800      	cmp	r0, #0
    d080:	d003      	beq.n	d08a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d082:	8810      	ldrh	r0, [r2, #0]
    d084:	4288      	cmp	r0, r1
    d086:	d201      	bcs.n	d08c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d088:	2000      	movs	r0, #0
    d08a:	bd10      	pop	{r4, pc}
    d08c:	8011      	strh	r1, [r2, #0]
    d08e:	1da1      	adds	r1, r4, #6
    d090:	4620      	mov	r0, r4
    d092:	f7ff ff22 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d096:	2000      	movs	r0, #0
    d098:	74a0      	strb	r0, [r4, #18]
    d09a:	2001      	movs	r0, #1
    d09c:	bd10      	pop	{r4, pc}

0000d09e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d09e:	b510      	push	{r4, lr}
    d0a0:	88c4      	ldrh	r4, [r0, #6]
    d0a2:	8883      	ldrh	r3, [r0, #4]
    d0a4:	4601      	mov	r1, r0
    d0a6:	f100 0218 	add.w	r2, r0, #24
    d0aa:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d0ae:	4410      	add	r0, r2
    d0b0:	42a3      	cmp	r3, r4
    d0b2:	d002      	beq.n	d0ba <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d0b4:	8949      	ldrh	r1, [r1, #10]
    d0b6:	2900      	cmp	r1, #0
    d0b8:	d000      	beq.n	d0bc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d0ba:	2000      	movs	r0, #0
    d0bc:	bd10      	pop	{r4, pc}

0000d0be <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d0be:	8803      	ldrh	r3, [r0, #0]
    d0c0:	2b45      	cmp	r3, #69	; 0x45
    d0c2:	d200      	bcs.n	d0c6 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d0c4:	2345      	movs	r3, #69	; 0x45
    d0c6:	8013      	strh	r3, [r2, #0]
    d0c8:	88c2      	ldrh	r2, [r0, #6]
    d0ca:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d0ce:	f100 0218 	add.w	r2, r0, #24
    d0d2:	441a      	add	r2, r3
    d0d4:	600a      	str	r2, [r1, #0]
    d0d6:	8980      	ldrh	r0, [r0, #12]
    d0d8:	4770      	bx	lr

0000d0da <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d0da:	7cc0      	ldrb	r0, [r0, #19]
    d0dc:	1d40      	adds	r0, r0, #5
    d0de:	4408      	add	r0, r1
    d0e0:	1ec0      	subs	r0, r0, #3
    d0e2:	6010      	str	r0, [r2, #0]
    d0e4:	8808      	ldrh	r0, [r1, #0]
    d0e6:	4770      	bx	lr

0000d0e8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0ec:	460e      	mov	r6, r1
    d0ee:	88c1      	ldrh	r1, [r0, #6]
    d0f0:	8902      	ldrh	r2, [r0, #8]
    d0f2:	4604      	mov	r4, r0
    d0f4:	f100 0818 	add.w	r8, r0, #24
    d0f8:	8800      	ldrh	r0, [r0, #0]
    d0fa:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d0fe:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d102:	2845      	cmp	r0, #69	; 0x45
    d104:	d200      	bcs.n	d108 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d106:	2045      	movs	r0, #69	; 0x45
    d108:	42b0      	cmp	r0, r6
    d10a:	d203      	bcs.n	d114 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d10c:	21c7      	movs	r1, #199	; 0xc7
    d10e:	2014      	movs	r0, #20
    d110:	f7f7 fa2c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d114:	4610      	mov	r0, r2
    d116:	f7ff ff01 	bl	cf1c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d11a:	b110      	cbz	r0, d122 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d11c:	2000      	movs	r0, #0
    d11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d122:	42af      	cmp	r7, r5
    d124:	d908      	bls.n	d138 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d126:	7ce1      	ldrb	r1, [r4, #19]
    d128:	1b78      	subs	r0, r7, r5
    d12a:	1a40      	subs	r0, r0, r1
    d12c:	1f40      	subs	r0, r0, #5
    d12e:	4286      	cmp	r6, r0
    d130:	dd02      	ble.n	d138 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d132:	2000      	movs	r0, #0
    d134:	74a0      	strb	r0, [r4, #18]
    d136:	e7f1      	b.n	d11c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d138:	eb08 0005 	add.w	r0, r8, r5
    d13c:	2101      	movs	r1, #1
    d13e:	8006      	strh	r6, [r0, #0]
    d140:	74a1      	strb	r1, [r4, #18]
    d142:	e7ec      	b.n	d11e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d144 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d144:	b538      	push	{r3, r4, r5, lr}
    d146:	88c4      	ldrh	r4, [r0, #6]
    d148:	8881      	ldrh	r1, [r0, #4]
    d14a:	f100 0218 	add.w	r2, r0, #24
    d14e:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d152:	441a      	add	r2, r3
    d154:	42a1      	cmp	r1, r4
    d156:	d010      	beq.n	d17a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d158:	8943      	ldrh	r3, [r0, #10]
    d15a:	89c5      	ldrh	r5, [r0, #14]
    d15c:	8812      	ldrh	r2, [r2, #0]
    d15e:	442b      	add	r3, r5
    d160:	4293      	cmp	r3, r2
    d162:	d308      	bcc.n	d176 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d164:	f8ad 1000 	strh.w	r1, [sp]
    d168:	4669      	mov	r1, sp
    d16a:	f7ff feb6 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d16e:	f8bd 0000 	ldrh.w	r0, [sp]
    d172:	42a0      	cmp	r0, r4
    d174:	d001      	beq.n	d17a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d176:	2001      	movs	r0, #1
    d178:	bd38      	pop	{r3, r4, r5, pc}
    d17a:	2000      	movs	r0, #0
    d17c:	bd38      	pop	{r3, r4, r5, pc}

0000d17e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d17e:	b570      	push	{r4, r5, r6, lr}
    d180:	88c6      	ldrh	r6, [r0, #6]
    d182:	8885      	ldrh	r5, [r0, #4]
    d184:	4603      	mov	r3, r0
    d186:	f100 0418 	add.w	r4, r0, #24
    d18a:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d18e:	4420      	add	r0, r4
    d190:	42b5      	cmp	r5, r6
    d192:	d102      	bne.n	d19a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d194:	2000      	movs	r0, #0
    d196:	81d8      	strh	r0, [r3, #14]
    d198:	bd70      	pop	{r4, r5, r6, pc}
    d19a:	8804      	ldrh	r4, [r0, #0]
    d19c:	895d      	ldrh	r5, [r3, #10]
    d19e:	7cde      	ldrb	r6, [r3, #19]
    d1a0:	1b64      	subs	r4, r4, r5
    d1a2:	4435      	add	r5, r6
    d1a4:	4428      	add	r0, r5
    d1a6:	880d      	ldrh	r5, [r1, #0]
    d1a8:	b2a4      	uxth	r4, r4
    d1aa:	1c80      	adds	r0, r0, #2
    d1ac:	42a5      	cmp	r5, r4
    d1ae:	d900      	bls.n	d1b2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d1b0:	800c      	strh	r4, [r1, #0]
    d1b2:	895c      	ldrh	r4, [r3, #10]
    d1b4:	b124      	cbz	r4, d1c0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d1b6:	2400      	movs	r4, #0
    d1b8:	7014      	strb	r4, [r2, #0]
    d1ba:	8809      	ldrh	r1, [r1, #0]
    d1bc:	81d9      	strh	r1, [r3, #14]
    d1be:	bd70      	pop	{r4, r5, r6, pc}
    d1c0:	2401      	movs	r4, #1
    d1c2:	e7f9      	b.n	d1b8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d1c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1c8:	461d      	mov	r5, r3
    d1ca:	4616      	mov	r6, r2
    d1cc:	9f06      	ldr	r7, [sp, #24]
    d1ce:	460b      	mov	r3, r1
    d1d0:	4604      	mov	r4, r0
    d1d2:	463a      	mov	r2, r7
    d1d4:	4629      	mov	r1, r5
    d1d6:	4630      	mov	r0, r6
    d1d8:	f000 f839 	bl	d24e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d1dc:	4283      	cmp	r3, r0
    d1de:	d201      	bcs.n	d1e4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d1e0:	219f      	movs	r1, #159	; 0x9f
    d1e2:	e012      	b.n	d20a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d1e4:	07a0      	lsls	r0, r4, #30
    d1e6:	d001      	beq.n	d1ec <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d1e8:	21a0      	movs	r1, #160	; 0xa0
    d1ea:	e00e      	b.n	d20a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d1ec:	2218      	movs	r2, #24
    d1ee:	2100      	movs	r1, #0
    d1f0:	4620      	mov	r0, r4
    d1f2:	f7ff f9cc 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d1f6:	19a8      	adds	r0, r5, r6
    d1f8:	1d40      	adds	r0, r0, #5
    d1fa:	4378      	muls	r0, r7
    d1fc:	b280      	uxth	r0, r0
    d1fe:	74e5      	strb	r5, [r4, #19]
    d200:	8060      	strh	r0, [r4, #2]
    d202:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d206:	d903      	bls.n	d210 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d208:	21a5      	movs	r1, #165	; 0xa5
    d20a:	2014      	movs	r0, #20
    d20c:	f7f7 f9ae 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d210:	8026      	strh	r6, [r4, #0]
    d212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d216 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d216:	b570      	push	{r4, r5, r6, lr}
    d218:	460b      	mov	r3, r1
    d21a:	4604      	mov	r4, r0
    d21c:	f100 0118 	add.w	r1, r0, #24
    d220:	8902      	ldrh	r2, [r0, #8]
    d222:	8880      	ldrh	r0, [r0, #4]
    d224:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d228:	440d      	add	r5, r1
    d22a:	4282      	cmp	r2, r0
    d22c:	d101      	bne.n	d232 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d22e:	2000      	movs	r0, #0
    d230:	bd70      	pop	{r4, r5, r6, pc}
    d232:	b123      	cbz	r3, d23e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d234:	7ce2      	ldrb	r2, [r4, #19]
    d236:	1ca9      	adds	r1, r5, #2
    d238:	4618      	mov	r0, r3
    d23a:	f7ff f92e 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d23e:	882d      	ldrh	r5, [r5, #0]
    d240:	f104 0108 	add.w	r1, r4, #8
    d244:	4620      	mov	r0, r4
    d246:	f7ff fe48 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d24a:	4628      	mov	r0, r5
    d24c:	bd70      	pop	{r4, r5, r6, pc}

0000d24e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d24e:	4401      	add	r1, r0
    d250:	1d49      	adds	r1, r1, #5
    d252:	4351      	muls	r1, r2
    d254:	b28a      	uxth	r2, r1
    d256:	2100      	movs	r1, #0
    d258:	2845      	cmp	r0, #69	; 0x45
    d25a:	d202      	bcs.n	d262 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d25c:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d260:	b281      	uxth	r1, r0
    d262:	3218      	adds	r2, #24
    d264:	1850      	adds	r0, r2, r1
    d266:	b280      	uxth	r0, r0
    d268:	4770      	bx	lr

0000d26a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d26a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d26e:	4688      	mov	r8, r1
    d270:	88c1      	ldrh	r1, [r0, #6]
    d272:	4604      	mov	r4, r0
    d274:	8900      	ldrh	r0, [r0, #8]
    d276:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d27a:	f104 0518 	add.w	r5, r4, #24
    d27e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d282:	eb05 0906 	add.w	r9, r5, r6
    d286:	f7ff fe49 	bl	cf1c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d28a:	2200      	movs	r2, #0
    d28c:	b998      	cbnz	r0, d2b6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d28e:	8820      	ldrh	r0, [r4, #0]
    d290:	2845      	cmp	r0, #69	; 0x45
    d292:	d200      	bcs.n	d296 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d294:	2045      	movs	r0, #69	; 0x45
    d296:	42b7      	cmp	r7, r6
    d298:	d906      	bls.n	d2a8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d29a:	7ce3      	ldrb	r3, [r4, #19]
    d29c:	1bb9      	subs	r1, r7, r6
    d29e:	1ac9      	subs	r1, r1, r3
    d2a0:	1f49      	subs	r1, r1, #5
    d2a2:	4281      	cmp	r1, r0
    d2a4:	da00      	bge.n	d2a8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d2a6:	4608      	mov	r0, r1
    d2a8:	89a1      	ldrh	r1, [r4, #12]
    d2aa:	b111      	cbz	r1, d2b2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d2ac:	f8b9 3000 	ldrh.w	r3, [r9]
    d2b0:	1ac0      	subs	r0, r0, r3
    d2b2:	4540      	cmp	r0, r8
    d2b4:	da03      	bge.n	d2be <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d2b6:	8222      	strh	r2, [r4, #16]
    d2b8:	2000      	movs	r0, #0
    d2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d2be:	7ce0      	ldrb	r0, [r4, #19]
    d2c0:	4429      	add	r1, r5
    d2c2:	1d40      	adds	r0, r0, #5
    d2c4:	4430      	add	r0, r6
    d2c6:	4408      	add	r0, r1
    d2c8:	f8a4 8010 	strh.w	r8, [r4, #16]
    d2cc:	1ec0      	subs	r0, r0, #3
    d2ce:	e7f4      	b.n	d2ba <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d2d0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d2d0:	2100      	movs	r1, #0
    d2d2:	8181      	strh	r1, [r0, #12]
    d2d4:	8201      	strh	r1, [r0, #16]
    d2d6:	4770      	bx	lr

0000d2d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d2d8:	b570      	push	{r4, r5, r6, lr}
    d2da:	2300      	movs	r3, #0
    d2dc:	f1a1 0208 	sub.w	r2, r1, #8
    d2e0:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d2e4:	42a2      	cmp	r2, r4
    d2e6:	d304      	bcc.n	d2f2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d2e8:	f240 11cd 	movw	r1, #461	; 0x1cd
    d2ec:	2015      	movs	r0, #21
    d2ee:	f7f7 f93d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2f2:	6802      	ldr	r2, [r0, #0]
    d2f4:	b90a      	cbnz	r2, d2fa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d2f6:	e01e      	b.n	d336 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d2f8:	4610      	mov	r0, r2
    d2fa:	6802      	ldr	r2, [r0, #0]
    d2fc:	8893      	ldrh	r3, [r2, #4]
    d2fe:	428b      	cmp	r3, r1
    d300:	d002      	beq.n	d308 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d302:	6813      	ldr	r3, [r2, #0]
    d304:	2b00      	cmp	r3, #0
    d306:	d1f7      	bne.n	d2f8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d308:	8894      	ldrh	r4, [r2, #4]
    d30a:	4613      	mov	r3, r2
    d30c:	428c      	cmp	r4, r1
    d30e:	d101      	bne.n	d314 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d310:	6811      	ldr	r1, [r2, #0]
    d312:	e00d      	b.n	d330 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d314:	f101 0508 	add.w	r5, r1, #8
    d318:	b2ae      	uxth	r6, r5
    d31a:	2500      	movs	r5, #0
    d31c:	42b4      	cmp	r4, r6
    d31e:	d309      	bcc.n	d334 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d320:	1a64      	subs	r4, r4, r1
    d322:	4411      	add	r1, r2
    d324:	600d      	str	r5, [r1, #0]
    d326:	808c      	strh	r4, [r1, #4]
    d328:	6802      	ldr	r2, [r0, #0]
    d32a:	6812      	ldr	r2, [r2, #0]
    d32c:	6002      	str	r2, [r0, #0]
    d32e:	600a      	str	r2, [r1, #0]
    d330:	6001      	str	r1, [r0, #0]
    d332:	e000      	b.n	d336 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d334:	2300      	movs	r3, #0
    d336:	4618      	mov	r0, r3
    d338:	bd70      	pop	{r4, r5, r6, pc}

0000d33a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d33a:	b510      	push	{r4, lr}
    d33c:	000c      	movs	r4, r1
    d33e:	d004      	beq.n	d34a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d340:	2c08      	cmp	r4, #8
    d342:	d207      	bcs.n	d354 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d344:	f240 1195 	movw	r1, #405	; 0x195
    d348:	e00a      	b.n	d360 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d34a:	b108      	cbz	r0, d350 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d34c:	2100      	movs	r1, #0
    d34e:	6001      	str	r1, [r0, #0]
    d350:	2000      	movs	r0, #0
    d352:	bd10      	pop	{r4, pc}
    d354:	b158      	cbz	r0, d36e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d356:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d35a:	d304      	bcc.n	d366 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d35c:	f240 11a7 	movw	r1, #423	; 0x1a7
    d360:	2015      	movs	r0, #21
    d362:	f7f7 f903 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d366:	b2a1      	uxth	r1, r4
    d368:	6800      	ldr	r0, [r0, #0]
    d36a:	f000 f814 	bl	d396 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d36e:	1d20      	adds	r0, r4, #4
    d370:	bd10      	pop	{r4, pc}

0000d372 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d372:	2100      	movs	r1, #0
    d374:	6802      	ldr	r2, [r0, #0]
    d376:	e003      	b.n	d380 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d378:	8893      	ldrh	r3, [r2, #4]
    d37a:	6812      	ldr	r2, [r2, #0]
    d37c:	4419      	add	r1, r3
    d37e:	b289      	uxth	r1, r1
    d380:	2a00      	cmp	r2, #0
    d382:	d1f9      	bne.n	d378 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d384:	f000 b807 	b.w	d396 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d388 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d388:	2300      	movs	r3, #0
    d38a:	600b      	str	r3, [r1, #0]
    d38c:	808a      	strh	r2, [r1, #4]
    d38e:	6802      	ldr	r2, [r0, #0]
    d390:	600a      	str	r2, [r1, #0]
    d392:	6001      	str	r1, [r0, #0]
    d394:	4770      	bx	lr
    d396:	2300      	movs	r3, #0
    d398:	6043      	str	r3, [r0, #4]
    d39a:	1d02      	adds	r2, r0, #4
    d39c:	8101      	strh	r1, [r0, #8]
    d39e:	6002      	str	r2, [r0, #0]
    d3a0:	4770      	bx	lr

0000d3a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d3a2:	b51c      	push	{r2, r3, r4, lr}
    d3a4:	4604      	mov	r4, r0
    d3a6:	2000      	movs	r0, #0
    d3a8:	9001      	str	r0, [sp, #4]
    d3aa:	9000      	str	r0, [sp, #0]
    d3ac:	f88d 4006 	strb.w	r4, [sp, #6]
    d3b0:	e00a      	b.n	d3c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d3b2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d3b6:	4621      	mov	r1, r4
    d3b8:	f7f7 fb5a 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d3bc:	b120      	cbz	r0, d3c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d3be:	f240 21a5 	movw	r1, #677	; 0x2a5
    d3c2:	2017      	movs	r0, #23
    d3c4:	f7f7 f8d2 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3c8:	4668      	mov	r0, sp
    d3ca:	f7f7 fb09 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d3ce:	2800      	cmp	r0, #0
    d3d0:	d0ef      	beq.n	d3b2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d3d2:	bd1c      	pop	{r2, r3, r4, pc}

0000d3d4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d3d4:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d3d8:	3aff      	subs	r2, #255	; 0xff
    d3da:	d001      	beq.n	d3e0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d3dc:	2902      	cmp	r1, #2
    d3de:	d301      	bcc.n	d3e4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d3e0:	2000      	movs	r0, #0
    d3e2:	4770      	bx	lr
    d3e4:	f7f7 bb76 	b.w	4ad4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d3e8:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d3ec:	3aff      	subs	r2, #255	; 0xff
    d3ee:	d001      	beq.n	d3f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d3f0:	2902      	cmp	r1, #2
    d3f2:	d301      	bcc.n	d3f8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d3f4:	2000      	movs	r0, #0
    d3f6:	4770      	bx	lr
    d3f8:	f7f7 bb94 	b.w	4b24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    d3fc:	b510      	push	{r4, lr}
    d3fe:	4604      	mov	r4, r0
    d400:	f7f7 fbdc 	bl	4bbc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    d404:	42a0      	cmp	r0, r4
    d406:	d901      	bls.n	d40c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    d408:	2001      	movs	r0, #1
    d40a:	bd10      	pop	{r4, pc}
    d40c:	2000      	movs	r0, #0
    d40e:	bd10      	pop	{r4, pc}

0000d410 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d410:	b570      	push	{r4, r5, r6, lr}
    d412:	460e      	mov	r6, r1
    d414:	461d      	mov	r5, r3
    d416:	4611      	mov	r1, r2
    d418:	f000 f813 	bl	d442 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d41c:	4604      	mov	r4, r0
    d41e:	4629      	mov	r1, r5
    d420:	4630      	mov	r0, r6
    d422:	f000 f804 	bl	d42e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d426:	4420      	add	r0, r4
    d428:	1d00      	adds	r0, r0, #4
    d42a:	b280      	uxth	r0, r0
    d42c:	bd70      	pop	{r4, r5, r6, pc}
    d42e:	b510      	push	{r4, lr}
    d430:	460a      	mov	r2, r1
    d432:	2109      	movs	r1, #9
    d434:	f7ff ff0b 	bl	d24e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d438:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d43c:	1cc0      	adds	r0, r0, #3
    d43e:	4008      	ands	r0, r1
    d440:	bd10      	pop	{r4, pc}
    d442:	b510      	push	{r4, lr}
    d444:	460a      	mov	r2, r1
    d446:	210a      	movs	r1, #10
    d448:	f7ff ff01 	bl	d24e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d44c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d450:	1cc0      	adds	r0, r0, #3
    d452:	4008      	ands	r0, r1
    d454:	bd10      	pop	{r4, pc}
    d456:	b109      	cbz	r1, d45c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d458:	2100      	movs	r1, #0
    d45a:	e000      	b.n	d45e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d45c:	2102      	movs	r1, #2
    d45e:	1843      	adds	r3, r0, r1
    d460:	7d1a      	ldrb	r2, [r3, #20]
    d462:	2a02      	cmp	r2, #2
    d464:	d008      	beq.n	d478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d466:	7d5b      	ldrb	r3, [r3, #21]
    d468:	2b02      	cmp	r3, #2
    d46a:	d009      	beq.n	d480 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d46c:	2a03      	cmp	r2, #3
    d46e:	d003      	beq.n	d478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d470:	2b03      	cmp	r3, #3
    d472:	d005      	beq.n	d480 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d474:	2000      	movs	r0, #0
    d476:	4770      	bx	lr
    d478:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d47c:	8b00      	ldrh	r0, [r0, #24]
    d47e:	4770      	bx	lr
    d480:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d484:	8b40      	ldrh	r0, [r0, #26]
    d486:	4770      	bx	lr
    d488:	b109      	cbz	r1, d48e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d48a:	2100      	movs	r1, #0
    d48c:	e000      	b.n	d490 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d48e:	2102      	movs	r1, #2
    d490:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d494:	8b01      	ldrh	r1, [r0, #24]
    d496:	b911      	cbnz	r1, d49e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d498:	8b40      	ldrh	r0, [r0, #26]
    d49a:	2800      	cmp	r0, #0
    d49c:	d000      	beq.n	d4a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d49e:	2001      	movs	r0, #1
    d4a0:	4770      	bx	lr
    d4a2:	b538      	push	{r3, r4, r5, lr}
    d4a4:	7883      	ldrb	r3, [r0, #2]
    d4a6:	f88d 3000 	strb.w	r3, [sp]
    d4aa:	9b00      	ldr	r3, [sp, #0]
    d4ac:	9300      	str	r3, [sp, #0]
    d4ae:	f89d 3000 	ldrb.w	r3, [sp]
    d4b2:	b95b      	cbnz	r3, d4cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d4b4:	2400      	movs	r4, #0
    d4b6:	b10a      	cbz	r2, d4bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d4b8:	2300      	movs	r3, #0
    d4ba:	e000      	b.n	d4be <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d4bc:	2302      	movs	r3, #2
    d4be:	18c2      	adds	r2, r0, r3
    d4c0:	7d15      	ldrb	r5, [r2, #20]
    d4c2:	2d02      	cmp	r5, #2
    d4c4:	d004      	beq.n	d4d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d4c6:	7d52      	ldrb	r2, [r2, #21]
    d4c8:	2a02      	cmp	r2, #2
    d4ca:	d004      	beq.n	d4d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d4cc:	2000      	movs	r0, #0
    d4ce:	bd38      	pop	{r3, r4, r5, pc}
    d4d0:	461a      	mov	r2, r3
    d4d2:	1c5b      	adds	r3, r3, #1
    d4d4:	e000      	b.n	d4d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d4d6:	1c5a      	adds	r2, r3, #1
    d4d8:	b179      	cbz	r1, d4fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d4da:	18c5      	adds	r5, r0, r3
    d4dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d4e0:	752c      	strb	r4, [r5, #20]
    d4e2:	831c      	strh	r4, [r3, #24]
    d4e4:	2303      	movs	r3, #3
    d4e6:	1884      	adds	r4, r0, r2
    d4e8:	7523      	strb	r3, [r4, #20]
    d4ea:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d4ee:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d4f2:	685b      	ldr	r3, [r3, #4]
    d4f4:	600b      	str	r3, [r1, #0]
    d4f6:	8b00      	ldrh	r0, [r0, #24]
    d4f8:	8088      	strh	r0, [r1, #4]
    d4fa:	2001      	movs	r0, #1
    d4fc:	bd38      	pop	{r3, r4, r5, pc}
    d4fe:	b510      	push	{r4, lr}
    d500:	b109      	cbz	r1, d506 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d502:	2100      	movs	r1, #0
    d504:	e000      	b.n	d508 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d506:	2102      	movs	r1, #2
    d508:	1843      	adds	r3, r0, r1
    d50a:	7d1c      	ldrb	r4, [r3, #20]
    d50c:	4294      	cmp	r4, r2
    d50e:	d103      	bne.n	d518 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d510:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d514:	8b00      	ldrh	r0, [r0, #24]
    d516:	bd10      	pop	{r4, pc}
    d518:	7d5b      	ldrb	r3, [r3, #21]
    d51a:	4293      	cmp	r3, r2
    d51c:	d103      	bne.n	d526 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d51e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d522:	8b40      	ldrh	r0, [r0, #26]
    d524:	bd10      	pop	{r4, pc}
    d526:	2000      	movs	r0, #0
    d528:	bd10      	pop	{r4, pc}
    d52a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d52e:	d201      	bcs.n	d534 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d530:	0841      	lsrs	r1, r0, #1
    d532:	e000      	b.n	d536 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d534:	21ff      	movs	r1, #255	; 0xff
    d536:	1a40      	subs	r0, r0, r1
    d538:	f240 6172 	movw	r1, #1650	; 0x672
    d53c:	4288      	cmp	r0, r1
    d53e:	db00      	blt.n	d542 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d540:	4608      	mov	r0, r1
    d542:	b280      	uxth	r0, r0
    d544:	4770      	bx	lr

0000d546 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d546:	2101      	movs	r1, #1
    d548:	f7ff bf85 	b.w	d456 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d550:	4606      	mov	r6, r0
    d552:	f342 0780 	sbfx	r7, r2, #2, #1
    d556:	7848      	ldrb	r0, [r1, #1]
    d558:	460c      	mov	r4, r1
    d55a:	f022 0504 	bic.w	r5, r2, #4
    d55e:	1c7f      	adds	r7, r7, #1
    d560:	b100      	cbz	r0, d564 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d562:	b90d      	cbnz	r5, d568 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d564:	4328      	orrs	r0, r5
    d566:	d104      	bne.n	d572 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d568:	b145      	cbz	r5, d57c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d56a:	2100      	movs	r1, #0
    d56c:	4620      	mov	r0, r4
    d56e:	f7f7 fc23 	bl	4db8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d572:	20ff      	movs	r0, #255	; 0xff
    d574:	70a0      	strb	r0, [r4, #2]
    d576:	b11f      	cbz	r7, d580 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d578:	2000      	movs	r0, #0
    d57a:	e002      	b.n	d582 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d57c:	2101      	movs	r1, #1
    d57e:	e7f5      	b.n	d56c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d580:	2002      	movs	r0, #2
    d582:	1821      	adds	r1, r4, r0
    d584:	7d09      	ldrb	r1, [r1, #20]
    d586:	2903      	cmp	r1, #3
    d588:	d102      	bne.n	d590 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d58a:	2d02      	cmp	r5, #2
    d58c:	d000      	beq.n	d590 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d58e:	1c40      	adds	r0, r0, #1
    d590:	1822      	adds	r2, r4, r0
    d592:	2101      	movs	r1, #1
    d594:	7511      	strb	r1, [r2, #20]
    d596:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d59a:	2200      	movs	r2, #0
    d59c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d5a0:	830a      	strh	r2, [r1, #24]
    d5a2:	6840      	ldr	r0, [r0, #4]
    d5a4:	70a2      	strb	r2, [r4, #2]
    d5a6:	4631      	mov	r1, r6
    d5a8:	f362 010f 	bfi	r1, r2, #0, #16
    d5ac:	e9c6 0100 	strd	r0, r1, [r6]
    d5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5b4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5b8:	461e      	mov	r6, r3
    d5ba:	4613      	mov	r3, r2
    d5bc:	4604      	mov	r4, r0
    d5be:	b109      	cbz	r1, d5c4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d5c0:	2000      	movs	r0, #0
    d5c2:	e000      	b.n	d5c6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d5c4:	2002      	movs	r0, #2
    d5c6:	21ff      	movs	r1, #255	; 0xff
    d5c8:	70a1      	strb	r1, [r4, #2]
    d5ca:	1821      	adds	r1, r4, r0
    d5cc:	7d0a      	ldrb	r2, [r1, #20]
    d5ce:	2a01      	cmp	r2, #1
    d5d0:	d003      	beq.n	d5da <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d5d2:	7d49      	ldrb	r1, [r1, #21]
    d5d4:	2901      	cmp	r1, #1
    d5d6:	d10c      	bne.n	d5f2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d5d8:	1c40      	adds	r0, r0, #1
    d5da:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d5de:	2700      	movs	r7, #0
    d5e0:	8b29      	ldrh	r1, [r5, #24]
    d5e2:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d5e6:	198a      	adds	r2, r1, r6
    d5e8:	4562      	cmp	r2, ip
    d5ea:	d905      	bls.n	d5f8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d5ec:	4420      	add	r0, r4
    d5ee:	832f      	strh	r7, [r5, #24]
    d5f0:	7507      	strb	r7, [r0, #20]
    d5f2:	2000      	movs	r0, #0
    d5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d5f8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d5fc:	4632      	mov	r2, r6
    d5fe:	6840      	ldr	r0, [r0, #4]
    d600:	4408      	add	r0, r1
    d602:	4619      	mov	r1, r3
    d604:	f7fe ff49 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d608:	8b28      	ldrh	r0, [r5, #24]
    d60a:	4430      	add	r0, r6
    d60c:	8328      	strh	r0, [r5, #24]
    d60e:	70a7      	strb	r7, [r4, #2]
    d610:	2001      	movs	r0, #1
    d612:	e7ef      	b.n	d5f4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d614 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    d614:	2202      	movs	r2, #2
    d616:	2100      	movs	r1, #0
    d618:	f7ff bf71 	b.w	d4fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d61c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d61c:	b510      	push	{r4, lr}
    d61e:	2101      	movs	r1, #1
    d620:	f7ff ff32 	bl	d488 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d624:	2800      	cmp	r0, #0
    d626:	d000      	beq.n	d62a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d628:	2001      	movs	r0, #1
    d62a:	bd10      	pop	{r4, pc}

0000d62c <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d62c:	2201      	movs	r2, #1
    d62e:	f7ff bf38 	b.w	d4a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d632 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d632:	2200      	movs	r2, #0
    d634:	f7ff bf35 	b.w	d4a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d638:	b570      	push	{r4, r5, r6, lr}
    d63a:	b109      	cbz	r1, d640 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d63c:	2300      	movs	r3, #0
    d63e:	e000      	b.n	d642 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d640:	2302      	movs	r3, #2
    d642:	21ff      	movs	r1, #255	; 0xff
    d644:	7081      	strb	r1, [r0, #2]
    d646:	18c1      	adds	r1, r0, r3
    d648:	2402      	movs	r4, #2
    d64a:	7d0d      	ldrb	r5, [r1, #20]
    d64c:	2d01      	cmp	r5, #1
    d64e:	d007      	beq.n	d660 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d650:	7d4d      	ldrb	r5, [r1, #21]
    d652:	2d01      	cmp	r5, #1
    d654:	d009      	beq.n	d66a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d656:	f44f 718b 	mov.w	r1, #278	; 0x116
    d65a:	2009      	movs	r0, #9
    d65c:	f7f6 ff86 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d660:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d664:	831a      	strh	r2, [r3, #24]
    d666:	750c      	strb	r4, [r1, #20]
    d668:	e003      	b.n	d672 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d66a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d66e:	835a      	strh	r2, [r3, #26]
    d670:	754c      	strb	r4, [r1, #21]
    d672:	2100      	movs	r1, #0
    d674:	7081      	strb	r1, [r0, #2]
    d676:	bd70      	pop	{r4, r5, r6, pc}

0000d678 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d678:	2101      	movs	r1, #1
    d67a:	7001      	strb	r1, [r0, #0]
    d67c:	4770      	bx	lr

0000d67e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d67e:	2201      	movs	r2, #1
    d680:	4611      	mov	r1, r2
    d682:	f7ff bf3c 	b.w	d4fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d686 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d686:	2201      	movs	r2, #1
    d688:	2100      	movs	r1, #0
    d68a:	f7ff bf38 	b.w	d4fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d68e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d68e:	2100      	movs	r1, #0
    d690:	f7ff bee1 	b.w	d456 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d694:	2800      	cmp	r0, #0
    d696:	db09      	blt.n	d6ac <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d698:	f000 021f 	and.w	r2, r0, #31
    d69c:	2101      	movs	r1, #1
    d69e:	4091      	lsls	r1, r2
    d6a0:	0940      	lsrs	r0, r0, #5
    d6a2:	0080      	lsls	r0, r0, #2
    d6a4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6a8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d6ac:	4770      	bx	lr
    d6ae:	2800      	cmp	r0, #0
    d6b0:	db0d      	blt.n	d6ce <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    d6b2:	f000 021f 	and.w	r2, r0, #31
    d6b6:	2101      	movs	r1, #1
    d6b8:	4091      	lsls	r1, r2
    d6ba:	0940      	lsrs	r0, r0, #5
    d6bc:	0080      	lsls	r0, r0, #2
    d6be:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6c2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d6c6:	f3bf 8f4f 	dsb	sy
    d6ca:	f3bf 8f6f 	isb	sy
    d6ce:	4770      	bx	lr
    d6d0:	b510      	push	{r4, lr}
    d6d2:	200e      	movs	r0, #14
    d6d4:	f7ff ffeb 	bl	d6ae <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d6d8:	200e      	movs	r0, #14
    d6da:	f7ff ffdb 	bl	d694 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d6de:	200f      	movs	r0, #15
    d6e0:	f7ff ffe5 	bl	d6ae <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d6e8:	200f      	movs	r0, #15
    d6ea:	f7ff bfd3 	b.w	d694 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d6ee:	2800      	cmp	r0, #0
    d6f0:	db09      	blt.n	d706 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    d6f2:	f000 021f 	and.w	r2, r0, #31
    d6f6:	2101      	movs	r1, #1
    d6f8:	4091      	lsls	r1, r2
    d6fa:	0940      	lsrs	r0, r0, #5
    d6fc:	0080      	lsls	r0, r0, #2
    d6fe:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d702:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d706:	4770      	bx	lr
    d708:	5840      	ldr	r0, [r0, r1]
    d70a:	2800      	cmp	r0, #0
    d70c:	d000      	beq.n	d710 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    d70e:	2001      	movs	r0, #1
    d710:	4770      	bx	lr

0000d712 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d712:	b510      	push	{r4, lr}
    d714:	4604      	mov	r4, r0
    d716:	4620      	mov	r0, r4
    d718:	f7f7 fc58 	bl	4fcc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    d71c:	2811      	cmp	r0, #17
    d71e:	d0fa      	beq.n	d716 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d720:	bd10      	pop	{r4, pc}

0000d722 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d722:	b510      	push	{r4, lr}
    d724:	f7ff fff5 	bl	d712 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d728:	2800      	cmp	r0, #0
    d72a:	d003      	beq.n	d734 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d72c:	21a0      	movs	r1, #160	; 0xa0
    d72e:	201d      	movs	r0, #29
    d730:	f7f6 ff1c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d734:	bd10      	pop	{r4, pc}

0000d736 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d736:	f7f7 bda7 	b.w	5288 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d73a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d73a:	f7f7 bd95 	b.w	5268 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d73e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d73e:	b510      	push	{r4, lr}
    d740:	4050      	eors	r0, r2
    d742:	780a      	ldrb	r2, [r1, #0]
    d744:	781c      	ldrb	r4, [r3, #0]
    d746:	4062      	eors	r2, r4
    d748:	4410      	add	r0, r2
    d74a:	784a      	ldrb	r2, [r1, #1]
    d74c:	785c      	ldrb	r4, [r3, #1]
    d74e:	4062      	eors	r2, r4
    d750:	4410      	add	r0, r2
    d752:	788a      	ldrb	r2, [r1, #2]
    d754:	789c      	ldrb	r4, [r3, #2]
    d756:	4062      	eors	r2, r4
    d758:	4410      	add	r0, r2
    d75a:	78ca      	ldrb	r2, [r1, #3]
    d75c:	78dc      	ldrb	r4, [r3, #3]
    d75e:	4062      	eors	r2, r4
    d760:	4410      	add	r0, r2
    d762:	790a      	ldrb	r2, [r1, #4]
    d764:	791c      	ldrb	r4, [r3, #4]
    d766:	7949      	ldrb	r1, [r1, #5]
    d768:	4062      	eors	r2, r4
    d76a:	4410      	add	r0, r2
    d76c:	795a      	ldrb	r2, [r3, #5]
    d76e:	4051      	eors	r1, r2
    d770:	42c1      	cmn	r1, r0
    d772:	d101      	bne.n	d778 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d774:	2001      	movs	r0, #1
    d776:	bd10      	pop	{r4, pc}
    d778:	2000      	movs	r0, #0
    d77a:	bd10      	pop	{r4, pc}

0000d77c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d77c:	b510      	push	{r4, lr}
    d77e:	2900      	cmp	r1, #0
    d780:	4604      	mov	r4, r0
    d782:	f04f 0106 	mov.w	r1, #6
    d786:	d002      	beq.n	d78e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d788:	f7f6 ff90 	bl	46ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d78c:	e001      	b.n	d792 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d78e:	f7f6 ff9b 	bl	46c8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d792:	7960      	ldrb	r0, [r4, #5]
    d794:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d798:	7160      	strb	r0, [r4, #5]
    d79a:	bd10      	pop	{r4, pc}

0000d79c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d79c:	4770      	bx	lr

0000d79e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d79e:	b530      	push	{r4, r5, lr}
    d7a0:	460c      	mov	r4, r1
    d7a2:	4605      	mov	r5, r0
    d7a4:	b08d      	sub	sp, #52	; 0x34
    d7a6:	f04f 0103 	mov.w	r1, #3
    d7aa:	f104 0003 	add.w	r0, r4, #3
    d7ae:	b112      	cbz	r2, d7b6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d7b0:	f7f6 ff7c 	bl	46ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d7b4:	e001      	b.n	d7ba <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d7b6:	f7f6 ff87 	bl	46c8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d7ba:	7960      	ldrb	r0, [r4, #5]
    d7bc:	220d      	movs	r2, #13
    d7be:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d7c2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d7c6:	7160      	strb	r0, [r4, #5]
    d7c8:	2100      	movs	r1, #0
    d7ca:	a804      	add	r0, sp, #16
    d7cc:	f7fe fedf 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7d0:	78e0      	ldrb	r0, [r4, #3]
    d7d2:	f88d 001f 	strb.w	r0, [sp, #31]
    d7d6:	7920      	ldrb	r0, [r4, #4]
    d7d8:	f88d 001e 	strb.w	r0, [sp, #30]
    d7dc:	7960      	ldrb	r0, [r4, #5]
    d7de:	f88d 001d 	strb.w	r0, [sp, #29]
    d7e2:	2210      	movs	r2, #16
    d7e4:	4629      	mov	r1, r5
    d7e6:	4668      	mov	r0, sp
    d7e8:	f7fe fe57 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7ec:	4668      	mov	r0, sp
    d7ee:	f7ff ff98 	bl	d722 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d7f2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d7f6:	7020      	strb	r0, [r4, #0]
    d7f8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d7fc:	7060      	strb	r0, [r4, #1]
    d7fe:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d802:	70a0      	strb	r0, [r4, #2]
    d804:	b00d      	add	sp, #52	; 0x34
    d806:	bd30      	pop	{r4, r5, pc}

0000d808 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d808:	f7f8 b8fa 	b.w	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    d80c:	07c1      	lsls	r1, r0, #31
    d80e:	d001      	beq.n	d814 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d810:	2001      	movs	r0, #1
    d812:	4770      	bx	lr
    d814:	0780      	lsls	r0, r0, #30
    d816:	d501      	bpl.n	d81c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d818:	2002      	movs	r0, #2
    d81a:	4770      	bx	lr
    d81c:	2000      	movs	r0, #0
    d81e:	4770      	bx	lr
    d820:	b510      	push	{r4, lr}
    d822:	2801      	cmp	r0, #1
    d824:	d008      	beq.n	d838 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d826:	2802      	cmp	r0, #2
    d828:	d004      	beq.n	d834 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d82a:	f240 411a 	movw	r1, #1050	; 0x41a
    d82e:	2006      	movs	r0, #6
    d830:	f7f6 fe9c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d834:	2001      	movs	r0, #1
    d836:	bd10      	pop	{r4, pc}
    d838:	2000      	movs	r0, #0
    d83a:	bd10      	pop	{r4, pc}
    d83c:	2900      	cmp	r1, #0
    d83e:	d004      	beq.n	d84a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d840:	2801      	cmp	r0, #1
    d842:	d003      	beq.n	d84c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d844:	2901      	cmp	r1, #1
    d846:	d001      	beq.n	d84c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d848:	2002      	movs	r0, #2
    d84a:	4770      	bx	lr
    d84c:	2001      	movs	r0, #1
    d84e:	4770      	bx	lr
    d850:	f7ff bc95 	b.w	d17e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d854 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d854:	2101      	movs	r1, #1
    d856:	f7f8 bbcd 	b.w	5ff4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d85a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d85a:	b510      	push	{r4, lr}
    d85c:	f002 feff 	bl	1065e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d860:	b118      	cbz	r0, d86a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d866:	f7fc bfa3 	b.w	a7b0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d86a:	20ff      	movs	r0, #255	; 0xff
    d86c:	bd10      	pop	{r4, pc}

0000d86e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d86e:	b510      	push	{r4, lr}
    d870:	f7f8 fc08 	bl	6084 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d874:	2810      	cmp	r0, #16
    d876:	d003      	beq.n	d880 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d878:	f7f8 fbd4 	bl	6024 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d87c:	2810      	cmp	r0, #16
    d87e:	d100      	bne.n	d882 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d880:	2008      	movs	r0, #8
    d882:	bd10      	pop	{r4, pc}

0000d884 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d884:	b510      	push	{r4, lr}
    d886:	f7f8 fbfd 	bl	6084 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d88a:	2810      	cmp	r0, #16
    d88c:	d003      	beq.n	d896 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d88e:	f7f8 fc57 	bl	6140 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    d892:	2001      	movs	r0, #1
    d894:	bd10      	pop	{r4, pc}
    d896:	2000      	movs	r0, #0
    d898:	bd10      	pop	{r4, pc}

0000d89a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d89a:	b570      	push	{r4, r5, r6, lr}
    d89c:	460e      	mov	r6, r1
    d89e:	b08c      	sub	sp, #48	; 0x30
    d8a0:	4614      	mov	r4, r2
    d8a2:	4601      	mov	r1, r0
    d8a4:	461d      	mov	r5, r3
    d8a6:	2210      	movs	r2, #16
    d8a8:	4668      	mov	r0, sp
    d8aa:	f000 f938 	bl	db1e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8ae:	2210      	movs	r2, #16
    d8b0:	4631      	mov	r1, r6
    d8b2:	a804      	add	r0, sp, #16
    d8b4:	f000 f933 	bl	db1e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8b8:	4668      	mov	r0, sp
    d8ba:	f7ff ff32 	bl	d722 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d8be:	a908      	add	r1, sp, #32
    d8c0:	f04f 0210 	mov.w	r2, #16
    d8c4:	4628      	mov	r0, r5
    d8c6:	b11c      	cbz	r4, d8d0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d8c8:	f000 f929 	bl	db1e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8cc:	b00c      	add	sp, #48	; 0x30
    d8ce:	bd70      	pop	{r4, r5, r6, pc}
    d8d0:	f7fe fde3 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d8d4:	e7fa      	b.n	d8cc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d8d6:	b510      	push	{r4, lr}
    d8d8:	460c      	mov	r4, r1
    d8da:	2100      	movs	r1, #0
    d8dc:	f7ff fd84 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d8e0:	6060      	str	r0, [r4, #4]
    d8e2:	b118      	cbz	r0, d8ec <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d8e4:	2001      	movs	r0, #1
    d8e6:	7020      	strb	r0, [r4, #0]
    d8e8:	2000      	movs	r0, #0
    d8ea:	bd10      	pop	{r4, pc}
    d8ec:	2002      	movs	r0, #2
    d8ee:	bd10      	pop	{r4, pc}

0000d8f0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d8f0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8f4:	4348      	muls	r0, r1
    d8f6:	4770      	bx	lr

0000d8f8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d8f8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8fc:	fbb0 f0f1 	udiv	r0, r0, r1
    d900:	b280      	uxth	r0, r0
    d902:	4770      	bx	lr

0000d904 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d904:	b570      	push	{r4, r5, r6, lr}
    d906:	4604      	mov	r4, r0
    d908:	4290      	cmp	r0, r2
    d90a:	d20b      	bcs.n	d924 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d90c:	1b10      	subs	r0, r2, r4
    d90e:	2865      	cmp	r0, #101	; 0x65
    d910:	d200      	bcs.n	d914 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d912:	2065      	movs	r0, #101	; 0x65
    d914:	1825      	adds	r5, r4, r0
    d916:	428d      	cmp	r5, r1
    d918:	d803      	bhi.n	d922 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d91a:	2103      	movs	r1, #3
    d91c:	f7f4 f8ac 	bl	1a78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d920:	b108      	cbz	r0, d926 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d922:	4620      	mov	r0, r4
    d924:	bd70      	pop	{r4, r5, r6, pc}
    d926:	4628      	mov	r0, r5
    d928:	bd70      	pop	{r4, r5, r6, pc}

0000d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d92a:	b510      	push	{r4, lr}
    d92c:	f1a2 0311 	sub.w	r3, r2, #17
    d930:	290d      	cmp	r1, #13
    d932:	d24d      	bcs.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d934:	e8df f001 	tbb	[pc, r1]
    d938:	150e0907 	.word	0x150e0907
    d93c:	29211d1a 	.word	0x29211d1a
    d940:	362f4e2c 	.word	0x362f4e2c
    d944:	0048      	.short	0x0048
    d946:	b3f2      	cbz	r2, d9c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    d948:	e042      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d94a:	2a07      	cmp	r2, #7
    d94c:	d03e      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d94e:	2a08      	cmp	r2, #8
    d950:	d03c      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d952:	e03d      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d954:	2a0c      	cmp	r2, #12
    d956:	d039      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d958:	2a0d      	cmp	r2, #13
    d95a:	d037      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d95c:	2a0b      	cmp	r2, #11
    d95e:	d035      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d960:	e036      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d962:	2a0e      	cmp	r2, #14
    d964:	d032      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d966:	2a0f      	cmp	r2, #15
    d968:	d030      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d96a:	e031      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d96c:	2b0c      	cmp	r3, #12
    d96e:	d92d      	bls.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d970:	e02e      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d972:	3a12      	subs	r2, #18
    d974:	2a0b      	cmp	r2, #11
    d976:	d929      	bls.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d978:	e02a      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d97a:	2b03      	cmp	r3, #3
    d97c:	d926      	bls.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d97e:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
    d982:	b1f8      	cbz	r0, d9c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    d984:	2a1d      	cmp	r2, #29
    d986:	d921      	bls.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d988:	e022      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d98a:	2a04      	cmp	r2, #4
    d98c:	d01e      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d98e:	e01f      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d990:	2a06      	cmp	r2, #6
    d992:	d01b      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d994:	e01c      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d996:	2a1e      	cmp	r2, #30
    d998:	d018      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d99a:	2a1f      	cmp	r2, #31
    d99c:	d016      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d99e:	2a20      	cmp	r2, #32
    d9a0:	d014      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9a2:	e015      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9a4:	2a21      	cmp	r2, #33	; 0x21
    d9a6:	d011      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9a8:	2a22      	cmp	r2, #34	; 0x22
    d9aa:	d00f      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9ac:	2a23      	cmp	r2, #35	; 0x23
    d9ae:	d00d      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9b0:	2a24      	cmp	r2, #36	; 0x24
    d9b2:	d00b      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9b4:	2a25      	cmp	r2, #37	; 0x25
    d9b6:	d009      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9b8:	2a26      	cmp	r2, #38	; 0x26
    d9ba:	d007      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9bc:	2a27      	cmp	r2, #39	; 0x27
    d9be:	d005      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9c0:	2a2e      	cmp	r2, #46	; 0x2e
    d9c2:	d003      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9c4:	e004      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9c6:	e001      	b.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9c8:	2a29      	cmp	r2, #41	; 0x29
    d9ca:	d101      	bne.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9cc:	2001      	movs	r0, #1
    d9ce:	bd10      	pop	{r4, pc}
    d9d0:	2000      	movs	r0, #0
    d9d2:	bd10      	pop	{r4, pc}
    d9d4:	2a10      	cmp	r2, #16
    d9d6:	d1fb      	bne.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9d8:	e7f8      	b.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000d9da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d9da:	280c      	cmp	r0, #12
    d9dc:	d019      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9de:	280d      	cmp	r0, #13
    d9e0:	d017      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9e2:	280b      	cmp	r0, #11
    d9e4:	d015      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9e6:	280e      	cmp	r0, #14
    d9e8:	d013      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9ea:	280f      	cmp	r0, #15
    d9ec:	d011      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9ee:	2821      	cmp	r0, #33	; 0x21
    d9f0:	d00f      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9f2:	2822      	cmp	r0, #34	; 0x22
    d9f4:	d00d      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9f6:	2823      	cmp	r0, #35	; 0x23
    d9f8:	d00b      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9fa:	2824      	cmp	r0, #36	; 0x24
    d9fc:	d009      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9fe:	2825      	cmp	r0, #37	; 0x25
    da00:	d007      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da02:	2826      	cmp	r0, #38	; 0x26
    da04:	d005      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da06:	2827      	cmp	r0, #39	; 0x27
    da08:	d003      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da0a:	282e      	cmp	r0, #46	; 0x2e
    da0c:	d001      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da0e:	2000      	movs	r0, #0
    da10:	4770      	bx	lr
    da12:	2001      	movs	r0, #1
    da14:	4770      	bx	lr

0000da16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    da16:	f011 0f0c 	tst.w	r1, #12
    da1a:	d018      	beq.n	da4e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    da1c:	074a      	lsls	r2, r1, #29
    da1e:	f44f 7116 	mov.w	r1, #600	; 0x258
    da22:	2a00      	cmp	r2, #0
    da24:	da02      	bge.n	da2c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    da26:	f04f 0210 	mov.w	r2, #16
    da2a:	e001      	b.n	da30 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    da2c:	f04f 0240 	mov.w	r2, #64	; 0x40
    da30:	da01      	bge.n	da36 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    da32:	f04f 0196 	mov.w	r1, #150	; 0x96
    da36:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    da3a:	eba0 0301 	sub.w	r3, r0, r1
    da3e:	4288      	cmp	r0, r1
    da40:	d903      	bls.n	da4a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da42:	fb93 f0f2 	sdiv	r0, r3, r2
    da46:	b280      	uxth	r0, r0
    da48:	4770      	bx	lr
    da4a:	2000      	movs	r0, #0
    da4c:	4770      	bx	lr
    da4e:	2902      	cmp	r1, #2
    da50:	d008      	beq.n	da64 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    da52:	2870      	cmp	r0, #112	; 0x70
    da54:	d9f9      	bls.n	da4a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da56:	3870      	subs	r0, #112	; 0x70
    da58:	17c1      	asrs	r1, r0, #31
    da5a:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    da5e:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    da62:	4770      	bx	lr
    da64:	283c      	cmp	r0, #60	; 0x3c
    da66:	d9f0      	bls.n	da4a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da68:	383c      	subs	r0, #60	; 0x3c
    da6a:	17c1      	asrs	r1, r0, #31
    da6c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    da70:	f3c0 008f 	ubfx	r0, r0, #2, #16
    da74:	4770      	bx	lr

0000da76 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    da76:	6809      	ldr	r1, [r1, #0]
    da78:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    da7c:	4770      	bx	lr

0000da7e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    da7e:	07c1      	lsls	r1, r0, #31
    da80:	d001      	beq.n	da86 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    da82:	2001      	movs	r0, #1
    da84:	4770      	bx	lr
    da86:	0781      	lsls	r1, r0, #30
    da88:	d501      	bpl.n	da8e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    da8a:	2002      	movs	r0, #2
    da8c:	4770      	bx	lr
    da8e:	0740      	lsls	r0, r0, #29
    da90:	d501      	bpl.n	da96 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    da92:	2008      	movs	r0, #8
    da94:	4770      	bx	lr
    da96:	2000      	movs	r0, #0
    da98:	4770      	bx	lr

0000da9a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    da9a:	b510      	push	{r4, lr}
    da9c:	f640 12c4 	movw	r2, #2500	; 0x9c4
    daa0:	2901      	cmp	r1, #1
    daa2:	d006      	beq.n	dab2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    daa4:	2902      	cmp	r1, #2
    daa6:	d005      	beq.n	dab4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    daa8:	f240 31af 	movw	r1, #943	; 0x3af
    daac:	2029      	movs	r0, #41	; 0x29
    daae:	f7f6 fd5d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dab2:	b108      	cbz	r0, dab8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dab4:	4610      	mov	r0, r2
    dab6:	bd10      	pop	{r4, pc}
    dab8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    dabc:	bd10      	pop	{r4, pc}

0000dabe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dabe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dac2:	4607      	mov	r7, r0
    dac4:	460e      	mov	r6, r1
    dac6:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    daca:	f7f4 fbad 	bl	2228 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dace:	b198      	cbz	r0, daf8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    dad0:	b31e      	cbz	r6, db1a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dad2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    dad6:	1b40      	subs	r0, r0, r5
    dad8:	2300      	movs	r3, #0
    dada:	eb61 0104 	sbc.w	r1, r1, r4
    dade:	461a      	mov	r2, r3
    dae0:	1a1b      	subs	r3, r3, r0
    dae2:	418a      	sbcs	r2, r1
    dae4:	da19      	bge.n	db1a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dae6:	1c42      	adds	r2, r0, #1
    dae8:	f171 0100 	sbcs.w	r1, r1, #0
    daec:	db07      	blt.n	dafe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    daee:	f240 2129 	movw	r1, #553	; 0x229
    daf2:	2029      	movs	r0, #41	; 0x29
    daf4:	f7f6 fd3a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daf8:	f240 211f 	movw	r1, #543	; 0x21f
    dafc:	e7f9      	b.n	daf2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    dafe:	4430      	add	r0, r6
    db00:	1e40      	subs	r0, r0, #1
    db02:	fbb0 f1f6 	udiv	r1, r0, r6
    db06:	fb01 f006 	mul.w	r0, r1, r6
    db0a:	1828      	adds	r0, r5, r0
    db0c:	f144 0400 	adc.w	r4, r4, #0
    db10:	e9c7 0404 	strd	r0, r4, [r7, #16]
    db14:	4608      	mov	r0, r1
    db16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db1a:	2000      	movs	r0, #0
    db1c:	e7fb      	b.n	db16 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000db1e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    db1e:	b530      	push	{r4, r5, lr}
    db20:	4613      	mov	r3, r2
    db22:	e006      	b.n	db32 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    db24:	18cc      	adds	r4, r1, r3
    db26:	1ad5      	subs	r5, r2, r3
    db28:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    db2c:	1e5b      	subs	r3, r3, #1
    db2e:	5544      	strb	r4, [r0, r5]
    db30:	b2db      	uxtb	r3, r3
    db32:	2b00      	cmp	r3, #0
    db34:	d1f6      	bne.n	db24 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    db36:	bd30      	pop	{r4, r5, pc}

0000db38 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    db38:	2300      	movs	r3, #0
    db3a:	6383      	str	r3, [r0, #56]	; 0x38
    db3c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    db40:	f240 2371 	movw	r3, #625	; 0x271
    db44:	435a      	muls	r2, r3
    db46:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    db4a:	1e52      	subs	r2, r2, #1
    db4c:	fbb2 f1f1 	udiv	r1, r2, r1
    db50:	63c1      	str	r1, [r0, #60]	; 0x3c
    db52:	4770      	bx	lr

0000db54 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    db54:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    db58:	4607      	mov	r7, r0
    db5a:	4690      	mov	r8, r2
    db5c:	468b      	mov	fp, r1
    db5e:	2601      	movs	r6, #1
    db60:	4608      	mov	r0, r1
    db62:	f000 f9dc 	bl	df1e <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    db66:	4682      	mov	sl, r0
    db68:	4658      	mov	r0, fp
    db6a:	f000 f9da 	bl	df22 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    db6e:	4681      	mov	r9, r0
    db70:	f7ff ff85 	bl	da7e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    db74:	4604      	mov	r4, r0
    db76:	4650      	mov	r0, sl
    db78:	f7ff ff81 	bl	da7e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    db7c:	4605      	mov	r5, r0
    db7e:	ea54 0005 	orrs.w	r0, r4, r5
    db82:	d100      	bne.n	db86 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    db84:	2600      	movs	r6, #0
    db86:	f7fc fd95 	bl	a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    db8a:	ea10 0f09 	tst.w	r0, r9
    db8e:	d100      	bne.n	db92 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    db90:	2400      	movs	r4, #0
    db92:	f7fc fd8f 	bl	a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    db96:	ea10 0f0a 	tst.w	r0, sl
    db9a:	d100      	bne.n	db9e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    db9c:	2500      	movs	r5, #0
    db9e:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    dba2:	42a0      	cmp	r0, r4
    dba4:	d100      	bne.n	dba8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    dba6:	2400      	movs	r4, #0
    dba8:	f888 4000 	strb.w	r4, [r8]
    dbac:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    dbb0:	42a8      	cmp	r0, r5
    dbb2:	d100      	bne.n	dbb6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    dbb4:	2500      	movs	r5, #0
    dbb6:	f888 5001 	strb.w	r5, [r8, #1]
    dbba:	b974      	cbnz	r4, dbda <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbbc:	b96d      	cbnz	r5, dbda <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbbe:	4658      	mov	r0, fp
    dbc0:	f000 f99b 	bl	defa <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    dbc4:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
    dbc8:	1a40      	subs	r0, r0, r1
    dbca:	b200      	sxth	r0, r0
    dbcc:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    dbd0:	4288      	cmp	r0, r1
    dbd2:	dc01      	bgt.n	dbd8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    dbd4:	2800      	cmp	r0, #0
    dbd6:	dc00      	bgt.n	dbda <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbd8:	2600      	movs	r6, #0
    dbda:	4630      	mov	r0, r6
    dbdc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000dbe0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dbe0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbe4:	4348      	muls	r0, r1
    dbe6:	4770      	bx	lr

0000dbe8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dbe8:	f240 2171 	movw	r1, #625	; 0x271
    dbec:	fb10 f001 	smulbb	r0, r0, r1
    dbf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dbf4:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    dbf8:	4770      	bx	lr

0000dbfa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dbfa:	b510      	push	{r4, lr}
    dbfc:	2300      	movs	r3, #0
    dbfe:	461a      	mov	r2, r3
    dc00:	e003      	b.n	dc0a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dc02:	5c84      	ldrb	r4, [r0, r2]
    dc04:	4323      	orrs	r3, r4
    dc06:	1c52      	adds	r2, r2, #1
    dc08:	b2d2      	uxtb	r2, r2
    dc0a:	428a      	cmp	r2, r1
    dc0c:	d3f9      	bcc.n	dc02 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dc0e:	b10b      	cbz	r3, dc14 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dc10:	2000      	movs	r0, #0
    dc12:	bd10      	pop	{r4, pc}
    dc14:	2001      	movs	r0, #1
    dc16:	bd10      	pop	{r4, pc}

0000dc18 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dc18:	b510      	push	{r4, lr}
    dc1a:	4604      	mov	r4, r0
    dc1c:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    dc20:	b108      	cbz	r0, dc26 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dc22:	2825      	cmp	r0, #37	; 0x25
    dc24:	d901      	bls.n	dc2a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dc26:	2012      	movs	r0, #18
    dc28:	bd10      	pop	{r4, pc}
    dc2a:	b12a      	cbz	r2, dc38 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    dc2c:	7f60      	ldrb	r0, [r4, #29]
    dc2e:	b128      	cbz	r0, dc3c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    dc30:	2801      	cmp	r0, #1
    dc32:	d009      	beq.n	dc48 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    dc34:	201f      	movs	r0, #31
    dc36:	bd10      	pop	{r4, pc}
    dc38:	2000      	movs	r0, #0
    dc3a:	bd10      	pop	{r4, pc}
    dc3c:	4620      	mov	r0, r4
    dc3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc42:	4611      	mov	r1, r2
    dc44:	f000 b827 	b.w	dc96 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    dc48:	89a2      	ldrh	r2, [r4, #12]
    dc4a:	6949      	ldr	r1, [r1, #20]
    dc4c:	f104 001d 	add.w	r0, r4, #29
    dc50:	f7f8 fb12 	bl	6278 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    dc54:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    dc58:	e7ee      	b.n	dc38 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000dc5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dc5a:	b570      	push	{r4, r5, r6, lr}
    dc5c:	4604      	mov	r4, r0
    dc5e:	1c40      	adds	r0, r0, #1
    dc60:	4288      	cmp	r0, r1
    dc62:	d004      	beq.n	dc6e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    dc64:	6808      	ldr	r0, [r1, #0]
    dc66:	f8c4 0001 	str.w	r0, [r4, #1]
    dc6a:	7908      	ldrb	r0, [r1, #4]
    dc6c:	7160      	strb	r0, [r4, #5]
    dc6e:	7960      	ldrb	r0, [r4, #5]
    dc70:	f000 001f 	and.w	r0, r0, #31
    dc74:	7160      	strb	r0, [r4, #5]
    dc76:	2000      	movs	r0, #0
    dc78:	72e0      	strb	r0, [r4, #11]
    dc7a:	4605      	mov	r5, r0
    dc7c:	1966      	adds	r6, r4, r5
    dc7e:	7870      	ldrb	r0, [r6, #1]
    dc80:	f000 fba6 	bl	e3d0 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dc84:	71b0      	strb	r0, [r6, #6]
    dc86:	7ae1      	ldrb	r1, [r4, #11]
    dc88:	1c6d      	adds	r5, r5, #1
    dc8a:	4408      	add	r0, r1
    dc8c:	b2ed      	uxtb	r5, r5
    dc8e:	72e0      	strb	r0, [r4, #11]
    dc90:	2d05      	cmp	r5, #5
    dc92:	d3f3      	bcc.n	dc7c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    dc94:	bd70      	pop	{r4, r5, r6, pc}
    dc96:	b570      	push	{r4, r5, r6, lr}
    dc98:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
    dc9c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    dca0:	2401      	movs	r4, #1
    dca2:	fb03 2101 	mla	r1, r3, r1, r2
    dca6:	2225      	movs	r2, #37	; 0x25
    dca8:	fbb1 f3f2 	udiv	r3, r1, r2
    dcac:	fb02 1113 	mls	r1, r2, r3, r1
    dcb0:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    dcb4:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    dcb8:	f001 0307 	and.w	r3, r1, #7
    dcbc:	7f92      	ldrb	r2, [r2, #30]
    dcbe:	fa04 f303 	lsl.w	r3, r4, r3
    dcc2:	421a      	tst	r2, r3
    dcc4:	d003      	beq.n	dcce <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x74>
    dcc6:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    dcca:	2000      	movs	r0, #0
    dccc:	bd70      	pop	{r4, r5, r6, pc}
    dcce:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    dcd2:	fbb1 f3f2 	udiv	r3, r1, r2
    dcd6:	fb02 1113 	mls	r1, r2, r3, r1
    dcda:	1c49      	adds	r1, r1, #1
    dcdc:	b2c9      	uxtb	r1, r1
    dcde:	2300      	movs	r3, #0
    dce0:	18c5      	adds	r5, r0, r3
    dce2:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
    dce6:	428a      	cmp	r2, r1
    dce8:	d310      	bcc.n	dd0c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb2>
    dcea:	7fad      	ldrb	r5, [r5, #30]
    dcec:	2200      	movs	r2, #0
    dcee:	fa04 f602 	lsl.w	r6, r4, r2
    dcf2:	4235      	tst	r5, r6
    dcf4:	d001      	beq.n	dcfa <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xa0>
    dcf6:	1e49      	subs	r1, r1, #1
    dcf8:	b2c9      	uxtb	r1, r1
    dcfa:	b121      	cbz	r1, dd06 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xac>
    dcfc:	1c52      	adds	r2, r2, #1
    dcfe:	b2d2      	uxtb	r2, r2
    dd00:	2a08      	cmp	r2, #8
    dd02:	d3f4      	bcc.n	dcee <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x94>
    dd04:	e004      	b.n	dd10 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    dd06:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    dd0a:	e7dc      	b.n	dcc6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    dd0c:	1a89      	subs	r1, r1, r2
    dd0e:	b2c9      	uxtb	r1, r1
    dd10:	1c5b      	adds	r3, r3, #1
    dd12:	b2db      	uxtb	r3, r3
    dd14:	2b05      	cmp	r3, #5
    dd16:	d3e3      	bcc.n	dce0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x86>
    dd18:	201f      	movs	r0, #31
    dd1a:	bd70      	pop	{r4, r5, r6, pc}

0000dd1c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    dd1c:	7802      	ldrb	r2, [r0, #0]
    dd1e:	f002 020f 	and.w	r2, r2, #15
    dd22:	2a03      	cmp	r2, #3
    dd24:	d003      	beq.n	dd2e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    dd26:	2a05      	cmp	r2, #5
    dd28:	d104      	bne.n	dd34 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    dd2a:	f000 b92e 	b.w	df8a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    dd2e:	7840      	ldrb	r0, [r0, #1]
    dd30:	280c      	cmp	r0, #12
    dd32:	d001      	beq.n	dd38 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    dd34:	2000      	movs	r0, #0
    dd36:	4770      	bx	lr
    dd38:	2001      	movs	r0, #1
    dd3a:	4770      	bx	lr

0000dd3c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    dd3c:	b570      	push	{r4, r5, r6, lr}
    dd3e:	4614      	mov	r4, r2
    dd40:	4605      	mov	r5, r0
    dd42:	2a1f      	cmp	r2, #31
    dd44:	d903      	bls.n	dd4e <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    dd46:	21f1      	movs	r1, #241	; 0xf1
    dd48:	202a      	movs	r0, #42	; 0x2a
    dd4a:	f7f6 fc0f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd4e:	f105 0009 	add.w	r0, r5, #9
    dd52:	f7fe fba2 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd56:	1da4      	adds	r4, r4, #6
    dd58:	706c      	strb	r4, [r5, #1]
    dd5a:	bd70      	pop	{r4, r5, r6, pc}

0000dd5c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    dd5c:	b510      	push	{r4, lr}
    dd5e:	7802      	ldrb	r2, [r0, #0]
    dd60:	f001 030f 	and.w	r3, r1, #15
    dd64:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    dd68:	431a      	orrs	r2, r3
    dd6a:	7002      	strb	r2, [r0, #0]
    dd6c:	2907      	cmp	r1, #7
    dd6e:	d20c      	bcs.n	dd8a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    dd70:	e8df f001 	tbb	[pc, r1]
    dd74:	06040604 	.word	0x06040604
    dd78:	00040804 	.word	0x00040804
    dd7c:	2106      	movs	r1, #6
    dd7e:	e002      	b.n	dd86 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    dd80:	210c      	movs	r1, #12
    dd82:	e000      	b.n	dd86 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    dd84:	2122      	movs	r1, #34	; 0x22
    dd86:	7041      	strb	r1, [r0, #1]
    dd88:	bd10      	pop	{r4, pc}
    dd8a:	21ab      	movs	r1, #171	; 0xab
    dd8c:	202a      	movs	r0, #42	; 0x2a
    dd8e:	f7f6 fbed 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dd92 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    dd92:	680a      	ldr	r2, [r1, #0]
    dd94:	f840 2f09 	str.w	r2, [r0, #9]!
    dd98:	8889      	ldrh	r1, [r1, #4]
    dd9a:	8081      	strh	r1, [r0, #4]
    dd9c:	4770      	bx	lr

0000dd9e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    dd9e:	7802      	ldrb	r2, [r0, #0]
    dda0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dda4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    dda8:	7002      	strb	r2, [r0, #0]
    ddaa:	4770      	bx	lr

0000ddac <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    ddac:	680a      	ldr	r2, [r1, #0]
    ddae:	f840 2f03 	str.w	r2, [r0, #3]!
    ddb2:	8889      	ldrh	r1, [r1, #4]
    ddb4:	8081      	strh	r1, [r0, #4]
    ddb6:	4770      	bx	lr

0000ddb8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    ddb8:	7802      	ldrb	r2, [r0, #0]
    ddba:	2340      	movs	r3, #64	; 0x40
    ddbc:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ddc0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    ddc4:	430a      	orrs	r2, r1
    ddc6:	7002      	strb	r2, [r0, #0]
    ddc8:	4770      	bx	lr

0000ddca <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    ddca:	b570      	push	{r4, r5, r6, lr}
    ddcc:	4614      	mov	r4, r2
    ddce:	4605      	mov	r5, r0
    ddd0:	2a1f      	cmp	r2, #31
    ddd2:	d904      	bls.n	ddde <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    ddd4:	f240 1113 	movw	r1, #275	; 0x113
    ddd8:	202a      	movs	r0, #42	; 0x2a
    ddda:	f7f6 fbc7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddde:	f105 0009 	add.w	r0, r5, #9
    dde2:	f7fe fb5a 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dde6:	1da4      	adds	r4, r4, #6
    dde8:	706c      	strb	r4, [r5, #1]
    ddea:	bd70      	pop	{r4, r5, r6, pc}

0000ddec <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    ddec:	6842      	ldr	r2, [r0, #4]
    ddee:	600a      	str	r2, [r1, #0]
    ddf0:	7a00      	ldrb	r0, [r0, #8]
    ddf2:	7108      	strb	r0, [r1, #4]
    ddf4:	4770      	bx	lr

0000ddf6 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    ddf6:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    ddfa:	4770      	bx	lr

0000ddfc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    ddfc:	b570      	push	{r4, r5, r6, lr}
    ddfe:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    de02:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    de06:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    de0a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    de0e:	88c0      	ldrh	r0, [r0, #6]
    de10:	b131      	cbz	r1, de20 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    de12:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    de16:	d903      	bls.n	de20 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    de18:	f640 5107 	movw	r1, #3335	; 0xd07
    de1c:	428a      	cmp	r2, r1
    de1e:	d90b      	bls.n	de38 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    de20:	1f91      	subs	r1, r2, #6
    de22:	f640 467a 	movw	r6, #3194	; 0xc7a
    de26:	42b1      	cmp	r1, r6
    de28:	d810      	bhi.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de2a:	b17b      	cbz	r3, de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de2c:	2b08      	cmp	r3, #8
    de2e:	d80d      	bhi.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de30:	4293      	cmp	r3, r2
    de32:	d20b      	bcs.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de34:	4295      	cmp	r5, r2
    de36:	d809      	bhi.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de38:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    de3c:	d206      	bcs.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de3e:	f640 4176 	movw	r1, #3190	; 0xc76
    de42:	380a      	subs	r0, #10
    de44:	4288      	cmp	r0, r1
    de46:	d801      	bhi.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de48:	2001      	movs	r0, #1
    de4a:	bd70      	pop	{r4, r5, r6, pc}
    de4c:	2000      	movs	r0, #0
    de4e:	bd70      	pop	{r4, r5, r6, pc}

0000de50 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    de50:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    de54:	4770      	bx	lr

0000de56 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    de56:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    de5a:	4770      	bx	lr

0000de5c <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    de5c:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    de60:	4770      	bx	lr

0000de62 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    de62:	b510      	push	{r4, lr}
    de64:	29fb      	cmp	r1, #251	; 0xfb
    de66:	d904      	bls.n	de72 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    de68:	f240 61ac 	movw	r1, #1708	; 0x6ac
    de6c:	202a      	movs	r0, #42	; 0x2a
    de6e:	f7f6 fb7d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de72:	7041      	strb	r1, [r0, #1]
    de74:	bd10      	pop	{r4, pc}

0000de76 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    de76:	8980      	ldrh	r0, [r0, #12]
    de78:	8008      	strh	r0, [r1, #0]
    de7a:	4770      	bx	lr

0000de7c <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    de7c:	f8d0 0016 	ldr.w	r0, [r0, #22]
    de80:	6008      	str	r0, [r1, #0]
    de82:	4770      	bx	lr

0000de84 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    de84:	6842      	ldr	r2, [r0, #4]
    de86:	600a      	str	r2, [r1, #0]
    de88:	6880      	ldr	r0, [r0, #8]
    de8a:	6048      	str	r0, [r1, #4]
    de8c:	4770      	bx	lr

0000de8e <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    de8e:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    de92:	600a      	str	r2, [r1, #0]
    de94:	6840      	ldr	r0, [r0, #4]
    de96:	6048      	str	r0, [r1, #4]
    de98:	4770      	bx	lr

0000de9a <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    de9a:	6809      	ldr	r1, [r1, #0]
    de9c:	60c1      	str	r1, [r0, #12]
    de9e:	4770      	bx	lr

0000dea0 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    dea0:	680a      	ldr	r2, [r1, #0]
    dea2:	6042      	str	r2, [r0, #4]
    dea4:	6849      	ldr	r1, [r1, #4]
    dea6:	6081      	str	r1, [r0, #8]
    dea8:	4770      	bx	lr

0000deaa <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    deaa:	7800      	ldrb	r0, [r0, #0]
    deac:	f000 0003 	and.w	r0, r0, #3
    deb0:	4770      	bx	lr

0000deb2 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    deb2:	8880      	ldrh	r0, [r0, #4]
    deb4:	4770      	bx	lr

0000deb6 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    deb6:	88c0      	ldrh	r0, [r0, #6]
    deb8:	4770      	bx	lr

0000deba <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    deba:	8900      	ldrh	r0, [r0, #8]
    debc:	4770      	bx	lr

0000debe <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    debe:	8940      	ldrh	r0, [r0, #10]
    dec0:	4770      	bx	lr

0000dec2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    dec2:	8901      	ldrh	r1, [r0, #8]
    dec4:	291b      	cmp	r1, #27
    dec6:	d30c      	bcc.n	dee2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dec8:	8941      	ldrh	r1, [r0, #10]
    deca:	f44f 72a4 	mov.w	r2, #328	; 0x148
    dece:	4291      	cmp	r1, r2
    ded0:	d307      	bcc.n	dee2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    ded2:	8881      	ldrh	r1, [r0, #4]
    ded4:	291b      	cmp	r1, #27
    ded6:	d304      	bcc.n	dee2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    ded8:	88c0      	ldrh	r0, [r0, #6]
    deda:	4290      	cmp	r0, r2
    dedc:	d301      	bcc.n	dee2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dede:	2001      	movs	r0, #1
    dee0:	4770      	bx	lr
    dee2:	2000      	movs	r0, #0
    dee4:	4770      	bx	lr

0000dee6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    dee6:	7901      	ldrb	r1, [r0, #4]
    dee8:	0749      	lsls	r1, r1, #29
    deea:	d004      	beq.n	def6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    deec:	7940      	ldrb	r0, [r0, #5]
    deee:	0740      	lsls	r0, r0, #29
    def0:	d001      	beq.n	def6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    def2:	2001      	movs	r0, #1
    def4:	4770      	bx	lr
    def6:	2000      	movs	r0, #0
    def8:	4770      	bx	lr

0000defa <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    defa:	88c0      	ldrh	r0, [r0, #6]
    defc:	4770      	bx	lr

0000defe <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    defe:	7901      	ldrb	r1, [r0, #4]
    df00:	7940      	ldrb	r0, [r0, #5]
    df02:	f001 0107 	and.w	r1, r1, #7
    df06:	1e4a      	subs	r2, r1, #1
    df08:	f000 0007 	and.w	r0, r0, #7
    df0c:	4011      	ands	r1, r2
    df0e:	1e42      	subs	r2, r0, #1
    df10:	4010      	ands	r0, r2
    df12:	4301      	orrs	r1, r0
    df14:	d001      	beq.n	df1a <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    df16:	2000      	movs	r0, #0
    df18:	4770      	bx	lr
    df1a:	2001      	movs	r0, #1
    df1c:	4770      	bx	lr

0000df1e <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    df1e:	7900      	ldrb	r0, [r0, #4]
    df20:	4770      	bx	lr

0000df22 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    df22:	7940      	ldrb	r0, [r0, #5]
    df24:	4770      	bx	lr

0000df26 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    df26:	7900      	ldrb	r0, [r0, #4]
    df28:	4770      	bx	lr

0000df2a <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    df2a:	7101      	strb	r1, [r0, #4]
    df2c:	4770      	bx	lr

0000df2e <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    df2e:	7940      	ldrb	r0, [r0, #5]
    df30:	4770      	bx	lr

0000df32 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    df32:	7141      	strb	r1, [r0, #5]
    df34:	4770      	bx	lr

0000df36 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    df36:	b510      	push	{r4, lr}
    df38:	2a1b      	cmp	r2, #27
    df3a:	d904      	bls.n	df46 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    df3c:	f240 4182 	movw	r1, #1154	; 0x482
    df40:	202a      	movs	r0, #42	; 0x2a
    df42:	f7f6 fb13 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df46:	7042      	strb	r2, [r0, #1]
    df48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df4c:	1cc0      	adds	r0, r0, #3
    df4e:	f7fe baa4 	b.w	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000df52 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    df52:	7802      	ldrb	r2, [r0, #0]
    df54:	f001 0103 	and.w	r1, r1, #3
    df58:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    df5c:	430a      	orrs	r2, r1
    df5e:	7002      	strb	r2, [r0, #0]
    df60:	4770      	bx	lr

0000df62 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    df62:	7101      	strb	r1, [r0, #4]
    df64:	0a09      	lsrs	r1, r1, #8
    df66:	7141      	strb	r1, [r0, #5]
    df68:	4770      	bx	lr

0000df6a <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    df6a:	7181      	strb	r1, [r0, #6]
    df6c:	0a09      	lsrs	r1, r1, #8
    df6e:	71c1      	strb	r1, [r0, #7]
    df70:	4770      	bx	lr

0000df72 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    df72:	7201      	strb	r1, [r0, #8]
    df74:	0a09      	lsrs	r1, r1, #8
    df76:	7241      	strb	r1, [r0, #9]
    df78:	4770      	bx	lr

0000df7a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    df7a:	7281      	strb	r1, [r0, #10]
    df7c:	0a09      	lsrs	r1, r1, #8
    df7e:	72c1      	strb	r1, [r0, #11]
    df80:	4770      	bx	lr

0000df82 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    df82:	7900      	ldrb	r0, [r0, #4]
    df84:	4770      	bx	lr

0000df86 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    df86:	7900      	ldrb	r0, [r0, #4]
    df88:	4770      	bx	lr
    df8a:	b570      	push	{r4, r5, r6, lr}
    df8c:	f8d0 201f 	ldr.w	r2, [r0, #31]
    df90:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    df94:	f012 0fff 	tst.w	r2, #255	; 0xff
    df98:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    df9c:	d108      	bne.n	dfb0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    df9e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    dfa2:	b92c      	cbnz	r4, dfb0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dfa4:	f3c2 4407 	ubfx	r4, r2, #16, #8
    dfa8:	b914      	cbnz	r4, dfb0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dfaa:	0e12      	lsrs	r2, r2, #24
    dfac:	d100      	bne.n	dfb0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dfae:	b34b      	cbz	r3, e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfb0:	7846      	ldrb	r6, [r0, #1]
    dfb2:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    dfb6:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    dfba:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    dfbe:	7d83      	ldrb	r3, [r0, #22]
    dfc0:	2e22      	cmp	r6, #34	; 0x22
    dfc2:	d11f      	bne.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfc4:	b131      	cbz	r1, dfd4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    dfc6:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    dfca:	d903      	bls.n	dfd4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    dfcc:	f640 5107 	movw	r1, #3335	; 0xd07
    dfd0:	428a      	cmp	r2, r1
    dfd2:	d90b      	bls.n	dfec <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    dfd4:	1f91      	subs	r1, r2, #6
    dfd6:	f640 467a 	movw	r6, #3194	; 0xc7a
    dfda:	42b1      	cmp	r1, r6
    dfdc:	d812      	bhi.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfde:	b18b      	cbz	r3, e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfe0:	2b08      	cmp	r3, #8
    dfe2:	d80f      	bhi.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfe4:	4293      	cmp	r3, r2
    dfe6:	d20d      	bcs.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfe8:	4295      	cmp	r5, r2
    dfea:	d80b      	bhi.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfec:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    dff0:	d208      	bcs.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dff2:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    dff6:	f640 4176 	movw	r1, #3190	; 0xc76
    dffa:	380a      	subs	r0, #10
    dffc:	4288      	cmp	r0, r1
    dffe:	d801      	bhi.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e000:	2001      	movs	r0, #1
    e002:	bd70      	pop	{r4, r5, r6, pc}
    e004:	2000      	movs	r0, #0
    e006:	bd70      	pop	{r4, r5, r6, pc}

0000e008 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e008:	6841      	ldr	r1, [r0, #4]
    e00a:	2200      	movs	r2, #0
    e00c:	f891 321a 	ldrb.w	r3, [r1, #538]	; 0x21a
    e010:	2b00      	cmp	r3, #0
    e012:	d004      	beq.n	e01e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e014:	f881 221a 	strb.w	r2, [r1, #538]	; 0x21a
    e018:	6840      	ldr	r0, [r0, #4]
    e01a:	f000 bd53 	b.w	eac4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e01e:	4770      	bx	lr

0000e020 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e020:	b510      	push	{r4, lr}
    e022:	7901      	ldrb	r1, [r0, #4]
    e024:	b119      	cbz	r1, e02e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e026:	2901      	cmp	r1, #1
    e028:	d006      	beq.n	e038 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e02a:	2000      	movs	r0, #0
    e02c:	bd10      	pop	{r4, pc}
    e02e:	8842      	ldrh	r2, [r0, #2]
    e030:	6883      	ldr	r3, [r0, #8]
    e032:	8800      	ldrh	r0, [r0, #0]
    e034:	2102      	movs	r1, #2
    e036:	e003      	b.n	e040 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e038:	8842      	ldrh	r2, [r0, #2]
    e03a:	6883      	ldr	r3, [r0, #8]
    e03c:	8800      	ldrh	r0, [r0, #0]
    e03e:	2101      	movs	r1, #1
    e040:	f7f8 f9b0 	bl	63a4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e044:	b908      	cbnz	r0, e04a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e046:	f7f8 f9f9 	bl	643c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e04a:	2001      	movs	r0, #1
    e04c:	bd10      	pop	{r4, pc}

0000e04e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e04e:	f7f8 bc3f 	b.w	68d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c0>
    e052:	b570      	push	{r4, r5, r6, lr}
    e054:	b180      	cbz	r0, e078 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2a>
    e056:	4604      	mov	r4, r0
    e058:	2300      	movs	r3, #0
    e05a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    e05e:	2a12      	cmp	r2, #18
    e060:	d047      	beq.n	e0f2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    e062:	dc0c      	bgt.n	e07e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x30>
    e064:	f1a2 0207 	sub.w	r2, r2, #7
    e068:	2a08      	cmp	r2, #8
    e06a:	d210      	bcs.n	e08e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    e06c:	e8df f002 	tbb	[pc, r2]
    e070:	0f0f1435 	.word	0x0f0f1435
    e074:	3b0f212a 	.word	0x3b0f212a
    e078:	f240 11d1 	movw	r1, #465	; 0x1d1
    e07c:	e009      	b.n	e092 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    e07e:	2a13      	cmp	r2, #19
    e080:	d058      	beq.n	e134 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe6>
    e082:	2a1c      	cmp	r2, #28
    e084:	d04f      	beq.n	e126 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xd8>
    e086:	2a1e      	cmp	r2, #30
    e088:	d03e      	beq.n	e108 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xba>
    e08a:	2a1f      	cmp	r2, #31
    e08c:	d047      	beq.n	e11e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xd0>
    e08e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    e092:	2010      	movs	r0, #16
    e094:	f7f6 fa6a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e098:	704b      	strb	r3, [r1, #1]
    e09a:	2207      	movs	r2, #7
    e09c:	700a      	strb	r2, [r1, #0]
    e09e:	84e3      	strh	r3, [r4, #38]	; 0x26
    e0a0:	f850 2f80 	ldr.w	r2, [r0, #128]!
    e0a4:	604a      	str	r2, [r1, #4]
    e0a6:	6842      	ldr	r2, [r0, #4]
    e0a8:	608a      	str	r2, [r1, #8]
    e0aa:	8900      	ldrh	r0, [r0, #8]
    e0ac:	8188      	strh	r0, [r1, #12]
    e0ae:	710b      	strb	r3, [r1, #4]
    e0b0:	bd70      	pop	{r4, r5, r6, pc}
    e0b2:	704b      	strb	r3, [r1, #1]
    e0b4:	220c      	movs	r2, #12
    e0b6:	700a      	strb	r2, [r1, #0]
    e0b8:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
    e0bc:	7108      	strb	r0, [r1, #4]
    e0be:	8820      	ldrh	r0, [r4, #0]
    e0c0:	80c8      	strh	r0, [r1, #6]
    e0c2:	bd70      	pop	{r4, r5, r6, pc}
    e0c4:	704b      	strb	r3, [r1, #1]
    e0c6:	220b      	movs	r2, #11
    e0c8:	700a      	strb	r2, [r1, #0]
    e0ca:	f810 2fc2 	ldrb.w	r2, [r0, #194]!
    e0ce:	710a      	strb	r2, [r1, #4]
    e0d0:	8822      	ldrh	r2, [r4, #0]
    e0d2:	80ca      	strh	r2, [r1, #6]
    e0d4:	7900      	ldrb	r0, [r0, #4]
    e0d6:	7208      	strb	r0, [r1, #8]
    e0d8:	bd70      	pop	{r4, r5, r6, pc}
    e0da:	704b      	strb	r3, [r1, #1]
    e0dc:	2206      	movs	r2, #6
    e0de:	700a      	strb	r2, [r1, #0]
    e0e0:	f850 2f6a 	ldr.w	r2, [r0, #106]!
    e0e4:	e00a      	b.n	e0fc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xae>
    e0e6:	704b      	strb	r3, [r1, #1]
    e0e8:	200e      	movs	r0, #14
    e0ea:	7008      	strb	r0, [r1, #0]
    e0ec:	8820      	ldrh	r0, [r4, #0]
    e0ee:	8088      	strh	r0, [r1, #4]
    e0f0:	bd70      	pop	{r4, r5, r6, pc}
    e0f2:	704b      	strb	r3, [r1, #1]
    e0f4:	2212      	movs	r2, #18
    e0f6:	700a      	strb	r2, [r1, #0]
    e0f8:	f850 2f22 	ldr.w	r2, [r0, #34]!
    e0fc:	604a      	str	r2, [r1, #4]
    e0fe:	6842      	ldr	r2, [r0, #4]
    e100:	608a      	str	r2, [r1, #8]
    e102:	6880      	ldr	r0, [r0, #8]
    e104:	60c8      	str	r0, [r1, #12]
    e106:	bd70      	pop	{r4, r5, r6, pc}
    e108:	704b      	strb	r3, [r1, #1]
    e10a:	221a      	movs	r2, #26
    e10c:	700a      	strb	r2, [r1, #0]
    e10e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e110:	604a      	str	r2, [r1, #4]
    e112:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    e114:	608a      	str	r2, [r1, #8]
    e116:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e11a:	8188      	strh	r0, [r1, #12]
    e11c:	bd70      	pop	{r4, r5, r6, pc}
    e11e:	221b      	movs	r2, #27
    e120:	700a      	strb	r2, [r1, #0]
    e122:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    e124:	e004      	b.n	e130 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe2>
    e126:	704b      	strb	r3, [r1, #1]
    e128:	2218      	movs	r2, #24
    e12a:	700a      	strb	r2, [r1, #0]
    e12c:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e130:	6048      	str	r0, [r1, #4]
    e132:	bd70      	pop	{r4, r5, r6, pc}
    e134:	704b      	strb	r3, [r1, #1]
    e136:	2213      	movs	r2, #19
    e138:	700a      	strb	r2, [r1, #0]
    e13a:	f850 2f5a 	ldr.w	r2, [r0, #90]!
    e13e:	604a      	str	r2, [r1, #4]
    e140:	8880      	ldrh	r0, [r0, #4]
    e142:	8108      	strh	r0, [r1, #8]
    e144:	bd70      	pop	{r4, r5, r6, pc}
    e146:	2000      	movs	r0, #0
    e148:	7048      	strb	r0, [r1, #1]
    e14a:	2003      	movs	r0, #3
    e14c:	7008      	strb	r0, [r1, #0]
    e14e:	2001      	movs	r0, #1
    e150:	7108      	strb	r0, [r1, #4]
    e152:	4770      	bx	lr

0000e154 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e154:	b4f0      	push	{r4, r5, r6, r7}
    e156:	8150      	strh	r0, [r2, #10]
    e158:	890d      	ldrh	r5, [r1, #8]
    e15a:	4614      	mov	r4, r2
    e15c:	8195      	strh	r5, [r2, #12]
    e15e:	898a      	ldrh	r2, [r1, #12]
    e160:	81e2      	strh	r2, [r4, #14]
    e162:	8948      	ldrh	r0, [r1, #10]
    e164:	8220      	strh	r0, [r4, #16]
    e166:	89ce      	ldrh	r6, [r1, #14]
    e168:	8266      	strh	r6, [r4, #18]
    e16a:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    e16c:	42b7      	cmp	r7, r6
    e16e:	d108      	bne.n	e182 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e170:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    e172:	4286      	cmp	r6, r0
    e174:	d105      	bne.n	e182 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e176:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    e178:	4296      	cmp	r6, r2
    e17a:	d102      	bne.n	e182 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e17c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    e17e:	42aa      	cmp	r2, r5
    e180:	d001      	beq.n	e186 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e182:	2201      	movs	r2, #1
    e184:	e000      	b.n	e188 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    e186:	2200      	movs	r2, #0
    e188:	7522      	strb	r2, [r4, #20]
    e18a:	8548      	strh	r0, [r1, #42]	; 0x2a
    e18c:	8a60      	ldrh	r0, [r4, #18]
    e18e:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e190:	89a0      	ldrh	r0, [r4, #12]
    e192:	8588      	strh	r0, [r1, #44]	; 0x2c
    e194:	89e0      	ldrh	r0, [r4, #14]
    e196:	8608      	strh	r0, [r1, #48]	; 0x30
    e198:	4620      	mov	r0, r4
    e19a:	bcf0      	pop	{r4, r5, r6, r7}
    e19c:	2212      	movs	r2, #18
    e19e:	4619      	mov	r1, r3
    e1a0:	f7f8 b956 	b.w	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000e1a4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e1a4:	b510      	push	{r4, lr}
    e1a6:	888c      	ldrh	r4, [r1, #4]
    e1a8:	890a      	ldrh	r2, [r1, #8]
    e1aa:	884b      	ldrh	r3, [r1, #2]
    e1ac:	88c9      	ldrh	r1, [r1, #6]
    e1ae:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e1b2:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e1b6:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e1ba:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e1be:	bd10      	pop	{r4, pc}

0000e1c0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e1c0:	b570      	push	{r4, r5, r6, lr}
    e1c2:	4615      	mov	r5, r2
    e1c4:	460c      	mov	r4, r1
    e1c6:	f000 f8cc 	bl	e362 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    e1ca:	3096      	adds	r0, #150	; 0x96
    e1cc:	4428      	add	r0, r5
    e1ce:	42a0      	cmp	r0, r4
    e1d0:	d801      	bhi.n	e1d6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e1d2:	1a20      	subs	r0, r4, r0
    e1d4:	bd70      	pop	{r4, r5, r6, pc}
    e1d6:	2000      	movs	r0, #0
    e1d8:	bd70      	pop	{r4, r5, r6, pc}

0000e1da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e1da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1de:	4604      	mov	r4, r0
    e1e0:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e1e2:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e1e4:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e1e8:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e1ec:	4285      	cmp	r5, r0
    e1ee:	d300      	bcc.n	e1f2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e1f0:	4605      	mov	r5, r0
    e1f2:	4620      	mov	r0, r4
    e1f4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e1f8:	f000 f8a3 	bl	e342 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    e1fc:	4601      	mov	r1, r0
    e1fe:	86e5      	strh	r5, [r4, #54]	; 0x36
    e200:	8761      	strh	r1, [r4, #58]	; 0x3a
    e202:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e204:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e208:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e20a:	4680      	mov	r8, r0
    e20c:	42aa      	cmp	r2, r5
    e20e:	d200      	bcs.n	e212 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e210:	462a      	mov	r2, r5
    e212:	428b      	cmp	r3, r1
    e214:	d200      	bcs.n	e218 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e216:	460b      	mov	r3, r1
    e218:	8202      	strh	r2, [r0, #16]
    e21a:	f8a8 3012 	strh.w	r3, [r8, #18]
    e21e:	42bd      	cmp	r5, r7
    e220:	d101      	bne.n	e226 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e222:	42b1      	cmp	r1, r6
    e224:	d001      	beq.n	e22a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e226:	2001      	movs	r0, #1
    e228:	e000      	b.n	e22c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e22a:	2000      	movs	r0, #0
    e22c:	4681      	mov	r9, r0
    e22e:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e232:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e236:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e238:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e23a:	4285      	cmp	r5, r0
    e23c:	d300      	bcc.n	e240 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e23e:	4605      	mov	r5, r0
    e240:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e244:	4620      	mov	r0, r4
    e246:	f000 f884 	bl	e352 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    e24a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e24e:	2902      	cmp	r1, #2
    e250:	d108      	bne.n	e264 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e252:	42af      	cmp	r7, r5
    e254:	d200      	bcs.n	e258 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e256:	463d      	mov	r5, r7
    e258:	4286      	cmp	r6, r0
    e25a:	d200      	bcs.n	e25e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e25c:	4630      	mov	r0, r6
    e25e:	2100      	movs	r1, #0
    e260:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e264:	f8a8 5008 	strh.w	r5, [r8, #8]
    e268:	f8a8 000c 	strh.w	r0, [r8, #12]
    e26c:	42bd      	cmp	r5, r7
    e26e:	d101      	bne.n	e274 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e270:	42b0      	cmp	r0, r6
    e272:	d001      	beq.n	e278 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e274:	2001      	movs	r0, #1
    e276:	e000      	b.n	e27a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e278:	2000      	movs	r0, #0
    e27a:	ea40 0009 	orr.w	r0, r0, r9
    e27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e282 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e282:	6840      	ldr	r0, [r0, #4]
    e284:	4770      	bx	lr

0000e286 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e28a:	4616      	mov	r6, r2
    e28c:	460f      	mov	r7, r1
    e28e:	4604      	mov	r4, r0
    e290:	f000 f867 	bl	e362 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    e294:	4605      	mov	r5, r0
    e296:	463a      	mov	r2, r7
    e298:	6921      	ldr	r1, [r4, #16]
    e29a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e29c:	f000 f84c 	bl	e338 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e2a0:	19a9      	adds	r1, r5, r6
    e2a2:	4281      	cmp	r1, r0
    e2a4:	d300      	bcc.n	e2a8 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e2a6:	4608      	mov	r0, r1
    e2a8:	6320      	str	r0, [r4, #48]	; 0x30
    e2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e2ae <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e2ae:	221b      	movs	r2, #27
    e2b0:	8402      	strh	r2, [r0, #32]
    e2b2:	8382      	strh	r2, [r0, #28]
    e2b4:	82c2      	strh	r2, [r0, #22]
    e2b6:	8282      	strh	r2, [r0, #20]
    e2b8:	8142      	strh	r2, [r0, #10]
    e2ba:	8202      	strh	r2, [r0, #16]
    e2bc:	8102      	strh	r2, [r0, #8]
    e2be:	8542      	strh	r2, [r0, #42]	; 0x2a
    e2c0:	8582      	strh	r2, [r0, #44]	; 0x2c
    e2c2:	8482      	strh	r2, [r0, #36]	; 0x24
    e2c4:	2900      	cmp	r1, #0
    e2c6:	d10a      	bne.n	e2de <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e2c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e2cc:	8441      	strh	r1, [r0, #34]	; 0x22
    e2ce:	83c1      	strh	r1, [r0, #30]
    e2d0:	8341      	strh	r1, [r0, #26]
    e2d2:	8301      	strh	r1, [r0, #24]
    e2d4:	81c1      	strh	r1, [r0, #14]
    e2d6:	8241      	strh	r1, [r0, #18]
    e2d8:	8181      	strh	r1, [r0, #12]
    e2da:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e2dc:	8601      	strh	r1, [r0, #48]	; 0x30
    e2de:	4770      	bx	lr

0000e2e0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e2e0:	6800      	ldr	r0, [r0, #0]
    e2e2:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e2e6:	4290      	cmp	r0, r2
    e2e8:	d903      	bls.n	e2f2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e2ea:	1a40      	subs	r0, r0, r1
    e2ec:	389c      	subs	r0, #156	; 0x9c
    e2ee:	0840      	lsrs	r0, r0, #1
    e2f0:	4770      	bx	lr
    e2f2:	2000      	movs	r0, #0
    e2f4:	4770      	bx	lr

0000e2f6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e2f6:	b510      	push	{r4, lr}
    e2f8:	9c02      	ldr	r4, [sp, #8]
    e2fa:	8281      	strh	r1, [r0, #20]
    e2fc:	82c2      	strh	r2, [r0, #22]
    e2fe:	8303      	strh	r3, [r0, #24]
    e300:	8344      	strh	r4, [r0, #26]
    e302:	bd10      	pop	{r4, pc}

0000e304 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e304:	b430      	push	{r4, r5}
    e306:	8150      	strh	r0, [r2, #10]
    e308:	8a88      	ldrh	r0, [r1, #20]
    e30a:	8190      	strh	r0, [r2, #12]
    e30c:	8ac8      	ldrh	r0, [r1, #22]
    e30e:	81d0      	strh	r0, [r2, #14]
    e310:	8b08      	ldrh	r0, [r1, #24]
    e312:	8210      	strh	r0, [r2, #16]
    e314:	8b48      	ldrh	r0, [r1, #26]
    e316:	4614      	mov	r4, r2
    e318:	8250      	strh	r0, [r2, #18]
    e31a:	4620      	mov	r0, r4
    e31c:	bc30      	pop	{r4, r5}
    e31e:	221e      	movs	r2, #30
    e320:	4619      	mov	r1, r3
    e322:	f7f8 b895 	b.w	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e326:	2902      	cmp	r1, #2
    e328:	d003      	beq.n	e332 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    e32a:	00c0      	lsls	r0, r0, #3
    e32c:	3070      	adds	r0, #112	; 0x70
    e32e:	b280      	uxth	r0, r0
    e330:	4770      	bx	lr
    e332:	0080      	lsls	r0, r0, #2
    e334:	303c      	adds	r0, #60	; 0x3c
    e336:	e7fa      	b.n	e32e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e338:	4288      	cmp	r0, r1
    e33a:	d300      	bcc.n	e33e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    e33c:	4608      	mov	r0, r1
    e33e:	1a80      	subs	r0, r0, r2
    e340:	4770      	bx	lr
    e342:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e346:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e34a:	4281      	cmp	r1, r0
    e34c:	d200      	bcs.n	e350 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    e34e:	4608      	mov	r0, r1
    e350:	4770      	bx	lr
    e352:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e356:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e35a:	4281      	cmp	r1, r0
    e35c:	d200      	bcs.n	e360 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    e35e:	4608      	mov	r0, r1
    e360:	4770      	bx	lr
    e362:	2196      	movs	r1, #150	; 0x96
    e364:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e368:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e36c:	f000 b800 	b.w	e370 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    e370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e374:	460d      	mov	r5, r1
    e376:	4606      	mov	r6, r0
    e378:	4698      	mov	r8, r3
    e37a:	4617      	mov	r7, r2
    e37c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e37e:	4611      	mov	r1, r2
    e380:	f7ff ffd1 	bl	e326 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    e384:	4604      	mov	r4, r0
    e386:	4639      	mov	r1, r7
    e388:	4630      	mov	r0, r6
    e38a:	f7ff ffe2 	bl	e352 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    e38e:	42a0      	cmp	r0, r4
    e390:	d200      	bcs.n	e394 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    e392:	4604      	mov	r4, r0
    e394:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e396:	4641      	mov	r1, r8
    e398:	f7ff ffc5 	bl	e326 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    e39c:	4607      	mov	r7, r0
    e39e:	4641      	mov	r1, r8
    e3a0:	4630      	mov	r0, r6
    e3a2:	f7ff ffce 	bl	e342 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    e3a6:	42b8      	cmp	r0, r7
    e3a8:	d300      	bcc.n	e3ac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    e3aa:	4638      	mov	r0, r7
    e3ac:	4420      	add	r0, r4
    e3ae:	4428      	add	r0, r5
    e3b0:	1d80      	adds	r0, r0, #6
    e3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3b6:	b510      	push	{r4, lr}
    e3b8:	4604      	mov	r4, r0
    e3ba:	2108      	movs	r1, #8
    e3bc:	4620      	mov	r0, r4
    e3be:	f7f6 f983 	bl	46c8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e3c2:	6820      	ldr	r0, [r4, #0]
    e3c4:	2800      	cmp	r0, #0
    e3c6:	d102      	bne.n	e3ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xca>
    e3c8:	6860      	ldr	r0, [r4, #4]
    e3ca:	2800      	cmp	r0, #0
    e3cc:	d0f5      	beq.n	e3ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    e3ce:	bd10      	pop	{r4, pc}

0000e3d0 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e3d0:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e3d4:	2255      	movs	r2, #85	; 0x55
    e3d6:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e3da:	4408      	add	r0, r1
    e3dc:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e3e0:	2233      	movs	r2, #51	; 0x33
    e3e2:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e3e6:	4408      	add	r0, r1
    e3e8:	f000 010f 	and.w	r1, r0, #15
    e3ec:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e3f0:	4770      	bx	lr

0000e3f2 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e3f2:	b510      	push	{r4, lr}
    e3f4:	6844      	ldr	r4, [r0, #4]
    e3f6:	7803      	ldrb	r3, [r0, #0]
    e3f8:	2100      	movs	r1, #0
    e3fa:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
    e3fe:	3480      	adds	r4, #128	; 0x80
    e400:	4620      	mov	r0, r4
    e402:	f7ff fa92 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e406:	b110      	cbz	r0, e40e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e408:	2004      	movs	r0, #4
    e40a:	7560      	strb	r0, [r4, #21]
    e40c:	bd10      	pop	{r4, pc}
    e40e:	2188      	movs	r1, #136	; 0x88
    e410:	201c      	movs	r0, #28
    e412:	f7f6 f8ab 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e416 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e416:	b510      	push	{r4, lr}
    e418:	6841      	ldr	r1, [r0, #4]
    e41a:	f891 2084 	ldrb.w	r2, [r1, #132]	; 0x84
    e41e:	07d2      	lsls	r2, r2, #31
    e420:	d00b      	beq.n	e43a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e422:	f811 2fd2 	ldrb.w	r2, [r1, #210]!
    e426:	1e52      	subs	r2, r2, #1
    e428:	b252      	sxtb	r2, r2
    e42a:	700a      	strb	r2, [r1, #0]
    e42c:	6840      	ldr	r0, [r0, #4]
    e42e:	2a00      	cmp	r2, #0
    e430:	da05      	bge.n	e43e <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e432:	2197      	movs	r1, #151	; 0x97
    e434:	201c      	movs	r0, #28
    e436:	f7f6 f899 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e43a:	2195      	movs	r1, #149	; 0x95
    e43c:	e7fa      	b.n	e434 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e43e:	f850 1f84 	ldr.w	r1, [r0, #132]!
    e442:	f021 0101 	bic.w	r1, r1, #1
    e446:	6001      	str	r1, [r0, #0]
    e448:	bd10      	pop	{r4, pc}

0000e44a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    e44a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e44c:	6841      	ldr	r1, [r0, #4]
    e44e:	4606      	mov	r6, r0
    e450:	460c      	mov	r4, r1
    e452:	3180      	adds	r1, #128	; 0x80
    e454:	460d      	mov	r5, r1
    e456:	4620      	mov	r0, r4
    e458:	f000 f820 	bl	e49c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x52>
    e45c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    e460:	2901      	cmp	r1, #1
    e462:	d11a      	bne.n	e49a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e464:	2800      	cmp	r0, #0
    e466:	d018      	beq.n	e49a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e468:	6870      	ldr	r0, [r6, #4]
    e46a:	4601      	mov	r1, r0
    e46c:	f890 214c 	ldrb.w	r2, [r0, #332]	; 0x14c
    e470:	f88d 2000 	strb.w	r2, [sp]
    e474:	9a00      	ldr	r2, [sp, #0]
    e476:	9200      	str	r2, [sp, #0]
    e478:	f89d 2000 	ldrb.w	r2, [sp]
    e47c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    e480:	2a00      	cmp	r2, #0
    e482:	d10a      	bne.n	e49a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e484:	8822      	ldrh	r2, [r4, #0]
    e486:	8142      	strh	r2, [r0, #10]
    e488:	7c6a      	ldrb	r2, [r5, #17]
    e48a:	7302      	strb	r2, [r0, #12]
    e48c:	7caa      	ldrb	r2, [r5, #18]
    e48e:	7342      	strb	r2, [r0, #13]
    e490:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e494:	221c      	movs	r2, #28
    e496:	f7f7 bfdb 	b.w	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e49c:	b538      	push	{r3, r4, r5, lr}
    e49e:	4605      	mov	r5, r0
    e4a0:	460c      	mov	r4, r1
    e4a2:	4668      	mov	r0, sp
    e4a4:	f7fc fe54 	bl	b150 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e4a8:	b338      	cbz	r0, e4fa <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb0>
    e4aa:	f99d 1000 	ldrsb.w	r1, [sp]
    e4ae:	7461      	strb	r1, [r4, #17]
    e4b0:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    e4b4:	74a0      	strb	r0, [r4, #18]
    e4b6:	6820      	ldr	r0, [r4, #0]
    e4b8:	f7f8 fb04 	bl	6ac4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    e4bc:	6020      	str	r0, [r4, #0]
    e4be:	f99d 2000 	ldrsb.w	r2, [sp]
    e4c2:	f994 1013 	ldrsb.w	r1, [r4, #19]
    e4c6:	2000      	movs	r0, #0
    e4c8:	1a51      	subs	r1, r2, r1
    e4ca:	d500      	bpl.n	e4ce <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x84>
    e4cc:	4249      	negs	r1, r1
    e4ce:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    e4d2:	428b      	cmp	r3, r1
    e4d4:	dc10      	bgt.n	e4f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e4d6:	2bff      	cmp	r3, #255	; 0xff
    e4d8:	d00e      	beq.n	e4f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e4da:	7d21      	ldrb	r1, [r4, #20]
    e4dc:	1c49      	adds	r1, r1, #1
    e4de:	b2c9      	uxtb	r1, r1
    e4e0:	7521      	strb	r1, [r4, #20]
    e4e2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    e4e6:	4299      	cmp	r1, r3
    e4e8:	d802      	bhi.n	e4f0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xa6>
    e4ea:	7ce1      	ldrb	r1, [r4, #19]
    e4ec:	297f      	cmp	r1, #127	; 0x7f
    e4ee:	d103      	bne.n	e4f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e4f0:	74e2      	strb	r2, [r4, #19]
    e4f2:	2000      	movs	r0, #0
    e4f4:	7520      	strb	r0, [r4, #20]
    e4f6:	2001      	movs	r0, #1
    e4f8:	bd38      	pop	{r3, r4, r5, pc}
    e4fa:	207f      	movs	r0, #127	; 0x7f
    e4fc:	7460      	strb	r0, [r4, #17]
    e4fe:	2000      	movs	r0, #0
    e500:	bd38      	pop	{r3, r4, r5, pc}
    e502:	2801      	cmp	r0, #1
    e504:	d102      	bne.n	e50c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xc2>
    e506:	7948      	ldrb	r0, [r1, #5]
    e508:	0980      	lsrs	r0, r0, #6
    e50a:	d001      	beq.n	e510 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xc6>
    e50c:	2000      	movs	r0, #0
    e50e:	4770      	bx	lr
    e510:	2001      	movs	r0, #1
    e512:	4770      	bx	lr
    e514:	2801      	cmp	r0, #1
    e516:	d106      	bne.n	e526 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xdc>
    e518:	7948      	ldrb	r0, [r1, #5]
    e51a:	2101      	movs	r1, #1
    e51c:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e520:	d101      	bne.n	e526 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xdc>
    e522:	2001      	movs	r0, #1
    e524:	4770      	bx	lr
    e526:	2000      	movs	r0, #0
    e528:	4770      	bx	lr
    e52a:	2802      	cmp	r0, #2
    e52c:	d003      	beq.n	e536 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xec>
    e52e:	2803      	cmp	r0, #3
    e530:	d001      	beq.n	e536 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xec>
    e532:	2000      	movs	r0, #0
    e534:	4770      	bx	lr
    e536:	2001      	movs	r0, #1
    e538:	4770      	bx	lr

0000e53a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e53a:	b510      	push	{r4, lr}
    e53c:	4604      	mov	r4, r0
    e53e:	7c00      	ldrb	r0, [r0, #16]
    e540:	f7ff fff3 	bl	e52a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xe0>
    e544:	b148      	cbz	r0, e55a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e546:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    e54a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    e54e:	f7ff f98e 	bl	d86e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e552:	2808      	cmp	r0, #8
    e554:	d001      	beq.n	e55a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e556:	2001      	movs	r0, #1
    e558:	bd10      	pop	{r4, pc}
    e55a:	7c20      	ldrb	r0, [r4, #16]
    e55c:	b118      	cbz	r0, e566 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e55e:	2802      	cmp	r0, #2
    e560:	d001      	beq.n	e566 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e562:	7de0      	ldrb	r0, [r4, #23]
    e564:	bd10      	pop	{r4, pc}
    e566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e56a:	2000      	movs	r0, #0
    e56c:	f7f6 bec6 	b.w	52fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e570 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e570:	b508      	push	{r3, lr}
    e572:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e576:	f88d 1000 	strb.w	r1, [sp]
    e57a:	9900      	ldr	r1, [sp, #0]
    e57c:	9100      	str	r1, [sp, #0]
    e57e:	f89d 1000 	ldrb.w	r1, [sp]
    e582:	b109      	cbz	r1, e588 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    e584:	2001      	movs	r0, #1
    e586:	bd08      	pop	{r3, pc}
    e588:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    e58c:	f88d 0000 	strb.w	r0, [sp]
    e590:	9800      	ldr	r0, [sp, #0]
    e592:	9000      	str	r0, [sp, #0]
    e594:	f89d 0000 	ldrb.w	r0, [sp]
    e598:	2000      	movs	r0, #0
    e59a:	bd08      	pop	{r3, pc}

0000e59c <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e59c:	20ff      	movs	r0, #255	; 0xff
    e59e:	7008      	strb	r0, [r1, #0]
    e5a0:	6b48      	ldr	r0, [r1, #52]	; 0x34
    e5a2:	f7ff b869 	b.w	d678 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e5a6 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e5a6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e5a8:	460d      	mov	r5, r1
    e5aa:	4604      	mov	r4, r0
    e5ac:	f44f 728c 	mov.w	r2, #280	; 0x118
    e5b0:	2100      	movs	r1, #0
    e5b2:	f7fd ffec 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e5b6:	20ff      	movs	r0, #255	; 0xff
    e5b8:	7020      	strb	r0, [r4, #0]
    e5ba:	207f      	movs	r0, #127	; 0x7f
    e5bc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e5c0:	2013      	movs	r0, #19
    e5c2:	8060      	strh	r0, [r4, #2]
    e5c4:	f242 7010 	movw	r0, #10000	; 0x2710
    e5c8:	8460      	strh	r0, [r4, #34]	; 0x22
    e5ca:	f7f6 fc85 	bl	4ed8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e5ce:	4601      	mov	r1, r0
    e5d0:	6360      	str	r0, [r4, #52]	; 0x34
    e5d2:	2200      	movs	r2, #0
    e5d4:	4668      	mov	r0, sp
    e5d6:	f7fe ffb9 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e5da:	2200      	movs	r2, #0
    e5dc:	2101      	movs	r1, #1
    e5de:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e5e0:	f7ff f82a 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e5e4:	2204      	movs	r2, #4
    e5e6:	4668      	mov	r0, sp
    e5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e5ea:	f7fe ffaf 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e5ee:	2200      	movs	r2, #0
    e5f0:	4611      	mov	r1, r2
    e5f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e5f4:	f7ff f820 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e5f8:	73a5      	strb	r5, [r4, #14]
    e5fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e5fe:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e602:	f000 b9b9 	b.w	e978 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e606 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e606:	7880      	ldrb	r0, [r0, #2]
    e608:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e60c:	b108      	cbz	r0, e612 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e60e:	2000      	movs	r0, #0
    e610:	4770      	bx	lr
    e612:	201f      	movs	r0, #31
    e614:	4770      	bx	lr

0000e616 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e616:	f7f8 bf33 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>

0000e61a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    e61a:	b510      	push	{r4, lr}
    e61c:	2300      	movs	r3, #0
    e61e:	2a05      	cmp	r2, #5
    e620:	d013      	beq.n	e64a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x30>
    e622:	2a10      	cmp	r2, #16
    e624:	d018      	beq.n	e658 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3e>
    e626:	2a14      	cmp	r2, #20
    e628:	d038      	beq.n	e69c <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x82>
    e62a:	2a1d      	cmp	r2, #29
    e62c:	d002      	beq.n	e634 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1a>
    e62e:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    e632:	e056      	b.n	e6e2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    e634:	704b      	strb	r3, [r1, #1]
    e636:	2219      	movs	r2, #25
    e638:	700a      	strb	r2, [r1, #0]
    e63a:	f850 2fbd 	ldr.w	r2, [r0, #189]!
    e63e:	604a      	str	r2, [r1, #4]
    e640:	6842      	ldr	r2, [r0, #4]
    e642:	608a      	str	r2, [r1, #8]
    e644:	7a00      	ldrb	r0, [r0, #8]
    e646:	7308      	strb	r0, [r1, #12]
    e648:	bd10      	pop	{r4, pc}
    e64a:	704b      	strb	r3, [r1, #1]
    e64c:	2205      	movs	r2, #5
    e64e:	700a      	strb	r2, [r1, #0]
    e650:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
    e654:	6048      	str	r0, [r1, #4]
    e656:	bd10      	pop	{r4, pc}
    e658:	460c      	mov	r4, r1
    e65a:	704b      	strb	r3, [r1, #1]
    e65c:	2111      	movs	r1, #17
    e65e:	7021      	strb	r1, [r4, #0]
    e660:	f100 0176 	add.w	r1, r0, #118	; 0x76
    e664:	2220      	movs	r2, #32
    e666:	1d20      	adds	r0, r4, #4
    e668:	f7fd ff17 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e66c:	2001      	movs	r0, #1
    e66e:	7220      	strb	r0, [r4, #8]
    e670:	7920      	ldrb	r0, [r4, #4]
    e672:	2800      	cmp	r0, #0
    e674:	d0ef      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e676:	88e4      	ldrh	r4, [r4, #6]
    e678:	2100      	movs	r1, #0
    e67a:	4620      	mov	r0, r4
    e67c:	f7fe feb4 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e680:	2800      	cmp	r0, #0
    e682:	d0e8      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e684:	8800      	ldrh	r0, [r0, #0]
    e686:	f7ff f856 	bl	d736 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e68a:	2100      	movs	r1, #0
    e68c:	4620      	mov	r0, r4
    e68e:	f7f6 f9ef 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e692:	2800      	cmp	r0, #0
    e694:	d0df      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e696:	f240 216a 	movw	r1, #618	; 0x26a
    e69a:	e022      	b.n	e6e2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    e69c:	704b      	strb	r3, [r1, #1]
    e69e:	2214      	movs	r2, #20
    e6a0:	700a      	strb	r2, [r1, #0]
    e6a2:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    e6a6:	604a      	str	r2, [r1, #4]
    e6a8:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    e6ac:	810a      	strh	r2, [r1, #8]
    e6ae:	790a      	ldrb	r2, [r1, #4]
    e6b0:	2a00      	cmp	r2, #0
    e6b2:	d0d0      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e6b4:	7880      	ldrb	r0, [r0, #2]
    e6b6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e6ba:	2800      	cmp	r0, #0
    e6bc:	d1cb      	bne.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e6be:	88cc      	ldrh	r4, [r1, #6]
    e6c0:	2100      	movs	r1, #0
    e6c2:	4620      	mov	r0, r4
    e6c4:	f7fe fe90 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e6c8:	2800      	cmp	r0, #0
    e6ca:	d0c4      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e6cc:	8800      	ldrh	r0, [r0, #0]
    e6ce:	f7ff f832 	bl	d736 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e6d2:	2100      	movs	r1, #0
    e6d4:	4620      	mov	r0, r4
    e6d6:	f7f6 f9cb 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e6da:	2800      	cmp	r0, #0
    e6dc:	d0bb      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e6de:	f240 219a 	movw	r1, #666	; 0x29a
    e6e2:	202d      	movs	r0, #45	; 0x2d
    e6e4:	f7f5 ff42 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e6e8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e6e8:	6880      	ldr	r0, [r0, #8]
    e6ea:	4770      	bx	lr

0000e6ec <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e6ec:	2001      	movs	r0, #1
    e6ee:	4770      	bx	lr

0000e6f0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e6f0:	b510      	push	{r4, lr}
    e6f2:	4604      	mov	r4, r0
    e6f4:	3028      	adds	r0, #40	; 0x28
    e6f6:	f000 f8ff 	bl	e8f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e6fa:	8861      	ldrh	r1, [r4, #2]
    e6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e700:	2228      	movs	r2, #40	; 0x28
    e702:	f7f9 b895 	b.w	7830 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e706 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e706:	2200      	movs	r2, #0
    e708:	8602      	strh	r2, [r0, #48]	; 0x30
    e70a:	8843      	ldrh	r3, [r0, #2]
    e70c:	2b1d      	cmp	r3, #29
    e70e:	d001      	beq.n	e714 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e710:	7341      	strb	r1, [r0, #13]
    e712:	4770      	bx	lr
    e714:	7342      	strb	r2, [r0, #13]
    e716:	4770      	bx	lr

0000e718 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e718:	b510      	push	{r4, lr}
    e71a:	2400      	movs	r4, #0
    e71c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e71e:	f7fe ff79 	bl	d614 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    e722:	b100      	cbz	r0, e726 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    e724:	2001      	movs	r0, #1
    e726:	4384      	bics	r4, r0
    e728:	f084 0001 	eor.w	r0, r4, #1
    e72c:	bd10      	pop	{r4, pc}

0000e72e <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e72e:	2000      	movs	r0, #0
    e730:	4770      	bx	lr

0000e732 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e732:	7880      	ldrb	r0, [r0, #2]
    e734:	f000 0001 	and.w	r0, r0, #1
    e738:	4770      	bx	lr

0000e73a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e73a:	7880      	ldrb	r0, [r0, #2]
    e73c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e740:	4770      	bx	lr

0000e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e742:	2001      	movs	r0, #1
    e744:	4770      	bx	lr

0000e746 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e746:	7880      	ldrb	r0, [r0, #2]
    e748:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e74c:	4770      	bx	lr

0000e74e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e74e:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e752:	4770      	bx	lr

0000e754 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e754:	7800      	ldrb	r0, [r0, #0]
    e756:	28ff      	cmp	r0, #255	; 0xff
    e758:	d001      	beq.n	e75e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e75a:	2001      	movs	r0, #1
    e75c:	4770      	bx	lr
    e75e:	2000      	movs	r0, #0
    e760:	4770      	bx	lr

0000e762 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    e762:	f800 1f20 	strb.w	r1, [r0, #32]!
    e766:	7042      	strb	r2, [r0, #1]
    e768:	4770      	bx	lr

0000e76a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e76a:	680a      	ldr	r2, [r1, #0]
    e76c:	f840 2f11 	str.w	r2, [r0, #17]!
    e770:	8889      	ldrh	r1, [r1, #4]
    e772:	8081      	strh	r1, [r0, #4]
    e774:	2101      	movs	r1, #1
    e776:	7181      	strb	r1, [r0, #6]
    e778:	4770      	bx	lr

0000e77a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e77a:	7b00      	ldrb	r0, [r0, #12]
    e77c:	4770      	bx	lr

0000e77e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e77e:	2001      	movs	r0, #1
    e780:	4770      	bx	lr

0000e782 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e782:	61c1      	str	r1, [r0, #28]
    e784:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e788:	724a      	strb	r2, [r1, #9]
    e78a:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    e78e:	f8c1 200a 	str.w	r2, [r1, #10]
    e792:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    e796:	81c8      	strh	r0, [r1, #14]
    e798:	4770      	bx	lr

0000e79a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e79a:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    e79e:	4770      	bx	lr

0000e7a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e7a0:	b510      	push	{r4, lr}
    e7a2:	4604      	mov	r4, r0
    e7a4:	7880      	ldrb	r0, [r0, #2]
    e7a6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e7aa:	b158      	cbz	r0, e7c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    e7ac:	233c      	movs	r3, #60	; 0x3c
    e7ae:	22ff      	movs	r2, #255	; 0xff
    e7b0:	4620      	mov	r0, r4
    e7b2:	69e1      	ldr	r1, [r4, #28]
    e7b4:	f7f8 fe8a 	bl	74cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    e7b8:	2210      	movs	r2, #16
    e7ba:	4621      	mov	r1, r4
    e7bc:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    e7c0:	f7f7 fe46 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e7c4:	2001      	movs	r0, #1
    e7c6:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    e7ca:	bd10      	pop	{r4, pc}

0000e7cc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e7cc:	7bc0      	ldrb	r0, [r0, #15]
    e7ce:	2800      	cmp	r0, #0
    e7d0:	d000      	beq.n	e7d4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e7d2:	2001      	movs	r0, #1
    e7d4:	4770      	bx	lr
    e7d6:	7802      	ldrb	r2, [r0, #0]
    e7d8:	2320      	movs	r3, #32
    e7da:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e7de:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e7e2:	430a      	orrs	r2, r1
    e7e4:	7002      	strb	r2, [r0, #0]
    e7e6:	4770      	bx	lr
    e7e8:	b510      	push	{r4, lr}
    e7ea:	f7ff f840 	bl	d86e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e7ee:	4604      	mov	r4, r0
    e7f0:	f7f7 fb74 	bl	5edc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e7f4:	b138      	cbz	r0, e806 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e7f6:	4620      	mov	r0, r4
    e7f8:	f7f7 fb18 	bl	5e2c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e7fc:	b118      	cbz	r0, e806 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e7fe:	2110      	movs	r1, #16
    e800:	f7ff f9fb 	bl	dbfa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e804:	b108      	cbz	r0, e80a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    e806:	2000      	movs	r0, #0
    e808:	bd10      	pop	{r4, pc}
    e80a:	2001      	movs	r0, #1
    e80c:	bd10      	pop	{r4, pc}
    e80e:	2101      	movs	r1, #1
    e810:	f7f8 babe 	b.w	6d90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e814:	2101      	movs	r1, #1
    e816:	f7f8 babb 	b.w	6d90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e81e:	4604      	mov	r4, r0
    e820:	460f      	mov	r7, r1
    e822:	7e40      	ldrb	r0, [r0, #25]
    e824:	f7f7 fae8 	bl	5df8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e828:	4606      	mov	r6, r0
    e82a:	7e20      	ldrb	r0, [r4, #24]
    e82c:	f104 0551 	add.w	r5, r4, #81	; 0x51
    e830:	b120      	cbz	r0, e83c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    e832:	b11e      	cbz	r6, e83c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    e834:	7e60      	ldrb	r0, [r4, #25]
    e836:	f7f7 fad3 	bl	5de0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e83a:	b1a0      	cbz	r0, e866 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9a>
    e83c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    e840:	2800      	cmp	r0, #0
    e842:	d024      	beq.n	e88e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e844:	7ea0      	ldrb	r0, [r4, #26]
    e846:	2800      	cmp	r0, #0
    e848:	d021      	beq.n	e88e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e84a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    e84e:	4629      	mov	r1, r5
    e850:	f7ff fe60 	bl	e514 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    e854:	b1a8      	cbz	r0, e882 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb6>
    e856:	f7f7 fabf 	bl	5dd8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e85a:	463a      	mov	r2, r7
    e85c:	4629      	mov	r1, r5
    e85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e862:	f7fe bf9c 	b.w	d79e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e866:	2001      	movs	r0, #1
    e868:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    e86c:	463a      	mov	r2, r7
    e86e:	4629      	mov	r1, r5
    e870:	4630      	mov	r0, r6
    e872:	f7fe ff94 	bl	d79e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e876:	7e61      	ldrb	r1, [r4, #25]
    e878:	4628      	mov	r0, r5
    e87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e87e:	f7f7 bac7 	b.w	5e10 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e882:	4639      	mov	r1, r7
    e884:	4628      	mov	r0, r5
    e886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e88a:	f7fe bf77 	b.w	d77c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e892:	b510      	push	{r4, lr}
    e894:	4604      	mov	r4, r0
    e896:	4608      	mov	r0, r1
    e898:	f7fc fca0 	bl	b1dc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e89c:	7921      	ldrb	r1, [r4, #4]
    e89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8a2:	2025      	movs	r0, #37	; 0x25
    e8a4:	f7fc bc70 	b.w	b188 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    e8a8:	b510      	push	{r4, lr}
    e8aa:	4604      	mov	r4, r0
    e8ac:	302e      	adds	r0, #46	; 0x2e
    e8ae:	f7fc fc4f 	bl	b150 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e8b2:	2800      	cmp	r0, #0
    e8b4:	d102      	bne.n	e8bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf0>
    e8b6:	207f      	movs	r0, #127	; 0x7f
    e8b8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e8bc:	bd10      	pop	{r4, pc}
    e8be:	b570      	push	{r4, r5, r6, lr}
    e8c0:	4614      	mov	r4, r2
    e8c2:	461d      	mov	r5, r3
    e8c4:	4606      	mov	r6, r0
    e8c6:	f7f4 fa6b 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e8ca:	1900      	adds	r0, r0, r4
    e8cc:	4169      	adcs	r1, r5
    e8ce:	e9c6 0100 	strd	r0, r1, [r6]
    e8d2:	bd70      	pop	{r4, r5, r6, pc}

0000e8d4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e8d4:	b570      	push	{r4, r5, r6, lr}
    e8d6:	7001      	strb	r1, [r0, #0]
    e8d8:	7042      	strb	r2, [r0, #1]
    e8da:	4614      	mov	r4, r2
    e8dc:	460d      	mov	r5, r1
    e8de:	7880      	ldrb	r0, [r0, #2]
    e8e0:	f000 f87f 	bl	e9e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e8e4:	fb10 f005 	smulbb	r0, r0, r5
    e8e8:	4360      	muls	r0, r4
    e8ea:	28ff      	cmp	r0, #255	; 0xff
    e8ec:	d303      	bcc.n	e8f6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e8ee:	215c      	movs	r1, #92	; 0x5c
    e8f0:	202e      	movs	r0, #46	; 0x2e
    e8f2:	f7f5 fe3b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8f6:	bd70      	pop	{r4, r5, r6, pc}

0000e8f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e8f8:	b510      	push	{r4, lr}
    e8fa:	4604      	mov	r4, r0
    e8fc:	7880      	ldrb	r0, [r0, #2]
    e8fe:	f000 f870 	bl	e9e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e902:	7861      	ldrb	r1, [r4, #1]
    e904:	7822      	ldrb	r2, [r4, #0]
    e906:	fb11 f102 	smulbb	r1, r1, r2
    e90a:	4348      	muls	r0, r1
    e90c:	b2c0      	uxtb	r0, r0
    e90e:	bd10      	pop	{r4, pc}

0000e910 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e910:	b510      	push	{r4, lr}
    e912:	4604      	mov	r4, r0
    e914:	f000 f84d 	bl	e9b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e918:	7961      	ldrb	r1, [r4, #5]
    e91a:	1c49      	adds	r1, r1, #1
    e91c:	b2c9      	uxtb	r1, r1
    e91e:	7161      	strb	r1, [r4, #5]
    e920:	7862      	ldrb	r2, [r4, #1]
    e922:	4291      	cmp	r1, r2
    e924:	d10b      	bne.n	e93e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e926:	2200      	movs	r2, #0
    e928:	7162      	strb	r2, [r4, #5]
    e92a:	78e1      	ldrb	r1, [r4, #3]
    e92c:	4301      	orrs	r1, r0
    e92e:	70e1      	strb	r1, [r4, #3]
    e930:	78a3      	ldrb	r3, [r4, #2]
    e932:	4299      	cmp	r1, r3
    e934:	d103      	bne.n	e93e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e936:	70e2      	strb	r2, [r4, #3]
    e938:	7921      	ldrb	r1, [r4, #4]
    e93a:	1c49      	adds	r1, r1, #1
    e93c:	7121      	strb	r1, [r4, #4]
    e93e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e942:	f000 b825 	b.w	e990 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e946 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e946:	7081      	strb	r1, [r0, #2]
    e948:	4770      	bx	lr

0000e94a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e94a:	b570      	push	{r4, r5, r6, lr}
    e94c:	4604      	mov	r4, r0
    e94e:	7880      	ldrb	r0, [r0, #2]
    e950:	f000 f847 	bl	e9e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e954:	7861      	ldrb	r1, [r4, #1]
    e956:	fb11 f500 	smulbb	r5, r1, r0
    e95a:	78e0      	ldrb	r0, [r4, #3]
    e95c:	f000 f841 	bl	e9e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e960:	7861      	ldrb	r1, [r4, #1]
    e962:	7962      	ldrb	r2, [r4, #5]
    e964:	fb10 2001 	smlabb	r0, r0, r1, r2
    e968:	7821      	ldrb	r1, [r4, #0]
    e96a:	7922      	ldrb	r2, [r4, #4]
    e96c:	1a89      	subs	r1, r1, r2
    e96e:	fb11 f105 	smulbb	r1, r1, r5
    e972:	1a08      	subs	r0, r1, r0
    e974:	b2c0      	uxtb	r0, r0
    e976:	bd70      	pop	{r4, r5, r6, pc}

0000e978 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e978:	2100      	movs	r1, #0
    e97a:	6001      	str	r1, [r0, #0]
    e97c:	8081      	strh	r1, [r0, #4]
    e97e:	2101      	movs	r1, #1
    e980:	7041      	strb	r1, [r0, #1]
    e982:	7001      	strb	r1, [r0, #0]
    e984:	4770      	bx	lr

0000e986 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e986:	2100      	movs	r1, #0
    e988:	70c1      	strb	r1, [r0, #3]
    e98a:	7141      	strb	r1, [r0, #5]
    e98c:	7101      	strb	r1, [r0, #4]
    e98e:	4770      	bx	lr
    e990:	b510      	push	{r4, lr}
    e992:	2801      	cmp	r0, #1
    e994:	d007      	beq.n	e9a6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e996:	2802      	cmp	r0, #2
    e998:	d007      	beq.n	e9aa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e99a:	2804      	cmp	r0, #4
    e99c:	d007      	beq.n	e9ae <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e99e:	2139      	movs	r1, #57	; 0x39
    e9a0:	202e      	movs	r0, #46	; 0x2e
    e9a2:	f7f5 fde3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9a6:	2025      	movs	r0, #37	; 0x25
    e9a8:	bd10      	pop	{r4, pc}
    e9aa:	2026      	movs	r0, #38	; 0x26
    e9ac:	bd10      	pop	{r4, pc}
    e9ae:	2027      	movs	r0, #39	; 0x27
    e9b0:	bd10      	pop	{r4, pc}
    e9b2:	4601      	mov	r1, r0
    e9b4:	2000      	movs	r0, #0
    e9b6:	788a      	ldrb	r2, [r1, #2]
    e9b8:	07d3      	lsls	r3, r2, #31
    e9ba:	d002      	beq.n	e9c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e9bc:	78cb      	ldrb	r3, [r1, #3]
    e9be:	07db      	lsls	r3, r3, #31
    e9c0:	d006      	beq.n	e9d0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e9c2:	0793      	lsls	r3, r2, #30
    e9c4:	d506      	bpl.n	e9d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e9c6:	78cb      	ldrb	r3, [r1, #3]
    e9c8:	079b      	lsls	r3, r3, #30
    e9ca:	d403      	bmi.n	e9d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e9cc:	2002      	movs	r0, #2
    e9ce:	4770      	bx	lr
    e9d0:	2001      	movs	r0, #1
    e9d2:	4770      	bx	lr
    e9d4:	0752      	lsls	r2, r2, #29
    e9d6:	d5fc      	bpl.n	e9d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e9d8:	78c9      	ldrb	r1, [r1, #3]
    e9da:	0749      	lsls	r1, r1, #29
    e9dc:	d4f9      	bmi.n	e9d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e9de:	2004      	movs	r0, #4
    e9e0:	4770      	bx	lr
    e9e2:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e9e6:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e9ea:	4411      	add	r1, r2
    e9ec:	f000 0001 	and.w	r0, r0, #1
    e9f0:	4408      	add	r0, r1
    e9f2:	4770      	bx	lr

0000e9f4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e9f4:	f240 315a 	movw	r1, #858	; 0x35a
    e9f8:	4348      	muls	r0, r1
    e9fa:	4770      	bx	lr

0000e9fc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e9fc:	f240 20ef 	movw	r0, #751	; 0x2ef
    ea00:	4770      	bx	lr
    ea02:	020e      	.short	0x020e
    ea04:	0630041c 	.word	0x0630041c
    ea08:	035a0c60 	.word	0x035a0c60
    ea0c:	05c506b4 	.word	0x05c506b4
    ea10:	12250bf5 	.word	0x12250bf5
    ea14:	03b101a3 	.word	0x03b101a3
    ea18:	02ef05bf 	.word	0x02ef05bf
    ea1c:	09a30649 	.word	0x09a30649

0000ea20 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ea20:	b510      	push	{r4, lr}
    ea22:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ea26:	b109      	cbz	r1, ea2c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ea28:	2000      	movs	r0, #0
    ea2a:	bd10      	pop	{r4, pc}
    ea2c:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    ea30:	b131      	cbz	r1, ea40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ea32:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    ea36:	428a      	cmp	r2, r1
    ea38:	d902      	bls.n	ea40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ea3a:	f7ff feb1 	bl	e7a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ea3e:	e7f3      	b.n	ea28 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ea40:	2001      	movs	r0, #1
    ea42:	bd10      	pop	{r4, pc}

0000ea44 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ea44:	b510      	push	{r4, lr}
    ea46:	b131      	cbz	r1, ea56 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ea48:	2901      	cmp	r1, #1
    ea4a:	d008      	beq.n	ea5e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ea4c:	f240 717d 	movw	r1, #1917	; 0x77d
    ea50:	2030      	movs	r0, #48	; 0x30
    ea52:	f7f5 fd8b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea5a:	f000 b9b7 	b.w	edcc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x308>
    ea5e:	2100      	movs	r1, #0
    ea60:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    ea64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea68:	f000 b913 	b.w	ec92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>

0000ea6c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ea6c:	b510      	push	{r4, lr}
    ea6e:	4604      	mov	r4, r0
    ea70:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ea74:	2800      	cmp	r0, #0
    ea76:	d019      	beq.n	eaac <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    ea78:	2001      	movs	r0, #1
    ea7a:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    ea7e:	4601      	mov	r1, r0
    ea80:	4620      	mov	r0, r4
    ea82:	f7ff fe8a 	bl	e79a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ea86:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    ea8a:	b170      	cbz	r0, eaaa <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ea8c:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ea90:	f7f3 fcfa 	bl	2488 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ea94:	7820      	ldrb	r0, [r4, #0]
    ea96:	f7f3 fe5b 	bl	2750 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ea9a:	f814 09c8 	ldrb.w	r0, [r4], #-200
    ea9e:	f7f3 fe35 	bl	270c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eaa2:	b120      	cbz	r0, eaae <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    eaa4:	2000      	movs	r0, #0
    eaa6:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    eaaa:	2000      	movs	r0, #0
    eaac:	bd10      	pop	{r4, pc}
    eaae:	f44f 7101 	mov.w	r1, #516	; 0x204
    eab2:	2030      	movs	r0, #48	; 0x30
    eab4:	f7f5 fd5a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eab8 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    eab8:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    eabc:	4770      	bx	lr

0000eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    eabe:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    eac2:	4770      	bx	lr

0000eac4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    eac4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eac6:	4604      	mov	r4, r0
    eac8:	f890 021b 	ldrb.w	r0, [r0, #539]	; 0x21b
    eacc:	2800      	cmp	r0, #0
    eace:	d15f      	bne.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ead0:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    ead4:	2803      	cmp	r0, #3
    ead6:	d15b      	bne.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ead8:	f7f4 f962 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    eadc:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    eae0:	f8d4 2284 	ldr.w	r2, [r4, #644]	; 0x284
    eae4:	1ac0      	subs	r0, r0, r3
    eae6:	eb61 0102 	sbc.w	r1, r1, r2
    eaea:	2300      	movs	r3, #0
    eaec:	461a      	mov	r2, r3
    eaee:	1a1b      	subs	r3, r3, r0
    eaf0:	418a      	sbcs	r2, r1
    eaf2:	da4d      	bge.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eaf4:	1c42      	adds	r2, r0, #1
    eaf6:	f171 0100 	sbcs.w	r1, r1, #0
    eafa:	db02      	blt.n	eb02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    eafc:	f240 51c3 	movw	r1, #1475	; 0x5c3
    eb00:	e036      	b.n	eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    eb02:	6921      	ldr	r1, [r4, #16]
    eb04:	b111      	cbz	r1, eb0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    eb06:	fbb0 f0f1 	udiv	r0, r0, r1
    eb0a:	e000      	b.n	eb0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    eb0c:	2000      	movs	r0, #0
    eb0e:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    eb12:	1c40      	adds	r0, r0, #1
    eb14:	4408      	add	r0, r1
    eb16:	f8a4 025c 	strh.w	r0, [r4, #604]	; 0x25c
    eb1a:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    eb1e:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    eb22:	1a08      	subs	r0, r1, r0
    eb24:	b200      	sxth	r0, r0
    eb26:	2800      	cmp	r0, #0
    eb28:	dd32      	ble.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb2a:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    eb2e:	f7f3 fcab 	bl	2488 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    eb32:	2800      	cmp	r0, #0
    eb34:	d02c      	beq.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb36:	20ff      	movs	r0, #255	; 0xff
    eb38:	f884 0261 	strb.w	r0, [r4, #609]	; 0x261
    eb3c:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
    eb40:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
    eb44:	ae01      	add	r6, sp, #4
    eb46:	1a40      	subs	r0, r0, r1
    eb48:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    eb4c:	1e40      	subs	r0, r0, #1
    eb4e:	4408      	add	r0, r1
    eb50:	b285      	uxth	r5, r0
    eb52:	e017      	b.n	eb84 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    eb54:	9600      	str	r6, [sp, #0]
    eb56:	f8b4 125c 	ldrh.w	r1, [r4, #604]	; 0x25c
    eb5a:	2300      	movs	r3, #0
    eb5c:	2201      	movs	r2, #1
    eb5e:	4620      	mov	r0, r4
    eb60:	f7f9 f8fa 	bl	7d58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    eb64:	2800      	cmp	r0, #0
    eb66:	d013      	beq.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb68:	2801      	cmp	r0, #1
    eb6a:	d004      	beq.n	eb76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    eb6c:	f240 51fc 	movw	r1, #1532	; 0x5fc
    eb70:	2030      	movs	r0, #48	; 0x30
    eb72:	f7f5 fcfb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb76:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    eb7a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    eb7e:	4408      	add	r0, r1
    eb80:	f8a4 025c 	strh.w	r0, [r4, #604]	; 0x25c
    eb84:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    eb88:	1a28      	subs	r0, r5, r0
    eb8a:	b200      	sxth	r0, r0
    eb8c:	2800      	cmp	r0, #0
    eb8e:	dae1      	bge.n	eb54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    eb90:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    eb92:	2000      	movs	r0, #0
    eb94:	4770      	bx	lr
    eb96:	b570      	push	{r4, r5, r6, lr}
    eb98:	4604      	mov	r4, r0
    eb9a:	f000 f8f0 	bl	ed7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    eb9e:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    eba2:	2000      	movs	r0, #0
    eba4:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    eba8:	4601      	mov	r1, r0
    ebaa:	2501      	movs	r5, #1
    ebac:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    ebb0:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    ebb4:	4606      	mov	r6, r0
    ebb6:	f7fe ff82 	bl	dabe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ebba:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    ebbe:	1c40      	adds	r0, r0, #1
    ebc0:	280a      	cmp	r0, #10
    ebc2:	d201      	bcs.n	ebc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x104>
    ebc4:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    ebc8:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ebcc:	b138      	cbz	r0, ebde <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    ebce:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    ebd2:	1c40      	adds	r0, r0, #1
    ebd4:	280a      	cmp	r0, #10
    ebd6:	d302      	bcc.n	ebde <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    ebd8:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    ebdc:	e002      	b.n	ebe4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
    ebde:	2002      	movs	r0, #2
    ebe0:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    ebe4:	4620      	mov	r0, r4
    ebe6:	f000 f822 	bl	ec2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    ebea:	b120      	cbz	r0, ebf6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x132>
    ebec:	4620      	mov	r0, r4
    ebee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ebf2:	f000 b80d 	b.w	ec10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    ebf6:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    ebfa:	4631      	mov	r1, r6
    ebfc:	f000 f8bd 	bl	ed7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    ec00:	2800      	cmp	r0, #0
    ec02:	d104      	bne.n	ec0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14a>
    ec04:	f240 6191 	movw	r1, #1681	; 0x691
    ec08:	2030      	movs	r0, #48	; 0x30
    ec0a:	f7f5 fcaf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec0e:	bd70      	pop	{r4, r5, r6, pc}
    ec10:	b510      	push	{r4, lr}
    ec12:	4604      	mov	r4, r0
    ec14:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ec18:	f7f3 fd78 	bl	270c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ec1c:	2000      	movs	r0, #0
    ec1e:	7620      	strb	r0, [r4, #24]
    ec20:	bd10      	pop	{r4, pc}
    ec22:	b510      	push	{r4, lr}
    ec24:	f7ff fd64 	bl	e6f0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    ec28:	f500 7088 	add.w	r0, r0, #272	; 0x110
    ec2c:	bd10      	pop	{r4, pc}
    ec2e:	b570      	push	{r4, r5, r6, lr}
    ec30:	4605      	mov	r5, r0
    ec32:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    ec36:	b108      	cbz	r0, ec3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x178>
    ec38:	2001      	movs	r0, #1
    ec3a:	bd70      	pop	{r4, r5, r6, pc}
    ec3c:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    ec40:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ec44:	4050      	eors	r0, r2
    ec46:	ea70 0101 	orns	r1, r0, r1
    ec4a:	d012      	beq.n	ec72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    ec4c:	2400      	movs	r4, #0
    ec4e:	4621      	mov	r1, r4
    ec50:	4628      	mov	r0, r5
    ec52:	f7ff ffe6 	bl	ec22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    ec56:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    ec5a:	1840      	adds	r0, r0, r1
    ec5c:	4154      	adcs	r4, r2
    ec5e:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    ec62:	3df8      	subs	r5, #248	; 0xf8
    ec64:	1a10      	subs	r0, r2, r0
    ec66:	41a1      	sbcs	r1, r4
    ec68:	d503      	bpl.n	ec72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    ec6a:	4628      	mov	r0, r5
    ec6c:	f7ff fd98 	bl	e7a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ec70:	e7e2      	b.n	ec38 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x174>
    ec72:	2000      	movs	r0, #0
    ec74:	bd70      	pop	{r4, r5, r6, pc}
    ec76:	b510      	push	{r4, lr}
    ec78:	4604      	mov	r4, r0
    ec7a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    ec7e:	f000 f9ef 	bl	f060 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59c>
    ec82:	4602      	mov	r2, r0
    ec84:	4620      	mov	r0, r4
    ec86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec8a:	f240 111b 	movw	r1, #283	; 0x11b
    ec8e:	f7ff bafa 	b.w	e286 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ec92:	b510      	push	{r4, lr}
    ec94:	f7fc f8e4 	bl	ae60 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ec98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec9c:	f7f3 be98 	b.w	29d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    eca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eca4:	4604      	mov	r4, r0
    eca6:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    ecaa:	2800      	cmp	r0, #0
    ecac:	d051      	beq.n	ed52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    ecae:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    ecb2:	2803      	cmp	r0, #3
    ecb4:	d14d      	bne.n	ed52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    ecb6:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    ecba:	f001 fcab 	bl	10614 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    ecbe:	4605      	mov	r5, r0
    ecc0:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    ecc4:	f7f8 ff6a 	bl	7b9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    ecc8:	4428      	add	r0, r5
    ecca:	b286      	uxth	r6, r0
    eccc:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    ecd0:	f7f8 ff64 	bl	7b9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    ecd4:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    ecd8:	fa1f f880 	uxth.w	r8, r0
    ecdc:	4648      	mov	r0, r9
    ecde:	f7fc f97d 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ece2:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    ece6:	1a0d      	subs	r5, r1, r0
    ece8:	4648      	mov	r0, r9
    ecea:	f7fc f9a3 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ecee:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    ecf2:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    ecf6:	fbb0 f0fa 	udiv	r0, r0, sl
    ecfa:	1a2d      	subs	r5, r5, r0
    ecfc:	4648      	mov	r0, r9
    ecfe:	f7fc f96d 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ed02:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
    ed06:	1a0f      	subs	r7, r1, r0
    ed08:	4648      	mov	r0, r9
    ed0a:	f7fc f993 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ed0e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ed12:	4401      	add	r1, r0
    ed14:	fbb1 f0fa 	udiv	r0, r1, sl
    ed18:	1a39      	subs	r1, r7, r0
    ed1a:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    ed1e:	4370      	muls	r0, r6
    ed20:	fbb0 f2f8 	udiv	r2, r0, r8
    ed24:	2029      	movs	r0, #41	; 0x29
    ed26:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    ed2a:	3260      	adds	r2, #96	; 0x60
    ed2c:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    ed30:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    ed34:	42a9      	cmp	r1, r5
    ed36:	d801      	bhi.n	ed3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x278>
    ed38:	4285      	cmp	r5, r0
    ed3a:	d901      	bls.n	ed40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x27c>
    ed3c:	f7f5 f846 	bl	3dcc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    ed40:	4631      	mov	r1, r6
    ed42:	6920      	ldr	r0, [r4, #16]
    ed44:	f7fd fa7a 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ed48:	2100      	movs	r1, #0
    ed4a:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    ed4e:	f884 1262 	strb.w	r1, [r4, #610]	; 0x262
    ed52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ed56:	b570      	push	{r4, r5, r6, lr}
    ed58:	460c      	mov	r4, r1
    ed5a:	4605      	mov	r5, r0
    ed5c:	f7fc f96a 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ed60:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ed64:	4408      	add	r0, r1
    ed66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ed6a:	fbb0 f6f1 	udiv	r6, r0, r1
    ed6e:	4628      	mov	r0, r5
    ed70:	f7fc f934 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ed74:	4430      	add	r0, r6
    ed76:	4420      	add	r0, r4
    ed78:	bd70      	pop	{r4, r5, r6, pc}
    ed7a:	f7f3 b863 	b.w	1e44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ed7e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ed80:	4604      	mov	r4, r0
    ed82:	f7ff fcde 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ed86:	b1f8      	cbz	r0, edc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    ed88:	4620      	mov	r0, r4
    ed8a:	f7ff fcd2 	bl	e732 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ed8e:	b918      	cbnz	r0, ed98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d4>
    ed90:	4620      	mov	r0, r4
    ed92:	f7ff fcd8 	bl	e746 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ed96:	b140      	cbz	r0, edaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e6>
    ed98:	2462      	movs	r4, #98	; 0x62
    ed9a:	4668      	mov	r0, sp
    ed9c:	f7f5 fac2 	bl	4324 <mpsl_fem_pa_is_configured>
    eda0:	f89d 0000 	ldrb.w	r0, [sp]
    eda4:	b118      	cbz	r0, edae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    eda6:	2501      	movs	r5, #1
    eda8:	e002      	b.n	edb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ec>
    edaa:	245b      	movs	r4, #91	; 0x5b
    edac:	e7f5      	b.n	ed9a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    edae:	2500      	movs	r5, #0
    edb0:	a801      	add	r0, sp, #4
    edb2:	f7f5 fa9f 	bl	42f4 <mpsl_fem_lna_is_configured>
    edb6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    edba:	b100      	cbz	r0, edbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fa>
    edbc:	2001      	movs	r0, #1
    edbe:	4305      	orrs	r5, r0
    edc0:	d000      	beq.n	edc4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    edc2:	340a      	adds	r4, #10
    edc4:	4620      	mov	r0, r4
    edc6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    edc8:	2084      	movs	r0, #132	; 0x84
    edca:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    edcc:	b570      	push	{r4, r5, r6, lr}
    edce:	4604      	mov	r4, r0
    edd0:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    edd2:	2500      	movs	r5, #0
    edd4:	b130      	cbz	r0, ede4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    edd6:	f7f7 fdd3 	bl	6980 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    edda:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    eddc:	fbb0 f2f1 	udiv	r2, r0, r1
    ede0:	fb01 0512 	mls	r5, r1, r2, r0
    ede4:	4620      	mov	r0, r4
    ede6:	f7ff fc7f 	bl	e6e8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    edea:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    edee:	4428      	add	r0, r5
    edf0:	34e8      	adds	r4, #232	; 0xe8
    edf2:	2500      	movs	r5, #0
    edf4:	1882      	adds	r2, r0, r2
    edf6:	eb45 0001 	adc.w	r0, r5, r1
    edfa:	e9c4 2004 	strd	r2, r0, [r4, #16]
    edfe:	f804 5b0b 	strb.w	r5, [r4], #11
    ee02:	2001      	movs	r0, #1
    ee04:	f804 0901 	strb.w	r0, [r4], #-1
    ee08:	2002      	movs	r0, #2
    ee0a:	f804 09f2 	strb.w	r0, [r4], #-242
    ee0e:	4620      	mov	r0, r4
    ee10:	f7ff ffb5 	bl	ed7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    ee14:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    ee18:	4620      	mov	r0, r4
    ee1a:	f7ff ff08 	bl	ec2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    ee1e:	b930      	cbnz	r0, ee2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x36a>
    ee20:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    ee24:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    ee28:	f7ff ffa7 	bl	ed7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    ee2c:	b128      	cbz	r0, ee3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x376>
    ee2e:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    ee32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ee36:	f7ff bf2c 	b.w	ec92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    ee3a:	f240 61d7 	movw	r1, #1751	; 0x6d7
    ee3e:	2030      	movs	r0, #48	; 0x30
    ee40:	f7f5 fb94 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee44:	b510      	push	{r4, lr}
    ee46:	4604      	mov	r4, r0
    ee48:	2000      	movs	r0, #0
    ee4a:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    ee4e:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    ee52:	f7f3 fc5b 	bl	270c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ee56:	2020      	movs	r0, #32
    ee58:	f884 0294 	strb.w	r0, [r4, #660]	; 0x294
    ee5c:	bd10      	pop	{r4, pc}
    ee5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee62:	4604      	mov	r4, r0
    ee64:	2500      	movs	r5, #0
    ee66:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
    ee6a:	e9d4 673e 	ldrd	r6, r7, [r4, #248]	; 0xf8
    ee6e:	4689      	mov	r9, r1
    ee70:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    ee74:	f04f 0801 	mov.w	r8, #1
    ee78:	f880 80e1 	strb.w	r8, [r0, #225]	; 0xe1
    ee7c:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    ee80:	4641      	mov	r1, r8
    ee82:	34c8      	adds	r4, #200	; 0xc8
    ee84:	f7f7 f96a 	bl	615c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ee88:	6860      	ldr	r0, [r4, #4]
    ee8a:	f8c0 6280 	str.w	r6, [r0, #640]	; 0x280
    ee8e:	f8c0 7284 	str.w	r7, [r0, #644]	; 0x284
    ee92:	6861      	ldr	r1, [r4, #4]
    ee94:	7820      	ldrb	r0, [r4, #0]
    ee96:	f881 0294 	strb.w	r0, [r1, #660]	; 0x294
    ee9a:	6861      	ldr	r1, [r4, #4]
    ee9c:	f8c1 9298 	str.w	r9, [r1, #664]	; 0x298
    eea0:	6860      	ldr	r0, [r4, #4]
    eea2:	e9c0 67a2 	strd	r6, r7, [r0, #648]	; 0x288
    eea6:	6864      	ldr	r4, [r4, #4]
    eea8:	f884 524c 	strb.w	r5, [r4, #588]	; 0x24c
    eeac:	2300      	movs	r3, #0
    eeae:	f8a4 5290 	strh.w	r5, [r4, #656]	; 0x290
    eeb2:	461a      	mov	r2, r3
    eeb4:	4619      	mov	r1, r3
    eeb6:	4620      	mov	r0, r4
    eeb8:	9500      	str	r5, [sp, #0]
    eeba:	f7f8 ff4d 	bl	7d58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    eebe:	b120      	cbz	r0, eeca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    eec0:	f44f 7106 	mov.w	r1, #536	; 0x218
    eec4:	2030      	movs	r0, #48	; 0x30
    eec6:	f7f5 fb51 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eeca:	f8c4 5248 	str.w	r5, [r4, #584]	; 0x248
    eece:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    eed2:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
    eed6:	f8a4 525e 	strh.w	r5, [r4, #606]	; 0x25e
    eeda:	f8a4 525c 	strh.w	r5, [r4, #604]	; 0x25c
    eede:	348c      	adds	r4, #140	; 0x8c
    eee0:	f884 51d5 	strb.w	r5, [r4, #469]	; 0x1d5
    eee4:	8820      	ldrh	r0, [r4, #0]
    eee6:	1e40      	subs	r0, r0, #1
    eee8:	8020      	strh	r0, [r4, #0]
    eeea:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
    eeee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eef2:	f7ff bece 	b.w	ec92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    eef6:	b570      	push	{r4, r5, r6, lr}
    eef8:	b140      	cbz	r0, ef0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x448>
    eefa:	2909      	cmp	r1, #9
    eefc:	d249      	bcs.n	ef92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ce>
    eefe:	e8df f001 	tbb	[pc, r1]
    ef02:	1507      	.short	0x1507
    ef04:	48383c3c 	.word	0x48383c3c
    ef08:	0044402a 	.word	0x0044402a
    ef0c:	21ca      	movs	r1, #202	; 0xca
    ef0e:	e03d      	b.n	ef8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ef10:	4604      	mov	r4, r0
    ef12:	f7f7 ff0d 	bl	6d30 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    ef16:	b110      	cbz	r0, ef1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    ef18:	f44f 711d 	mov.w	r1, #628	; 0x274
    ef1c:	e036      	b.n	ef8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ef1e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    ef22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef26:	38ff      	subs	r0, #255	; 0xff
    ef28:	f7f3 be6c 	b.w	2c04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    ef2c:	4605      	mov	r5, r0
    ef2e:	f7ff fc04 	bl	e73a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ef32:	b9b0      	cbnz	r0, ef62 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49e>
    ef34:	2100      	movs	r1, #0
    ef36:	4628      	mov	r0, r5
    ef38:	f7ff fe73 	bl	ec22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    ef3c:	4604      	mov	r4, r0
    ef3e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    ef42:	42a0      	cmp	r0, r4
    ef44:	d20b      	bcs.n	ef5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    ef46:	1a20      	subs	r0, r4, r0
    ef48:	2103      	movs	r1, #3
    ef4a:	f7f2 fd95 	bl	1a78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ef4e:	b130      	cbz	r0, ef5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    ef50:	4628      	mov	r0, r5
    ef52:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    ef56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef5a:	f7ff bb5c 	b.w	e616 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    ef5e:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    ef62:	4628      	mov	r0, r5
    ef64:	f7f7 ff00 	bl	6d68 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    ef68:	2800      	cmp	r0, #0
    ef6a:	d014      	beq.n	ef96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d2>
    ef6c:	f240 21a7 	movw	r1, #679	; 0x2a7
    ef70:	e00c      	b.n	ef8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ef72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef76:	f7fc b937 	b.w	b1e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ef7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef7e:	f7ff be0a 	b.w	eb96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    ef82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef86:	f7ff be43 	b.w	ec10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    ef8a:	21ea      	movs	r1, #234	; 0xea
    ef8c:	2030      	movs	r0, #48	; 0x30
    ef8e:	f7f5 faed 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef92:	21ee      	movs	r1, #238	; 0xee
    ef94:	e7fa      	b.n	ef8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ef96:	bd70      	pop	{r4, r5, r6, pc}
    ef98:	b510      	push	{r4, lr}
    ef9a:	0004      	movs	r4, r0
    ef9c:	d008      	beq.n	efb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ec>
    ef9e:	2909      	cmp	r1, #9
    efa0:	d25c      	bcs.n	f05c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x598>
    efa2:	e8df f001 	tbb	[pc, r1]
    efa6:	3807      	.short	0x3807
    efa8:	5b3c4040 	.word	0x5b3c4040
    efac:	00574c45 	.word	0x00574c45
    efb0:	2196      	movs	r1, #150	; 0x96
    efb2:	e050      	b.n	f056 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    efb4:	2100      	movs	r1, #0
    efb6:	f8c4 129c 	str.w	r1, [r4, #668]	; 0x29c
    efba:	f894 1260 	ldrb.w	r1, [r4, #608]	; 0x260
    efbe:	4620      	mov	r0, r4
    efc0:	b189      	cbz	r1, efe6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x522>
    efc2:	f8b0 225e 	ldrh.w	r2, [r0, #606]	; 0x25e
    efc6:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    efca:	428a      	cmp	r2, r1
    efcc:	d106      	bne.n	efdc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x518>
    efce:	f8b0 2214 	ldrh.w	r2, [r0, #532]	; 0x214
    efd2:	1a51      	subs	r1, r2, r1
    efd4:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    efd8:	4611      	mov	r1, r2
    efda:	e00d      	b.n	eff8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    efdc:	1a51      	subs	r1, r2, r1
    efde:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    efe2:	b291      	uxth	r1, r2
    efe4:	e008      	b.n	eff8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    efe6:	f8b0 125c 	ldrh.w	r1, [r0, #604]	; 0x25c
    efea:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
    efee:	1a89      	subs	r1, r1, r2
    eff0:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    eff4:	f8b0 125c 	ldrh.w	r1, [r0, #604]	; 0x25c
    eff8:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
    effc:	e9d0 129e 	ldrd	r1, r2, [r0, #632]	; 0x278
    f000:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f004:	f8c0 2284 	str.w	r2, [r0, #644]	; 0x284
    f008:	f7f9 f9a8 	bl	835c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f00c:	4620      	mov	r0, r4
    f00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f012:	f7f9 b8ab 	b.w	816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    f016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f01a:	f000 b909 	b.w	f230 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f01e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f022:	f7fc b8e1 	b.w	b1e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f026:	4620      	mov	r0, r4
    f028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f02c:	f000 b825 	b.w	f07a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    f030:	2001      	movs	r0, #1
    f032:	f7f2 fd11 	bl	1a58 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f03a:	f7fe bbe5 	b.w	d808 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f03e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    f042:	2804      	cmp	r0, #4
    f044:	d001      	beq.n	f04a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x586>
    f046:	21b8      	movs	r1, #184	; 0xb8
    f048:	e005      	b.n	f056 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f04a:	4620      	mov	r0, r4
    f04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f050:	f7ff bef8 	b.w	ee44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f054:	21be      	movs	r1, #190	; 0xbe
    f056:	2030      	movs	r0, #48	; 0x30
    f058:	f7f5 fa88 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f05c:	21c2      	movs	r1, #194	; 0xc2
    f05e:	e7fa      	b.n	f056 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f060:	b510      	push	{r4, lr}
    f062:	f7fb ffe7 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f066:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f06a:	4408      	add	r0, r1
    f06c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f070:	fbb0 f0f1 	udiv	r0, r0, r1
    f074:	f200 1079 	addw	r0, r0, #377	; 0x179
    f078:	bd10      	pop	{r4, pc}
    f07a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f07c:	4604      	mov	r4, r0
    f07e:	f7f3 fe8f 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f082:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    f086:	f8d4 2284 	ldr.w	r2, [r4, #644]	; 0x284
    f08a:	1ac0      	subs	r0, r0, r3
    f08c:	eb61 0102 	sbc.w	r1, r1, r2
    f090:	2200      	movs	r2, #0
    f092:	4613      	mov	r3, r2
    f094:	1a12      	subs	r2, r2, r0
    f096:	418b      	sbcs	r3, r1
    f098:	db02      	blt.n	f0a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5dc>
    f09a:	f240 610c 	movw	r1, #1548	; 0x60c
    f09e:	e052      	b.n	f146 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x682>
    f0a0:	1c42      	adds	r2, r0, #1
    f0a2:	f171 0100 	sbcs.w	r1, r1, #0
    f0a6:	db02      	blt.n	f0ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ea>
    f0a8:	f240 610d 	movw	r1, #1549	; 0x60d
    f0ac:	e04b      	b.n	f146 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x682>
    f0ae:	6922      	ldr	r2, [r4, #16]
    f0b0:	2100      	movs	r1, #0
    f0b2:	b10a      	cbz	r2, f0b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5f4>
    f0b4:	fbb0 f1f2 	udiv	r1, r0, r2
    f0b8:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    f0bc:	280e      	cmp	r0, #14
    f0be:	d00c      	beq.n	f0da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x616>
    f0c0:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    f0c4:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    f0c8:	1843      	adds	r3, r0, r1
    f0ca:	1ad3      	subs	r3, r2, r3
    f0cc:	b21b      	sxth	r3, r3
    f0ce:	2b00      	cmp	r3, #0
    f0d0:	db06      	blt.n	f0e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x61c>
    f0d2:	1c52      	adds	r2, r2, #1
    f0d4:	f8a4 225e 	strh.w	r2, [r4, #606]	; 0x25e
    f0d8:	e006      	b.n	f0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x624>
    f0da:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f0de:	e012      	b.n	f106 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x642>
    f0e0:	1c49      	adds	r1, r1, #1
    f0e2:	4408      	add	r0, r1
    f0e4:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f0e8:	f894 0261 	ldrb.w	r0, [r4, #609]	; 0x261
    f0ec:	f88d 0000 	strb.w	r0, [sp]
    f0f0:	9800      	ldr	r0, [sp, #0]
    f0f2:	9000      	str	r0, [sp, #0]
    f0f4:	f89d 0000 	ldrb.w	r0, [sp]
    f0f8:	b940      	cbnz	r0, f10c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x648>
    f0fa:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f0fe:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    f102:	4288      	cmp	r0, r1
    f104:	d102      	bne.n	f10c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x648>
    f106:	1c40      	adds	r0, r0, #1
    f108:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f10c:	f8b4 0292 	ldrh.w	r0, [r4, #658]	; 0x292
    f110:	1c40      	adds	r0, r0, #1
    f112:	f8a4 0292 	strh.w	r0, [r4, #658]	; 0x292
    f116:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
    f11a:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
    f11e:	1a40      	subs	r0, r0, r1
    f120:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    f124:	1e40      	subs	r0, r0, #1
    f126:	4408      	add	r0, r1
    f128:	b285      	uxth	r5, r0
    f12a:	e026      	b.n	f17a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6b6>
    f12c:	a801      	add	r0, sp, #4
    f12e:	2300      	movs	r3, #0
    f130:	9000      	str	r0, [sp, #0]
    f132:	461a      	mov	r2, r3
    f134:	4620      	mov	r0, r4
    f136:	f7f8 fe0f 	bl	7d58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f13a:	2800      	cmp	r0, #0
    f13c:	d039      	beq.n	f1b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
    f13e:	2801      	cmp	r0, #1
    f140:	d004      	beq.n	f14c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x688>
    f142:	f240 614c 	movw	r1, #1612	; 0x64c
    f146:	2030      	movs	r0, #48	; 0x30
    f148:	f7f5 fa10 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f14c:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f150:	f8b4 1210 	ldrh.w	r1, [r4, #528]	; 0x210
    f154:	1a42      	subs	r2, r0, r1
    f156:	b212      	sxth	r2, r2
    f158:	2a00      	cmp	r2, #0
    f15a:	da09      	bge.n	f170 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ac>
    f15c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f160:	4402      	add	r2, r0
    f162:	1aaa      	subs	r2, r5, r2
    f164:	b212      	sxth	r2, r2
    f166:	2a00      	cmp	r2, #0
    f168:	da02      	bge.n	f170 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ac>
    f16a:	f8a4 125e 	strh.w	r1, [r4, #606]	; 0x25e
    f16e:	e004      	b.n	f17a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6b6>
    f170:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f174:	4408      	add	r0, r1
    f176:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f17a:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
    f17e:	1a68      	subs	r0, r5, r1
    f180:	b200      	sxth	r0, r0
    f182:	2800      	cmp	r0, #0
    f184:	dad2      	bge.n	f12c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x668>
    f186:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
    f18a:	b180      	cbz	r0, f1ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ea>
    f18c:	2008      	movs	r0, #8
    f18e:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    f192:	220a      	movs	r2, #10
    f194:	4621      	mov	r1, r4
    f196:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    f19a:	f7f7 f959 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f19e:	4620      	mov	r0, r4
    f1a0:	f000 f848 	bl	f234 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    f1a4:	4620      	mov	r0, r4
    f1a6:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    f1aa:	f7ff be4b 	b.w	ee44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f1ae:	203e      	movs	r0, #62	; 0x3e
    f1b0:	e7ed      	b.n	f18e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ca>
    f1b2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f1b4:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f1b8:	f001 0307 	and.w	r3, r1, #7
    f1bc:	7802      	ldrb	r2, [r0, #0]
    f1be:	2101      	movs	r1, #1
    f1c0:	4099      	lsls	r1, r3
    f1c2:	438a      	bics	r2, r1
    f1c4:	7002      	strb	r2, [r0, #0]
    f1c6:	4770      	bx	lr

0000f1c8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    f1c8:	b510      	push	{r4, lr}
    f1ca:	4604      	mov	r4, r0
    f1cc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
    f1d0:	6921      	ldr	r1, [r4, #16]
    f1d2:	4288      	cmp	r0, r1
    f1d4:	d109      	bne.n	f1ea <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f1d6:	f8b4 12c8 	ldrh.w	r1, [r4, #712]	; 0x2c8
    f1da:	8b22      	ldrh	r2, [r4, #24]
    f1dc:	4291      	cmp	r1, r2
    f1de:	d104      	bne.n	f1ea <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f1e0:	f8b4 12ca 	ldrh.w	r1, [r4, #714]	; 0x2ca
    f1e4:	8b62      	ldrh	r2, [r4, #26]
    f1e6:	4291      	cmp	r1, r2
    f1e8:	d014      	beq.n	f214 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    f1ea:	8821      	ldrh	r1, [r4, #0]
    f1ec:	f8a4 11c6 	strh.w	r1, [r4, #454]	; 0x1c6
    f1f0:	f7fe fb82 	bl	d8f8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f1f4:	f8a4 01c8 	strh.w	r0, [r4, #456]	; 0x1c8
    f1f8:	f8b4 02c8 	ldrh.w	r0, [r4, #712]	; 0x2c8
    f1fc:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    f200:	f8b4 02ca 	ldrh.w	r0, [r4, #714]	; 0x2ca
    f204:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    f208:	2208      	movs	r2, #8
    f20a:	4621      	mov	r1, r4
    f20c:	f504 70dd 	add.w	r0, r4, #442	; 0x1ba
    f210:	f7f7 f91e 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f214:	2102      	movs	r1, #2
    f216:	4620      	mov	r0, r4
    f218:	f7f6 ffa0 	bl	615c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f21c:	2000      	movs	r0, #0
    f21e:	f804 0f96 	strb.w	r0, [r4, #150]!
    f222:	2003      	movs	r0, #3
    f224:	70e0      	strb	r0, [r4, #3]
    f226:	bd10      	pop	{r4, pc}

0000f228 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f228:	f7f5 bd26 	b.w	4c78 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f22c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f22c:	2000      	movs	r0, #0
    f22e:	4770      	bx	lr

0000f230 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f230:	f7f6 b9dc 	b.w	55ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f234 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f234:	2100      	movs	r1, #0
    f236:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    f23a:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f23e:	f880 1099 	strb.w	r1, [r0, #153]	; 0x99
    f242:	f890 121b 	ldrb.w	r1, [r0, #539]	; 0x21b
    f246:	b109      	cbz	r1, f24c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f248:	2102      	movs	r1, #2
    f24a:	e000      	b.n	f24e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f24c:	2103      	movs	r1, #3
    f24e:	f7f8 bc4d 	b.w	7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f252:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    f256:	28fe      	cmp	r0, #254	; 0xfe
    f258:	d001      	beq.n	f25e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f25a:	2001      	movs	r0, #1
    f25c:	4770      	bx	lr
    f25e:	2000      	movs	r0, #0
    f260:	4770      	bx	lr
    f262:	b510      	push	{r4, lr}
    f264:	2801      	cmp	r0, #1
    f266:	d006      	beq.n	f276 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f268:	2802      	cmp	r0, #2
    f26a:	d004      	beq.n	f276 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f26c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    f270:	2006      	movs	r0, #6
    f272:	f7f5 f97b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f276:	bd10      	pop	{r4, pc}
    f278:	2801      	cmp	r0, #1
    f27a:	d002      	beq.n	f282 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f27c:	2802      	cmp	r0, #2
    f27e:	d105      	bne.n	f28c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f280:	e002      	b.n	f288 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f282:	2901      	cmp	r1, #1
    f284:	d004      	beq.n	f290 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f286:	e001      	b.n	f28c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f288:	2902      	cmp	r1, #2
    f28a:	d001      	beq.n	f290 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f28c:	2000      	movs	r0, #0
    f28e:	4770      	bx	lr
    f290:	2001      	movs	r0, #1
    f292:	4770      	bx	lr
    f294:	1a40      	subs	r0, r0, r1
    f296:	b200      	sxth	r0, r0
    f298:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f29c:	4288      	cmp	r0, r1
    f29e:	dc01      	bgt.n	f2a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f2a0:	2800      	cmp	r0, #0
    f2a2:	dc01      	bgt.n	f2a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f2a4:	2001      	movs	r0, #1
    f2a6:	4770      	bx	lr
    f2a8:	2000      	movs	r0, #0
    f2aa:	4770      	bx	lr
    f2ac:	2200      	movs	r2, #0
    f2ae:	704a      	strb	r2, [r1, #1]
    f2b0:	2208      	movs	r2, #8
    f2b2:	700a      	strb	r2, [r1, #0]
    f2b4:	f5a0 7233 	sub.w	r2, r0, #716	; 0x2cc
    f2b8:	8812      	ldrh	r2, [r2, #0]
    f2ba:	808a      	strh	r2, [r1, #4]
    f2bc:	68c2      	ldr	r2, [r0, #12]
    f2be:	f8c1 2006 	str.w	r2, [r1, #6]
    f2c2:	6902      	ldr	r2, [r0, #16]
    f2c4:	f8c1 200a 	str.w	r2, [r1, #10]
    f2c8:	8a80      	ldrh	r0, [r0, #20]
    f2ca:	81c8      	strh	r0, [r1, #14]
    f2cc:	4770      	bx	lr
    f2ce:	6842      	ldr	r2, [r0, #4]
    f2d0:	2100      	movs	r1, #0
    f2d2:	f882 1095 	strb.w	r1, [r2, #149]	; 0x95
    f2d6:	6842      	ldr	r2, [r0, #4]
    f2d8:	f882 10ce 	strb.w	r1, [r2, #206]	; 0xce
    f2dc:	6840      	ldr	r0, [r0, #4]
    f2de:	f8a0 10ca 	strh.w	r1, [r0, #202]	; 0xca
    f2e2:	4770      	bx	lr
    f2e4:	b510      	push	{r4, lr}
    f2e6:	4604      	mov	r4, r0
    f2e8:	6840      	ldr	r0, [r0, #4]
    f2ea:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f2ee:	0740      	lsls	r0, r0, #29
    f2f0:	d501      	bpl.n	f2f6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xc2>
    f2f2:	2001      	movs	r0, #1
    f2f4:	bd10      	pop	{r4, pc}
    f2f6:	f7f9 f933 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f2fa:	6860      	ldr	r0, [r4, #4]
    f2fc:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f300:	f041 0104 	orr.w	r1, r1, #4
    f304:	6001      	str	r1, [r0, #0]
    f306:	2000      	movs	r0, #0
    f308:	bd10      	pop	{r4, pc}
    f30a:	b510      	push	{r4, lr}
    f30c:	4604      	mov	r4, r0
    f30e:	6840      	ldr	r0, [r0, #4]
    f310:	2301      	movs	r3, #1
    f312:	2109      	movs	r1, #9
    f314:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f318:	3080      	adds	r0, #128	; 0x80
    f31a:	f7fe fb06 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f31e:	2800      	cmp	r0, #0
    f320:	d009      	beq.n	f336 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x102>
    f322:	6861      	ldr	r1, [r4, #4]
    f324:	2000      	movs	r0, #0
    f326:	f881 00c2 	strb.w	r0, [r1, #194]	; 0xc2
    f32a:	6861      	ldr	r1, [r4, #4]
    f32c:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    f330:	6861      	ldr	r1, [r4, #4]
    f332:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f336:	bd10      	pop	{r4, pc}
    f338:	b510      	push	{r4, lr}
    f33a:	4604      	mov	r4, r0
    f33c:	6840      	ldr	r0, [r0, #4]
    f33e:	2301      	movs	r3, #1
    f340:	2100      	movs	r1, #0
    f342:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    f346:	3080      	adds	r0, #128	; 0x80
    f348:	f7fe faef 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f34c:	2800      	cmp	r0, #0
    f34e:	6860      	ldr	r0, [r4, #4]
    f350:	d00b      	beq.n	f36a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f352:	f890 009b 	ldrb.w	r0, [r0, #155]	; 0x9b
    f356:	2800      	cmp	r0, #0
    f358:	d006      	beq.n	f368 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x134>
    f35a:	f7f9 f901 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f35e:	6861      	ldr	r1, [r4, #4]
    f360:	2012      	movs	r0, #18
    f362:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f366:	2000      	movs	r0, #0
    f368:	bd10      	pop	{r4, pc}
    f36a:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    f36e:	2301      	movs	r3, #1
    f370:	2105      	movs	r1, #5
    f372:	3080      	adds	r0, #128	; 0x80
    f374:	f7fe fad9 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f378:	b108      	cbz	r0, f37e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x14a>
    f37a:	2008      	movs	r0, #8
    f37c:	bd10      	pop	{r4, pc}
    f37e:	2001      	movs	r0, #1
    f380:	bd10      	pop	{r4, pc}
    f382:	6840      	ldr	r0, [r0, #4]
    f384:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f388:	2913      	cmp	r1, #19
    f38a:	d001      	beq.n	f390 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x15c>
    f38c:	2002      	movs	r0, #2
    f38e:	4770      	bx	lr
    f390:	2114      	movs	r1, #20
    f392:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f396:	2000      	movs	r0, #0
    f398:	4770      	bx	lr
    f39a:	b510      	push	{r4, lr}
    f39c:	4604      	mov	r4, r0
    f39e:	6840      	ldr	r0, [r0, #4]
    f3a0:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    f3a4:	2819      	cmp	r0, #25
    f3a6:	d001      	beq.n	f3ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x178>
    f3a8:	2002      	movs	r0, #2
    f3aa:	bd10      	pop	{r4, pc}
    f3ac:	f7f9 f8e4 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f3b0:	6861      	ldr	r1, [r4, #4]
    f3b2:	201d      	movs	r0, #29
    f3b4:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f3b8:	2000      	movs	r0, #0
    f3ba:	bd10      	pop	{r4, pc}
    f3bc:	b510      	push	{r4, lr}
    f3be:	6843      	ldr	r3, [r0, #4]
    f3c0:	4604      	mov	r4, r0
    f3c2:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
    f3c6:	2808      	cmp	r0, #8
    f3c8:	d20d      	bcs.n	f3e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1b2>
    f3ca:	f500 720c 	add.w	r2, r0, #560	; 0x230
    f3ce:	f1c0 0008 	rsb	r0, r0, #8
    f3d2:	b2c1      	uxtb	r1, r0
    f3d4:	1898      	adds	r0, r3, r2
    f3d6:	f7f5 f969 	bl	46ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f3da:	6861      	ldr	r1, [r4, #4]
    f3dc:	f891 2122 	ldrb.w	r2, [r1, #290]	; 0x122
    f3e0:	4410      	add	r0, r2
    f3e2:	f881 0122 	strb.w	r0, [r1, #290]	; 0x122
    f3e6:	6862      	ldr	r2, [r4, #4]
    f3e8:	f892 1122 	ldrb.w	r1, [r2, #290]	; 0x122
    f3ec:	3908      	subs	r1, #8
    f3ee:	2904      	cmp	r1, #4
    f3f0:	d20d      	bcs.n	f40e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1da>
    f3f2:	f501 708a 	add.w	r0, r1, #276	; 0x114
    f3f6:	f1c1 0104 	rsb	r1, r1, #4
    f3fa:	b2c9      	uxtb	r1, r1
    f3fc:	4410      	add	r0, r2
    f3fe:	f7f5 f955 	bl	46ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f402:	6861      	ldr	r1, [r4, #4]
    f404:	f891 2122 	ldrb.w	r2, [r1, #290]	; 0x122
    f408:	4410      	add	r0, r2
    f40a:	f881 0122 	strb.w	r0, [r1, #290]	; 0x122
    f40e:	6860      	ldr	r0, [r4, #4]
    f410:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    f414:	290c      	cmp	r1, #12
    f416:	d30f      	bcc.n	f438 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x204>
    f418:	d005      	beq.n	f426 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1f2>
    f41a:	f640 1135 	movw	r1, #2357	; 0x935
    f41e:	f04f 0031 	mov.w	r0, #49	; 0x31
    f422:	f7f5 f8a3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f426:	2100      	movs	r1, #0
    f428:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
    f42c:	2101      	movs	r1, #1
    f42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f432:	2004      	movs	r0, #4
    f434:	f7f9 be4e 	b.w	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    f438:	bd10      	pop	{r4, pc}
    f43a:	6842      	ldr	r2, [r0, #4]
    f43c:	2130      	movs	r1, #48	; 0x30
    f43e:	f882 1095 	strb.w	r1, [r2, #149]	; 0x95
    f442:	6840      	ldr	r0, [r0, #4]
    f444:	2100      	movs	r1, #0
    f446:	f880 12b4 	strb.w	r1, [r0, #692]	; 0x2b4
    f44a:	4770      	bx	lr
    f44c:	b510      	push	{r4, lr}
    f44e:	6841      	ldr	r1, [r0, #4]
    f450:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    f454:	2a16      	cmp	r2, #22
    f456:	d004      	beq.n	f462 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x22e>
    f458:	f240 71cc 	movw	r1, #1996	; 0x7cc
    f45c:	2031      	movs	r0, #49	; 0x31
    f45e:	f7f5 f885 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f462:	2201      	movs	r2, #1
    f464:	f881 20d3 	strb.w	r2, [r1, #211]	; 0xd3
    f468:	6840      	ldr	r0, [r0, #4]
    f46a:	2117      	movs	r1, #23
    f46c:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f470:	bd10      	pop	{r4, pc}
    f472:	f7fe bfd0 	b.w	e416 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f476:	b510      	push	{r4, lr}
    f478:	4604      	mov	r4, r0
    f47a:	6840      	ldr	r0, [r0, #4]
    f47c:	2301      	movs	r3, #1
    f47e:	2100      	movs	r1, #0
    f480:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f484:	3080      	adds	r0, #128	; 0x80
    f486:	f7fe fa50 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f48a:	b120      	cbz	r0, f496 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x262>
    f48c:	6861      	ldr	r1, [r4, #4]
    f48e:	201e      	movs	r0, #30
    f490:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f494:	bd10      	pop	{r4, pc}
    f496:	f640 0148 	movw	r1, #2120	; 0x848
    f49a:	2031      	movs	r0, #49	; 0x31
    f49c:	f7f5 f866 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4a0:	b510      	push	{r4, lr}
    f4a2:	6841      	ldr	r1, [r0, #4]
    f4a4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    f4a8:	06c2      	lsls	r2, r0, #27
    f4aa:	d402      	bmi.n	f4b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x27e>
    f4ac:	f640 014f 	movw	r1, #2127	; 0x84f
    f4b0:	e003      	b.n	f4ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x286>
    f4b2:	0682      	lsls	r2, r0, #26
    f4b4:	d504      	bpl.n	f4c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x28c>
    f4b6:	f44f 6105 	mov.w	r1, #2128	; 0x850
    f4ba:	2031      	movs	r0, #49	; 0x31
    f4bc:	f7f5 f856 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4c0:	f020 0010 	bic.w	r0, r0, #16
    f4c4:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    f4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4cc:	f7f9 b854 	b.w	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f4d0:	b510      	push	{r4, lr}
    f4d2:	4604      	mov	r4, r0
    f4d4:	6840      	ldr	r0, [r0, #4]
    f4d6:	2301      	movs	r3, #1
    f4d8:	2100      	movs	r1, #0
    f4da:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f4de:	3080      	adds	r0, #128	; 0x80
    f4e0:	f7fe fa23 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f4e4:	b120      	cbz	r0, f4f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2bc>
    f4e6:	6861      	ldr	r1, [r4, #4]
    f4e8:	2010      	movs	r0, #16
    f4ea:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f4ee:	bd10      	pop	{r4, pc}
    f4f0:	f640 013b 	movw	r1, #2107	; 0x83b
    f4f4:	2031      	movs	r0, #49	; 0x31
    f4f6:	f7f5 f839 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4fa:	6840      	ldr	r0, [r0, #4]
    f4fc:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f500:	f021 0104 	bic.w	r1, r1, #4
    f504:	6001      	str	r1, [r0, #0]
    f506:	f7f9 b837 	b.w	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f50a:	b510      	push	{r4, lr}
    f50c:	6841      	ldr	r1, [r0, #4]
    f50e:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    f512:	2a12      	cmp	r2, #18
    f514:	d004      	beq.n	f520 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2ec>
    f516:	f240 71c4 	movw	r1, #1988	; 0x7c4
    f51a:	2031      	movs	r0, #49	; 0x31
    f51c:	f7f5 f826 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f520:	2201      	movs	r2, #1
    f522:	f881 20d3 	strb.w	r2, [r1, #211]	; 0xd3
    f526:	6840      	ldr	r0, [r0, #4]
    f528:	2113      	movs	r1, #19
    f52a:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f52e:	bd10      	pop	{r4, pc}
    f530:	b510      	push	{r4, lr}
    f532:	4604      	mov	r4, r0
    f534:	6840      	ldr	r0, [r0, #4]
    f536:	2301      	movs	r3, #1
    f538:	2100      	movs	r1, #0
    f53a:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f53e:	3080      	adds	r0, #128	; 0x80
    f540:	f7fe f9f3 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f544:	b120      	cbz	r0, f550 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f546:	6861      	ldr	r1, [r4, #4]
    f548:	2021      	movs	r0, #33	; 0x21
    f54a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f54e:	bd10      	pop	{r4, pc}
    f550:	f640 015a 	movw	r1, #2138	; 0x85a
    f554:	2031      	movs	r0, #49	; 0x31
    f556:	f7f5 f809 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f55a:	b510      	push	{r4, lr}
    f55c:	6841      	ldr	r1, [r0, #4]
    f55e:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
    f562:	2823      	cmp	r0, #35	; 0x23
    f564:	d005      	beq.n	f572 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f566:	b120      	cbz	r0, f572 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f568:	f640 0161 	movw	r1, #2145	; 0x861
    f56c:	2031      	movs	r0, #49	; 0x31
    f56e:	f7f4 fffd 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f572:	2024      	movs	r0, #36	; 0x24
    f574:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f578:	bd10      	pop	{r4, pc}
    f57a:	b510      	push	{r4, lr}
    f57c:	6840      	ldr	r0, [r0, #4]
    f57e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f582:	292f      	cmp	r1, #47	; 0x2f
    f584:	d006      	beq.n	f594 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x360>
    f586:	2917      	cmp	r1, #23
    f588:	d00b      	beq.n	f5a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x36e>
    f58a:	f240 71ee 	movw	r1, #2030	; 0x7ee
    f58e:	2031      	movs	r0, #49	; 0x31
    f590:	f7f4 ffec 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f594:	2100      	movs	r1, #0
    f596:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f59a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f59e:	f7f8 bfeb 	b.w	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f5a2:	211b      	movs	r1, #27
    f5a4:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f5a8:	bd10      	pop	{r4, pc}
    f5aa:	b510      	push	{r4, lr}
    f5ac:	6840      	ldr	r0, [r0, #4]
    f5ae:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f5b2:	2917      	cmp	r1, #23
    f5b4:	d004      	beq.n	f5c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x38c>
    f5b6:	f240 71d9 	movw	r1, #2009	; 0x7d9
    f5ba:	2031      	movs	r0, #49	; 0x31
    f5bc:	f7f4 ffd6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5c0:	211b      	movs	r1, #27
    f5c2:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f5c6:	bd10      	pop	{r4, pc}
    f5c8:	f7fe bf13 	b.w	e3f2 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f5cc:	b510      	push	{r4, lr}
    f5ce:	6840      	ldr	r0, [r0, #4]
    f5d0:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f5d4:	2917      	cmp	r1, #23
    f5d6:	d004      	beq.n	f5e2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ae>
    f5d8:	f240 71d3 	movw	r1, #2003	; 0x7d3
    f5dc:	2031      	movs	r0, #49	; 0x31
    f5de:	f7f4 ffc5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5e2:	2119      	movs	r1, #25
    f5e4:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f5e8:	bd10      	pop	{r4, pc}
    f5ea:	b538      	push	{r3, r4, r5, lr}
    f5ec:	4604      	mov	r4, r0
    f5ee:	6840      	ldr	r0, [r0, #4]
    f5f0:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f5f4:	291d      	cmp	r1, #29
    f5f6:	d002      	beq.n	f5fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ca>
    f5f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
    f5fc:	e00f      	b.n	f61e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ea>
    f5fe:	2500      	movs	r5, #0
    f600:	f880 50d3 	strb.w	r5, [r0, #211]	; 0xd3
    f604:	6860      	ldr	r0, [r4, #4]
    f606:	f890 1205 	ldrb.w	r1, [r0, #517]	; 0x205
    f60a:	f88d 1000 	strb.w	r1, [sp]
    f60e:	9900      	ldr	r1, [sp, #0]
    f610:	9100      	str	r1, [sp, #0]
    f612:	f89d 2000 	ldrb.w	r2, [sp]
    f616:	2101      	movs	r1, #1
    f618:	b122      	cbz	r2, f624 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3f0>
    f61a:	f640 0103 	movw	r1, #2051	; 0x803
    f61e:	2031      	movs	r0, #49	; 0x31
    f620:	f7f4 ffa4 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f624:	f890 20d4 	ldrb.w	r2, [r0, #212]	; 0xd4
    f628:	b162      	cbz	r2, f644 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x410>
    f62a:	f880 50d4 	strb.w	r5, [r0, #212]	; 0xd4
    f62e:	6860      	ldr	r0, [r4, #4]
    f630:	220c      	movs	r2, #12
    f632:	8801      	ldrh	r1, [r0, #0]
    f634:	f8a0 1208 	strh.w	r1, [r0, #520]	; 0x208
    f638:	6860      	ldr	r0, [r4, #4]
    f63a:	f880 5206 	strb.w	r5, [r0, #518]	; 0x206
    f63e:	6861      	ldr	r1, [r4, #4]
    f640:	4608      	mov	r0, r1
    f642:	e00b      	b.n	f65c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x428>
    f644:	8802      	ldrh	r2, [r0, #0]
    f646:	f8a0 2208 	strh.w	r2, [r0, #520]	; 0x208
    f64a:	6860      	ldr	r0, [r4, #4]
    f64c:	220b      	movs	r2, #11
    f64e:	f880 5206 	strb.w	r5, [r0, #518]	; 0x206
    f652:	6860      	ldr	r0, [r4, #4]
    f654:	f880 120a 	strb.w	r1, [r0, #522]	; 0x20a
    f658:	6861      	ldr	r1, [r4, #4]
    f65a:	4608      	mov	r0, r1
    f65c:	f200 10fd 	addw	r0, r0, #509	; 0x1fd
    f660:	f7f6 fef6 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f664:	6860      	ldr	r0, [r4, #4]
    f666:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    f66a:	bd38      	pop	{r3, r4, r5, pc}
    f66c:	b510      	push	{r4, lr}
    f66e:	4604      	mov	r4, r0
    f670:	6840      	ldr	r0, [r0, #4]
    f672:	2301      	movs	r3, #1
    f674:	4619      	mov	r1, r3
    f676:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    f67a:	3080      	adds	r0, #128	; 0x80
    f67c:	f7fe f955 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f680:	2800      	cmp	r0, #0
    f682:	d103      	bne.n	f68c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x458>
    f684:	6861      	ldr	r1, [r4, #4]
    f686:	2008      	movs	r0, #8
    f688:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    f68c:	bd10      	pop	{r4, pc}
    f68e:	b510      	push	{r4, lr}
    f690:	4604      	mov	r4, r0
    f692:	6840      	ldr	r0, [r0, #4]
    f694:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    f698:	0789      	lsls	r1, r1, #30
    f69a:	d411      	bmi.n	f6c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x48c>
    f69c:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f6a0:	2301      	movs	r3, #1
    f6a2:	2100      	movs	r1, #0
    f6a4:	3080      	adds	r0, #128	; 0x80
    f6a6:	f7fe f940 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f6aa:	b120      	cbz	r0, f6b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x482>
    f6ac:	6861      	ldr	r1, [r4, #4]
    f6ae:	2006      	movs	r0, #6
    f6b0:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f6b4:	e00a      	b.n	f6cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x498>
    f6b6:	f640 0127 	movw	r1, #2087	; 0x827
    f6ba:	2031      	movs	r0, #49	; 0x31
    f6bc:	f7f4 ff56 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6c0:	2100      	movs	r1, #0
    f6c2:	f880 10ce 	strb.w	r1, [r0, #206]	; 0xce
    f6c6:	6860      	ldr	r0, [r4, #4]
    f6c8:	f880 113a 	strb.w	r1, [r0, #314]	; 0x13a
    f6cc:	6860      	ldr	r0, [r4, #4]
    f6ce:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f6d2:	0780      	lsls	r0, r0, #30
    f6d4:	d507      	bpl.n	f6e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4b2>
    f6d6:	f7f8 ff4f 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f6da:	6860      	ldr	r0, [r4, #4]
    f6dc:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f6e0:	f021 0102 	bic.w	r1, r1, #2
    f6e4:	6001      	str	r1, [r0, #0]
    f6e6:	bd10      	pop	{r4, pc}

0000f6e8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6ec:	6856      	ldr	r6, [r2, #4]
    f6ee:	460c      	mov	r4, r1
    f6f0:	f506 7594 	add.w	r5, r6, #296	; 0x128
    f6f4:	f106 0780 	add.w	r7, r6, #128	; 0x80
    f6f8:	2823      	cmp	r0, #35	; 0x23
    f6fa:	d008      	beq.n	f70e <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f6fc:	2824      	cmp	r0, #36	; 0x24
    f6fe:	d015      	beq.n	f72c <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x44>
    f700:	2825      	cmp	r0, #37	; 0x25
    f702:	d02a      	beq.n	f75a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f704:	f44f 718a 	mov.w	r1, #276	; 0x114
    f708:	2078      	movs	r0, #120	; 0x78
    f70a:	f7f4 ff2f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f70e:	7e68      	ldrb	r0, [r5, #25]
    f710:	f000 f8b5 	bl	f87e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f714:	7e69      	ldrb	r1, [r5, #25]
    f716:	7121      	strb	r1, [r4, #4]
    f718:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f71c:	7ea9      	ldrb	r1, [r5, #26]
    f71e:	4430      	add	r0, r6
    f720:	7161      	strb	r1, [r4, #5]
    f722:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f726:	71a0      	strb	r0, [r4, #6]
    f728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f72c:	7d68      	ldrb	r0, [r5, #21]
    f72e:	f000 f8a6 	bl	f87e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f732:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f736:	4430      	add	r0, r6
    f738:	7d79      	ldrb	r1, [r7, #21]
    f73a:	306f      	adds	r0, #111	; 0x6f
    f73c:	2929      	cmp	r1, #41	; 0x29
    f73e:	d00a      	beq.n	f756 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f740:	7881      	ldrb	r1, [r0, #2]
    f742:	7802      	ldrb	r2, [r0, #0]
    f744:	7122      	strb	r2, [r4, #4]
    f746:	7daa      	ldrb	r2, [r5, #22]
    f748:	7162      	strb	r2, [r4, #5]
    f74a:	7840      	ldrb	r0, [r0, #1]
    f74c:	71a0      	strb	r0, [r4, #6]
    f74e:	71e1      	strb	r1, [r4, #7]
    f750:	2000      	movs	r0, #0
    f752:	7528      	strb	r0, [r5, #20]
    f754:	e7e8      	b.n	f728 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x40>
    f756:	21ff      	movs	r1, #255	; 0xff
    f758:	e7f3      	b.n	f742 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f75a:	7d68      	ldrb	r0, [r5, #21]
    f75c:	f000 f88f 	bl	f87e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f760:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f764:	4430      	add	r0, r6
    f766:	7d69      	ldrb	r1, [r5, #21]
    f768:	7121      	strb	r1, [r4, #4]
    f76a:	f810 1f6f 	ldrb.w	r1, [r0, #111]!
    f76e:	7161      	strb	r1, [r4, #5]
    f770:	7da9      	ldrb	r1, [r5, #22]
    f772:	71a1      	strb	r1, [r4, #6]
    f774:	7840      	ldrb	r0, [r0, #1]
    f776:	71e0      	strb	r0, [r4, #7]
    f778:	e7d6      	b.n	f728 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x40>

0000f77a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f77a:	b510      	push	{r4, lr}
    f77c:	2801      	cmp	r0, #1
    f77e:	d006      	beq.n	f78e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f780:	2802      	cmp	r0, #2
    f782:	d006      	beq.n	f792 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f784:	f240 2176 	movw	r1, #630	; 0x276
    f788:	2078      	movs	r0, #120	; 0x78
    f78a:	f7f4 feef 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f78e:	2000      	movs	r0, #0
    f790:	bd10      	pop	{r4, pc}
    f792:	2001      	movs	r0, #1
    f794:	bd10      	pop	{r4, pc}

0000f796 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    f796:	b570      	push	{r4, r5, r6, lr}
    f798:	6844      	ldr	r4, [r0, #4]
    f79a:	220f      	movs	r2, #15
    f79c:	f504 7594 	add.w	r5, r4, #296	; 0x128
    f7a0:	2100      	movs	r1, #0
    f7a2:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    f7a6:	f7fc fef2 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f7aa:	2100      	movs	r1, #0
    f7ac:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
    f7b0:	61a9      	str	r1, [r5, #24]
    f7b2:	4608      	mov	r0, r1
    f7b4:	217f      	movs	r1, #127	; 0x7f
    f7b6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f7ba:	4422      	add	r2, r4
    f7bc:	1c40      	adds	r0, r0, #1
    f7be:	b2c0      	uxtb	r0, r0
    f7c0:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    f7c4:	2802      	cmp	r0, #2
    f7c6:	d3f6      	bcc.n	f7b6 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x20>
    f7c8:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    f7cc:	4620      	mov	r0, r4
    f7ce:	f000 f814 	bl	f7fa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    f7d2:	2000      	movs	r0, #0
    f7d4:	21ff      	movs	r1, #255	; 0xff
    f7d6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f7da:	4422      	add	r2, r4
    f7dc:	1c40      	adds	r0, r0, #1
    f7de:	f802 1f71 	strb.w	r1, [r2, #113]!
    f7e2:	b2c0      	uxtb	r0, r0
    f7e4:	7191      	strb	r1, [r2, #6]
    f7e6:	2802      	cmp	r0, #2
    f7e8:	d3f5      	bcc.n	f7d6 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x40>
    f7ea:	bd70      	pop	{r4, r5, r6, pc}

0000f7ec <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>:
    f7ec:	207f      	movs	r0, #127	; 0x7f
    f7ee:	f000 b857 	b.w	f8a0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>

0000f7f2 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>:
    f7f2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f7f6:	f000 b853 	b.w	f8a0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>

0000f7fa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7fe:	460d      	mov	r5, r1
    f800:	4606      	mov	r6, r0
    f802:	f7ff fff3 	bl	f7ec <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>
    f806:	4607      	mov	r7, r0
    f808:	f7ff fff3 	bl	f7f2 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>
    f80c:	2400      	movs	r4, #0
    f80e:	4285      	cmp	r5, r0
    f810:	d100      	bne.n	f814 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f812:	2401      	movs	r4, #1
    f814:	42bd      	cmp	r5, r7
    f816:	d101      	bne.n	f81c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f818:	f044 0402 	orr.w	r4, r4, #2
    f81c:	f000 f823 	bl	f866 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1e>
    f820:	2200      	movs	r2, #0
    f822:	4601      	mov	r1, r0
    f824:	2301      	movs	r3, #1
    f826:	fa03 f002 	lsl.w	r0, r3, r2
    f82a:	4208      	tst	r0, r1
    f82c:	d006      	beq.n	f83c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x42>
    f82e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    f832:	4430      	add	r0, r6
    f834:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f838:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f83c:	1c52      	adds	r2, r2, #1
    f83e:	b2d2      	uxtb	r2, r2
    f840:	2a02      	cmp	r2, #2
    f842:	d3f0      	bcc.n	f826 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f848 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f848:	b510      	push	{r4, lr}
    f84a:	4604      	mov	r4, r0
    f84c:	4608      	mov	r0, r1
    f84e:	f7ff ff94 	bl	f77a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f852:	2802      	cmp	r0, #2
    f854:	d206      	bcs.n	f864 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f856:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f85a:	4420      	add	r0, r4
    f85c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f860:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f864:	bd10      	pop	{r4, pc}
    f866:	b510      	push	{r4, lr}
    f868:	f7fa ff1e 	bl	a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f86c:	0a00      	lsrs	r0, r0, #8
    f86e:	2201      	movs	r2, #1
    f870:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f874:	07c0      	lsls	r0, r0, #31
    f876:	d000      	beq.n	f87a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x32>
    f878:	2203      	movs	r2, #3
    f87a:	4610      	mov	r0, r2
    f87c:	bd10      	pop	{r4, pc}
    f87e:	4601      	mov	r1, r0
    f880:	b510      	push	{r4, lr}
    f882:	2000      	movs	r0, #0
    f884:	2301      	movs	r3, #1
    f886:	fa03 f200 	lsl.w	r2, r3, r0
    f88a:	420a      	tst	r2, r1
    f88c:	d107      	bne.n	f89e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x56>
    f88e:	1c40      	adds	r0, r0, #1
    f890:	b2c0      	uxtb	r0, r0
    f892:	2802      	cmp	r0, #2
    f894:	d3f7      	bcc.n	f886 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f896:	2149      	movs	r1, #73	; 0x49
    f898:	2078      	movs	r0, #120	; 0x78
    f89a:	f7f4 fe67 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f89e:	bd10      	pop	{r4, pc}
    f8a0:	b508      	push	{r3, lr}
    f8a2:	f640 1288 	movw	r2, #2440	; 0x988
    f8a6:	4669      	mov	r1, sp
    f8a8:	f7f4 fd42 	bl	4330 <mpsl_fem_tx_power_split>
    f8ac:	bd08      	pop	{r3, pc}
    f8ae:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f8b2:	f001 0107 	and.w	r1, r1, #7
    f8b6:	7800      	ldrb	r0, [r0, #0]
    f8b8:	40c8      	lsrs	r0, r1
    f8ba:	f000 0001 	and.w	r0, r0, #1
    f8be:	4770      	bx	lr
    f8c0:	b118      	cbz	r0, f8ca <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x82>
    f8c2:	2802      	cmp	r0, #2
    f8c4:	d001      	beq.n	f8ca <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x82>
    f8c6:	2001      	movs	r0, #1
    f8c8:	4770      	bx	lr
    f8ca:	2000      	movs	r0, #0
    f8cc:	4770      	bx	lr

0000f8ce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f8ce:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f8d0:	7881      	ldrb	r1, [r0, #2]
    f8d2:	2500      	movs	r5, #0
    f8d4:	4604      	mov	r4, r0
    f8d6:	291a      	cmp	r1, #26
    f8d8:	d024      	beq.n	f924 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f8da:	dc0e      	bgt.n	f8fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f8dc:	2916      	cmp	r1, #22
    f8de:	d22b      	bcs.n	f938 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f8e0:	e8df f001 	tbb	[pc, r1]
    f8e4:	2a2a2a2a 	.word	0x2a2a2a2a
    f8e8:	2a2a202a 	.word	0x2a2a202a
    f8ec:	2a2a2a2a 	.word	0x2a2a2a2a
    f8f0:	2a2a2a2a 	.word	0x2a2a2a2a
    f8f4:	202a2a2a 	.word	0x202a2a2a
    f8f8:	2020      	.short	0x2020
    f8fa:	292a      	cmp	r1, #42	; 0x2a
    f8fc:	d01c      	beq.n	f938 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f8fe:	dc0b      	bgt.n	f918 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f900:	f1a1 011e 	sub.w	r1, r1, #30
    f904:	290c      	cmp	r1, #12
    f906:	d217      	bcs.n	f938 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f908:	e8df f001 	tbb	[pc, r1]
    f90c:	16161616 	.word	0x16161616
    f910:	16161616 	.word	0x16161616
    f914:	0c161616 	.word	0x0c161616
    f918:	393a      	subs	r1, #58	; 0x3a
    f91a:	2902      	cmp	r1, #2
    f91c:	d20c      	bcs.n	f938 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f91e:	e8df f001 	tbb	[pc, r1]
    f922:	010b      	.short	0x010b
    f924:	8820      	ldrh	r0, [r4, #0]
    f926:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f92a:	d205      	bcs.n	f938 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f92c:	4669      	mov	r1, sp
    f92e:	f7fd ffd2 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f932:	b118      	cbz	r0, f93c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f934:	2002      	movs	r0, #2
    f936:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f938:	2012      	movs	r0, #18
    f93a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f93c:	9901      	ldr	r1, [sp, #4]
    f93e:	4668      	mov	r0, sp
    f940:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
    f944:	f88d 2008 	strb.w	r2, [sp, #8]
    f948:	9a02      	ldr	r2, [sp, #8]
    f94a:	9202      	str	r2, [sp, #8]
    f94c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f950:	f501 7194 	add.w	r1, r1, #296	; 0x128
    f954:	b10a      	cbz	r2, f95a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    f956:	200c      	movs	r0, #12
    f958:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f95a:	78a2      	ldrb	r2, [r4, #2]
    f95c:	704a      	strb	r2, [r1, #1]
    f95e:	22ff      	movs	r2, #255	; 0xff
    f960:	700a      	strb	r2, [r1, #0]
    f962:	f7fe fb51 	bl	e008 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f966:	4628      	mov	r0, r5
    f968:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f96a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f96a:	b510      	push	{r4, lr}
    f96c:	4604      	mov	r4, r0
    f96e:	f7fa fdcd 	bl	a50c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f972:	b108      	cbz	r0, f978 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f974:	200c      	movs	r0, #12
    f976:	bd10      	pop	{r4, pc}
    f978:	7820      	ldrb	r0, [r4, #0]
    f97a:	b118      	cbz	r0, f984 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f97c:	2801      	cmp	r0, #1
    f97e:	d001      	beq.n	f984 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f980:	2012      	movs	r0, #18
    f982:	bd10      	pop	{r4, pc}
    f984:	f7ff ff9c 	bl	f8c0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x78>
    f988:	1c61      	adds	r1, r4, #1
    f98a:	f7f6 fab5 	bl	5ef8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f98e:	b108      	cbz	r0, f994 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f990:	2000      	movs	r0, #0
    f992:	bd10      	pop	{r4, pc}
    f994:	2007      	movs	r0, #7
    f996:	bd10      	pop	{r4, pc}

0000f998 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f998:	b510      	push	{r4, lr}
    f99a:	f7fa fdb7 	bl	a50c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f99e:	b108      	cbz	r0, f9a4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f9a0:	200c      	movs	r0, #12
    f9a2:	bd10      	pop	{r4, pc}
    f9a4:	f7f6 fad0 	bl	5f48 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f9a8:	2000      	movs	r0, #0
    f9aa:	bd10      	pop	{r4, pc}

0000f9ac <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f9ac:	b510      	push	{r4, lr}
    f9ae:	460b      	mov	r3, r1
    f9b0:	2201      	movs	r2, #1
    f9b2:	f100 0110 	add.w	r1, r0, #16
    f9b6:	f7fd ff70 	bl	d89a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f9ba:	2000      	movs	r0, #0
    f9bc:	bd10      	pop	{r4, pc}

0000f9be <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f9be:	b510      	push	{r4, lr}
    f9c0:	8800      	ldrh	r0, [r0, #0]
    f9c2:	2100      	movs	r1, #0
    f9c4:	f7fd fd10 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f9c8:	b118      	cbz	r0, f9d2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f9ca:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    f9ce:	b111      	cbz	r1, f9d6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f9d0:	e007      	b.n	f9e2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f9d2:	2002      	movs	r0, #2
    f9d4:	bd10      	pop	{r4, pc}
    f9d6:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f9da:	2916      	cmp	r1, #22
    f9dc:	d003      	beq.n	f9e6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f9de:	2917      	cmp	r1, #23
    f9e0:	d001      	beq.n	f9e6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f9e2:	200c      	movs	r0, #12
    f9e4:	bd10      	pop	{r4, pc}
    f9e6:	2102      	movs	r1, #2
    f9e8:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
    f9ec:	2000      	movs	r0, #0
    f9ee:	bd10      	pop	{r4, pc}

0000f9f0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9f2:	4605      	mov	r5, r0
    f9f4:	8800      	ldrh	r0, [r0, #0]
    f9f6:	2100      	movs	r1, #0
    f9f8:	f7fd fcf6 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f9fc:	0004      	movs	r4, r0
    f9fe:	d003      	beq.n	fa08 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fa00:	f894 02a0 	ldrb.w	r0, [r4, #672]	; 0x2a0
    fa04:	b110      	cbz	r0, fa0c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fa06:	e011      	b.n	fa2c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fa08:	2002      	movs	r0, #2
    fa0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa0c:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    fa10:	2816      	cmp	r0, #22
    fa12:	d001      	beq.n	fa18 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fa14:	2817      	cmp	r0, #23
    fa16:	d109      	bne.n	fa2c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fa18:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
    fa1c:	f88d 0000 	strb.w	r0, [sp]
    fa20:	9800      	ldr	r0, [sp, #0]
    fa22:	9000      	str	r0, [sp, #0]
    fa24:	f89d 0000 	ldrb.w	r0, [sp]
    fa28:	2601      	movs	r6, #1
    fa2a:	b108      	cbz	r0, fa30 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fa2c:	200c      	movs	r0, #12
    fa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa30:	2210      	movs	r2, #16
    fa32:	1ca9      	adds	r1, r5, #2
    fa34:	f204 20a1 	addw	r0, r4, #673	; 0x2a1
    fa38:	f7fc fd2f 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fa3c:	f884 62a0 	strb.w	r6, [r4, #672]	; 0x2a0
    fa40:	2000      	movs	r0, #0
    fa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fa44 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fa44:	b510      	push	{r4, lr}
    fa46:	2108      	movs	r1, #8
    fa48:	f7f4 fe3e 	bl	46c8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fa4c:	2000      	movs	r0, #0
    fa4e:	bd10      	pop	{r4, pc}

0000fa50 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fa50:	b510      	push	{r4, lr}
    fa52:	4604      	mov	r4, r0
    fa54:	f7fa fbda 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fa58:	f7fe fe79 	bl	e74e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fa5c:	7020      	strb	r0, [r4, #0]
    fa5e:	2000      	movs	r0, #0
    fa60:	bd10      	pop	{r4, pc}

0000fa62 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fa62:	21fb      	movs	r1, #251	; 0xfb
    fa64:	8001      	strh	r1, [r0, #0]
    fa66:	f640 0248 	movw	r2, #2120	; 0x848
    fa6a:	8042      	strh	r2, [r0, #2]
    fa6c:	8081      	strh	r1, [r0, #4]
    fa6e:	80c2      	strh	r2, [r0, #6]
    fa70:	2000      	movs	r0, #0
    fa72:	4770      	bx	lr

0000fa74 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fa74:	b51c      	push	{r2, r3, r4, lr}
    fa76:	8800      	ldrh	r0, [r0, #0]
    fa78:	4669      	mov	r1, sp
    fa7a:	f7fd ff2c 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa7e:	2800      	cmp	r0, #0
    fa80:	d10d      	bne.n	fa9e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fa82:	f89d 0000 	ldrb.w	r0, [sp]
    fa86:	9c01      	ldr	r4, [sp, #4]
    fa88:	2801      	cmp	r0, #1
    fa8a:	f504 7494 	add.w	r4, r4, #296	; 0x128
    fa8e:	d103      	bne.n	fa98 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fa90:	9801      	ldr	r0, [sp, #4]
    fa92:	f000 fcf8 	bl	10486 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fa96:	b118      	cbz	r0, faa0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fa98:	7ce0      	ldrb	r0, [r4, #19]
    fa9a:	b118      	cbz	r0, faa4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fa9c:	203a      	movs	r0, #58	; 0x3a
    fa9e:	bd1c      	pop	{r2, r3, r4, pc}
    faa0:	2002      	movs	r0, #2
    faa2:	bd1c      	pop	{r2, r3, r4, pc}
    faa4:	2001      	movs	r0, #1
    faa6:	74e0      	strb	r0, [r4, #19]
    faa8:	2000      	movs	r0, #0
    faaa:	bd1c      	pop	{r2, r3, r4, pc}

0000faac <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    faac:	b510      	push	{r4, lr}
    faae:	4604      	mov	r4, r0
    fab0:	20d8      	movs	r0, #216	; 0xd8
    fab2:	7020      	strb	r0, [r4, #0]
    fab4:	f000 fce4 	bl	10480 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fab8:	7060      	strb	r0, [r4, #1]
    faba:	2000      	movs	r0, #0
    fabc:	bd10      	pop	{r4, pc}

0000fabe <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fabe:	2108      	movs	r1, #8
    fac0:	7001      	strb	r1, [r0, #0]
    fac2:	2000      	movs	r0, #0
    fac4:	4770      	bx	lr

0000fac6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fac6:	b510      	push	{r4, lr}
    fac8:	4604      	mov	r4, r0
    faca:	f7fa fd1f 	bl	a50c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    face:	b108      	cbz	r0, fad4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fad0:	200c      	movs	r0, #12
    fad2:	bd10      	pop	{r4, pc}
    fad4:	7820      	ldrb	r0, [r4, #0]
    fad6:	b108      	cbz	r0, fadc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fad8:	2801      	cmp	r0, #1
    fada:	d107      	bne.n	faec <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fadc:	f7ff fef0 	bl	f8c0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x78>
    fae0:	1c61      	adds	r1, r4, #1
    fae2:	f7fd fecf 	bl	d884 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fae6:	b108      	cbz	r0, faec <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fae8:	2000      	movs	r0, #0
    faea:	bd10      	pop	{r4, pc}
    faec:	2012      	movs	r0, #18
    faee:	bd10      	pop	{r4, pc}

0000faf0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    faf0:	b51c      	push	{r2, r3, r4, lr}
    faf2:	4604      	mov	r4, r0
    faf4:	f7fa fb8a 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    faf8:	2000      	movs	r0, #0
    fafa:	f88d 0002 	strb.w	r0, [sp, #2]
    fafe:	2103      	movs	r1, #3
    fb00:	f88d 1001 	strb.w	r1, [sp, #1]
    fb04:	f814 1b01 	ldrb.w	r1, [r4], #1
    fb08:	f88d 1003 	strb.w	r1, [sp, #3]
    fb0c:	f88d 0000 	strb.w	r0, [sp]
    fb10:	4668      	mov	r0, sp
    fb12:	9401      	str	r4, [sp, #4]
    fb14:	f000 f99f 	bl	fe56 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fb18:	bd1c      	pop	{r2, r3, r4, pc}

0000fb1a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fb1a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fb1c:	4605      	mov	r5, r0
    fb1e:	f7fa fb75 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fb22:	4606      	mov	r6, r0
    fb24:	7828      	ldrb	r0, [r5, #0]
    fb26:	2400      	movs	r4, #0
    fb28:	b160      	cbz	r0, fb44 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fb2a:	f88d 4000 	strb.w	r4, [sp]
    fb2e:	2001      	movs	r0, #1
    fb30:	f10d 0101 	add.w	r1, sp, #1
    fb34:	f7f5 fbb6 	bl	52a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fb38:	b120      	cbz	r0, fb44 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fb3a:	4668      	mov	r0, sp
    fb3c:	f000 f897 	bl	fc6e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fb40:	2800      	cmp	r0, #0
    fb42:	d112      	bne.n	fb6a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fb44:	f88d 400c 	strb.w	r4, [sp, #12]
    fb48:	4630      	mov	r0, r6
    fb4a:	f7fe fdf6 	bl	e73a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fb4e:	b118      	cbz	r0, fb58 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fb50:	2080      	movs	r0, #128	; 0x80
    fb52:	f8ad 000d 	strh.w	r0, [sp, #13]
    fb56:	e001      	b.n	fb5c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fb58:	f8ad 400d 	strh.w	r4, [sp, #13]
    fb5c:	f88d 400f 	strb.w	r4, [sp, #15]
    fb60:	7828      	ldrb	r0, [r5, #0]
    fb62:	2801      	cmp	r0, #1
    fb64:	d003      	beq.n	fb6e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fb66:	b138      	cbz	r0, fb78 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fb68:	2012      	movs	r0, #18
    fb6a:	b004      	add	sp, #16
    fb6c:	bd70      	pop	{r4, r5, r6, pc}
    fb6e:	a903      	add	r1, sp, #12
    fb70:	4630      	mov	r0, r6
    fb72:	f7fa fb67 	bl	a244 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fb76:	e7f8      	b.n	fb6a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fb78:	4630      	mov	r0, r6
    fb7a:	f000 fc9a 	bl	104b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fb7e:	e7f4      	b.n	fb6a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fb80 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fb80:	b530      	push	{r4, r5, lr}
    fb82:	b08b      	sub	sp, #44	; 0x2c
    fb84:	4604      	mov	r4, r0
    fb86:	f7fa fb41 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fb8a:	4602      	mov	r2, r0
    fb8c:	7920      	ldrb	r0, [r4, #4]
    fb8e:	2804      	cmp	r0, #4
    fb90:	d803      	bhi.n	fb9a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fb92:	8860      	ldrh	r0, [r4, #2]
    fb94:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fb98:	d902      	bls.n	fba0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fb9a:	2012      	movs	r0, #18
    fb9c:	b00b      	add	sp, #44	; 0x2c
    fb9e:	bd30      	pop	{r4, r5, pc}
    fba0:	2500      	movs	r5, #0
    fba2:	f88d 5004 	strb.w	r5, [sp, #4]
    fba6:	7921      	ldrb	r1, [r4, #4]
    fba8:	9500      	str	r5, [sp, #0]
    fbaa:	f89d 0000 	ldrb.w	r0, [sp]
    fbae:	2905      	cmp	r1, #5
    fbb0:	f040 0010 	orr.w	r0, r0, #16
    fbb4:	f88d 0000 	strb.w	r0, [sp]
    fbb8:	d254      	bcs.n	fc64 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fbba:	e8df f001 	tbb	[pc, r1]
    fbbe:	0803      	.short	0x0803
    fbc0:	000b1105 	.word	0x000b1105
    fbc4:	f040 0001 	orr.w	r0, r0, #1
    fbc8:	f040 0002 	orr.w	r0, r0, #2
    fbcc:	e006      	b.n	fbdc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fbce:	f040 0009 	orr.w	r0, r0, #9
    fbd2:	e001      	b.n	fbd8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fbd4:	f040 0001 	orr.w	r0, r0, #1
    fbd8:	f040 0004 	orr.w	r0, r0, #4
    fbdc:	f88d 0000 	strb.w	r0, [sp]
    fbe0:	f8bd 0000 	ldrh.w	r0, [sp]
    fbe4:	9000      	str	r0, [sp, #0]
    fbe6:	f8bd 0000 	ldrh.w	r0, [sp]
    fbea:	f8ad 0005 	strh.w	r0, [sp, #5]
    fbee:	8821      	ldrh	r1, [r4, #0]
    fbf0:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fbf4:	f361 201f 	bfi	r0, r1, #8, #24
    fbf8:	f8cd 0006 	str.w	r0, [sp, #6]
    fbfc:	8861      	ldrh	r1, [r4, #2]
    fbfe:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fc02:	f361 201f 	bfi	r0, r1, #8, #24
    fc06:	f8cd 0009 	str.w	r0, [sp, #9]
    fc0a:	7b60      	ldrb	r0, [r4, #13]
    fc0c:	f88d 000d 	strb.w	r0, [sp, #13]
    fc10:	7960      	ldrb	r0, [r4, #5]
    fc12:	f88d 000e 	strb.w	r0, [sp, #14]
    fc16:	79a0      	ldrb	r0, [r4, #6]
    fc18:	f88d 000f 	strb.w	r0, [sp, #15]
    fc1c:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fc20:	9004      	str	r0, [sp, #16]
    fc22:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fc26:	f8ad 0014 	strh.w	r0, [sp, #20]
    fc2a:	7ba0      	ldrb	r0, [r4, #14]
    fc2c:	f88d 0016 	strb.w	r0, [sp, #22]
    fc30:	207f      	movs	r0, #127	; 0x7f
    fc32:	f88d 0017 	strb.w	r0, [sp, #23]
    fc36:	2001      	movs	r0, #1
    fc38:	f88d 0018 	strb.w	r0, [sp, #24]
    fc3c:	f88d 5019 	strb.w	r5, [sp, #25]
    fc40:	f88d 001a 	strb.w	r0, [sp, #26]
    fc44:	f88d 501b 	strb.w	r5, [sp, #27]
    fc48:	4610      	mov	r0, r2
    fc4a:	f7fe fd96 	bl	e77a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fc4e:	f88d 001c 	strb.w	r0, [sp, #28]
    fc52:	f88d 501d 	strb.w	r5, [sp, #29]
    fc56:	f88d 501e 	strb.w	r5, [sp, #30]
    fc5a:	a909      	add	r1, sp, #36	; 0x24
    fc5c:	a801      	add	r0, sp, #4
    fc5e:	f7fa f99f 	bl	9fa0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fc62:	e79b      	b.n	fb9c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fc64:	f241 11d5 	movw	r1, #4565	; 0x11d5
    fc68:	2039      	movs	r0, #57	; 0x39
    fc6a:	f7f4 fc7f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fc6e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fc6e:	b570      	push	{r4, r5, r6, lr}
    fc70:	4604      	mov	r4, r0
    fc72:	7800      	ldrb	r0, [r0, #0]
    fc74:	2101      	movs	r1, #1
    fc76:	f7fd fbb7 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fc7a:	0005      	movs	r5, r0
    fc7c:	d007      	beq.n	fc8e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fc7e:	f7fe ff1e 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fc82:	b160      	cbz	r0, fc9e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fc84:	4628      	mov	r0, r5
    fc86:	f7fe fd5e 	bl	e746 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fc8a:	b110      	cbz	r0, fc92 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fc8c:	e005      	b.n	fc9a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fc8e:	2042      	movs	r0, #66	; 0x42
    fc90:	bd70      	pop	{r4, r5, r6, pc}
    fc92:	4628      	mov	r0, r5
    fc94:	f7fe fd4d 	bl	e732 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fc98:	b108      	cbz	r0, fc9e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fc9a:	200c      	movs	r0, #12
    fc9c:	bd70      	pop	{r4, r5, r6, pc}
    fc9e:	1c61      	adds	r1, r4, #1
    fca0:	4628      	mov	r0, r5
    fca2:	f7fe fd62 	bl	e76a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fca6:	2000      	movs	r0, #0
    fca8:	bd70      	pop	{r4, r5, r6, pc}

0000fcaa <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fcaa:	b50e      	push	{r1, r2, r3, lr}
    fcac:	8882      	ldrh	r2, [r0, #4]
    fcae:	f244 2390 	movw	r3, #17040	; 0x4290
    fcb2:	429a      	cmp	r2, r3
    fcb4:	d901      	bls.n	fcba <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fcb6:	2012      	movs	r0, #18
    fcb8:	bd0e      	pop	{r1, r2, r3, pc}
    fcba:	f640 0348 	movw	r3, #2120	; 0x848
    fcbe:	429a      	cmp	r2, r3
    fcc0:	d300      	bcc.n	fcc4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fcc2:	461a      	mov	r2, r3
    fcc4:	8803      	ldrh	r3, [r0, #0]
    fcc6:	f8ad 3000 	strh.w	r3, [sp]
    fcca:	8843      	ldrh	r3, [r0, #2]
    fccc:	f8ad 3002 	strh.w	r3, [sp, #2]
    fcd0:	f8ad 2004 	strh.w	r2, [sp, #4]
    fcd4:	8843      	ldrh	r3, [r0, #2]
    fcd6:	f8ad 3006 	strh.w	r3, [sp, #6]
    fcda:	f8ad 2008 	strh.w	r2, [sp, #8]
    fcde:	8800      	ldrh	r0, [r0, #0]
    fce0:	8008      	strh	r0, [r1, #0]
    fce2:	4668      	mov	r0, sp
    fce4:	f7fa fb8e 	bl	a404 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    fce8:	bd0e      	pop	{r1, r2, r3, pc}

0000fcea <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    fcea:	b510      	push	{r4, lr}
    fcec:	4604      	mov	r4, r0
    fcee:	f7fa fa8d 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fcf2:	7861      	ldrb	r1, [r4, #1]
    fcf4:	f3c1 0240 	ubfx	r2, r1, #1, #1
    fcf8:	f001 0101 	and.w	r1, r1, #1
    fcfc:	f7fe fd31 	bl	e762 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    fd00:	2000      	movs	r0, #0
    fd02:	bd10      	pop	{r4, pc}

0000fd04 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fd04:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fd06:	4604      	mov	r4, r0
    fd08:	f10d 0007 	add.w	r0, sp, #7
    fd0c:	9000      	str	r0, [sp, #0]
    fd0e:	7922      	ldrb	r2, [r4, #4]
    fd10:	78e1      	ldrb	r1, [r4, #3]
    fd12:	78a0      	ldrb	r0, [r4, #2]
    fd14:	f10d 0306 	add.w	r3, sp, #6
    fd18:	f000 fbf8 	bl	1050c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    fd1c:	2800      	cmp	r0, #0
    fd1e:	d109      	bne.n	fd34 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fd20:	8820      	ldrh	r0, [r4, #0]
    fd22:	f8ad 0004 	strh.w	r0, [sp, #4]
    fd26:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fd2a:	f8ad 0008 	strh.w	r0, [sp, #8]
    fd2e:	a801      	add	r0, sp, #4
    fd30:	f000 f94c 	bl	ffcc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fd34:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fd36 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fd36:	b510      	push	{r4, lr}
    fd38:	4604      	mov	r4, r0
    fd3a:	2001      	movs	r0, #1
    fd3c:	f000 fa7e 	bl	1023c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fd40:	b128      	cbz	r0, fd4e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fd42:	4621      	mov	r1, r4
    fd44:	2001      	movs	r0, #1
    fd46:	f7f5 fac5 	bl	52d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fd4a:	2000      	movs	r0, #0
    fd4c:	bd10      	pop	{r4, pc}
    fd4e:	200c      	movs	r0, #12
    fd50:	bd10      	pop	{r4, pc}

0000fd52 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fd52:	b51c      	push	{r2, r3, r4, lr}
    fd54:	4604      	mov	r4, r0
    fd56:	f7fa fa59 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fd5a:	2000      	movs	r0, #0
    fd5c:	f88d 0000 	strb.w	r0, [sp]
    fd60:	f88d 0002 	strb.w	r0, [sp, #2]
    fd64:	2003      	movs	r0, #3
    fd66:	f88d 0001 	strb.w	r0, [sp, #1]
    fd6a:	f814 0b01 	ldrb.w	r0, [r4], #1
    fd6e:	f88d 0003 	strb.w	r0, [sp, #3]
    fd72:	4668      	mov	r0, sp
    fd74:	9401      	str	r4, [sp, #4]
    fd76:	f000 f8d7 	bl	ff28 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    fd7a:	bd1c      	pop	{r2, r3, r4, pc}

0000fd7c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fd7c:	b51c      	push	{r2, r3, r4, lr}
    fd7e:	8801      	ldrh	r1, [r0, #0]
    fd80:	f8ad 1000 	strh.w	r1, [sp]
    fd84:	8841      	ldrh	r1, [r0, #2]
    fd86:	f8ad 1002 	strh.w	r1, [sp, #2]
    fd8a:	8801      	ldrh	r1, [r0, #0]
    fd8c:	f8ad 1004 	strh.w	r1, [sp, #4]
    fd90:	8840      	ldrh	r0, [r0, #2]
    fd92:	f8ad 0006 	strh.w	r0, [sp, #6]
    fd96:	4668      	mov	r0, sp
    fd98:	f7fa fbd4 	bl	a544 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x300>
    fd9c:	bd1c      	pop	{r2, r3, r4, pc}

0000fd9e <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fd9e:	b510      	push	{r4, lr}
    fda0:	f7f5 fabc 	bl	531c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fda4:	2000      	movs	r0, #0
    fda6:	bd10      	pop	{r4, pc}

0000fda8 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    fda8:	b510      	push	{r4, lr}
    fdaa:	460c      	mov	r4, r1
    fdac:	2100      	movs	r1, #0
    fdae:	f7fd fb1b 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fdb2:	b118      	cbz	r0, fdbc <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    fdb4:	2c02      	cmp	r4, #2
    fdb6:	d903      	bls.n	fdc0 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    fdb8:	2012      	movs	r0, #18
    fdba:	bd10      	pop	{r4, pc}
    fdbc:	2002      	movs	r0, #2
    fdbe:	bd10      	pop	{r4, pc}
    fdc0:	f014 0101 	ands.w	r1, r4, #1
    fdc4:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    fdc8:	f3c4 0240 	ubfx	r2, r4, #1, #1
    fdcc:	f880 221c 	strb.w	r2, [r0, #540]	; 0x21c
    fdd0:	d004      	beq.n	fddc <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fdd2:	f890 121a 	ldrb.w	r1, [r0, #538]	; 0x21a
    fdd6:	b109      	cbz	r1, fddc <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fdd8:	f7fe fe74 	bl	eac4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    fddc:	2000      	movs	r0, #0
    fdde:	bd10      	pop	{r4, pc}

0000fde0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fde0:	b51c      	push	{r2, r3, r4, lr}
    fde2:	460c      	mov	r4, r1
    fde4:	4669      	mov	r1, sp
    fde6:	f7fd fd76 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fdea:	2800      	cmp	r0, #0
    fdec:	d105      	bne.n	fdfa <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    fdee:	2100      	movs	r1, #0
    fdf0:	4622      	mov	r2, r4
    fdf2:	9801      	ldr	r0, [sp, #4]
    fdf4:	f000 faee 	bl	103d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    fdf8:	2000      	movs	r0, #0
    fdfa:	bd1c      	pop	{r2, r3, r4, pc}

0000fdfc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    fdfc:	b510      	push	{r4, lr}
    fdfe:	4604      	mov	r4, r0
    fe00:	7800      	ldrb	r0, [r0, #0]
    fe02:	28ff      	cmp	r0, #255	; 0xff
    fe04:	d009      	beq.n	fe1a <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    fe06:	2101      	movs	r1, #1
    fe08:	f7fd faee 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe0c:	b118      	cbz	r0, fe16 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    fe0e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    fe12:	8441      	strh	r1, [r0, #34]	; 0x22
    fe14:	e005      	b.n	fe22 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    fe16:	2042      	movs	r0, #66	; 0x42
    fe18:	bd10      	pop	{r4, pc}
    fe1a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fe1e:	f7f7 fdfb 	bl	7a18 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    fe22:	2000      	movs	r0, #0
    fe24:	bd10      	pop	{r4, pc}

0000fe26 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fe26:	b510      	push	{r4, lr}
    fe28:	4604      	mov	r4, r0
    fe2a:	2000      	movs	r0, #0
    fe2c:	f000 fa06 	bl	1023c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fe30:	b128      	cbz	r0, fe3e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    fe32:	4621      	mov	r1, r4
    fe34:	2000      	movs	r0, #0
    fe36:	f7f5 fa4d 	bl	52d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fe3a:	2000      	movs	r0, #0
    fe3c:	bd10      	pop	{r4, pc}
    fe3e:	200c      	movs	r0, #12
    fe40:	bd10      	pop	{r4, pc}

0000fe42 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fe42:	b510      	push	{r4, lr}
    fe44:	7800      	ldrb	r0, [r0, #0]
    fe46:	b100      	cbz	r0, fe4a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    fe48:	2001      	movs	r0, #1
    fe4a:	f7f7 fe0f 	bl	7a6c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    fe4e:	2000      	movs	r0, #0
    fe50:	bd10      	pop	{r4, pc}

0000fe52 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fe52:	f7fa bad7 	b.w	a404 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

0000fe56 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    fe56:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fe5a:	4606      	mov	r6, r0
    fe5c:	7845      	ldrb	r5, [r0, #1]
    fe5e:	7800      	ldrb	r0, [r0, #0]
    fe60:	2101      	movs	r1, #1
    fe62:	f7fd fac1 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe66:	0004      	movs	r4, r0
    fe68:	d01e      	beq.n	fea8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    fe6a:	f7fe fbcc 	bl	e606 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    fe6e:	78f1      	ldrb	r1, [r6, #3]
    fe70:	4281      	cmp	r1, r0
    fe72:	d800      	bhi.n	fe76 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    fe74:	4608      	mov	r0, r1
    fe76:	4607      	mov	r7, r0
    fe78:	2d04      	cmp	r5, #4
    fe7a:	d018      	beq.n	feae <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    fe7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fe7e:	f7fd fbfe 	bl	d67e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fe82:	4438      	add	r0, r7
    fe84:	b281      	uxth	r1, r0
    fe86:	4620      	mov	r0, r4
    fe88:	2201      	movs	r2, #1
    fe8a:	f000 f9e9 	bl	10260 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    fe8e:	2800      	cmp	r0, #0
    fe90:	d10b      	bne.n	feaa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fe92:	2d03      	cmp	r5, #3
    fe94:	d000      	beq.n	fe98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fe96:	b1df      	cbz	r7, fed0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fe98:	4620      	mov	r0, r4
    fe9a:	f7fe fc52 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fe9e:	7871      	ldrb	r1, [r6, #1]
    fea0:	2903      	cmp	r1, #3
    fea2:	d010      	beq.n	fec6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fea4:	b9a0      	cbnz	r0, fed0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fea6:	e004      	b.n	feb2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    fea8:	2042      	movs	r0, #66	; 0x42
    feaa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    feae:	b97f      	cbnz	r7, fed0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    feb0:	e7f2      	b.n	fe98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    feb2:	2904      	cmp	r1, #4
    feb4:	d107      	bne.n	fec6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    feb6:	4620      	mov	r0, r4
    feb8:	f7fe fe01 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    febc:	b140      	cbz	r0, fed0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    febe:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fec0:	f7fd fbac 	bl	d61c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    fec4:	b120      	cbz	r0, fed0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fec6:	2d01      	cmp	r5, #1
    fec8:	d004      	beq.n	fed4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    feca:	2d03      	cmp	r5, #3
    fecc:	d002      	beq.n	fed4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    fece:	e00e      	b.n	feee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    fed0:	2012      	movs	r0, #18
    fed2:	e7ea      	b.n	feaa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fed4:	4620      	mov	r0, r4
    fed6:	f7fe fc34 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    feda:	b108      	cbz	r0, fee0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    fedc:	2200      	movs	r2, #0
    fede:	e002      	b.n	fee6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fee0:	2d01      	cmp	r5, #1
    fee2:	d013      	beq.n	ff0c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    fee4:	2201      	movs	r2, #1
    fee6:	4668      	mov	r0, sp
    fee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    feea:	f7fd fb2f 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    feee:	2d04      	cmp	r5, #4
    fef0:	d018      	beq.n	ff24 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fef2:	6872      	ldr	r2, [r6, #4]
    fef4:	463b      	mov	r3, r7
    fef6:	2101      	movs	r1, #1
    fef8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fefa:	f7fd fb5b 	bl	d5b4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fefe:	b138      	cbz	r0, ff10 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    ff00:	7870      	ldrb	r0, [r6, #1]
    ff02:	2802      	cmp	r0, #2
    ff04:	d006      	beq.n	ff14 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    ff06:	2803      	cmp	r0, #3
    ff08:	d004      	beq.n	ff14 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    ff0a:	e00b      	b.n	ff24 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    ff0c:	2202      	movs	r2, #2
    ff0e:	e7ea      	b.n	fee6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    ff10:	2007      	movs	r0, #7
    ff12:	e7ca      	b.n	feaa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ff14:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff16:	f7fd fbb2 	bl	d67e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ff1a:	4602      	mov	r2, r0
    ff1c:	2101      	movs	r1, #1
    ff1e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff20:	f7fd fb8a 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ff24:	2000      	movs	r0, #0
    ff26:	e7c0      	b.n	feaa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000ff28 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    ff28:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ff2c:	4607      	mov	r7, r0
    ff2e:	7845      	ldrb	r5, [r0, #1]
    ff30:	78c6      	ldrb	r6, [r0, #3]
    ff32:	7800      	ldrb	r0, [r0, #0]
    ff34:	2101      	movs	r1, #1
    ff36:	f7fd fa57 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff3a:	0004      	movs	r4, r0
    ff3c:	d003      	beq.n	ff46 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    ff3e:	f7fe fc02 	bl	e746 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ff42:	b118      	cbz	r0, ff4c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    ff44:	e003      	b.n	ff4e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    ff46:	2042      	movs	r0, #66	; 0x42
    ff48:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ff4c:	2600      	movs	r6, #0
    ff4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff50:	f7fd fb99 	bl	d686 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    ff54:	4430      	add	r0, r6
    ff56:	b281      	uxth	r1, r0
    ff58:	4688      	mov	r8, r1
    ff5a:	4620      	mov	r0, r4
    ff5c:	2201      	movs	r2, #1
    ff5e:	f000 f97f 	bl	10260 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    ff62:	2800      	cmp	r0, #0
    ff64:	d1f0      	bne.n	ff48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ff66:	2d04      	cmp	r5, #4
    ff68:	d008      	beq.n	ff7c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    ff6a:	2d03      	cmp	r5, #3
    ff6c:	d00a      	beq.n	ff84 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    ff6e:	b12e      	cbz	r6, ff7c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    ff70:	4620      	mov	r0, r4
    ff72:	f7fe fda4 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ff76:	b118      	cbz	r0, ff80 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    ff78:	200c      	movs	r0, #12
    ff7a:	e7e5      	b.n	ff48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ff7c:	2012      	movs	r0, #18
    ff7e:	e7e3      	b.n	ff48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ff80:	2d01      	cmp	r5, #1
    ff82:	d10c      	bne.n	ff9e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    ff84:	4620      	mov	r0, r4
    ff86:	f7fe fbdc 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ff8a:	b108      	cbz	r0, ff90 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    ff8c:	2204      	movs	r2, #4
    ff8e:	e002      	b.n	ff96 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    ff90:	2d01      	cmp	r5, #1
    ff92:	d010      	beq.n	ffb6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    ff94:	2205      	movs	r2, #5
    ff96:	4668      	mov	r0, sp
    ff98:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ff9a:	f7fd fad7 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ff9e:	687a      	ldr	r2, [r7, #4]
    ffa0:	4633      	mov	r3, r6
    ffa2:	2100      	movs	r1, #0
    ffa4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffa6:	f7fd fb05 	bl	d5b4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    ffaa:	b130      	cbz	r0, ffba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    ffac:	2d02      	cmp	r5, #2
    ffae:	d006      	beq.n	ffbe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    ffb0:	2d03      	cmp	r5, #3
    ffb2:	d004      	beq.n	ffbe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    ffb4:	e008      	b.n	ffc8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    ffb6:	2206      	movs	r2, #6
    ffb8:	e7ed      	b.n	ff96 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    ffba:	2007      	movs	r0, #7
    ffbc:	e7c4      	b.n	ff48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ffbe:	4642      	mov	r2, r8
    ffc0:	2100      	movs	r1, #0
    ffc2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffc4:	f7fd fb38 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ffc8:	2000      	movs	r0, #0
    ffca:	e7bd      	b.n	ff48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000ffcc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    ffcc:	b510      	push	{r4, lr}
    ffce:	4604      	mov	r4, r0
    ffd0:	8880      	ldrh	r0, [r0, #4]
    ffd2:	b128      	cbz	r0, ffe0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ffd4:	2801      	cmp	r0, #1
    ffd6:	d003      	beq.n	ffe0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ffd8:	2802      	cmp	r0, #2
    ffda:	d001      	beq.n	ffe0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ffdc:	2012      	movs	r0, #18
    ffde:	bd10      	pop	{r4, pc}
    ffe0:	78e0      	ldrb	r0, [r4, #3]
    ffe2:	f000 f9d4 	bl	1038e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    ffe6:	b148      	cbz	r0, fffc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ffe8:	78a0      	ldrb	r0, [r4, #2]
    ffea:	f000 f9d0 	bl	1038e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    ffee:	b128      	cbz	r0, fffc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fff0:	4620      	mov	r0, r4
    fff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fff6:	2101      	movs	r1, #1
    fff8:	f000 b88e 	b.w	10118 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fffc:	2011      	movs	r0, #17
    fffe:	bd10      	pop	{r4, pc}

00010000 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10000:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10002:	460c      	mov	r4, r1
   10004:	4605      	mov	r5, r0
   10006:	8800      	ldrh	r0, [r0, #0]
   10008:	4669      	mov	r1, sp
   1000a:	f7fd fc64 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1000e:	2800      	cmp	r0, #0
   10010:	d106      	bne.n	10020 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10012:	9801      	ldr	r0, [sp, #4]
   10014:	8829      	ldrh	r1, [r5, #0]
   10016:	8021      	strh	r1, [r4, #0]
   10018:	f8b0 00c0 	ldrh.w	r0, [r0, #192]	; 0xc0
   1001c:	8060      	strh	r0, [r4, #2]
   1001e:	2000      	movs	r0, #0
   10020:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010022 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10022:	b510      	push	{r4, lr}
   10024:	4604      	mov	r4, r0
   10026:	4601      	mov	r1, r0
   10028:	2000      	movs	r0, #0
   1002a:	f7f5 f93b 	bl	52a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1002e:	b910      	cbnz	r0, 10036 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10030:	2000      	movs	r0, #0
   10032:	6020      	str	r0, [r4, #0]
   10034:	80a0      	strh	r0, [r4, #4]
   10036:	2000      	movs	r0, #0
   10038:	bd10      	pop	{r4, pc}

0001003a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   1003a:	b50e      	push	{r1, r2, r3, lr}
   1003c:	8800      	ldrh	r0, [r0, #0]
   1003e:	4669      	mov	r1, sp
   10040:	f7fd fc49 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10044:	b960      	cbnz	r0, 10060 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   10046:	9801      	ldr	r0, [sp, #4]
   10048:	f000 fa1d 	bl	10486 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
   1004c:	b140      	cbz	r0, 10060 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   1004e:	9801      	ldr	r0, [sp, #4]
   10050:	4601      	mov	r1, r0
   10052:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
   10056:	3080      	adds	r0, #128	; 0x80
   10058:	f501 719d 	add.w	r1, r1, #314	; 0x13a
   1005c:	b962      	cbnz	r2, 10078 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   1005e:	e001      	b.n	10064 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   10060:	2002      	movs	r0, #2
   10062:	bd0e      	pop	{r1, r2, r3, pc}
   10064:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
   10068:	f88d 2008 	strb.w	r2, [sp, #8]
   1006c:	9a02      	ldr	r2, [sp, #8]
   1006e:	9202      	str	r2, [sp, #8]
   10070:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10074:	2201      	movs	r2, #1
   10076:	b10b      	cbz	r3, 1007c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   10078:	203a      	movs	r0, #58	; 0x3a
   1007a:	bd0e      	pop	{r1, r2, r3, pc}
   1007c:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
   10080:	079b      	lsls	r3, r3, #30
   10082:	d006      	beq.n	10092 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
   10084:	2203      	movs	r2, #3
   10086:	3056      	adds	r0, #86	; 0x56
   10088:	9901      	ldr	r1, [sp, #4]
   1008a:	f7f6 f9e1 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1008e:	2000      	movs	r0, #0
   10090:	bd0e      	pop	{r1, r2, r3, pc}
   10092:	700a      	strb	r2, [r1, #0]
   10094:	4668      	mov	r0, sp
   10096:	f7fd ffb7 	bl	e008 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   1009a:	e7f8      	b.n	1008e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>

0001009c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1009c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1009e:	460c      	mov	r4, r1
   100a0:	4605      	mov	r5, r0
   100a2:	8800      	ldrh	r0, [r0, #0]
   100a4:	4669      	mov	r1, sp
   100a6:	f7fd fc16 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100aa:	b108      	cbz	r0, 100b0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   100ac:	2002      	movs	r0, #2
   100ae:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   100b0:	78a8      	ldrb	r0, [r5, #2]
   100b2:	b130      	cbz	r0, 100c2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   100b4:	f000 f9e4 	bl	10480 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   100b8:	70a0      	strb	r0, [r4, #2]
   100ba:	8828      	ldrh	r0, [r5, #0]
   100bc:	8020      	strh	r0, [r4, #0]
   100be:	2000      	movs	r0, #0
   100c0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   100c2:	9801      	ldr	r0, [sp, #4]
   100c4:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   100c8:	e7f6      	b.n	100b8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

000100ca <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   100ca:	b510      	push	{r4, lr}
   100cc:	f7fa fa7a 	bl	a5c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   100d0:	2000      	movs	r0, #0
   100d2:	bd10      	pop	{r4, pc}

000100d4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   100d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   100d8:	4604      	mov	r4, r0
   100da:	8840      	ldrh	r0, [r0, #2]
   100dc:	460d      	mov	r5, r1
   100de:	b1b8      	cbz	r0, 10110 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   100e0:	8820      	ldrh	r0, [r4, #0]
   100e2:	4669      	mov	r1, sp
   100e4:	f7fd fbf7 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100e8:	2800      	cmp	r0, #0
   100ea:	d10f      	bne.n	1010c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   100ec:	8820      	ldrh	r0, [r4, #0]
   100ee:	8028      	strh	r0, [r5, #0]
   100f0:	9e01      	ldr	r6, [sp, #4]
   100f2:	f106 0510 	add.w	r5, r6, #16
   100f6:	3680      	adds	r6, #128	; 0x80
   100f8:	682f      	ldr	r7, [r5, #0]
   100fa:	8862      	ldrh	r2, [r4, #2]
   100fc:	4639      	mov	r1, r7
   100fe:	4630      	mov	r0, r6
   10100:	f7fd fd1a 	bl	db38 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10104:	6828      	ldr	r0, [r5, #0]
   10106:	42b8      	cmp	r0, r7
   10108:	d1f6      	bne.n	100f8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1010a:	2000      	movs	r0, #0
   1010c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10110:	2012      	movs	r0, #18
   10112:	e7fb      	b.n	1010c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010114 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10114:	f000 b863 	b.w	101de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010118 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1011c:	b086      	sub	sp, #24
   1011e:	4689      	mov	r9, r1
   10120:	4607      	mov	r7, r0
   10122:	8800      	ldrh	r0, [r0, #0]
   10124:	a901      	add	r1, sp, #4
   10126:	f7fd fbd6 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1012a:	2800      	cmp	r0, #0
   1012c:	d136      	bne.n	1019c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   1012e:	9802      	ldr	r0, [sp, #8]
   10130:	4601      	mov	r1, r0
   10132:	4688      	mov	r8, r1
   10134:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
   10138:	f500 7494 	add.w	r4, r0, #296	; 0x128
   1013c:	f88d 1000 	strb.w	r1, [sp]
   10140:	9900      	ldr	r1, [sp, #0]
   10142:	9100      	str	r1, [sp, #0]
   10144:	f89d 1000 	ldrb.w	r1, [sp]
   10148:	3080      	adds	r0, #128	; 0x80
   1014a:	b109      	cbz	r1, 10150 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   1014c:	2601      	movs	r6, #1
   1014e:	e000      	b.n	10152 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   10150:	2600      	movs	r6, #0
   10152:	7d81      	ldrb	r1, [r0, #22]
   10154:	2923      	cmp	r1, #35	; 0x23
   10156:	d100      	bne.n	1015a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10158:	b13e      	cbz	r6, 1016a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   1015a:	2500      	movs	r5, #0
   1015c:	3064      	adds	r0, #100	; 0x64
   1015e:	2108      	movs	r1, #8
   10160:	4682      	mov	sl, r0
   10162:	f7ff fba4 	bl	f8ae <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
   10166:	b110      	cbz	r0, 1016e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10168:	e007      	b.n	1017a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   1016a:	2501      	movs	r5, #1
   1016c:	e7f6      	b.n	1015c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   1016e:	210b      	movs	r1, #11
   10170:	4650      	mov	r0, sl
   10172:	f7ff fb9c 	bl	f8ae <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
   10176:	b900      	cbnz	r0, 1017a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10178:	b17d      	cbz	r5, 1019a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   1017a:	a804      	add	r0, sp, #16
   1017c:	9000      	str	r0, [sp, #0]
   1017e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10182:	ab03      	add	r3, sp, #12
   10184:	463a      	mov	r2, r7
   10186:	4641      	mov	r1, r8
   10188:	f000 f95a 	bl	10440 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   1018c:	0005      	movs	r5, r0
   1018e:	d105      	bne.n	1019c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10190:	340c      	adds	r4, #12
   10192:	20ff      	movs	r0, #255	; 0xff
   10194:	7060      	strb	r0, [r4, #1]
   10196:	b936      	cbnz	r6, 101a6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10198:	e003      	b.n	101a2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   1019a:	201a      	movs	r0, #26
   1019c:	b006      	add	sp, #24
   1019e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101a2:	7820      	ldrb	r0, [r4, #0]
   101a4:	b108      	cbz	r0, 101aa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   101a6:	253a      	movs	r5, #58	; 0x3a
   101a8:	e012      	b.n	101d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   101aa:	f884 9000 	strb.w	r9, [r4]
   101ae:	f89d 000c 	ldrb.w	r0, [sp, #12]
   101b2:	70a0      	strb	r0, [r4, #2]
   101b4:	f89d 1010 	ldrb.w	r1, [sp, #16]
   101b8:	70e1      	strb	r1, [r4, #3]
   101ba:	f88d 0000 	strb.w	r0, [sp]
   101be:	f88d 1001 	strb.w	r1, [sp, #1]
   101c2:	88b8      	ldrh	r0, [r7, #4]
   101c4:	f8ad 0002 	strh.w	r0, [sp, #2]
   101c8:	4669      	mov	r1, sp
   101ca:	4640      	mov	r0, r8
   101cc:	f7fd fc53 	bl	da76 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   101d0:	2000      	movs	r0, #0
   101d2:	7060      	strb	r0, [r4, #1]
   101d4:	4628      	mov	r0, r5
   101d6:	e7e1      	b.n	1019c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

000101d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   101d8:	2008      	movs	r0, #8
   101da:	f7fa ba59 	b.w	a690 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

000101de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   101de:	b510      	push	{r4, lr}
   101e0:	f7fd fadc 	bl	d79c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   101e4:	f7f5 fe2e 	bl	5e44 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   101e8:	f7fa fa74 	bl	a6d4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   101ec:	f7fd ff2f 	bl	e04e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   101f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101f4:	f7f9 bfea 	b.w	a1cc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>

000101f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   101f8:	f7f8 b898 	b.w	832c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   101fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10200:	4288      	cmp	r0, r1
   10202:	d303      	bcc.n	1020c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   10204:	f640 0148 	movw	r1, #2120	; 0x848
   10208:	4288      	cmp	r0, r1
   1020a:	d300      	bcc.n	1020e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   1020c:	4608      	mov	r0, r1
   1020e:	b280      	uxth	r0, r0
   10210:	4770      	bx	lr
   10212:	07c1      	lsls	r1, r0, #31
   10214:	d001      	beq.n	1021a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   10216:	2001      	movs	r0, #1
   10218:	4770      	bx	lr
   1021a:	0780      	lsls	r0, r0, #30
   1021c:	d501      	bpl.n	10222 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   1021e:	2002      	movs	r0, #2
   10220:	4770      	bx	lr
   10222:	2000      	movs	r0, #0
   10224:	4770      	bx	lr
   10226:	b510      	push	{r4, lr}
   10228:	2801      	cmp	r0, #1
   1022a:	d006      	beq.n	1023a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   1022c:	2802      	cmp	r0, #2
   1022e:	d004      	beq.n	1023a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10230:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   10234:	2006      	movs	r0, #6
   10236:	f7f4 f999 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1023a:	bd10      	pop	{r4, pc}
   1023c:	b510      	push	{r4, lr}
   1023e:	f7f9 ff43 	bl	a0c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   10242:	b158      	cbz	r0, 1025c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10244:	f7f9 ffe2 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   10248:	4604      	mov	r4, r0
   1024a:	f7fe fa7c 	bl	e746 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1024e:	b918      	cbnz	r0, 10258 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   10250:	4620      	mov	r0, r4
   10252:	f7fe fa6e 	bl	e732 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10256:	b108      	cbz	r0, 1025c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10258:	2000      	movs	r0, #0
   1025a:	bd10      	pop	{r4, pc}
   1025c:	2001      	movs	r0, #1
   1025e:	bd10      	pop	{r4, pc}
   10260:	b570      	push	{r4, r5, r6, lr}
   10262:	460c      	mov	r4, r1
   10264:	4605      	mov	r5, r0
   10266:	b112      	cbz	r2, 1026e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   10268:	291f      	cmp	r1, #31
   1026a:	d80c      	bhi.n	10286 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   1026c:	e016      	b.n	1029c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   1026e:	f7f4 fe57 	bl	4f20 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10272:	42a0      	cmp	r0, r4
   10274:	d201      	bcs.n	1027a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   10276:	2007      	movs	r0, #7
   10278:	bd70      	pop	{r4, r5, r6, pc}
   1027a:	4628      	mov	r0, r5
   1027c:	f7fe fa61 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10280:	b118      	cbz	r0, 1028a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10282:	2c1f      	cmp	r4, #31
   10284:	d901      	bls.n	1028a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10286:	2012      	movs	r0, #18
   10288:	bd70      	pop	{r4, r5, r6, pc}
   1028a:	4628      	mov	r0, r5
   1028c:	f7fe fa62 	bl	e754 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10290:	b130      	cbz	r0, 102a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   10292:	4621      	mov	r1, r4
   10294:	4628      	mov	r0, r5
   10296:	f7fe fa29 	bl	e6ec <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1029a:	b118      	cbz	r0, 102a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   1029c:	2000      	movs	r0, #0
   1029e:	bd70      	pop	{r4, r5, r6, pc}
   102a0:	2042      	movs	r0, #66	; 0x42
   102a2:	bd70      	pop	{r4, r5, r6, pc}
   102a4:	2045      	movs	r0, #69	; 0x45
   102a6:	bd70      	pop	{r4, r5, r6, pc}
   102a8:	b510      	push	{r4, lr}
   102aa:	4604      	mov	r4, r0
   102ac:	7840      	ldrb	r0, [r0, #1]
   102ae:	06c1      	lsls	r1, r0, #27
   102b0:	d51c      	bpl.n	102ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   102b2:	07c0      	lsls	r0, r0, #31
   102b4:	d00b      	beq.n	102ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   102b6:	f7fa f9bf 	bl	a638 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   102ba:	b1b8      	cbz	r0, 102ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   102bc:	7860      	ldrb	r0, [r4, #1]
   102be:	06c1      	lsls	r1, r0, #27
   102c0:	d405      	bmi.n	102ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   102c2:	0700      	lsls	r0, r0, #28
   102c4:	d503      	bpl.n	102ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   102c6:	7d20      	ldrb	r0, [r4, #20]
   102c8:	2802      	cmp	r0, #2
   102ca:	d10f      	bne.n	102ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   102cc:	e010      	b.n	102f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   102ce:	7d20      	ldrb	r0, [r4, #20]
   102d0:	2802      	cmp	r0, #2
   102d2:	d001      	beq.n	102d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   102d4:	7ea0      	ldrb	r0, [r4, #26]
   102d6:	b948      	cbnz	r0, 102ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   102d8:	7860      	ldrb	r0, [r4, #1]
   102da:	0700      	lsls	r0, r0, #28
   102dc:	d408      	bmi.n	102f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   102de:	f8d4 0005 	ldr.w	r0, [r4, #5]
   102e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   102e6:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   102ea:	d201      	bcs.n	102f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   102ec:	2011      	movs	r0, #17
   102ee:	bd10      	pop	{r4, pc}
   102f0:	2000      	movs	r0, #0
   102f2:	bd10      	pop	{r4, pc}
   102f4:	b538      	push	{r3, r4, r5, lr}
   102f6:	4604      	mov	r4, r0
   102f8:	7800      	ldrb	r0, [r0, #0]
   102fa:	28ef      	cmp	r0, #239	; 0xef
   102fc:	d843      	bhi.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   102fe:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10302:	f8ad 0000 	strh.w	r0, [sp]
   10306:	9800      	ldr	r0, [sp, #0]
   10308:	f000 f917 	bl	1053a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x342>
   1030c:	b3a0      	cbz	r0, 10378 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   1030e:	7861      	ldrb	r1, [r4, #1]
   10310:	0708      	lsls	r0, r1, #28
   10312:	d40b      	bmi.n	1032c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   10314:	f8d4 0002 	ldr.w	r0, [r4, #2]
   10318:	f8d4 3005 	ldr.w	r3, [r4, #5]
   1031c:	0a02      	lsrs	r2, r0, #8
   1031e:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   10322:	d830      	bhi.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10324:	2220      	movs	r2, #32
   10326:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   1032a:	d82c      	bhi.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1032c:	7a60      	ldrb	r0, [r4, #9]
   1032e:	b318      	cbz	r0, 10378 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   10330:	2807      	cmp	r0, #7
   10332:	d828      	bhi.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10334:	7aa0      	ldrb	r0, [r4, #10]
   10336:	b128      	cbz	r0, 10344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10338:	2801      	cmp	r0, #1
   1033a:	d003      	beq.n	10344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   1033c:	2802      	cmp	r0, #2
   1033e:	d001      	beq.n	10344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10340:	2803      	cmp	r0, #3
   10342:	d120      	bne.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10344:	074a      	lsls	r2, r1, #29
   10346:	d403      	bmi.n	10350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10348:	2802      	cmp	r0, #2
   1034a:	d001      	beq.n	10350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   1034c:	2803      	cmp	r0, #3
   1034e:	d105      	bne.n	1035c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   10350:	7ae0      	ldrb	r0, [r4, #11]
   10352:	b108      	cbz	r0, 10358 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   10354:	2801      	cmp	r0, #1
   10356:	d116      	bne.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10358:	0748      	lsls	r0, r1, #29
   1035a:	d407      	bmi.n	1036c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   1035c:	7ca0      	ldrb	r0, [r4, #18]
   1035e:	b128      	cbz	r0, 1036c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10360:	2801      	cmp	r0, #1
   10362:	d003      	beq.n	1036c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10364:	2802      	cmp	r0, #2
   10366:	d001      	beq.n	1036c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10368:	2803      	cmp	r0, #3
   1036a:	d10c      	bne.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1036c:	06c8      	lsls	r0, r1, #27
   1036e:	7d20      	ldrb	r0, [r4, #20]
   10370:	d503      	bpl.n	1037a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   10372:	2801      	cmp	r0, #1
   10374:	d107      	bne.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10376:	e002      	b.n	1037e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   10378:	e005      	b.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1037a:	2802      	cmp	r0, #2
   1037c:	d003      	beq.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1037e:	7e20      	ldrb	r0, [r4, #24]
   10380:	b118      	cbz	r0, 1038a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10382:	2801      	cmp	r0, #1
   10384:	d001      	beq.n	1038a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10386:	2012      	movs	r0, #18
   10388:	bd38      	pop	{r3, r4, r5, pc}
   1038a:	2000      	movs	r0, #0
   1038c:	bd38      	pop	{r3, r4, r5, pc}
   1038e:	b510      	push	{r4, lr}
   10390:	0004      	movs	r4, r0
   10392:	d005      	beq.n	103a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10394:	f7fa f98e 	bl	a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10398:	4384      	bics	r4, r0
   1039a:	d001      	beq.n	103a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   1039c:	2000      	movs	r0, #0
   1039e:	bd10      	pop	{r4, pc}
   103a0:	2001      	movs	r0, #1
   103a2:	bd10      	pop	{r4, pc}
   103a4:	28fb      	cmp	r0, #251	; 0xfb
   103a6:	d803      	bhi.n	103b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   103a8:	f640 0048 	movw	r0, #2120	; 0x848
   103ac:	4281      	cmp	r1, r0
   103ae:	d901      	bls.n	103b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   103b0:	2011      	movs	r0, #17
   103b2:	4770      	bx	lr
   103b4:	2000      	movs	r0, #0
   103b6:	4770      	bx	lr
   103b8:	381b      	subs	r0, #27
   103ba:	28e1      	cmp	r0, #225	; 0xe1
   103bc:	d206      	bcs.n	103cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   103be:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   103c2:	d303      	bcc.n	103cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   103c4:	f244 2090 	movw	r0, #17040	; 0x4290
   103c8:	4281      	cmp	r1, r0
   103ca:	d901      	bls.n	103d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   103cc:	2012      	movs	r0, #18
   103ce:	4770      	bx	lr
   103d0:	2000      	movs	r0, #0
   103d2:	4770      	bx	lr
   103d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103d8:	4606      	mov	r6, r0
   103da:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   103de:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   103e2:	4615      	mov	r5, r2
   103e4:	302c      	adds	r0, #44	; 0x2c
   103e6:	f7f7 fb47 	bl	7a78 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   103ea:	4680      	mov	r8, r0
   103ec:	2102      	movs	r1, #2
   103ee:	f7fd fb12 	bl	da16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   103f2:	4287      	cmp	r7, r0
   103f4:	d200      	bcs.n	103f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   103f6:	4638      	mov	r0, r7
   103f8:	4607      	mov	r7, r0
   103fa:	2102      	movs	r1, #2
   103fc:	4640      	mov	r0, r8
   103fe:	f7fd fb0a 	bl	da16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10402:	4284      	cmp	r4, r0
   10404:	d200      	bcs.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   10406:	4620      	mov	r0, r4
   10408:	8831      	ldrh	r1, [r6, #0]
   1040a:	8029      	strh	r1, [r5, #0]
   1040c:	2f1b      	cmp	r7, #27
   1040e:	d913      	bls.n	10438 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   10410:	2ffb      	cmp	r7, #251	; 0xfb
   10412:	d300      	bcc.n	10416 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   10414:	27fb      	movs	r7, #251	; 0xfb
   10416:	806f      	strh	r7, [r5, #2]
   10418:	281b      	cmp	r0, #27
   1041a:	d90f      	bls.n	1043c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   1041c:	28fb      	cmp	r0, #251	; 0xfb
   1041e:	d300      	bcc.n	10422 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   10420:	20fb      	movs	r0, #251	; 0xfb
   10422:	80e8      	strh	r0, [r5, #6]
   10424:	4640      	mov	r0, r8
   10426:	f7ff fee9 	bl	101fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   1042a:	80a8      	strh	r0, [r5, #4]
   1042c:	4640      	mov	r0, r8
   1042e:	f7ff fee5 	bl	101fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10432:	8128      	strh	r0, [r5, #8]
   10434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10438:	271b      	movs	r7, #27
   1043a:	e7ec      	b.n	10416 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   1043c:	201b      	movs	r0, #27
   1043e:	e7f0      	b.n	10422 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   10440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10444:	7890      	ldrb	r0, [r2, #2]
   10446:	9e06      	ldr	r6, [sp, #24]
   10448:	461d      	mov	r5, r3
   1044a:	4614      	mov	r4, r2
   1044c:	b908      	cbnz	r0, 10452 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   1044e:	f7fa f931 	bl	a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10452:	78e4      	ldrb	r4, [r4, #3]
   10454:	4607      	mov	r7, r0
   10456:	b914      	cbnz	r4, 1045e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   10458:	f7fa f92c 	bl	a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1045c:	4604      	mov	r4, r0
   1045e:	b16f      	cbz	r7, 1047c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10460:	b164      	cbz	r4, 1047c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10462:	4638      	mov	r0, r7
   10464:	f7ff fed5 	bl	10212 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10468:	4620      	mov	r0, r4
   1046a:	f7ff fed2 	bl	10212 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1046e:	b12f      	cbz	r7, 1047c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10470:	b124      	cbz	r4, 1047c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10472:	702f      	strb	r7, [r5, #0]
   10474:	7034      	strb	r4, [r6, #0]
   10476:	2000      	movs	r0, #0
   10478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1047c:	2009      	movs	r0, #9
   1047e:	e7fb      	b.n	10478 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   10480:	207f      	movs	r0, #127	; 0x7f
   10482:	f000 b83c 	b.w	104fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   10486:	b508      	push	{r3, lr}
   10488:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
   1048c:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   10490:	f88d 0000 	strb.w	r0, [sp]
   10494:	9800      	ldr	r0, [sp, #0]
   10496:	9000      	str	r0, [sp, #0]
   10498:	f89d 0000 	ldrb.w	r0, [sp]
   1049c:	b100      	cbz	r0, 104a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   1049e:	2001      	movs	r0, #1
   104a0:	1e40      	subs	r0, r0, #1
   104a2:	4208      	tst	r0, r1
   104a4:	d003      	beq.n	104ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   104a6:	2904      	cmp	r1, #4
   104a8:	d001      	beq.n	104ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   104aa:	2001      	movs	r0, #1
   104ac:	bd08      	pop	{r3, pc}
   104ae:	2000      	movs	r0, #0
   104b0:	bd08      	pop	{r3, pc}
   104b2:	b570      	push	{r4, r5, r6, lr}
   104b4:	4605      	mov	r5, r0
   104b6:	f7fe f94d 	bl	e754 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   104ba:	b170      	cbz	r0, 104da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   104bc:	4628      	mov	r0, r5
   104be:	f7fe fafe 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   104c2:	2800      	cmp	r0, #0
   104c4:	d008      	beq.n	104d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   104c6:	4628      	mov	r0, r5
   104c8:	f7fe faf6 	bl	eab8 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   104cc:	4604      	mov	r4, r0
   104ce:	4628      	mov	r0, r5
   104d0:	f7fe facc 	bl	ea6c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   104d4:	b118      	cbz	r0, 104de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   104d6:	200c      	movs	r0, #12
   104d8:	bd70      	pop	{r4, r5, r6, pc}
   104da:	2042      	movs	r0, #66	; 0x42
   104dc:	bd70      	pop	{r4, r5, r6, pc}
   104de:	b164      	cbz	r4, 104fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   104e0:	8820      	ldrh	r0, [r4, #0]
   104e2:	f7fd f928 	bl	d736 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   104e6:	8820      	ldrh	r0, [r4, #0]
   104e8:	2100      	movs	r1, #0
   104ea:	f7f4 fac1 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   104ee:	b120      	cbz	r0, 104fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   104f0:	f241 6154 	movw	r1, #5716	; 0x1654
   104f4:	2039      	movs	r0, #57	; 0x39
   104f6:	f7f4 f839 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104fa:	2000      	movs	r0, #0
   104fc:	bd70      	pop	{r4, r5, r6, pc}
   104fe:	b508      	push	{r3, lr}
   10500:	f640 1288 	movw	r2, #2440	; 0x988
   10504:	4669      	mov	r1, sp
   10506:	f7f3 ff13 	bl	4330 <mpsl_fem_tx_power_split>
   1050a:	bd08      	pop	{r3, pc}
   1050c:	b530      	push	{r4, r5, lr}
   1050e:	f340 0400 	sbfx	r4, r0, #0, #1
   10512:	f340 0040 	sbfx	r0, r0, #1, #1
   10516:	1c40      	adds	r0, r0, #1
   10518:	9d03      	ldr	r5, [sp, #12]
   1051a:	1c64      	adds	r4, r4, #1
   1051c:	d000      	beq.n	10520 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x328>
   1051e:	b119      	cbz	r1, 10528 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x330>
   10520:	b100      	cbz	r0, 10524 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32c>
   10522:	b10a      	cbz	r2, 10528 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x330>
   10524:	b91c      	cbnz	r4, 1052e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   10526:	e001      	b.n	1052c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x334>
   10528:	2011      	movs	r0, #17
   1052a:	bd30      	pop	{r4, r5, pc}
   1052c:	2100      	movs	r1, #0
   1052e:	7019      	strb	r1, [r3, #0]
   10530:	b900      	cbnz	r0, 10534 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33c>
   10532:	2200      	movs	r2, #0
   10534:	702a      	strb	r2, [r5, #0]
   10536:	2000      	movs	r0, #0
   10538:	bd30      	pop	{r4, r5, pc}
   1053a:	b2c0      	uxtb	r0, r0
   1053c:	06c1      	lsls	r1, r0, #27
   1053e:	d40c      	bmi.n	1055a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x362>
   10540:	0681      	lsls	r1, r0, #26
   10542:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10546:	d503      	bpl.n	10550 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x358>
   10548:	b9d1      	cbnz	r1, 10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1054a:	0781      	lsls	r1, r0, #30
   1054c:	d418      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1054e:	e001      	b.n	10554 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35c>
   10550:	2900      	cmp	r1, #0
   10552:	d1fa      	bne.n	1054a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   10554:	0700      	lsls	r0, r0, #28
   10556:	d413      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10558:	e010      	b.n	1057c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x384>
   1055a:	0641      	lsls	r1, r0, #25
   1055c:	d410      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1055e:	0681      	lsls	r1, r0, #26
   10560:	d40e      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10562:	07c1      	lsls	r1, r0, #31
   10564:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10568:	d004      	beq.n	10574 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
   1056a:	2900      	cmp	r1, #0
   1056c:	db02      	blt.n	10574 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
   1056e:	0740      	lsls	r0, r0, #29
   10570:	d404      	bmi.n	1057c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x384>
   10572:	e005      	b.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10574:	0701      	lsls	r1, r0, #28
   10576:	d403      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10578:	0740      	lsls	r0, r0, #29
   1057a:	d401      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1057c:	2001      	movs	r0, #1
   1057e:	4770      	bx	lr
   10580:	2000      	movs	r0, #0
   10582:	4770      	bx	lr
   10584:	b510      	push	{r4, lr}
   10586:	f7f7 fa5b 	bl	7a40 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   1058a:	b110      	cbz	r0, 10592 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   1058c:	f240 110d 	movw	r1, #269	; 0x10d
   10590:	e004      	b.n	1059c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a4>
   10592:	f7f6 fbd5 	bl	6d40 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10596:	b120      	cbz	r0, 105a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   10598:	f44f 7189 	mov.w	r1, #274	; 0x112
   1059c:	2001      	movs	r0, #1
   1059e:	f7f3 ffe5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   105a6:	2001      	movs	r0, #1
   105a8:	f7fc befb 	b.w	d3a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   105ac:	6802      	ldr	r2, [r0, #0]
   105ae:	b912      	cbnz	r2, 105b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   105b0:	6001      	str	r1, [r0, #0]
   105b2:	4770      	bx	lr
   105b4:	4602      	mov	r2, r0
   105b6:	6850      	ldr	r0, [r2, #4]
   105b8:	b108      	cbz	r0, 105be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   105ba:	428a      	cmp	r2, r1
   105bc:	d1fa      	bne.n	105b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   105be:	428a      	cmp	r2, r1
   105c0:	d0f7      	beq.n	105b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   105c2:	6051      	str	r1, [r2, #4]
   105c4:	4770      	bx	lr
   105c6:	b510      	push	{r4, lr}
   105c8:	4604      	mov	r4, r0
   105ca:	e002      	b.n	105d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3da>
   105cc:	6820      	ldr	r0, [r4, #0]
   105ce:	4780      	blx	r0
   105d0:	6864      	ldr	r4, [r4, #4]
   105d2:	2c00      	cmp	r4, #0
   105d4:	d1fa      	bne.n	105cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d4>
   105d6:	bd10      	pop	{r4, pc}
   105d8:	b510      	push	{r4, lr}
   105da:	2000      	movs	r0, #0
   105dc:	f7fc fee1 	bl	d3a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   105e0:	f7f4 fba8 	bl	4d34 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   105e4:	f7f4 fe40 	bl	5268 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   105e8:	f7f4 fff2 	bl	55d0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   105ec:	2800      	cmp	r0, #0
   105ee:	d003      	beq.n	105f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
   105f0:	21ec      	movs	r1, #236	; 0xec
   105f2:	2001      	movs	r0, #1
   105f4:	f7f3 ffba 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105f8:	bd10      	pop	{r4, pc}
   105fa:	b510      	push	{r4, lr}
   105fc:	f7ff ffc2 	bl	10584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   10600:	f7fe fe14 	bl	f22c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10604:	2800      	cmp	r0, #0
   10606:	d004      	beq.n	10612 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
   10608:	f240 1129 	movw	r1, #297	; 0x129
   1060c:	2001      	movs	r0, #1
   1060e:	f7f3 ffad 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10612:	bd10      	pop	{r4, pc}

00010614 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10614:	f7f3 bbd4 	b.w	3dc0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10618:	000b0001 	.word	0x000b0001
   1061c:	000a0002 	.word	0x000a0002
   10620:	00090005 	.word	0x00090005
   10624:	0008000a 	.word	0x0008000a
   10628:	00070014 	.word	0x00070014
   1062c:	0006001e 	.word	0x0006001e
   10630:	00050032 	.word	0x00050032
   10634:	0004004b 	.word	0x0004004b
   10638:	00030064 	.word	0x00030064
   1063c:	00020096 	.word	0x00020096
   10640:	000100fa 	.word	0x000100fa
   10644:	000001f4 	.word	0x000001f4

00010648 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10648:	b510      	push	{r4, lr}
   1064a:	f7fa fbcd 	bl	ade8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   1064e:	f000 f81d 	bl	1068c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10652:	f7fa f8a3 	bl	a79c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1065a:	f7fa b99d 	b.w	a998 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001065e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1065e:	b510      	push	{r4, lr}
   10660:	24c8      	movs	r4, #200	; 0xc8
   10662:	1e64      	subs	r4, r4, #1
   10664:	b2e4      	uxtb	r4, r4
   10666:	f7fa f8b7 	bl	a7d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   1066a:	2802      	cmp	r0, #2
   1066c:	d003      	beq.n	10676 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   1066e:	2801      	cmp	r0, #1
   10670:	d000      	beq.n	10674 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10672:	2000      	movs	r0, #0
   10674:	bd10      	pop	{r4, pc}
   10676:	2c00      	cmp	r4, #0
   10678:	d1f3      	bne.n	10662 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   1067a:	21b1      	movs	r1, #177	; 0xb1
   1067c:	203b      	movs	r0, #59	; 0x3b
   1067e:	f7f3 ff75 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10682:	5840      	ldr	r0, [r0, r1]
   10684:	2800      	cmp	r0, #0
   10686:	d000      	beq.n	1068a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10688:	2001      	movs	r0, #1
   1068a:	4770      	bx	lr

0001068c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1068c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10690:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10694:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10698:	f3bf 8f4f 	dsb	sy
   1069c:	f3bf 8f6f 	isb	sy
   106a0:	f7fa ba14 	b.w	aacc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   106a4:	2800      	cmp	r0, #0
   106a6:	db09      	blt.n	106bc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   106a8:	f000 021f 	and.w	r2, r0, #31
   106ac:	2101      	movs	r1, #1
   106ae:	4091      	lsls	r1, r2
   106b0:	0940      	lsrs	r0, r0, #5
   106b2:	0080      	lsls	r0, r0, #2
   106b4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   106b8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   106bc:	4770      	bx	lr
   106be:	2800      	cmp	r0, #0
   106c0:	db0d      	blt.n	106de <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   106c2:	f000 021f 	and.w	r2, r0, #31
   106c6:	2101      	movs	r1, #1
   106c8:	4091      	lsls	r1, r2
   106ca:	0940      	lsrs	r0, r0, #5
   106cc:	0080      	lsls	r0, r0, #2
   106ce:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   106d2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   106d6:	f3bf 8f4f 	dsb	sy
   106da:	f3bf 8f6f 	isb	sy
   106de:	4770      	bx	lr
   106e0:	5840      	ldr	r0, [r0, r1]
   106e2:	2800      	cmp	r0, #0
   106e4:	d000      	beq.n	106e8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   106e6:	2001      	movs	r0, #1
   106e8:	4770      	bx	lr
   106ea:	5840      	ldr	r0, [r0, r1]
   106ec:	2800      	cmp	r0, #0
   106ee:	d000      	beq.n	106f2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   106f0:	2001      	movs	r0, #1
   106f2:	4770      	bx	lr

000106f4 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   106f4:	b510      	push	{r4, lr}
   106f6:	4604      	mov	r4, r0
   106f8:	4608      	mov	r0, r1
   106fa:	f7fa fc9b 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   106fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10702:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10706:	fbb0 f0f1 	udiv	r0, r0, r1
   1070a:	1a20      	subs	r0, r4, r0
   1070c:	1e80      	subs	r0, r0, #2
   1070e:	bd10      	pop	{r4, pc}

00010710 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10710:	b510      	push	{r4, lr}
   10712:	4604      	mov	r4, r0
   10714:	4608      	mov	r0, r1
   10716:	f7fa fc8d 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1071a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1071e:	fbb0 f0f1 	udiv	r0, r0, r1
   10722:	1a20      	subs	r0, r4, r0
   10724:	bd10      	pop	{r4, pc}
   10726:	ecd8      	.short	0xecd8
   10728:	fcf8f4f0 	.word	0xfcf8f4f0
   1072c:	04030200 	.word	0x04030200
   10730:	08070605 	.word	0x08070605
	...
   10748:	01010101 	.word	0x01010101
   1074c:	02020202 	.word	0x02020202
   10750:	03030303 	.word	0x03030303
   10754:	04040404 	.word	0x04040404
   10758:	05050505 	.word	0x05050505
   1075c:	08070606 	.word	0x08070606
   10760:	0c0b0a09 	.word	0x0c0b0a09
   10764:	0000000d 	.word	0x0000000d
	...
   10778:	01010100 	.word	0x01010100
   1077c:	02020201 	.word	0x02020201
   10780:	03030302 	.word	0x03030302
   10784:	04040403 	.word	0x04040403
   10788:	05050504 	.word	0x05050504
   1078c:	06060605 	.word	0x06060605
   10790:	0908      	.short	0x0908
   10792:	080c      	.short	0x080c
   10794:	010d1702 	.word	0x010d1702
   10798:	09090201 	.word	0x09090201
   1079c:	02060101 	.word	0x02060101
   107a0:	03181809 	.word	0x03181809
   107a4:	09090101 	.word	0x09090101
   107a8:	03050303 	.word	0x03050303
   107ac:	02230102 	.word	0x02230102
   107b0:	10092402 	.word	0x10092402
   107b4:	05050404 	.word	0x05050404
   107b8:	0b040b0b 	.word	0x0b040b0b
   107bc:	0000002b 	.word	0x0000002b

000107c0 <set_event_mask>:
	return 0;
}
#endif /* !defined(CONFIG_BT_BREDR) */

static int set_event_mask(void)
{
   107c0:	b510      	push	{r4, lr}
	struct bt_hci_cp_set_event_mask *ev;
	struct net_buf *buf;
	uint64_t mask = 0U;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   107c2:	2108      	movs	r1, #8
   107c4:	f640 4001 	movw	r0, #3073	; 0xc01
   107c8:	f004 f916 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   107cc:	b1d8      	cbz	r0, 10806 <set_event_mask+0x46>
   107ce:	4604      	mov	r4, r0
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   107d0:	2108      	movs	r1, #8
   107d2:	4408      	add	r0, r1
   107d4:	f00c faec 	bl	1cdb0 <net_buf_simple_add>
   107d8:	4602      	mov	r2, r0
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
   107da:	4b0f      	ldr	r3, [pc, #60]	; (10818 <set_event_mask+0x58>)
   107dc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   107e0:	f013 0f01 	tst.w	r3, #1
   107e4:	d10b      	bne.n	107fe <set_event_mask+0x3e>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   107e6:	480d      	ldr	r0, [pc, #52]	; (1081c <set_event_mask+0x5c>)
   107e8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
		mask |= BT_EVT_MASK_ENCRYPT_CHANGE;
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
	}

	sys_put_le64(mask, ev->events);
   107ec:	f019 fc15 	bl	2a01a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   107f0:	2200      	movs	r2, #0
   107f2:	4621      	mov	r1, r4
   107f4:	f640 4001 	movw	r0, #3073	; 0xc01
   107f8:	f004 f94e 	bl	14a98 <bt_hci_cmd_send_sync>
}
   107fc:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   107fe:	a104      	add	r1, pc, #16	; (adr r1, 10810 <set_event_mask+0x50>)
   10800:	e9d1 0100 	ldrd	r0, r1, [r1]
   10804:	e7f2      	b.n	107ec <set_event_mask+0x2c>
		return -ENOBUFS;
   10806:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1080a:	e7f7      	b.n	107fc <set_event_mask+0x3c>
   1080c:	f3af 8000 	nop.w
   10810:	02008890 	.word	0x02008890
   10814:	20008000 	.word	0x20008000
   10818:	20000380 	.word	0x20000380
   1081c:	02008810 	.word	0x02008810

00010820 <app_battery_cb>:
	return app_button_state;
}

static uint8_t app_battery_val = 0x63;
static uint8_t app_battery_cb(void)
{
   10820:	b510      	push	{r4, lr}
	if(app_battery_val >= 0x64)app_battery_val = 0x00;
   10822:	4b08      	ldr	r3, [pc, #32]	; (10844 <app_battery_cb+0x24>)
   10824:	781b      	ldrb	r3, [r3, #0]
   10826:	2b63      	cmp	r3, #99	; 0x63
   10828:	d902      	bls.n	10830 <app_battery_cb+0x10>
   1082a:	4b06      	ldr	r3, [pc, #24]	; (10844 <app_battery_cb+0x24>)
   1082c:	2200      	movs	r2, #0
   1082e:	701a      	strb	r2, [r3, #0]
	app_battery_val++;
   10830:	4c04      	ldr	r4, [pc, #16]	; (10844 <app_battery_cb+0x24>)
   10832:	7821      	ldrb	r1, [r4, #0]
   10834:	3101      	adds	r1, #1
   10836:	b2c9      	uxtb	r1, r1
   10838:	7021      	strb	r1, [r4, #0]
	printk("app_battery_val ( %d )\n", app_battery_val);
   1083a:	4803      	ldr	r0, [pc, #12]	; (10848 <app_battery_cb+0x28>)
   1083c:	f017 fd96 	bl	2836c <printk>
	return app_battery_val;
}
   10840:	7820      	ldrb	r0, [r4, #0]
   10842:	bd10      	pop	{r4, pc}
   10844:	2000095c 	.word	0x2000095c
   10848:	0002fc88 	.word	0x0002fc88

0001084c <app_button_cb>:
{
   1084c:	b510      	push	{r4, lr}
	printk("app_button_state ( %d )\n", app_button_state);
   1084e:	4c03      	ldr	r4, [pc, #12]	; (1085c <app_button_cb+0x10>)
   10850:	7821      	ldrb	r1, [r4, #0]
   10852:	4803      	ldr	r0, [pc, #12]	; (10860 <app_button_cb+0x14>)
   10854:	f017 fd8a 	bl	2836c <printk>
}
   10858:	7820      	ldrb	r0, [r4, #0]
   1085a:	bd10      	pop	{r4, pc}
   1085c:	200045ea 	.word	0x200045ea
   10860:	0002fca0 	.word	0x0002fca0

00010864 <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
   10864:	b5f0      	push	{r4, r5, r6, r7, lr}
   10866:	b08b      	sub	sp, #44	; 0x2c
   10868:	4604      	mov	r4, r0
   1086a:	460d      	mov	r5, r1
   1086c:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
   1086e:	7803      	ldrb	r3, [r0, #0]
   10870:	2b03      	cmp	r3, #3
   10872:	d82c      	bhi.n	108ce <bt_addr_le_to_str+0x6a>
   10874:	e8df f003 	tbb	[pc, r3]
   10878:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   1087c:	4917      	ldr	r1, [pc, #92]	; (108dc <bt_addr_le_to_str+0x78>)
   1087e:	a807      	add	r0, sp, #28
   10880:	f019 fa0a 	bl	29c98 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   10884:	7963      	ldrb	r3, [r4, #5]
   10886:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10888:	78e1      	ldrb	r1, [r4, #3]
   1088a:	78a0      	ldrb	r0, [r4, #2]
   1088c:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1088e:	f10d 0c1c 	add.w	ip, sp, #28
   10892:	f8cd c014 	str.w	ip, [sp, #20]
   10896:	9704      	str	r7, [sp, #16]
   10898:	9003      	str	r0, [sp, #12]
   1089a:	9102      	str	r1, [sp, #8]
   1089c:	9201      	str	r2, [sp, #4]
   1089e:	9300      	str	r3, [sp, #0]
   108a0:	79a3      	ldrb	r3, [r4, #6]
   108a2:	4a0f      	ldr	r2, [pc, #60]	; (108e0 <bt_addr_le_to_str+0x7c>)
   108a4:	4631      	mov	r1, r6
   108a6:	4628      	mov	r0, r5
   108a8:	f017 fd6e 	bl	28388 <snprintk>
}
   108ac:	b00b      	add	sp, #44	; 0x2c
   108ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   108b0:	490c      	ldr	r1, [pc, #48]	; (108e4 <bt_addr_le_to_str+0x80>)
   108b2:	a807      	add	r0, sp, #28
   108b4:	f019 f9f0 	bl	29c98 <strcpy>
		break;
   108b8:	e7e4      	b.n	10884 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   108ba:	490b      	ldr	r1, [pc, #44]	; (108e8 <bt_addr_le_to_str+0x84>)
   108bc:	a807      	add	r0, sp, #28
   108be:	f019 f9eb 	bl	29c98 <strcpy>
		break;
   108c2:	e7df      	b.n	10884 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   108c4:	4909      	ldr	r1, [pc, #36]	; (108ec <bt_addr_le_to_str+0x88>)
   108c6:	a807      	add	r0, sp, #28
   108c8:	f019 f9e6 	bl	29c98 <strcpy>
		break;
   108cc:	e7da      	b.n	10884 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   108ce:	4a08      	ldr	r2, [pc, #32]	; (108f0 <bt_addr_le_to_str+0x8c>)
   108d0:	210a      	movs	r1, #10
   108d2:	a807      	add	r0, sp, #28
   108d4:	f017 fd58 	bl	28388 <snprintk>
		break;
   108d8:	e7d4      	b.n	10884 <bt_addr_le_to_str+0x20>
   108da:	bf00      	nop
   108dc:	0002fcbc 	.word	0x0002fcbc
   108e0:	0002fcec 	.word	0x0002fcec
   108e4:	0002fcc4 	.word	0x0002fcc4
   108e8:	0002fccc 	.word	0x0002fccc
   108ec:	0002fcd8 	.word	0x0002fcd8
   108f0:	0002fce4 	.word	0x0002fce4

000108f4 <security_changed>:
{
   108f4:	b530      	push	{r4, r5, lr}
   108f6:	b089      	sub	sp, #36	; 0x24
   108f8:	460d      	mov	r5, r1
   108fa:	4614      	mov	r4, r2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   108fc:	f01a fa56 	bl	2adac <bt_conn_get_dst>
   10900:	221e      	movs	r2, #30
   10902:	4669      	mov	r1, sp
   10904:	f7ff ffae 	bl	10864 <bt_addr_le_to_str>
	if (!err) {
   10908:	b934      	cbnz	r4, 10918 <security_changed+0x24>
		printk("Security changed: %s level %u\n", addr, level);
   1090a:	462a      	mov	r2, r5
   1090c:	4669      	mov	r1, sp
   1090e:	4806      	ldr	r0, [pc, #24]	; (10928 <security_changed+0x34>)
   10910:	f017 fd2c 	bl	2836c <printk>
}
   10914:	b009      	add	sp, #36	; 0x24
   10916:	bd30      	pop	{r4, r5, pc}
		printk("Security failed: %s level %u err %d\n", addr, level,
   10918:	4623      	mov	r3, r4
   1091a:	462a      	mov	r2, r5
   1091c:	4669      	mov	r1, sp
   1091e:	4803      	ldr	r0, [pc, #12]	; (1092c <security_changed+0x38>)
   10920:	f017 fd24 	bl	2836c <printk>
}
   10924:	e7f6      	b.n	10914 <security_changed+0x20>
   10926:	bf00      	nop
   10928:	0002fd10 	.word	0x0002fd10
   1092c:	0002fd30 	.word	0x0002fd30

00010930 <pairing_failed>:
{
   10930:	b510      	push	{r4, lr}
   10932:	b088      	sub	sp, #32
   10934:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10936:	f01a fa39 	bl	2adac <bt_conn_get_dst>
   1093a:	221e      	movs	r2, #30
   1093c:	4669      	mov	r1, sp
   1093e:	f7ff ff91 	bl	10864 <bt_addr_le_to_str>
	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
   10942:	4622      	mov	r2, r4
   10944:	4669      	mov	r1, sp
   10946:	4802      	ldr	r0, [pc, #8]	; (10950 <pairing_failed+0x20>)
   10948:	f017 fd10 	bl	2836c <printk>
}
   1094c:	b008      	add	sp, #32
   1094e:	bd10      	pop	{r4, pc}
   10950:	0002fd58 	.word	0x0002fd58

00010954 <pairing_complete>:
{
   10954:	b510      	push	{r4, lr}
   10956:	b088      	sub	sp, #32
   10958:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1095a:	f01a fa27 	bl	2adac <bt_conn_get_dst>
   1095e:	221e      	movs	r2, #30
   10960:	4669      	mov	r1, sp
   10962:	f7ff ff7f 	bl	10864 <bt_addr_le_to_str>
	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
   10966:	4622      	mov	r2, r4
   10968:	4669      	mov	r1, sp
   1096a:	4802      	ldr	r0, [pc, #8]	; (10974 <pairing_complete+0x20>)
   1096c:	f017 fcfe 	bl	2836c <printk>
}
   10970:	b008      	add	sp, #32
   10972:	bd10      	pop	{r4, pc}
   10974:	0002fd7c 	.word	0x0002fd7c

00010978 <auth_cancel>:
{
   10978:	b500      	push	{lr}
   1097a:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1097c:	f01a fa16 	bl	2adac <bt_conn_get_dst>
   10980:	221e      	movs	r2, #30
   10982:	4669      	mov	r1, sp
   10984:	f7ff ff6e 	bl	10864 <bt_addr_le_to_str>
	printk("Pairing cancelled: %s\n", addr);
   10988:	4669      	mov	r1, sp
   1098a:	4803      	ldr	r0, [pc, #12]	; (10998 <auth_cancel+0x20>)
   1098c:	f017 fcee 	bl	2836c <printk>
}
   10990:	b009      	add	sp, #36	; 0x24
   10992:	f85d fb04 	ldr.w	pc, [sp], #4
   10996:	bf00      	nop
   10998:	0002fda0 	.word	0x0002fda0

0001099c <auth_passkey_display>:
{
   1099c:	b510      	push	{r4, lr}
   1099e:	b088      	sub	sp, #32
   109a0:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   109a2:	f01a fa03 	bl	2adac <bt_conn_get_dst>
   109a6:	221e      	movs	r2, #30
   109a8:	4669      	mov	r1, sp
   109aa:	f7ff ff5b 	bl	10864 <bt_addr_le_to_str>
	printk("Passkey for %s: %06u\n", addr, passkey);
   109ae:	4622      	mov	r2, r4
   109b0:	4669      	mov	r1, sp
   109b2:	4802      	ldr	r0, [pc, #8]	; (109bc <auth_passkey_display+0x20>)
   109b4:	f017 fcda 	bl	2836c <printk>
}
   109b8:	b008      	add	sp, #32
   109ba:	bd10      	pop	{r4, pc}
   109bc:	0002fdb8 	.word	0x0002fdb8

000109c0 <disconnected>:
{
   109c0:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   109c2:	4803      	ldr	r0, [pc, #12]	; (109d0 <disconnected+0x10>)
   109c4:	f017 fcd2 	bl	2836c <printk>
	dk_set_led_off(CON_STATUS_LED);
   109c8:	2001      	movs	r0, #1
   109ca:	f01d fb9e 	bl	2e10a <dk_set_led_off>
}
   109ce:	bd08      	pop	{r3, pc}
   109d0:	0002fdd0 	.word	0x0002fdd0

000109d4 <connected>:
{
   109d4:	b508      	push	{r3, lr}
	if (err) {
   109d6:	b931      	cbnz	r1, 109e6 <connected+0x12>
	printk("Connected\n");
   109d8:	4805      	ldr	r0, [pc, #20]	; (109f0 <connected+0x1c>)
   109da:	f017 fcc7 	bl	2836c <printk>
	dk_set_led_on(CON_STATUS_LED);
   109de:	2001      	movs	r0, #1
   109e0:	f01d fb8e 	bl	2e100 <dk_set_led_on>
}
   109e4:	bd08      	pop	{r3, pc}
		printk("Connection failed (err %u)\n", err);
   109e6:	4803      	ldr	r0, [pc, #12]	; (109f4 <connected+0x20>)
   109e8:	f017 fcc0 	bl	2836c <printk>
		return;
   109ec:	e7fa      	b.n	109e4 <connected+0x10>
   109ee:	bf00      	nop
   109f0:	0002fe08 	.word	0x0002fe08
   109f4:	0002fdec 	.word	0x0002fdec

000109f8 <init_button>:
		
	}
}

static int init_button(void)
{
   109f8:	b510      	push	{r4, lr}
	int err;

	err = dk_buttons_init(button_changed);
   109fa:	4806      	ldr	r0, [pc, #24]	; (10a14 <init_button+0x1c>)
   109fc:	f00e fc80 	bl	1f300 <dk_buttons_init>
	if (err) {
   10a00:	4604      	mov	r4, r0
   10a02:	b908      	cbnz	r0, 10a08 <init_button+0x10>
		printk("Cannot init buttons (err: %d)\n", err);
	}

	return err;
}
   10a04:	4620      	mov	r0, r4
   10a06:	bd10      	pop	{r4, pc}
		printk("Cannot init buttons (err: %d)\n", err);
   10a08:	4601      	mov	r1, r0
   10a0a:	4803      	ldr	r0, [pc, #12]	; (10a18 <init_button+0x20>)
   10a0c:	f017 fcae 	bl	2836c <printk>
	return err;
   10a10:	e7f8      	b.n	10a04 <init_button+0xc>
   10a12:	bf00      	nop
   10a14:	00010a1d 	.word	0x00010a1d
   10a18:	0002fe14 	.word	0x0002fe14

00010a1c <button_changed>:
	if (has_changed & USER_BUTTON) {
   10a1c:	f011 0f01 	tst.w	r1, #1
   10a20:	d100      	bne.n	10a24 <button_changed+0x8>
   10a22:	4770      	bx	lr
{
   10a24:	b510      	push	{r4, lr}
		printk("button_changed err ( %d )\n", bt_lbs_send_button_state(user_button_state));
   10a26:	f000 0401 	and.w	r4, r0, #1
   10a2a:	4620      	mov	r0, r4
   10a2c:	f002 f8e8 	bl	12c00 <bt_lbs_send_button_state>
   10a30:	4601      	mov	r1, r0
   10a32:	4803      	ldr	r0, [pc, #12]	; (10a40 <button_changed+0x24>)
   10a34:	f017 fc9a 	bl	2836c <printk>
		app_button_state = user_button_state ? true : false;
   10a38:	4b02      	ldr	r3, [pc, #8]	; (10a44 <button_changed+0x28>)
   10a3a:	701c      	strb	r4, [r3, #0]
}
   10a3c:	bd10      	pop	{r4, pc}
   10a3e:	bf00      	nop
   10a40:	0002fe34 	.word	0x0002fe34
   10a44:	200045ea 	.word	0x200045ea

00010a48 <main>:

void main(void)
{
   10a48:	b530      	push	{r4, r5, lr}
   10a4a:	b089      	sub	sp, #36	; 0x24
	int blink_status = 0;
	int err;

	printk("Starting Bluetooth Peripheral LBS example\n");
   10a4c:	483d      	ldr	r0, [pc, #244]	; (10b44 <main+0xfc>)
   10a4e:	f017 fc8d 	bl	2836c <printk>

	err = dk_leds_init();
   10a52:	f00e fd1d 	bl	1f490 <dk_leds_init>
	if (err) {
   10a56:	2800      	cmp	r0, #0
   10a58:	d14c      	bne.n	10af4 <main+0xac>
		printk("LEDs init failed (err %d)\n", err);
		return;
	}

	err = init_button();
   10a5a:	f7ff ffcd 	bl	109f8 <init_button>
	if (err) {
   10a5e:	4601      	mov	r1, r0
   10a60:	2800      	cmp	r0, #0
   10a62:	d14d      	bne.n	10b00 <main+0xb8>
		printk("Button init failed (err %d)\n", err);
		return;
	}

	if (IS_ENABLED(CONFIG_BT_LBS_SECURITY_ENABLED)) {
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
   10a64:	4838      	ldr	r0, [pc, #224]	; (10b48 <main+0x100>)
   10a66:	f006 fee9 	bl	1783c <bt_conn_auth_cb_register>
		if (err) {
   10a6a:	2800      	cmp	r0, #0
   10a6c:	d14c      	bne.n	10b08 <main+0xc0>
			printk("Failed to register authorization callbacks.\n");
			return;
		}

		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
   10a6e:	4837      	ldr	r0, [pc, #220]	; (10b4c <main+0x104>)
   10a70:	f006 ff0c 	bl	1788c <bt_conn_auth_info_cb_register>
		if (err) {
   10a74:	2800      	cmp	r0, #0
   10a76:	d14b      	bne.n	10b10 <main+0xc8>
			printk("Failed to register authorization info callbacks.\n");
			return;
		}
	}

	err = bt_enable(NULL);
   10a78:	2000      	movs	r0, #0
   10a7a:	f004 ff09 	bl	15890 <bt_enable>
	if (err) {
   10a7e:	4601      	mov	r1, r0
   10a80:	2800      	cmp	r0, #0
   10a82:	d149      	bne.n	10b18 <main+0xd0>
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	printk("Bluetooth initialized\n");
   10a84:	4832      	ldr	r0, [pc, #200]	; (10b50 <main+0x108>)
   10a86:	f017 fc71 	bl	2836c <printk>

	if (IS_ENABLED(CONFIG_SETTINGS)) {
		settings_load();
   10a8a:	f018 fc8c 	bl	293a6 <settings_load>
	}

	err = bt_lbs_init(&lbs_callbacs);
   10a8e:	4831      	ldr	r0, [pc, #196]	; (10b54 <main+0x10c>)
   10a90:	f002 f8ac 	bl	12bec <bt_lbs_init>
	if (err) {
   10a94:	4601      	mov	r1, r0
   10a96:	2800      	cmp	r0, #0
   10a98:	d142      	bne.n	10b20 <main+0xd8>
		printk("Failed to init LBS (err:%d)\n", err);
		return;
	}
	err = bt_ws_init(&ws_callbacs);
   10a9a:	482f      	ldr	r0, [pc, #188]	; (10b58 <main+0x110>)
   10a9c:	f000 f8c8 	bl	10c30 <bt_ws_init>
	if (err) {
   10aa0:	4601      	mov	r1, r0
   10aa2:	2800      	cmp	r0, #0
   10aa4:	d140      	bne.n	10b28 <main+0xe0>
		printk("Failed to init WS (err:%d)\n", err);
		return;
	}
	err = bt_bs_init(&bs_callbacs);
   10aa6:	482d      	ldr	r0, [pc, #180]	; (10b5c <main+0x114>)
   10aa8:	f000 f8f4 	bl	10c94 <bt_bs_init>
	if (err) {
   10aac:	4601      	mov	r1, r0
   10aae:	2800      	cmp	r0, #0
   10ab0:	d13e      	bne.n	10b30 <main+0xe8>
		printk("Failed to init BS (err:%d)\n", err);
		return;
	}

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   10ab2:	ac03      	add	r4, sp, #12
   10ab4:	4d2a      	ldr	r5, [pc, #168]	; (10b60 <main+0x118>)
   10ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10aba:	682b      	ldr	r3, [r5, #0]
   10abc:	6023      	str	r3, [r4, #0]
   10abe:	2301      	movs	r3, #1
   10ac0:	9300      	str	r3, [sp, #0]
   10ac2:	4b28      	ldr	r3, [pc, #160]	; (10b64 <main+0x11c>)
   10ac4:	2202      	movs	r2, #2
   10ac6:	4928      	ldr	r1, [pc, #160]	; (10b68 <main+0x120>)
   10ac8:	a803      	add	r0, sp, #12
   10aca:	f005 fe19 	bl	16700 <bt_le_adv_start>
			      sd, ARRAY_SIZE(sd));
	if (err) {
   10ace:	4604      	mov	r4, r0
   10ad0:	bb90      	cbnz	r0, 10b38 <main+0xf0>
		printk("Advertising failed to start (err %d)\n", err);
		return;
	}

	printk("Advertising successfully started\n");
   10ad2:	4826      	ldr	r0, [pc, #152]	; (10b6c <main+0x124>)
   10ad4:	f017 fc4a 	bl	2836c <printk>

	for (;;) {
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
   10ad8:	3401      	adds	r4, #1
   10ada:	f004 0101 	and.w	r1, r4, #1
   10ade:	bf48      	it	mi
   10ae0:	4249      	negmi	r1, r1
   10ae2:	2000      	movs	r0, #0
   10ae4:	f00e fcf4 	bl	1f4d0 <dk_set_led>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   10ae8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10aec:	2100      	movs	r1, #0
   10aee:	f013 fbaf 	bl	24250 <z_impl_k_sleep>
	for (;;) {
   10af2:	e7f1      	b.n	10ad8 <main+0x90>
   10af4:	4601      	mov	r1, r0
		printk("LEDs init failed (err %d)\n", err);
   10af6:	481e      	ldr	r0, [pc, #120]	; (10b70 <main+0x128>)
   10af8:	f017 fc38 	bl	2836c <printk>
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
   10afc:	b009      	add	sp, #36	; 0x24
   10afe:	bd30      	pop	{r4, r5, pc}
		printk("Button init failed (err %d)\n", err);
   10b00:	481c      	ldr	r0, [pc, #112]	; (10b74 <main+0x12c>)
   10b02:	f017 fc33 	bl	2836c <printk>
		return;
   10b06:	e7f9      	b.n	10afc <main+0xb4>
			printk("Failed to register authorization callbacks.\n");
   10b08:	481b      	ldr	r0, [pc, #108]	; (10b78 <main+0x130>)
   10b0a:	f017 fc2f 	bl	2836c <printk>
			return;
   10b0e:	e7f5      	b.n	10afc <main+0xb4>
			printk("Failed to register authorization info callbacks.\n");
   10b10:	481a      	ldr	r0, [pc, #104]	; (10b7c <main+0x134>)
   10b12:	f017 fc2b 	bl	2836c <printk>
			return;
   10b16:	e7f1      	b.n	10afc <main+0xb4>
		printk("Bluetooth init failed (err %d)\n", err);
   10b18:	4819      	ldr	r0, [pc, #100]	; (10b80 <main+0x138>)
   10b1a:	f017 fc27 	bl	2836c <printk>
		return;
   10b1e:	e7ed      	b.n	10afc <main+0xb4>
		printk("Failed to init LBS (err:%d)\n", err);
   10b20:	4818      	ldr	r0, [pc, #96]	; (10b84 <main+0x13c>)
   10b22:	f017 fc23 	bl	2836c <printk>
		return;
   10b26:	e7e9      	b.n	10afc <main+0xb4>
		printk("Failed to init WS (err:%d)\n", err);
   10b28:	4817      	ldr	r0, [pc, #92]	; (10b88 <main+0x140>)
   10b2a:	f017 fc1f 	bl	2836c <printk>
		return;
   10b2e:	e7e5      	b.n	10afc <main+0xb4>
		printk("Failed to init BS (err:%d)\n", err);
   10b30:	4816      	ldr	r0, [pc, #88]	; (10b8c <main+0x144>)
   10b32:	f017 fc1b 	bl	2836c <printk>
		return;
   10b36:	e7e1      	b.n	10afc <main+0xb4>
		printk("Advertising failed to start (err %d)\n", err);
   10b38:	4601      	mov	r1, r0
   10b3a:	4815      	ldr	r0, [pc, #84]	; (10b90 <main+0x148>)
   10b3c:	f017 fc16 	bl	2836c <printk>
		return;
   10b40:	e7dc      	b.n	10afc <main+0xb4>
   10b42:	bf00      	nop
   10b44:	0002fe50 	.word	0x0002fe50
   10b48:	2000050c 	.word	0x2000050c
   10b4c:	200004fc 	.word	0x200004fc
   10b50:	0002ff3c 	.word	0x0002ff3c
   10b54:	200004f4 	.word	0x200004f4
   10b58:	200004ec 	.word	0x200004ec
   10b5c:	200004e8 	.word	0x200004e8
   10b60:	0002fbe0 	.word	0x0002fbe0
   10b64:	0002fff8 	.word	0x0002fff8
   10b68:	0003000c 	.word	0x0003000c
   10b6c:	0002ffd4 	.word	0x0002ffd4
   10b70:	0002fe7c 	.word	0x0002fe7c
   10b74:	0002fe98 	.word	0x0002fe98
   10b78:	0002feb8 	.word	0x0002feb8
   10b7c:	0002fee8 	.word	0x0002fee8
   10b80:	0002ff1c 	.word	0x0002ff1c
   10b84:	0002ff54 	.word	0x0002ff54
   10b88:	0002ff74 	.word	0x0002ff74
   10b8c:	0002ff90 	.word	0x0002ff90
   10b90:	0002ffac 	.word	0x0002ffac

00010b94 <wslc_ccc_cfg_changed>:
static struct bt_ws_cb        ws_cb;

static void wslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   10b94:	2901      	cmp	r1, #1
   10b96:	bf14      	ite	ne
   10b98:	2100      	movne	r1, #0
   10b9a:	2101      	moveq	r1, #1
   10b9c:	4b01      	ldr	r3, [pc, #4]	; (10ba4 <wslc_ccc_cfg_changed+0x10>)
   10b9e:	7019      	strb	r1, [r3, #0]
}
   10ba0:	4770      	bx	lr
   10ba2:	bf00      	nop
   10ba4:	200045ec 	.word	0x200045ec

00010ba8 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   10ba8:	b510      	push	{r4, lr}
   10baa:	461c      	mov	r4, r3
   10bac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (len != 1U) {
   10bb0:	2c01      	cmp	r4, #1
   10bb2:	d10c      	bne.n	10bce <write_led+0x26>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
   10bb4:	b973      	cbnz	r3, 10bd4 <write_led+0x2c>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (ws_cb.led_cb) {
   10bb6:	4b0a      	ldr	r3, [pc, #40]	; (10be0 <write_led+0x38>)
   10bb8:	681b      	ldr	r3, [r3, #0]
   10bba:	b133      	cbz	r3, 10bca <write_led+0x22>
		uint8_t val = *((uint8_t *)buf);
   10bbc:	7810      	ldrb	r0, [r2, #0]

		if (val == 0x00 || val == 0x01) {
   10bbe:	2801      	cmp	r0, #1
   10bc0:	d80b      	bhi.n	10bda <write_led+0x32>
			ws_cb.led_cb(val ? true : false);
   10bc2:	3800      	subs	r0, #0
   10bc4:	bf18      	it	ne
   10bc6:	2001      	movne	r0, #1
   10bc8:	4798      	blx	r3
			LOG_DBG("Write led: Incorrect value");
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
		}
	}

	return len;
   10bca:	4620      	mov	r0, r4
}
   10bcc:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   10bce:	f06f 000c 	mvn.w	r0, #12
   10bd2:	e7fb      	b.n	10bcc <write_led+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   10bd4:	f06f 0006 	mvn.w	r0, #6
   10bd8:	e7f8      	b.n	10bcc <write_led+0x24>
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   10bda:	f06f 0012 	mvn.w	r0, #18
   10bde:	e7f5      	b.n	10bcc <write_led+0x24>
   10be0:	200022d8 	.word	0x200022d8

00010be4 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
   10be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10be8:	b084      	sub	sp, #16
   10bea:	460c      	mov	r4, r1
	const char *value = attr->user_data;
   10bec:	f8d1 800c 	ldr.w	r8, [r1, #12]

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (ws_cb.button_cb) {
   10bf0:	490d      	ldr	r1, [pc, #52]	; (10c28 <read_button+0x44>)
   10bf2:	6849      	ldr	r1, [r1, #4]
   10bf4:	b1a9      	cbz	r1, 10c22 <read_button+0x3e>
   10bf6:	4605      	mov	r5, r0
   10bf8:	4617      	mov	r7, r2
   10bfa:	461e      	mov	r6, r3
		button_state = ws_cb.button_cb();
   10bfc:	4788      	blx	r1
   10bfe:	4b0b      	ldr	r3, [pc, #44]	; (10c2c <read_button+0x48>)
   10c00:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   10c02:	2301      	movs	r3, #1
   10c04:	9302      	str	r3, [sp, #8]
   10c06:	f8cd 8004 	str.w	r8, [sp, #4]
   10c0a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10c0e:	9300      	str	r3, [sp, #0]
   10c10:	4633      	mov	r3, r6
   10c12:	463a      	mov	r2, r7
   10c14:	4621      	mov	r1, r4
   10c16:	4628      	mov	r0, r5
   10c18:	f01b fa77 	bl	2c10a <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
   10c1c:	b004      	add	sp, #16
   10c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   10c22:	2000      	movs	r0, #0
   10c24:	e7fa      	b.n	10c1c <read_button+0x38>
   10c26:	bf00      	nop
   10c28:	200022d8 	.word	0x200022d8
   10c2c:	200045eb 	.word	0x200045eb

00010c30 <bt_ws_init>:
		    BT_GATT_PERM_READ | BT_GATT_PERM_WRITE),
);

int bt_ws_init(struct bt_ws_cb *callbacks)
{
	if (callbacks) {
   10c30:	b120      	cbz	r0, 10c3c <bt_ws_init+0xc>
		ws_cb.led_cb    = callbacks->led_cb;
   10c32:	6801      	ldr	r1, [r0, #0]
   10c34:	4a02      	ldr	r2, [pc, #8]	; (10c40 <bt_ws_init+0x10>)
   10c36:	6011      	str	r1, [r2, #0]
		ws_cb.button_cb = callbacks->button_cb;
   10c38:	6843      	ldr	r3, [r0, #4]
   10c3a:	6053      	str	r3, [r2, #4]
	}

	return 0;
}
   10c3c:	2000      	movs	r0, #0
   10c3e:	4770      	bx	lr
   10c40:	200022d8 	.word	0x200022d8

00010c44 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
   10c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c48:	b084      	sub	sp, #16
   10c4a:	461f      	mov	r7, r3
	const char *value = attr->user_data;
   10c4c:	f8d1 800c 	ldr.w	r8, [r1, #12]

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (bs_cb.battery_cb) {
   10c50:	4b0e      	ldr	r3, [pc, #56]	; (10c8c <read_button+0x48>)
   10c52:	681b      	ldr	r3, [r3, #0]
   10c54:	b1c3      	cbz	r3, 10c88 <read_button+0x44>
   10c56:	4605      	mov	r5, r0
   10c58:	460c      	mov	r4, r1
   10c5a:	4616      	mov	r6, r2
		button_state = bs_cb.battery_cb();
   10c5c:	4798      	blx	r3
   10c5e:	3800      	subs	r0, #0
   10c60:	bf18      	it	ne
   10c62:	2001      	movne	r0, #1
   10c64:	4b0a      	ldr	r3, [pc, #40]	; (10c90 <read_button+0x4c>)
   10c66:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   10c68:	2301      	movs	r3, #1
   10c6a:	9302      	str	r3, [sp, #8]
   10c6c:	f8cd 8004 	str.w	r8, [sp, #4]
   10c70:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10c74:	9300      	str	r3, [sp, #0]
   10c76:	463b      	mov	r3, r7
   10c78:	4632      	mov	r2, r6
   10c7a:	4621      	mov	r1, r4
   10c7c:	4628      	mov	r0, r5
   10c7e:	f01b fa44 	bl	2c10a <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
   10c82:	b004      	add	sp, #16
   10c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   10c88:	2000      	movs	r0, #0
   10c8a:	e7fa      	b.n	10c82 <read_button+0x3e>
   10c8c:	200022e0 	.word	0x200022e0
   10c90:	200045ed 	.word	0x200045ed

00010c94 <bt_bs_init>:
	// 	    BT_GATT_PERM_READ | BT_GATT_PERM_WRITE),
);

int bt_bs_init(struct bt_bs_cb *callbacks)
{
	if (callbacks) {
   10c94:	b110      	cbz	r0, 10c9c <bt_bs_init+0x8>
		//ws_cb.led_cb    = callbacks->led_cb;
		bs_cb.battery_cb = callbacks->battery_cb;
   10c96:	6802      	ldr	r2, [r0, #0]
   10c98:	4b01      	ldr	r3, [pc, #4]	; (10ca0 <bt_bs_init+0xc>)
   10c9a:	601a      	str	r2, [r3, #0]
	}

	return 0;
}
   10c9c:	2000      	movs	r0, #0
   10c9e:	4770      	bx	lr
   10ca0:	200022e0 	.word	0x200022e0

00010ca4 <crc8_ccitt>:
uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   10ca4:	f04f 0c00 	mov.w	ip, #0
   10ca8:	4594      	cmp	ip, r2
   10caa:	d215      	bcs.n	10cd8 <crc8_ccitt+0x34>
{
   10cac:	b510      	push	{r4, lr}
		val ^= p[i];
   10cae:	f811 300c 	ldrb.w	r3, [r1, ip]
   10cb2:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10cb4:	0903      	lsrs	r3, r0, #4
   10cb6:	4c09      	ldr	r4, [pc, #36]	; (10cdc <crc8_ccitt+0x38>)
   10cb8:	5ce3      	ldrb	r3, [r4, r3]
   10cba:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   10cbe:	fa5f fe83 	uxtb.w	lr, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10cc2:	f3c3 1303 	ubfx	r3, r3, #4, #4
   10cc6:	5ce0      	ldrb	r0, [r4, r3]
   10cc8:	ea80 100e 	eor.w	r0, r0, lr, lsl #4
   10ccc:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   10cce:	f10c 0c01 	add.w	ip, ip, #1
   10cd2:	4594      	cmp	ip, r2
   10cd4:	d3eb      	bcc.n	10cae <crc8_ccitt+0xa>
	}
	return val;
}
   10cd6:	bd10      	pop	{r4, pc}
   10cd8:	4770      	bx	lr
   10cda:	bf00      	nop
   10cdc:	000300f4 	.word	0x000300f4

00010ce0 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   10ce0:	b510      	push	{r4, lr}
   10ce2:	4686      	mov	lr, r0
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
   10ce4:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   10ce6:	2364      	movs	r3, #100	; 0x64
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   10ce8:	e010      	b.n	10d0c <u8_to_dec+0x2c>
		digit = value / divisor;
		if (digit != 0 || divisor == 1 || num_digits != 0) {
			*buf = (char)digit + '0';
   10cea:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   10cee:	f80e cb01 	strb.w	ip, [lr], #1
			buf++;
			buflen--;
   10cf2:	3901      	subs	r1, #1
   10cf4:	b2c9      	uxtb	r1, r1
			num_digits++;
   10cf6:	3001      	adds	r0, #1
   10cf8:	b2c0      	uxtb	r0, r0
		}

		value -= digit * divisor;
   10cfa:	fbb2 f4f3 	udiv	r4, r2, r3
   10cfe:	fb03 2214 	mls	r2, r3, r4, r2
   10d02:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   10d04:	4c09      	ldr	r4, [pc, #36]	; (10d2c <u8_to_dec+0x4c>)
   10d06:	fba4 4303 	umull	r4, r3, r4, r3
   10d0a:	08db      	lsrs	r3, r3, #3
	while (buflen > 0 && divisor > 0) {
   10d0c:	b149      	cbz	r1, 10d22 <u8_to_dec+0x42>
   10d0e:	b143      	cbz	r3, 10d22 <u8_to_dec+0x42>
		digit = value / divisor;
   10d10:	fbb2 fcf3 	udiv	ip, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   10d14:	429a      	cmp	r2, r3
   10d16:	d2e8      	bcs.n	10cea <u8_to_dec+0xa>
   10d18:	2b01      	cmp	r3, #1
   10d1a:	d0e6      	beq.n	10cea <u8_to_dec+0xa>
   10d1c:	2800      	cmp	r0, #0
   10d1e:	d0ec      	beq.n	10cfa <u8_to_dec+0x1a>
   10d20:	e7e3      	b.n	10cea <u8_to_dec+0xa>
	}

	if (buflen) {
   10d22:	b111      	cbz	r1, 10d2a <u8_to_dec+0x4a>
		*buf = '\0';
   10d24:	2300      	movs	r3, #0
   10d26:	f88e 3000 	strb.w	r3, [lr]
	}

	return num_digits;
}
   10d2a:	bd10      	pop	{r4, pc}
   10d2c:	cccccccd 	.word	0xcccccccd

00010d30 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
   10d30:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
   10d32:	4b02      	ldr	r3, [pc, #8]	; (10d3c <char_out+0xc>)
   10d34:	681b      	ldr	r3, [r3, #0]
   10d36:	4798      	blx	r3
}
   10d38:	bd08      	pop	{r3, pc}
   10d3a:	bf00      	nop
   10d3c:	200005a0 	.word	0x200005a0

00010d40 <__printk_hook_install>:
	_char_out = fn;
   10d40:	4b01      	ldr	r3, [pc, #4]	; (10d48 <__printk_hook_install+0x8>)
   10d42:	6018      	str	r0, [r3, #0]
}
   10d44:	4770      	bx	lr
   10d46:	bf00      	nop
   10d48:	200005a0 	.word	0x200005a0

00010d4c <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
   10d4c:	b500      	push	{lr}
   10d4e:	b083      	sub	sp, #12
   10d50:	4602      	mov	r2, r0
   10d52:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   10d54:	2100      	movs	r1, #0
   10d56:	9100      	str	r1, [sp, #0]
   10d58:	4802      	ldr	r0, [pc, #8]	; (10d64 <vprintk+0x18>)
   10d5a:	f000 fcb5 	bl	116c8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   10d5e:	b003      	add	sp, #12
   10d60:	f85d fb04 	ldr.w	pc, [sp], #4
   10d64:	00010d31 	.word	0x00010d31

00010d68 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10d68:	b510      	push	{r4, lr}
   10d6a:	b086      	sub	sp, #24
   10d6c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   10d6e:	9003      	str	r0, [sp, #12]
   10d70:	9104      	str	r1, [sp, #16]
   10d72:	2100      	movs	r1, #0
   10d74:	9105      	str	r1, [sp, #20]
   10d76:	9100      	str	r1, [sp, #0]
   10d78:	a903      	add	r1, sp, #12
   10d7a:	4806      	ldr	r0, [pc, #24]	; (10d94 <vsnprintk+0x2c>)
   10d7c:	f000 fca4 	bl	116c8 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   10d80:	9b05      	ldr	r3, [sp, #20]
   10d82:	9a04      	ldr	r2, [sp, #16]
   10d84:	4293      	cmp	r3, r2
   10d86:	da01      	bge.n	10d8c <vsnprintk+0x24>
		str[ctx.count] = '\0';
   10d88:	2200      	movs	r2, #0
   10d8a:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   10d8c:	9805      	ldr	r0, [sp, #20]
   10d8e:	b006      	add	sp, #24
   10d90:	bd10      	pop	{r4, pc}
   10d92:	bf00      	nop
   10d94:	0002833d 	.word	0x0002833d

00010d98 <sys_heap_free>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
	if (mem == NULL) {
   10d98:	b381      	cbz	r1, 10dfc <sys_heap_free+0x64>
{
   10d9a:	b510      	push	{r4, lr}
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   10d9c:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   10d9e:	4620      	mov	r0, r4
   10da0:	f017 fb8b 	bl	284ba <mem_to_chunkid>
   10da4:	4601      	mov	r1, r0

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   10da6:	00c2      	lsls	r2, r0, #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   10da8:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
   10dac:	885b      	ldrh	r3, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   10dae:	f013 0f01 	tst.w	r3, #1
   10db2:	d00f      	beq.n	10dd4 <sys_heap_free+0x3c>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   10db4:	eb00 0353 	add.w	r3, r0, r3, lsr #1
		return ((uint16_t *)cmem)[f];
   10db8:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   10dbc:	1a1b      	subs	r3, r3, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   10dbe:	4299      	cmp	r1, r3
   10dc0:	d112      	bne.n	10de8 <sys_heap_free+0x50>
	void *cmem = &buf[c];
   10dc2:	18a3      	adds	r3, r4, r2
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10dc4:	885a      	ldrh	r2, [r3, #2]
   10dc6:	f022 0201 	bic.w	r2, r2, #1
   10dca:	805a      	strh	r2, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   10dcc:	4620      	mov	r0, r4
   10dce:	f017 fb90 	bl	284f2 <free_chunk>
}
   10dd2:	bd10      	pop	{r4, pc}
	__ASSERT(chunk_used(h, c),
   10dd4:	4c0a      	ldr	r4, [pc, #40]	; (10e00 <sys_heap_free+0x68>)
   10dd6:	22af      	movs	r2, #175	; 0xaf
   10dd8:	4621      	mov	r1, r4
   10dda:	480a      	ldr	r0, [pc, #40]	; (10e04 <sys_heap_free+0x6c>)
   10ddc:	f017 ff17 	bl	28c0e <assert_print>
   10de0:	21af      	movs	r1, #175	; 0xaf
   10de2:	4620      	mov	r0, r4
   10de4:	f017 ff0c 	bl	28c00 <assert_post_action>
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   10de8:	4c05      	ldr	r4, [pc, #20]	; (10e00 <sys_heap_free+0x68>)
   10dea:	22b7      	movs	r2, #183	; 0xb7
   10dec:	4621      	mov	r1, r4
   10dee:	4805      	ldr	r0, [pc, #20]	; (10e04 <sys_heap_free+0x6c>)
   10df0:	f017 ff0d 	bl	28c0e <assert_print>
   10df4:	21b7      	movs	r1, #183	; 0xb7
   10df6:	4620      	mov	r0, r4
   10df8:	f017 ff02 	bl	28c00 <assert_post_action>
   10dfc:	4770      	bx	lr
   10dfe:	bf00      	nop
   10e00:	00030104 	.word	0x00030104
   10e04:	00030128 	.word	0x00030128

00010e08 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   10e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10e0c:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   10e0e:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   10e10:	424b      	negs	r3, r1
   10e12:	400b      	ands	r3, r1
	if (align != rew) {
   10e14:	f101 39ff 	add.w	r9, r1, #4294967295
   10e18:	ea19 0901 	ands.w	r9, r9, r1
   10e1c:	d004      	beq.n	10e28 <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   10e1e:	2b03      	cmp	r3, #3
   10e20:	d84a      	bhi.n	10eb8 <sys_heap_aligned_alloc+0xb0>
		align -= rew;
   10e22:	464c      	mov	r4, r9
	rew = align & -align;
   10e24:	4699      	mov	r9, r3
   10e26:	e003      	b.n	10e30 <sys_heap_aligned_alloc+0x28>
   10e28:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   10e2a:	2904      	cmp	r1, #4
   10e2c:	d93f      	bls.n	10eae <sys_heap_aligned_alloc+0xa6>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   10e2e:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10e30:	1e62      	subs	r2, r4, #1
   10e32:	4222      	tst	r2, r4
   10e34:	d144      	bne.n	10ec0 <sys_heap_aligned_alloc+0xb8>

	if (bytes == 0 || size_too_big(h, bytes)) {
   10e36:	2d00      	cmp	r5, #0
   10e38:	d062      	beq.n	10f00 <sys_heap_aligned_alloc+0xf8>
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   10e3a:	68b2      	ldr	r2, [r6, #8]
   10e3c:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   10e40:	d961      	bls.n	10f06 <sys_heap_aligned_alloc+0xfe>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   10e42:	1961      	adds	r1, r4, r5
   10e44:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10e46:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   10e48:	08c9      	lsrs	r1, r1, #3
   10e4a:	4630      	mov	r0, r6
   10e4c:	f017 fb82 	bl	28554 <alloc_chunk>

	if (c0 == 0) {
   10e50:	4607      	mov	r7, r0
   10e52:	2800      	cmp	r0, #0
   10e54:	d05a      	beq.n	10f0c <sys_heap_aligned_alloc+0x104>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   10e56:	4601      	mov	r1, r0
   10e58:	4630      	mov	r0, r6
   10e5a:	f017 faad 	bl	283b8 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   10e5e:	eb00 0809 	add.w	r8, r0, r9
   10e62:	44a0      	add	r8, r4
   10e64:	f108 38ff 	add.w	r8, r8, #4294967295
   10e68:	4264      	negs	r4, r4
   10e6a:	ea08 0804 	and.w	r8, r8, r4
   10e6e:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10e72:	eb08 0405 	add.w	r4, r8, r5
   10e76:	3407      	adds	r4, #7
   10e78:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   10e7c:	4641      	mov	r1, r8
   10e7e:	4630      	mov	r0, r6
   10e80:	f017 fb1b 	bl	284ba <mem_to_chunkid>
   10e84:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   10e86:	1ba4      	subs	r4, r4, r6
   10e88:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   10e8a:	4287      	cmp	r7, r0
   10e8c:	d324      	bcc.n	10ed8 <sys_heap_aligned_alloc+0xd0>
	void *cmem = &buf[c];
   10e8e:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   10e90:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   10e94:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   10e96:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   10e9a:	429c      	cmp	r4, r3
   10e9c:	d326      	bcc.n	10eec <sys_heap_aligned_alloc+0xe4>
	void *cmem = &buf[c];
   10e9e:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10ea0:	8873      	ldrh	r3, [r6, #2]
   10ea2:	f043 0301 	orr.w	r3, r3, #1
   10ea6:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   10ea8:	4640      	mov	r0, r8
   10eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   10eae:	4611      	mov	r1, r2
   10eb0:	f017 fb8b 	bl	285ca <sys_heap_alloc>
   10eb4:	4680      	mov	r8, r0
   10eb6:	e7f7      	b.n	10ea8 <sys_heap_aligned_alloc+0xa0>
		align -= rew;
   10eb8:	464c      	mov	r4, r9
	rew = align & -align;
   10eba:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   10ebc:	2304      	movs	r3, #4
   10ebe:	e7b7      	b.n	10e30 <sys_heap_aligned_alloc+0x28>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10ec0:	4c14      	ldr	r4, [pc, #80]	; (10f14 <sys_heap_aligned_alloc+0x10c>)
   10ec2:	f44f 72a2 	mov.w	r2, #324	; 0x144
   10ec6:	4621      	mov	r1, r4
   10ec8:	4813      	ldr	r0, [pc, #76]	; (10f18 <sys_heap_aligned_alloc+0x110>)
   10eca:	f017 fea0 	bl	28c0e <assert_print>
   10ece:	f44f 71a2 	mov.w	r1, #324	; 0x144
   10ed2:	4620      	mov	r0, r4
   10ed4:	f017 fe94 	bl	28c00 <assert_post_action>
		split_chunks(h, c0, c);
   10ed8:	4602      	mov	r2, r0
   10eda:	4639      	mov	r1, r7
   10edc:	4630      	mov	r0, r6
   10ede:	f017 fab5 	bl	2844c <split_chunks>
		free_list_add(h, c0);
   10ee2:	4639      	mov	r1, r7
   10ee4:	4630      	mov	r0, r6
   10ee6:	f017 faf8 	bl	284da <free_list_add>
   10eea:	e7d0      	b.n	10e8e <sys_heap_aligned_alloc+0x86>
		split_chunks(h, c, c_end);
   10eec:	4622      	mov	r2, r4
   10eee:	4629      	mov	r1, r5
   10ef0:	4630      	mov	r0, r6
   10ef2:	f017 faab 	bl	2844c <split_chunks>
		free_list_add(h, c_end);
   10ef6:	4621      	mov	r1, r4
   10ef8:	4630      	mov	r0, r6
   10efa:	f017 faee 	bl	284da <free_list_add>
   10efe:	e7ce      	b.n	10e9e <sys_heap_aligned_alloc+0x96>
		return NULL;
   10f00:	f04f 0800 	mov.w	r8, #0
   10f04:	e7d0      	b.n	10ea8 <sys_heap_aligned_alloc+0xa0>
   10f06:	f04f 0800 	mov.w	r8, #0
   10f0a:	e7cd      	b.n	10ea8 <sys_heap_aligned_alloc+0xa0>
		return NULL;
   10f0c:	f04f 0800 	mov.w	r8, #0
   10f10:	e7ca      	b.n	10ea8 <sys_heap_aligned_alloc+0xa0>
   10f12:	bf00      	nop
   10f14:	00030104 	.word	0x00030104
   10f18:	00030128 	.word	0x00030128

00010f1c <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   10f1c:	b570      	push	{r4, r5, r6, lr}
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   10f1e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   10f22:	d21f      	bcs.n	10f64 <sys_heap_init+0x48>
   10f24:	4603      	mov	r3, r0
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   10f26:	2a04      	cmp	r2, #4
   10f28:	d928      	bls.n	10f7c <sys_heap_init+0x60>
	bytes -= heap_footer_bytes(bytes);
   10f2a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10f2c:	1dc8      	adds	r0, r1, #7
   10f2e:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10f32:	440a      	add	r2, r1
   10f34:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   10f38:	1a12      	subs	r2, r2, r0
   10f3a:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   10f3c:	2a17      	cmp	r2, #23
   10f3e:	d929      	bls.n	10f94 <sys_heap_init+0x78>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   10f40:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   10f42:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   10f44:	2300      	movs	r3, #0
   10f46:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   10f48:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   10f4c:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   10f50:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   10f54:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10f56:	1dce      	adds	r6, r1, #7
   10f58:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   10f5a:	1c4b      	adds	r3, r1, #1
   10f5c:	42ab      	cmp	r3, r5
   10f5e:	d825      	bhi.n	10fac <sys_heap_init+0x90>

	for (int i = 0; i < nb_buckets; i++) {
   10f60:	2300      	movs	r3, #0
   10f62:	e035      	b.n	10fd0 <sys_heap_init+0xb4>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   10f64:	4c2c      	ldr	r4, [pc, #176]	; (11018 <sys_heap_init+0xfc>)
   10f66:	f240 12eb 	movw	r2, #491	; 0x1eb
   10f6a:	4621      	mov	r1, r4
   10f6c:	482b      	ldr	r0, [pc, #172]	; (1101c <sys_heap_init+0x100>)
   10f6e:	f017 fe4e 	bl	28c0e <assert_print>
   10f72:	f240 11eb 	movw	r1, #491	; 0x1eb
   10f76:	4620      	mov	r0, r4
   10f78:	f017 fe42 	bl	28c00 <assert_post_action>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   10f7c:	4c26      	ldr	r4, [pc, #152]	; (11018 <sys_heap_init+0xfc>)
   10f7e:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   10f82:	4621      	mov	r1, r4
   10f84:	4825      	ldr	r0, [pc, #148]	; (1101c <sys_heap_init+0x100>)
   10f86:	f017 fe42 	bl	28c0e <assert_print>
   10f8a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   10f8e:	4620      	mov	r0, r4
   10f90:	f017 fe36 	bl	28c00 <assert_post_action>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   10f94:	4c20      	ldr	r4, [pc, #128]	; (11018 <sys_heap_init+0xfc>)
   10f96:	f240 12fb 	movw	r2, #507	; 0x1fb
   10f9a:	4621      	mov	r1, r4
   10f9c:	481f      	ldr	r0, [pc, #124]	; (1101c <sys_heap_init+0x100>)
   10f9e:	f017 fe36 	bl	28c0e <assert_print>
   10fa2:	f240 11fb 	movw	r1, #507	; 0x1fb
   10fa6:	4620      	mov	r0, r4
   10fa8:	f017 fe2a 	bl	28c00 <assert_post_action>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   10fac:	4c1a      	ldr	r4, [pc, #104]	; (11018 <sys_heap_init+0xfc>)
   10fae:	f44f 7203 	mov.w	r2, #524	; 0x20c
   10fb2:	4621      	mov	r1, r4
   10fb4:	4819      	ldr	r0, [pc, #100]	; (1101c <sys_heap_init+0x100>)
   10fb6:	f017 fe2a 	bl	28c0e <assert_print>
   10fba:	f44f 7103 	mov.w	r1, #524	; 0x20c
   10fbe:	4620      	mov	r0, r4
   10fc0:	f017 fe1e 	bl	28c00 <assert_post_action>
		h->buckets[i].next = 0;
   10fc4:	f103 0c04 	add.w	ip, r3, #4
   10fc8:	2400      	movs	r4, #0
   10fca:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   10fce:	3301      	adds	r3, #1
   10fd0:	4573      	cmp	r3, lr
   10fd2:	dbf7      	blt.n	10fc4 <sys_heap_init+0xa8>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10fd4:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   10fd6:	b2a4      	uxth	r4, r4
   10fd8:	8044      	strh	r4, [r0, #2]
   10fda:	f04f 0c00 	mov.w	ip, #0
   10fde:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10fe2:	f044 0401 	orr.w	r4, r4, #1
   10fe6:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   10fe8:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10fea:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   10fee:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   10ff2:	1ca5      	adds	r5, r4, #2
   10ff4:	f820 e005 	strh.w	lr, [r0, r5]
   10ff8:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   10ffa:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   10ffe:	1c95      	adds	r5, r2, #2
   11000:	f820 c005 	strh.w	ip, [r0, r5]
   11004:	4402      	add	r2, r0
   11006:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11008:	8853      	ldrh	r3, [r2, #2]
   1100a:	f043 0301 	orr.w	r3, r3, #1
   1100e:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   11010:	f017 fa63 	bl	284da <free_list_add>
}
   11014:	bd70      	pop	{r4, r5, r6, pc}
   11016:	bf00      	nop
   11018:	00030104 	.word	0x00030104
   1101c:	00030128 	.word	0x00030128

00011020 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
   11020:	b510      	push	{r4, lr}
   11022:	4604      	mov	r4, r0
   11024:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11026:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
   11028:	2a00      	cmp	r2, #0
   1102a:	db12      	blt.n	11052 <process_complete+0x32>
   1102c:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
   11030:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11032:	2a01      	cmp	r2, #1
   11034:	d919      	bls.n	1106a <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
   11036:	2b04      	cmp	r3, #4
   11038:	d14f      	bne.n	110da <process_complete+0xba>
		/* Any active clients are requests waiting for this
		 * transition to complete.  Queue a RECHECK event to
		 * ensure we don't miss them if we don't unlock to
		 * tell anybody about the completion.
		 */
		set_state(mgr, ONOFF_STATE_OFF);
   1103a:	2100      	movs	r1, #0
   1103c:	f017 faf7 	bl	2862e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   11040:	4620      	mov	r0, r4
   11042:	f017 fb1e 	bl	28682 <process_recheck>
   11046:	b178      	cbz	r0, 11068 <process_complete+0x48>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11048:	8ba3      	ldrh	r3, [r4, #28]
   1104a:	f043 0320 	orr.w	r3, r3, #32
   1104e:	83a3      	strh	r3, [r4, #28]
   11050:	e00a      	b.n	11068 <process_complete+0x48>
		*clients = mgr->clients;
   11052:	e9d0 0100 	ldrd	r0, r1, [r0]
   11056:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1105a:	2300      	movs	r3, #0
   1105c:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   1105e:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   11060:	2101      	movs	r1, #1
   11062:	4620      	mov	r0, r4
   11064:	f017 fae3 	bl	2862e <set_state>
		}
	} else {
		__ASSERT_NO_MSG(false);
	}
}
   11068:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   1106a:	e9d0 0100 	ldrd	r0, r1, [r0]
   1106e:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   11072:	2200      	movs	r2, #0
   11074:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   11076:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   11078:	2b06      	cmp	r3, #6
   1107a:	d00f      	beq.n	1109c <process_complete+0x7c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   1107c:	2b05      	cmp	r3, #5
   1107e:	d120      	bne.n	110c2 <process_complete+0xa2>
			set_state(mgr, ONOFF_STATE_OFF);
   11080:	2100      	movs	r1, #0
   11082:	4620      	mov	r0, r4
   11084:	f017 fad3 	bl	2862e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   11088:	4620      	mov	r0, r4
   1108a:	f017 fafa 	bl	28682 <process_recheck>
   1108e:	2800      	cmp	r0, #0
   11090:	d0ea      	beq.n	11068 <process_complete+0x48>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11092:	8ba3      	ldrh	r3, [r4, #28]
   11094:	f043 0320 	orr.w	r3, r3, #32
   11098:	83a3      	strh	r3, [r4, #28]
   1109a:	e7e5      	b.n	11068 <process_complete+0x48>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1109c:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   110a0:	b153      	cbz	r3, 110b8 <process_complete+0x98>
				mgr->refs += 1U;
   110a2:	8be2      	ldrh	r2, [r4, #30]
   110a4:	3201      	adds	r2, #1
   110a6:	83e2      	strh	r2, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   110a8:	461a      	mov	r2, r3
	return node->next;
   110aa:	681b      	ldr	r3, [r3, #0]
   110ac:	2b00      	cmp	r3, #0
   110ae:	d0f7      	beq.n	110a0 <process_complete+0x80>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   110b0:	2a00      	cmp	r2, #0
   110b2:	d1f5      	bne.n	110a0 <process_complete+0x80>
   110b4:	4613      	mov	r3, r2
   110b6:	e7f3      	b.n	110a0 <process_complete+0x80>
			set_state(mgr, ONOFF_STATE_ON);
   110b8:	2102      	movs	r1, #2
   110ba:	4620      	mov	r0, r4
   110bc:	f017 fab7 	bl	2862e <set_state>
   110c0:	e7e2      	b.n	11088 <process_complete+0x68>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   110c2:	4c0c      	ldr	r4, [pc, #48]	; (110f4 <process_complete+0xd4>)
   110c4:	f240 1209 	movw	r2, #265	; 0x109
   110c8:	4621      	mov	r1, r4
   110ca:	480b      	ldr	r0, [pc, #44]	; (110f8 <process_complete+0xd8>)
   110cc:	f017 fd9f 	bl	28c0e <assert_print>
   110d0:	f240 1109 	movw	r1, #265	; 0x109
   110d4:	4620      	mov	r0, r4
   110d6:	f017 fd93 	bl	28c00 <assert_post_action>
		__ASSERT_NO_MSG(false);
   110da:	4c06      	ldr	r4, [pc, #24]	; (110f4 <process_complete+0xd4>)
   110dc:	f240 121b 	movw	r2, #283	; 0x11b
   110e0:	4621      	mov	r1, r4
   110e2:	4805      	ldr	r0, [pc, #20]	; (110f8 <process_complete+0xd8>)
   110e4:	f017 fd93 	bl	28c0e <assert_print>
   110e8:	f240 111b 	movw	r1, #283	; 0x11b
   110ec:	4620      	mov	r0, r4
   110ee:	f017 fd87 	bl	28c00 <assert_post_action>
   110f2:	bf00      	nop
   110f4:	00030140 	.word	0x00030140
   110f8:	00030128 	.word	0x00030128

000110fc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   110fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11100:	b082      	sub	sp, #8
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11102:	8b83      	ldrh	r3, [r0, #28]
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);

	__ASSERT_NO_MSG(evt != EVT_NOP);
   11104:	b1e1      	cbz	r1, 11140 <process_event+0x44>
   11106:	4604      	mov	r4, r0
   11108:	4615      	mov	r5, r2
   1110a:	f003 0607 	and.w	r6, r3, #7
   1110e:	f003 0208 	and.w	r2, r3, #8
   11112:	4608      	mov	r0, r1

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11114:	b382      	cbz	r2, 11178 <process_event+0x7c>
		if (evt == EVT_COMPLETE) {
   11116:	2901      	cmp	r1, #1
   11118:	d01e      	beq.n	11158 <process_event+0x5c>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   1111a:	2902      	cmp	r1, #2
   1111c:	d120      	bne.n	11160 <process_event+0x64>

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1111e:	f043 0320 	orr.w	r3, r3, #32
   11122:	83a3      	strh	r3, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11124:	f104 0014 	add.w	r0, r4, #20
   11128:	f010 fe8c 	bl	21e44 <z_spin_unlock_valid>
   1112c:	2800      	cmp	r0, #0
   1112e:	f000 8165 	beq.w	113fc <process_event+0x300>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11132:	f385 8811 	msr	BASEPRI, r5
   11136:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1113a:	b002      	add	sp, #8
   1113c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT_NO_MSG(evt != EVT_NOP);
   11140:	4cb3      	ldr	r4, [pc, #716]	; (11410 <process_event+0x314>)
   11142:	f240 1233 	movw	r2, #307	; 0x133
   11146:	4621      	mov	r1, r4
   11148:	48b2      	ldr	r0, [pc, #712]	; (11414 <process_event+0x318>)
   1114a:	f017 fd60 	bl	28c0e <assert_print>
   1114e:	f240 1133 	movw	r1, #307	; 0x133
   11152:	4620      	mov	r0, r4
   11154:	f017 fd54 	bl	28c00 <assert_post_action>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11158:	f043 0310 	orr.w	r3, r3, #16
   1115c:	83a3      	strh	r3, [r4, #28]
   1115e:	e7e1      	b.n	11124 <process_event+0x28>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   11160:	4cab      	ldr	r4, [pc, #684]	; (11410 <process_event+0x314>)
   11162:	f44f 729e 	mov.w	r2, #316	; 0x13c
   11166:	4621      	mov	r1, r4
   11168:	48aa      	ldr	r0, [pc, #680]	; (11414 <process_event+0x318>)
   1116a:	f017 fd50 	bl	28c0e <assert_print>
   1116e:	f44f 719e 	mov.w	r1, #316	; 0x13c
   11172:	4620      	mov	r0, r4
   11174:	f017 fd44 	bl	28c00 <assert_post_action>
	list->head = NULL;
   11178:	2300      	movs	r3, #0
   1117a:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   1117c:	9301      	str	r3, [sp, #4]
}
   1117e:	e058      	b.n	11232 <process_event+0x136>
			evt = process_recheck(mgr);
   11180:	4620      	mov	r0, r4
   11182:	f017 fa7e 	bl	28682 <process_recheck>
   11186:	e056      	b.n	11236 <process_event+0x13a>
			res = mgr->last_res;
   11188:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
   1118c:	464a      	mov	r2, r9
   1118e:	4669      	mov	r1, sp
   11190:	4620      	mov	r0, r4
   11192:	f7ff ff45 	bl	11020 <process_complete>
		onoff_transition_fn transit = NULL;
   11196:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11198:	8ba3      	ldrh	r3, [r4, #28]
   1119a:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1119e:	45b0      	cmp	r8, r6
   111a0:	f000 80ff 	beq.w	113a2 <process_event+0x2a6>
	return list->head;
   111a4:	68a2      	ldr	r2, [r4, #8]
   111a6:	2a00      	cmp	r2, #0
   111a8:	f000 80fb 	beq.w	113a2 <process_event+0x2a6>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   111ac:	2601      	movs	r6, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   111ae:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   111b2:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   111b4:	f104 0a14 	add.w	sl, r4, #20
   111b8:	4650      	mov	r0, sl
   111ba:	f010 fe43 	bl	21e44 <z_spin_unlock_valid>
   111be:	2800      	cmp	r0, #0
   111c0:	f000 80f8 	beq.w	113b4 <process_event+0x2b8>
   111c4:	f385 8811 	msr	BASEPRI, r5
   111c8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   111cc:	2e00      	cmp	r6, #0
   111ce:	f040 80fb 	bne.w	113c8 <process_event+0x2cc>
   111d2:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   111d4:	b12b      	cbz	r3, 111e2 <process_event+0xe6>
				notify_all(mgr, &clients, state, res);
   111d6:	464b      	mov	r3, r9
   111d8:	4642      	mov	r2, r8
   111da:	4669      	mov	r1, sp
   111dc:	4620      	mov	r0, r4
   111de:	f017 fa91 	bl	28704 <notify_all>
			if (transit != NULL) {
   111e2:	b117      	cbz	r7, 111ea <process_event+0xee>
				transit(mgr, transition_complete);
   111e4:	498c      	ldr	r1, [pc, #560]	; (11418 <process_event+0x31c>)
   111e6:	4620      	mov	r0, r4
   111e8:	47b8      	blx	r7
	__asm__ volatile(
   111ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   111ee:	f3ef 8511 	mrs	r5, BASEPRI
   111f2:	f383 8812 	msr	BASEPRI_MAX, r3
   111f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   111fa:	4650      	mov	r0, sl
   111fc:	f010 fe12 	bl	21e24 <z_spin_lock_valid>
   11200:	2800      	cmp	r0, #0
   11202:	f000 80e7 	beq.w	113d4 <process_event+0x2d8>
	z_spin_lock_set_owner(l);
   11206:	4650      	mov	r0, sl
   11208:	f010 fe2c 	bl	21e64 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1120c:	8ba3      	ldrh	r3, [r4, #28]
   1120e:	f023 0308 	bic.w	r3, r3, #8
   11212:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11214:	8ba3      	ldrh	r3, [r4, #28]
   11216:	f013 0f10 	tst.w	r3, #16
   1121a:	f000 80e5 	beq.w	113e8 <process_event+0x2ec>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1121e:	f023 0310 	bic.w	r3, r3, #16
   11222:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   11224:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   11226:	8ba6      	ldrh	r6, [r4, #28]
   11228:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   1122c:	2800      	cmp	r0, #0
   1122e:	f43f af79 	beq.w	11124 <process_event+0x28>
		if (evt == EVT_RECHECK) {
   11232:	2802      	cmp	r0, #2
   11234:	d0a4      	beq.n	11180 <process_event+0x84>
		if (evt == EVT_NOP) {
   11236:	2800      	cmp	r0, #0
   11238:	f43f af74 	beq.w	11124 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   1123c:	3801      	subs	r0, #1
   1123e:	2804      	cmp	r0, #4
   11240:	f200 80a3 	bhi.w	1138a <process_event+0x28e>
   11244:	a301      	add	r3, pc, #4	; (adr r3, 1124c <process_event+0x150>)
   11246:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   1124a:	bf00      	nop
   1124c:	00011189 	.word	0x00011189
   11250:	0001138b 	.word	0x0001138b
   11254:	00011261 	.word	0x00011261
   11258:	000112c3 	.word	0x000112c3
   1125c:	00011327 	.word	0x00011327
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   11260:	b95e      	cbnz	r6, 1127a <process_event+0x17e>
   11262:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11264:	b1ab      	cbz	r3, 11292 <process_event+0x196>
			transit = mgr->transitions->start;
   11266:	6923      	ldr	r3, [r4, #16]
   11268:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   1126a:	b1f7      	cbz	r7, 112aa <process_event+0x1ae>
			set_state(mgr, ONOFF_STATE_TO_ON);
   1126c:	2106      	movs	r1, #6
   1126e:	4620      	mov	r0, r4
   11270:	f017 f9dd 	bl	2862e <set_state>
		res = 0;
   11274:	f04f 0900 	mov.w	r9, #0
   11278:	e78e      	b.n	11198 <process_event+0x9c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1127a:	4c65      	ldr	r4, [pc, #404]	; (11410 <process_event+0x314>)
   1127c:	f44f 72ab 	mov.w	r2, #342	; 0x156
   11280:	4621      	mov	r1, r4
   11282:	4864      	ldr	r0, [pc, #400]	; (11414 <process_event+0x318>)
   11284:	f017 fcc3 	bl	28c0e <assert_print>
   11288:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1128c:	4620      	mov	r0, r4
   1128e:	f017 fcb7 	bl	28c00 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11292:	4c5f      	ldr	r4, [pc, #380]	; (11410 <process_event+0x314>)
   11294:	f240 1257 	movw	r2, #343	; 0x157
   11298:	4621      	mov	r1, r4
   1129a:	485e      	ldr	r0, [pc, #376]	; (11414 <process_event+0x318>)
   1129c:	f017 fcb7 	bl	28c0e <assert_print>
   112a0:	f240 1157 	movw	r1, #343	; 0x157
   112a4:	4620      	mov	r0, r4
   112a6:	f017 fcab 	bl	28c00 <assert_post_action>
			__ASSERT_NO_MSG(transit != NULL);
   112aa:	4c59      	ldr	r4, [pc, #356]	; (11410 <process_event+0x314>)
   112ac:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   112b0:	4621      	mov	r1, r4
   112b2:	4858      	ldr	r0, [pc, #352]	; (11414 <process_event+0x318>)
   112b4:	f017 fcab 	bl	28c0e <assert_print>
   112b8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   112bc:	4620      	mov	r0, r4
   112be:	f017 fc9f 	bl	28c00 <assert_post_action>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   112c2:	2e02      	cmp	r6, #2
   112c4:	d10b      	bne.n	112de <process_event+0x1e2>
			__ASSERT_NO_MSG(mgr->refs == 0);
   112c6:	8be3      	ldrh	r3, [r4, #30]
   112c8:	b9ab      	cbnz	r3, 112f6 <process_event+0x1fa>
			transit = mgr->transitions->stop;
   112ca:	6923      	ldr	r3, [r4, #16]
   112cc:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   112ce:	b1f7      	cbz	r7, 1130e <process_event+0x212>
			set_state(mgr, ONOFF_STATE_TO_OFF);
   112d0:	2104      	movs	r1, #4
   112d2:	4620      	mov	r0, r4
   112d4:	f017 f9ab 	bl	2862e <set_state>
		res = 0;
   112d8:	f04f 0900 	mov.w	r9, #0
   112dc:	e75c      	b.n	11198 <process_event+0x9c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   112de:	4c4c      	ldr	r4, [pc, #304]	; (11410 <process_event+0x314>)
   112e0:	f240 125d 	movw	r2, #349	; 0x15d
   112e4:	4621      	mov	r1, r4
   112e6:	484b      	ldr	r0, [pc, #300]	; (11414 <process_event+0x318>)
   112e8:	f017 fc91 	bl	28c0e <assert_print>
   112ec:	f240 115d 	movw	r1, #349	; 0x15d
   112f0:	4620      	mov	r0, r4
   112f2:	f017 fc85 	bl	28c00 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   112f6:	4c46      	ldr	r4, [pc, #280]	; (11410 <process_event+0x314>)
   112f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
   112fc:	4621      	mov	r1, r4
   112fe:	4845      	ldr	r0, [pc, #276]	; (11414 <process_event+0x318>)
   11300:	f017 fc85 	bl	28c0e <assert_print>
   11304:	f44f 71af 	mov.w	r1, #350	; 0x15e
   11308:	4620      	mov	r0, r4
   1130a:	f017 fc79 	bl	28c00 <assert_post_action>
			__ASSERT_NO_MSG(transit != NULL);
   1130e:	4c40      	ldr	r4, [pc, #256]	; (11410 <process_event+0x314>)
   11310:	f240 1261 	movw	r2, #353	; 0x161
   11314:	4621      	mov	r1, r4
   11316:	483f      	ldr	r0, [pc, #252]	; (11414 <process_event+0x318>)
   11318:	f017 fc79 	bl	28c0e <assert_print>
   1131c:	f240 1161 	movw	r1, #353	; 0x161
   11320:	4620      	mov	r0, r4
   11322:	f017 fc6d 	bl	28c00 <assert_post_action>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11326:	2e01      	cmp	r6, #1
   11328:	d10b      	bne.n	11342 <process_event+0x246>
   1132a:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1132c:	b1ab      	cbz	r3, 1135a <process_event+0x25e>
			transit = mgr->transitions->reset;
   1132e:	6923      	ldr	r3, [r4, #16]
   11330:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   11332:	b1f7      	cbz	r7, 11372 <process_event+0x276>
			set_state(mgr, ONOFF_STATE_RESETTING);
   11334:	2105      	movs	r1, #5
   11336:	4620      	mov	r0, r4
   11338:	f017 f979 	bl	2862e <set_state>
		res = 0;
   1133c:	f04f 0900 	mov.w	r9, #0
   11340:	e72a      	b.n	11198 <process_event+0x9c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11342:	4c33      	ldr	r4, [pc, #204]	; (11410 <process_event+0x314>)
   11344:	f44f 72b2 	mov.w	r2, #356	; 0x164
   11348:	4621      	mov	r1, r4
   1134a:	4832      	ldr	r0, [pc, #200]	; (11414 <process_event+0x318>)
   1134c:	f017 fc5f 	bl	28c0e <assert_print>
   11350:	f44f 71b2 	mov.w	r1, #356	; 0x164
   11354:	4620      	mov	r0, r4
   11356:	f017 fc53 	bl	28c00 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1135a:	4c2d      	ldr	r4, [pc, #180]	; (11410 <process_event+0x314>)
   1135c:	f240 1265 	movw	r2, #357	; 0x165
   11360:	4621      	mov	r1, r4
   11362:	482c      	ldr	r0, [pc, #176]	; (11414 <process_event+0x318>)
   11364:	f017 fc53 	bl	28c0e <assert_print>
   11368:	f240 1165 	movw	r1, #357	; 0x165
   1136c:	4620      	mov	r0, r4
   1136e:	f017 fc47 	bl	28c00 <assert_post_action>
			__ASSERT_NO_MSG(transit != NULL);
   11372:	4c27      	ldr	r4, [pc, #156]	; (11410 <process_event+0x314>)
   11374:	f44f 72b4 	mov.w	r2, #360	; 0x168
   11378:	4621      	mov	r1, r4
   1137a:	4826      	ldr	r0, [pc, #152]	; (11414 <process_event+0x318>)
   1137c:	f017 fc47 	bl	28c0e <assert_print>
   11380:	f44f 71b4 	mov.w	r1, #360	; 0x168
   11384:	4620      	mov	r0, r4
   11386:	f017 fc3b 	bl	28c00 <assert_post_action>
			__ASSERT_NO_MSG(false);
   1138a:	4c21      	ldr	r4, [pc, #132]	; (11410 <process_event+0x314>)
   1138c:	f240 126b 	movw	r2, #363	; 0x16b
   11390:	4621      	mov	r1, r4
   11392:	4820      	ldr	r0, [pc, #128]	; (11414 <process_event+0x318>)
   11394:	f017 fc3b 	bl	28c0e <assert_print>
   11398:	f240 116b 	movw	r1, #363	; 0x16b
   1139c:	4620      	mov	r0, r4
   1139e:	f017 fc2f 	bl	28c00 <assert_post_action>
   113a2:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   113a4:	b10a      	cbz	r2, 113aa <process_event+0x2ae>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   113a6:	2600      	movs	r6, #0
   113a8:	e701      	b.n	111ae <process_event+0xb2>
		    || (transit != NULL)) {
   113aa:	2f00      	cmp	r7, #0
   113ac:	f43f af32 	beq.w	11214 <process_event+0x118>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   113b0:	2600      	movs	r6, #0
   113b2:	e6fc      	b.n	111ae <process_event+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   113b4:	4c19      	ldr	r4, [pc, #100]	; (1141c <process_event+0x320>)
   113b6:	22c2      	movs	r2, #194	; 0xc2
   113b8:	4621      	mov	r1, r4
   113ba:	4816      	ldr	r0, [pc, #88]	; (11414 <process_event+0x318>)
   113bc:	f017 fc27 	bl	28c0e <assert_print>
   113c0:	21c2      	movs	r1, #194	; 0xc2
   113c2:	4620      	mov	r0, r4
   113c4:	f017 fc1c 	bl	28c00 <assert_post_action>
				notify_monitors(mgr, state, res);
   113c8:	464a      	mov	r2, r9
   113ca:	4641      	mov	r1, r8
   113cc:	4620      	mov	r0, r4
   113ce:	f017 f936 	bl	2863e <notify_monitors>
   113d2:	e6fe      	b.n	111d2 <process_event+0xd6>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   113d4:	4c11      	ldr	r4, [pc, #68]	; (1141c <process_event+0x320>)
   113d6:	2294      	movs	r2, #148	; 0x94
   113d8:	4621      	mov	r1, r4
   113da:	480e      	ldr	r0, [pc, #56]	; (11414 <process_event+0x318>)
   113dc:	f017 fc17 	bl	28c0e <assert_print>
   113e0:	2194      	movs	r1, #148	; 0x94
   113e2:	4620      	mov	r0, r4
   113e4:	f017 fc0c 	bl	28c00 <assert_post_action>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   113e8:	f013 0f20 	tst.w	r3, #32
   113ec:	d004      	beq.n	113f8 <process_event+0x2fc>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   113ee:	f023 0320 	bic.w	r3, r3, #32
   113f2:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
   113f4:	2002      	movs	r0, #2
   113f6:	e716      	b.n	11226 <process_event+0x12a>
		evt = EVT_NOP;
   113f8:	2000      	movs	r0, #0
   113fa:	e714      	b.n	11226 <process_event+0x12a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   113fc:	4c07      	ldr	r4, [pc, #28]	; (1141c <process_event+0x320>)
   113fe:	22c2      	movs	r2, #194	; 0xc2
   11400:	4621      	mov	r1, r4
   11402:	4804      	ldr	r0, [pc, #16]	; (11414 <process_event+0x318>)
   11404:	f017 fc03 	bl	28c0e <assert_print>
   11408:	21c2      	movs	r1, #194	; 0xc2
   1140a:	4620      	mov	r0, r4
   1140c:	f017 fbf8 	bl	28c00 <assert_post_action>
   11410:	00030140 	.word	0x00030140
   11414:	00030128 	.word	0x00030128
   11418:	00011421 	.word	0x00011421
   1141c:	00030164 	.word	0x00030164

00011420 <transition_complete>:
{
   11420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11422:	4604      	mov	r4, r0
   11424:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11426:	f100 0614 	add.w	r6, r0, #20
   1142a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1142e:	f3ef 8711 	mrs	r7, BASEPRI
   11432:	f383 8812 	msr	BASEPRI_MAX, r3
   11436:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1143a:	4630      	mov	r0, r6
   1143c:	f010 fcf2 	bl	21e24 <z_spin_lock_valid>
   11440:	b148      	cbz	r0, 11456 <transition_complete+0x36>
	z_spin_lock_set_owner(l);
   11442:	4630      	mov	r0, r6
   11444:	f010 fd0e 	bl	21e64 <z_spin_lock_set_owner>
	mgr->last_res = res;
   11448:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1144a:	463a      	mov	r2, r7
   1144c:	2101      	movs	r1, #1
   1144e:	4620      	mov	r0, r4
   11450:	f7ff fe54 	bl	110fc <process_event>
}
   11454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11456:	4c05      	ldr	r4, [pc, #20]	; (1146c <transition_complete+0x4c>)
   11458:	2294      	movs	r2, #148	; 0x94
   1145a:	4621      	mov	r1, r4
   1145c:	4804      	ldr	r0, [pc, #16]	; (11470 <transition_complete+0x50>)
   1145e:	f017 fbd6 	bl	28c0e <assert_print>
   11462:	2194      	movs	r1, #148	; 0x94
   11464:	4620      	mov	r0, r4
   11466:	f017 fbcb 	bl	28c00 <assert_post_action>
   1146a:	bf00      	nop
   1146c:	00030164 	.word	0x00030164
   11470:	00030128 	.word	0x00030128

00011474 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11478:	4604      	mov	r4, r0
   1147a:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1147c:	f017 f91a 	bl	286b4 <validate_args>

	if (rv < 0) {
   11480:	1e06      	subs	r6, r0, #0
   11482:	db43      	blt.n	1150c <onoff_request+0x98>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11484:	f104 0714 	add.w	r7, r4, #20
   11488:	f04f 0340 	mov.w	r3, #64	; 0x40
   1148c:	f3ef 8a11 	mrs	sl, BASEPRI
   11490:	f383 8812 	msr	BASEPRI_MAX, r3
   11494:	f3bf 8f6f 	isb	sy
   11498:	46d3      	mov	fp, sl
   1149a:	4638      	mov	r0, r7
   1149c:	f010 fcc2 	bl	21e24 <z_spin_lock_valid>
   114a0:	4681      	mov	r9, r0
   114a2:	b1a8      	cbz	r0, 114d0 <onoff_request+0x5c>
	z_spin_lock_set_owner(l);
   114a4:	4638      	mov	r0, r7
   114a6:	f010 fcdd 	bl	21e64 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   114aa:	8ba5      	ldrh	r5, [r4, #28]
   114ac:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   114b0:	8be3      	ldrh	r3, [r4, #30]
   114b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   114b6:	4293      	cmp	r3, r2
   114b8:	d045      	beq.n	11546 <onoff_request+0xd2>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   114ba:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   114bc:	2d02      	cmp	r5, #2
   114be:	d011      	beq.n	114e4 <onoff_request+0x70>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   114c0:	2d06      	cmp	r5, #6
   114c2:	d834      	bhi.n	1152e <onoff_request+0xba>
   114c4:	e8df f005 	tbb	[pc, r5]
   114c8:	3333462c 	.word	0x3333462c
   114cc:	252c      	.short	0x252c
   114ce:	2c          	.byte	0x2c
   114cf:	00          	.byte	0x00
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   114d0:	4c34      	ldr	r4, [pc, #208]	; (115a4 <onoff_request+0x130>)
   114d2:	2294      	movs	r2, #148	; 0x94
   114d4:	4621      	mov	r1, r4
   114d6:	4834      	ldr	r0, [pc, #208]	; (115a8 <onoff_request+0x134>)
   114d8:	f017 fb99 	bl	28c0e <assert_print>
   114dc:	2194      	movs	r1, #148	; 0x94
   114de:	4620      	mov	r0, r4
   114e0:	f017 fb8e 	bl	28c00 <assert_post_action>
		mgr->refs += 1U;
   114e4:	3301      	adds	r3, #1
   114e6:	83e3      	strh	r3, [r4, #30]
	bool start = false;             /* trigger a start transition */
   114e8:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   114ea:	461a      	mov	r2, r3
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   114ec:	b142      	cbz	r2, 11500 <onoff_request+0x8c>
	parent->next = child;
   114ee:	2200      	movs	r2, #0
   114f0:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   114f4:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   114f6:	b3a2      	cbz	r2, 11562 <onoff_request+0xee>
	parent->next = child;
   114f8:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   114fc:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   11500:	b3a3      	cbz	r3, 1156c <onoff_request+0xf8>
		process_event(mgr, EVT_RECHECK, key);
   11502:	4652      	mov	r2, sl
   11504:	2102      	movs	r1, #2
   11506:	4620      	mov	r0, r4
   11508:	f7ff fdf8 	bl	110fc <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1150c:	4630      	mov	r0, r6
   1150e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (state == ONOFF_STATE_ON) {
   11512:	f06f 0685 	mvn.w	r6, #133	; 0x85
   11516:	f04f 0900 	mov.w	r9, #0
   1151a:	464b      	mov	r3, r9
   1151c:	464a      	mov	r2, r9
   1151e:	e7e5      	b.n	114ec <onoff_request+0x78>
		start = (state == ONOFF_STATE_OFF);
   11520:	fab5 f385 	clz	r3, r5
   11524:	095b      	lsrs	r3, r3, #5
		add_client = true;
   11526:	464a      	mov	r2, r9
	bool notify = false;            /* do client notification */
   11528:	f04f 0900 	mov.w	r9, #0
		add_client = true;
   1152c:	e7de      	b.n	114ec <onoff_request+0x78>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1152e:	4c1f      	ldr	r4, [pc, #124]	; (115ac <onoff_request+0x138>)
   11530:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   11534:	4621      	mov	r1, r4
   11536:	481c      	ldr	r0, [pc, #112]	; (115a8 <onoff_request+0x134>)
   11538:	f017 fb69 	bl	28c0e <assert_print>
   1153c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   11540:	4620      	mov	r0, r4
   11542:	f017 fb5d 	bl	28c00 <assert_post_action>
		rv = -EAGAIN;
   11546:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1154a:	f04f 0900 	mov.w	r9, #0
	bool start = false;             /* trigger a start transition */
   1154e:	464b      	mov	r3, r9
	bool add_client = false;        /* add client to pending list */
   11550:	464a      	mov	r2, r9
   11552:	e7cb      	b.n	114ec <onoff_request+0x78>
	if (state == ONOFF_STATE_ON) {
   11554:	f06f 0604 	mvn.w	r6, #4
   11558:	f04f 0900 	mov.w	r9, #0
   1155c:	464b      	mov	r3, r9
   1155e:	464a      	mov	r2, r9
   11560:	e7c4      	b.n	114ec <onoff_request+0x78>
   11562:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
   11566:	f8c4 8000 	str.w	r8, [r4]
}
   1156a:	e7c9      	b.n	11500 <onoff_request+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1156c:	4638      	mov	r0, r7
   1156e:	f010 fc69 	bl	21e44 <z_spin_unlock_valid>
   11572:	b168      	cbz	r0, 11590 <onoff_request+0x11c>
	__asm__ volatile(
   11574:	f38b 8811 	msr	BASEPRI, fp
   11578:	f3bf 8f6f 	isb	sy
		if (notify) {
   1157c:	f1b9 0f00 	cmp.w	r9, #0
   11580:	d0c4      	beq.n	1150c <onoff_request+0x98>
			notify_one(mgr, cli, state, 0);
   11582:	2300      	movs	r3, #0
   11584:	462a      	mov	r2, r5
   11586:	4641      	mov	r1, r8
   11588:	4620      	mov	r0, r4
   1158a:	f017 f8a8 	bl	286de <notify_one>
   1158e:	e7bd      	b.n	1150c <onoff_request+0x98>
   11590:	4c04      	ldr	r4, [pc, #16]	; (115a4 <onoff_request+0x130>)
   11592:	22c2      	movs	r2, #194	; 0xc2
   11594:	4621      	mov	r1, r4
   11596:	4804      	ldr	r0, [pc, #16]	; (115a8 <onoff_request+0x134>)
   11598:	f017 fb39 	bl	28c0e <assert_print>
   1159c:	21c2      	movs	r1, #194	; 0xc2
   1159e:	4620      	mov	r0, r4
   115a0:	f017 fb2e 	bl	28c00 <assert_post_action>
   115a4:	00030164 	.word	0x00030164
   115a8:	00030128 	.word	0x00030128
   115ac:	00030140 	.word	0x00030140

000115b0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   115b0:	b510      	push	{r4, lr}
   115b2:	4603      	mov	r3, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   115b4:	6842      	ldr	r2, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   115b6:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   115ba:	6081      	str	r1, [r0, #8]
	switch (method) {
   115bc:	2a02      	cmp	r2, #2
   115be:	d010      	beq.n	115e2 <sys_notify_finalize+0x32>
   115c0:	2a03      	cmp	r2, #3
   115c2:	d00b      	beq.n	115dc <sys_notify_finalize+0x2c>
   115c4:	2a01      	cmp	r2, #1
   115c6:	d00f      	beq.n	115e8 <sys_notify_finalize+0x38>
		break;
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
   115c8:	4c0c      	ldr	r4, [pc, #48]	; (115fc <sys_notify_finalize+0x4c>)
   115ca:	2245      	movs	r2, #69	; 0x45
   115cc:	4621      	mov	r1, r4
   115ce:	480c      	ldr	r0, [pc, #48]	; (11600 <sys_notify_finalize+0x50>)
   115d0:	f017 fb1d 	bl	28c0e <assert_print>
   115d4:	2145      	movs	r1, #69	; 0x45
   115d6:	4620      	mov	r0, r4
   115d8:	f017 fb12 	bl	28c00 <assert_post_action>
		rv = notify->method.callback;
   115dc:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   115de:	2000      	movs	r0, #0
		break;
   115e0:	e004      	b.n	115ec <sys_notify_finalize+0x3c>
		sig = notify->method.signal;
   115e2:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   115e4:	2400      	movs	r4, #0
		break;
   115e6:	e001      	b.n	115ec <sys_notify_finalize+0x3c>
	switch (method) {
   115e8:	2400      	movs	r4, #0
   115ea:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   115ec:	2200      	movs	r2, #0
   115ee:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   115f0:	b108      	cbz	r0, 115f6 <sys_notify_finalize+0x46>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   115f2:	f013 fd65 	bl	250c0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   115f6:	4620      	mov	r0, r4
   115f8:	bd10      	pop	{r4, pc}
   115fa:	bf00      	nop
   115fc:	00030194 	.word	0x00030194
   11600:	00030128 	.word	0x00030128

00011604 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   11604:	4684      	mov	ip, r0
   11606:	4608      	mov	r0, r1
	bool loop = true;
   11608:	2201      	movs	r2, #1
   1160a:	e026      	b.n	1165a <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   1160c:	f89c 3000 	ldrb.w	r3, [ip]
   11610:	f043 0304 	orr.w	r3, r3, #4
   11614:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   11618:	b1f2      	cbz	r2, 11658 <extract_flags+0x54>
			++sp;
   1161a:	3001      	adds	r0, #1
   1161c:	e01c      	b.n	11658 <extract_flags+0x54>
			conv->flag_plus = true;
   1161e:	f89c 3000 	ldrb.w	r3, [ip]
   11622:	f043 0308 	orr.w	r3, r3, #8
   11626:	f88c 3000 	strb.w	r3, [ip]
			break;
   1162a:	e7f5      	b.n	11618 <extract_flags+0x14>
			conv->flag_space = true;
   1162c:	f89c 3000 	ldrb.w	r3, [ip]
   11630:	f043 0310 	orr.w	r3, r3, #16
   11634:	f88c 3000 	strb.w	r3, [ip]
			break;
   11638:	e7ee      	b.n	11618 <extract_flags+0x14>
			conv->flag_hash = true;
   1163a:	f89c 3000 	ldrb.w	r3, [ip]
   1163e:	f043 0320 	orr.w	r3, r3, #32
   11642:	f88c 3000 	strb.w	r3, [ip]
			break;
   11646:	e7e7      	b.n	11618 <extract_flags+0x14>
			conv->flag_zero = true;
   11648:	f89c 3000 	ldrb.w	r3, [ip]
   1164c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11650:	f88c 3000 	strb.w	r3, [ip]
			break;
   11654:	e7e0      	b.n	11618 <extract_flags+0x14>
		switch (*sp) {
   11656:	2200      	movs	r2, #0
		}
	} while (loop);
   11658:	b342      	cbz	r2, 116ac <extract_flags+0xa8>
		switch (*sp) {
   1165a:	7803      	ldrb	r3, [r0, #0]
   1165c:	3b20      	subs	r3, #32
   1165e:	2b10      	cmp	r3, #16
   11660:	d8f9      	bhi.n	11656 <extract_flags+0x52>
   11662:	a101      	add	r1, pc, #4	; (adr r1, 11668 <extract_flags+0x64>)
   11664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   11668:	0001162d 	.word	0x0001162d
   1166c:	00011657 	.word	0x00011657
   11670:	00011657 	.word	0x00011657
   11674:	0001163b 	.word	0x0001163b
   11678:	00011657 	.word	0x00011657
   1167c:	00011657 	.word	0x00011657
   11680:	00011657 	.word	0x00011657
   11684:	00011657 	.word	0x00011657
   11688:	00011657 	.word	0x00011657
   1168c:	00011657 	.word	0x00011657
   11690:	00011657 	.word	0x00011657
   11694:	0001161f 	.word	0x0001161f
   11698:	00011657 	.word	0x00011657
   1169c:	0001160d 	.word	0x0001160d
   116a0:	00011657 	.word	0x00011657
   116a4:	00011657 	.word	0x00011657
   116a8:	00011649 	.word	0x00011649

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   116ac:	f89c 3000 	ldrb.w	r3, [ip]
   116b0:	f003 0344 	and.w	r3, r3, #68	; 0x44
   116b4:	2b44      	cmp	r3, #68	; 0x44
   116b6:	d000      	beq.n	116ba <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   116b8:	4770      	bx	lr
		conv->flag_zero = false;
   116ba:	f89c 3000 	ldrb.w	r3, [ip]
   116be:	f36f 1386 	bfc	r3, #6, #1
   116c2:	f88c 3000 	strb.w	r3, [ip]
   116c6:	e7f7      	b.n	116b8 <extract_flags+0xb4>

000116c8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   116c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116cc:	b091      	sub	sp, #68	; 0x44
   116ce:	4606      	mov	r6, r0
   116d0:	460d      	mov	r5, r1
   116d2:	4691      	mov	r9, r2
   116d4:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   116d6:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   116d8:	f899 0000 	ldrb.w	r0, [r9]
   116dc:	2800      	cmp	r0, #0
   116de:	f000 82b9 	beq.w	11c54 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
   116e2:	2825      	cmp	r0, #37	; 0x25
   116e4:	d008      	beq.n	116f8 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   116e6:	f109 0901 	add.w	r9, r9, #1
   116ea:	4629      	mov	r1, r5
   116ec:	47b0      	blx	r6
   116ee:	2800      	cmp	r0, #0
   116f0:	f2c0 82b1 	blt.w	11c56 <z_cbvprintf_impl+0x58e>
   116f4:	3401      	adds	r4, #1
			continue;
   116f6:	e7ef      	b.n	116d8 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   116f8:	2300      	movs	r3, #0
   116fa:	9304      	str	r3, [sp, #16]
   116fc:	9305      	str	r3, [sp, #20]
   116fe:	9306      	str	r3, [sp, #24]
   11700:	9307      	str	r3, [sp, #28]
   11702:	9308      	str	r3, [sp, #32]
   11704:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   11706:	4649      	mov	r1, r9
   11708:	a806      	add	r0, sp, #24
   1170a:	f017 f9b9 	bl	28a80 <extract_conversion>
   1170e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   11710:	f89d 3019 	ldrb.w	r3, [sp, #25]
   11714:	f013 0f01 	tst.w	r3, #1
   11718:	f000 8097 	beq.w	1184a <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   1171c:	9b03      	ldr	r3, [sp, #12]
   1171e:	1d1a      	adds	r2, r3, #4
   11720:	9203      	str	r2, [sp, #12]
   11722:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   11724:	2f00      	cmp	r7, #0
   11726:	f2c0 8088 	blt.w	1183a <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   1172a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1172e:	f013 0f04 	tst.w	r3, #4
   11732:	f000 809c 	beq.w	1186e <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   11736:	9b03      	ldr	r3, [sp, #12]
   11738:	1d1a      	adds	r2, r3, #4
   1173a:	9203      	str	r2, [sp, #12]
   1173c:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   11740:	f1ba 0f00 	cmp.w	sl, #0
   11744:	f2c0 808a 	blt.w	1185c <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   11748:	2300      	movs	r3, #0
   1174a:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   1174c:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   1174e:	f89d 301a 	ldrb.w	r3, [sp, #26]
   11752:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   11756:	f89d 1019 	ldrb.w	r1, [sp, #25]
   1175a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   1175e:	2b01      	cmp	r3, #1
   11760:	f000 808e 	beq.w	11880 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   11764:	2b02      	cmp	r3, #2
   11766:	f000 80d3 	beq.w	11910 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   1176a:	2b04      	cmp	r3, #4
   1176c:	f000 8124 	beq.w	119b8 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   11770:	2b03      	cmp	r3, #3
   11772:	f000 813b 	beq.w	119ec <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   11776:	f89d 8018 	ldrb.w	r8, [sp, #24]
   1177a:	f018 0b03 	ands.w	fp, r8, #3
   1177e:	f040 813b 	bne.w	119f8 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   11782:	f89d 301b 	ldrb.w	r3, [sp, #27]
   11786:	3b25      	subs	r3, #37	; 0x25
   11788:	2b53      	cmp	r3, #83	; 0x53
   1178a:	f200 81ca 	bhi.w	11b22 <z_cbvprintf_impl+0x45a>
   1178e:	e8df f013 	tbh	[pc, r3, lsl #1]
   11792:	0140      	.short	0x0140
   11794:	01c801c8 	.word	0x01c801c8
   11798:	01c801c8 	.word	0x01c801c8
   1179c:	01c801c8 	.word	0x01c801c8
   117a0:	01c801c8 	.word	0x01c801c8
   117a4:	01c801c8 	.word	0x01c801c8
   117a8:	01c801c8 	.word	0x01c801c8
   117ac:	01c801c8 	.word	0x01c801c8
   117b0:	01c801c8 	.word	0x01c801c8
   117b4:	01c801c8 	.word	0x01c801c8
   117b8:	01c801c8 	.word	0x01c801c8
   117bc:	01c801c8 	.word	0x01c801c8
   117c0:	01c801c8 	.word	0x01c801c8
   117c4:	01c801c8 	.word	0x01c801c8
   117c8:	01c801c8 	.word	0x01c801c8
   117cc:	01c801c8 	.word	0x01c801c8
   117d0:	01c801c8 	.word	0x01c801c8
   117d4:	01c801c8 	.word	0x01c801c8
   117d8:	01c801c8 	.word	0x01c801c8
   117dc:	01c801c8 	.word	0x01c801c8
   117e0:	01c801c8 	.word	0x01c801c8
   117e4:	01c801c8 	.word	0x01c801c8
   117e8:	01c801c8 	.word	0x01c801c8
   117ec:	01c801c8 	.word	0x01c801c8
   117f0:	01c801c8 	.word	0x01c801c8
   117f4:	01c801c8 	.word	0x01c801c8
   117f8:	01c80181 	.word	0x01c80181
   117fc:	01c801c8 	.word	0x01c801c8
   11800:	01c801c8 	.word	0x01c801c8
   11804:	01c801c8 	.word	0x01c801c8
   11808:	01c801c8 	.word	0x01c801c8
   1180c:	015e01c8 	.word	0x015e01c8
   11810:	01c80167 	.word	0x01c80167
   11814:	01c801c8 	.word	0x01c801c8
   11818:	016701c8 	.word	0x016701c8
   1181c:	01c801c8 	.word	0x01c801c8
   11820:	01c801c8 	.word	0x01c801c8
   11824:	018101bd 	.word	0x018101bd
   11828:	01c801a1 	.word	0x01c801a1
   1182c:	014d01c8 	.word	0x014d01c8
   11830:	018101c8 	.word	0x018101c8
   11834:	01c801c8 	.word	0x01c801c8
   11838:	0181      	.short	0x0181
				conv->flag_dash = true;
   1183a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1183e:	f043 0304 	orr.w	r3, r3, #4
   11842:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   11846:	427f      	negs	r7, r7
   11848:	e76f      	b.n	1172a <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   1184a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   1184e:	2b00      	cmp	r3, #0
   11850:	db02      	blt.n	11858 <z_cbvprintf_impl+0x190>
		int width = -1;
   11852:	f04f 37ff 	mov.w	r7, #4294967295
   11856:	e768      	b.n	1172a <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   11858:	9f07      	ldr	r7, [sp, #28]
   1185a:	e766      	b.n	1172a <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   1185c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   11860:	f36f 0341 	bfc	r3, #1, #1
   11864:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   11868:	f04f 3aff 	mov.w	sl, #4294967295
   1186c:	e76c      	b.n	11748 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   1186e:	f013 0f02 	tst.w	r3, #2
   11872:	d002      	beq.n	1187a <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   11874:	f8dd a020 	ldr.w	sl, [sp, #32]
   11878:	e766      	b.n	11748 <z_cbvprintf_impl+0x80>
		int precision = -1;
   1187a:	f04f 3aff 	mov.w	sl, #4294967295
   1187e:	e763      	b.n	11748 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   11880:	1ecb      	subs	r3, r1, #3
   11882:	2b04      	cmp	r3, #4
   11884:	d804      	bhi.n	11890 <z_cbvprintf_impl+0x1c8>
   11886:	e8df f003 	tbb	[pc, r3]
   1188a:	1d0b      	.short	0x1d0b
   1188c:	3529      	.short	0x3529
   1188e:	35          	.byte	0x35
   1188f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11890:	9b03      	ldr	r3, [sp, #12]
   11892:	1d1a      	adds	r2, r3, #4
   11894:	9203      	str	r2, [sp, #12]
   11896:	681b      	ldr	r3, [r3, #0]
   11898:	17da      	asrs	r2, r3, #31
   1189a:	9304      	str	r3, [sp, #16]
   1189c:	9205      	str	r2, [sp, #20]
				break;
   1189e:	e006      	b.n	118ae <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   118a0:	9b03      	ldr	r3, [sp, #12]
   118a2:	1d1a      	adds	r2, r3, #4
   118a4:	9203      	str	r2, [sp, #12]
   118a6:	681b      	ldr	r3, [r3, #0]
   118a8:	17da      	asrs	r2, r3, #31
   118aa:	9304      	str	r3, [sp, #16]
   118ac:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   118ae:	2901      	cmp	r1, #1
   118b0:	d028      	beq.n	11904 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   118b2:	2902      	cmp	r1, #2
   118b4:	f47f af5f 	bne.w	11776 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   118b8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   118bc:	17da      	asrs	r2, r3, #31
   118be:	9304      	str	r3, [sp, #16]
   118c0:	9205      	str	r2, [sp, #20]
   118c2:	e758      	b.n	11776 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   118c4:	9b03      	ldr	r3, [sp, #12]
   118c6:	3307      	adds	r3, #7
   118c8:	f023 0307 	bic.w	r3, r3, #7
   118cc:	f103 0208 	add.w	r2, r3, #8
   118d0:	9203      	str	r2, [sp, #12]
   118d2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   118d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   118da:	e7e8      	b.n	118ae <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   118dc:	9b03      	ldr	r3, [sp, #12]
   118de:	3307      	adds	r3, #7
   118e0:	f023 0307 	bic.w	r3, r3, #7
   118e4:	f103 0208 	add.w	r2, r3, #8
   118e8:	9203      	str	r2, [sp, #12]
   118ea:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   118ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   118f2:	e7dc      	b.n	118ae <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   118f4:	9b03      	ldr	r3, [sp, #12]
   118f6:	1d1a      	adds	r2, r3, #4
   118f8:	9203      	str	r2, [sp, #12]
   118fa:	681b      	ldr	r3, [r3, #0]
   118fc:	17da      	asrs	r2, r3, #31
				value->sint =
   118fe:	9304      	str	r3, [sp, #16]
   11900:	9205      	str	r2, [sp, #20]
				break;
   11902:	e7d4      	b.n	118ae <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   11904:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   11908:	17da      	asrs	r2, r3, #31
   1190a:	9304      	str	r3, [sp, #16]
   1190c:	9205      	str	r2, [sp, #20]
   1190e:	e732      	b.n	11776 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   11910:	1ecb      	subs	r3, r1, #3
   11912:	2b04      	cmp	r3, #4
   11914:	d804      	bhi.n	11920 <z_cbvprintf_impl+0x258>
   11916:	e8df f003 	tbb	[pc, r3]
   1191a:	1f0b      	.short	0x1f0b
   1191c:	4135      	.short	0x4135
   1191e:	41          	.byte	0x41
   1191f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   11920:	9b03      	ldr	r3, [sp, #12]
   11922:	1d1a      	adds	r2, r3, #4
   11924:	9203      	str	r2, [sp, #12]
   11926:	681b      	ldr	r3, [r3, #0]
   11928:	9304      	str	r3, [sp, #16]
   1192a:	2300      	movs	r3, #0
   1192c:	9305      	str	r3, [sp, #20]
				break;
   1192e:	e01e      	b.n	1196e <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   11930:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   11934:	2b63      	cmp	r3, #99	; 0x63
   11936:	d007      	beq.n	11948 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   11938:	9b03      	ldr	r3, [sp, #12]
   1193a:	1d1a      	adds	r2, r3, #4
   1193c:	9203      	str	r2, [sp, #12]
   1193e:	681b      	ldr	r3, [r3, #0]
   11940:	9304      	str	r3, [sp, #16]
   11942:	2300      	movs	r3, #0
   11944:	9305      	str	r3, [sp, #20]
   11946:	e012      	b.n	1196e <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   11948:	9b03      	ldr	r3, [sp, #12]
   1194a:	1d1a      	adds	r2, r3, #4
   1194c:	9203      	str	r2, [sp, #12]
   1194e:	681b      	ldr	r3, [r3, #0]
   11950:	9304      	str	r3, [sp, #16]
   11952:	2300      	movs	r3, #0
   11954:	9305      	str	r3, [sp, #20]
   11956:	e00a      	b.n	1196e <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   11958:	9b03      	ldr	r3, [sp, #12]
   1195a:	3307      	adds	r3, #7
   1195c:	f023 0307 	bic.w	r3, r3, #7
   11960:	f103 0208 	add.w	r2, r3, #8
   11964:	9203      	str	r2, [sp, #12]
   11966:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1196a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   1196e:	2901      	cmp	r1, #1
   11970:	d01c      	beq.n	119ac <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   11972:	2902      	cmp	r1, #2
   11974:	f47f aeff 	bne.w	11776 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   11978:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1197c:	9304      	str	r3, [sp, #16]
   1197e:	2300      	movs	r3, #0
   11980:	9305      	str	r3, [sp, #20]
   11982:	e6f8      	b.n	11776 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   11984:	9b03      	ldr	r3, [sp, #12]
   11986:	3307      	adds	r3, #7
   11988:	f023 0307 	bic.w	r3, r3, #7
   1198c:	f103 0208 	add.w	r2, r3, #8
   11990:	9203      	str	r2, [sp, #12]
   11992:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   11996:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1199a:	e7e8      	b.n	1196e <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   1199c:	9b03      	ldr	r3, [sp, #12]
   1199e:	1d1a      	adds	r2, r3, #4
   119a0:	9203      	str	r2, [sp, #12]
   119a2:	681b      	ldr	r3, [r3, #0]
				value->uint =
   119a4:	9304      	str	r3, [sp, #16]
   119a6:	2300      	movs	r3, #0
   119a8:	9305      	str	r3, [sp, #20]
				break;
   119aa:	e7e0      	b.n	1196e <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   119ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
   119b0:	9304      	str	r3, [sp, #16]
   119b2:	2300      	movs	r3, #0
   119b4:	9305      	str	r3, [sp, #20]
   119b6:	e6de      	b.n	11776 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   119b8:	2908      	cmp	r1, #8
   119ba:	d00b      	beq.n	119d4 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   119bc:	9b03      	ldr	r3, [sp, #12]
   119be:	3307      	adds	r3, #7
   119c0:	f023 0307 	bic.w	r3, r3, #7
   119c4:	f103 0208 	add.w	r2, r3, #8
   119c8:	9203      	str	r2, [sp, #12]
   119ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   119ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
   119d2:	e6d0      	b.n	11776 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   119d4:	9b03      	ldr	r3, [sp, #12]
   119d6:	3307      	adds	r3, #7
   119d8:	f023 0307 	bic.w	r3, r3, #7
   119dc:	f103 0208 	add.w	r2, r3, #8
   119e0:	9203      	str	r2, [sp, #12]
   119e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   119e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   119ea:	e6c4      	b.n	11776 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   119ec:	9b03      	ldr	r3, [sp, #12]
   119ee:	1d1a      	adds	r2, r3, #4
   119f0:	9203      	str	r2, [sp, #12]
   119f2:	681b      	ldr	r3, [r3, #0]
   119f4:	9304      	str	r3, [sp, #16]
   119f6:	e6be      	b.n	11776 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   119f8:	9f02      	ldr	r7, [sp, #8]
   119fa:	463b      	mov	r3, r7
   119fc:	464a      	mov	r2, r9
   119fe:	4629      	mov	r1, r5
   11a00:	4630      	mov	r0, r6
   11a02:	f017 f8e3 	bl	28bcc <outs>
   11a06:	2800      	cmp	r0, #0
   11a08:	f2c0 8125 	blt.w	11c56 <z_cbvprintf_impl+0x58e>
   11a0c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   11a0e:	46b9      	mov	r9, r7
			continue;
   11a10:	e662      	b.n	116d8 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   11a12:	4629      	mov	r1, r5
   11a14:	2025      	movs	r0, #37	; 0x25
   11a16:	47b0      	blx	r6
   11a18:	2800      	cmp	r0, #0
   11a1a:	f2c0 811c 	blt.w	11c56 <z_cbvprintf_impl+0x58e>
   11a1e:	3401      	adds	r4, #1
		char sign = 0;
   11a20:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   11a22:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   11a26:	f04f 0900 	mov.w	r9, #0
			break;
   11a2a:	e07f      	b.n	11b2c <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
   11a2c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   11a30:	f1ba 0f00 	cmp.w	sl, #0
   11a34:	db07      	blt.n	11a46 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   11a36:	4651      	mov	r1, sl
   11a38:	4648      	mov	r0, r9
   11a3a:	f018 f95a 	bl	29cf2 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   11a3e:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   11a42:	46d8      	mov	r8, fp
			precision = -1;

			break;
   11a44:	e072      	b.n	11b2c <z_cbvprintf_impl+0x464>
				len = strlen(bps);
   11a46:	4648      	mov	r0, r9
   11a48:	f018 f94a 	bl	29ce0 <strlen>
   11a4c:	e7f7      	b.n	11a3e <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11a4e:	9b04      	ldr	r3, [sp, #16]
   11a50:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   11a54:	46d8      	mov	r8, fp
			bpe = buf + 1;
   11a56:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   11a5a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   11a5e:	e065      	b.n	11b2c <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   11a60:	f018 0f08 	tst.w	r8, #8
   11a64:	d105      	bne.n	11a72 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   11a66:	f018 0810 	ands.w	r8, r8, #16
   11a6a:	d004      	beq.n	11a76 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   11a6c:	f04f 0820 	mov.w	r8, #32
   11a70:	e001      	b.n	11a76 <z_cbvprintf_impl+0x3ae>
				sign = '+';
   11a72:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   11a76:	9a04      	ldr	r2, [sp, #16]
   11a78:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   11a7a:	2b00      	cmp	r3, #0
   11a7c:	db02      	blt.n	11a84 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   11a7e:	9204      	str	r2, [sp, #16]
   11a80:	9305      	str	r3, [sp, #20]
   11a82:	e008      	b.n	11a96 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   11a84:	4252      	negs	r2, r2
   11a86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11a8a:	9204      	str	r2, [sp, #16]
   11a8c:	9305      	str	r3, [sp, #20]
				sign = '-';
   11a8e:	f04f 082d 	mov.w	r8, #45	; 0x2d
   11a92:	e000      	b.n	11a96 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   11a94:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   11a96:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   11a9a:	9300      	str	r3, [sp, #0]
   11a9c:	ab0a      	add	r3, sp, #40	; 0x28
   11a9e:	aa06      	add	r2, sp, #24
   11aa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11aa4:	f017 f823 	bl	28aee <encode_uint>
   11aa8:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   11aaa:	f1ba 0f00 	cmp.w	sl, #0
   11aae:	db6c      	blt.n	11b8a <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
   11ab0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   11ab4:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   11ab8:	f89d 2018 	ldrb.w	r2, [sp, #24]
   11abc:	f36f 1286 	bfc	r2, #6, #1
   11ac0:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   11ac4:	459a      	cmp	sl, r3
   11ac6:	d963      	bls.n	11b90 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
   11ac8:	ebaa 0303 	sub.w	r3, sl, r3
   11acc:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   11ace:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   11ad2:	e02b      	b.n	11b2c <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   11ad4:	9804      	ldr	r0, [sp, #16]
   11ad6:	b928      	cbnz	r0, 11ae4 <z_cbvprintf_impl+0x41c>
		char sign = 0;
   11ad8:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   11ada:	f8df a180 	ldr.w	sl, [pc, #384]	; 11c5c <z_cbvprintf_impl+0x594>
			bps = "(nil)";
   11ade:	f1aa 0905 	sub.w	r9, sl, #5
   11ae2:	e023      	b.n	11b2c <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11ae4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   11ae8:	9300      	str	r3, [sp, #0]
   11aea:	ab0a      	add	r3, sp, #40	; 0x28
   11aec:	aa06      	add	r2, sp, #24
   11aee:	2100      	movs	r1, #0
   11af0:	f016 fffd 	bl	28aee <encode_uint>
   11af4:	4681      	mov	r9, r0
				conv->altform_0c = true;
   11af6:	f89d 301a 	ldrb.w	r3, [sp, #26]
   11afa:	f043 0310 	orr.w	r3, r3, #16
   11afe:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   11b02:	2378      	movs	r3, #120	; 0x78
   11b04:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   11b08:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   11b0a:	e7ce      	b.n	11aaa <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   11b0c:	4622      	mov	r2, r4
   11b0e:	9904      	ldr	r1, [sp, #16]
   11b10:	a806      	add	r0, sp, #24
   11b12:	f017 f83c 	bl	28b8e <store_count>
		char sign = 0;
   11b16:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   11b18:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   11b1c:	f04f 0900 	mov.w	r9, #0
			}

			break;
   11b20:	e004      	b.n	11b2c <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
   11b22:	46d8      	mov	r8, fp
   11b24:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   11b28:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   11b2c:	f1b9 0f00 	cmp.w	r9, #0
   11b30:	f000 808d 	beq.w	11c4e <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   11b34:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   11b38:	f1b8 0f00 	cmp.w	r8, #0
   11b3c:	d000      	beq.n	11b40 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
   11b3e:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   11b40:	f89d 201a 	ldrb.w	r2, [sp, #26]
   11b44:	f012 0f10 	tst.w	r2, #16
   11b48:	d025      	beq.n	11b96 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
   11b4a:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   11b4c:	9907      	ldr	r1, [sp, #28]
   11b4e:	440b      	add	r3, r1
		if (conv->pad_fp) {
   11b50:	f012 0f40 	tst.w	r2, #64	; 0x40
   11b54:	d001      	beq.n	11b5a <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
   11b56:	9a08      	ldr	r2, [sp, #32]
   11b58:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   11b5a:	2f00      	cmp	r7, #0
   11b5c:	dd31      	ble.n	11bc2 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
   11b5e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   11b60:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11b64:	f013 0f04 	tst.w	r3, #4
   11b68:	d12b      	bne.n	11bc2 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   11b6a:	f013 0f40 	tst.w	r3, #64	; 0x40
   11b6e:	d017      	beq.n	11ba0 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
   11b70:	f1b8 0f00 	cmp.w	r8, #0
   11b74:	d017      	beq.n	11ba6 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
   11b76:	4629      	mov	r1, r5
   11b78:	4640      	mov	r0, r8
   11b7a:	47b0      	blx	r6
   11b7c:	2800      	cmp	r0, #0
   11b7e:	db6a      	blt.n	11c56 <z_cbvprintf_impl+0x58e>
   11b80:	3401      	adds	r4, #1
						sign = 0;
   11b82:	46d8      	mov	r8, fp
					}
					pad = '0';
   11b84:	f04f 0b30 	mov.w	fp, #48	; 0x30
   11b88:	e00f      	b.n	11baa <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
   11b8a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   11b8e:	e7cd      	b.n	11b2c <z_cbvprintf_impl+0x464>
   11b90:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   11b94:	e7ca      	b.n	11b2c <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
   11b96:	f012 0f08 	tst.w	r2, #8
   11b9a:	d0d7      	beq.n	11b4c <z_cbvprintf_impl+0x484>
			nj_len += 1U;
   11b9c:	3301      	adds	r3, #1
   11b9e:	e7d5      	b.n	11b4c <z_cbvprintf_impl+0x484>
				char pad = ' ';
   11ba0:	f04f 0b20 	mov.w	fp, #32
   11ba4:	e001      	b.n	11baa <z_cbvprintf_impl+0x4e2>
					pad = '0';
   11ba6:	f04f 0b30 	mov.w	fp, #48	; 0x30
   11baa:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   11bac:	1e5f      	subs	r7, r3, #1
   11bae:	2b00      	cmp	r3, #0
   11bb0:	dd07      	ble.n	11bc2 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
   11bb2:	4629      	mov	r1, r5
   11bb4:	4658      	mov	r0, fp
   11bb6:	47b0      	blx	r6
   11bb8:	2800      	cmp	r0, #0
   11bba:	db4c      	blt.n	11c56 <z_cbvprintf_impl+0x58e>
   11bbc:	3401      	adds	r4, #1
				while (width-- > 0) {
   11bbe:	463b      	mov	r3, r7
   11bc0:	e7f4      	b.n	11bac <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   11bc2:	f1b8 0f00 	cmp.w	r8, #0
   11bc6:	d005      	beq.n	11bd4 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
   11bc8:	4629      	mov	r1, r5
   11bca:	4640      	mov	r0, r8
   11bcc:	47b0      	blx	r6
   11bce:	2800      	cmp	r0, #0
   11bd0:	db41      	blt.n	11c56 <z_cbvprintf_impl+0x58e>
   11bd2:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   11bd4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   11bd8:	f3c3 1200 	ubfx	r2, r3, #4, #1
   11bdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   11be0:	431a      	orrs	r2, r3
   11be2:	d005      	beq.n	11bf0 <z_cbvprintf_impl+0x528>
				OUTC('0');
   11be4:	4629      	mov	r1, r5
   11be6:	2030      	movs	r0, #48	; 0x30
   11be8:	47b0      	blx	r6
   11bea:	2800      	cmp	r0, #0
   11bec:	db33      	blt.n	11c56 <z_cbvprintf_impl+0x58e>
   11bee:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   11bf0:	f89d 301a 	ldrb.w	r3, [sp, #26]
   11bf4:	f013 0f10 	tst.w	r3, #16
   11bf8:	d006      	beq.n	11c08 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
   11bfa:	4629      	mov	r1, r5
   11bfc:	f89d 001b 	ldrb.w	r0, [sp, #27]
   11c00:	47b0      	blx	r6
   11c02:	2800      	cmp	r0, #0
   11c04:	db27      	blt.n	11c56 <z_cbvprintf_impl+0x58e>
   11c06:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   11c08:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   11c0a:	f103 38ff 	add.w	r8, r3, #4294967295
   11c0e:	2b00      	cmp	r3, #0
   11c10:	dd07      	ble.n	11c22 <z_cbvprintf_impl+0x55a>
				OUTC('0');
   11c12:	4629      	mov	r1, r5
   11c14:	2030      	movs	r0, #48	; 0x30
   11c16:	47b0      	blx	r6
   11c18:	2800      	cmp	r0, #0
   11c1a:	db1c      	blt.n	11c56 <z_cbvprintf_impl+0x58e>
   11c1c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   11c1e:	4643      	mov	r3, r8
   11c20:	e7f3      	b.n	11c0a <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
   11c22:	4653      	mov	r3, sl
   11c24:	464a      	mov	r2, r9
   11c26:	4629      	mov	r1, r5
   11c28:	4630      	mov	r0, r6
   11c2a:	f016 ffcf 	bl	28bcc <outs>
   11c2e:	2800      	cmp	r0, #0
   11c30:	db11      	blt.n	11c56 <z_cbvprintf_impl+0x58e>
   11c32:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   11c34:	2f00      	cmp	r7, #0
   11c36:	dd07      	ble.n	11c48 <z_cbvprintf_impl+0x580>
			OUTC(' ');
   11c38:	4629      	mov	r1, r5
   11c3a:	2020      	movs	r0, #32
   11c3c:	47b0      	blx	r6
   11c3e:	2800      	cmp	r0, #0
   11c40:	db09      	blt.n	11c56 <z_cbvprintf_impl+0x58e>
   11c42:	3401      	adds	r4, #1
			--width;
   11c44:	3f01      	subs	r7, #1
   11c46:	e7f5      	b.n	11c34 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
   11c48:	f8dd 9008 	ldr.w	r9, [sp, #8]
   11c4c:	e544      	b.n	116d8 <z_cbvprintf_impl+0x10>
   11c4e:	f8dd 9008 	ldr.w	r9, [sp, #8]
   11c52:	e541      	b.n	116d8 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   11c54:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   11c56:	b011      	add	sp, #68	; 0x44
   11c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c5c:	000301bd 	.word	0x000301bd

00011c60 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   11c60:	b508      	push	{r3, lr}
	__asm__ volatile(
   11c62:	f04f 0240 	mov.w	r2, #64	; 0x40
   11c66:	f3ef 8311 	mrs	r3, BASEPRI
   11c6a:	f382 8812 	msr	BASEPRI_MAX, r2
   11c6e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   11c72:	f018 f8eb 	bl	29e4c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   11c76:	4803      	ldr	r0, [pc, #12]	; (11c84 <sys_reboot+0x24>)
   11c78:	f016 fb78 	bl	2836c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11c7c:	f001 f9aa 	bl	12fd4 <arch_cpu_idle>
   11c80:	e7fc      	b.n	11c7c <sys_reboot+0x1c>
   11c82:	bf00      	nop
   11c84:	000301c0 	.word	0x000301c0

00011c88 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   11c88:	f00e bbbe 	b.w	20408 <SystemInit>

00011c8c <minimal_hexdump_line_print>:
{
	vprintk(fmt, ap);
}

static void minimal_hexdump_line_print(const char *data, size_t length)
{
   11c8c:	b570      	push	{r4, r5, r6, lr}
   11c8e:	4606      	mov	r6, r0
   11c90:	460d      	mov	r5, r1
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11c92:	2400      	movs	r4, #0
   11c94:	e003      	b.n	11c9e <minimal_hexdump_line_print+0x12>
		if (i < length) {
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
		} else {
			printk("   ");
   11c96:	4814      	ldr	r0, [pc, #80]	; (11ce8 <minimal_hexdump_line_print+0x5c>)
   11c98:	f016 fb68 	bl	2836c <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11c9c:	3401      	adds	r4, #1
   11c9e:	2c07      	cmp	r4, #7
   11ca0:	d806      	bhi.n	11cb0 <minimal_hexdump_line_print+0x24>
		if (i < length) {
   11ca2:	42ac      	cmp	r4, r5
   11ca4:	d2f7      	bcs.n	11c96 <minimal_hexdump_line_print+0xa>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   11ca6:	5d31      	ldrb	r1, [r6, r4]
   11ca8:	4810      	ldr	r0, [pc, #64]	; (11cec <minimal_hexdump_line_print+0x60>)
   11caa:	f016 fb5f 	bl	2836c <printk>
   11cae:	e7f5      	b.n	11c9c <minimal_hexdump_line_print+0x10>
		}
	}

	printk("|");
   11cb0:	480f      	ldr	r0, [pc, #60]	; (11cf0 <minimal_hexdump_line_print+0x64>)
   11cb2:	f016 fb5b 	bl	2836c <printk>

	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11cb6:	2400      	movs	r4, #0
   11cb8:	e003      	b.n	11cc2 <minimal_hexdump_line_print+0x36>
		if (i < length) {
			unsigned char c = data[i];

			printk("%c", isprint((int)c) != 0 ? c : '.');
   11cba:	480e      	ldr	r0, [pc, #56]	; (11cf4 <minimal_hexdump_line_print+0x68>)
   11cbc:	f016 fb56 	bl	2836c <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11cc0:	3401      	adds	r4, #1
   11cc2:	2c07      	cmp	r4, #7
   11cc4:	d80c      	bhi.n	11ce0 <minimal_hexdump_line_print+0x54>
		if (i < length) {
   11cc6:	42ac      	cmp	r4, r5
   11cc8:	d206      	bcs.n	11cd8 <minimal_hexdump_line_print+0x4c>
			unsigned char c = data[i];
   11cca:	5d31      	ldrb	r1, [r6, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   11ccc:	f1a1 0320 	sub.w	r3, r1, #32
			printk("%c", isprint((int)c) != 0 ? c : '.');
   11cd0:	2b5e      	cmp	r3, #94	; 0x5e
   11cd2:	d9f2      	bls.n	11cba <minimal_hexdump_line_print+0x2e>
   11cd4:	212e      	movs	r1, #46	; 0x2e
   11cd6:	e7f0      	b.n	11cba <minimal_hexdump_line_print+0x2e>
		} else {
			printk(" ");
   11cd8:	4807      	ldr	r0, [pc, #28]	; (11cf8 <minimal_hexdump_line_print+0x6c>)
   11cda:	f016 fb47 	bl	2836c <printk>
   11cde:	e7ef      	b.n	11cc0 <minimal_hexdump_line_print+0x34>
		}
	}
	printk("\n");
   11ce0:	4806      	ldr	r0, [pc, #24]	; (11cfc <minimal_hexdump_line_print+0x70>)
   11ce2:	f016 fb43 	bl	2836c <printk>
}
   11ce6:	bd70      	pop	{r4, r5, r6, pc}
   11ce8:	000301f4 	.word	0x000301f4
   11cec:	000301ec 	.word	0x000301ec
   11cf0:	000301f8 	.word	0x000301f8
   11cf4:	000301fc 	.word	0x000301fc
   11cf8:	000301f0 	.word	0x000301f0
   11cfc:	00033b74 	.word	0x00033b74

00011d00 <z_log_minimal_hexdump_print>:

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   11d00:	b570      	push	{r4, r5, r6, lr}
   11d02:	4606      	mov	r6, r0
   11d04:	460d      	mov	r5, r1
   11d06:	4614      	mov	r4, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   11d08:	e001      	b.n	11d0e <z_log_minimal_hexdump_print+0xe>

		if (size < HEXDUMP_BYTES_IN_LINE) {
			break;
		}

		size -= HEXDUMP_BYTES_IN_LINE;
   11d0a:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   11d0c:	3508      	adds	r5, #8
	while (size > 0U) {
   11d0e:	b164      	cbz	r4, 11d2a <z_log_minimal_hexdump_print+0x2a>
		printk("%c: ", z_log_minimal_level_to_char(level));
   11d10:	4630      	mov	r0, r6
   11d12:	f016 ff8b 	bl	28c2c <z_log_minimal_level_to_char>
   11d16:	4601      	mov	r1, r0
   11d18:	4804      	ldr	r0, [pc, #16]	; (11d2c <z_log_minimal_hexdump_print+0x2c>)
   11d1a:	f016 fb27 	bl	2836c <printk>
		minimal_hexdump_line_print(data_buffer, size);
   11d1e:	4621      	mov	r1, r4
   11d20:	4628      	mov	r0, r5
   11d22:	f7ff ffb3 	bl	11c8c <minimal_hexdump_line_print>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   11d26:	2c07      	cmp	r4, #7
   11d28:	d8ef      	bhi.n	11d0a <z_log_minimal_hexdump_print+0xa>
	}
}
   11d2a:	bd70      	pop	{r4, r5, r6, pc}
   11d2c:	00030200 	.word	0x00030200

00011d30 <nvs_startup>:
	}
	return 0;
}

static int nvs_startup(struct nvs_fs *fs)
{
   11d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11d34:	b087      	sub	sp, #28
   11d36:	4604      	mov	r4, r0
	size_t ate_size, empty_len;
	/* Initialize addr to 0 for the case fs->sector_count == 0. This
	 * should never happen as this is verified in nvs_mount() but both
	 * Coverity and GCC believe the contrary.
	 */
	uint32_t addr = 0U;
   11d38:	2300      	movs	r3, #0
   11d3a:	9303      	str	r3, [sp, #12]
	uint16_t i, closed_sectors = 0;
	uint8_t erase_value = fs->flash_parameters->erase_value;
   11d3c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   11d3e:	791f      	ldrb	r7, [r3, #4]

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   11d40:	f100 0914 	add.w	r9, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   11d44:	f04f 32ff 	mov.w	r2, #4294967295
   11d48:	f04f 33ff 	mov.w	r3, #4294967295
   11d4c:	4648      	mov	r0, r9
   11d4e:	f010 fa4f 	bl	221f0 <z_impl_k_mutex_lock>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   11d52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11d54:	681b      	ldr	r3, [r3, #0]
   11d56:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   11d58:	2a01      	cmp	r2, #1
   11d5a:	d908      	bls.n	11d6e <nvs_startup+0x3e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   11d5c:	4613      	mov	r3, r2
   11d5e:	3207      	adds	r2, #7
   11d60:	425b      	negs	r3, r3
   11d62:	ea03 0602 	and.w	r6, r3, r2
	uint16_t i, closed_sectors = 0;
   11d66:	f04f 0800 	mov.w	r8, #0

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
	/* step through the sectors to find a open sector following
	 * a closed sector, this is where NVS can write.
	 */
	for (i = 0; i < fs->sector_count; i++) {
   11d6a:	4645      	mov	r5, r8
   11d6c:	e003      	b.n	11d76 <nvs_startup+0x46>
		return len;
   11d6e:	2608      	movs	r6, #8
   11d70:	e7f9      	b.n	11d66 <nvs_startup+0x36>
	for (i = 0; i < fs->sector_count; i++) {
   11d72:	3501      	adds	r5, #1
   11d74:	b2ad      	uxth	r5, r5
   11d76:	89e3      	ldrh	r3, [r4, #14]
   11d78:	42ab      	cmp	r3, r5
   11d7a:	d91c      	bls.n	11db6 <nvs_startup+0x86>
		addr = (i << ADDR_SECT_SHIFT) +
		       (uint16_t)(fs->sector_size - ate_size);
   11d7c:	89a1      	ldrh	r1, [r4, #12]
   11d7e:	1b89      	subs	r1, r1, r6
   11d80:	b289      	uxth	r1, r1
		addr = (i << ADDR_SECT_SHIFT) +
   11d82:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   11d86:	9103      	str	r1, [sp, #12]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11d88:	2308      	movs	r3, #8
   11d8a:	463a      	mov	r2, r7
   11d8c:	4620      	mov	r0, r4
   11d8e:	f016 ffc5 	bl	28d1c <nvs_flash_cmp_const>
					 sizeof(struct nvs_ate));
		if (rc) {
   11d92:	2800      	cmp	r0, #0
   11d94:	d0ed      	beq.n	11d72 <nvs_startup+0x42>
			/* closed sector */
			closed_sectors++;
   11d96:	f108 0801 	add.w	r8, r8, #1
   11d9a:	fa1f f888 	uxth.w	r8, r8
			nvs_sector_advance(fs, &addr);
   11d9e:	a903      	add	r1, sp, #12
   11da0:	4620      	mov	r0, r4
   11da2:	f016 ff82 	bl	28caa <nvs_sector_advance>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11da6:	2308      	movs	r3, #8
   11da8:	463a      	mov	r2, r7
   11daa:	9903      	ldr	r1, [sp, #12]
   11dac:	4620      	mov	r0, r4
   11dae:	f016 ffb5 	bl	28d1c <nvs_flash_cmp_const>
						 sizeof(struct nvs_ate));
			if (!rc) {
   11db2:	2800      	cmp	r0, #0
   11db4:	d1dd      	bne.n	11d72 <nvs_startup+0x42>
				break;
			}
		}
	}
	/* all sectors are closed, this is not a nvs fs */
	if (closed_sectors == fs->sector_count) {
   11db6:	89e3      	ldrh	r3, [r4, #14]
   11db8:	4543      	cmp	r3, r8
   11dba:	f000 80f3 	beq.w	11fa4 <nvs_startup+0x274>
		rc = -EDEADLK;
		goto end;
	}

	if (i == fs->sector_count) {
   11dbe:	42ab      	cmp	r3, r5
   11dc0:	d00d      	beq.n	11dde <nvs_startup+0xae>

	/* addr contains address of closing ate in the most recent sector,
	 * search for the last valid ate using the recover_last_ate routine
	 */

	rc = nvs_recover_last_ate(fs, &addr);
   11dc2:	a903      	add	r1, sp, #12
   11dc4:	4620      	mov	r0, r4
   11dc6:	f017 f817 	bl	28df8 <nvs_recover_last_ate>
	if (rc) {
   11dca:	4605      	mov	r5, r0
   11dcc:	2800      	cmp	r0, #0
   11dce:	f040 80ce 	bne.w	11f6e <nvs_startup+0x23e>

	/* addr contains address of the last valid ate in the most recent sector
	 * search for the first ate containing all cells erased, in the process
	 * also update fs->data_wra.
	 */
	fs->ate_wra = addr;
   11dd2:	9b03      	ldr	r3, [sp, #12]
   11dd4:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   11dd6:	0c1b      	lsrs	r3, r3, #16
   11dd8:	041b      	lsls	r3, r3, #16
   11dda:	60a3      	str	r3, [r4, #8]

	while (fs->ate_wra >= fs->data_wra) {
   11ddc:	e010      	b.n	11e00 <nvs_startup+0xd0>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   11dde:	2308      	movs	r3, #8
   11de0:	463a      	mov	r2, r7
   11de2:	9903      	ldr	r1, [sp, #12]
   11de4:	1b89      	subs	r1, r1, r6
   11de6:	4620      	mov	r0, r4
   11de8:	f016 ff98 	bl	28d1c <nvs_flash_cmp_const>
		if (!rc) {
   11dec:	2800      	cmp	r0, #0
   11dee:	d1e8      	bne.n	11dc2 <nvs_startup+0x92>
			nvs_sector_advance(fs, &addr);
   11df0:	a903      	add	r1, sp, #12
   11df2:	4620      	mov	r0, r4
   11df4:	f016 ff59 	bl	28caa <nvs_sector_advance>
   11df8:	e7e3      	b.n	11dc2 <nvs_startup+0x92>
				rc = -ESPIPE;
				goto end;
			}
		}

		fs->ate_wra -= ate_size;
   11dfa:	6863      	ldr	r3, [r4, #4]
   11dfc:	1b9b      	subs	r3, r3, r6
   11dfe:	6063      	str	r3, [r4, #4]
	while (fs->ate_wra >= fs->data_wra) {
   11e00:	6861      	ldr	r1, [r4, #4]
   11e02:	68a3      	ldr	r3, [r4, #8]
   11e04:	4299      	cmp	r1, r3
   11e06:	d32e      	bcc.n	11e66 <nvs_startup+0x136>
		rc = nvs_flash_ate_rd(fs, fs->ate_wra, &last_ate);
   11e08:	aa04      	add	r2, sp, #16
   11e0a:	4620      	mov	r0, r4
   11e0c:	f016 ff3c 	bl	28c88 <nvs_flash_ate_rd>
		if (rc) {
   11e10:	4605      	mov	r5, r0
   11e12:	2800      	cmp	r0, #0
   11e14:	f040 80a4 	bne.w	11f60 <nvs_startup+0x230>
		rc = nvs_ate_cmp_const(&last_ate, erase_value);
   11e18:	4639      	mov	r1, r7
   11e1a:	a804      	add	r0, sp, #16
   11e1c:	f016 ff39 	bl	28c92 <nvs_ate_cmp_const>
		if (!rc) {
   11e20:	b308      	cbz	r0, 11e66 <nvs_startup+0x136>
		if (nvs_ate_valid(fs, &last_ate)) {
   11e22:	a904      	add	r1, sp, #16
   11e24:	4620      	mov	r0, r4
   11e26:	f016 ffcb 	bl	28dc0 <nvs_ate_valid>
   11e2a:	2800      	cmp	r0, #0
   11e2c:	d0e5      	beq.n	11dfa <nvs_startup+0xca>
			fs->data_wra = addr & ADDR_SECT_MASK;
   11e2e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11e32:	0419      	lsls	r1, r3, #16
   11e34:	60a1      	str	r1, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   11e36:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   11e3a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   11e3e:	4403      	add	r3, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   11e40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   11e42:	6812      	ldr	r2, [r2, #0]
   11e44:	b2d5      	uxtb	r5, r2
	if (write_block_size <= 1U) {
   11e46:	2d01      	cmp	r5, #1
   11e48:	d903      	bls.n	11e52 <nvs_startup+0x122>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   11e4a:	442b      	add	r3, r5
   11e4c:	3b01      	subs	r3, #1
   11e4e:	426a      	negs	r2, r5
   11e50:	4013      	ands	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   11e52:	440b      	add	r3, r1
   11e54:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   11e56:	6862      	ldr	r2, [r4, #4]
   11e58:	4293      	cmp	r3, r2
   11e5a:	d1ce      	bne.n	11dfa <nvs_startup+0xca>
   11e5c:	2800      	cmp	r0, #0
   11e5e:	d0cc      	beq.n	11dfa <nvs_startup+0xca>
				rc = -ESPIPE;
   11e60:	f06f 051c 	mvn.w	r5, #28
   11e64:	e083      	b.n	11f6e <nvs_startup+0x23e>
	 * we might need to restart gc if it has not yet finished. Otherwise
	 * just erase the sector.
	 * When gc needs to be restarted, first erase the sector otherwise the
	 * data might not fit into the sector.
	 */
	addr = fs->ate_wra & ADDR_SECT_MASK;
   11e66:	88e3      	ldrh	r3, [r4, #6]
   11e68:	041b      	lsls	r3, r3, #16
   11e6a:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &addr);
   11e6c:	a903      	add	r1, sp, #12
   11e6e:	4620      	mov	r0, r4
   11e70:	f016 ff1b 	bl	28caa <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   11e74:	89a3      	ldrh	r3, [r4, #12]
   11e76:	463a      	mov	r2, r7
   11e78:	9903      	ldr	r1, [sp, #12]
   11e7a:	4620      	mov	r0, r4
   11e7c:	f016 ff4e 	bl	28d1c <nvs_flash_cmp_const>
	if (rc < 0) {
   11e80:	1e05      	subs	r5, r0, #0
   11e82:	db74      	blt.n	11f6e <nvs_startup+0x23e>
		goto end;
	}
	if (rc) {
   11e84:	2d00      	cmp	r5, #0
   11e86:	d058      	beq.n	11f3a <nvs_startup+0x20a>
		 * (gc_done_ate) that indicates that gc was finished.
		 */
		bool gc_done_marker = false;
		struct nvs_ate gc_done_ate;

		addr = fs->ate_wra + ate_size;
   11e88:	6863      	ldr	r3, [r4, #4]
   11e8a:	4433      	add	r3, r6
   11e8c:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   11e8e:	e002      	b.n	11e96 <nvs_startup+0x166>
			    (gc_done_ate.id == 0xffff) &&
			    (gc_done_ate.len == 0U)) {
				gc_done_marker = true;
				break;
			}
			addr += ate_size;
   11e90:	9b03      	ldr	r3, [sp, #12]
   11e92:	4433      	add	r3, r6
   11e94:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   11e96:	9903      	ldr	r1, [sp, #12]
   11e98:	b28a      	uxth	r2, r1
   11e9a:	89a3      	ldrh	r3, [r4, #12]
   11e9c:	1b9b      	subs	r3, r3, r6
   11e9e:	429a      	cmp	r2, r3
   11ea0:	d218      	bcs.n	11ed4 <nvs_startup+0x1a4>
			rc = nvs_flash_ate_rd(fs, addr, &gc_done_ate);
   11ea2:	aa01      	add	r2, sp, #4
   11ea4:	4620      	mov	r0, r4
   11ea6:	f016 feef 	bl	28c88 <nvs_flash_ate_rd>
			if (rc) {
   11eaa:	4605      	mov	r5, r0
   11eac:	2800      	cmp	r0, #0
   11eae:	d157      	bne.n	11f60 <nvs_startup+0x230>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   11eb0:	a901      	add	r1, sp, #4
   11eb2:	4620      	mov	r0, r4
   11eb4:	f016 ff84 	bl	28dc0 <nvs_ate_valid>
   11eb8:	2800      	cmp	r0, #0
   11eba:	d0e9      	beq.n	11e90 <nvs_startup+0x160>
			    (gc_done_ate.id == 0xffff) &&
   11ebc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   11ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11ec4:	429a      	cmp	r2, r3
   11ec6:	d1e3      	bne.n	11e90 <nvs_startup+0x160>
			    (gc_done_ate.len == 0U)) {
   11ec8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
			    (gc_done_ate.id == 0xffff) &&
   11ecc:	2b00      	cmp	r3, #0
   11ece:	d1df      	bne.n	11e90 <nvs_startup+0x160>
				gc_done_marker = true;
   11ed0:	2301      	movs	r3, #1
   11ed2:	e000      	b.n	11ed6 <nvs_startup+0x1a6>
		bool gc_done_marker = false;
   11ed4:	2300      	movs	r3, #0
		}

		if (gc_done_marker) {
   11ed6:	b9d3      	cbnz	r3, 11f0e <nvs_startup+0x1de>
			addr = fs->ate_wra & ADDR_SECT_MASK;
			nvs_sector_advance(fs, &addr);
			rc = nvs_flash_erase_sector(fs, addr);
			goto end;
		}
		LOG_INF("No GC Done marker found: restarting gc");
   11ed8:	2149      	movs	r1, #73	; 0x49
   11eda:	4834      	ldr	r0, [pc, #208]	; (11fac <nvs_startup+0x27c>)
   11edc:	f016 feb7 	bl	28c4e <z_log_minimal_printk>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   11ee0:	6861      	ldr	r1, [r4, #4]
   11ee2:	4620      	mov	r0, r4
   11ee4:	f016 ff41 	bl	28d6a <nvs_flash_erase_sector>
		if (rc) {
   11ee8:	4605      	mov	r5, r0
   11eea:	2800      	cmp	r0, #0
   11eec:	d13f      	bne.n	11f6e <nvs_startup+0x23e>
			goto end;
		}
		fs->ate_wra &= ADDR_SECT_MASK;
   11eee:	88e3      	ldrh	r3, [r4, #6]
   11ef0:	041b      	lsls	r3, r3, #16
   11ef2:	6063      	str	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   11ef4:	89a2      	ldrh	r2, [r4, #12]
   11ef6:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
   11efa:	4413      	add	r3, r2
   11efc:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   11efe:	0c1b      	lsrs	r3, r3, #16
   11f00:	041b      	lsls	r3, r3, #16
   11f02:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   11f04:	4620      	mov	r0, r4
   11f06:	f017 f8dd 	bl	290c4 <nvs_gc>
   11f0a:	4605      	mov	r5, r0
		goto end;
   11f0c:	e028      	b.n	11f60 <nvs_startup+0x230>
			LOG_INF("GC Done marker found");
   11f0e:	2149      	movs	r1, #73	; 0x49
   11f10:	4827      	ldr	r0, [pc, #156]	; (11fb0 <nvs_startup+0x280>)
   11f12:	f016 fe9c 	bl	28c4e <z_log_minimal_printk>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   11f16:	88e3      	ldrh	r3, [r4, #6]
   11f18:	041b      	lsls	r3, r3, #16
   11f1a:	9303      	str	r3, [sp, #12]
			nvs_sector_advance(fs, &addr);
   11f1c:	a903      	add	r1, sp, #12
   11f1e:	4620      	mov	r0, r4
   11f20:	f016 fec3 	bl	28caa <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   11f24:	9903      	ldr	r1, [sp, #12]
   11f26:	4620      	mov	r0, r4
   11f28:	f016 ff1f 	bl	28d6a <nvs_flash_erase_sector>
   11f2c:	4605      	mov	r5, r0
			goto end;
   11f2e:	e017      	b.n	11f60 <nvs_startup+0x230>
		}
		if (!rc) {
			break;
		}

		fs->data_wra += fs->flash_parameters->write_block_size;
   11f30:	68a3      	ldr	r3, [r4, #8]
   11f32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   11f34:	6812      	ldr	r2, [r2, #0]
   11f36:	4413      	add	r3, r2
   11f38:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   11f3a:	6863      	ldr	r3, [r4, #4]
   11f3c:	68a1      	ldr	r1, [r4, #8]
   11f3e:	428b      	cmp	r3, r1
   11f40:	d908      	bls.n	11f54 <nvs_startup+0x224>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   11f42:	1a5b      	subs	r3, r3, r1
   11f44:	463a      	mov	r2, r7
   11f46:	4620      	mov	r0, r4
   11f48:	f016 fee8 	bl	28d1c <nvs_flash_cmp_const>
		if (rc < 0) {
   11f4c:	1e05      	subs	r5, r0, #0
   11f4e:	db07      	blt.n	11f60 <nvs_startup+0x230>
		if (!rc) {
   11f50:	2d00      	cmp	r5, #0
   11f52:	d1ed      	bne.n	11f30 <nvs_startup+0x200>

	/* If the ate_wra is pointing to the first ate write location in a
	 * sector and data_wra is not 0, erase the sector as it contains no
	 * valid data (this also avoids closing a sector without any data).
	 */
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   11f54:	6861      	ldr	r1, [r4, #4]
   11f56:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   11f5a:	89a3      	ldrh	r3, [r4, #12]
   11f5c:	429a      	cmp	r2, r3
   11f5e:	d00d      	beq.n	11f7c <nvs_startup+0x24c>

end:
	/* If the sector is empty add a gc done ate to avoid having insufficient
	 * space when doing gc.
	 */
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   11f60:	b92d      	cbnz	r5, 11f6e <nvs_startup+0x23e>
   11f62:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   11f64:	89a3      	ldrh	r3, [r4, #12]
   11f66:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   11f6a:	429a      	cmp	r2, r3
   11f6c:	d015      	beq.n	11f9a <nvs_startup+0x26a>
	return z_impl_k_mutex_unlock(mutex);
   11f6e:	4648      	mov	r0, r9
   11f70:	f010 fa28 	bl	223c4 <z_impl_k_mutex_unlock>

		rc = nvs_add_gc_done_ate(fs);
	}
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   11f74:	4628      	mov	r0, r5
   11f76:	b007      	add	sp, #28
   11f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   11f7c:	68a2      	ldr	r2, [r4, #8]
   11f7e:	0c0b      	lsrs	r3, r1, #16
   11f80:	041b      	lsls	r3, r3, #16
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   11f82:	429a      	cmp	r2, r3
   11f84:	d0ec      	beq.n	11f60 <nvs_startup+0x230>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   11f86:	4620      	mov	r0, r4
   11f88:	f016 feef 	bl	28d6a <nvs_flash_erase_sector>
		if (rc) {
   11f8c:	4605      	mov	r5, r0
   11f8e:	2800      	cmp	r0, #0
   11f90:	d1ed      	bne.n	11f6e <nvs_startup+0x23e>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   11f92:	88e3      	ldrh	r3, [r4, #6]
   11f94:	041b      	lsls	r3, r3, #16
   11f96:	60a3      	str	r3, [r4, #8]
   11f98:	e7e2      	b.n	11f60 <nvs_startup+0x230>
		rc = nvs_add_gc_done_ate(fs);
   11f9a:	4620      	mov	r0, r4
   11f9c:	f017 f87c 	bl	29098 <nvs_add_gc_done_ate>
   11fa0:	4605      	mov	r5, r0
   11fa2:	e7e4      	b.n	11f6e <nvs_startup+0x23e>
		rc = -EDEADLK;
   11fa4:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   11fa8:	e7e1      	b.n	11f6e <nvs_startup+0x23e>
   11faa:	bf00      	nop
   11fac:	00030224 	.word	0x00030224
   11fb0:	00030208 	.word	0x00030208

00011fb4 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   11fb4:	b530      	push	{r4, r5, lr}
   11fb6:	b085      	sub	sp, #20
   11fb8:	4604      	mov	r4, r0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   11fba:	3014      	adds	r0, #20
	return z_impl_k_mutex_init(mutex);
   11fbc:	f01d f8a8 	bl	2f110 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   11fc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
   11fc2:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   11fc4:	68db      	ldr	r3, [r3, #12]
   11fc6:	4798      	blx	r3
   11fc8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   11fca:	b300      	cbz	r0, 1200e <nvs_mount+0x5a>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
	}

	write_block_size = flash_get_write_block_size(fs->flash_device);
   11fcc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
   11fce:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
   11fd0:	68db      	ldr	r3, [r3, #12]
   11fd2:	4798      	blx	r3
   11fd4:	6803      	ldr	r3, [r0, #0]

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   11fd6:	3b01      	subs	r3, #1
   11fd8:	2b1f      	cmp	r3, #31
   11fda:	d81f      	bhi.n	1201c <nvs_mount+0x68>
		LOG_ERR("Unsupported write block size");
		return -EINVAL;
	}

	/* check that sector size is a multiple of pagesize */
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   11fdc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11fde:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   11fe0:	aa01      	add	r2, sp, #4
   11fe2:	f01b fd7a 	bl	2dada <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   11fe6:	bb00      	cbnz	r0, 1202a <nvs_mount+0x76>
		LOG_ERR("Unable to get page info");
		return -EINVAL;
	}
	if (!fs->sector_size || fs->sector_size % info.size) {
   11fe8:	89a3      	ldrh	r3, [r4, #12]
   11fea:	b32b      	cbz	r3, 12038 <nvs_mount+0x84>
   11fec:	9a02      	ldr	r2, [sp, #8]
   11fee:	fbb3 f1f2 	udiv	r1, r3, r2
   11ff2:	fb02 3311 	mls	r3, r2, r1, r3
   11ff6:	b9fb      	cbnz	r3, 12038 <nvs_mount+0x84>
		LOG_ERR("Invalid sector size");
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
   11ff8:	89e3      	ldrh	r3, [r4, #14]
   11ffa:	2b01      	cmp	r3, #1
   11ffc:	d923      	bls.n	12046 <nvs_mount+0x92>
		LOG_ERR("Configuration error - sector count");
		return -EINVAL;
	}

	rc = nvs_startup(fs);
   11ffe:	4620      	mov	r0, r4
   12000:	f7ff fe96 	bl	11d30 <nvs_startup>
	if (rc) {
   12004:	4605      	mov	r5, r0
   12006:	b328      	cbz	r0, 12054 <nvs_mount+0xa0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   12008:	4628      	mov	r0, r5
   1200a:	b005      	add	sp, #20
   1200c:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Could not obtain flash parameters");
   1200e:	2145      	movs	r1, #69	; 0x45
   12010:	481c      	ldr	r0, [pc, #112]	; (12084 <nvs_mount+0xd0>)
   12012:	f016 fe1c 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   12016:	f06f 0515 	mvn.w	r5, #21
   1201a:	e7f5      	b.n	12008 <nvs_mount+0x54>
		LOG_ERR("Unsupported write block size");
   1201c:	2145      	movs	r1, #69	; 0x45
   1201e:	481a      	ldr	r0, [pc, #104]	; (12088 <nvs_mount+0xd4>)
   12020:	f016 fe15 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   12024:	f06f 0515 	mvn.w	r5, #21
   12028:	e7ee      	b.n	12008 <nvs_mount+0x54>
		LOG_ERR("Unable to get page info");
   1202a:	2145      	movs	r1, #69	; 0x45
   1202c:	4817      	ldr	r0, [pc, #92]	; (1208c <nvs_mount+0xd8>)
   1202e:	f016 fe0e 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   12032:	f06f 0515 	mvn.w	r5, #21
   12036:	e7e7      	b.n	12008 <nvs_mount+0x54>
		LOG_ERR("Invalid sector size");
   12038:	2145      	movs	r1, #69	; 0x45
   1203a:	4815      	ldr	r0, [pc, #84]	; (12090 <nvs_mount+0xdc>)
   1203c:	f016 fe07 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   12040:	f06f 0515 	mvn.w	r5, #21
   12044:	e7e0      	b.n	12008 <nvs_mount+0x54>
		LOG_ERR("Configuration error - sector count");
   12046:	2145      	movs	r1, #69	; 0x45
   12048:	4812      	ldr	r0, [pc, #72]	; (12094 <nvs_mount+0xe0>)
   1204a:	f016 fe00 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1204e:	f06f 0515 	mvn.w	r5, #21
   12052:	e7d9      	b.n	12008 <nvs_mount+0x54>
	fs->ready = true;
   12054:	2301      	movs	r3, #1
   12056:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   12058:	89a3      	ldrh	r3, [r4, #12]
   1205a:	89e2      	ldrh	r2, [r4, #14]
   1205c:	2149      	movs	r1, #73	; 0x49
   1205e:	480e      	ldr	r0, [pc, #56]	; (12098 <nvs_mount+0xe4>)
   12060:	f016 fdf5 	bl	28c4e <z_log_minimal_printk>
	LOG_INF("alloc wra: %d, %x",
   12064:	6862      	ldr	r2, [r4, #4]
   12066:	b293      	uxth	r3, r2
   12068:	0c12      	lsrs	r2, r2, #16
   1206a:	2149      	movs	r1, #73	; 0x49
   1206c:	480b      	ldr	r0, [pc, #44]	; (1209c <nvs_mount+0xe8>)
   1206e:	f016 fdee 	bl	28c4e <z_log_minimal_printk>
	LOG_INF("data wra: %d, %x",
   12072:	68a2      	ldr	r2, [r4, #8]
   12074:	b293      	uxth	r3, r2
   12076:	0c12      	lsrs	r2, r2, #16
   12078:	2149      	movs	r1, #73	; 0x49
   1207a:	4809      	ldr	r0, [pc, #36]	; (120a0 <nvs_mount+0xec>)
   1207c:	f016 fde7 	bl	28c4e <z_log_minimal_printk>
	return 0;
   12080:	e7c2      	b.n	12008 <nvs_mount+0x54>
   12082:	bf00      	nop
   12084:	0003026c 	.word	0x0003026c
   12088:	00030294 	.word	0x00030294
   1208c:	000302b8 	.word	0x000302b8
   12090:	000302d8 	.word	0x000302d8
   12094:	000302f4 	.word	0x000302f4
   12098:	0003031c 	.word	0x0003031c
   1209c:	00030338 	.word	0x00030338
   120a0:	00030350 	.word	0x00030350

000120a4 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   120a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120a8:	b087      	sub	sp, #28
   120aa:	9201      	str	r2, [sp, #4]
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   120ac:	f890 b010 	ldrb.w	fp, [r0, #16]
   120b0:	f1bb 0f00 	cmp.w	fp, #0
   120b4:	d026      	beq.n	12104 <nvs_write+0x60>
   120b6:	4604      	mov	r4, r0
   120b8:	460e      	mov	r6, r1
   120ba:	4699      	mov	r9, r3
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   120bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   120be:	681b      	ldr	r3, [r3, #0]
   120c0:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   120c2:	2901      	cmp	r1, #1
   120c4:	d925      	bls.n	12112 <nvs_write+0x6e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   120c6:	f101 0a07 	add.w	sl, r1, #7
   120ca:	424a      	negs	r2, r1
   120cc:	ea0a 0a02 	and.w	sl, sl, r2
	if (write_block_size <= 1U) {
   120d0:	2901      	cmp	r1, #1
   120d2:	d921      	bls.n	12118 <nvs_write+0x74>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   120d4:	b2db      	uxtb	r3, r3
   120d6:	eb03 0809 	add.w	r8, r3, r9
   120da:	f108 38ff 	add.w	r8, r8, #4294967295
   120de:	425b      	negs	r3, r3
   120e0:	ea08 0803 	and.w	r8, r8, r3

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   120e4:	89a3      	ldrh	r3, [r4, #12]
   120e6:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   120ea:	4599      	cmp	r9, r3
   120ec:	f200 8089 	bhi.w	12202 <nvs_write+0x15e>
   120f0:	f1b9 0f00 	cmp.w	r9, #0
   120f4:	d003      	beq.n	120fe <nvs_write+0x5a>
	    ((len > 0) && (data == NULL))) {
   120f6:	9b01      	ldr	r3, [sp, #4]
   120f8:	2b00      	cmp	r3, #0
   120fa:	f000 8085 	beq.w	12208 <nvs_write+0x164>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   120fe:	6863      	ldr	r3, [r4, #4]
   12100:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;
   12102:	e00f      	b.n	12124 <nvs_write+0x80>
		LOG_ERR("NVS not initialized");
   12104:	2145      	movs	r1, #69	; 0x45
   12106:	4842      	ldr	r0, [pc, #264]	; (12210 <nvs_write+0x16c>)
   12108:	f016 fda1 	bl	28c4e <z_log_minimal_printk>
		return -EACCES;
   1210c:	f06f 050c 	mvn.w	r5, #12
   12110:	e06f      	b.n	121f2 <nvs_write+0x14e>
		return len;
   12112:	f04f 0a08 	mov.w	sl, #8
   12116:	e7db      	b.n	120d0 <nvs_write+0x2c>
   12118:	46c8      	mov	r8, r9
   1211a:	e7e3      	b.n	120e4 <nvs_write+0x40>
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   1211c:	6862      	ldr	r2, [r4, #4]
   1211e:	9b03      	ldr	r3, [sp, #12]
   12120:	429a      	cmp	r2, r3
   12122:	d013      	beq.n	1214c <nvs_write+0xa8>
		rd_addr = wlk_addr;
   12124:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12126:	aa04      	add	r2, sp, #16
   12128:	a903      	add	r1, sp, #12
   1212a:	4620      	mov	r0, r4
   1212c:	f016 fec4 	bl	28eb8 <nvs_prev_ate>
		if (rc) {
   12130:	4605      	mov	r5, r0
   12132:	2800      	cmp	r0, #0
   12134:	d15d      	bne.n	121f2 <nvs_write+0x14e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   12136:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1213a:	429e      	cmp	r6, r3
   1213c:	d1ee      	bne.n	1211c <nvs_write+0x78>
   1213e:	a904      	add	r1, sp, #16
   12140:	4620      	mov	r0, r4
   12142:	f016 fe3d 	bl	28dc0 <nvs_ate_valid>
   12146:	2800      	cmp	r0, #0
   12148:	d0e8      	beq.n	1211c <nvs_write+0x78>
   1214a:	e001      	b.n	12150 <nvs_write+0xac>
	bool prev_found = false;
   1214c:	f04f 0b00 	mov.w	fp, #0
			break;
		}
	}

	if (prev_found) {
   12150:	f1bb 0f00 	cmp.w	fp, #0
   12154:	d018      	beq.n	12188 <nvs_write+0xe4>
		/* previous entry found */
		rd_addr &= ADDR_SECT_MASK;
   12156:	0c3f      	lsrs	r7, r7, #16
   12158:	043f      	lsls	r7, r7, #16
		rd_addr += wlk_ate.offset;
   1215a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1215e:	18f9      	adds	r1, r7, r3

		if (len == 0) {
   12160:	f1b9 0f00 	cmp.w	r9, #0
   12164:	d103      	bne.n	1216e <nvs_write+0xca>
			/* do not try to compare with empty data */
			if (wlk_ate.len == 0U) {
   12166:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1216a:	b983      	cbnz	r3, 1218e <nvs_write+0xea>
   1216c:	e041      	b.n	121f2 <nvs_write+0x14e>
				/* skip delete entry as it is already the
				 * last one
				 */
				return 0;
			}
		} else if (len == wlk_ate.len) {
   1216e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   12172:	4599      	cmp	r9, r3
   12174:	d10b      	bne.n	1218e <nvs_write+0xea>
			/* do not try to compare if lengths are not equal */
			/* compare the data and if equal return 0 */
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   12176:	464b      	mov	r3, r9
   12178:	9a01      	ldr	r2, [sp, #4]
   1217a:	4620      	mov	r0, r4
   1217c:	f016 fda2 	bl	28cc4 <nvs_flash_block_cmp>
			if (rc <= 0) {
   12180:	2800      	cmp	r0, #0
   12182:	dc04      	bgt.n	1218e <nvs_write+0xea>
				return rc;
   12184:	4605      	mov	r5, r0
   12186:	e034      	b.n	121f2 <nvs_write+0x14e>
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   12188:	f1b9 0f00 	cmp.w	r9, #0
   1218c:	d031      	beq.n	121f2 <nvs_write+0x14e>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   1218e:	f1b8 0f00 	cmp.w	r8, #0
   12192:	d01d      	beq.n	121d0 <nvs_write+0x12c>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
   12194:	fa1a f788 	uxtah	r7, sl, r8
   12198:	b2bf      	uxth	r7, r7
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1219a:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1219e:	f04f 32ff 	mov.w	r2, #4294967295
   121a2:	f04f 33ff 	mov.w	r3, #4294967295
   121a6:	4640      	mov	r0, r8
   121a8:	f010 f822 	bl	221f0 <z_impl_k_mutex_lock>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   121ac:	89e3      	ldrh	r3, [r4, #14]
   121ae:	429d      	cmp	r5, r3
   121b0:	d01a      	beq.n	121e8 <nvs_write+0x144>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   121b2:	6862      	ldr	r2, [r4, #4]
   121b4:	68a3      	ldr	r3, [r4, #8]
   121b6:	443b      	add	r3, r7
   121b8:	429a      	cmp	r2, r3
   121ba:	d20b      	bcs.n	121d4 <nvs_write+0x130>
			}
			break;
		}


		rc = nvs_sector_close(fs);
   121bc:	4620      	mov	r0, r4
   121be:	f017 f840 	bl	29242 <nvs_sector_close>
		if (rc) {
   121c2:	b9d0      	cbnz	r0, 121fa <nvs_write+0x156>
			goto end;
		}

		rc = nvs_gc(fs);
   121c4:	4620      	mov	r0, r4
   121c6:	f016 ff7d 	bl	290c4 <nvs_gc>
		if (rc) {
   121ca:	b9c0      	cbnz	r0, 121fe <nvs_write+0x15a>
			goto end;
		}
		gc_count++;
   121cc:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   121ce:	e7ed      	b.n	121ac <nvs_write+0x108>
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
   121d0:	2700      	movs	r7, #0
   121d2:	e7e2      	b.n	1219a <nvs_write+0xf6>
			rc = nvs_flash_wrt_entry(fs, id, data, len);
   121d4:	464b      	mov	r3, r9
   121d6:	9a01      	ldr	r2, [sp, #4]
   121d8:	4631      	mov	r1, r6
   121da:	4620      	mov	r0, r4
   121dc:	f017 f812 	bl	29204 <nvs_flash_wrt_entry>
			if (rc) {
   121e0:	4605      	mov	r5, r0
   121e2:	b918      	cbnz	r0, 121ec <nvs_write+0x148>
	}
	rc = len;
   121e4:	464d      	mov	r5, r9
   121e6:	e001      	b.n	121ec <nvs_write+0x148>
			rc = -ENOSPC;
   121e8:	f06f 051b 	mvn.w	r5, #27
	return z_impl_k_mutex_unlock(mutex);
   121ec:	4640      	mov	r0, r8
   121ee:	f010 f8e9 	bl	223c4 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   121f2:	4628      	mov	r0, r5
   121f4:	b007      	add	sp, #28
   121f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_sector_close(fs);
   121fa:	4605      	mov	r5, r0
   121fc:	e7f6      	b.n	121ec <nvs_write+0x148>
		rc = nvs_gc(fs);
   121fe:	4605      	mov	r5, r0
   12200:	e7f4      	b.n	121ec <nvs_write+0x148>
		return -EINVAL;
   12202:	f06f 0515 	mvn.w	r5, #21
   12206:	e7f4      	b.n	121f2 <nvs_write+0x14e>
   12208:	f06f 0515 	mvn.w	r5, #21
   1220c:	e7f1      	b.n	121f2 <nvs_write+0x14e>
   1220e:	bf00      	nop
   12210:	00030250 	.word	0x00030250

00012214 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   12214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12218:	b084      	sub	sp, #16
   1221a:	4699      	mov	r9, r3
   1221c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   12220:	7c03      	ldrb	r3, [r0, #16]
   12222:	b1a3      	cbz	r3, 1224e <nvs_read_hist+0x3a>
   12224:	4604      	mov	r4, r0
   12226:	460f      	mov	r7, r1
   12228:	4692      	mov	sl, r2
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1222a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1222c:	681b      	ldr	r3, [r3, #0]
   1222e:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   12230:	2a01      	cmp	r2, #1
   12232:	d913      	bls.n	1225c <nvs_read_hist+0x48>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   12234:	4613      	mov	r3, r2
   12236:	3207      	adds	r2, #7
   12238:	425b      	negs	r3, r3
   1223a:	401a      	ands	r2, r3
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	if (len > (fs->sector_size - 2 * ate_size)) {
   1223c:	89a3      	ldrh	r3, [r4, #12]
   1223e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   12242:	4599      	cmp	r9, r3
   12244:	d84b      	bhi.n	122de <nvs_read_hist+0xca>
	if (wlk_addr == NVS_LOOKUP_CACHE_NO_ADDR) {
		rc = -ENOENT;
		goto err;
	}
#else
	wlk_addr = fs->ate_wra;
   12246:	6866      	ldr	r6, [r4, #4]
   12248:	9603      	str	r6, [sp, #12]
	cnt_his = 0U;
   1224a:	2500      	movs	r5, #0
#endif
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   1224c:	e00c      	b.n	12268 <nvs_read_hist+0x54>
		LOG_ERR("NVS not initialized");
   1224e:	2145      	movs	r1, #69	; 0x45
   12250:	4827      	ldr	r0, [pc, #156]	; (122f0 <nvs_read_hist+0xdc>)
   12252:	f016 fcfc 	bl	28c4e <z_log_minimal_printk>
		return -EACCES;
   12256:	f06f 030c 	mvn.w	r3, #12
   1225a:	e035      	b.n	122c8 <nvs_read_hist+0xb4>
		return len;
   1225c:	2208      	movs	r2, #8
   1225e:	e7ed      	b.n	1223c <nvs_read_hist+0x28>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
			cnt_his++;
		}
		if (wlk_addr == fs->ate_wra) {
   12260:	6862      	ldr	r2, [r4, #4]
   12262:	9b03      	ldr	r3, [sp, #12]
   12264:	429a      	cmp	r2, r3
   12266:	d016      	beq.n	12296 <nvs_read_hist+0x82>
	while (cnt_his <= cnt) {
   12268:	45a8      	cmp	r8, r5
   1226a:	d314      	bcc.n	12296 <nvs_read_hist+0x82>
		rd_addr = wlk_addr;
   1226c:	9e03      	ldr	r6, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1226e:	aa01      	add	r2, sp, #4
   12270:	a903      	add	r1, sp, #12
   12272:	4620      	mov	r0, r4
   12274:	f016 fe20 	bl	28eb8 <nvs_prev_ate>
		if (rc) {
   12278:	4603      	mov	r3, r0
   1227a:	bb28      	cbnz	r0, 122c8 <nvs_read_hist+0xb4>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   1227c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   12280:	429f      	cmp	r7, r3
   12282:	d1ed      	bne.n	12260 <nvs_read_hist+0x4c>
   12284:	a901      	add	r1, sp, #4
   12286:	4620      	mov	r0, r4
   12288:	f016 fd9a 	bl	28dc0 <nvs_ate_valid>
   1228c:	2800      	cmp	r0, #0
   1228e:	d0e7      	beq.n	12260 <nvs_read_hist+0x4c>
			cnt_his++;
   12290:	3501      	adds	r5, #1
   12292:	b2ad      	uxth	r5, r5
   12294:	e7e4      	b.n	12260 <nvs_read_hist+0x4c>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   12296:	6862      	ldr	r2, [r4, #4]
   12298:	9b03      	ldr	r3, [sp, #12]
   1229a:	429a      	cmp	r2, r3
   1229c:	d018      	beq.n	122d0 <nvs_read_hist+0xbc>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1229e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   122a2:	b1fb      	cbz	r3, 122e4 <nvs_read_hist+0xd0>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   122a4:	45a8      	cmp	r8, r5
   122a6:	d820      	bhi.n	122ea <nvs_read_hist+0xd6>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
   122a8:	0c36      	lsrs	r6, r6, #16
   122aa:	0436      	lsls	r6, r6, #16
	rd_addr += wlk_ate.offset;
   122ac:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   122b0:	454b      	cmp	r3, r9
   122b2:	bf28      	it	cs
   122b4:	464b      	movcs	r3, r9
   122b6:	4652      	mov	r2, sl
   122b8:	4431      	add	r1, r6
   122ba:	4620      	mov	r0, r4
   122bc:	f016 fcd5 	bl	28c6a <nvs_flash_rd>
	if (rc) {
   122c0:	4603      	mov	r3, r0
   122c2:	b908      	cbnz	r0, 122c8 <nvs_read_hist+0xb4>
		goto err;
	}

	return wlk_ate.len;
   122c4:	f8bd 3008 	ldrh.w	r3, [sp, #8]

err:
	return rc;
}
   122c8:	4618      	mov	r0, r3
   122ca:	b004      	add	sp, #16
   122cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   122d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   122d4:	429f      	cmp	r7, r3
   122d6:	d0e2      	beq.n	1229e <nvs_read_hist+0x8a>
		return -ENOENT;
   122d8:	f06f 0301 	mvn.w	r3, #1
   122dc:	e7f4      	b.n	122c8 <nvs_read_hist+0xb4>
		return -EINVAL;
   122de:	f06f 0315 	mvn.w	r3, #21
   122e2:	e7f1      	b.n	122c8 <nvs_read_hist+0xb4>
		return -ENOENT;
   122e4:	f06f 0301 	mvn.w	r3, #1
   122e8:	e7ee      	b.n	122c8 <nvs_read_hist+0xb4>
   122ea:	f06f 0301 	mvn.w	r3, #1
   122ee:	e7eb      	b.n	122c8 <nvs_read_hist+0xb4>
   122f0:	00030250 	.word	0x00030250

000122f4 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
   122f4:	4684      	mov	ip, r0
	for (int i = 0; i < flash_map_entries; i++) {
   122f6:	2300      	movs	r3, #0
   122f8:	e000      	b.n	122fc <get_flash_area_from_id+0x8>
   122fa:	3301      	adds	r3, #1
   122fc:	4a07      	ldr	r2, [pc, #28]	; (1231c <get_flash_area_from_id+0x28>)
   122fe:	6812      	ldr	r2, [r2, #0]
   12300:	429a      	cmp	r2, r3
   12302:	dd08      	ble.n	12316 <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
   12304:	011a      	lsls	r2, r3, #4
   12306:	4906      	ldr	r1, [pc, #24]	; (12320 <get_flash_area_from_id+0x2c>)
   12308:	6809      	ldr	r1, [r1, #0]
   1230a:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1230e:	5c8a      	ldrb	r2, [r1, r2]
   12310:	4562      	cmp	r2, ip
   12312:	d1f2      	bne.n	122fa <get_flash_area_from_id+0x6>
   12314:	e000      	b.n	12318 <get_flash_area_from_id+0x24>
			return &flash_map[i];
		}
	}

	return NULL;
   12316:	2000      	movs	r0, #0
}
   12318:	4770      	bx	lr
   1231a:	bf00      	nop
   1231c:	00030370 	.word	0x00030370
   12320:	200005a4 	.word	0x200005a4

00012324 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   12324:	b538      	push	{r3, r4, r5, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   12326:	4b0c      	ldr	r3, [pc, #48]	; (12358 <flash_area_open+0x34>)
   12328:	681b      	ldr	r3, [r3, #0]
   1232a:	b17b      	cbz	r3, 1234c <flash_area_open+0x28>
   1232c:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   1232e:	f7ff ffe1 	bl	122f4 <get_flash_area_from_id>
	if (area == NULL) {
   12332:	4605      	mov	r5, r0
   12334:	b168      	cbz	r0, 12352 <flash_area_open+0x2e>
		return -ENOENT;
	}

	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   12336:	68c0      	ldr	r0, [r0, #12]
   12338:	b128      	cbz	r0, 12346 <flash_area_open+0x22>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1233a:	f01c fe5d 	bl	2eff8 <z_device_is_ready>
   1233e:	b110      	cbz	r0, 12346 <flash_area_open+0x22>
		return -ENODEV;
	}

	*fap = area;
   12340:	6025      	str	r5, [r4, #0]

	return 0;
   12342:	2000      	movs	r0, #0
}
   12344:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   12346:	f06f 0012 	mvn.w	r0, #18
   1234a:	e7fb      	b.n	12344 <flash_area_open+0x20>
		return -EACCES;
   1234c:	f06f 000c 	mvn.w	r0, #12
   12350:	e7f8      	b.n	12344 <flash_area_open+0x20>
		return -ENOENT;
   12352:	f06f 0001 	mvn.w	r0, #1
   12356:	e7f5      	b.n	12344 <flash_area_open+0x20>
   12358:	200005a4 	.word	0x200005a4

0001235c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   1235c:	b500      	push	{lr}
   1235e:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   12360:	ab03      	add	r3, sp, #12
   12362:	9300      	str	r3, [sp, #0]
   12364:	4b02      	ldr	r3, [pc, #8]	; (12370 <flash_area_get_sectors+0x14>)
   12366:	f016 ffe7 	bl	29338 <flash_area_layout>
}
   1236a:	b00b      	add	sp, #44	; 0x2c
   1236c:	f85d fb04 	ldr.w	pc, [sp], #4
   12370:	000292fd 	.word	0x000292fd

00012374 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   12374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   12378:	4b0f      	ldr	r3, [pc, #60]	; (123b8 <settings_save_one+0x44>)
   1237a:	681d      	ldr	r5, [r3, #0]
	if (!cs) {
   1237c:	b1cd      	cbz	r5, 123b2 <settings_save_one+0x3e>
   1237e:	4680      	mov	r8, r0
   12380:	460f      	mov	r7, r1
   12382:	4614      	mov	r4, r2
	return z_impl_k_mutex_lock(mutex, timeout);
   12384:	4e0d      	ldr	r6, [pc, #52]	; (123bc <settings_save_one+0x48>)
   12386:	f04f 32ff 	mov.w	r2, #4294967295
   1238a:	f04f 33ff 	mov.w	r3, #4294967295
   1238e:	4630      	mov	r0, r6
   12390:	f00f ff2e 	bl	221f0 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   12394:	686b      	ldr	r3, [r5, #4]
   12396:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1239a:	4623      	mov	r3, r4
   1239c:	463a      	mov	r2, r7
   1239e:	4641      	mov	r1, r8
   123a0:	4628      	mov	r0, r5
   123a2:	47c8      	blx	r9
   123a4:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   123a6:	4630      	mov	r0, r6
   123a8:	f010 f80c 	bl	223c4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   123ac:	4620      	mov	r0, r4
   123ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOENT;
   123b2:	f06f 0401 	mvn.w	r4, #1
   123b6:	e7f9      	b.n	123ac <settings_save_one+0x38>
   123b8:	200022e4 	.word	0x200022e4
   123bc:	20000a24 	.word	0x20000a24

000123c0 <settings_src_register>:
	parent->next = child;
   123c0:	2300      	movs	r3, #0
   123c2:	6003      	str	r3, [r0, #0]
	return list->tail;
   123c4:	4b05      	ldr	r3, [pc, #20]	; (123dc <settings_src_register+0x1c>)
   123c6:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   123c8:	b11b      	cbz	r3, 123d2 <settings_src_register+0x12>
	parent->next = child;
   123ca:	6018      	str	r0, [r3, #0]
	list->tail = node;
   123cc:	4b03      	ldr	r3, [pc, #12]	; (123dc <settings_src_register+0x1c>)
   123ce:	6058      	str	r0, [r3, #4]
}
   123d0:	4770      	bx	lr
   123d2:	4b02      	ldr	r3, [pc, #8]	; (123dc <settings_src_register+0x1c>)
   123d4:	6058      	str	r0, [r3, #4]
	list->head = node;
   123d6:	6018      	str	r0, [r3, #0]
}
   123d8:	4770      	bx	lr
   123da:	bf00      	nop
   123dc:	200022e8 	.word	0x200022e8

000123e0 <settings_dst_register>:
	settings_save_dst = cs;
   123e0:	4b01      	ldr	r3, [pc, #4]	; (123e8 <settings_dst_register+0x8>)
   123e2:	6018      	str	r0, [r3, #0]
}
   123e4:	4770      	bx	lr
   123e6:	bf00      	nop
   123e8:	200022e4 	.word	0x200022e4

000123ec <settings_load_subtree>:
{
   123ec:	b530      	push	{r4, r5, lr}
   123ee:	b085      	sub	sp, #20
   123f0:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   123f2:	2300      	movs	r3, #0
   123f4:	9301      	str	r3, [sp, #4]
   123f6:	9302      	str	r3, [sp, #8]
   123f8:	9303      	str	r3, [sp, #12]
   123fa:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   123fc:	f04f 32ff 	mov.w	r2, #4294967295
   12400:	f04f 33ff 	mov.w	r3, #4294967295
   12404:	480e      	ldr	r0, [pc, #56]	; (12440 <settings_load_subtree+0x54>)
   12406:	f00f fef3 	bl	221f0 <z_impl_k_mutex_lock>
	return list->head;
   1240a:	4b0e      	ldr	r3, [pc, #56]	; (12444 <settings_load_subtree+0x58>)
   1240c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1240e:	b164      	cbz	r4, 1242a <settings_load_subtree+0x3e>
		cs->cs_itf->csi_load(cs, &arg);
   12410:	6863      	ldr	r3, [r4, #4]
   12412:	681b      	ldr	r3, [r3, #0]
   12414:	a901      	add	r1, sp, #4
   12416:	4620      	mov	r0, r4
   12418:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1241a:	4623      	mov	r3, r4
	return node->next;
   1241c:	6824      	ldr	r4, [r4, #0]
   1241e:	2c00      	cmp	r4, #0
   12420:	d0f5      	beq.n	1240e <settings_load_subtree+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12422:	2b00      	cmp	r3, #0
   12424:	d1f3      	bne.n	1240e <settings_load_subtree+0x22>
   12426:	461c      	mov	r4, r3
   12428:	e7f1      	b.n	1240e <settings_load_subtree+0x22>
	rc = settings_commit_subtree(subtree);
   1242a:	4628      	mov	r0, r5
   1242c:	f000 f8e8 	bl	12600 <settings_commit_subtree>
   12430:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12432:	4803      	ldr	r0, [pc, #12]	; (12440 <settings_load_subtree+0x54>)
   12434:	f00f ffc6 	bl	223c4 <z_impl_k_mutex_unlock>
}
   12438:	4620      	mov	r0, r4
   1243a:	b005      	add	sp, #20
   1243c:	bd30      	pop	{r4, r5, pc}
   1243e:	bf00      	nop
   12440:	20000a24 	.word	0x20000a24
   12444:	200022e8 	.word	0x200022e8

00012448 <settings_load_subtree_direct>:
{
   12448:	b510      	push	{r4, lr}
   1244a:	b084      	sub	sp, #16
	const struct settings_load_arg arg = {
   1244c:	9001      	str	r0, [sp, #4]
   1244e:	9102      	str	r1, [sp, #8]
   12450:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   12452:	f04f 32ff 	mov.w	r2, #4294967295
   12456:	f04f 33ff 	mov.w	r3, #4294967295
   1245a:	480c      	ldr	r0, [pc, #48]	; (1248c <settings_load_subtree_direct+0x44>)
   1245c:	f00f fec8 	bl	221f0 <z_impl_k_mutex_lock>
	return list->head;
   12460:	4b0b      	ldr	r3, [pc, #44]	; (12490 <settings_load_subtree_direct+0x48>)
   12462:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   12464:	b164      	cbz	r4, 12480 <settings_load_subtree_direct+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   12466:	6863      	ldr	r3, [r4, #4]
   12468:	681b      	ldr	r3, [r3, #0]
   1246a:	a901      	add	r1, sp, #4
   1246c:	4620      	mov	r0, r4
   1246e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   12470:	4623      	mov	r3, r4
	return node->next;
   12472:	6824      	ldr	r4, [r4, #0]
   12474:	2c00      	cmp	r4, #0
   12476:	d0f5      	beq.n	12464 <settings_load_subtree_direct+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12478:	2b00      	cmp	r3, #0
   1247a:	d1f3      	bne.n	12464 <settings_load_subtree_direct+0x1c>
   1247c:	461c      	mov	r4, r3
   1247e:	e7f1      	b.n	12464 <settings_load_subtree_direct+0x1c>
	return z_impl_k_mutex_unlock(mutex);
   12480:	4802      	ldr	r0, [pc, #8]	; (1248c <settings_load_subtree_direct+0x44>)
   12482:	f00f ff9f 	bl	223c4 <z_impl_k_mutex_unlock>
}
   12486:	2000      	movs	r0, #0
   12488:	b004      	add	sp, #16
   1248a:	bd10      	pop	{r4, pc}
   1248c:	20000a24 	.word	0x20000a24
   12490:	200022e8 	.word	0x200022e8

00012494 <settings_store_init>:
	list->head = NULL;
   12494:	4b02      	ldr	r3, [pc, #8]	; (124a0 <settings_store_init+0xc>)
   12496:	2200      	movs	r2, #0
   12498:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1249a:	605a      	str	r2, [r3, #4]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   1249c:	4770      	bx	lr
   1249e:	bf00      	nop
   124a0:	200022e8 	.word	0x200022e8

000124a4 <settings_init>:


void settings_store_init(void);

void settings_init(void)
{
   124a4:	b508      	push	{r3, lr}
	list->head = NULL;
   124a6:	4b03      	ldr	r3, [pc, #12]	; (124b4 <settings_init+0x10>)
   124a8:	2200      	movs	r2, #0
   124aa:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   124ac:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   124ae:	f7ff fff1 	bl	12494 <settings_store_init>
}
   124b2:	bd08      	pop	{r3, pc}
   124b4:	200022f0 	.word	0x200022f0

000124b8 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   124b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   124ba:	b083      	sub	sp, #12
   124bc:	4606      	mov	r6, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   124be:	460f      	mov	r7, r1
   124c0:	b109      	cbz	r1, 124c6 <settings_parse_and_lookup+0xe>
		*next = NULL;
   124c2:	2300      	movs	r3, #0
   124c4:	600b      	str	r3, [r1, #0]
				*next = tmpnext;
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
   124c6:	4c2d      	ldr	r4, [pc, #180]	; (1257c <settings_parse_and_lookup+0xc4>)
   124c8:	2500      	movs	r5, #0
   124ca:	e004      	b.n	124d6 <settings_parse_and_lookup+0x1e>
			if (next) {
   124cc:	b10f      	cbz	r7, 124d2 <settings_parse_and_lookup+0x1a>
				*next = tmpnext;
   124ce:	9b01      	ldr	r3, [sp, #4]
   124d0:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
   124d2:	4625      	mov	r5, r4
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   124d4:	3414      	adds	r4, #20
   124d6:	4b2a      	ldr	r3, [pc, #168]	; (12580 <settings_parse_and_lookup+0xc8>)
   124d8:	429c      	cmp	r4, r3
   124da:	d819      	bhi.n	12510 <settings_parse_and_lookup+0x58>
   124dc:	4b28      	ldr	r3, [pc, #160]	; (12580 <settings_parse_and_lookup+0xc8>)
   124de:	429c      	cmp	r4, r3
   124e0:	d220      	bcs.n	12524 <settings_parse_and_lookup+0x6c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   124e2:	aa01      	add	r2, sp, #4
   124e4:	6821      	ldr	r1, [r4, #0]
   124e6:	4630      	mov	r0, r6
   124e8:	f016 ff68 	bl	293bc <settings_name_steq>
   124ec:	2800      	cmp	r0, #0
   124ee:	d0f1      	beq.n	124d4 <settings_parse_and_lookup+0x1c>
		if (!bestmatch) {
   124f0:	2d00      	cmp	r5, #0
   124f2:	d0eb      	beq.n	124cc <settings_parse_and_lookup+0x14>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   124f4:	2200      	movs	r2, #0
   124f6:	6829      	ldr	r1, [r5, #0]
   124f8:	6820      	ldr	r0, [r4, #0]
   124fa:	f016 ff5f 	bl	293bc <settings_name_steq>
   124fe:	2800      	cmp	r0, #0
   12500:	d0e8      	beq.n	124d4 <settings_parse_and_lookup+0x1c>
			if (next) {
   12502:	b11f      	cbz	r7, 1250c <settings_parse_and_lookup+0x54>
				*next = tmpnext;
   12504:	9b01      	ldr	r3, [sp, #4]
   12506:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
   12508:	4625      	mov	r5, r4
   1250a:	e7e3      	b.n	124d4 <settings_parse_and_lookup+0x1c>
   1250c:	4625      	mov	r5, r4
   1250e:	e7e1      	b.n	124d4 <settings_parse_and_lookup+0x1c>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   12510:	4c1c      	ldr	r4, [pc, #112]	; (12584 <settings_parse_and_lookup+0xcc>)
   12512:	2294      	movs	r2, #148	; 0x94
   12514:	4621      	mov	r1, r4
   12516:	481c      	ldr	r0, [pc, #112]	; (12588 <settings_parse_and_lookup+0xd0>)
   12518:	f016 fb79 	bl	28c0e <assert_print>
   1251c:	2194      	movs	r1, #148	; 0x94
   1251e:	4620      	mov	r0, r4
   12520:	f016 fb6e 	bl	28c00 <assert_post_action>
	return list->head;
   12524:	4b19      	ldr	r3, [pc, #100]	; (1258c <settings_parse_and_lookup+0xd4>)
   12526:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12528:	b13c      	cbz	r4, 1253a <settings_parse_and_lookup+0x82>
   1252a:	3c14      	subs	r4, #20
   1252c:	e005      	b.n	1253a <settings_parse_and_lookup+0x82>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1252e:	f114 0314 	adds.w	r3, r4, #20
   12532:	d017      	beq.n	12564 <settings_parse_and_lookup+0xac>
	return node->next;
   12534:	6964      	ldr	r4, [r4, #20]
   12536:	b104      	cbz	r4, 1253a <settings_parse_and_lookup+0x82>
   12538:	3c14      	subs	r4, #20
   1253a:	b1e4      	cbz	r4, 12576 <settings_parse_and_lookup+0xbe>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   1253c:	aa01      	add	r2, sp, #4
   1253e:	6821      	ldr	r1, [r4, #0]
   12540:	4630      	mov	r0, r6
   12542:	f016 ff3b 	bl	293bc <settings_name_steq>
   12546:	2800      	cmp	r0, #0
   12548:	d0f1      	beq.n	1252e <settings_parse_and_lookup+0x76>
			continue;
		}
		if (!bestmatch) {
   1254a:	b16d      	cbz	r5, 12568 <settings_parse_and_lookup+0xb0>
			if (next) {
				*next = tmpnext;
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1254c:	2200      	movs	r2, #0
   1254e:	6829      	ldr	r1, [r5, #0]
   12550:	6820      	ldr	r0, [r4, #0]
   12552:	f016 ff33 	bl	293bc <settings_name_steq>
   12556:	2800      	cmp	r0, #0
   12558:	d0ec      	beq.n	12534 <settings_parse_and_lookup+0x7c>
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   1255a:	b157      	cbz	r7, 12572 <settings_parse_and_lookup+0xba>
				*next = tmpnext;
   1255c:	9b01      	ldr	r3, [sp, #4]
   1255e:	603b      	str	r3, [r7, #0]
   12560:	4625      	mov	r5, r4
   12562:	e7e7      	b.n	12534 <settings_parse_and_lookup+0x7c>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12564:	461c      	mov	r4, r3
   12566:	e7e8      	b.n	1253a <settings_parse_and_lookup+0x82>
			if (next) {
   12568:	b10f      	cbz	r7, 1256e <settings_parse_and_lookup+0xb6>
				*next = tmpnext;
   1256a:	9b01      	ldr	r3, [sp, #4]
   1256c:	603b      	str	r3, [r7, #0]
			continue;
   1256e:	4625      	mov	r5, r4
   12570:	e7e0      	b.n	12534 <settings_parse_and_lookup+0x7c>
   12572:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   12574:	e7de      	b.n	12534 <settings_parse_and_lookup+0x7c>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   12576:	4628      	mov	r0, r5
   12578:	b003      	add	sp, #12
   1257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1257c:	0002fb60 	.word	0x0002fb60
   12580:	0002fbd8 	.word	0x0002fbd8
   12584:	000303c4 	.word	0x000303c4
   12588:	00030128 	.word	0x00030128
   1258c:	200022f0 	.word	0x200022f0

00012590 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   12590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12594:	b085      	sub	sp, #20
   12596:	4604      	mov	r4, r0
   12598:	460e      	mov	r6, r1
   1259a:	4690      	mov	r8, r2
   1259c:	461f      	mov	r7, r3
   1259e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   125a0:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
   125a2:	b1a5      	cbz	r5, 125ce <settings_call_set_handler+0x3e>
   125a4:	6829      	ldr	r1, [r5, #0]
   125a6:	b119      	cbz	r1, 125b0 <settings_call_set_handler+0x20>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   125a8:	aa03      	add	r2, sp, #12
   125aa:	f016 ff07 	bl	293bc <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   125ae:	b158      	cbz	r0, 125c8 <settings_call_set_handler+0x38>
		return 0;
	}

	if (load_arg && load_arg->cb) {
   125b0:	f8d5 9004 	ldr.w	r9, [r5, #4]
   125b4:	f1b9 0f00 	cmp.w	r9, #0
   125b8:	d009      	beq.n	125ce <settings_call_set_handler+0x3e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
   125ba:	68ab      	ldr	r3, [r5, #8]
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   125bc:	9300      	str	r3, [sp, #0]
   125be:	463b      	mov	r3, r7
   125c0:	4642      	mov	r2, r8
   125c2:	4631      	mov	r1, r6
   125c4:	9803      	ldr	r0, [sp, #12]
   125c6:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   125c8:	b005      	add	sp, #20
   125ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ch = settings_parse_and_lookup(name, &name_key);
   125ce:	a903      	add	r1, sp, #12
   125d0:	4620      	mov	r0, r4
   125d2:	f7ff ff71 	bl	124b8 <settings_parse_and_lookup>
		if (!ch) {
   125d6:	b178      	cbz	r0, 125f8 <settings_call_set_handler+0x68>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   125d8:	6885      	ldr	r5, [r0, #8]
   125da:	463b      	mov	r3, r7
   125dc:	4642      	mov	r2, r8
   125de:	4631      	mov	r1, r6
   125e0:	9803      	ldr	r0, [sp, #12]
   125e2:	47a8      	blx	r5
   125e4:	4603      	mov	r3, r0
		if (rc != 0) {
   125e6:	2800      	cmp	r0, #0
   125e8:	d0ee      	beq.n	125c8 <settings_call_set_handler+0x38>
			LOG_ERR("set-value failure. key: %s error(%d)",
   125ea:	4622      	mov	r2, r4
   125ec:	2145      	movs	r1, #69	; 0x45
   125ee:	4803      	ldr	r0, [pc, #12]	; (125fc <settings_call_set_handler+0x6c>)
   125f0:	f016 fb2d 	bl	28c4e <z_log_minimal_printk>
			rc = 0;
   125f4:	2000      	movs	r0, #0
   125f6:	e7e7      	b.n	125c8 <settings_call_set_handler+0x38>
			return 0;
   125f8:	2000      	movs	r0, #0
   125fa:	e7e5      	b.n	125c8 <settings_call_set_handler+0x38>
   125fc:	000303f8 	.word	0x000303f8

00012600 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   12600:	b570      	push	{r4, r5, r6, lr}
   12602:	4605      	mov	r5, r0
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   12604:	4c21      	ldr	r4, [pc, #132]	; (1268c <settings_commit_subtree+0x8c>)
	rc = 0;
   12606:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   12608:	e000      	b.n	1260c <settings_commit_subtree+0xc>
   1260a:	3414      	adds	r4, #20
   1260c:	4b20      	ldr	r3, [pc, #128]	; (12690 <settings_commit_subtree+0x90>)
   1260e:	429c      	cmp	r4, r3
   12610:	d812      	bhi.n	12638 <settings_commit_subtree+0x38>
   12612:	4b1f      	ldr	r3, [pc, #124]	; (12690 <settings_commit_subtree+0x90>)
   12614:	429c      	cmp	r4, r3
   12616:	d219      	bcs.n	1264c <settings_commit_subtree+0x4c>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   12618:	b135      	cbz	r5, 12628 <settings_commit_subtree+0x28>
   1261a:	2200      	movs	r2, #0
   1261c:	4629      	mov	r1, r5
   1261e:	6820      	ldr	r0, [r4, #0]
   12620:	f016 fecc 	bl	293bc <settings_name_steq>
   12624:	2800      	cmp	r0, #0
   12626:	d0f0      	beq.n	1260a <settings_commit_subtree+0xa>
			continue;
		}
		if (ch->h_commit) {
   12628:	68e3      	ldr	r3, [r4, #12]
   1262a:	2b00      	cmp	r3, #0
   1262c:	d0ed      	beq.n	1260a <settings_commit_subtree+0xa>
			rc2 = ch->h_commit();
   1262e:	4798      	blx	r3
			if (!rc) {
   12630:	2e00      	cmp	r6, #0
   12632:	d1ea      	bne.n	1260a <settings_commit_subtree+0xa>
				rc = rc2;
   12634:	4606      	mov	r6, r0
   12636:	e7e8      	b.n	1260a <settings_commit_subtree+0xa>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   12638:	4c16      	ldr	r4, [pc, #88]	; (12694 <settings_commit_subtree+0x94>)
   1263a:	22f4      	movs	r2, #244	; 0xf4
   1263c:	4621      	mov	r1, r4
   1263e:	4816      	ldr	r0, [pc, #88]	; (12698 <settings_commit_subtree+0x98>)
   12640:	f016 fae5 	bl	28c0e <assert_print>
   12644:	21f4      	movs	r1, #244	; 0xf4
   12646:	4620      	mov	r0, r4
   12648:	f016 fada 	bl	28c00 <assert_post_action>
	return list->head;
   1264c:	4b13      	ldr	r3, [pc, #76]	; (1269c <settings_commit_subtree+0x9c>)
   1264e:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12650:	b13c      	cbz	r4, 12662 <settings_commit_subtree+0x62>
   12652:	3c14      	subs	r4, #20
   12654:	e005      	b.n	12662 <settings_commit_subtree+0x62>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12656:	f114 0314 	adds.w	r3, r4, #20
   1265a:	d013      	beq.n	12684 <settings_commit_subtree+0x84>
	return node->next;
   1265c:	6964      	ldr	r4, [r4, #20]
   1265e:	b104      	cbz	r4, 12662 <settings_commit_subtree+0x62>
   12660:	3c14      	subs	r4, #20
   12662:	b18c      	cbz	r4, 12688 <settings_commit_subtree+0x88>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   12664:	b135      	cbz	r5, 12674 <settings_commit_subtree+0x74>
   12666:	2200      	movs	r2, #0
   12668:	4629      	mov	r1, r5
   1266a:	6820      	ldr	r0, [r4, #0]
   1266c:	f016 fea6 	bl	293bc <settings_name_steq>
   12670:	2800      	cmp	r0, #0
   12672:	d0f0      	beq.n	12656 <settings_commit_subtree+0x56>
			continue;
		}
		if (ch->h_commit) {
   12674:	68e3      	ldr	r3, [r4, #12]
   12676:	2b00      	cmp	r3, #0
   12678:	d0f0      	beq.n	1265c <settings_commit_subtree+0x5c>
			rc2 = ch->h_commit();
   1267a:	4798      	blx	r3
			if (!rc) {
   1267c:	2e00      	cmp	r6, #0
   1267e:	d1ed      	bne.n	1265c <settings_commit_subtree+0x5c>
				rc = rc2;
   12680:	4606      	mov	r6, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   12682:	e7eb      	b.n	1265c <settings_commit_subtree+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12684:	461c      	mov	r4, r3
   12686:	e7ec      	b.n	12662 <settings_commit_subtree+0x62>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   12688:	4630      	mov	r0, r6
   1268a:	bd70      	pop	{r4, r5, r6, pc}
   1268c:	0002fb60 	.word	0x0002fb60
   12690:	0002fbd8 	.word	0x0002fbd8
   12694:	000303c4 	.word	0x000303c4
   12698:	00030128 	.word	0x00030128
   1269c:	200022f0 	.word	0x200022f0

000126a0 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   126a0:	b508      	push	{r3, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   126a2:	4b07      	ldr	r3, [pc, #28]	; (126c0 <settings_subsys_init+0x20>)
   126a4:	781b      	ldrb	r3, [r3, #0]
   126a6:	b10b      	cbz	r3, 126ac <settings_subsys_init+0xc>
		return 0;
   126a8:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   126aa:	bd08      	pop	{r3, pc}
	settings_init();
   126ac:	f7ff fefa 	bl	124a4 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   126b0:	f000 f87a 	bl	127a8 <settings_backend_init>
	if (!err) {
   126b4:	2800      	cmp	r0, #0
   126b6:	d1f8      	bne.n	126aa <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   126b8:	4b01      	ldr	r3, [pc, #4]	; (126c0 <settings_subsys_init+0x20>)
   126ba:	2201      	movs	r2, #1
   126bc:	701a      	strb	r2, [r3, #0]
   126be:	e7f4      	b.n	126aa <settings_subsys_init+0xa>
   126c0:	200045ee 	.word	0x200045ee

000126c4 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   126c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126c8:	b098      	sub	sp, #96	; 0x60
   126ca:	4680      	mov	r8, r0
   126cc:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   126ce:	8f04      	ldrh	r4, [r0, #56]	; 0x38
   126d0:	3401      	adds	r4, #1
   126d2:	b2a4      	uxth	r4, r4
	int ret = 0;
   126d4:	f04f 0a00 	mov.w	sl, #0
   126d8:	e00e      	b.n	126f8 <settings_nvs_load+0x34>
		 */
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
			       &buf, sizeof(buf));

		if ((rc1 <= 0) && (rc2 <= 0)) {
   126da:	2800      	cmp	r0, #0
   126dc:	dd0b      	ble.n	126f6 <settings_nvs_load+0x32>
			/* Settings item is not stored correctly in the NVS.
			 * NVS entry for its name or value is either missing
			 * or deleted. Clean dirty entries to make space for
			 * future settings item.
			 */
			if (name_id == cf->last_name_id) {
   126de:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   126e2:	42ab      	cmp	r3, r5
   126e4:	d03e      	beq.n	12764 <settings_nvs_load+0xa0>
				cf->last_name_id--;
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
					  &cf->last_name_id, sizeof(uint16_t));
			}
			nvs_delete(&cf->cf_nvs, name_id);
   126e6:	4629      	mov	r1, r5
   126e8:	4638      	mov	r0, r7
   126ea:	f016 fddb 	bl	292a4 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   126ee:	4621      	mov	r1, r4
   126f0:	4638      	mov	r0, r7
   126f2:	f016 fdd7 	bl	292a4 <nvs_delete>
{
   126f6:	462c      	mov	r4, r5
		name_id--;
   126f8:	1e65      	subs	r5, r4, #1
   126fa:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   126fc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   12700:	d02c      	beq.n	1275c <settings_nvs_load+0x98>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   12702:	f108 0708 	add.w	r7, r8, #8
   12706:	234a      	movs	r3, #74	; 0x4a
   12708:	aa03      	add	r2, sp, #12
   1270a:	4629      	mov	r1, r5
   1270c:	4638      	mov	r0, r7
   1270e:	f016 fdcf 	bl	292b0 <nvs_read>
   12712:	4606      	mov	r6, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   12714:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   12718:	343f      	adds	r4, #63	; 0x3f
   1271a:	b2a4      	uxth	r4, r4
   1271c:	2301      	movs	r3, #1
   1271e:	f10d 020b 	add.w	r2, sp, #11
   12722:	4621      	mov	r1, r4
   12724:	4638      	mov	r0, r7
   12726:	f016 fdc3 	bl	292b0 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1272a:	2e00      	cmp	r6, #0
   1272c:	ddd5      	ble.n	126da <settings_nvs_load+0x16>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   1272e:	2800      	cmp	r0, #0
   12730:	ddd5      	ble.n	126de <settings_nvs_load+0x1a>
			continue;
		}

		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
   12732:	f106 0360 	add.w	r3, r6, #96	; 0x60
   12736:	eb0d 0603 	add.w	r6, sp, r3
   1273a:	2300      	movs	r3, #0
   1273c:	f806 3c54 	strb.w	r3, [r6, #-84]
		read_fn_arg.fs = &cf->cf_nvs;
   12740:	9716      	str	r7, [sp, #88]	; 0x58
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   12742:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c

		ret = settings_call_set_handler(
   12746:	f8cd 9000 	str.w	r9, [sp]
   1274a:	ab16      	add	r3, sp, #88	; 0x58
   1274c:	4a0b      	ldr	r2, [pc, #44]	; (1277c <settings_nvs_load+0xb8>)
   1274e:	4601      	mov	r1, r0
   12750:	a803      	add	r0, sp, #12
   12752:	f7ff ff1d 	bl	12590 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   12756:	4682      	mov	sl, r0
   12758:	2800      	cmp	r0, #0
   1275a:	d0cc      	beq.n	126f6 <settings_nvs_load+0x32>
			break;
		}
	}
	return ret;
}
   1275c:	4650      	mov	r0, sl
   1275e:	b018      	add	sp, #96	; 0x60
   12760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				cf->last_name_id--;
   12764:	3b01      	subs	r3, #1
   12766:	4642      	mov	r2, r8
   12768:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1276c:	2302      	movs	r3, #2
   1276e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12772:	4638      	mov	r0, r7
   12774:	f7ff fc96 	bl	120a4 <nvs_write>
   12778:	e7b5      	b.n	126e6 <settings_nvs_load+0x22>
   1277a:	bf00      	nop
   1277c:	0002944d 	.word	0x0002944d

00012780 <settings_nvs_src>:
{
   12780:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
   12782:	4b03      	ldr	r3, [pc, #12]	; (12790 <settings_nvs_src+0x10>)
   12784:	6043      	str	r3, [r0, #4]
	settings_src_register(&cf->cf_store);
   12786:	f7ff fe1b 	bl	123c0 <settings_src_register>
}
   1278a:	2000      	movs	r0, #0
   1278c:	bd08      	pop	{r3, pc}
   1278e:	bf00      	nop
   12790:	200005a8 	.word	0x200005a8

00012794 <settings_nvs_dst>:
{
   12794:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
   12796:	4b03      	ldr	r3, [pc, #12]	; (127a4 <settings_nvs_dst+0x10>)
   12798:	6043      	str	r3, [r0, #4]
	settings_dst_register(&cf->cf_store);
   1279a:	f7ff fe21 	bl	123e0 <settings_dst_register>
}
   1279e:	2000      	movs	r0, #0
   127a0:	bd08      	pop	{r3, pc}
   127a2:	bf00      	nop
   127a4:	200005a8 	.word	0x200005a8

000127a8 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   127a8:	b510      	push	{r4, lr}
   127aa:	b084      	sub	sp, #16
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   127ac:	2301      	movs	r3, #1
   127ae:	9300      	str	r3, [sp, #0]

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   127b0:	a903      	add	r1, sp, #12
   127b2:	2004      	movs	r0, #4
   127b4:	f7ff fdb6 	bl	12324 <flash_area_open>
	if (rc) {
   127b8:	4603      	mov	r3, r0
   127ba:	b110      	cbz	r0, 127c2 <settings_backend_init+0x1a>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   127bc:	4618      	mov	r0, r3
   127be:	b004      	add	sp, #16
   127c0:	bd10      	pop	{r4, pc}
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   127c2:	aa01      	add	r2, sp, #4
   127c4:	4669      	mov	r1, sp
   127c6:	2004      	movs	r0, #4
   127c8:	f7ff fdc8 	bl	1235c <flash_area_get_sectors>
   127cc:	4603      	mov	r3, r0
	if (rc == -ENODEV) {
   127ce:	f110 0f13 	cmn.w	r0, #19
   127d2:	d0f3      	beq.n	127bc <settings_backend_init+0x14>
	} else if (rc != 0 && rc != -ENOMEM) {
   127d4:	b140      	cbz	r0, 127e8 <settings_backend_init+0x40>
   127d6:	f110 0f0c 	cmn.w	r0, #12
   127da:	d005      	beq.n	127e8 <settings_backend_init+0x40>
		k_panic();
   127dc:	4040      	eors	r0, r0
   127de:	f380 8811 	msr	BASEPRI, r0
   127e2:	f04f 0004 	mov.w	r0, #4
   127e6:	df02      	svc	2
	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   127e8:	9c02      	ldr	r4, [sp, #8]
	if (nvs_sector_size > UINT16_MAX) {
   127ea:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   127ee:	d223      	bcs.n	12838 <settings_backend_init+0x90>
	size_t nvs_sector_size, nvs_size = 0;
   127f0:	2200      	movs	r2, #0
	uint16_t cnt = 0;
   127f2:	4613      	mov	r3, r2
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   127f4:	2b07      	cmp	r3, #7
   127f6:	d807      	bhi.n	12808 <settings_backend_init+0x60>
		nvs_size += nvs_sector_size;
   127f8:	4422      	add	r2, r4
		if (nvs_size > fa->fa_size) {
   127fa:	9903      	ldr	r1, [sp, #12]
   127fc:	6889      	ldr	r1, [r1, #8]
   127fe:	4291      	cmp	r1, r2
   12800:	d302      	bcc.n	12808 <settings_backend_init+0x60>
		cnt++;
   12802:	3301      	adds	r3, #1
   12804:	b29b      	uxth	r3, r3
   12806:	e7f5      	b.n	127f4 <settings_backend_init+0x4c>
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   12808:	480d      	ldr	r0, [pc, #52]	; (12840 <settings_backend_init+0x98>)
   1280a:	8284      	strh	r4, [r0, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   1280c:	82c3      	strh	r3, [r0, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   1280e:	9b03      	ldr	r3, [sp, #12]
   12810:	685a      	ldr	r2, [r3, #4]
   12812:	6082      	str	r2, [r0, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;
   12814:	68db      	ldr	r3, [r3, #12]
   12816:	63c3      	str	r3, [r0, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   12818:	f016 fec7 	bl	295aa <settings_nvs_backend_init>
	if (rc) {
   1281c:	4603      	mov	r3, r0
   1281e:	2800      	cmp	r0, #0
   12820:	d1cc      	bne.n	127bc <settings_backend_init+0x14>
	rc = settings_nvs_src(&default_settings_nvs);
   12822:	4807      	ldr	r0, [pc, #28]	; (12840 <settings_backend_init+0x98>)
   12824:	f7ff ffac 	bl	12780 <settings_nvs_src>
	if (rc) {
   12828:	4603      	mov	r3, r0
   1282a:	2800      	cmp	r0, #0
   1282c:	d1c6      	bne.n	127bc <settings_backend_init+0x14>
	rc = settings_nvs_dst(&default_settings_nvs);
   1282e:	4804      	ldr	r0, [pc, #16]	; (12840 <settings_backend_init+0x98>)
   12830:	f7ff ffb0 	bl	12794 <settings_nvs_dst>
   12834:	4603      	mov	r3, r0
	return rc;
   12836:	e7c1      	b.n	127bc <settings_backend_init+0x14>
		return -EDOM;
   12838:	f06f 0320 	mvn.w	r3, #32
   1283c:	e7be      	b.n	127bc <settings_backend_init+0x14>
   1283e:	bf00      	nop
   12840:	200022f8 	.word	0x200022f8

00012844 <pm_exit_pos_ops>:
}
#endif  /* !CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE */
#endif	/* CONFIG_PM_DEVICE */

static inline void pm_exit_pos_ops(struct pm_state_info *info)
{
   12844:	b508      	push	{r3, lr}
	extern __weak void
		pm_state_exit_post_ops(enum pm_state state, uint8_t substate_id);

	if (pm_state_exit_post_ops != NULL) {
   12846:	4b06      	ldr	r3, [pc, #24]	; (12860 <pm_exit_pos_ops+0x1c>)
   12848:	b123      	cbz	r3, 12854 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1284a:	7841      	ldrb	r1, [r0, #1]
   1284c:	7800      	ldrb	r0, [r0, #0]
   1284e:	f017 fb14 	bl	29e7a <pm_state_exit_post_ops>
		 * The kernel expects that irqs are unlocked after this.
		 */

		irq_unlock(0);
	}
}
   12852:	bd08      	pop	{r3, pc}
	__asm__ volatile(
   12854:	2300      	movs	r3, #0
   12856:	f383 8811 	msr	BASEPRI, r3
   1285a:	f3bf 8f6f 	isb	sy
   1285e:	e7f8      	b.n	12852 <pm_exit_pos_ops+0xe>
   12860:	00029e7b 	.word	0x00029e7b

00012864 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12864:	b570      	push	{r4, r5, r6, lr}
   12866:	4605      	mov	r5, r0
	__asm__ volatile(
   12868:	f04f 0340 	mov.w	r3, #64	; 0x40
   1286c:	f3ef 8611 	mrs	r6, BASEPRI
   12870:	f383 8812 	msr	BASEPRI_MAX, r3
   12874:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12878:	481d      	ldr	r0, [pc, #116]	; (128f0 <pm_state_notify+0x8c>)
   1287a:	f00f fad3 	bl	21e24 <z_spin_lock_valid>
   1287e:	b128      	cbz	r0, 1288c <pm_state_notify+0x28>
	z_spin_lock_set_owner(l);
   12880:	481b      	ldr	r0, [pc, #108]	; (128f0 <pm_state_notify+0x8c>)
   12882:	f00f faef 	bl	21e64 <z_spin_lock_set_owner>
	return list->head;
   12886:	4b1b      	ldr	r3, [pc, #108]	; (128f4 <pm_state_notify+0x90>)
   12888:	681c      	ldr	r4, [r3, #0]
   1288a:	e017      	b.n	128bc <pm_state_notify+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1288c:	4c1a      	ldr	r4, [pc, #104]	; (128f8 <pm_state_notify+0x94>)
   1288e:	2294      	movs	r2, #148	; 0x94
   12890:	4621      	mov	r1, r4
   12892:	481a      	ldr	r0, [pc, #104]	; (128fc <pm_state_notify+0x98>)
   12894:	f016 f9bb 	bl	28c0e <assert_print>
   12898:	2194      	movs	r1, #148	; 0x94
   1289a:	4620      	mov	r0, r4
   1289c:	f016 f9b0 	bl	28c00 <assert_post_action>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   128a0:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   128a2:	b13a      	cbz	r2, 128b4 <pm_state_notify+0x50>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   128a4:	4b16      	ldr	r3, [pc, #88]	; (12900 <pm_state_notify+0x9c>)
   128a6:	7d1b      	ldrb	r3, [r3, #20]
   128a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   128ac:	4915      	ldr	r1, [pc, #84]	; (12904 <pm_state_notify+0xa0>)
   128ae:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   128b2:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   128b4:	4623      	mov	r3, r4
	return node->next;
   128b6:	6824      	ldr	r4, [r4, #0]
   128b8:	b104      	cbz	r4, 128bc <pm_state_notify+0x58>
Z_GENLIST_PEEK_NEXT(slist, snode)
   128ba:	b123      	cbz	r3, 128c6 <pm_state_notify+0x62>
   128bc:	b12c      	cbz	r4, 128ca <pm_state_notify+0x66>
		if (entering_state) {
   128be:	2d00      	cmp	r5, #0
   128c0:	d0ee      	beq.n	128a0 <pm_state_notify+0x3c>
			callback = notifier->state_entry;
   128c2:	6862      	ldr	r2, [r4, #4]
   128c4:	e7ed      	b.n	128a2 <pm_state_notify+0x3e>
   128c6:	461c      	mov	r4, r3
   128c8:	e7f8      	b.n	128bc <pm_state_notify+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   128ca:	4809      	ldr	r0, [pc, #36]	; (128f0 <pm_state_notify+0x8c>)
   128cc:	f00f faba 	bl	21e44 <z_spin_unlock_valid>
   128d0:	b120      	cbz	r0, 128dc <pm_state_notify+0x78>
	__asm__ volatile(
   128d2:	f386 8811 	msr	BASEPRI, r6
   128d6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   128da:	bd70      	pop	{r4, r5, r6, pc}
   128dc:	4c06      	ldr	r4, [pc, #24]	; (128f8 <pm_state_notify+0x94>)
   128de:	22c2      	movs	r2, #194	; 0xc2
   128e0:	4621      	mov	r1, r4
   128e2:	4806      	ldr	r0, [pc, #24]	; (128fc <pm_state_notify+0x98>)
   128e4:	f016 f993 	bl	28c0e <assert_print>
   128e8:	21c2      	movs	r1, #194	; 0xc2
   128ea:	4620      	mov	r0, r4
   128ec:	f016 f988 	bl	28c00 <assert_post_action>
   128f0:	20002338 	.word	0x20002338
   128f4:	20002358 	.word	0x20002358
   128f8:	00030164 	.word	0x00030164
   128fc:	00030128 	.word	0x00030128
   12900:	20003ac0 	.word	0x20003ac0
   12904:	2000234c 	.word	0x2000234c

00012908 <pm_system_resume>:

void pm_system_resume(void)
{
   12908:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1290a:	4b0e      	ldr	r3, [pc, #56]	; (12944 <pm_system_resume+0x3c>)
   1290c:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1290e:	4621      	mov	r1, r4
   12910:	480d      	ldr	r0, [pc, #52]	; (12948 <pm_system_resume+0x40>)
   12912:	f016 fe6f 	bl	295f4 <atomic_test_and_clear_bit>
   12916:	b900      	cbnz	r0, 1291a <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   12918:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   1291a:	0065      	lsls	r5, r4, #1
   1291c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   12920:	4e0a      	ldr	r6, [pc, #40]	; (1294c <pm_system_resume+0x44>)
   12922:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   12926:	f7ff ff8d 	bl	12844 <pm_exit_pos_ops>
		pm_state_notify(false);
   1292a:	2000      	movs	r0, #0
   1292c:	f7ff ff9a 	bl	12864 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   12930:	192b      	adds	r3, r5, r4
   12932:	0099      	lsls	r1, r3, #2
   12934:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12938:	2200      	movs	r2, #0
   1293a:	5072      	str	r2, [r6, r1]
   1293c:	605a      	str	r2, [r3, #4]
   1293e:	609a      	str	r2, [r3, #8]
}
   12940:	e7ea      	b.n	12918 <pm_system_resume+0x10>
   12942:	bf00      	nop
   12944:	20003ac0 	.word	0x20003ac0
   12948:	20002360 	.word	0x20002360
   1294c:	2000234c 	.word	0x2000234c

00012950 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   12950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12952:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   12954:	4b4a      	ldr	r3, [pc, #296]	; (12a80 <pm_system_suspend+0x130>)
   12956:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
   12958:	f04f 0340 	mov.w	r3, #64	; 0x40
   1295c:	f3ef 8611 	mrs	r6, BASEPRI
   12960:	f383 8812 	msr	BASEPRI_MAX, r3
   12964:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12968:	4846      	ldr	r0, [pc, #280]	; (12a84 <pm_system_suspend+0x134>)
   1296a:	f00f fa5b 	bl	21e24 <z_spin_lock_valid>
   1296e:	2800      	cmp	r0, #0
   12970:	d04b      	beq.n	12a0a <pm_system_suspend+0xba>
	z_spin_lock_set_owner(l);
   12972:	4844      	ldr	r0, [pc, #272]	; (12a84 <pm_system_suspend+0x134>)
   12974:	f00f fa76 	bl	21e64 <z_spin_lock_set_owner>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   12978:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1297c:	4a42      	ldr	r2, [pc, #264]	; (12a88 <pm_system_suspend+0x138>)
   1297e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   12982:	2b00      	cmp	r3, #0
   12984:	d04b      	beq.n	12a1e <pm_system_suspend+0xce>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   12986:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1298a:	4b40      	ldr	r3, [pc, #256]	; (12a8c <pm_system_suspend+0x13c>)
   1298c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   12990:	4f3d      	ldr	r7, [pc, #244]	; (12a88 <pm_system_suspend+0x138>)
   12992:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   12996:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   1299a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1299e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   129a2:	2300      	movs	r3, #0
   129a4:	f807 300e 	strb.w	r3, [r7, lr]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   129a8:	4836      	ldr	r0, [pc, #216]	; (12a84 <pm_system_suspend+0x134>)
   129aa:	f00f fa4b 	bl	21e44 <z_spin_unlock_valid>
   129ae:	4607      	mov	r7, r0
   129b0:	2800      	cmp	r0, #0
   129b2:	d043      	beq.n	12a3c <pm_system_suspend+0xec>
	__asm__ volatile(
   129b4:	f386 8811 	msr	BASEPRI, r6
   129b8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   129bc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   129c0:	4a32      	ldr	r2, [pc, #200]	; (12a8c <pm_system_suspend+0x13c>)
   129c2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   129c6:	2b00      	cmp	r3, #0
   129c8:	d058      	beq.n	12a7c <pm_system_suspend+0x12c>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   129ca:	f1b5 3fff 	cmp.w	r5, #4294967295
   129ce:	d13f      	bne.n	12a50 <pm_system_suspend+0x100>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   129d0:	f010 fdac 	bl	2352c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   129d4:	2001      	movs	r0, #1
   129d6:	f7ff ff45 	bl	12864 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   129da:	4621      	mov	r1, r4
   129dc:	482c      	ldr	r0, [pc, #176]	; (12a90 <pm_system_suspend+0x140>)
   129de:	f016 fe25 	bl	2962c <atomic_set_bit>
	if (pm_state_set != NULL) {
   129e2:	4b2c      	ldr	r3, [pc, #176]	; (12a94 <pm_system_suspend+0x144>)
   129e4:	b15b      	cbz	r3, 129fe <pm_system_suspend+0xae>
		pm_state_set(info->state, info->substate_id);
   129e6:	4a29      	ldr	r2, [pc, #164]	; (12a8c <pm_system_suspend+0x13c>)
   129e8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   129ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   129f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   129f4:	7859      	ldrb	r1, [r3, #1]
   129f6:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   129fa:	f017 fa36 	bl	29e6a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   129fe:	f7ff ff83 	bl	12908 <pm_system_resume>
	k_sched_unlock();
   12a02:	f011 fa17 	bl	23e34 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   12a06:	4638      	mov	r0, r7
   12a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12a0a:	4c23      	ldr	r4, [pc, #140]	; (12a98 <pm_system_suspend+0x148>)
   12a0c:	2294      	movs	r2, #148	; 0x94
   12a0e:	4621      	mov	r1, r4
   12a10:	4822      	ldr	r0, [pc, #136]	; (12a9c <pm_system_suspend+0x14c>)
   12a12:	f016 f8fc 	bl	28c0e <assert_print>
   12a16:	2194      	movs	r1, #148	; 0x94
   12a18:	4620      	mov	r0, r4
   12a1a:	f016 f8f1 	bl	28c00 <assert_post_action>
		info = pm_policy_next_state(id, ticks);
   12a1e:	4629      	mov	r1, r5
   12a20:	4620      	mov	r0, r4
   12a22:	f000 f841 	bl	12aa8 <pm_policy_next_state>
		if (info != NULL) {
   12a26:	2800      	cmp	r0, #0
   12a28:	d0be      	beq.n	129a8 <pm_system_suspend+0x58>
			z_cpus_pm_state[id] = *info;
   12a2a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   12a2e:	4b17      	ldr	r3, [pc, #92]	; (12a8c <pm_system_suspend+0x13c>)
   12a30:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12a34:	c807      	ldmia	r0, {r0, r1, r2}
   12a36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   12a3a:	e7b5      	b.n	129a8 <pm_system_suspend+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12a3c:	4c16      	ldr	r4, [pc, #88]	; (12a98 <pm_system_suspend+0x148>)
   12a3e:	22c2      	movs	r2, #194	; 0xc2
   12a40:	4621      	mov	r1, r4
   12a42:	4816      	ldr	r0, [pc, #88]	; (12a9c <pm_system_suspend+0x14c>)
   12a44:	f016 f8e3 	bl	28c0e <assert_print>
   12a48:	21c2      	movs	r1, #194	; 0xc2
   12a4a:	4620      	mov	r0, r4
   12a4c:	f016 f8d8 	bl	28c00 <assert_post_action>
		     k_us_to_ticks_ceil32(
   12a50:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   12a54:	4b0d      	ldr	r3, [pc, #52]	; (12a8c <pm_system_suspend+0x13c>)
   12a56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   12a5a:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12a5c:	0c41      	lsrs	r1, r0, #17
   12a5e:	03c0      	lsls	r0, r0, #15
   12a60:	4b0f      	ldr	r3, [pc, #60]	; (12aa0 <pm_system_suspend+0x150>)
   12a62:	18c0      	adds	r0, r0, r3
   12a64:	4a0f      	ldr	r2, [pc, #60]	; (12aa4 <pm_system_suspend+0x154>)
   12a66:	f04f 0300 	mov.w	r3, #0
   12a6a:	f141 0100 	adc.w	r1, r1, #0
   12a6e:	f7ed fb47 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   12a72:	2101      	movs	r1, #1
   12a74:	1a28      	subs	r0, r5, r0
   12a76:	f011 fed3 	bl	24820 <z_set_timeout_expiry>
   12a7a:	e7a9      	b.n	129d0 <pm_system_suspend+0x80>
		return false;
   12a7c:	2700      	movs	r7, #0
   12a7e:	e7c2      	b.n	12a06 <pm_system_suspend+0xb6>
   12a80:	20003ac0 	.word	0x20003ac0
   12a84:	2000233c 	.word	0x2000233c
   12a88:	20002340 	.word	0x20002340
   12a8c:	2000234c 	.word	0x2000234c
   12a90:	20002360 	.word	0x20002360
   12a94:	00029e6b 	.word	0x00029e6b
   12a98:	00030164 	.word	0x00030164
   12a9c:	00030128 	.word	0x00030128
   12aa0:	000f423f 	.word	0x000f423f
   12aa4:	000f4240 	.word	0x000f4240

00012aa8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   12aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12aac:	b082      	sub	sp, #8
   12aae:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12ab0:	a901      	add	r1, sp, #4
   12ab2:	f000 f845 	bl	12b40 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12ab6:	1e44      	subs	r4, r0, #1
   12ab8:	b224      	sxth	r4, r4
   12aba:	e007      	b.n	12acc <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   12abc:	f1b6 3fff 	cmp.w	r6, #4294967295
   12ac0:	d033      	beq.n	12b2a <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   12ac2:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   12ac4:	45b0      	cmp	r8, r6
   12ac6:	d930      	bls.n	12b2a <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12ac8:	3c01      	subs	r4, #1
   12aca:	b224      	sxth	r4, r4
   12acc:	2c00      	cmp	r4, #0
   12ace:	db2b      	blt.n	12b28 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   12ad0:	9b01      	ldr	r3, [sp, #4]
   12ad2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   12ad6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   12ada:	7869      	ldrb	r1, [r5, #1]
   12adc:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   12ae0:	f016 fdb7 	bl	29652 <pm_policy_state_lock_is_active>
   12ae4:	2800      	cmp	r0, #0
   12ae6:	d1ef      	bne.n	12ac8 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   12ae8:	6868      	ldr	r0, [r5, #4]
   12aea:	0c41      	lsrs	r1, r0, #17
   12aec:	03c0      	lsls	r0, r0, #15
   12aee:	4f11      	ldr	r7, [pc, #68]	; (12b34 <pm_policy_next_state+0x8c>)
   12af0:	19c0      	adds	r0, r0, r7
   12af2:	4a11      	ldr	r2, [pc, #68]	; (12b38 <pm_policy_next_state+0x90>)
   12af4:	f04f 0300 	mov.w	r3, #0
   12af8:	f141 0100 	adc.w	r1, r1, #0
   12afc:	f7ed fb00 	bl	100 <__aeabi_uldivmod>
   12b00:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   12b02:	68ab      	ldr	r3, [r5, #8]
   12b04:	0c59      	lsrs	r1, r3, #17
   12b06:	03db      	lsls	r3, r3, #15
   12b08:	19d8      	adds	r0, r3, r7
   12b0a:	4a0b      	ldr	r2, [pc, #44]	; (12b38 <pm_policy_next_state+0x90>)
   12b0c:	f04f 0300 	mov.w	r3, #0
   12b10:	f141 0100 	adc.w	r1, r1, #0
   12b14:	f7ed faf4 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12b18:	4b08      	ldr	r3, [pc, #32]	; (12b3c <pm_policy_next_state+0x94>)
   12b1a:	681b      	ldr	r3, [r3, #0]
   12b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
   12b20:	d0cc      	beq.n	12abc <pm_policy_next_state+0x14>
   12b22:	4283      	cmp	r3, r0
   12b24:	d8ca      	bhi.n	12abc <pm_policy_next_state+0x14>
   12b26:	e7cf      	b.n	12ac8 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   12b28:	2500      	movs	r5, #0
}
   12b2a:	4628      	mov	r0, r5
   12b2c:	b002      	add	sp, #8
   12b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12b32:	bf00      	nop
   12b34:	000f423f 	.word	0x000f423f
   12b38:	000f4240 	.word	0x000f4240
   12b3c:	200005bc 	.word	0x200005bc

00012b40 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   12b40:	b908      	cbnz	r0, 12b46 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   12b42:	4b02      	ldr	r3, [pc, #8]	; (12b4c <pm_state_cpu_get_all+0xc>)
   12b44:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   12b46:	2000      	movs	r0, #0
   12b48:	4770      	bx	lr
   12b4a:	bf00      	nop
   12b4c:	00030434 	.word	0x00030434

00012b50 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   12b50:	2901      	cmp	r1, #1
   12b52:	bf14      	ite	ne
   12b54:	2100      	movne	r1, #0
   12b56:	2101      	moveq	r1, #1
   12b58:	4b01      	ldr	r3, [pc, #4]	; (12b60 <lbslc_ccc_cfg_changed+0x10>)
   12b5a:	7019      	strb	r1, [r3, #0]
}
   12b5c:	4770      	bx	lr
   12b5e:	bf00      	nop
   12b60:	200045f0 	.word	0x200045f0

00012b64 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   12b64:	b510      	push	{r4, lr}
   12b66:	461c      	mov	r4, r3
   12b68:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (len != 1U) {
   12b6c:	2c01      	cmp	r4, #1
   12b6e:	d10c      	bne.n	12b8a <write_led+0x26>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
   12b70:	b973      	cbnz	r3, 12b90 <write_led+0x2c>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (lbs_cb.led_cb) {
   12b72:	4b0a      	ldr	r3, [pc, #40]	; (12b9c <write_led+0x38>)
   12b74:	681b      	ldr	r3, [r3, #0]
   12b76:	b133      	cbz	r3, 12b86 <write_led+0x22>
		uint8_t val = *((uint8_t *)buf);
   12b78:	7810      	ldrb	r0, [r2, #0]

		if (val == 0x00 || val == 0x01) {
   12b7a:	2801      	cmp	r0, #1
   12b7c:	d80b      	bhi.n	12b96 <write_led+0x32>
			lbs_cb.led_cb(val ? true : false);
   12b7e:	3800      	subs	r0, #0
   12b80:	bf18      	it	ne
   12b82:	2001      	movne	r0, #1
   12b84:	4798      	blx	r3
			LOG_DBG("Write led: Incorrect value");
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
		}
	}

	return len;
   12b86:	4620      	mov	r0, r4
}
   12b88:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12b8a:	f06f 000c 	mvn.w	r0, #12
   12b8e:	e7fb      	b.n	12b88 <write_led+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12b90:	f06f 0006 	mvn.w	r0, #6
   12b94:	e7f8      	b.n	12b88 <write_led+0x24>
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   12b96:	f06f 0012 	mvn.w	r0, #18
   12b9a:	e7f5      	b.n	12b88 <write_led+0x24>
   12b9c:	20002364 	.word	0x20002364

00012ba0 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
   12ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ba4:	b084      	sub	sp, #16
   12ba6:	460c      	mov	r4, r1
	const char *value = attr->user_data;
   12ba8:	f8d1 800c 	ldr.w	r8, [r1, #12]

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (lbs_cb.button_cb) {
   12bac:	490d      	ldr	r1, [pc, #52]	; (12be4 <read_button+0x44>)
   12bae:	6849      	ldr	r1, [r1, #4]
   12bb0:	b1a9      	cbz	r1, 12bde <read_button+0x3e>
   12bb2:	4605      	mov	r5, r0
   12bb4:	4617      	mov	r7, r2
   12bb6:	461e      	mov	r6, r3
		button_state = lbs_cb.button_cb();
   12bb8:	4788      	blx	r1
   12bba:	4b0b      	ldr	r3, [pc, #44]	; (12be8 <read_button+0x48>)
   12bbc:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   12bbe:	2301      	movs	r3, #1
   12bc0:	9302      	str	r3, [sp, #8]
   12bc2:	f8cd 8004 	str.w	r8, [sp, #4]
   12bc6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12bca:	9300      	str	r3, [sp, #0]
   12bcc:	4633      	mov	r3, r6
   12bce:	463a      	mov	r2, r7
   12bd0:	4621      	mov	r1, r4
   12bd2:	4628      	mov	r0, r5
   12bd4:	f019 fa99 	bl	2c10a <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
   12bd8:	b004      	add	sp, #16
   12bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   12bde:	2000      	movs	r0, #0
   12be0:	e7fa      	b.n	12bd8 <read_button+0x38>
   12be2:	bf00      	nop
   12be4:	20002364 	.word	0x20002364
   12be8:	200045ef 	.word	0x200045ef

00012bec <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
   12bec:	b120      	cbz	r0, 12bf8 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
   12bee:	6801      	ldr	r1, [r0, #0]
   12bf0:	4a02      	ldr	r2, [pc, #8]	; (12bfc <bt_lbs_init+0x10>)
   12bf2:	6011      	str	r1, [r2, #0]
		lbs_cb.button_cb = callbacks->button_cb;
   12bf4:	6843      	ldr	r3, [r0, #4]
   12bf6:	6053      	str	r3, [r2, #4]
	}

	return 0;
}
   12bf8:	2000      	movs	r0, #0
   12bfa:	4770      	bx	lr
   12bfc:	20002364 	.word	0x20002364

00012c00 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
   12c00:	b500      	push	{lr}
   12c02:	b083      	sub	sp, #12
   12c04:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
   12c08:	4b07      	ldr	r3, [pc, #28]	; (12c28 <bt_lbs_send_button_state+0x28>)
   12c0a:	781b      	ldrb	r3, [r3, #0]
   12c0c:	b14b      	cbz	r3, 12c22 <bt_lbs_send_button_state+0x22>
		return -EACCES;
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
   12c0e:	2301      	movs	r3, #1
   12c10:	f10d 0207 	add.w	r2, sp, #7
   12c14:	4905      	ldr	r1, [pc, #20]	; (12c2c <bt_lbs_send_button_state+0x2c>)
   12c16:	2000      	movs	r0, #0
   12c18:	f016 fd1d 	bl	29656 <bt_gatt_notify>
			      &button_state,
			      sizeof(button_state));
}
   12c1c:	b003      	add	sp, #12
   12c1e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   12c22:	f06f 000c 	mvn.w	r0, #12
   12c26:	e7f9      	b.n	12c1c <bt_lbs_send_button_state+0x1c>
   12c28:	200045f0 	.word	0x200045f0
   12c2c:	0003045c 	.word	0x0003045c

00012c30 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   12c30:	b470      	push	{r4, r5, r6}
   12c32:	b08d      	sub	sp, #52	; 0x34
   12c34:	4606      	mov	r6, r0
   12c36:	460d      	mov	r5, r1
	const unsigned int rconst[11] = {
   12c38:	f10d 0c04 	add.w	ip, sp, #4
   12c3c:	4c2b      	ldr	r4, [pc, #172]	; (12cec <tc_aes128_set_encrypt_key+0xbc>)
   12c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12c40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   12c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12c46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   12c4a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   12c4e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   12c52:	2e00      	cmp	r6, #0
   12c54:	d045      	beq.n	12ce2 <tc_aes128_set_encrypt_key+0xb2>
   12c56:	4630      	mov	r0, r6
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   12c58:	2d00      	cmp	r5, #0
   12c5a:	d044      	beq.n	12ce6 <tc_aes128_set_encrypt_key+0xb6>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   12c5c:	2300      	movs	r3, #0
   12c5e:	e00f      	b.n	12c80 <tc_aes128_set_encrypt_key+0x50>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12c60:	f815 4023 	ldrb.w	r4, [r5, r3, lsl #2]
   12c64:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   12c68:	784a      	ldrb	r2, [r1, #1]
   12c6a:	0412      	lsls	r2, r2, #16
   12c6c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12c70:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12c72:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12c76:	78c9      	ldrb	r1, [r1, #3]
   12c78:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12c7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   12c7e:	3301      	adds	r3, #1
   12c80:	2b03      	cmp	r3, #3
   12c82:	d9ed      	bls.n	12c60 <tc_aes128_set_encrypt_key+0x30>
   12c84:	e006      	b.n	12c94 <tc_aes128_set_encrypt_key+0x64>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   12c86:	1f19      	subs	r1, r3, #4
   12c88:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   12c8c:	404a      	eors	r2, r1
   12c8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12c92:	3301      	adds	r3, #1
   12c94:	2b2b      	cmp	r3, #43	; 0x2b
   12c96:	d820      	bhi.n	12cda <tc_aes128_set_encrypt_key+0xaa>
		t = s->words[i-1];
   12c98:	1e5a      	subs	r2, r3, #1
   12c9a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   12c9e:	f013 0f03 	tst.w	r3, #3
   12ca2:	d1f0      	bne.n	12c86 <tc_aes128_set_encrypt_key+0x56>
	return (((a) >> 24)|((a) << 8));
   12ca4:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12ca8:	0e11      	lsrs	r1, r2, #24
   12caa:	4c11      	ldr	r4, [pc, #68]	; (12cf0 <tc_aes128_set_encrypt_key+0xc0>)
   12cac:	5c65      	ldrb	r5, [r4, r1]
   12cae:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12cb2:	5c61      	ldrb	r1, [r4, r1]
   12cb4:	0409      	lsls	r1, r1, #16
   12cb6:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   12cba:	f3c2 2507 	ubfx	r5, r2, #8, #8
   12cbe:	5d65      	ldrb	r5, [r4, r5]
   12cc0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   12cc4:	b2d2      	uxtb	r2, r2
   12cc6:	5ca2      	ldrb	r2, [r4, r2]
   12cc8:	4311      	orrs	r1, r2
   12cca:	f023 0203 	bic.w	r2, r3, #3
   12cce:	3230      	adds	r2, #48	; 0x30
   12cd0:	446a      	add	r2, sp
   12cd2:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   12cd6:	404a      	eors	r2, r1
   12cd8:	e7d5      	b.n	12c86 <tc_aes128_set_encrypt_key+0x56>
	}

	return TC_CRYPTO_SUCCESS;
   12cda:	2001      	movs	r0, #1
}
   12cdc:	b00d      	add	sp, #52	; 0x34
   12cde:	bc70      	pop	{r4, r5, r6}
   12ce0:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   12ce2:	2000      	movs	r0, #0
   12ce4:	e7fa      	b.n	12cdc <tc_aes128_set_encrypt_key+0xac>
		return TC_CRYPTO_FAIL;
   12ce6:	2000      	movs	r0, #0
   12ce8:	e7f8      	b.n	12cdc <tc_aes128_set_encrypt_key+0xac>
   12cea:	bf00      	nop
   12cec:	0002fbf4 	.word	0x0002fbf4
   12cf0:	000304b4 	.word	0x000304b4

00012cf4 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   12cf4:	2800      	cmp	r0, #0
   12cf6:	d04e      	beq.n	12d96 <tc_aes_encrypt+0xa2>
{
   12cf8:	b570      	push	{r4, r5, r6, lr}
   12cfa:	b084      	sub	sp, #16
   12cfc:	4615      	mov	r5, r2
   12cfe:	4606      	mov	r6, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   12d00:	2900      	cmp	r1, #0
   12d02:	d04a      	beq.n	12d9a <tc_aes_encrypt+0xa6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   12d04:	2a00      	cmp	r2, #0
   12d06:	d04a      	beq.n	12d9e <tc_aes_encrypt+0xaa>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   12d08:	2310      	movs	r3, #16
   12d0a:	460a      	mov	r2, r1
   12d0c:	4619      	mov	r1, r3
   12d0e:	4668      	mov	r0, sp
   12d10:	f016 fcb6 	bl	29680 <_copy>
	add_round_key(state, s->words);
   12d14:	4629      	mov	r1, r5
   12d16:	4668      	mov	r0, sp
   12d18:	f016 fccc 	bl	296b4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   12d1c:	2400      	movs	r4, #0
   12d1e:	e014      	b.n	12d4a <tc_aes_encrypt+0x56>
		s[i] = sbox[s[i]];
   12d20:	f81d 1003 	ldrb.w	r1, [sp, r3]
   12d24:	481f      	ldr	r0, [pc, #124]	; (12da4 <tc_aes_encrypt+0xb0>)
   12d26:	5c41      	ldrb	r1, [r0, r1]
   12d28:	f80d 1003 	strb.w	r1, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   12d2c:	3301      	adds	r3, #1
   12d2e:	2b0f      	cmp	r3, #15
   12d30:	d9f6      	bls.n	12d20 <tc_aes_encrypt+0x2c>
		sub_bytes(state);
		shift_rows(state);
   12d32:	4668      	mov	r0, sp
   12d34:	f016 fcff 	bl	29736 <shift_rows>
		mix_columns(state);
   12d38:	4668      	mov	r0, sp
   12d3a:	f016 fd76 	bl	2982a <mix_columns>
		add_round_key(state, s->words + Nb*(i+1));
   12d3e:	3401      	adds	r4, #1
   12d40:	eb05 1104 	add.w	r1, r5, r4, lsl #4
   12d44:	4668      	mov	r0, sp
   12d46:	f016 fcb5 	bl	296b4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   12d4a:	2c08      	cmp	r4, #8
   12d4c:	d801      	bhi.n	12d52 <tc_aes_encrypt+0x5e>
	for (i = 0; i < (Nb * Nk); ++i) {
   12d4e:	2300      	movs	r3, #0
   12d50:	e7ed      	b.n	12d2e <tc_aes_encrypt+0x3a>
   12d52:	2300      	movs	r3, #0
   12d54:	e006      	b.n	12d64 <tc_aes_encrypt+0x70>
		s[i] = sbox[s[i]];
   12d56:	f81d 2003 	ldrb.w	r2, [sp, r3]
   12d5a:	4912      	ldr	r1, [pc, #72]	; (12da4 <tc_aes_encrypt+0xb0>)
   12d5c:	5c8a      	ldrb	r2, [r1, r2]
   12d5e:	f80d 2003 	strb.w	r2, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   12d62:	3301      	adds	r3, #1
   12d64:	2b0f      	cmp	r3, #15
   12d66:	d9f6      	bls.n	12d56 <tc_aes_encrypt+0x62>
	}

	sub_bytes(state);
	shift_rows(state);
   12d68:	4668      	mov	r0, sp
   12d6a:	f016 fce4 	bl	29736 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   12d6e:	1c61      	adds	r1, r4, #1
   12d70:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   12d74:	4668      	mov	r0, sp
   12d76:	f016 fc9d 	bl	296b4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   12d7a:	2310      	movs	r3, #16
   12d7c:	466a      	mov	r2, sp
   12d7e:	4619      	mov	r1, r3
   12d80:	4630      	mov	r0, r6
   12d82:	f016 fc7d 	bl	29680 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   12d86:	2210      	movs	r2, #16
   12d88:	2100      	movs	r1, #0
   12d8a:	4668      	mov	r0, sp
   12d8c:	f016 fc85 	bl	2969a <_set>

	return TC_CRYPTO_SUCCESS;
   12d90:	2001      	movs	r0, #1
}
   12d92:	b004      	add	sp, #16
   12d94:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   12d96:	2000      	movs	r0, #0
}
   12d98:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   12d9a:	2000      	movs	r0, #0
   12d9c:	e7f9      	b.n	12d92 <tc_aes_encrypt+0x9e>
		return TC_CRYPTO_FAIL;
   12d9e:	2000      	movs	r0, #0
   12da0:	e7f7      	b.n	12d92 <tc_aes_encrypt+0x9e>
   12da2:	bf00      	nop
   12da4:	000304b4 	.word	0x000304b4

00012da8 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   12da8:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   12daa:	4802      	ldr	r0, [pc, #8]	; (12db4 <nrf_cc3xx_platform_abort_init+0xc>)
   12dac:	f012 fdd2 	bl	25954 <nrf_cc3xx_platform_set_abort>
}
   12db0:	bd08      	pop	{r3, pc}
   12db2:	bf00      	nop
   12db4:	000305b4 	.word	0x000305b4

00012db8 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
   12db8:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
   12dbc:	d017      	beq.n	12dee <mutex_flags_unknown+0x36>
   12dbe:	d80c      	bhi.n	12dda <mutex_flags_unknown+0x22>
   12dc0:	f640 63ba 	movw	r3, #3770	; 0xeba
   12dc4:	4298      	cmp	r0, r3
   12dc6:	d014      	beq.n	12df2 <mutex_flags_unknown+0x3a>
   12dc8:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
   12dcc:	d013      	beq.n	12df6 <mutex_flags_unknown+0x3e>
   12dce:	283a      	cmp	r0, #58	; 0x3a
   12dd0:	d001      	beq.n	12dd6 <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
   12dd2:	2001      	movs	r0, #1
   12dd4:	4770      	bx	lr
    switch(flags){
   12dd6:	2000      	movs	r0, #0
   12dd8:	4770      	bx	lr
   12dda:	4b09      	ldr	r3, [pc, #36]	; (12e00 <mutex_flags_unknown+0x48>)
   12ddc:	4298      	cmp	r0, r3
   12dde:	d00c      	beq.n	12dfa <mutex_flags_unknown+0x42>
   12de0:	4b08      	ldr	r3, [pc, #32]	; (12e04 <mutex_flags_unknown+0x4c>)
   12de2:	4298      	cmp	r0, r3
   12de4:	d001      	beq.n	12dea <mutex_flags_unknown+0x32>
            return true;
   12de6:	2001      	movs	r0, #1
    }
}
   12de8:	4770      	bx	lr
    switch(flags){
   12dea:	2000      	movs	r0, #0
   12dec:	4770      	bx	lr
   12dee:	2000      	movs	r0, #0
   12df0:	4770      	bx	lr
   12df2:	2000      	movs	r0, #0
   12df4:	4770      	bx	lr
   12df6:	2000      	movs	r0, #0
   12df8:	4770      	bx	lr
   12dfa:	2000      	movs	r0, #0
   12dfc:	4770      	bx	lr
   12dfe:	bf00      	nop
   12e00:	3a00003a 	.word	0x3a00003a
   12e04:	a95c5f2c 	.word	0xa95c5f2c

00012e08 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   12e08:	b1e8      	cbz	r0, 12e46 <mutex_unlock_platform+0x3e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12e0a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   12e0c:	6842      	ldr	r2, [r0, #4]
   12e0e:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
   12e12:	d007      	beq.n	12e24 <mutex_unlock_platform+0x1c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12e14:	490f      	ldr	r1, [pc, #60]	; (12e54 <mutex_unlock_platform+0x4c>)
   12e16:	428a      	cmp	r2, r1
   12e18:	d01a      	beq.n	12e50 <mutex_unlock_platform+0x48>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   12e1a:	6800      	ldr	r0, [r0, #0]
   12e1c:	f00f fad2 	bl	223c4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   12e20:	2000      	movs	r0, #0
    }
}
   12e22:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   12e24:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12e26:	2200      	movs	r2, #0
   12e28:	f3bf 8f5b 	dmb	ish
   12e2c:	e853 1f00 	ldrex	r1, [r3]
   12e30:	2901      	cmp	r1, #1
   12e32:	d103      	bne.n	12e3c <mutex_unlock_platform+0x34>
   12e34:	e843 2000 	strex	r0, r2, [r3]
   12e38:	2800      	cmp	r0, #0
   12e3a:	d1f7      	bne.n	12e2c <mutex_unlock_platform+0x24>
   12e3c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12e40:	d104      	bne.n	12e4c <mutex_unlock_platform+0x44>
   12e42:	4610      	mov	r0, r2
   12e44:	e7ed      	b.n	12e22 <mutex_unlock_platform+0x1a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12e46:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   12e4a:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12e4c:	4802      	ldr	r0, [pc, #8]	; (12e58 <mutex_unlock_platform+0x50>)
   12e4e:	e7e8      	b.n	12e22 <mutex_unlock_platform+0x1a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12e50:	4802      	ldr	r0, [pc, #8]	; (12e5c <mutex_unlock_platform+0x54>)
   12e52:	e7e6      	b.n	12e22 <mutex_unlock_platform+0x1a>
   12e54:	a95c5f2c 	.word	0xa95c5f2c
   12e58:	ffff8fe9 	.word	0xffff8fe9
   12e5c:	ffff8fea 	.word	0xffff8fea

00012e60 <mutex_lock_platform>:
    if(mutex == NULL) {
   12e60:	b330      	cbz	r0, 12eb0 <mutex_lock_platform+0x50>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12e62:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   12e64:	6842      	ldr	r2, [r0, #4]
   12e66:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
   12e6a:	d00c      	beq.n	12e86 <mutex_lock_platform+0x26>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12e6c:	4912      	ldr	r1, [pc, #72]	; (12eb8 <mutex_lock_platform+0x58>)
   12e6e:	428a      	cmp	r2, r1
   12e70:	d01c      	beq.n	12eac <mutex_lock_platform+0x4c>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12e72:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   12e74:	f04f 32ff 	mov.w	r2, #4294967295
   12e78:	f04f 33ff 	mov.w	r3, #4294967295
   12e7c:	f00f f9b8 	bl	221f0 <z_impl_k_mutex_lock>
        if (ret == 0) {
   12e80:	b188      	cbz	r0, 12ea6 <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   12e82:	480e      	ldr	r0, [pc, #56]	; (12ebc <mutex_lock_platform+0x5c>)
   12e84:	e00f      	b.n	12ea6 <mutex_lock_platform+0x46>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   12e86:	6803      	ldr	r3, [r0, #0]
   12e88:	2201      	movs	r2, #1
   12e8a:	f3bf 8f5b 	dmb	ish
   12e8e:	e853 1f00 	ldrex	r1, [r3]
   12e92:	2900      	cmp	r1, #0
   12e94:	d103      	bne.n	12e9e <mutex_lock_platform+0x3e>
   12e96:	e843 2000 	strex	r0, r2, [r3]
   12e9a:	2800      	cmp	r0, #0
   12e9c:	d1f7      	bne.n	12e8e <mutex_lock_platform+0x2e>
   12e9e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12ea2:	d101      	bne.n	12ea8 <mutex_lock_platform+0x48>
   12ea4:	2000      	movs	r0, #0
}
   12ea6:	bd08      	pop	{r3, pc}
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12ea8:	4804      	ldr	r0, [pc, #16]	; (12ebc <mutex_lock_platform+0x5c>)
   12eaa:	e7fc      	b.n	12ea6 <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12eac:	4804      	ldr	r0, [pc, #16]	; (12ec0 <mutex_lock_platform+0x60>)
   12eae:	e7fa      	b.n	12ea6 <mutex_lock_platform+0x46>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12eb0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   12eb4:	4770      	bx	lr
   12eb6:	bf00      	nop
   12eb8:	a95c5f2c 	.word	0xa95c5f2c
   12ebc:	ffff8fe9 	.word	0xffff8fe9
   12ec0:	ffff8fea 	.word	0xffff8fea

00012ec4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12ec4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12ec6:	4604      	mov	r4, r0
   12ec8:	b1a8      	cbz	r0, 12ef6 <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12eca:	6863      	ldr	r3, [r4, #4]
   12ecc:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   12ed0:	d010      	beq.n	12ef4 <mutex_free_platform+0x30>
   12ed2:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   12ed6:	d00d      	beq.n	12ef4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12ed8:	4a0c      	ldr	r2, [pc, #48]	; (12f0c <mutex_free_platform+0x48>)
   12eda:	4293      	cmp	r3, r2
   12edc:	d00a      	beq.n	12ef4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   12ede:	f413 6f68 	tst.w	r3, #3712	; 0xe80
   12ee2:	d00d      	beq.n	12f00 <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   12ee4:	4621      	mov	r1, r4
   12ee6:	480a      	ldr	r0, [pc, #40]	; (12f10 <mutex_free_platform+0x4c>)
   12ee8:	f00e ff28 	bl	21d3c <k_mem_slab_free>
        mutex->mutex = NULL;
   12eec:	2300      	movs	r3, #0
   12eee:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   12ef0:	4b06      	ldr	r3, [pc, #24]	; (12f0c <mutex_free_platform+0x48>)
   12ef2:	6063      	str	r3, [r4, #4]
}
   12ef4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   12ef6:	4b07      	ldr	r3, [pc, #28]	; (12f14 <mutex_free_platform+0x50>)
   12ef8:	685b      	ldr	r3, [r3, #4]
   12efa:	4807      	ldr	r0, [pc, #28]	; (12f18 <mutex_free_platform+0x54>)
   12efc:	4798      	blx	r3
   12efe:	e7e4      	b.n	12eca <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12f00:	2214      	movs	r2, #20
   12f02:	2100      	movs	r1, #0
   12f04:	6820      	ldr	r0, [r4, #0]
   12f06:	f016 ff70 	bl	29dea <memset>
   12f0a:	e7f1      	b.n	12ef0 <mutex_free_platform+0x2c>
   12f0c:	a95c5f2c 	.word	0xa95c5f2c
   12f10:	2000286c 	.word	0x2000286c
   12f14:	200008ec 	.word	0x200008ec
   12f18:	000305bc 	.word	0x000305bc

00012f1c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12f1c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12f1e:	4604      	mov	r4, r0
   12f20:	b358      	cbz	r0, 12f7a <mutex_init_platform+0x5e>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12f22:	6860      	ldr	r0, [r4, #4]
   12f24:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
   12f28:	d026      	beq.n	12f78 <mutex_init_platform+0x5c>
   12f2a:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
   12f2e:	d023      	beq.n	12f78 <mutex_init_platform+0x5c>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   12f30:	4b16      	ldr	r3, [pc, #88]	; (12f8c <mutex_init_platform+0x70>)
   12f32:	4298      	cmp	r0, r3
   12f34:	d026      	beq.n	12f84 <mutex_init_platform+0x68>
        mutex_flags_unknown(mutex->flags)) {
   12f36:	f7ff ff3f 	bl	12db8 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   12f3a:	b1b0      	cbz	r0, 12f6a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   12f3c:	f04f 32ff 	mov.w	r2, #4294967295
   12f40:	f04f 33ff 	mov.w	r3, #4294967295
   12f44:	4621      	mov	r1, r4
   12f46:	4812      	ldr	r0, [pc, #72]	; (12f90 <mutex_init_platform+0x74>)
   12f48:	f00e fe98 	bl	21c7c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   12f4c:	b908      	cbnz	r0, 12f52 <mutex_init_platform+0x36>
   12f4e:	6823      	ldr	r3, [r4, #0]
   12f50:	b91b      	cbnz	r3, 12f5a <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
   12f52:	4b10      	ldr	r3, [pc, #64]	; (12f94 <mutex_init_platform+0x78>)
   12f54:	685b      	ldr	r3, [r3, #4]
   12f56:	4810      	ldr	r0, [pc, #64]	; (12f98 <mutex_init_platform+0x7c>)
   12f58:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12f5a:	2214      	movs	r2, #20
   12f5c:	2100      	movs	r1, #0
   12f5e:	6820      	ldr	r0, [r4, #0]
   12f60:	f016 ff43 	bl	29dea <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   12f64:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   12f68:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   12f6a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   12f6c:	f01c f8d0 	bl	2f110 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   12f70:	6863      	ldr	r3, [r4, #4]
   12f72:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   12f76:	6063      	str	r3, [r4, #4]
}
   12f78:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   12f7a:	4b06      	ldr	r3, [pc, #24]	; (12f94 <mutex_init_platform+0x78>)
   12f7c:	685b      	ldr	r3, [r3, #4]
   12f7e:	4807      	ldr	r0, [pc, #28]	; (12f9c <mutex_init_platform+0x80>)
   12f80:	4798      	blx	r3
   12f82:	e7ce      	b.n	12f22 <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   12f84:	6823      	ldr	r3, [r4, #0]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1d5      	bne.n	12f36 <mutex_init_platform+0x1a>
   12f8a:	e7d7      	b.n	12f3c <mutex_init_platform+0x20>
   12f8c:	a95c5f2c 	.word	0xa95c5f2c
   12f90:	2000286c 	.word	0x2000286c
   12f94:	200008ec 	.word	0x200008ec
   12f98:	000305e4 	.word	0x000305e4
   12f9c:	000305bc 	.word	0x000305bc

00012fa0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   12fa0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   12fa2:	2340      	movs	r3, #64	; 0x40
   12fa4:	2214      	movs	r2, #20
   12fa6:	4904      	ldr	r1, [pc, #16]	; (12fb8 <nrf_cc3xx_platform_mutex_init+0x18>)
   12fa8:	4804      	ldr	r0, [pc, #16]	; (12fbc <nrf_cc3xx_platform_mutex_init+0x1c>)
   12faa:	f01c f85c 	bl	2f066 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   12fae:	4904      	ldr	r1, [pc, #16]	; (12fc0 <nrf_cc3xx_platform_mutex_init+0x20>)
   12fb0:	4804      	ldr	r0, [pc, #16]	; (12fc4 <nrf_cc3xx_platform_mutex_init+0x24>)
   12fb2:	f012 fd95 	bl	25ae0 <nrf_cc3xx_platform_set_mutexes>
}
   12fb6:	bd08      	pop	{r3, pc}
   12fb8:	2000236c 	.word	0x2000236c
   12fbc:	2000286c 	.word	0x2000286c
   12fc0:	00030614 	.word	0x00030614
   12fc4:	00030628 	.word	0x00030628

00012fc8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12fc8:	4901      	ldr	r1, [pc, #4]	; (12fd0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12fca:	2210      	movs	r2, #16
	str	r2, [r1]
   12fcc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12fce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12fd0:	e000ed10 	.word	0xe000ed10

00012fd4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12fd4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12fd6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12fd8:	f380 8811 	msr	BASEPRI, r0
	isb
   12fdc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12fe0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12fe4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12fe6:	b662      	cpsie	i
	isb
   12fe8:	f3bf 8f6f 	isb	sy

	bx	lr
   12fec:	4770      	bx	lr
   12fee:	bf00      	nop

00012ff0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12ff0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12ff2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12ff4:	f381 8811 	msr	BASEPRI, r1

	wfe
   12ff8:	bf20      	wfe

	msr	BASEPRI, r0
   12ffa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12ffe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13000:	4770      	bx	lr
   13002:	bf00      	nop

00013004 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   13004:	b510      	push	{r4, lr}
   13006:	b082      	sub	sp, #8
   13008:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1300a:	6883      	ldr	r3, [r0, #8]
   1300c:	9300      	str	r3, [sp, #0]
   1300e:	6843      	ldr	r3, [r0, #4]
   13010:	6802      	ldr	r2, [r0, #0]
   13012:	2145      	movs	r1, #69	; 0x45
   13014:	480b      	ldr	r0, [pc, #44]	; (13044 <esf_dump+0x40>)
   13016:	f015 fe1a 	bl	28c4e <z_log_minimal_printk>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1301a:	6963      	ldr	r3, [r4, #20]
   1301c:	9300      	str	r3, [sp, #0]
   1301e:	6923      	ldr	r3, [r4, #16]
   13020:	68e2      	ldr	r2, [r4, #12]
   13022:	2145      	movs	r1, #69	; 0x45
   13024:	4808      	ldr	r0, [pc, #32]	; (13048 <esf_dump+0x44>)
   13026:	f015 fe12 	bl	28c4e <z_log_minimal_printk>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1302a:	69e2      	ldr	r2, [r4, #28]
   1302c:	2145      	movs	r1, #69	; 0x45
   1302e:	4807      	ldr	r0, [pc, #28]	; (1304c <esf_dump+0x48>)
   13030:	f015 fe0d 	bl	28c4e <z_log_minimal_printk>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13034:	69a2      	ldr	r2, [r4, #24]
   13036:	2145      	movs	r1, #69	; 0x45
   13038:	4805      	ldr	r0, [pc, #20]	; (13050 <esf_dump+0x4c>)
   1303a:	f015 fe08 	bl	28c4e <z_log_minimal_printk>
		esf->basic.pc);
}
   1303e:	b002      	add	sp, #8
   13040:	bd10      	pop	{r4, pc}
   13042:	bf00      	nop
   13044:	00030638 	.word	0x00030638
   13048:	0003066c 	.word	0x0003066c
   1304c:	000306a0 	.word	0x000306a0
   13050:	000306b4 	.word	0x000306b4

00013054 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13054:	2800      	cmp	r0, #0
   13056:	db07      	blt.n	13068 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13058:	f000 021f 	and.w	r2, r0, #31
   1305c:	0940      	lsrs	r0, r0, #5
   1305e:	2301      	movs	r3, #1
   13060:	4093      	lsls	r3, r2
   13062:	4a02      	ldr	r2, [pc, #8]	; (1306c <__NVIC_EnableIRQ+0x18>)
   13064:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   13068:	4770      	bx	lr
   1306a:	bf00      	nop
   1306c:	e000e100 	.word	0xe000e100

00013070 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13070:	2800      	cmp	r0, #0
   13072:	db0c      	blt.n	1308e <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13074:	f000 021f 	and.w	r2, r0, #31
   13078:	0940      	lsrs	r0, r0, #5
   1307a:	2301      	movs	r3, #1
   1307c:	4093      	lsls	r3, r2
   1307e:	3020      	adds	r0, #32
   13080:	4a03      	ldr	r2, [pc, #12]	; (13090 <__NVIC_DisableIRQ+0x20>)
   13082:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13086:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1308a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   1308e:	4770      	bx	lr
   13090:	e000e100 	.word	0xe000e100

00013094 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13094:	2800      	cmp	r0, #0
   13096:	db08      	blt.n	130aa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13098:	0149      	lsls	r1, r1, #5
   1309a:	b2c9      	uxtb	r1, r1
   1309c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   130a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   130a4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   130a8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   130aa:	f000 000f 	and.w	r0, r0, #15
   130ae:	0149      	lsls	r1, r1, #5
   130b0:	b2c9      	uxtb	r1, r1
   130b2:	4b01      	ldr	r3, [pc, #4]	; (130b8 <__NVIC_SetPriority+0x24>)
   130b4:	5419      	strb	r1, [r3, r0]
  }
}
   130b6:	4770      	bx	lr
   130b8:	e000ed14 	.word	0xe000ed14

000130bc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   130bc:	0942      	lsrs	r2, r0, #5
   130be:	4b05      	ldr	r3, [pc, #20]	; (130d4 <arch_irq_is_enabled+0x18>)
   130c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   130c4:	f000 001f 	and.w	r0, r0, #31
   130c8:	2301      	movs	r3, #1
   130ca:	fa03 f000 	lsl.w	r0, r3, r0
}
   130ce:	4010      	ands	r0, r2
   130d0:	4770      	bx	lr
   130d2:	bf00      	nop
   130d4:	e000e100 	.word	0xe000e100

000130d8 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   130d8:	b510      	push	{r4, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   130da:	f012 0f01 	tst.w	r2, #1
   130de:	d110      	bne.n	13102 <z_arm_irq_priority_set+0x2a>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   130e0:	3102      	adds	r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   130e2:	2907      	cmp	r1, #7
   130e4:	d803      	bhi.n	130ee <z_arm_irq_priority_set+0x16>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   130e6:	b240      	sxtb	r0, r0
   130e8:	f7ff ffd4 	bl	13094 <__NVIC_SetPriority>
}
   130ec:	bd10      	pop	{r4, pc}
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   130ee:	4c06      	ldr	r4, [pc, #24]	; (13108 <z_arm_irq_priority_set+0x30>)
   130f0:	225b      	movs	r2, #91	; 0x5b
   130f2:	4621      	mov	r1, r4
   130f4:	4805      	ldr	r0, [pc, #20]	; (1310c <z_arm_irq_priority_set+0x34>)
   130f6:	f015 fd8a 	bl	28c0e <assert_print>
   130fa:	215b      	movs	r1, #91	; 0x5b
   130fc:	4620      	mov	r0, r4
   130fe:	f015 fd7f 	bl	28c00 <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13102:	2100      	movs	r1, #0
   13104:	e7ef      	b.n	130e6 <z_arm_irq_priority_set+0xe>
   13106:	bf00      	nop
   13108:	000306e8 	.word	0x000306e8
   1310c:	00030128 	.word	0x00030128

00013110 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13110:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13112:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13114:	4b05      	ldr	r3, [pc, #20]	; (1312c <_arch_isr_direct_pm+0x1c>)
   13116:	699b      	ldr	r3, [r3, #24]
   13118:	b90b      	cbnz	r3, 1311e <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1311a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1311c:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   1311e:	4b03      	ldr	r3, [pc, #12]	; (1312c <_arch_isr_direct_pm+0x1c>)
   13120:	2200      	movs	r2, #0
   13122:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   13124:	f01b ffd8 	bl	2f0d8 <z_pm_save_idle_exit>
   13128:	e7f7      	b.n	1311a <_arch_isr_direct_pm+0xa>
   1312a:	bf00      	nop
   1312c:	20003ac0 	.word	0x20003ac0

00013130 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13130:	bf30      	wfi
    b z_SysNmiOnReset
   13132:	f7ff bffd 	b.w	13130 <z_SysNmiOnReset>
   13136:	bf00      	nop

00013138 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   13138:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1313a:	4b0b      	ldr	r3, [pc, #44]	; (13168 <z_arm_prep_c+0x30>)
   1313c:	4a0b      	ldr	r2, [pc, #44]	; (1316c <z_arm_prep_c+0x34>)
   1313e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13142:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13148:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1314c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13150:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13158:	f00e fbbe 	bl	218d8 <z_bss_zero>
	z_data_copy();
   1315c:	f011 f9be 	bl	244dc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13160:	f000 fb92 	bl	13888 <z_arm_interrupt_init>
	z_cstart();
   13164:	f00e fc16 	bl	21994 <z_cstart>
   13168:	e000ed00 	.word	0xe000ed00
   1316c:	00000000 	.word	0x00000000

00013170 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13170:	4a0a      	ldr	r2, [pc, #40]	; (1319c <arch_swap+0x2c>)
   13172:	6893      	ldr	r3, [r2, #8]
   13174:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   13178:	4909      	ldr	r1, [pc, #36]	; (131a0 <arch_swap+0x30>)
   1317a:	6809      	ldr	r1, [r1, #0]
   1317c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13180:	4908      	ldr	r1, [pc, #32]	; (131a4 <arch_swap+0x34>)
   13182:	684b      	ldr	r3, [r1, #4]
   13184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13188:	604b      	str	r3, [r1, #4]
   1318a:	2300      	movs	r3, #0
   1318c:	f383 8811 	msr	BASEPRI, r3
   13190:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13194:	6893      	ldr	r3, [r2, #8]
}
   13196:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   1319a:	4770      	bx	lr
   1319c:	20003ac0 	.word	0x20003ac0
   131a0:	00033ab4 	.word	0x00033ab4
   131a4:	e000ed00 	.word	0xe000ed00

000131a8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   131a8:	4913      	ldr	r1, [pc, #76]	; (131f8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   131aa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   131ac:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   131b0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   131b2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   131b6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   131ba:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   131bc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   131c0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   131c4:	4f0d      	ldr	r7, [pc, #52]	; (131fc <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   131c6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   131ca:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   131cc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   131ce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   131d0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   131d4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   131d6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   131da:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   131de:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   131e0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   131e2:	f000 fc01 	bl	139e8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   131e6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   131ea:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   131ee:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   131f2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   131f6:	4770      	bx	lr
    ldr r1, =_kernel
   131f8:	20003ac0 	.word	0x20003ac0
    ldr v4, =_SCS_ICSR
   131fc:	e000ed04 	.word	0xe000ed04

00013200 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13200:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13204:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13206:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1320a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1320e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13210:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13214:	2902      	cmp	r1, #2
    beq _oops
   13216:	d0ff      	beq.n	13218 <_oops>

00013218 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13218:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1321a:	f016 fc41 	bl	29aa0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1321e:	bd01      	pop	{r0, pc}

00013220 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   13220:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13222:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   13226:	490e      	ldr	r1, [pc, #56]	; (13260 <arch_new_thread+0x40>)
   13228:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   1322c:	f021 0101 	bic.w	r1, r1, #1
   13230:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   13234:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13238:	9b01      	ldr	r3, [sp, #4]
   1323a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1323e:	9b02      	ldr	r3, [sp, #8]
   13240:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13244:	9b03      	ldr	r3, [sp, #12]
   13246:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1324a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1324e:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   13252:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13254:	2300      	movs	r3, #0
   13256:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1325a:	bc10      	pop	{r4}
   1325c:	4770      	bx	lr
   1325e:	bf00      	nop
   13260:	000283a5 	.word	0x000283a5

00013264 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13264:	4b10      	ldr	r3, [pc, #64]	; (132a8 <z_check_thread_stack_fail+0x44>)
   13266:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
   13268:	b1bb      	cbz	r3, 1329a <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1326a:	f110 0f16 	cmn.w	r0, #22
   1326e:	d00b      	beq.n	13288 <z_check_thread_stack_fail+0x24>
   13270:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   13274:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
   13278:	4584      	cmp	ip, r0
   1327a:	d810      	bhi.n	1329e <z_check_thread_stack_fail+0x3a>
   1327c:	4282      	cmp	r2, r0
   1327e:	d910      	bls.n	132a2 <z_check_thread_stack_fail+0x3e>
   13280:	428a      	cmp	r2, r1
   13282:	d807      	bhi.n	13294 <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   13284:	2000      	movs	r0, #0
   13286:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13288:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1328c:	428a      	cmp	r2, r1
   1328e:	d801      	bhi.n	13294 <z_check_thread_stack_fail+0x30>
	return 0;
   13290:	2000      	movs	r0, #0
}
   13292:	4770      	bx	lr
		return thread->stack_info.start;
   13294:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   13298:	4770      	bx	lr
		return 0;
   1329a:	2000      	movs	r0, #0
   1329c:	4770      	bx	lr
	return 0;
   1329e:	2000      	movs	r0, #0
   132a0:	4770      	bx	lr
   132a2:	2000      	movs	r0, #0
   132a4:	4770      	bx	lr
   132a6:	bf00      	nop
   132a8:	20003ac0 	.word	0x20003ac0

000132ac <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   132ac:	b508      	push	{r3, lr}
   132ae:	460d      	mov	r5, r1
   132b0:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   132b2:	4b08      	ldr	r3, [pc, #32]	; (132d4 <arch_switch_to_main_thread+0x28>)
   132b4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   132b6:	f000 fb97 	bl	139e8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   132ba:	4620      	mov	r0, r4
   132bc:	f385 8809 	msr	PSP, r5
   132c0:	2100      	movs	r1, #0
   132c2:	b663      	cpsie	if
   132c4:	f381 8811 	msr	BASEPRI, r1
   132c8:	f3bf 8f6f 	isb	sy
   132cc:	2200      	movs	r2, #0
   132ce:	2300      	movs	r3, #0
   132d0:	f015 f868 	bl	283a4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   132d4:	20003ac0 	.word	0x20003ac0

000132d8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   132d8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   132da:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   132dc:	4a0b      	ldr	r2, [pc, #44]	; (1330c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   132de:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   132e0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   132e2:	bf1e      	ittt	ne
	movne	r1, #0
   132e4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   132e6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   132e8:	f01b fef6 	blne	2f0d8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   132ec:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   132ee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   132f2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   132f6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   132fa:	4905      	ldr	r1, [pc, #20]	; (13310 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   132fc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   132fe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13300:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13302:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13306:	4903      	ldr	r1, [pc, #12]	; (13314 <_isr_wrapper+0x3c>)
	bx r1
   13308:	4708      	bx	r1
   1330a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1330c:	20003ac0 	.word	0x20003ac0
	ldr r1, =_sw_isr_table
   13310:	0002f7dc 	.word	0x0002f7dc
	ldr r1, =z_arm_int_exit
   13314:	00013319 	.word	0x00013319

00013318 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13318:	4b04      	ldr	r3, [pc, #16]	; (1332c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1331a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1331c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1331e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13320:	d003      	beq.n	1332a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13322:	4903      	ldr	r1, [pc, #12]	; (13330 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13328:	600a      	str	r2, [r1, #0]

0001332a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1332a:	4770      	bx	lr
	ldr r3, =_kernel
   1332c:	20003ac0 	.word	0x20003ac0
	ldr r1, =_SCS_ICSR
   13330:	e000ed04 	.word	0xe000ed04

00013334 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   13334:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   13336:	4b0d      	ldr	r3, [pc, #52]	; (1336c <z_arm_is_synchronous_svc+0x38>)
   13338:	695a      	ldr	r2, [r3, #20]
   1333a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1333e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   13340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13344:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   13348:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1334c:	695a      	ldr	r2, [r3, #20]
   1334e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   13352:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   13354:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13358:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1335c:	f64d 7302 	movw	r3, #57090	; 0xdf02
   13360:	4299      	cmp	r1, r3
   13362:	d001      	beq.n	13368 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   13364:	2000      	movs	r0, #0
   13366:	4770      	bx	lr
		return true;
   13368:	2001      	movs	r0, #1
}
   1336a:	4770      	bx	lr
   1336c:	e000ed00 	.word	0xe000ed00

00013370 <get_esf>:
	bool *nested_exc)
{
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
   13370:	f04f 0c00 	mov.w	ip, #0
   13374:	f883 c000 	strb.w	ip, [r3]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13378:	f002 4c7f 	and.w	ip, r2, #4278190080	; 0xff000000
   1337c:	f1bc 4f7f 	cmp.w	ip, #4278190080	; 0xff000000
   13380:	d113      	bne.n	133aa <get_esf+0x3a>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13382:	f002 0c0c 	and.w	ip, r2, #12
   13386:	f1bc 0f08 	cmp.w	ip, #8
   1338a:	d004      	beq.n	13396 <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1338c:	f012 0f08 	tst.w	r2, #8
   13390:	d008      	beq.n	133a4 <get_esf+0x34>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
   13392:	4608      	mov	r0, r1
   13394:	4770      	bx	lr
{
   13396:	b508      	push	{r3, lr}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   13398:	2145      	movs	r1, #69	; 0x45
   1339a:	4805      	ldr	r0, [pc, #20]	; (133b0 <get_esf+0x40>)
   1339c:	f015 fc57 	bl	28c4e <z_log_minimal_printk>
		return NULL;
   133a0:	2000      	movs	r0, #0
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
   133a2:	bd08      	pop	{r3, pc}
			*nested_exc = true;
   133a4:	2201      	movs	r2, #1
   133a6:	701a      	strb	r2, [r3, #0]
   133a8:	4770      	bx	lr
		return NULL;
   133aa:	2000      	movs	r0, #0
}
   133ac:	4770      	bx	lr
   133ae:	bf00      	nop
   133b0:	00030720 	.word	0x00030720

000133b4 <bus_fault>:
{
   133b4:	b570      	push	{r4, r5, r6, lr}
   133b6:	4605      	mov	r5, r0
   133b8:	460e      	mov	r6, r1
   133ba:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
   133bc:	2145      	movs	r1, #69	; 0x45
   133be:	482e      	ldr	r0, [pc, #184]	; (13478 <bus_fault+0xc4>)
   133c0:	f015 fc45 	bl	28c4e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   133c4:	4b2d      	ldr	r3, [pc, #180]	; (1347c <bus_fault+0xc8>)
   133c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133c8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   133cc:	d124      	bne.n	13418 <bus_fault+0x64>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   133ce:	4b2b      	ldr	r3, [pc, #172]	; (1347c <bus_fault+0xc8>)
   133d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133d2:	f413 6f00 	tst.w	r3, #2048	; 0x800
   133d6:	d124      	bne.n	13422 <bus_fault+0x6e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   133d8:	4b28      	ldr	r3, [pc, #160]	; (1347c <bus_fault+0xc8>)
   133da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133dc:	f413 7f00 	tst.w	r3, #512	; 0x200
   133e0:	d124      	bne.n	1342c <bus_fault+0x78>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   133e2:	4b26      	ldr	r3, [pc, #152]	; (1347c <bus_fault+0xc8>)
   133e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
   133ea:	d135      	bne.n	13458 <bus_fault+0xa4>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   133ec:	4b23      	ldr	r3, [pc, #140]	; (1347c <bus_fault+0xc8>)
   133ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133f0:	f413 7f80 	tst.w	r3, #256	; 0x100
   133f4:	d135      	bne.n	13462 <bus_fault+0xae>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   133f6:	4b21      	ldr	r3, [pc, #132]	; (1347c <bus_fault+0xc8>)
   133f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133fa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   133fe:	d135      	bne.n	1346c <bus_fault+0xb8>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13400:	4a1e      	ldr	r2, [pc, #120]	; (1347c <bus_fault+0xc8>)
   13402:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13404:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13408:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1340a:	2101      	movs	r1, #1
   1340c:	4628      	mov	r0, r5
   1340e:	f016 fb63 	bl	29ad8 <memory_fault_recoverable>
   13412:	7020      	strb	r0, [r4, #0]
}
   13414:	2000      	movs	r0, #0
   13416:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
   13418:	2145      	movs	r1, #69	; 0x45
   1341a:	4819      	ldr	r0, [pc, #100]	; (13480 <bus_fault+0xcc>)
   1341c:	f015 fc17 	bl	28c4e <z_log_minimal_printk>
   13420:	e7d5      	b.n	133ce <bus_fault+0x1a>
		PR_FAULT_INFO("  Unstacking error");
   13422:	2145      	movs	r1, #69	; 0x45
   13424:	4817      	ldr	r0, [pc, #92]	; (13484 <bus_fault+0xd0>)
   13426:	f015 fc12 	bl	28c4e <z_log_minimal_printk>
   1342a:	e7d5      	b.n	133d8 <bus_fault+0x24>
		PR_FAULT_INFO("  Precise data bus error");
   1342c:	2145      	movs	r1, #69	; 0x45
   1342e:	4816      	ldr	r0, [pc, #88]	; (13488 <bus_fault+0xd4>)
   13430:	f015 fc0d 	bl	28c4e <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   13434:	4b11      	ldr	r3, [pc, #68]	; (1347c <bus_fault+0xc8>)
   13436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1343a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1343e:	d0d0      	beq.n	133e2 <bus_fault+0x2e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13440:	2145      	movs	r1, #69	; 0x45
   13442:	4812      	ldr	r0, [pc, #72]	; (1348c <bus_fault+0xd8>)
   13444:	f015 fc03 	bl	28c4e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   13448:	2e00      	cmp	r6, #0
   1344a:	d0ca      	beq.n	133e2 <bus_fault+0x2e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1344c:	4a0b      	ldr	r2, [pc, #44]	; (1347c <bus_fault+0xc8>)
   1344e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13450:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13454:	6293      	str	r3, [r2, #40]	; 0x28
   13456:	e7c4      	b.n	133e2 <bus_fault+0x2e>
		PR_FAULT_INFO("  Imprecise data bus error");
   13458:	2145      	movs	r1, #69	; 0x45
   1345a:	480d      	ldr	r0, [pc, #52]	; (13490 <bus_fault+0xdc>)
   1345c:	f015 fbf7 	bl	28c4e <z_log_minimal_printk>
   13460:	e7c4      	b.n	133ec <bus_fault+0x38>
		PR_FAULT_INFO("  Instruction bus error");
   13462:	2145      	movs	r1, #69	; 0x45
   13464:	480b      	ldr	r0, [pc, #44]	; (13494 <bus_fault+0xe0>)
   13466:	f015 fbf2 	bl	28c4e <z_log_minimal_printk>
   1346a:	e7c9      	b.n	13400 <bus_fault+0x4c>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1346c:	2145      	movs	r1, #69	; 0x45
   1346e:	480a      	ldr	r0, [pc, #40]	; (13498 <bus_fault+0xe4>)
   13470:	f015 fbed 	bl	28c4e <z_log_minimal_printk>
   13474:	e7c4      	b.n	13400 <bus_fault+0x4c>
   13476:	bf00      	nop
   13478:	00030750 	.word	0x00030750
   1347c:	e000ed00 	.word	0xe000ed00
   13480:	0003076c 	.word	0x0003076c
   13484:	00030784 	.word	0x00030784
   13488:	0003079c 	.word	0x0003079c
   1348c:	000307bc 	.word	0x000307bc
   13490:	000307d8 	.word	0x000307d8
   13494:	000307f8 	.word	0x000307f8
   13498:	00030818 	.word	0x00030818

0001349c <usage_fault>:
{
   1349c:	b508      	push	{r3, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1349e:	2145      	movs	r1, #69	; 0x45
   134a0:	4823      	ldr	r0, [pc, #140]	; (13530 <usage_fault+0x94>)
   134a2:	f015 fbd4 	bl	28c4e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   134a6:	4b23      	ldr	r3, [pc, #140]	; (13534 <usage_fault+0x98>)
   134a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   134aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   134ae:	d121      	bne.n	134f4 <usage_fault+0x58>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   134b0:	4b20      	ldr	r3, [pc, #128]	; (13534 <usage_fault+0x98>)
   134b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   134b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   134b8:	d121      	bne.n	134fe <usage_fault+0x62>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   134ba:	4b1e      	ldr	r3, [pc, #120]	; (13534 <usage_fault+0x98>)
   134bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   134be:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   134c2:	d121      	bne.n	13508 <usage_fault+0x6c>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   134c4:	4b1b      	ldr	r3, [pc, #108]	; (13534 <usage_fault+0x98>)
   134c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   134c8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   134cc:	d121      	bne.n	13512 <usage_fault+0x76>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   134ce:	4b19      	ldr	r3, [pc, #100]	; (13534 <usage_fault+0x98>)
   134d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   134d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   134d6:	d121      	bne.n	1351c <usage_fault+0x80>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   134d8:	4b16      	ldr	r3, [pc, #88]	; (13534 <usage_fault+0x98>)
   134da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   134dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   134e0:	d121      	bne.n	13526 <usage_fault+0x8a>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   134e2:	4a14      	ldr	r2, [pc, #80]	; (13534 <usage_fault+0x98>)
   134e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   134e6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   134ea:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   134ee:	6293      	str	r3, [r2, #40]	; 0x28
}
   134f0:	2000      	movs	r0, #0
   134f2:	bd08      	pop	{r3, pc}
		PR_FAULT_INFO("  Division by zero");
   134f4:	2145      	movs	r1, #69	; 0x45
   134f6:	4810      	ldr	r0, [pc, #64]	; (13538 <usage_fault+0x9c>)
   134f8:	f015 fba9 	bl	28c4e <z_log_minimal_printk>
   134fc:	e7d8      	b.n	134b0 <usage_fault+0x14>
		PR_FAULT_INFO("  Unaligned memory access");
   134fe:	2145      	movs	r1, #69	; 0x45
   13500:	480e      	ldr	r0, [pc, #56]	; (1353c <usage_fault+0xa0>)
   13502:	f015 fba4 	bl	28c4e <z_log_minimal_printk>
   13506:	e7d8      	b.n	134ba <usage_fault+0x1e>
		PR_FAULT_INFO("  No coprocessor instructions");
   13508:	2145      	movs	r1, #69	; 0x45
   1350a:	480d      	ldr	r0, [pc, #52]	; (13540 <usage_fault+0xa4>)
   1350c:	f015 fb9f 	bl	28c4e <z_log_minimal_printk>
   13510:	e7d8      	b.n	134c4 <usage_fault+0x28>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   13512:	2145      	movs	r1, #69	; 0x45
   13514:	480b      	ldr	r0, [pc, #44]	; (13544 <usage_fault+0xa8>)
   13516:	f015 fb9a 	bl	28c4e <z_log_minimal_printk>
   1351a:	e7d8      	b.n	134ce <usage_fault+0x32>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1351c:	2145      	movs	r1, #69	; 0x45
   1351e:	480a      	ldr	r0, [pc, #40]	; (13548 <usage_fault+0xac>)
   13520:	f015 fb95 	bl	28c4e <z_log_minimal_printk>
   13524:	e7d8      	b.n	134d8 <usage_fault+0x3c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13526:	2145      	movs	r1, #69	; 0x45
   13528:	4808      	ldr	r0, [pc, #32]	; (1354c <usage_fault+0xb0>)
   1352a:	f015 fb90 	bl	28c4e <z_log_minimal_printk>
   1352e:	e7d8      	b.n	134e2 <usage_fault+0x46>
   13530:	0003084c 	.word	0x0003084c
   13534:	e000ed00 	.word	0xe000ed00
   13538:	0003086c 	.word	0x0003086c
   1353c:	00030884 	.word	0x00030884
   13540:	000308a4 	.word	0x000308a4
   13544:	000308c8 	.word	0x000308c8
   13548:	000308f4 	.word	0x000308f4
   1354c:	00030914 	.word	0x00030914

00013550 <debug_monitor>:
{
   13550:	b508      	push	{r3, lr}
	*recoverable = false;
   13552:	2300      	movs	r3, #0
   13554:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
   13556:	2145      	movs	r1, #69	; 0x45
   13558:	4801      	ldr	r0, [pc, #4]	; (13560 <debug_monitor+0x10>)
   1355a:	f015 fb78 	bl	28c4e <z_log_minimal_printk>
}
   1355e:	bd08      	pop	{r3, pc}
   13560:	00030944 	.word	0x00030944

00013564 <reserved_exception>:
{
   13564:	b508      	push	{r3, lr}
	PR_FAULT_INFO("***** %s %d) *****",
   13566:	290f      	cmp	r1, #15
   13568:	dc07      	bgt.n	1357a <reserved_exception+0x16>
   1356a:	4a05      	ldr	r2, [pc, #20]	; (13580 <reserved_exception+0x1c>)
   1356c:	f1a1 0310 	sub.w	r3, r1, #16
   13570:	2145      	movs	r1, #69	; 0x45
   13572:	4804      	ldr	r0, [pc, #16]	; (13584 <reserved_exception+0x20>)
   13574:	f015 fb6b 	bl	28c4e <z_log_minimal_printk>
}
   13578:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   1357a:	4a03      	ldr	r2, [pc, #12]	; (13588 <reserved_exception+0x24>)
   1357c:	e7f6      	b.n	1356c <reserved_exception+0x8>
   1357e:	bf00      	nop
   13580:	00030970 	.word	0x00030970
   13584:	000309a4 	.word	0x000309a4
   13588:	00030988 	.word	0x00030988

0001358c <mem_manage_fault>:
{
   1358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1358e:	4605      	mov	r5, r0
   13590:	460c      	mov	r4, r1
   13592:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   13594:	2145      	movs	r1, #69	; 0x45
   13596:	4845      	ldr	r0, [pc, #276]	; (136ac <mem_manage_fault+0x120>)
   13598:	f015 fb59 	bl	28c4e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1359c:	4b44      	ldr	r3, [pc, #272]	; (136b0 <mem_manage_fault+0x124>)
   1359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   135a0:	f013 0f10 	tst.w	r3, #16
   135a4:	d13a      	bne.n	1361c <mem_manage_fault+0x90>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   135a6:	4b42      	ldr	r3, [pc, #264]	; (136b0 <mem_manage_fault+0x124>)
   135a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   135aa:	f013 0f08 	tst.w	r3, #8
   135ae:	d13a      	bne.n	13626 <mem_manage_fault+0x9a>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   135b0:	4b3f      	ldr	r3, [pc, #252]	; (136b0 <mem_manage_fault+0x124>)
   135b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   135b4:	f013 0f02 	tst.w	r3, #2
   135b8:	d13a      	bne.n	13630 <mem_manage_fault+0xa4>
	uint32_t mmfar = -EINVAL;
   135ba:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   135be:	4b3c      	ldr	r3, [pc, #240]	; (136b0 <mem_manage_fault+0x124>)
   135c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   135c2:	f013 0f01 	tst.w	r3, #1
   135c6:	d14d      	bne.n	13664 <mem_manage_fault+0xd8>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   135c8:	4b39      	ldr	r3, [pc, #228]	; (136b0 <mem_manage_fault+0x124>)
   135ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   135cc:	f013 0f20 	tst.w	r3, #32
   135d0:	d14d      	bne.n	1366e <mem_manage_fault+0xe2>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   135d2:	4b37      	ldr	r3, [pc, #220]	; (136b0 <mem_manage_fault+0x124>)
   135d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   135d6:	f013 0f10 	tst.w	r3, #16
   135da:	d104      	bne.n	135e6 <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   135dc:	4b34      	ldr	r3, [pc, #208]	; (136b0 <mem_manage_fault+0x124>)
   135de:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   135e0:	f014 0402 	ands.w	r4, r4, #2
   135e4:	d004      	beq.n	135f0 <mem_manage_fault+0x64>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   135e6:	4b32      	ldr	r3, [pc, #200]	; (136b0 <mem_manage_fault+0x124>)
   135e8:	685c      	ldr	r4, [r3, #4]
   135ea:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   135ee:	d143      	bne.n	13678 <mem_manage_fault+0xec>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   135f0:	4b2f      	ldr	r3, [pc, #188]	; (136b0 <mem_manage_fault+0x124>)
   135f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   135f4:	f013 0f20 	tst.w	r3, #32
   135f8:	d004      	beq.n	13604 <mem_manage_fault+0x78>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   135fa:	4a2d      	ldr	r2, [pc, #180]	; (136b0 <mem_manage_fault+0x124>)
   135fc:	6a53      	ldr	r3, [r2, #36]	; 0x24
   135fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   13602:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13604:	492a      	ldr	r1, [pc, #168]	; (136b0 <mem_manage_fault+0x124>)
   13606:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   13608:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1360c:	628b      	str	r3, [r1, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1360e:	2101      	movs	r1, #1
   13610:	4628      	mov	r0, r5
   13612:	f016 fa61 	bl	29ad8 <memory_fault_recoverable>
   13616:	7030      	strb	r0, [r6, #0]
}
   13618:	4620      	mov	r0, r4
   1361a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   1361c:	2145      	movs	r1, #69	; 0x45
   1361e:	4825      	ldr	r0, [pc, #148]	; (136b4 <mem_manage_fault+0x128>)
   13620:	f015 fb15 	bl	28c4e <z_log_minimal_printk>
   13624:	e7bf      	b.n	135a6 <mem_manage_fault+0x1a>
		PR_FAULT_INFO("  Unstacking error");
   13626:	2145      	movs	r1, #69	; 0x45
   13628:	4823      	ldr	r0, [pc, #140]	; (136b8 <mem_manage_fault+0x12c>)
   1362a:	f015 fb10 	bl	28c4e <z_log_minimal_printk>
   1362e:	e7bf      	b.n	135b0 <mem_manage_fault+0x24>
		PR_FAULT_INFO("  Data Access Violation");
   13630:	2145      	movs	r1, #69	; 0x45
   13632:	4822      	ldr	r0, [pc, #136]	; (136bc <mem_manage_fault+0x130>)
   13634:	f015 fb0b 	bl	28c4e <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   13638:	4b1d      	ldr	r3, [pc, #116]	; (136b0 <mem_manage_fault+0x124>)
   1363a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1363e:	f013 0f80 	tst.w	r3, #128	; 0x80
   13642:	d102      	bne.n	1364a <mem_manage_fault+0xbe>
	uint32_t mmfar = -EINVAL;
   13644:	f06f 0715 	mvn.w	r7, #21
   13648:	e7b9      	b.n	135be <mem_manage_fault+0x32>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1364a:	463a      	mov	r2, r7
   1364c:	2145      	movs	r1, #69	; 0x45
   1364e:	481c      	ldr	r0, [pc, #112]	; (136c0 <mem_manage_fault+0x134>)
   13650:	f015 fafd 	bl	28c4e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   13654:	2c00      	cmp	r4, #0
   13656:	d0b2      	beq.n	135be <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13658:	4a15      	ldr	r2, [pc, #84]	; (136b0 <mem_manage_fault+0x124>)
   1365a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1365c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13660:	6293      	str	r3, [r2, #40]	; 0x28
   13662:	e7ac      	b.n	135be <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Instruction Access Violation");
   13664:	2145      	movs	r1, #69	; 0x45
   13666:	4817      	ldr	r0, [pc, #92]	; (136c4 <mem_manage_fault+0x138>)
   13668:	f015 faf1 	bl	28c4e <z_log_minimal_printk>
   1366c:	e7ac      	b.n	135c8 <mem_manage_fault+0x3c>
		PR_FAULT_INFO(
   1366e:	2145      	movs	r1, #69	; 0x45
   13670:	4815      	ldr	r0, [pc, #84]	; (136c8 <mem_manage_fault+0x13c>)
   13672:	f015 faec 	bl	28c4e <z_log_minimal_printk>
   13676:	e7ac      	b.n	135d2 <mem_manage_fault+0x46>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13678:	4629      	mov	r1, r5
   1367a:	4638      	mov	r0, r7
   1367c:	f7ff fdf2 	bl	13264 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   13680:	b980      	cbnz	r0, 136a4 <mem_manage_fault+0x118>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   13682:	4b0b      	ldr	r3, [pc, #44]	; (136b0 <mem_manage_fault+0x124>)
   13684:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   13686:	f014 0410 	ands.w	r4, r4, #16
   1368a:	d0b1      	beq.n	135f0 <mem_manage_fault+0x64>
   1368c:	4c0f      	ldr	r4, [pc, #60]	; (136cc <mem_manage_fault+0x140>)
   1368e:	f44f 72ab 	mov.w	r2, #342	; 0x156
   13692:	4621      	mov	r1, r4
   13694:	480e      	ldr	r0, [pc, #56]	; (136d0 <mem_manage_fault+0x144>)
   13696:	f015 faba 	bl	28c0e <assert_print>
   1369a:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1369e:	4620      	mov	r0, r4
   136a0:	f015 faae 	bl	28c00 <assert_post_action>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   136a4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   136a8:	2402      	movs	r4, #2
   136aa:	e7a1      	b.n	135f0 <mem_manage_fault+0x64>
   136ac:	000309bc 	.word	0x000309bc
   136b0:	e000ed00 	.word	0xe000ed00
   136b4:	000309d8 	.word	0x000309d8
   136b8:	00030784 	.word	0x00030784
   136bc:	00030a10 	.word	0x00030a10
   136c0:	00030a30 	.word	0x00030a30
   136c4:	00030a4c 	.word	0x00030a4c
   136c8:	00030818 	.word	0x00030818
   136cc:	00030a70 	.word	0x00030a70
   136d0:	00030128 	.word	0x00030128

000136d4 <hard_fault>:
{
   136d4:	b570      	push	{r4, r5, r6, lr}
   136d6:	4606      	mov	r6, r0
   136d8:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   136da:	2145      	movs	r1, #69	; 0x45
   136dc:	4833      	ldr	r0, [pc, #204]	; (137ac <hard_fault+0xd8>)
   136de:	f015 fab6 	bl	28c4e <z_log_minimal_printk>
	*recoverable = false;
   136e2:	2300      	movs	r3, #0
   136e4:	702b      	strb	r3, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   136e6:	4b32      	ldr	r3, [pc, #200]	; (137b0 <hard_fault+0xdc>)
   136e8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   136ea:	f014 0402 	ands.w	r4, r4, #2
   136ee:	d124      	bne.n	1373a <hard_fault+0x66>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   136f0:	4b2f      	ldr	r3, [pc, #188]	; (137b0 <hard_fault+0xdc>)
   136f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   136f4:	2b00      	cmp	r3, #0
   136f6:	db27      	blt.n	13748 <hard_fault+0x74>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   136f8:	4b2d      	ldr	r3, [pc, #180]	; (137b0 <hard_fault+0xdc>)
   136fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   136fc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   13700:	d048      	beq.n	13794 <hard_fault+0xc0>
		PR_EXC("  Fault escalation (see below)");
   13702:	2145      	movs	r1, #69	; 0x45
   13704:	482b      	ldr	r0, [pc, #172]	; (137b4 <hard_fault+0xe0>)
   13706:	f015 faa2 	bl	28c4e <z_log_minimal_printk>
		if (z_arm_is_synchronous_svc(esf)) {
   1370a:	4630      	mov	r0, r6
   1370c:	f7ff fe12 	bl	13334 <z_arm_is_synchronous_svc>
   13710:	b9f8      	cbnz	r0, 13752 <hard_fault+0x7e>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   13712:	4b27      	ldr	r3, [pc, #156]	; (137b0 <hard_fault+0xdc>)
   13714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13716:	f013 0fff 	tst.w	r3, #255	; 0xff
   1371a:	d121      	bne.n	13760 <hard_fault+0x8c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1371c:	4b24      	ldr	r3, [pc, #144]	; (137b0 <hard_fault+0xdc>)
   1371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13720:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   13724:	d123      	bne.n	1376e <hard_fault+0x9a>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   13726:	4b22      	ldr	r3, [pc, #136]	; (137b0 <hard_fault+0xdc>)
   13728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1372a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1372e:	d325      	bcc.n	1377c <hard_fault+0xa8>
			reason = usage_fault(esf);
   13730:	4630      	mov	r0, r6
   13732:	f7ff feb3 	bl	1349c <usage_fault>
   13736:	4604      	mov	r4, r0
   13738:	e004      	b.n	13744 <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
   1373a:	2145      	movs	r1, #69	; 0x45
   1373c:	481e      	ldr	r0, [pc, #120]	; (137b8 <hard_fault+0xe4>)
   1373e:	f015 fa86 	bl	28c4e <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13742:	2400      	movs	r4, #0
}
   13744:	4620      	mov	r0, r4
   13746:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("  Debug event");
   13748:	2145      	movs	r1, #69	; 0x45
   1374a:	481c      	ldr	r0, [pc, #112]	; (137bc <hard_fault+0xe8>)
   1374c:	f015 fa7f 	bl	28c4e <z_log_minimal_printk>
   13750:	e7f8      	b.n	13744 <hard_fault+0x70>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   13752:	6832      	ldr	r2, [r6, #0]
   13754:	2145      	movs	r1, #69	; 0x45
   13756:	481a      	ldr	r0, [pc, #104]	; (137c0 <hard_fault+0xec>)
   13758:	f015 fa79 	bl	28c4e <z_log_minimal_printk>
			reason = esf->basic.r0;
   1375c:	6834      	ldr	r4, [r6, #0]
   1375e:	e7f1      	b.n	13744 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
   13760:	462a      	mov	r2, r5
   13762:	2101      	movs	r1, #1
   13764:	4630      	mov	r0, r6
   13766:	f7ff ff11 	bl	1358c <mem_manage_fault>
   1376a:	4604      	mov	r4, r0
   1376c:	e7ea      	b.n	13744 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
   1376e:	462a      	mov	r2, r5
   13770:	2101      	movs	r1, #1
   13772:	4630      	mov	r0, r6
   13774:	f7ff fe1e 	bl	133b4 <bus_fault>
   13778:	4604      	mov	r4, r0
   1377a:	e7e3      	b.n	13744 <hard_fault+0x70>
			__ASSERT(0,
   1377c:	4c11      	ldr	r4, [pc, #68]	; (137c4 <hard_fault+0xf0>)
   1377e:	f240 22f2 	movw	r2, #754	; 0x2f2
   13782:	4621      	mov	r1, r4
   13784:	4810      	ldr	r0, [pc, #64]	; (137c8 <hard_fault+0xf4>)
   13786:	f015 fa42 	bl	28c0e <assert_print>
   1378a:	f240 21f2 	movw	r1, #754	; 0x2f2
   1378e:	4620      	mov	r0, r4
   13790:	f015 fa36 	bl	28c00 <assert_post_action>
		__ASSERT(0,
   13794:	4c0b      	ldr	r4, [pc, #44]	; (137c4 <hard_fault+0xf0>)
   13796:	f240 22f6 	movw	r2, #758	; 0x2f6
   1379a:	4621      	mov	r1, r4
   1379c:	480a      	ldr	r0, [pc, #40]	; (137c8 <hard_fault+0xf4>)
   1379e:	f015 fa36 	bl	28c0e <assert_print>
   137a2:	f240 21f6 	movw	r1, #758	; 0x2f6
   137a6:	4620      	mov	r0, r4
   137a8:	f015 fa2a 	bl	28c00 <assert_post_action>
   137ac:	00030aac 	.word	0x00030aac
   137b0:	e000ed00 	.word	0xe000ed00
   137b4:	00030b04 	.word	0x00030b04
   137b8:	00030ac8 	.word	0x00030ac8
   137bc:	00030af0 	.word	0x00030af0
   137c0:	00030b28 	.word	0x00030b28
   137c4:	00030a70 	.word	0x00030a70
   137c8:	00030128 	.word	0x00030128

000137cc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   137cc:	b530      	push	{r4, r5, lr}
   137ce:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   137d0:	4b21      	ldr	r3, [pc, #132]	; (13858 <z_arm_fault+0x8c>)
   137d2:	685c      	ldr	r4, [r3, #4]
   137d4:	f3c4 0408 	ubfx	r4, r4, #0, #9
   137d8:	2300      	movs	r3, #0
   137da:	f383 8811 	msr	BASEPRI, r3
   137de:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   137e2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   137e6:	f7ff fdc3 	bl	13370 <get_esf>
	__ASSERT(esf != NULL,
   137ea:	b158      	cbz	r0, 13804 <z_arm_fault+0x38>
   137ec:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   137ee:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   137f2:	4621      	mov	r1, r4
   137f4:	f016 f972 	bl	29adc <fault_handle>
   137f8:	4604      	mov	r4, r0
	if (recoverable) {
   137fa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   137fe:	b16b      	cbz	r3, 1381c <z_arm_fault+0x50>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   13800:	b00b      	add	sp, #44	; 0x2c
   13802:	bd30      	pop	{r4, r5, pc}
	__ASSERT(esf != NULL,
   13804:	4c15      	ldr	r4, [pc, #84]	; (1385c <z_arm_fault+0x90>)
   13806:	f44f 6284 	mov.w	r2, #1056	; 0x420
   1380a:	4621      	mov	r1, r4
   1380c:	4814      	ldr	r0, [pc, #80]	; (13860 <z_arm_fault+0x94>)
   1380e:	f015 f9fe 	bl	28c0e <assert_print>
   13812:	f44f 6184 	mov.w	r1, #1056	; 0x420
   13816:	4620      	mov	r0, r4
   13818:	f015 f9f2 	bl	28c00 <assert_post_action>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1381c:	2220      	movs	r2, #32
   1381e:	4629      	mov	r1, r5
   13820:	a801      	add	r0, sp, #4
   13822:	f016 fab3 	bl	29d8c <memcpy>
	if (nested_exc) {
   13826:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1382a:	b14b      	cbz	r3, 13840 <z_arm_fault+0x74>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1382c:	9b08      	ldr	r3, [sp, #32]
   1382e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13832:	b95a      	cbnz	r2, 1384c <z_arm_fault+0x80>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13834:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13838:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1383c:	9308      	str	r3, [sp, #32]
   1383e:	e005      	b.n	1384c <z_arm_fault+0x80>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13840:	9b08      	ldr	r3, [sp, #32]
   13842:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13846:	f023 0301 	bic.w	r3, r3, #1
   1384a:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   1384c:	a901      	add	r1, sp, #4
   1384e:	4620      	mov	r0, r4
   13850:	f016 f91a 	bl	29a88 <z_arm_fatal_error>
   13854:	e7d4      	b.n	13800 <z_arm_fault+0x34>
   13856:	bf00      	nop
   13858:	e000ed00 	.word	0xe000ed00
   1385c:	00030a70 	.word	0x00030a70
   13860:	00030128 	.word	0x00030128

00013864 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13864:	4a02      	ldr	r2, [pc, #8]	; (13870 <z_arm_fault_init+0xc>)
   13866:	6953      	ldr	r3, [r2, #20]
   13868:	f043 0310 	orr.w	r3, r3, #16
   1386c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1386e:	4770      	bx	lr
   13870:	e000ed00 	.word	0xe000ed00

00013874 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13874:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13878:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1387c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1387e:	4672      	mov	r2, lr
	bl z_arm_fault
   13880:	f7ff ffa4 	bl	137cc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13884:	bd01      	pop	{r0, pc}
   13886:	bf00      	nop

00013888 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13888:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1388a:	e006      	b.n	1389a <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1388c:	f003 030f 	and.w	r3, r3, #15
   13890:	4909      	ldr	r1, [pc, #36]	; (138b8 <z_arm_interrupt_init+0x30>)
   13892:	4419      	add	r1, r3
   13894:	2340      	movs	r3, #64	; 0x40
   13896:	760b      	strb	r3, [r1, #24]
   13898:	3201      	adds	r2, #1
   1389a:	2a2f      	cmp	r2, #47	; 0x2f
   1389c:	dc0a      	bgt.n	138b4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   1389e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   138a0:	2b00      	cmp	r3, #0
   138a2:	dbf3      	blt.n	1388c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   138a4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   138a8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   138ac:	2140      	movs	r1, #64	; 0x40
   138ae:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   138b2:	e7f1      	b.n	13898 <z_arm_interrupt_init+0x10>
	}
}
   138b4:	4770      	bx	lr
   138b6:	bf00      	nop
   138b8:	e000ecfc 	.word	0xe000ecfc

000138bc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   138bc:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   138be:	4913      	ldr	r1, [pc, #76]	; (1390c <__start+0x50>)
    strb r0, [r1]
   138c0:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   138c2:	2000      	movs	r0, #0
    msr CONTROL, r0
   138c4:	f380 8814 	msr	CONTROL, r0
    isb
   138c8:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   138cc:	f7fe f9dc 	bl	11c88 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   138d0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   138d2:	490f      	ldr	r1, [pc, #60]	; (13910 <__start+0x54>)
    str r0, [r1]
   138d4:	6008      	str	r0, [r1, #0]
    dsb
   138d6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   138da:	480e      	ldr	r0, [pc, #56]	; (13914 <__start+0x58>)
    msr msp, r0
   138dc:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   138e0:	f000 f830 	bl	13944 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   138e4:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   138e6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   138ea:	480b      	ldr	r0, [pc, #44]	; (13918 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   138ec:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   138f0:	1840      	adds	r0, r0, r1
    msr PSP, r0
   138f2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   138f6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   138fa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   138fc:	4308      	orrs	r0, r1
    msr CONTROL, r0
   138fe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13902:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13906:	f7ff fc17 	bl	13138 <z_arm_prep_c>
   1390a:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
   1390c:	200045fc 	.word	0x200045fc
    ldr r1, =_SCS_MPU_CTRL
   13910:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13914:	200074c0 	.word	0x200074c0
    ldr r0, =z_interrupt_stacks
   13918:	20006300 	.word	0x20006300

0001391c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1391c:	4b08      	ldr	r3, [pc, #32]	; (13940 <z_arm_clear_arm_mpu_config+0x24>)
   1391e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   13922:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   13926:	2300      	movs	r3, #0
   13928:	e006      	b.n	13938 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   1392a:	4a05      	ldr	r2, [pc, #20]	; (13940 <z_arm_clear_arm_mpu_config+0x24>)
   1392c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   13930:	2100      	movs	r1, #0
   13932:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   13936:	3301      	adds	r3, #1
   13938:	4283      	cmp	r3, r0
   1393a:	dbf6      	blt.n	1392a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   1393c:	4770      	bx	lr
   1393e:	bf00      	nop
   13940:	e000ed00 	.word	0xe000ed00

00013944 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13944:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13946:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13948:	2400      	movs	r4, #0
   1394a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1394e:	f7ff ffe5 	bl	1391c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13952:	4623      	mov	r3, r4
   13954:	e008      	b.n	13968 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   13956:	f103 0120 	add.w	r1, r3, #32
   1395a:	4a0e      	ldr	r2, [pc, #56]	; (13994 <z_arm_init_arch_hw_at_boot+0x50>)
   1395c:	f04f 30ff 	mov.w	r0, #4294967295
   13960:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13964:	3301      	adds	r3, #1
   13966:	b2db      	uxtb	r3, r3
   13968:	2b07      	cmp	r3, #7
   1396a:	d9f4      	bls.n	13956 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1396c:	2300      	movs	r3, #0
   1396e:	e008      	b.n	13982 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13970:	f103 0160 	add.w	r1, r3, #96	; 0x60
   13974:	4a07      	ldr	r2, [pc, #28]	; (13994 <z_arm_init_arch_hw_at_boot+0x50>)
   13976:	f04f 30ff 	mov.w	r0, #4294967295
   1397a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1397e:	3301      	adds	r3, #1
   13980:	b2db      	uxtb	r3, r3
   13982:	2b07      	cmp	r3, #7
   13984:	d9f4      	bls.n	13970 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   13986:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13988:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1398c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13990:	bd10      	pop	{r4, pc}
   13992:	bf00      	nop
   13994:	e000e100 	.word	0xe000e100

00013998 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13998:	b508      	push	{r3, lr}
	if (_current == thread) {
   1399a:	4b0a      	ldr	r3, [pc, #40]	; (139c4 <z_impl_k_thread_abort+0x2c>)
   1399c:	689b      	ldr	r3, [r3, #8]
   1399e:	4283      	cmp	r3, r0
   139a0:	d002      	beq.n	139a8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   139a2:	f010 fc97 	bl	242d4 <z_thread_abort>
}
   139a6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   139a8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   139ac:	2b00      	cmp	r3, #0
   139ae:	d0f8      	beq.n	139a2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   139b0:	4b05      	ldr	r3, [pc, #20]	; (139c8 <z_impl_k_thread_abort+0x30>)
   139b2:	685a      	ldr	r2, [r3, #4]
   139b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   139b8:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   139ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   139bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   139c0:	625a      	str	r2, [r3, #36]	; 0x24
   139c2:	e7ee      	b.n	139a2 <z_impl_k_thread_abort+0xa>
   139c4:	20003ac0 	.word	0x20003ac0
   139c8:	e000ed00 	.word	0xe000ed00

000139cc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   139cc:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   139ce:	4b03      	ldr	r3, [pc, #12]	; (139dc <z_arm_configure_static_mpu_regions+0x10>)
   139d0:	4a03      	ldr	r2, [pc, #12]	; (139e0 <z_arm_configure_static_mpu_regions+0x14>)
   139d2:	2101      	movs	r1, #1
   139d4:	4803      	ldr	r0, [pc, #12]	; (139e4 <z_arm_configure_static_mpu_regions+0x18>)
   139d6:	f000 f8a9 	bl	13b2c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   139da:	bd08      	pop	{r3, pc}
   139dc:	20040000 	.word	0x20040000
   139e0:	20000000 	.word	0x20000000
   139e4:	00030b4c 	.word	0x00030b4c

000139e8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   139e8:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   139ea:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   139ee:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   139f0:	4804      	ldr	r0, [pc, #16]	; (13a04 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   139f2:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   139f4:	2340      	movs	r3, #64	; 0x40
   139f6:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   139f8:	4b03      	ldr	r3, [pc, #12]	; (13a08 <z_arm_configure_dynamic_mpu_regions+0x20>)
   139fa:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   139fc:	2101      	movs	r1, #1
   139fe:	f000 f8ad 	bl	13b5c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   13a02:	bd08      	pop	{r3, pc}
   13a04:	2000288c 	.word	0x2000288c
   13a08:	150b0000 	.word	0x150b0000

00013a0c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   13a0c:	4a08      	ldr	r2, [pc, #32]	; (13a30 <region_init+0x24>)
   13a0e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13a12:	680b      	ldr	r3, [r1, #0]
   13a14:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13a18:	4303      	orrs	r3, r0
   13a1a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13a1e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13a22:	688b      	ldr	r3, [r1, #8]
   13a24:	f043 0301 	orr.w	r3, r3, #1
   13a28:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   13a2c:	4770      	bx	lr
   13a2e:	bf00      	nop
   13a30:	e000ed00 	.word	0xe000ed00

00013a34 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   13a34:	b510      	push	{r4, lr}
   13a36:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   13a38:	2807      	cmp	r0, #7
   13a3a:	d803      	bhi.n	13a44 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   13a3c:	f7ff ffe6 	bl	13a0c <region_init>

	return index;
   13a40:	4620      	mov	r0, r4
}
   13a42:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13a44:	4602      	mov	r2, r0
   13a46:	2145      	movs	r1, #69	; 0x45
   13a48:	4802      	ldr	r0, [pc, #8]	; (13a54 <region_allocate_and_init+0x20>)
   13a4a:	f015 f900 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   13a4e:	f06f 0015 	mvn.w	r0, #21
   13a52:	e7f6      	b.n	13a42 <region_allocate_and_init+0xe>
   13a54:	00030b5c 	.word	0x00030b5c

00013a58 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13a5c:	4680      	mov	r8, r0
   13a5e:	460f      	mov	r7, r1
   13a60:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
   13a62:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   13a64:	2500      	movs	r5, #0
   13a66:	e009      	b.n	13a7c <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13a68:	4621      	mov	r1, r4
   13a6a:	b2f0      	uxtb	r0, r6
   13a6c:	f016 f86c 	bl	29b48 <mpu_configure_region>
   13a70:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   13a72:	f110 0f16 	cmn.w	r0, #22
   13a76:	d019      	beq.n	13aac <mpu_configure_regions+0x54>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   13a78:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   13a7a:	3501      	adds	r5, #1
   13a7c:	42bd      	cmp	r5, r7
   13a7e:	da15      	bge.n	13aac <mpu_configure_regions+0x54>
		if (regions[i].size == 0U) {
   13a80:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   13a84:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   13a88:	6862      	ldr	r2, [r4, #4]
   13a8a:	2a00      	cmp	r2, #0
   13a8c:	d0f5      	beq.n	13a7a <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   13a8e:	f1b9 0f00 	cmp.w	r9, #0
   13a92:	d0e9      	beq.n	13a68 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   13a94:	4620      	mov	r0, r4
   13a96:	f016 f846 	bl	29b26 <mpu_partition_is_valid>
		if (do_sanity_check &&
   13a9a:	2800      	cmp	r0, #0
   13a9c:	d1e4      	bne.n	13a68 <mpu_configure_regions+0x10>
			LOG_ERR("Partition %u: sanity check failed.", i);
   13a9e:	462a      	mov	r2, r5
   13aa0:	2145      	movs	r1, #69	; 0x45
   13aa2:	4804      	ldr	r0, [pc, #16]	; (13ab4 <mpu_configure_regions+0x5c>)
   13aa4:	f015 f8d3 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   13aa8:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   13aac:	4630      	mov	r0, r6
   13aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13ab2:	bf00      	nop
   13ab4:	00030b88 	.word	0x00030b88

00013ab8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   13ab8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   13aba:	4c03      	ldr	r4, [pc, #12]	; (13ac8 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13abc:	2301      	movs	r3, #1
   13abe:	7822      	ldrb	r2, [r4, #0]
   13ac0:	f7ff ffca 	bl	13a58 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13ac4:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   13ac6:	bd10      	pop	{r4, pc}
   13ac8:	200045f1 	.word	0x200045f1

00013acc <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13acc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13ace:	2300      	movs	r3, #0
   13ad0:	4a09      	ldr	r2, [pc, #36]	; (13af8 <mpu_configure_dynamic_mpu_regions+0x2c>)
   13ad2:	7812      	ldrb	r2, [r2, #0]
   13ad4:	f7ff ffc0 	bl	13a58 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13ad8:	f110 0f16 	cmn.w	r0, #22
   13adc:	d00a      	beq.n	13af4 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13ade:	4603      	mov	r3, r0
   13ae0:	e006      	b.n	13af0 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   13ae2:	4a06      	ldr	r2, [pc, #24]	; (13afc <mpu_configure_dynamic_mpu_regions+0x30>)
   13ae4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   13ae8:	2100      	movs	r1, #0
   13aea:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   13aee:	3301      	adds	r3, #1
   13af0:	2b07      	cmp	r3, #7
   13af2:	ddf6      	ble.n	13ae2 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   13af4:	bd08      	pop	{r3, pc}
   13af6:	bf00      	nop
   13af8:	200045f1 	.word	0x200045f1
   13afc:	e000ed00 	.word	0xe000ed00

00013b00 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13b00:	4b04      	ldr	r3, [pc, #16]	; (13b14 <arm_core_mpu_enable+0x14>)
   13b02:	2205      	movs	r2, #5
   13b04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   13b08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13b0c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13b10:	4770      	bx	lr
   13b12:	bf00      	nop
   13b14:	e000ed00 	.word	0xe000ed00

00013b18 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13b18:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13b1c:	4b02      	ldr	r3, [pc, #8]	; (13b28 <arm_core_mpu_disable+0x10>)
   13b1e:	2200      	movs	r2, #0
   13b20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   13b24:	4770      	bx	lr
   13b26:	bf00      	nop
   13b28:	e000ed00 	.word	0xe000ed00

00013b2c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13b2c:	b510      	push	{r4, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   13b2e:	f7ff ffc3 	bl	13ab8 <mpu_configure_static_mpu_regions>
   13b32:	f110 0f16 	cmn.w	r0, #22
   13b36:	d000      	beq.n	13b3a <arm_core_mpu_configure_static_mpu_regions+0xe>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   13b38:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   13b3a:	4c06      	ldr	r4, [pc, #24]	; (13b54 <arm_core_mpu_configure_static_mpu_regions+0x28>)
   13b3c:	f44f 728b 	mov.w	r2, #278	; 0x116
   13b40:	4621      	mov	r1, r4
   13b42:	4805      	ldr	r0, [pc, #20]	; (13b58 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
   13b44:	f015 f863 	bl	28c0e <assert_print>
   13b48:	f44f 718b 	mov.w	r1, #278	; 0x116
   13b4c:	4620      	mov	r0, r4
   13b4e:	f015 f857 	bl	28c00 <assert_post_action>
   13b52:	bf00      	nop
   13b54:	00030bb0 	.word	0x00030bb0
   13b58:	00030128 	.word	0x00030128

00013b5c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   13b5c:	b510      	push	{r4, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   13b5e:	f7ff ffb5 	bl	13acc <mpu_configure_dynamic_mpu_regions>
   13b62:	f110 0f16 	cmn.w	r0, #22
   13b66:	d000      	beq.n	13b6a <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   13b68:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   13b6a:	4c06      	ldr	r4, [pc, #24]	; (13b84 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   13b6c:	f240 1235 	movw	r2, #309	; 0x135
   13b70:	4621      	mov	r1, r4
   13b72:	4805      	ldr	r0, [pc, #20]	; (13b88 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
   13b74:	f015 f84b 	bl	28c0e <assert_print>
   13b78:	f240 1135 	movw	r1, #309	; 0x135
   13b7c:	4620      	mov	r0, r4
   13b7e:	f015 f83f 	bl	28c00 <assert_post_action>
   13b82:	bf00      	nop
   13b84:	00030bb0 	.word	0x00030bb0
   13b88:	00030128 	.word	0x00030128

00013b8c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   13b8c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13b8e:	4b1c      	ldr	r3, [pc, #112]	; (13c00 <z_arm_mpu_init+0x74>)
   13b90:	681d      	ldr	r5, [r3, #0]
   13b92:	2d08      	cmp	r5, #8
   13b94:	d803      	bhi.n	13b9e <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13b96:	f7ff ffbf 	bl	13b18 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13b9a:	2400      	movs	r4, #0
   13b9c:	e015      	b.n	13bca <z_arm_mpu_init+0x3e>
		__ASSERT(0,
   13b9e:	4c19      	ldr	r4, [pc, #100]	; (13c04 <z_arm_mpu_init+0x78>)
   13ba0:	f240 124d 	movw	r2, #333	; 0x14d
   13ba4:	4621      	mov	r1, r4
   13ba6:	4818      	ldr	r0, [pc, #96]	; (13c08 <z_arm_mpu_init+0x7c>)
   13ba8:	f015 f831 	bl	28c0e <assert_print>
   13bac:	f240 114d 	movw	r1, #333	; 0x14d
   13bb0:	4620      	mov	r0, r4
   13bb2:	f015 f825 	bl	28c00 <assert_post_action>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   13bb6:	4b12      	ldr	r3, [pc, #72]	; (13c00 <z_arm_mpu_init+0x74>)
   13bb8:	6859      	ldr	r1, [r3, #4]
   13bba:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   13bbe:	0093      	lsls	r3, r2, #2
   13bc0:	4419      	add	r1, r3
   13bc2:	4620      	mov	r0, r4
   13bc4:	f7ff ff22 	bl	13a0c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13bc8:	3401      	adds	r4, #1
   13bca:	42a5      	cmp	r5, r4
   13bcc:	d8f3      	bhi.n	13bb6 <z_arm_mpu_init+0x2a>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13bce:	4b0f      	ldr	r3, [pc, #60]	; (13c0c <z_arm_mpu_init+0x80>)
   13bd0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   13bd2:	f7ff ff95 	bl	13b00 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   13bd6:	4b0e      	ldr	r3, [pc, #56]	; (13c10 <z_arm_mpu_init+0x84>)
   13bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   13bdc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   13be0:	2b08      	cmp	r3, #8
   13be2:	d101      	bne.n	13be8 <z_arm_mpu_init+0x5c>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   13be4:	2000      	movs	r0, #0
   13be6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
   13be8:	4c06      	ldr	r4, [pc, #24]	; (13c04 <z_arm_mpu_init+0x78>)
   13bea:	f240 12ad 	movw	r2, #429	; 0x1ad
   13bee:	4621      	mov	r1, r4
   13bf0:	4805      	ldr	r0, [pc, #20]	; (13c08 <z_arm_mpu_init+0x7c>)
   13bf2:	f015 f80c 	bl	28c0e <assert_print>
   13bf6:	f240 11ad 	movw	r1, #429	; 0x1ad
   13bfa:	4620      	mov	r0, r4
   13bfc:	f015 f800 	bl	28c00 <assert_post_action>
   13c00:	00030be8 	.word	0x00030be8
   13c04:	00030bb0 	.word	0x00030bb0
   13c08:	00030128 	.word	0x00030128
   13c0c:	200045f1 	.word	0x200045f1
   13c10:	e000ed00 	.word	0xe000ed00

00013c14 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   13c14:	4b01      	ldr	r3, [pc, #4]	; (13c1c <__stdout_hook_install+0x8>)
   13c16:	6018      	str	r0, [r3, #0]
}
   13c18:	4770      	bx	lr
   13c1a:	bf00      	nop
   13c1c:	2000067c 	.word	0x2000067c

00013c20 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   13c20:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13c24:	4905      	ldr	r1, [pc, #20]	; (13c3c <__NVIC_SystemReset+0x1c>)
   13c26:	68ca      	ldr	r2, [r1, #12]
   13c28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13c2c:	4b04      	ldr	r3, [pc, #16]	; (13c40 <__NVIC_SystemReset+0x20>)
   13c2e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13c30:	60cb      	str	r3, [r1, #12]
   13c32:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13c36:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13c38:	e7fd      	b.n	13c36 <__NVIC_SystemReset+0x16>
   13c3a:	bf00      	nop
   13c3c:	e000ed00 	.word	0xe000ed00
   13c40:	05fa0004 	.word	0x05fa0004

00013c44 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   13c44:	b510      	push	{r4, lr}
	__asm__ volatile(
   13c46:	f04f 0340 	mov.w	r3, #64	; 0x40
   13c4a:	f3ef 8411 	mrs	r4, BASEPRI
   13c4e:	f383 8812 	msr	BASEPRI_MAX, r3
   13c52:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13c56:	2301      	movs	r3, #1
   13c58:	4a0c      	ldr	r2, [pc, #48]	; (13c8c <nordicsemi_nrf52_init+0x48>)
   13c5a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   13c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   13c62:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   13c66:	f016 f8e1 	bl	29e2c <nrf52_errata_197>
   13c6a:	b120      	cbz	r0, 13c76 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   13c6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13c70:	2201      	movs	r2, #1
   13c72:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   13c76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13c7a:	2201      	movs	r2, #1
   13c7c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   13c80:	f384 8811 	msr	BASEPRI, r4
   13c84:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13c88:	2000      	movs	r0, #0
   13c8a:	bd10      	pop	{r4, pc}
   13c8c:	4001e000 	.word	0x4001e000

00013c90 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13c90:	b130      	cbz	r0, 13ca0 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   13c92:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   13c94:	4b03      	ldr	r3, [pc, #12]	; (13ca4 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13c96:	0180      	lsls	r0, r0, #6
   13c98:	f043 0301 	orr.w	r3, r3, #1
   13c9c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   13c9e:	bd08      	pop	{r3, pc}
   13ca0:	4770      	bx	lr
   13ca2:	bf00      	nop
   13ca4:	0002fc80 	.word	0x0002fc80

00013ca8 <bt_addr_le_to_str>:
{
   13ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13caa:	b08b      	sub	sp, #44	; 0x2c
   13cac:	4604      	mov	r4, r0
   13cae:	460d      	mov	r5, r1
   13cb0:	4616      	mov	r6, r2
	switch (addr->type) {
   13cb2:	7803      	ldrb	r3, [r0, #0]
   13cb4:	2b03      	cmp	r3, #3
   13cb6:	d82c      	bhi.n	13d12 <bt_addr_le_to_str+0x6a>
   13cb8:	e8df f003 	tbb	[pc, r3]
   13cbc:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
   13cc0:	4917      	ldr	r1, [pc, #92]	; (13d20 <bt_addr_le_to_str+0x78>)
   13cc2:	a807      	add	r0, sp, #28
   13cc4:	f015 ffe8 	bl	29c98 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   13cc8:	7963      	ldrb	r3, [r4, #5]
   13cca:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   13ccc:	78e1      	ldrb	r1, [r4, #3]
   13cce:	78a0      	ldrb	r0, [r4, #2]
   13cd0:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   13cd2:	f10d 0c1c 	add.w	ip, sp, #28
   13cd6:	f8cd c014 	str.w	ip, [sp, #20]
   13cda:	9704      	str	r7, [sp, #16]
   13cdc:	9003      	str	r0, [sp, #12]
   13cde:	9102      	str	r1, [sp, #8]
   13ce0:	9201      	str	r2, [sp, #4]
   13ce2:	9300      	str	r3, [sp, #0]
   13ce4:	79a3      	ldrb	r3, [r4, #6]
   13ce6:	4a0f      	ldr	r2, [pc, #60]	; (13d24 <bt_addr_le_to_str+0x7c>)
   13ce8:	4631      	mov	r1, r6
   13cea:	4628      	mov	r0, r5
   13cec:	f014 fb4c 	bl	28388 <snprintk>
}
   13cf0:	b00b      	add	sp, #44	; 0x2c
   13cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   13cf4:	490c      	ldr	r1, [pc, #48]	; (13d28 <bt_addr_le_to_str+0x80>)
   13cf6:	a807      	add	r0, sp, #28
   13cf8:	f015 ffce 	bl	29c98 <strcpy>
		break;
   13cfc:	e7e4      	b.n	13cc8 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   13cfe:	490b      	ldr	r1, [pc, #44]	; (13d2c <bt_addr_le_to_str+0x84>)
   13d00:	a807      	add	r0, sp, #28
   13d02:	f015 ffc9 	bl	29c98 <strcpy>
		break;
   13d06:	e7df      	b.n	13cc8 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   13d08:	4909      	ldr	r1, [pc, #36]	; (13d30 <bt_addr_le_to_str+0x88>)
   13d0a:	a807      	add	r0, sp, #28
   13d0c:	f015 ffc4 	bl	29c98 <strcpy>
		break;
   13d10:	e7da      	b.n	13cc8 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   13d12:	4a08      	ldr	r2, [pc, #32]	; (13d34 <bt_addr_le_to_str+0x8c>)
   13d14:	210a      	movs	r1, #10
   13d16:	a807      	add	r0, sp, #28
   13d18:	f014 fb36 	bl	28388 <snprintk>
		break;
   13d1c:	e7d4      	b.n	13cc8 <bt_addr_le_to_str+0x20>
   13d1e:	bf00      	nop
   13d20:	0002fcbc 	.word	0x0002fcbc
   13d24:	0002fcec 	.word	0x0002fcec
   13d28:	0002fcc4 	.word	0x0002fcc4
   13d2c:	0002fccc 	.word	0x0002fccc
   13d30:	0002fcd8 	.word	0x0002fcd8
   13d34:	0002fce4 	.word	0x0002fce4

00013d38 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   13d38:	2940      	cmp	r1, #64	; 0x40
   13d3a:	bf28      	it	cs
   13d3c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   13d3e:	2300      	movs	r3, #0
   13d40:	428b      	cmp	r3, r1
   13d42:	d21c      	bcs.n	13d7e <bt_hex+0x46>
{
   13d44:	b430      	push	{r4, r5}
		str[i * 2] = hex[b[i] >> 4];
   13d46:	f810 c003 	ldrb.w	ip, [r0, r3]
   13d4a:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   13d4e:	005a      	lsls	r2, r3, #1
   13d50:	4d0d      	ldr	r5, [pc, #52]	; (13d88 <bt_hex+0x50>)
   13d52:	f815 c00c 	ldrb.w	ip, [r5, ip]
   13d56:	4c0d      	ldr	r4, [pc, #52]	; (13d8c <bt_hex+0x54>)
   13d58:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   13d5c:	f810 c003 	ldrb.w	ip, [r0, r3]
   13d60:	f00c 0c0f 	and.w	ip, ip, #15
   13d64:	3201      	adds	r2, #1
   13d66:	f815 500c 	ldrb.w	r5, [r5, ip]
   13d6a:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
   13d6c:	3301      	adds	r3, #1
   13d6e:	428b      	cmp	r3, r1
   13d70:	d3e9      	bcc.n	13d46 <bt_hex+0xe>
	}

	str[i * 2] = '\0';
   13d72:	4806      	ldr	r0, [pc, #24]	; (13d8c <bt_hex+0x54>)
   13d74:	2200      	movs	r2, #0
   13d76:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   13d7a:	bc30      	pop	{r4, r5}
   13d7c:	4770      	bx	lr
	str[i * 2] = '\0';
   13d7e:	4803      	ldr	r0, [pc, #12]	; (13d8c <bt_hex+0x54>)
   13d80:	2200      	movs	r2, #0
   13d82:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   13d86:	4770      	bx	lr
   13d88:	00030c3c 	.word	0x00030c3c
   13d8c:	200028b8 	.word	0x200028b8

00013d90 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   13d90:	b510      	push	{r4, lr}
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));
   13d92:	4c03      	ldr	r4, [pc, #12]	; (13da0 <bt_addr_le_str+0x10>)
   13d94:	221e      	movs	r2, #30
   13d96:	4621      	mov	r1, r4
   13d98:	f7ff ff86 	bl	13ca8 <bt_addr_le_to_str>

	return str;
}
   13d9c:	4620      	mov	r0, r4
   13d9e:	bd10      	pop	{r4, pc}
   13da0:	20002898 	.word	0x20002898

00013da4 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   13da4:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
   13da6:	2149      	movs	r1, #73	; 0x49
   13da8:	4808      	ldr	r0, [pc, #32]	; (13dcc <save_id+0x28>)
   13daa:	f014 ff50 	bl	28c4e <z_log_minimal_printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   13dae:	4908      	ldr	r1, [pc, #32]	; (13dd0 <save_id+0x2c>)
   13db0:	79ca      	ldrb	r2, [r1, #7]
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   13db2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   13db6:	4807      	ldr	r0, [pc, #28]	; (13dd4 <save_id+0x30>)
   13db8:	f7fe fadc 	bl	12374 <settings_save_one>
	if (err) {
   13dbc:	b900      	cbnz	r0, 13dc0 <save_id+0x1c>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   13dbe:	bd08      	pop	{r3, pc}
   13dc0:	4602      	mov	r2, r0
		BT_ERR("Failed to save ID (err %d)", err);
   13dc2:	2145      	movs	r1, #69	; 0x45
   13dc4:	4804      	ldr	r0, [pc, #16]	; (13dd8 <save_id+0x34>)
   13dc6:	f014 ff42 	bl	28c4e <z_log_minimal_printk>
}
   13dca:	e7f8      	b.n	13dbe <save_id+0x1a>
   13dcc:	00030c58 	.word	0x00030c58
   13dd0:	20000380 	.word	0x20000380
   13dd4:	00030c68 	.word	0x00030c68
   13dd8:	00030c70 	.word	0x00030c70

00013ddc <set>:
{
   13ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13dde:	b083      	sub	sp, #12
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13de0:	f3bf 8f5b 	dmb	ish
   13de4:	492b      	ldr	r1, [pc, #172]	; (13e94 <set+0xb8>)
   13de6:	6809      	ldr	r1, [r1, #0]
   13de8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13dec:	f011 0f01 	tst.w	r1, #1
   13df0:	d049      	beq.n	13e86 <set+0xaa>
   13df2:	4604      	mov	r4, r0
   13df4:	4616      	mov	r6, r2
   13df6:	461d      	mov	r5, r3
	if (!name) {
   13df8:	b330      	cbz	r0, 13e48 <set+0x6c>
	len = settings_name_next(name, &next);
   13dfa:	a901      	add	r1, sp, #4
   13dfc:	f015 fb08 	bl	29410 <settings_name_next>
   13e00:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   13e02:	4925      	ldr	r1, [pc, #148]	; (13e98 <set+0xbc>)
   13e04:	4620      	mov	r0, r4
   13e06:	f015 ff89 	bl	29d1c <strncmp>
   13e0a:	4607      	mov	r7, r0
   13e0c:	2800      	cmp	r0, #0
   13e0e:	d13e      	bne.n	13e8e <set+0xb2>
   13e10:	f3bf 8f5b 	dmb	ish
   13e14:	4b1f      	ldr	r3, [pc, #124]	; (13e94 <set+0xb8>)
   13e16:	681b      	ldr	r3, [r3, #0]
   13e18:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13e1c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   13e20:	f013 0f08 	tst.w	r3, #8
   13e24:	d117      	bne.n	13e56 <set+0x7a>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   13e26:	2207      	movs	r2, #7
   13e28:	491c      	ldr	r1, [pc, #112]	; (13e9c <set+0xc0>)
   13e2a:	4628      	mov	r0, r5
   13e2c:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   13e2e:	2806      	cmp	r0, #6
   13e30:	d917      	bls.n	13e62 <set+0x86>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   13e32:	491b      	ldr	r1, [pc, #108]	; (13ea0 <set+0xc4>)
   13e34:	fba1 3100 	umull	r3, r1, r1, r0
   13e38:	1a40      	subs	r0, r0, r1
   13e3a:	eb01 0150 	add.w	r1, r1, r0, lsr #1
   13e3e:	0889      	lsrs	r1, r1, #2
   13e40:	4b16      	ldr	r3, [pc, #88]	; (13e9c <set+0xc0>)
   13e42:	71d9      	strb	r1, [r3, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   13e44:	4623      	mov	r3, r4
   13e46:	e01a      	b.n	13e7e <set+0xa2>
		BT_ERR("Insufficient number of arguments");
   13e48:	2145      	movs	r1, #69	; 0x45
   13e4a:	4816      	ldr	r0, [pc, #88]	; (13ea4 <set+0xc8>)
   13e4c:	f014 feff 	bl	28c4e <z_log_minimal_printk>
		return -ENOENT;
   13e50:	f06f 0401 	mvn.w	r4, #1
   13e54:	e018      	b.n	13e88 <set+0xac>
			BT_WARN("Ignoring identities stored in flash");
   13e56:	2157      	movs	r1, #87	; 0x57
   13e58:	4813      	ldr	r0, [pc, #76]	; (13ea8 <set+0xcc>)
   13e5a:	f014 fef8 	bl	28c4e <z_log_minimal_printk>
			return 0;
   13e5e:	463c      	mov	r4, r7
   13e60:	e012      	b.n	13e88 <set+0xac>
				BT_ERR("Invalid length ID address in storage");
   13e62:	2145      	movs	r1, #69	; 0x45
   13e64:	4811      	ldr	r0, [pc, #68]	; (13eac <set+0xd0>)
   13e66:	f014 fef2 	bl	28c4e <z_log_minimal_printk>
			(void)memset(bt_dev.id_addr, 0,
   13e6a:	4d0c      	ldr	r5, [pc, #48]	; (13e9c <set+0xc0>)
   13e6c:	2207      	movs	r2, #7
   13e6e:	2100      	movs	r1, #0
   13e70:	4628      	mov	r0, r5
   13e72:	f015 ffba 	bl	29dea <memset>
			bt_dev.id_count = 0U;
   13e76:	2300      	movs	r3, #0
   13e78:	71eb      	strb	r3, [r5, #7]
   13e7a:	e005      	b.n	13e88 <set+0xac>
			for (i = 0; i < bt_dev.id_count; i++) {
   13e7c:	3301      	adds	r3, #1
   13e7e:	b2ca      	uxtb	r2, r1
   13e80:	4293      	cmp	r3, r2
   13e82:	dbfb      	blt.n	13e7c <set+0xa0>
   13e84:	e000      	b.n	13e88 <set+0xac>
		return 0;
   13e86:	2400      	movs	r4, #0
}
   13e88:	4620      	mov	r0, r4
   13e8a:	b003      	add	sp, #12
   13e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return -ENOENT;
   13e8e:	f06f 0401 	mvn.w	r4, #1
   13e92:	e7f9      	b.n	13e88 <set+0xac>
   13e94:	2000044c 	.word	0x2000044c
   13e98:	00030cb8 	.word	0x00030cb8
   13e9c:	20000380 	.word	0x20000380
   13ea0:	24924925 	.word	0x24924925
   13ea4:	00030c90 	.word	0x00030c90
   13ea8:	00030cbc 	.word	0x00030cbc
   13eac:	00030ce8 	.word	0x00030ce8

00013eb0 <bt_settings_encode_key>:
{
   13eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13eb4:	b088      	sub	sp, #32
   13eb6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	if (key) {
   13eb8:	b1dc      	cbz	r4, 13ef2 <bt_settings_encode_key+0x42>
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
   13eba:	799d      	ldrb	r5, [r3, #6]
   13ebc:	795e      	ldrb	r6, [r3, #5]
   13ebe:	791f      	ldrb	r7, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
   13ec0:	f893 c003 	ldrb.w	ip, [r3, #3]
   13ec4:	f893 e002 	ldrb.w	lr, [r3, #2]
   13ec8:	f893 8001 	ldrb.w	r8, [r3, #1]
			 addr->type, key);
   13ecc:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
   13ece:	9407      	str	r4, [sp, #28]
   13ed0:	9306      	str	r3, [sp, #24]
   13ed2:	f8cd 8014 	str.w	r8, [sp, #20]
   13ed6:	f8cd e010 	str.w	lr, [sp, #16]
   13eda:	f8cd c00c 	str.w	ip, [sp, #12]
   13ede:	9702      	str	r7, [sp, #8]
   13ee0:	9601      	str	r6, [sp, #4]
   13ee2:	9500      	str	r5, [sp, #0]
   13ee4:	4613      	mov	r3, r2
   13ee6:	4a0e      	ldr	r2, [pc, #56]	; (13f20 <bt_settings_encode_key+0x70>)
   13ee8:	f014 fa4e 	bl	28388 <snprintk>
}
   13eec:	b008      	add	sp, #32
   13eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
   13ef2:	799c      	ldrb	r4, [r3, #6]
   13ef4:	795d      	ldrb	r5, [r3, #5]
   13ef6:	791e      	ldrb	r6, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
   13ef8:	78df      	ldrb	r7, [r3, #3]
   13efa:	f893 c002 	ldrb.w	ip, [r3, #2]
   13efe:	f893 e001 	ldrb.w	lr, [r3, #1]
			 addr->type);
   13f02:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
   13f04:	9306      	str	r3, [sp, #24]
   13f06:	f8cd e014 	str.w	lr, [sp, #20]
   13f0a:	f8cd c010 	str.w	ip, [sp, #16]
   13f0e:	9703      	str	r7, [sp, #12]
   13f10:	9602      	str	r6, [sp, #8]
   13f12:	9501      	str	r5, [sp, #4]
   13f14:	9400      	str	r4, [sp, #0]
   13f16:	4613      	mov	r3, r2
   13f18:	4a02      	ldr	r2, [pc, #8]	; (13f24 <bt_settings_encode_key+0x74>)
   13f1a:	f014 fa35 	bl	28388 <snprintk>
}
   13f1e:	e7e5      	b.n	13eec <bt_settings_encode_key+0x3c>
   13f20:	00030d14 	.word	0x00030d14
   13f24:	00030d38 	.word	0x00030d38

00013f28 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
   13f28:	b508      	push	{r3, lr}
	k_work_submit(&save_id_work);
   13f2a:	4802      	ldr	r0, [pc, #8]	; (13f34 <bt_settings_save_id+0xc>)
   13f2c:	f00e ff6e 	bl	22e0c <k_work_submit>
}
   13f30:	bd08      	pop	{r3, pc}
   13f32:	bf00      	nop
   13f34:	20000680 	.word	0x20000680

00013f38 <commit>:

static int commit(void)
{
   13f38:	b510      	push	{r4, lr}
   13f3a:	f3bf 8f5b 	dmb	ish
   13f3e:	4b22      	ldr	r3, [pc, #136]	; (13fc8 <commit+0x90>)
   13f40:	681b      	ldr	r3, [r3, #0]
   13f42:	f3bf 8f5b 	dmb	ish
	int err;

	BT_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13f46:	f013 0f01 	tst.w	r3, #1
   13f4a:	d03b      	beq.n	13fc4 <commit+0x8c>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   13f4c:	4b1f      	ldr	r3, [pc, #124]	; (13fcc <commit+0x94>)
   13f4e:	79db      	ldrb	r3, [r3, #7]
   13f50:	b313      	cbz	r3, 13f98 <commit+0x60>
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!bt_dev.id_count) {
   13f52:	4b1e      	ldr	r3, [pc, #120]	; (13fcc <commit+0x94>)
   13f54:	79db      	ldrb	r3, [r3, #7]
   13f56:	b91b      	cbnz	r3, 13f60 <commit+0x28>
		err = bt_setup_random_id_addr();
   13f58:	f002 f8d2 	bl	16100 <bt_setup_random_id_addr>
		if (err) {
   13f5c:	4604      	mov	r4, r0
   13f5e:	bb28      	cbnz	r0, 13fac <commit+0x74>
   13f60:	f3bf 8f5b 	dmb	ish
   13f64:	4b18      	ldr	r3, [pc, #96]	; (13fc8 <commit+0x90>)
   13f66:	681b      	ldr	r3, [r3, #0]
   13f68:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13f6c:	f013 0f04 	tst.w	r3, #4
   13f70:	d021      	beq.n	13fb6 <commit+0x7e>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13f72:	4b15      	ldr	r3, [pc, #84]	; (13fc8 <commit+0x90>)
   13f74:	f3bf 8f5b 	dmb	ish
   13f78:	e853 2f00 	ldrex	r2, [r3]
   13f7c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
   13f80:	e843 1000 	strex	r0, r1, [r3]
   13f84:	2800      	cmp	r0, #0
   13f86:	d1f7      	bne.n	13f78 <commit+0x40>
   13f88:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   13f8c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   13f90:	d114      	bne.n	13fbc <commit+0x84>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
   13f92:	2400      	movs	r4, #0
}
   13f94:	4620      	mov	r0, r4
   13f96:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   13f98:	f002 f858 	bl	1604c <bt_setup_public_id_addr>
		if (err) {
   13f9c:	4604      	mov	r4, r0
   13f9e:	2800      	cmp	r0, #0
   13fa0:	d0d7      	beq.n	13f52 <commit+0x1a>
			BT_ERR("Unable to setup an identity address");
   13fa2:	2145      	movs	r1, #69	; 0x45
   13fa4:	480a      	ldr	r0, [pc, #40]	; (13fd0 <commit+0x98>)
   13fa6:	f014 fe52 	bl	28c4e <z_log_minimal_printk>
			return err;
   13faa:	e7f3      	b.n	13f94 <commit+0x5c>
			BT_ERR("Unable to setup an identity address");
   13fac:	2145      	movs	r1, #69	; 0x45
   13fae:	4808      	ldr	r0, [pc, #32]	; (13fd0 <commit+0x98>)
   13fb0:	f014 fe4d 	bl	28c4e <z_log_minimal_printk>
			return err;
   13fb4:	e7ee      	b.n	13f94 <commit+0x5c>
		bt_finalize_init();
   13fb6:	f001 fc29 	bl	1580c <bt_finalize_init>
   13fba:	e7da      	b.n	13f72 <commit+0x3a>
		bt_settings_save_id();
   13fbc:	f7ff ffb4 	bl	13f28 <bt_settings_save_id>
	return 0;
   13fc0:	2400      	movs	r4, #0
   13fc2:	e7e7      	b.n	13f94 <commit+0x5c>
		return 0;
   13fc4:	2400      	movs	r4, #0
   13fc6:	e7e5      	b.n	13f94 <commit+0x5c>
   13fc8:	2000044c 	.word	0x2000044c
   13fcc:	20000380 	.word	0x20000380
   13fd0:	00030d5c 	.word	0x00030d5c

00013fd4 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   13fd4:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   13fd6:	f7fe fb63 	bl	126a0 <settings_subsys_init>
	if (err) {
   13fda:	4604      	mov	r4, r0
   13fdc:	b908      	cbnz	r0, 13fe2 <bt_settings_init+0xe>
		BT_ERR("settings_subsys_init failed (err %d)", err);
		return err;
	}

	return 0;
}
   13fde:	4620      	mov	r0, r4
   13fe0:	bd10      	pop	{r4, pc}
		BT_ERR("settings_subsys_init failed (err %d)", err);
   13fe2:	4602      	mov	r2, r0
   13fe4:	2145      	movs	r1, #69	; 0x45
   13fe6:	4802      	ldr	r0, [pc, #8]	; (13ff0 <bt_settings_init+0x1c>)
   13fe8:	f014 fe31 	bl	28c4e <z_log_minimal_printk>
		return err;
   13fec:	e7f7      	b.n	13fde <bt_settings_init+0xa>
   13fee:	bf00      	nop
   13ff0:	00030d88 	.word	0x00030d88

00013ff4 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   13ff4:	b570      	push	{r4, r5, r6, lr}
   13ff6:	b084      	sub	sp, #16
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13ff8:	ae02      	add	r6, sp, #8
   13ffa:	2400      	movs	r4, #0
   13ffc:	9402      	str	r4, [sp, #8]
   13ffe:	9403      	str	r4, [sp, #12]
   14000:	4b08      	ldr	r3, [pc, #32]	; (14024 <long_wq_init+0x30>)
   14002:	9302      	str	r3, [sp, #8]

	k_work_queue_init(&bt_long_wq);
   14004:	4d08      	ldr	r5, [pc, #32]	; (14028 <long_wq_init+0x34>)
   14006:	4628      	mov	r0, r5
   14008:	f00e ff08 	bl	22e1c <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   1400c:	9600      	str	r6, [sp, #0]
   1400e:	230a      	movs	r3, #10
   14010:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   14014:	4905      	ldr	r1, [pc, #20]	; (1402c <long_wq_init+0x38>)
   14016:	4628      	mov	r0, r5
   14018:	f00e ff18 	bl	22e4c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   1401c:	4620      	mov	r0, r4
   1401e:	b004      	add	sp, #16
   14020:	bd70      	pop	{r4, r5, r6, pc}
   14022:	bf00      	nop
   14024:	00030dc4 	.word	0x00030dc4
   14028:	200018b8 	.word	0x200018b8
   1402c:	20004600 	.word	0x20004600

00014030 <bt_long_wq_schedule>:
{
   14030:	b508      	push	{r3, lr}
   14032:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   14034:	4801      	ldr	r0, [pc, #4]	; (1403c <bt_long_wq_schedule+0xc>)
   14036:	f00e ffdd 	bl	22ff4 <k_work_schedule_for_queue>
}
   1403a:	bd08      	pop	{r3, pc}
   1403c:	200018b8 	.word	0x200018b8

00014040 <bt_long_wq_reschedule>:
{
   14040:	b508      	push	{r3, lr}
   14042:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   14044:	4801      	ldr	r0, [pc, #4]	; (1404c <bt_long_wq_reschedule+0xc>)
   14046:	f00f f833 	bl	230b0 <k_work_reschedule_for_queue>
}
   1404a:	bd08      	pop	{r3, pc}
   1404c:	200018b8 	.word	0x200018b8

00014050 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14050:	b510      	push	{r4, lr}
   14052:	4686      	mov	lr, r0
   14054:	468c      	mov	ip, r1
	switch (src->type) {
   14056:	7803      	ldrb	r3, [r0, #0]
   14058:	2b01      	cmp	r3, #1
   1405a:	d018      	beq.n	1408e <uuid_to_uuid128+0x3e>
   1405c:	2b02      	cmp	r3, #2
   1405e:	d032      	beq.n	140c6 <uuid_to_uuid128+0x76>
   14060:	b103      	cbz	r3, 14064 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   14062:	bd10      	pop	{r4, pc}
		*dst = uuid128_base;
   14064:	4c1b      	ldr	r4, [pc, #108]	; (140d4 <uuid_to_uuid128+0x84>)
   14066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   14068:	f8cc 0000 	str.w	r0, [ip]
   1406c:	f8cc 1004 	str.w	r1, [ip, #4]
   14070:	f8cc 2008 	str.w	r2, [ip, #8]
   14074:	f8cc 300c 	str.w	r3, [ip, #12]
   14078:	7823      	ldrb	r3, [r4, #0]
   1407a:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   1407e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   14082:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   14086:	0a1b      	lsrs	r3, r3, #8
   14088:	f88c 300e 	strb.w	r3, [ip, #14]
}
   1408c:	e7e9      	b.n	14062 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   1408e:	4c11      	ldr	r4, [pc, #68]	; (140d4 <uuid_to_uuid128+0x84>)
   14090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   14092:	f8cc 0000 	str.w	r0, [ip]
   14096:	f8cc 1004 	str.w	r1, [ip, #4]
   1409a:	f8cc 2008 	str.w	r2, [ip, #8]
   1409e:	f8cc 300c 	str.w	r3, [ip, #12]
   140a2:	7823      	ldrb	r3, [r4, #0]
   140a4:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   140a8:	f8de 3004 	ldr.w	r3, [lr, #4]
	dst[0] = val;
   140ac:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   140b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
   140b4:	f88c 200e 	strb.w	r2, [ip, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   140b8:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   140ba:	f88c 200f 	strb.w	r2, [ip, #15]
	dst[1] = val >> 8;
   140be:	0e1b      	lsrs	r3, r3, #24
   140c0:	f88c 3010 	strb.w	r3, [ip, #16]
}
   140c4:	e7cd      	b.n	14062 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   140c6:	2211      	movs	r2, #17
   140c8:	4601      	mov	r1, r0
   140ca:	4660      	mov	r0, ip
   140cc:	f015 fe5e 	bl	29d8c <memcpy>
		return;
   140d0:	e7c7      	b.n	14062 <uuid_to_uuid128+0x12>
   140d2:	bf00      	nop
   140d4:	00030dd0 	.word	0x00030dd0

000140d8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   140d8:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   140da:	2805      	cmp	r0, #5
   140dc:	d811      	bhi.n	14102 <bt_buf_get_rx+0x2a>
   140de:	4604      	mov	r4, r0
   140e0:	212a      	movs	r1, #42	; 0x2a
   140e2:	40c1      	lsrs	r1, r0
   140e4:	f011 0f01 	tst.w	r1, #1
   140e8:	d00b      	beq.n	14102 <bt_buf_get_rx+0x2a>
	return net_buf_alloc_fixed(pool, timeout);
   140ea:	480b      	ldr	r0, [pc, #44]	; (14118 <bt_buf_get_rx+0x40>)
   140ec:	f019 f951 	bl	2d392 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   140f0:	4605      	mov	r5, r0
   140f2:	b120      	cbz	r0, 140fe <bt_buf_get_rx+0x26>
	net_buf_simple_reserve(&buf->b, reserve);
   140f4:	2100      	movs	r1, #0
   140f6:	3008      	adds	r0, #8
   140f8:	f008 fc2e 	bl	1c958 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   140fc:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   140fe:	4628      	mov	r0, r5
   14100:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   14102:	4c06      	ldr	r4, [pc, #24]	; (1411c <bt_buf_get_rx+0x44>)
   14104:	223f      	movs	r2, #63	; 0x3f
   14106:	4621      	mov	r1, r4
   14108:	4805      	ldr	r0, [pc, #20]	; (14120 <bt_buf_get_rx+0x48>)
   1410a:	f014 fd80 	bl	28c0e <assert_print>
   1410e:	213f      	movs	r1, #63	; 0x3f
   14110:	4620      	mov	r0, r4
   14112:	f014 fd75 	bl	28c00 <assert_post_action>
   14116:	bf00      	nop
   14118:	20000b6c 	.word	0x20000b6c
   1411c:	00030de4 	.word	0x00030de4
   14120:	00030128 	.word	0x00030128

00014124 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   14124:	b510      	push	{r4, lr}
   14126:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   14128:	4b0a      	ldr	r3, [pc, #40]	; (14154 <bt_buf_get_cmd_complete+0x30>)
   1412a:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
   1412e:	b158      	cbz	r0, 14148 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   14130:	f008 fd70 	bl	1cc14 <net_buf_ref>
   14134:	4604      	mov	r4, r0
   14136:	2301      	movs	r3, #1
   14138:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   1413a:	2100      	movs	r1, #0
   1413c:	8181      	strh	r1, [r0, #12]
   1413e:	3008      	adds	r0, #8
   14140:	f008 fc0a 	bl	1c958 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   14144:	4620      	mov	r0, r4
   14146:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14148:	460b      	mov	r3, r1
   1414a:	2001      	movs	r0, #1
   1414c:	f7ff ffc4 	bl	140d8 <bt_buf_get_rx>
   14150:	4604      	mov	r4, r0
   14152:	e7f7      	b.n	14144 <bt_buf_get_cmd_complete+0x20>
   14154:	20000380 	.word	0x20000380

00014158 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   14158:	b510      	push	{r4, lr}
	switch (evt) {
   1415a:	280f      	cmp	r0, #15
   1415c:	d90d      	bls.n	1417a <bt_buf_get_evt+0x22>
   1415e:	2813      	cmp	r0, #19
   14160:	d10d      	bne.n	1417e <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   14162:	4814      	ldr	r0, [pc, #80]	; (141b4 <bt_buf_get_evt+0x5c>)
   14164:	f019 f915 	bl	2d392 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   14168:	4604      	mov	r4, r0
   1416a:	b198      	cbz	r0, 14194 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   1416c:	2100      	movs	r1, #0
   1416e:	3008      	adds	r0, #8
   14170:	f008 fbf2 	bl	1c958 <net_buf_simple_reserve>
   14174:	2301      	movs	r3, #1
   14176:	7523      	strb	r3, [r4, #20]
}
   14178:	e00c      	b.n	14194 <bt_buf_get_evt+0x3c>
	switch (evt) {
   1417a:	280e      	cmp	r0, #14
   1417c:	d205      	bcs.n	1418a <bt_buf_get_evt+0x32>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
   1417e:	b959      	cbnz	r1, 14198 <bt_buf_get_evt+0x40>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14180:	2001      	movs	r0, #1
   14182:	f7ff ffa9 	bl	140d8 <bt_buf_get_rx>
   14186:	4604      	mov	r4, r0
   14188:	e004      	b.n	14194 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   1418a:	4610      	mov	r0, r2
   1418c:	4619      	mov	r1, r3
   1418e:	f7ff ffc9 	bl	14124 <bt_buf_get_cmd_complete>
   14192:	4604      	mov	r4, r0
	}
}
   14194:	4620      	mov	r0, r4
   14196:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   14198:	4807      	ldr	r0, [pc, #28]	; (141b8 <bt_buf_get_evt+0x60>)
   1419a:	f019 f8fa 	bl	2d392 <net_buf_alloc_fixed>
			if (buf) {
   1419e:	4604      	mov	r4, r0
   141a0:	2800      	cmp	r0, #0
   141a2:	d0f7      	beq.n	14194 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   141a4:	2100      	movs	r1, #0
   141a6:	3008      	adds	r0, #8
   141a8:	f008 fbd6 	bl	1c958 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   141ac:	2301      	movs	r3, #1
   141ae:	7523      	strb	r3, [r4, #20]
			return buf;
   141b0:	e7f0      	b.n	14194 <bt_buf_get_evt+0x3c>
   141b2:	bf00      	nop
   141b4:	20000ba0 	.word	0x20000ba0
   141b8:	20000ad0 	.word	0x20000ad0

000141bc <conn_handle_disconnected>:
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   141bc:	2300      	movs	r3, #0
   141be:	b103      	cbz	r3, 141c2 <conn_handle_disconnected+0x6>
}
   141c0:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   141c2:	4a05      	ldr	r2, [pc, #20]	; (141d8 <conn_handle_disconnected+0x1c>)
   141c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   141c8:	b922      	cbnz	r2, 141d4 <conn_handle_disconnected+0x18>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   141ca:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   141ce:	4902      	ldr	r1, [pc, #8]	; (141d8 <conn_handle_disconnected+0x1c>)
   141d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   141d4:	3301      	adds	r3, #1
   141d6:	e7f2      	b.n	141be <conn_handle_disconnected+0x2>
   141d8:	2000293c 	.word	0x2000293c

000141dc <conn_handle_is_disconnected>:
	handle |= ~BT_ACL_HANDLE_MASK;
   141dc:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   141e0:	2300      	movs	r3, #0
   141e2:	b10b      	cbz	r3, 141e8 <conn_handle_is_disconnected+0xc>
	return false;
   141e4:	2000      	movs	r0, #0
}
   141e6:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   141e8:	4a06      	ldr	r2, [pc, #24]	; (14204 <conn_handle_is_disconnected+0x28>)
   141ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   141ee:	4282      	cmp	r2, r0
   141f0:	d001      	beq.n	141f6 <conn_handle_is_disconnected+0x1a>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   141f2:	3301      	adds	r3, #1
   141f4:	e7f5      	b.n	141e2 <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   141f6:	4a03      	ldr	r2, [pc, #12]	; (14204 <conn_handle_is_disconnected+0x28>)
   141f8:	2100      	movs	r1, #0
   141fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   141fe:	2001      	movs	r0, #1
   14200:	4770      	bx	lr
   14202:	bf00      	nop
   14204:	2000293c 	.word	0x2000293c

00014208 <read_local_ver_complete>:
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   14208:	6882      	ldr	r2, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1420a:	7851      	ldrb	r1, [r2, #1]
   1420c:	4b08      	ldr	r3, [pc, #32]	; (14230 <read_local_ver_complete+0x28>)
   1420e:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   14212:	8851      	ldrh	r1, [r2, #2]
   14214:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   14218:	7911      	ldrb	r1, [r2, #4]
   1421a:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1421e:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   14222:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   14226:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   1422a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   1422e:	4770      	bx	lr
   14230:	20000380 	.word	0x20000380

00014234 <le_read_supp_states_complete>:
{
   14234:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   14236:	6880      	ldr	r0, [r0, #8]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   14238:	3001      	adds	r0, #1
   1423a:	f015 feff 	bl	2a03c <sys_get_le64>
   1423e:	4b02      	ldr	r3, [pc, #8]	; (14248 <le_read_supp_states_complete+0x14>)
   14240:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
}
   14244:	bd08      	pop	{r3, pc}
   14246:	bf00      	nop
   14248:	20000380 	.word	0x20000380

0001424c <le_read_resolving_list_size_complete>:
	struct bt_hci_rp_le_read_rl_size *rp = (void *)buf->data;
   1424c:	6883      	ldr	r3, [r0, #8]
	bt_dev.le.rl_size = rp->rl_size;
   1424e:	785a      	ldrb	r2, [r3, #1]
   14250:	4b01      	ldr	r3, [pc, #4]	; (14258 <le_read_resolving_list_size_complete+0xc>)
   14252:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   14256:	4770      	bx	lr
   14258:	20000380 	.word	0x20000380

0001425c <hci_data_buf_overflow>:
{
   1425c:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   1425e:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   14260:	781a      	ldrb	r2, [r3, #0]
   14262:	2157      	movs	r1, #87	; 0x57
   14264:	4801      	ldr	r0, [pc, #4]	; (1426c <hci_data_buf_overflow+0x10>)
   14266:	f014 fcf2 	bl	28c4e <z_log_minimal_printk>
}
   1426a:	bd08      	pop	{r3, pc}
   1426c:	00030e4c 	.word	0x00030e4c

00014270 <handle_event_common>:
{
   14270:	b510      	push	{r4, lr}
   14272:	4686      	mov	lr, r0
   14274:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   14276:	f04f 0c00 	mov.w	ip, #0
   1427a:	4563      	cmp	r3, ip
   1427c:	d918      	bls.n	142b0 <handle_event_common+0x40>
		const struct event_handler *handler = &handlers[i];
   1427e:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   14282:	f812 403c 	ldrb.w	r4, [r2, ip, lsl #3]
   14286:	4574      	cmp	r4, lr
   14288:	d107      	bne.n	1429a <handle_event_common+0x2a>
		if (buf->len < handler->min_len) {
   1428a:	8982      	ldrh	r2, [r0, #12]
   1428c:	784b      	ldrb	r3, [r1, #1]
   1428e:	429a      	cmp	r2, r3
   14290:	d306      	bcc.n	142a0 <handle_event_common+0x30>
		handler->handler(buf);
   14292:	684b      	ldr	r3, [r1, #4]
   14294:	4798      	blx	r3
		return 0;
   14296:	2000      	movs	r0, #0
}
   14298:	bd10      	pop	{r4, pc}
	for (i = 0; i < num_handlers; i++) {
   1429a:	f10c 0c01 	add.w	ip, ip, #1
   1429e:	e7ec      	b.n	1427a <handle_event_common+0xa>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   142a0:	4673      	mov	r3, lr
   142a2:	2145      	movs	r1, #69	; 0x45
   142a4:	4804      	ldr	r0, [pc, #16]	; (142b8 <handle_event_common+0x48>)
   142a6:	f014 fcd2 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   142aa:	f06f 0015 	mvn.w	r0, #21
   142ae:	e7f3      	b.n	14298 <handle_event_common+0x28>
	return -EOPNOTSUPP;
   142b0:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   142b4:	e7f0      	b.n	14298 <handle_event_common+0x28>
   142b6:	bf00      	nop
   142b8:	00030e7c 	.word	0x00030e7c

000142bc <hci_reset_complete>:
	uint8_t status = buf->data[0];
   142bc:	6883      	ldr	r3, [r0, #8]
   142be:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   142c0:	b98b      	cbnz	r3, 142e6 <hci_reset_complete+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   142c2:	4b09      	ldr	r3, [pc, #36]	; (142e8 <hci_reset_complete+0x2c>)
   142c4:	f3bf 8f5b 	dmb	ish
   142c8:	681a      	ldr	r2, [r3, #0]
   142ca:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   142ce:	f002 0209 	and.w	r2, r2, #9
   142d2:	f3bf 8f5b 	dmb	ish
   142d6:	e853 1f00 	ldrex	r1, [r3]
   142da:	e843 2000 	strex	r0, r2, [r3]
   142de:	2800      	cmp	r0, #0
   142e0:	d1f9      	bne.n	142d6 <hci_reset_complete+0x1a>
   142e2:	f3bf 8f5b 	dmb	ish
}
   142e6:	4770      	bx	lr
   142e8:	2000044c 	.word	0x2000044c

000142ec <read_local_features_complete>:
{
   142ec:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   142ee:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   142f0:	2208      	movs	r2, #8
   142f2:	3101      	adds	r1, #1
   142f4:	4801      	ldr	r0, [pc, #4]	; (142fc <read_local_features_complete+0x10>)
   142f6:	f015 fd49 	bl	29d8c <memcpy>
}
   142fa:	bd08      	pop	{r3, pc}
   142fc:	200003f0 	.word	0x200003f0

00014300 <read_supported_commands_complete>:
{
   14300:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   14302:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   14304:	2240      	movs	r2, #64	; 0x40
   14306:	3101      	adds	r1, #1
   14308:	4801      	ldr	r0, [pc, #4]	; (14310 <read_supported_commands_complete+0x10>)
   1430a:	f015 fd3f 	bl	29d8c <memcpy>
}
   1430e:	bd08      	pop	{r3, pc}
   14310:	200003f8 	.word	0x200003f8

00014314 <read_le_features_complete>:
{
   14314:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   14316:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   14318:	2208      	movs	r2, #8
   1431a:	3101      	adds	r1, #1
   1431c:	4801      	ldr	r0, [pc, #4]	; (14324 <read_le_features_complete+0x10>)
   1431e:	f015 fd35 	bl	29d8c <memcpy>
}
   14322:	bd08      	pop	{r3, pc}
   14324:	20000450 	.word	0x20000450

00014328 <le_read_buffer_size_complete>:
{
   14328:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1432a:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1432c:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   14330:	b299      	uxth	r1, r3
   14332:	4806      	ldr	r0, [pc, #24]	; (1434c <le_read_buffer_size_complete+0x24>)
   14334:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   14338:	b901      	cbnz	r1, 1433c <le_read_buffer_size_complete+0x14>
}
   1433a:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1433c:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1433e:	460a      	mov	r2, r1
   14340:	f500 7080 	add.w	r0, r0, #256	; 0x100
   14344:	f01a ff6c 	bl	2f220 <z_impl_k_sem_init>
   14348:	e7f7      	b.n	1433a <le_read_buffer_size_complete+0x12>
   1434a:	bf00      	nop
   1434c:	20000380 	.word	0x20000380

00014350 <read_buffer_size_complete>:
{
   14350:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   14352:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   14354:	4b08      	ldr	r3, [pc, #32]	; (14378 <read_buffer_size_complete+0x28>)
   14356:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1435a:	b103      	cbz	r3, 1435e <read_buffer_size_complete+0xe>
}
   1435c:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1435e:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   14362:	4805      	ldr	r0, [pc, #20]	; (14378 <read_buffer_size_complete+0x28>)
   14364:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   14368:	8891      	ldrh	r1, [r2, #4]
   1436a:	460a      	mov	r2, r1
   1436c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   14370:	f01a ff56 	bl	2f220 <z_impl_k_sem_init>
   14374:	e7f2      	b.n	1435c <read_buffer_size_complete+0xc>
   14376:	bf00      	nop
   14378:	20000380 	.word	0x20000380

0001437c <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1437c:	2801      	cmp	r0, #1
   1437e:	d001      	beq.n	14384 <find_pending_connect+0x8>
	return NULL;
   14380:	2000      	movs	r0, #0
}
   14382:	4770      	bx	lr
{
   14384:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14386:	2205      	movs	r2, #5
   14388:	4b07      	ldr	r3, [pc, #28]	; (143a8 <find_pending_connect+0x2c>)
   1438a:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   1438e:	f003 f8ed 	bl	1756c <bt_conn_lookup_state_le>
		if (!conn) {
   14392:	b100      	cbz	r0, 14396 <find_pending_connect+0x1a>
}
   14394:	bd08      	pop	{r3, pc}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14396:	2204      	movs	r2, #4
   14398:	4904      	ldr	r1, [pc, #16]	; (143ac <find_pending_connect+0x30>)
   1439a:	4b03      	ldr	r3, [pc, #12]	; (143a8 <find_pending_connect+0x2c>)
   1439c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   143a0:	f003 f8e4 	bl	1756c <bt_conn_lookup_state_le>
		return conn;
   143a4:	e7f6      	b.n	14394 <find_pending_connect+0x18>
   143a6:	bf00      	nop
   143a8:	20000380 	.word	0x20000380
   143ac:	00030c1c 	.word	0x00030c1c

000143b0 <le_conn_complete_adv_timeout>:
{
   143b0:	b510      	push	{r4, lr}
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   143b2:	f002 f84f 	bl	16454 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   143b6:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   143b8:	f3bf 8f5b 	dmb	ish
   143bc:	e850 3f00 	ldrex	r3, [r0]
   143c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   143c4:	e840 3200 	strex	r2, r3, [r0]
   143c8:	2a00      	cmp	r2, #0
   143ca:	d1f7      	bne.n	143bc <le_conn_complete_adv_timeout+0xc>
   143cc:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   143d0:	2100      	movs	r1, #0
   143d2:	2001      	movs	r0, #1
   143d4:	f7ff ffd2 	bl	1437c <find_pending_connect>
		if (!conn) {
   143d8:	4604      	mov	r4, r0
   143da:	b140      	cbz	r0, 143ee <le_conn_complete_adv_timeout+0x3e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   143dc:	233c      	movs	r3, #60	; 0x3c
   143de:	7303      	strb	r3, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   143e0:	2100      	movs	r1, #0
   143e2:	f002 fe59 	bl	17098 <bt_conn_set_state>
		bt_conn_unref(conn);
   143e6:	4620      	mov	r0, r4
   143e8:	f002 fe1a 	bl	17020 <bt_conn_unref>
}
   143ec:	bd10      	pop	{r4, pc}
			BT_ERR("No pending peripheral connection");
   143ee:	2145      	movs	r1, #69	; 0x45
   143f0:	4801      	ldr	r0, [pc, #4]	; (143f8 <le_conn_complete_adv_timeout+0x48>)
   143f2:	f014 fc2c 	bl	28c4e <z_log_minimal_printk>
			return;
   143f6:	e7f9      	b.n	143ec <le_conn_complete_adv_timeout+0x3c>
   143f8:	00030ea4 	.word	0x00030ea4

000143fc <hci_disconn_complete>:
{
   143fc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   143fe:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14400:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   14404:	7823      	ldrb	r3, [r4, #0]
   14406:	b103      	cbz	r3, 1440a <hci_disconn_complete+0xe>
}
   14408:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   1440a:	4630      	mov	r0, r6
   1440c:	f002 fe3a 	bl	17084 <bt_conn_lookup_handle>
	if (!conn) {
   14410:	4605      	mov	r5, r0
   14412:	b158      	cbz	r0, 1442c <hci_disconn_complete+0x30>
	conn->err = evt->reason;
   14414:	78e3      	ldrb	r3, [r4, #3]
   14416:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14418:	2100      	movs	r1, #0
   1441a:	f002 fe3d 	bl	17098 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   1441e:	78ab      	ldrb	r3, [r5, #2]
   14420:	2b01      	cmp	r3, #1
   14422:	d009      	beq.n	14438 <hci_disconn_complete+0x3c>
		bt_conn_unref(conn);
   14424:	4628      	mov	r0, r5
   14426:	f002 fdfb 	bl	17020 <bt_conn_unref>
		return;
   1442a:	e7ed      	b.n	14408 <hci_disconn_complete+0xc>
		BT_ERR("Unable to look up conn with handle %u", handle);
   1442c:	4632      	mov	r2, r6
   1442e:	2145      	movs	r1, #69	; 0x45
   14430:	4803      	ldr	r0, [pc, #12]	; (14440 <hci_disconn_complete+0x44>)
   14432:	f014 fc0c 	bl	28c4e <z_log_minimal_printk>
		return;
   14436:	e7e7      	b.n	14408 <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
   14438:	4628      	mov	r0, r5
   1443a:	f002 fdf1 	bl	17020 <bt_conn_unref>
   1443e:	e7e3      	b.n	14408 <hci_disconn_complete+0xc>
   14440:	00030ecc 	.word	0x00030ecc

00014444 <le_phy_update_complete>:
{
   14444:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   14446:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14448:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   1444c:	4620      	mov	r0, r4
   1444e:	f002 fe19 	bl	17084 <bt_conn_lookup_handle>
	if (!conn) {
   14452:	b110      	cbz	r0, 1445a <le_phy_update_complete+0x16>
	bt_conn_unref(conn);
   14454:	f002 fde4 	bl	17020 <bt_conn_unref>
}
   14458:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1445a:	4622      	mov	r2, r4
   1445c:	2145      	movs	r1, #69	; 0x45
   1445e:	4802      	ldr	r0, [pc, #8]	; (14468 <le_phy_update_complete+0x24>)
   14460:	f014 fbf5 	bl	28c4e <z_log_minimal_printk>
		return;
   14464:	e7f8      	b.n	14458 <le_phy_update_complete+0x14>
   14466:	bf00      	nop
   14468:	00030ef8 	.word	0x00030ef8

0001446c <le_data_len_change>:
{
   1446c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   1446e:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14470:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   14472:	4620      	mov	r0, r4
   14474:	f002 fe06 	bl	17084 <bt_conn_lookup_handle>
	if (!conn) {
   14478:	b110      	cbz	r0, 14480 <le_data_len_change+0x14>
	bt_conn_unref(conn);
   1447a:	f002 fdd1 	bl	17020 <bt_conn_unref>
}
   1447e:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14480:	4622      	mov	r2, r4
   14482:	2145      	movs	r1, #69	; 0x45
   14484:	4801      	ldr	r0, [pc, #4]	; (1448c <le_data_len_change+0x20>)
   14486:	f014 fbe2 	bl	28c4e <z_log_minimal_printk>
		return;
   1448a:	e7f8      	b.n	1447e <le_data_len_change+0x12>
   1448c:	00030ef8 	.word	0x00030ef8

00014490 <le_remote_feat_complete>:
{
   14490:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   14492:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14494:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   14498:	4630      	mov	r0, r6
   1449a:	f002 fdf3 	bl	17084 <bt_conn_lookup_handle>
	if (!conn) {
   1449e:	b198      	cbz	r0, 144c8 <le_remote_feat_complete+0x38>
   144a0:	4605      	mov	r5, r0
	if (!evt->status) {
   144a2:	7823      	ldrb	r3, [r4, #0]
   144a4:	b1b3      	cbz	r3, 144d4 <le_remote_feat_complete+0x44>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   144a6:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   144a8:	f3bf 8f5b 	dmb	ish
   144ac:	e853 1f00 	ldrex	r1, [r3]
   144b0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   144b4:	e843 1200 	strex	r2, r1, [r3]
   144b8:	2a00      	cmp	r2, #0
   144ba:	d1f7      	bne.n	144ac <le_remote_feat_complete+0x1c>
   144bc:	f3bf 8f5b 	dmb	ish
	bt_conn_unref(conn);
   144c0:	4628      	mov	r0, r5
   144c2:	f002 fdad 	bl	17020 <bt_conn_unref>
}
   144c6:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   144c8:	4632      	mov	r2, r6
   144ca:	2145      	movs	r1, #69	; 0x45
   144cc:	4804      	ldr	r0, [pc, #16]	; (144e0 <le_remote_feat_complete+0x50>)
   144ce:	f014 fbbe 	bl	28c4e <z_log_minimal_printk>
		return;
   144d2:	e7f8      	b.n	144c6 <le_remote_feat_complete+0x36>
		memcpy(conn->le.features, evt->features,
   144d4:	2208      	movs	r2, #8
   144d6:	1ce1      	adds	r1, r4, #3
   144d8:	30b4      	adds	r0, #180	; 0xb4
   144da:	f015 fc57 	bl	29d8c <memcpy>
   144de:	e7e2      	b.n	144a6 <le_remote_feat_complete+0x16>
   144e0:	00030ef8 	.word	0x00030ef8

000144e4 <hci_num_completed_packets>:
{
   144e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   144e8:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   144ec:	2700      	movs	r7, #0
   144ee:	e052      	b.n	14596 <hci_num_completed_packets+0xb2>
				conn->pending_no_cb--;
   144f0:	3b01      	subs	r3, #1
   144f2:	61e3      	str	r3, [r4, #28]
   144f4:	f382 8811 	msr	BASEPRI, r2
   144f8:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   144fc:	4620      	mov	r0, r4
   144fe:	f002 fb85 	bl	16c0c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   14502:	f00e f913 	bl	2272c <z_impl_k_sem_give>
				continue;
   14506:	e024      	b.n	14552 <hci_num_completed_packets+0x6e>
   14508:	f382 8811 	msr	BASEPRI, r2
   1450c:	f3bf 8f6f 	isb	sy
			if (!node) {
   14510:	2b00      	cmp	r3, #0
   14512:	d038      	beq.n	14586 <hci_num_completed_packets+0xa2>
	__asm__ volatile(
   14514:	f04f 0140 	mov.w	r1, #64	; 0x40
   14518:	f3ef 8211 	mrs	r2, BASEPRI
   1451c:	f381 8812 	msr	BASEPRI_MAX, r1
   14520:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   14524:	68d9      	ldr	r1, [r3, #12]
   14526:	61e1      	str	r1, [r4, #28]
			tx->pending_no_cb = 0U;
   14528:	2100      	movs	r1, #0
   1452a:	60d9      	str	r1, [r3, #12]
	parent->next = child;
   1452c:	6019      	str	r1, [r3, #0]
	return list->tail;
   1452e:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   14530:	2900      	cmp	r1, #0
   14532:	d046      	beq.n	145c2 <hci_num_completed_packets+0xde>
	parent->next = child;
   14534:	600b      	str	r3, [r1, #0]
	list->tail = node;
   14536:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   14538:	f382 8811 	msr	BASEPRI, r2
   1453c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   14540:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14544:	f00e fc62 	bl	22e0c <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   14548:	4620      	mov	r0, r4
   1454a:	f002 fb5f 	bl	16c0c <bt_conn_get_pkts>
   1454e:	f00e f8ed 	bl	2272c <z_impl_k_sem_give>
{
   14552:	462e      	mov	r6, r5
		while (count--) {
   14554:	1e75      	subs	r5, r6, #1
   14556:	b2ad      	uxth	r5, r5
   14558:	b1ce      	cbz	r6, 1458e <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   1455a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1455e:	f3ef 8311 	mrs	r3, BASEPRI
   14562:	f382 8812 	msr	BASEPRI_MAX, r2
   14566:	f3bf 8f6f 	isb	sy
   1456a:	461a      	mov	r2, r3
			if (conn->pending_no_cb) {
   1456c:	69e3      	ldr	r3, [r4, #28]
   1456e:	2b00      	cmp	r3, #0
   14570:	d1be      	bne.n	144f0 <hci_num_completed_packets+0xc>
	return list->head;
   14572:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14574:	2b00      	cmp	r3, #0
   14576:	d0c7      	beq.n	14508 <hci_num_completed_packets+0x24>
	return node->next;
   14578:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   1457a:	6161      	str	r1, [r4, #20]
	return list->tail;
   1457c:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1457e:	4298      	cmp	r0, r3
   14580:	d1c2      	bne.n	14508 <hci_num_completed_packets+0x24>
	list->tail = node;
   14582:	61a1      	str	r1, [r4, #24]
}
   14584:	e7c0      	b.n	14508 <hci_num_completed_packets+0x24>
				BT_ERR("packets count mismatch");
   14586:	2145      	movs	r1, #69	; 0x45
   14588:	4810      	ldr	r0, [pc, #64]	; (145cc <hci_num_completed_packets+0xe8>)
   1458a:	f014 fb60 	bl	28c4e <z_log_minimal_printk>
		bt_conn_unref(conn);
   1458e:	4620      	mov	r0, r4
   14590:	f002 fd46 	bl	17020 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   14594:	3701      	adds	r7, #1
   14596:	f898 3000 	ldrb.w	r3, [r8]
   1459a:	429f      	cmp	r7, r3
   1459c:	da14      	bge.n	145c8 <hci_num_completed_packets+0xe4>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1459e:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   145a2:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   145a6:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   145aa:	4628      	mov	r0, r5
   145ac:	f002 fd6a 	bl	17084 <bt_conn_lookup_handle>
		if (!conn) {
   145b0:	4604      	mov	r4, r0
   145b2:	2800      	cmp	r0, #0
   145b4:	d1ce      	bne.n	14554 <hci_num_completed_packets+0x70>
			BT_ERR("No connection for handle %u", handle);
   145b6:	462a      	mov	r2, r5
   145b8:	2145      	movs	r1, #69	; 0x45
   145ba:	4805      	ldr	r0, [pc, #20]	; (145d0 <hci_num_completed_packets+0xec>)
   145bc:	f014 fb47 	bl	28c4e <z_log_minimal_printk>
			continue;
   145c0:	e7e8      	b.n	14594 <hci_num_completed_packets+0xb0>
	list->tail = node;
   145c2:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   145c4:	6223      	str	r3, [r4, #32]
}
   145c6:	e7b7      	b.n	14538 <hci_num_completed_packets+0x54>
}
   145c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   145cc:	00030f48 	.word	0x00030f48
   145d0:	00030f24 	.word	0x00030f24

000145d4 <hci_cmd_done>:
{
   145d4:	b570      	push	{r4, r5, r6, lr}
   145d6:	b082      	sub	sp, #8
   145d8:	4605      	mov	r5, r0
   145da:	460e      	mov	r6, r1
   145dc:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   145de:	7990      	ldrb	r0, [r2, #6]
   145e0:	f008 f888 	bl	1c6f4 <net_buf_pool_get>
   145e4:	4b36      	ldr	r3, [pc, #216]	; (146c0 <hci_cmd_done+0xec>)
   145e6:	4283      	cmp	r3, r0
   145e8:	d00e      	beq.n	14608 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   145ea:	79a4      	ldrb	r4, [r4, #6]
   145ec:	4620      	mov	r0, r4
   145ee:	f008 f881 	bl	1c6f4 <net_buf_pool_get>
   145f2:	4b33      	ldr	r3, [pc, #204]	; (146c0 <hci_cmd_done+0xec>)
   145f4:	9301      	str	r3, [sp, #4]
   145f6:	9000      	str	r0, [sp, #0]
   145f8:	4623      	mov	r3, r4
   145fa:	462a      	mov	r2, r5
   145fc:	2157      	movs	r1, #87	; 0x57
   145fe:	4831      	ldr	r0, [pc, #196]	; (146c4 <hci_cmd_done+0xf0>)
   14600:	f014 fb25 	bl	28c4e <z_log_minimal_printk>
}
   14604:	b002      	add	sp, #8
   14606:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   14608:	4620      	mov	r0, r4
   1460a:	f018 fe9d 	bl	2d348 <net_buf_id>
   1460e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   14612:	4a2d      	ldr	r2, [pc, #180]	; (146c8 <hci_cmd_done+0xf4>)
   14614:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14618:	885b      	ldrh	r3, [r3, #2]
   1461a:	42ab      	cmp	r3, r5
   1461c:	d132      	bne.n	14684 <hci_cmd_done+0xb0>
	if (bt_dev.sent_cmd) {
   1461e:	4b2b      	ldr	r3, [pc, #172]	; (146cc <hci_cmd_done+0xf8>)
   14620:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
   14624:	b128      	cbz	r0, 14632 <hci_cmd_done+0x5e>
		net_buf_unref(bt_dev.sent_cmd);
   14626:	f008 fac1 	bl	1cbac <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1462a:	4b28      	ldr	r3, [pc, #160]	; (146cc <hci_cmd_done+0xf8>)
   1462c:	2200      	movs	r2, #0
   1462e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   14632:	4620      	mov	r0, r4
   14634:	f018 fe88 	bl	2d348 <net_buf_id>
   14638:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1463c:	4b22      	ldr	r3, [pc, #136]	; (146c8 <hci_cmd_done+0xf4>)
   1463e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   14642:	685b      	ldr	r3, [r3, #4]
   14644:	b103      	cbz	r3, 14648 <hci_cmd_done+0x74>
   14646:	b366      	cbz	r6, 146a2 <hci_cmd_done+0xce>
	if (cmd(buf)->sync) {
   14648:	4620      	mov	r0, r4
   1464a:	f018 fe7d 	bl	2d348 <net_buf_id>
   1464e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14652:	4b1d      	ldr	r3, [pc, #116]	; (146c8 <hci_cmd_done+0xf4>)
   14654:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   14658:	689b      	ldr	r3, [r3, #8]
   1465a:	2b00      	cmp	r3, #0
   1465c:	d0d2      	beq.n	14604 <hci_cmd_done+0x30>
		cmd(buf)->status = status;
   1465e:	4620      	mov	r0, r4
   14660:	f018 fe72 	bl	2d348 <net_buf_id>
   14664:	4d18      	ldr	r5, [pc, #96]	; (146c8 <hci_cmd_done+0xf4>)
   14666:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1466a:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   1466e:	4620      	mov	r0, r4
   14670:	f018 fe6a 	bl	2d348 <net_buf_id>
   14674:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14678:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   1467c:	68a8      	ldr	r0, [r5, #8]
   1467e:	f00e f855 	bl	2272c <z_impl_k_sem_give>
}
   14682:	e7bf      	b.n	14604 <hci_cmd_done+0x30>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   14684:	4620      	mov	r0, r4
   14686:	f018 fe5f 	bl	2d348 <net_buf_id>
   1468a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1468e:	4b0e      	ldr	r3, [pc, #56]	; (146c8 <hci_cmd_done+0xf4>)
   14690:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   14694:	885b      	ldrh	r3, [r3, #2]
   14696:	462a      	mov	r2, r5
   14698:	2157      	movs	r1, #87	; 0x57
   1469a:	480d      	ldr	r0, [pc, #52]	; (146d0 <hci_cmd_done+0xfc>)
   1469c:	f014 fad7 	bl	28c4e <z_log_minimal_printk>
		return;
   146a0:	e7b0      	b.n	14604 <hci_cmd_done+0x30>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   146a2:	4620      	mov	r0, r4
   146a4:	f018 fe50 	bl	2d348 <net_buf_id>
   146a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   146ac:	4b06      	ldr	r3, [pc, #24]	; (146c8 <hci_cmd_done+0xf4>)
   146ae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   146b2:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   146b4:	7a1a      	ldrb	r2, [r3, #8]
   146b6:	6859      	ldr	r1, [r3, #4]
   146b8:	6818      	ldr	r0, [r3, #0]
   146ba:	f015 fd33 	bl	2a124 <atomic_set_bit_to>
   146be:	e7c3      	b.n	14648 <hci_cmd_done+0x74>
   146c0:	20000b38 	.word	0x20000b38
   146c4:	00030f64 	.word	0x00030f64
   146c8:	20002940 	.word	0x20002940
   146cc:	20000380 	.word	0x20000380
   146d0:	00030fa0 	.word	0x00030fa0

000146d4 <hci_cmd_status>:
{
   146d4:	b538      	push	{r3, r4, r5, lr}
   146d6:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   146d8:	2104      	movs	r1, #4
   146da:	3008      	adds	r0, #8
   146dc:	f008 fb2e 	bl	1cd3c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   146e0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   146e2:	4622      	mov	r2, r4
   146e4:	7801      	ldrb	r1, [r0, #0]
   146e6:	8840      	ldrh	r0, [r0, #2]
   146e8:	f7ff ff74 	bl	145d4 <hci_cmd_done>
	if (ncmd) {
   146ec:	b905      	cbnz	r5, 146f0 <hci_cmd_status+0x1c>
}
   146ee:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   146f0:	4801      	ldr	r0, [pc, #4]	; (146f8 <hci_cmd_status+0x24>)
   146f2:	f00e f81b 	bl	2272c <z_impl_k_sem_give>
   146f6:	e7fa      	b.n	146ee <hci_cmd_status+0x1a>
   146f8:	200004a0 	.word	0x200004a0

000146fc <hci_cmd_complete>:
{
   146fc:	b538      	push	{r3, r4, r5, lr}
   146fe:	4604      	mov	r4, r0
   14700:	2103      	movs	r1, #3
   14702:	3008      	adds	r0, #8
   14704:	f008 fb1a 	bl	1cd3c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   14708:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   1470a:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   1470c:	4622      	mov	r2, r4
   1470e:	7819      	ldrb	r1, [r3, #0]
   14710:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   14714:	f7ff ff5e 	bl	145d4 <hci_cmd_done>
	if (ncmd) {
   14718:	b905      	cbnz	r5, 1471c <hci_cmd_complete+0x20>
}
   1471a:	bd38      	pop	{r3, r4, r5, pc}
   1471c:	4801      	ldr	r0, [pc, #4]	; (14724 <hci_cmd_complete+0x28>)
   1471e:	f00e f805 	bl	2272c <z_impl_k_sem_give>
   14722:	e7fa      	b.n	1471a <hci_cmd_complete+0x1e>
   14724:	200004a0 	.word	0x200004a0

00014728 <hci_hardware_error>:
{
   14728:	b508      	push	{r3, lr}
   1472a:	2101      	movs	r1, #1
   1472c:	3008      	adds	r0, #8
   1472e:	f008 fb05 	bl	1cd3c <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   14732:	7802      	ldrb	r2, [r0, #0]
   14734:	2145      	movs	r1, #69	; 0x45
   14736:	4802      	ldr	r0, [pc, #8]	; (14740 <hci_hardware_error+0x18>)
   14738:	f014 fa89 	bl	28c4e <z_log_minimal_printk>
}
   1473c:	bd08      	pop	{r3, pc}
   1473e:	bf00      	nop
   14740:	00030fd8 	.word	0x00030fd8

00014744 <handle_event>:
{
   14744:	b570      	push	{r4, r5, r6, lr}
   14746:	b082      	sub	sp, #8
   14748:	4605      	mov	r5, r0
   1474a:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
   1474c:	f7ff fd90 	bl	14270 <handle_event_common>
	if (err == -EOPNOTSUPP) {
   14750:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   14754:	d001      	beq.n	1475a <handle_event+0x16>
}
   14756:	b002      	add	sp, #8
   14758:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1475a:	89a6      	ldrh	r6, [r4, #12]
   1475c:	4631      	mov	r1, r6
   1475e:	68a0      	ldr	r0, [r4, #8]
   14760:	f7ff faea 	bl	13d38 <bt_hex>
   14764:	9000      	str	r0, [sp, #0]
   14766:	4633      	mov	r3, r6
   14768:	462a      	mov	r2, r5
   1476a:	2157      	movs	r1, #87	; 0x57
   1476c:	4801      	ldr	r0, [pc, #4]	; (14774 <handle_event+0x30>)
   1476e:	f014 fa6e 	bl	28c4e <z_log_minimal_printk>
}
   14772:	e7f0      	b.n	14756 <handle_event+0x12>
   14774:	00031000 	.word	0x00031000

00014778 <hci_event>:
{
   14778:	b538      	push	{r3, r4, r5, lr}
   1477a:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1477c:	8983      	ldrh	r3, [r0, #12]
   1477e:	2b01      	cmp	r3, #1
   14780:	d915      	bls.n	147ae <hci_event+0x36>
   14782:	2102      	movs	r1, #2
   14784:	f104 0008 	add.w	r0, r4, #8
   14788:	f008 fad8 	bl	1cd3c <net_buf_simple_pull_mem>
   1478c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1478e:	7800      	ldrb	r0, [r0, #0]
   14790:	f015 fc6d 	bl	2a06e <bt_hci_evt_get_flags>
   14794:	f010 0f02 	tst.w	r0, #2
   14798:	d016      	beq.n	147c8 <hci_event+0x50>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1479a:	2306      	movs	r3, #6
   1479c:	4a11      	ldr	r2, [pc, #68]	; (147e4 <hci_event+0x6c>)
   1479e:	4621      	mov	r1, r4
   147a0:	7828      	ldrb	r0, [r5, #0]
   147a2:	f7ff ffcf 	bl	14744 <handle_event>
	net_buf_unref(buf);
   147a6:	4620      	mov	r0, r4
   147a8:	f008 fa00 	bl	1cbac <net_buf_unref>
}
   147ac:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   147ae:	f44f 6216 	mov.w	r2, #2400	; 0x960
   147b2:	490d      	ldr	r1, [pc, #52]	; (147e8 <hci_event+0x70>)
   147b4:	480d      	ldr	r0, [pc, #52]	; (147ec <hci_event+0x74>)
   147b6:	f014 fa2a 	bl	28c0e <assert_print>
   147ba:	4040      	eors	r0, r0
   147bc:	f380 8811 	msr	BASEPRI, r0
   147c0:	f04f 0003 	mov.w	r0, #3
   147c4:	df02      	svc	2
   147c6:	e7dc      	b.n	14782 <hci_event+0xa>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   147c8:	f640 1264 	movw	r2, #2404	; 0x964
   147cc:	4906      	ldr	r1, [pc, #24]	; (147e8 <hci_event+0x70>)
   147ce:	4807      	ldr	r0, [pc, #28]	; (147ec <hci_event+0x74>)
   147d0:	f014 fa1d 	bl	28c0e <assert_print>
   147d4:	4040      	eors	r0, r0
   147d6:	f380 8811 	msr	BASEPRI, r0
   147da:	f04f 0003 	mov.w	r0, #3
   147de:	df02      	svc	2
   147e0:	e7db      	b.n	1479a <hci_event+0x22>
   147e2:	bf00      	nop
   147e4:	0003146c 	.word	0x0003146c
   147e8:	00031028 	.word	0x00031028
   147ec:	00030128 	.word	0x00030128

000147f0 <hci_le_meta_event>:
{
   147f0:	b510      	push	{r4, lr}
   147f2:	4604      	mov	r4, r0
   147f4:	2101      	movs	r1, #1
   147f6:	3008      	adds	r0, #8
   147f8:	f008 faa0 	bl	1cd3c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   147fc:	230a      	movs	r3, #10
   147fe:	4a03      	ldr	r2, [pc, #12]	; (1480c <hci_le_meta_event+0x1c>)
   14800:	4621      	mov	r1, r4
   14802:	7800      	ldrb	r0, [r0, #0]
   14804:	f7ff ff9e 	bl	14744 <handle_event>
}
   14808:	bd10      	pop	{r4, pc}
   1480a:	bf00      	nop
   1480c:	0003149c 	.word	0x0003149c

00014810 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   14810:	b508      	push	{r3, lr}
   14812:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   14814:	4807      	ldr	r0, [pc, #28]	; (14834 <rx_queue_put+0x24>)
   14816:	f008 f8c3 	bl	1c9a0 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1481a:	4907      	ldr	r1, [pc, #28]	; (14838 <rx_queue_put+0x28>)
   1481c:	4807      	ldr	r0, [pc, #28]	; (1483c <rx_queue_put+0x2c>)
   1481e:	f01a fd93 	bl	2f348 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   14822:	1e02      	subs	r2, r0, #0
   14824:	db00      	blt.n	14828 <rx_queue_put+0x18>
		BT_ERR("Could not submit rx_work: %d", err);
	}
}
   14826:	bd08      	pop	{r3, pc}
		BT_ERR("Could not submit rx_work: %d", err);
   14828:	2145      	movs	r1, #69	; 0x45
   1482a:	4805      	ldr	r0, [pc, #20]	; (14840 <rx_queue_put+0x30>)
   1482c:	f014 fa0f 	bl	28c4e <z_log_minimal_printk>
}
   14830:	e7f9      	b.n	14826 <rx_queue_put+0x16>
   14832:	bf00      	nop
   14834:	200004bc 	.word	0x200004bc
   14838:	200006cc 	.word	0x200006cc
   1483c:	20001a48 	.word	0x20001a48
   14840:	0003105c 	.word	0x0003105c

00014844 <hci_acl>:
{
   14844:	b570      	push	{r4, r5, r6, lr}
   14846:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14848:	8983      	ldrh	r3, [r0, #12]
   1484a:	2b03      	cmp	r3, #3
   1484c:	d917      	bls.n	1487e <hci_acl+0x3a>
   1484e:	2104      	movs	r1, #4
   14850:	f104 0008 	add.w	r0, r4, #8
   14854:	f008 fa72 	bl	1cd3c <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   14858:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1485a:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   1485c:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   1485e:	f3c0 000b 	ubfx	r0, r0, #0, #12
   14862:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14864:	22ff      	movs	r2, #255	; 0xff
   14866:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   14868:	89a2      	ldrh	r2, [r4, #12]
   1486a:	429a      	cmp	r2, r3
   1486c:	d014      	beq.n	14898 <hci_acl+0x54>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1486e:	2145      	movs	r1, #69	; 0x45
   14870:	4816      	ldr	r0, [pc, #88]	; (148cc <hci_acl+0x88>)
   14872:	f014 f9ec 	bl	28c4e <z_log_minimal_printk>
		net_buf_unref(buf);
   14876:	4620      	mov	r0, r4
   14878:	f008 f998 	bl	1cbac <net_buf_unref>
}
   1487c:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1487e:	f240 12ed 	movw	r2, #493	; 0x1ed
   14882:	4913      	ldr	r1, [pc, #76]	; (148d0 <hci_acl+0x8c>)
   14884:	4813      	ldr	r0, [pc, #76]	; (148d4 <hci_acl+0x90>)
   14886:	f014 f9c2 	bl	28c0e <assert_print>
   1488a:	4040      	eors	r0, r0
   1488c:	f380 8811 	msr	BASEPRI, r0
   14890:	f04f 0003 	mov.w	r0, #3
   14894:	df02      	svc	2
   14896:	e7da      	b.n	1484e <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   14898:	f002 fbf4 	bl	17084 <bt_conn_lookup_handle>
	if (!conn) {
   1489c:	4605      	mov	r5, r0
   1489e:	b158      	cbz	r0, 148b8 <hci_acl+0x74>
	acl(buf)->index = bt_conn_index(conn);
   148a0:	f002 fca8 	bl	171f4 <bt_conn_index>
   148a4:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   148a6:	4632      	mov	r2, r6
   148a8:	4621      	mov	r1, r4
   148aa:	4628      	mov	r0, r5
   148ac:	f016 f9b1 	bl	2ac12 <bt_conn_recv>
	bt_conn_unref(conn);
   148b0:	4628      	mov	r0, r5
   148b2:	f002 fbb5 	bl	17020 <bt_conn_unref>
   148b6:	e7e1      	b.n	1487c <hci_acl+0x38>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   148b8:	8ae2      	ldrh	r2, [r4, #22]
   148ba:	2145      	movs	r1, #69	; 0x45
   148bc:	4806      	ldr	r0, [pc, #24]	; (148d8 <hci_acl+0x94>)
   148be:	f014 f9c6 	bl	28c4e <z_log_minimal_printk>
		net_buf_unref(buf);
   148c2:	4620      	mov	r0, r4
   148c4:	f008 f972 	bl	1cbac <net_buf_unref>
		return;
   148c8:	e7d8      	b.n	1487c <hci_acl+0x38>
   148ca:	bf00      	nop
   148cc:	00031080 	.word	0x00031080
   148d0:	00031028 	.word	0x00031028
   148d4:	00030128 	.word	0x00030128
   148d8:	000310ac 	.word	0x000310ac

000148dc <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   148dc:	b510      	push	{r4, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   148de:	4813      	ldr	r0, [pc, #76]	; (1492c <rx_work_handler+0x50>)
   148e0:	f008 f8c4 	bl	1ca6c <net_buf_slist_get>
	if (!buf) {
   148e4:	b188      	cbz	r0, 1490a <rx_work_handler+0x2e>
   148e6:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   148e8:	7d02      	ldrb	r2, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   148ea:	2a01      	cmp	r2, #1
   148ec:	d00e      	beq.n	1490c <rx_work_handler+0x30>
   148ee:	2a03      	cmp	r2, #3
   148f0:	d10f      	bne.n	14912 <rx_work_handler+0x36>
#if defined(CONFIG_BT_CONN)
	case BT_BUF_ACL_IN:
		hci_acl(buf);
   148f2:	f7ff ffa7 	bl	14844 <hci_acl>
	return list->head;
   148f6:	4b0e      	ldr	r3, [pc, #56]	; (14930 <rx_work_handler+0x54>)
   148f8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   148fc:	b12b      	cbz	r3, 1490a <rx_work_handler+0x2e>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   148fe:	490d      	ldr	r1, [pc, #52]	; (14934 <rx_work_handler+0x58>)
   14900:	480d      	ldr	r0, [pc, #52]	; (14938 <rx_work_handler+0x5c>)
   14902:	f01a fd21 	bl	2f348 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   14906:	1e02      	subs	r2, r0, #0
   14908:	db0b      	blt.n	14922 <rx_work_handler+0x46>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   1490a:	bd10      	pop	{r4, pc}
		hci_event(buf);
   1490c:	f7ff ff34 	bl	14778 <hci_event>
		break;
   14910:	e7f1      	b.n	148f6 <rx_work_handler+0x1a>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14912:	2145      	movs	r1, #69	; 0x45
   14914:	4809      	ldr	r0, [pc, #36]	; (1493c <rx_work_handler+0x60>)
   14916:	f014 f99a 	bl	28c4e <z_log_minimal_printk>
		net_buf_unref(buf);
   1491a:	4620      	mov	r0, r4
   1491c:	f008 f946 	bl	1cbac <net_buf_unref>
		break;
   14920:	e7e9      	b.n	148f6 <rx_work_handler+0x1a>
			BT_ERR("Could not submit rx_work: %d", err);
   14922:	2145      	movs	r1, #69	; 0x45
   14924:	4806      	ldr	r0, [pc, #24]	; (14940 <rx_work_handler+0x64>)
   14926:	f014 f992 	bl	28c4e <z_log_minimal_printk>
   1492a:	e7ee      	b.n	1490a <rx_work_handler+0x2e>
   1492c:	200004bc 	.word	0x200004bc
   14930:	20000380 	.word	0x20000380
   14934:	200006cc 	.word	0x200006cc
   14938:	20001a48 	.word	0x20001a48
   1493c:	000310d4 	.word	0x000310d4
   14940:	0003105c 	.word	0x0003105c

00014944 <le_conn_update_complete>:
{
   14944:	b570      	push	{r4, r5, r6, lr}
   14946:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   14948:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1494a:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   1494e:	4630      	mov	r0, r6
   14950:	f002 fb98 	bl	17084 <bt_conn_lookup_handle>
	if (!conn) {
   14954:	b148      	cbz	r0, 1496a <le_conn_update_complete+0x26>
   14956:	4605      	mov	r5, r0
	if (!evt->status) {
   14958:	7823      	ldrb	r3, [r4, #0]
   1495a:	b163      	cbz	r3, 14976 <le_conn_update_complete+0x32>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1495c:	2b1a      	cmp	r3, #26
   1495e:	d019      	beq.n	14994 <le_conn_update_complete+0x50>
	bt_conn_unref(conn);
   14960:	4628      	mov	r0, r5
   14962:	f002 fb5d 	bl	17020 <bt_conn_unref>
}
   14966:	b002      	add	sp, #8
   14968:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1496a:	4632      	mov	r2, r6
   1496c:	2145      	movs	r1, #69	; 0x45
   1496e:	4818      	ldr	r0, [pc, #96]	; (149d0 <le_conn_update_complete+0x8c>)
   14970:	f014 f96d 	bl	28c4e <z_log_minimal_printk>
		return;
   14974:	e7f7      	b.n	14966 <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   14976:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   1497a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1497e:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   14982:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14986:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1498a:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   1498e:	f002 fc83 	bl	17298 <notify_le_param_updated>
   14992:	e7e5      	b.n	14960 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   14994:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14996:	2b01      	cmp	r3, #1
   14998:	d1e2      	bne.n	14960 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   1499a:	2109      	movs	r1, #9
   1499c:	3004      	adds	r0, #4
   1499e:	f015 fba8 	bl	2a0f2 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   149a2:	2800      	cmp	r0, #0
   149a4:	d1dc      	bne.n	14960 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   149a6:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   149aa:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   149ae:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   149b2:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   149b6:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
   149ba:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   149be:	f8b5 30b2 	ldrh.w	r3, [r5, #178]	; 0xb2
   149c2:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   149c6:	4669      	mov	r1, sp
   149c8:	4628      	mov	r0, r5
   149ca:	f016 faf0 	bl	2afae <bt_l2cap_update_conn_param>
   149ce:	e7c7      	b.n	14960 <le_conn_update_complete+0x1c>
   149d0:	00030ef8 	.word	0x00030ef8

000149d4 <bt_hci_cmd_state_set_init>:
{
   149d4:	b510      	push	{r4, lr}
   149d6:	460c      	mov	r4, r1
	state->target = target;
   149d8:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   149da:	604b      	str	r3, [r1, #4]
	state->val = val;
   149dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   149e0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   149e2:	f018 fcb1 	bl	2d348 <net_buf_id>
   149e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   149ea:	4b02      	ldr	r3, [pc, #8]	; (149f4 <bt_hci_cmd_state_set_init+0x20>)
   149ec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   149f0:	605c      	str	r4, [r3, #4]
}
   149f2:	bd10      	pop	{r4, pc}
   149f4:	20002940 	.word	0x20002940

000149f8 <bt_hci_cmd_create>:
{
   149f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   149fc:	4606      	mov	r6, r0
   149fe:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   14a00:	f04f 32ff 	mov.w	r2, #4294967295
   14a04:	f04f 33ff 	mov.w	r3, #4294967295
   14a08:	481f      	ldr	r0, [pc, #124]	; (14a88 <bt_hci_cmd_create+0x90>)
   14a0a:	f018 fcc2 	bl	2d392 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   14a0e:	b370      	cbz	r0, 14a6e <bt_hci_cmd_create+0x76>
   14a10:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   14a12:	f100 0908 	add.w	r9, r0, #8
   14a16:	2100      	movs	r1, #0
   14a18:	4648      	mov	r0, r9
   14a1a:	f007 ff9d 	bl	1c958 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14a1e:	f04f 0800 	mov.w	r8, #0
   14a22:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   14a26:	4620      	mov	r0, r4
   14a28:	f018 fc8e 	bl	2d348 <net_buf_id>
   14a2c:	4d17      	ldr	r5, [pc, #92]	; (14a8c <bt_hci_cmd_create+0x94>)
   14a2e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14a32:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   14a36:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   14a38:	4620      	mov	r0, r4
   14a3a:	f018 fc85 	bl	2d348 <net_buf_id>
   14a3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14a42:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   14a46:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   14a4a:	4620      	mov	r0, r4
   14a4c:	f018 fc7c 	bl	2d348 <net_buf_id>
   14a50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14a54:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   14a58:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   14a5c:	2103      	movs	r1, #3
   14a5e:	4648      	mov	r0, r9
   14a60:	f008 f9a6 	bl	1cdb0 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   14a64:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   14a66:	7087      	strb	r7, [r0, #2]
}
   14a68:	4620      	mov	r0, r4
   14a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(buf);
   14a6e:	4c08      	ldr	r4, [pc, #32]	; (14a90 <bt_hci_cmd_create+0x98>)
   14a70:	f240 1201 	movw	r2, #257	; 0x101
   14a74:	4621      	mov	r1, r4
   14a76:	4807      	ldr	r0, [pc, #28]	; (14a94 <bt_hci_cmd_create+0x9c>)
   14a78:	f014 f8c9 	bl	28c0e <assert_print>
   14a7c:	f240 1101 	movw	r1, #257	; 0x101
   14a80:	4620      	mov	r0, r4
   14a82:	f014 f8bd 	bl	28c00 <assert_post_action>
   14a86:	bf00      	nop
   14a88:	20000b38 	.word	0x20000b38
   14a8c:	20002940 	.word	0x20002940
   14a90:	00031028 	.word	0x00031028
   14a94:	00030128 	.word	0x00030128

00014a98 <bt_hci_cmd_send_sync>:
{
   14a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a9a:	b087      	sub	sp, #28
   14a9c:	4606      	mov	r6, r0
   14a9e:	4615      	mov	r5, r2
	if (!buf) {
   14aa0:	460c      	mov	r4, r1
   14aa2:	b351      	cbz	r1, 14afa <bt_hci_cmd_send_sync+0x62>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14aa4:	2201      	movs	r2, #1
   14aa6:	2100      	movs	r1, #0
   14aa8:	4668      	mov	r0, sp
   14aaa:	f01a fbb9 	bl	2f220 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   14aae:	4620      	mov	r0, r4
   14ab0:	f018 fc4a 	bl	2d348 <net_buf_id>
   14ab4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14ab8:	4b25      	ldr	r3, [pc, #148]	; (14b50 <bt_hci_cmd_send_sync+0xb8>)
   14aba:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   14abe:	f8c3 d008 	str.w	sp, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   14ac2:	4620      	mov	r0, r4
   14ac4:	f008 f8a6 	bl	1cc14 <net_buf_ref>
   14ac8:	4601      	mov	r1, r0
   14aca:	4822      	ldr	r0, [pc, #136]	; (14b54 <bt_hci_cmd_send_sync+0xbc>)
   14acc:	f008 f842 	bl	1cb54 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   14ad0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   14ad4:	2300      	movs	r3, #0
   14ad6:	4668      	mov	r0, sp
   14ad8:	f00d fe66 	bl	227a8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14adc:	b9a8      	cbnz	r0, 14b0a <bt_hci_cmd_send_sync+0x72>
	status = cmd(buf)->status;
   14ade:	4620      	mov	r0, r4
   14ae0:	f018 fc32 	bl	2d348 <net_buf_id>
   14ae4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14ae8:	4b19      	ldr	r3, [pc, #100]	; (14b50 <bt_hci_cmd_send_sync+0xb8>)
   14aea:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   14aee:	b9cf      	cbnz	r7, 14b24 <bt_hci_cmd_send_sync+0x8c>
	if (rsp) {
   14af0:	b34d      	cbz	r5, 14b46 <bt_hci_cmd_send_sync+0xae>
		*rsp = buf;
   14af2:	602c      	str	r4, [r5, #0]
	return 0;
   14af4:	2000      	movs	r0, #0
}
   14af6:	b007      	add	sp, #28
   14af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   14afa:	f7ff ff7d 	bl	149f8 <bt_hci_cmd_create>
		if (!buf) {
   14afe:	4604      	mov	r4, r0
   14b00:	2800      	cmp	r0, #0
   14b02:	d1cf      	bne.n	14aa4 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   14b04:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14b08:	e7f5      	b.n	14af6 <bt_hci_cmd_send_sync+0x5e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14b0a:	f240 1249 	movw	r2, #329	; 0x149
   14b0e:	4912      	ldr	r1, [pc, #72]	; (14b58 <bt_hci_cmd_send_sync+0xc0>)
   14b10:	4812      	ldr	r0, [pc, #72]	; (14b5c <bt_hci_cmd_send_sync+0xc4>)
   14b12:	f014 f87c 	bl	28c0e <assert_print>
   14b16:	4040      	eors	r0, r0
   14b18:	f380 8811 	msr	BASEPRI, r0
   14b1c:	f04f 0003 	mov.w	r0, #3
   14b20:	df02      	svc	2
   14b22:	e7dc      	b.n	14ade <bt_hci_cmd_send_sync+0x46>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   14b24:	463b      	mov	r3, r7
   14b26:	4632      	mov	r2, r6
   14b28:	2157      	movs	r1, #87	; 0x57
   14b2a:	480d      	ldr	r0, [pc, #52]	; (14b60 <bt_hci_cmd_send_sync+0xc8>)
   14b2c:	f014 f88f 	bl	28c4e <z_log_minimal_printk>
		net_buf_unref(buf);
   14b30:	4620      	mov	r0, r4
   14b32:	f008 f83b 	bl	1cbac <net_buf_unref>
		switch (status) {
   14b36:	2f09      	cmp	r7, #9
   14b38:	d002      	beq.n	14b40 <bt_hci_cmd_send_sync+0xa8>
			return -EIO;
   14b3a:	f06f 0004 	mvn.w	r0, #4
   14b3e:	e7da      	b.n	14af6 <bt_hci_cmd_send_sync+0x5e>
			return -ECONNREFUSED;
   14b40:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   14b44:	e7d7      	b.n	14af6 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
   14b46:	4620      	mov	r0, r4
   14b48:	f008 f830 	bl	1cbac <net_buf_unref>
	return 0;
   14b4c:	2000      	movs	r0, #0
   14b4e:	e7d2      	b.n	14af6 <bt_hci_cmd_send_sync+0x5e>
   14b50:	20002940 	.word	0x20002940
   14b54:	200004c4 	.word	0x200004c4
   14b58:	00031028 	.word	0x00031028
   14b5c:	00030128 	.word	0x00030128
   14b60:	000310f0 	.word	0x000310f0

00014b64 <common_init>:
{
   14b64:	b510      	push	{r4, lr}
   14b66:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   14b68:	4b22      	ldr	r3, [pc, #136]	; (14bf4 <common_init+0x90>)
   14b6a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   14b6e:	689b      	ldr	r3, [r3, #8]
   14b70:	f013 0f01 	tst.w	r3, #1
   14b74:	d10d      	bne.n	14b92 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   14b76:	aa01      	add	r2, sp, #4
   14b78:	2100      	movs	r1, #0
   14b7a:	f640 4003 	movw	r0, #3075	; 0xc03
   14b7e:	f7ff ff8b 	bl	14a98 <bt_hci_cmd_send_sync>
		if (err) {
   14b82:	4604      	mov	r4, r0
   14b84:	b968      	cbnz	r0, 14ba2 <common_init+0x3e>
		hci_reset_complete(rsp);
   14b86:	9801      	ldr	r0, [sp, #4]
   14b88:	f7ff fb98 	bl	142bc <hci_reset_complete>
		net_buf_unref(rsp);
   14b8c:	9801      	ldr	r0, [sp, #4]
   14b8e:	f008 f80d 	bl	1cbac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   14b92:	aa01      	add	r2, sp, #4
   14b94:	2100      	movs	r1, #0
   14b96:	f241 0003 	movw	r0, #4099	; 0x1003
   14b9a:	f7ff ff7d 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   14b9e:	4604      	mov	r4, r0
   14ba0:	b110      	cbz	r0, 14ba8 <common_init+0x44>
}
   14ba2:	4620      	mov	r0, r4
   14ba4:	b002      	add	sp, #8
   14ba6:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   14ba8:	9801      	ldr	r0, [sp, #4]
   14baa:	f7ff fb9f 	bl	142ec <read_local_features_complete>
	net_buf_unref(rsp);
   14bae:	9801      	ldr	r0, [sp, #4]
   14bb0:	f007 fffc 	bl	1cbac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   14bb4:	aa01      	add	r2, sp, #4
   14bb6:	2100      	movs	r1, #0
   14bb8:	f241 0001 	movw	r0, #4097	; 0x1001
   14bbc:	f7ff ff6c 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   14bc0:	4604      	mov	r4, r0
   14bc2:	2800      	cmp	r0, #0
   14bc4:	d1ed      	bne.n	14ba2 <common_init+0x3e>
	read_local_ver_complete(rsp);
   14bc6:	9801      	ldr	r0, [sp, #4]
   14bc8:	f7ff fb1e 	bl	14208 <read_local_ver_complete>
	net_buf_unref(rsp);
   14bcc:	9801      	ldr	r0, [sp, #4]
   14bce:	f007 ffed 	bl	1cbac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   14bd2:	aa01      	add	r2, sp, #4
   14bd4:	2100      	movs	r1, #0
   14bd6:	f241 0002 	movw	r0, #4098	; 0x1002
   14bda:	f7ff ff5d 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   14bde:	4604      	mov	r4, r0
   14be0:	2800      	cmp	r0, #0
   14be2:	d1de      	bne.n	14ba2 <common_init+0x3e>
	read_supported_commands_complete(rsp);
   14be4:	9801      	ldr	r0, [sp, #4]
   14be6:	f7ff fb8b 	bl	14300 <read_supported_commands_complete>
	net_buf_unref(rsp);
   14bea:	9801      	ldr	r0, [sp, #4]
   14bec:	f007 ffde 	bl	1cbac <net_buf_unref>
	return 0;
   14bf0:	e7d7      	b.n	14ba2 <common_init+0x3e>
   14bf2:	bf00      	nop
   14bf4:	20000380 	.word	0x20000380

00014bf8 <hci_le_read_max_data_len>:
{
   14bf8:	b570      	push	{r4, r5, r6, lr}
   14bfa:	b082      	sub	sp, #8
   14bfc:	4605      	mov	r5, r0
   14bfe:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   14c00:	aa01      	add	r2, sp, #4
   14c02:	2100      	movs	r1, #0
   14c04:	f242 002f 	movw	r0, #8239	; 0x202f
   14c08:	f7ff ff46 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   14c0c:	4606      	mov	r6, r0
   14c0e:	b960      	cbnz	r0, 14c2a <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   14c10:	9801      	ldr	r0, [sp, #4]
   14c12:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   14c14:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14c18:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   14c1a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   14c1e:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   14c20:	f007 ffc4 	bl	1cbac <net_buf_unref>
}
   14c24:	4630      	mov	r0, r6
   14c26:	b002      	add	sp, #8
   14c28:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to read DLE max data len");
   14c2a:	2145      	movs	r1, #69	; 0x45
   14c2c:	4801      	ldr	r0, [pc, #4]	; (14c34 <hci_le_read_max_data_len+0x3c>)
   14c2e:	f014 f80e 	bl	28c4e <z_log_minimal_printk>
		return err;
   14c32:	e7f7      	b.n	14c24 <hci_le_read_max_data_len+0x2c>
   14c34:	00031114 	.word	0x00031114

00014c38 <le_set_event_mask>:
{
   14c38:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   14c3a:	2108      	movs	r1, #8
   14c3c:	f242 0001 	movw	r0, #8193	; 0x2001
   14c40:	f7ff feda 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   14c44:	2800      	cmp	r0, #0
   14c46:	d041      	beq.n	14ccc <le_set_event_mask+0x94>
   14c48:	4604      	mov	r4, r0
   14c4a:	2108      	movs	r1, #8
   14c4c:	4408      	add	r0, r1
   14c4e:	f008 f8af 	bl	1cdb0 <net_buf_simple_add>
   14c52:	4602      	mov	r2, r0
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   14c54:	4b1f      	ldr	r3, [pc, #124]	; (14cd4 <le_set_event_mask+0x9c>)
   14c56:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
		if ((IS_ENABLED(CONFIG_BT_SMP) &&
   14c5a:	f013 0f40 	tst.w	r3, #64	; 0x40
   14c5e:	d02d      	beq.n	14cbc <le_set_event_mask+0x84>
			mask |= BT_EVT_MASK_LE_ENH_CONN_COMPLETE;
   14c60:	f240 2e02 	movw	lr, #514	; 0x202
   14c64:	f04f 0c00 	mov.w	ip, #0
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   14c68:	f04e 000c 	orr.w	r0, lr, #12
   14c6c:	4661      	mov	r1, ip
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   14c6e:	f013 0f02 	tst.w	r3, #2
   14c72:	d001      	beq.n	14c78 <le_set_event_mask+0x40>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   14c74:	f04e 002c 	orr.w	r0, lr, #44	; 0x2c
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   14c78:	f013 0f20 	tst.w	r3, #32
   14c7c:	d001      	beq.n	14c82 <le_set_event_mask+0x4a>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   14c7e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   14c82:	4d14      	ldr	r5, [pc, #80]	; (14cd4 <le_set_event_mask+0x9c>)
   14c84:	f895 c0d1 	ldrb.w	ip, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   14c88:	f01c 0f09 	tst.w	ip, #9
   14c8c:	d001      	beq.n	14c92 <le_set_event_mask+0x5a>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   14c8e:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   14c92:	f013 0f01 	tst.w	r3, #1
   14c96:	d001      	beq.n	14c9c <le_set_event_mask+0x64>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   14c98:	f040 0010 	orr.w	r0, r0, #16
	    (BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
   14c9c:	4b0d      	ldr	r3, [pc, #52]	; (14cd4 <le_set_event_mask+0x9c>)
   14c9e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   14ca2:	f003 0306 	and.w	r3, r3, #6
   14ca6:	2b06      	cmp	r3, #6
   14ca8:	d00d      	beq.n	14cc6 <le_set_event_mask+0x8e>
	sys_put_le64(mask, cp_mask->events);
   14caa:	f015 f9b6 	bl	2a01a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   14cae:	2200      	movs	r2, #0
   14cb0:	4621      	mov	r1, r4
   14cb2:	f242 0001 	movw	r0, #8193	; 0x2001
   14cb6:	f7ff feef 	bl	14a98 <bt_hci_cmd_send_sync>
}
   14cba:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   14cbc:	f04f 0e03 	mov.w	lr, #3
   14cc0:	f04f 0c00 	mov.w	ip, #0
   14cc4:	e7d0      	b.n	14c68 <le_set_event_mask+0x30>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   14cc6:	f440 70c0 	orr.w	r0, r0, #384	; 0x180
   14cca:	e7ee      	b.n	14caa <le_set_event_mask+0x72>
		return -ENOBUFS;
   14ccc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14cd0:	e7f3      	b.n	14cba <le_set_event_mask+0x82>
   14cd2:	bf00      	nop
   14cd4:	20000380 	.word	0x20000380

00014cd8 <le_init>:
{
   14cd8:	b510      	push	{r4, lr}
   14cda:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   14cdc:	4b54      	ldr	r3, [pc, #336]	; (14e30 <le_init+0x158>)
   14cde:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   14ce2:	f013 0f40 	tst.w	r3, #64	; 0x40
   14ce6:	d00a      	beq.n	14cfe <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   14ce8:	aa01      	add	r2, sp, #4
   14cea:	2100      	movs	r1, #0
   14cec:	f242 0003 	movw	r0, #8195	; 0x2003
   14cf0:	f7ff fed2 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   14cf4:	4603      	mov	r3, r0
   14cf6:	b148      	cbz	r0, 14d0c <le_init+0x34>
}
   14cf8:	4618      	mov	r0, r3
   14cfa:	b002      	add	sp, #8
   14cfc:	bd10      	pop	{r4, pc}
		BT_ERR("Non-LE capable controller detected!");
   14cfe:	2145      	movs	r1, #69	; 0x45
   14d00:	484c      	ldr	r0, [pc, #304]	; (14e34 <le_init+0x15c>)
   14d02:	f013 ffa4 	bl	28c4e <z_log_minimal_printk>
		return -ENODEV;
   14d06:	f06f 0312 	mvn.w	r3, #18
   14d0a:	e7f5      	b.n	14cf8 <le_init+0x20>
	read_le_features_complete(rsp);
   14d0c:	9801      	ldr	r0, [sp, #4]
   14d0e:	f7ff fb01 	bl	14314 <read_le_features_complete>
	net_buf_unref(rsp);
   14d12:	9801      	ldr	r0, [sp, #4]
   14d14:	f007 ff4a 	bl	1cbac <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   14d18:	aa01      	add	r2, sp, #4
   14d1a:	2100      	movs	r1, #0
   14d1c:	f242 0002 	movw	r0, #8194	; 0x2002
   14d20:	f7ff feba 	bl	14a98 <bt_hci_cmd_send_sync>
		if (err) {
   14d24:	4603      	mov	r3, r0
   14d26:	2800      	cmp	r0, #0
   14d28:	d1e6      	bne.n	14cf8 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   14d2a:	9801      	ldr	r0, [sp, #4]
   14d2c:	f7ff fafc 	bl	14328 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   14d30:	9801      	ldr	r0, [sp, #4]
   14d32:	f007 ff3b 	bl	1cbac <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14d36:	4b3e      	ldr	r3, [pc, #248]	; (14e30 <le_init+0x158>)
   14d38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   14d3c:	f013 0f20 	tst.w	r3, #32
   14d40:	d024      	beq.n	14d8c <le_init+0xb4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   14d42:	4b3b      	ldr	r3, [pc, #236]	; (14e30 <le_init+0x158>)
   14d44:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   14d48:	f013 0f08 	tst.w	r3, #8
   14d4c:	d137      	bne.n	14dbe <le_init+0xe6>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   14d4e:	4b38      	ldr	r3, [pc, #224]	; (14e30 <le_init+0x158>)
   14d50:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   14d54:	f013 0f20 	tst.w	r3, #32
   14d58:	d141      	bne.n	14dde <le_init+0x106>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   14d5a:	4b35      	ldr	r3, [pc, #212]	; (14e30 <le_init+0x158>)
   14d5c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   14d60:	f013 0f40 	tst.w	r3, #64	; 0x40
   14d64:	d00e      	beq.n	14d84 <le_init+0xac>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   14d66:	aa01      	add	r2, sp, #4
   14d68:	2100      	movs	r1, #0
   14d6a:	f242 002a 	movw	r0, #8234	; 0x202a
   14d6e:	f7ff fe93 	bl	14a98 <bt_hci_cmd_send_sync>
		if (err) {
   14d72:	4603      	mov	r3, r0
   14d74:	2800      	cmp	r0, #0
   14d76:	d1bf      	bne.n	14cf8 <le_init+0x20>
		le_read_resolving_list_size_complete(rsp);
   14d78:	9801      	ldr	r0, [sp, #4]
   14d7a:	f7ff fa67 	bl	1424c <le_read_resolving_list_size_complete>
		net_buf_unref(rsp);
   14d7e:	9801      	ldr	r0, [sp, #4]
   14d80:	f007 ff14 	bl	1cbac <net_buf_unref>
	return  le_set_event_mask();
   14d84:	f7ff ff58 	bl	14c38 <le_set_event_mask>
   14d88:	4603      	mov	r3, r0
   14d8a:	e7b5      	b.n	14cf8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14d8c:	2102      	movs	r1, #2
   14d8e:	f640 406d 	movw	r0, #3181	; 0xc6d
   14d92:	f7ff fe31 	bl	149f8 <bt_hci_cmd_create>
		if (!buf) {
   14d96:	4604      	mov	r4, r0
   14d98:	2800      	cmp	r0, #0
   14d9a:	d046      	beq.n	14e2a <le_init+0x152>
   14d9c:	2102      	movs	r1, #2
   14d9e:	3008      	adds	r0, #8
   14da0:	f008 f806 	bl	1cdb0 <net_buf_simple_add>
		cp_le->le = 0x01;
   14da4:	2301      	movs	r3, #1
   14da6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   14da8:	2200      	movs	r2, #0
   14daa:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   14dac:	4621      	mov	r1, r4
   14dae:	f640 406d 	movw	r0, #3181	; 0xc6d
   14db2:	f7ff fe71 	bl	14a98 <bt_hci_cmd_send_sync>
		if (err) {
   14db6:	4603      	mov	r3, r0
   14db8:	2800      	cmp	r0, #0
   14dba:	d0c2      	beq.n	14d42 <le_init+0x6a>
   14dbc:	e79c      	b.n	14cf8 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   14dbe:	aa01      	add	r2, sp, #4
   14dc0:	2100      	movs	r1, #0
   14dc2:	f242 001c 	movw	r0, #8220	; 0x201c
   14dc6:	f7ff fe67 	bl	14a98 <bt_hci_cmd_send_sync>
		if (err) {
   14dca:	4603      	mov	r3, r0
   14dcc:	2800      	cmp	r0, #0
   14dce:	d193      	bne.n	14cf8 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   14dd0:	9801      	ldr	r0, [sp, #4]
   14dd2:	f7ff fa2f 	bl	14234 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   14dd6:	9801      	ldr	r0, [sp, #4]
   14dd8:	f007 fee8 	bl	1cbac <net_buf_unref>
   14ddc:	e7b7      	b.n	14d4e <le_init+0x76>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14dde:	f10d 0102 	add.w	r1, sp, #2
   14de2:	4668      	mov	r0, sp
   14de4:	f7ff ff08 	bl	14bf8 <hci_le_read_max_data_len>
		if (err) {
   14de8:	4603      	mov	r3, r0
   14dea:	2800      	cmp	r0, #0
   14dec:	d184      	bne.n	14cf8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14dee:	2104      	movs	r1, #4
   14df0:	f242 0024 	movw	r0, #8228	; 0x2024
   14df4:	f7ff fe00 	bl	149f8 <bt_hci_cmd_create>
		if (!buf) {
   14df8:	4604      	mov	r4, r0
   14dfa:	b198      	cbz	r0, 14e24 <le_init+0x14c>
   14dfc:	2104      	movs	r1, #4
   14dfe:	3008      	adds	r0, #8
   14e00:	f007 ffd6 	bl	1cdb0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   14e04:	f8bd 3000 	ldrh.w	r3, [sp]
   14e08:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   14e0a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   14e0e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14e10:	2200      	movs	r2, #0
   14e12:	4621      	mov	r1, r4
   14e14:	f242 0024 	movw	r0, #8228	; 0x2024
   14e18:	f7ff fe3e 	bl	14a98 <bt_hci_cmd_send_sync>
		if (err) {
   14e1c:	4603      	mov	r3, r0
   14e1e:	2800      	cmp	r0, #0
   14e20:	d09b      	beq.n	14d5a <le_init+0x82>
   14e22:	e769      	b.n	14cf8 <le_init+0x20>
			return -ENOBUFS;
   14e24:	f06f 0368 	mvn.w	r3, #104	; 0x68
   14e28:	e766      	b.n	14cf8 <le_init+0x20>
			return -ENOBUFS;
   14e2a:	f06f 0368 	mvn.w	r3, #104	; 0x68
   14e2e:	e763      	b.n	14cf8 <le_init+0x20>
   14e30:	20000380 	.word	0x20000380
   14e34:	0003113c 	.word	0x0003113c

00014e38 <bt_br_init>:
{
   14e38:	b510      	push	{r4, lr}
   14e3a:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   14e3c:	4b0b      	ldr	r3, [pc, #44]	; (14e6c <bt_br_init+0x34>)
   14e3e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   14e42:	b11b      	cbz	r3, 14e4c <bt_br_init+0x14>
		return 0;
   14e44:	2400      	movs	r4, #0
}
   14e46:	4620      	mov	r0, r4
   14e48:	b002      	add	sp, #8
   14e4a:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   14e4c:	aa01      	add	r2, sp, #4
   14e4e:	2100      	movs	r1, #0
   14e50:	f241 0005 	movw	r0, #4101	; 0x1005
   14e54:	f7ff fe20 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   14e58:	4604      	mov	r4, r0
   14e5a:	2800      	cmp	r0, #0
   14e5c:	d1f3      	bne.n	14e46 <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   14e5e:	9801      	ldr	r0, [sp, #4]
   14e60:	f7ff fa76 	bl	14350 <read_buffer_size_complete>
	net_buf_unref(rsp);
   14e64:	9801      	ldr	r0, [sp, #4]
   14e66:	f007 fea1 	bl	1cbac <net_buf_unref>
	return 0;
   14e6a:	e7ec      	b.n	14e46 <bt_br_init+0xe>
   14e6c:	20000380 	.word	0x20000380

00014e70 <hci_vs_init>:
{
   14e70:	b510      	push	{r4, lr}
   14e72:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   14e74:	aa01      	add	r2, sp, #4
   14e76:	2100      	movs	r1, #0
   14e78:	f64f 4001 	movw	r0, #64513	; 0xfc01
   14e7c:	f7ff fe0c 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   14e80:	bb50      	cbnz	r0, 14ed8 <hci_vs_init+0x68>
	net_buf_unref(rsp);
   14e82:	9801      	ldr	r0, [sp, #4]
   14e84:	f007 fe92 	bl	1cbac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   14e88:	aa01      	add	r2, sp, #4
   14e8a:	2100      	movs	r1, #0
   14e8c:	f64f 4002 	movw	r0, #64514	; 0xfc02
   14e90:	f7ff fe02 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   14e94:	bb30      	cbnz	r0, 14ee4 <hci_vs_init+0x74>
	rp.cmds = (void *)rsp->data;
   14e96:	9b01      	ldr	r3, [sp, #4]
   14e98:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   14e9a:	4c17      	ldr	r4, [pc, #92]	; (14ef8 <hci_vs_init+0x88>)
   14e9c:	2202      	movs	r2, #2
   14e9e:	3101      	adds	r1, #1
   14ea0:	4620      	mov	r0, r4
   14ea2:	f014 ff73 	bl	29d8c <memcpy>
	net_buf_unref(rsp);
   14ea6:	9801      	ldr	r0, [sp, #4]
   14ea8:	f007 fe80 	bl	1cbac <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   14eac:	7823      	ldrb	r3, [r4, #0]
   14eae:	f013 0f04 	tst.w	r3, #4
   14eb2:	d015      	beq.n	14ee0 <hci_vs_init+0x70>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   14eb4:	aa01      	add	r2, sp, #4
   14eb6:	2100      	movs	r1, #0
   14eb8:	f64f 4003 	movw	r0, #64515	; 0xfc03
   14ebc:	f7ff fdec 	bl	14a98 <bt_hci_cmd_send_sync>
		if (err) {
   14ec0:	b9a8      	cbnz	r0, 14eee <hci_vs_init+0x7e>
		rp.feat = (void *)rsp->data;
   14ec2:	9b01      	ldr	r3, [sp, #4]
   14ec4:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   14ec6:	2201      	movs	r2, #1
   14ec8:	4411      	add	r1, r2
   14eca:	480c      	ldr	r0, [pc, #48]	; (14efc <hci_vs_init+0x8c>)
   14ecc:	f014 ff5e 	bl	29d8c <memcpy>
		net_buf_unref(rsp);
   14ed0:	9801      	ldr	r0, [sp, #4]
   14ed2:	f007 fe6b 	bl	1cbac <net_buf_unref>
   14ed6:	e003      	b.n	14ee0 <hci_vs_init+0x70>
		BT_WARN("Vendor HCI extensions not available");
   14ed8:	2157      	movs	r1, #87	; 0x57
   14eda:	4809      	ldr	r0, [pc, #36]	; (14f00 <hci_vs_init+0x90>)
   14edc:	f013 feb7 	bl	28c4e <z_log_minimal_printk>
}
   14ee0:	b002      	add	sp, #8
   14ee2:	bd10      	pop	{r4, pc}
		BT_WARN("Failed to read supported vendor commands");
   14ee4:	2157      	movs	r1, #87	; 0x57
   14ee6:	4807      	ldr	r0, [pc, #28]	; (14f04 <hci_vs_init+0x94>)
   14ee8:	f013 feb1 	bl	28c4e <z_log_minimal_printk>
		return;
   14eec:	e7f8      	b.n	14ee0 <hci_vs_init+0x70>
			BT_WARN("Failed to read supported vendor features");
   14eee:	2157      	movs	r1, #87	; 0x57
   14ef0:	4805      	ldr	r0, [pc, #20]	; (14f08 <hci_vs_init+0x98>)
   14ef2:	f013 feac 	bl	28c4e <z_log_minimal_printk>
			return;
   14ef6:	e7f3      	b.n	14ee0 <hci_vs_init+0x70>
   14ef8:	20000439 	.word	0x20000439
   14efc:	20000438 	.word	0x20000438
   14f00:	00031168 	.word	0x00031168
   14f04:	00031194 	.word	0x00031194
   14f08:	000311c4 	.word	0x000311c4

00014f0c <hci_init>:
{
   14f0c:	b508      	push	{r3, lr}
	err = common_init();
   14f0e:	f7ff fe29 	bl	14b64 <common_init>
	if (err) {
   14f12:	4603      	mov	r3, r0
   14f14:	b108      	cbz	r0, 14f1a <hci_init+0xe>
}
   14f16:	4618      	mov	r0, r3
   14f18:	bd08      	pop	{r3, pc}
	err = le_init();
   14f1a:	f7ff fedd 	bl	14cd8 <le_init>
	if (err) {
   14f1e:	4603      	mov	r3, r0
   14f20:	2800      	cmp	r0, #0
   14f22:	d1f8      	bne.n	14f16 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14f24:	4b10      	ldr	r3, [pc, #64]	; (14f68 <hci_init+0x5c>)
   14f26:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   14f2a:	f013 0f20 	tst.w	r3, #32
   14f2e:	d00e      	beq.n	14f4e <hci_init+0x42>
	else if (!bt_dev.le.acl_mtu) {
   14f30:	4b0d      	ldr	r3, [pc, #52]	; (14f68 <hci_init+0x5c>)
   14f32:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   14f36:	b183      	cbz	r3, 14f5a <hci_init+0x4e>
	err = set_event_mask();
   14f38:	f7fb fc42 	bl	107c0 <set_event_mask>
	if (err) {
   14f3c:	4603      	mov	r3, r0
   14f3e:	2800      	cmp	r0, #0
   14f40:	d1e9      	bne.n	14f16 <hci_init+0xa>
	hci_vs_init();
   14f42:	f7ff ff95 	bl	14e70 <hci_vs_init>
	err = bt_id_init();
   14f46:	f015 fb30 	bl	2a5aa <bt_id_init>
   14f4a:	4603      	mov	r3, r0
	if (err) {
   14f4c:	e7e3      	b.n	14f16 <hci_init+0xa>
		err = bt_br_init();
   14f4e:	f7ff ff73 	bl	14e38 <bt_br_init>
		if (err) {
   14f52:	4603      	mov	r3, r0
   14f54:	2800      	cmp	r0, #0
   14f56:	d0ef      	beq.n	14f38 <hci_init+0x2c>
   14f58:	e7dd      	b.n	14f16 <hci_init+0xa>
		BT_ERR("ACL BR/EDR buffers not initialized");
   14f5a:	2145      	movs	r1, #69	; 0x45
   14f5c:	4803      	ldr	r0, [pc, #12]	; (14f6c <hci_init+0x60>)
   14f5e:	f013 fe76 	bl	28c4e <z_log_minimal_printk>
		return -EIO;
   14f62:	f06f 0304 	mvn.w	r3, #4
   14f66:	e7d6      	b.n	14f16 <hci_init+0xa>
   14f68:	20000380 	.word	0x20000380
   14f6c:	000311f4 	.word	0x000311f4

00014f70 <bt_hci_le_rand>:
{
   14f70:	b570      	push	{r4, r5, r6, lr}
   14f72:	b082      	sub	sp, #8
   14f74:	4606      	mov	r6, r0
   14f76:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   14f78:	4b12      	ldr	r3, [pc, #72]	; (14fc4 <bt_hci_le_rand+0x54>)
   14f7a:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   14f7e:	2b00      	cmp	r3, #0
   14f80:	da1d      	bge.n	14fbe <bt_hci_le_rand+0x4e>
	while (len > 0) {
   14f82:	b1c4      	cbz	r4, 14fb6 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   14f84:	4625      	mov	r5, r4
   14f86:	2c08      	cmp	r4, #8
   14f88:	bf28      	it	cs
   14f8a:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   14f8c:	aa01      	add	r2, sp, #4
   14f8e:	2100      	movs	r1, #0
   14f90:	f242 0018 	movw	r0, #8216	; 0x2018
   14f94:	f7ff fd80 	bl	14a98 <bt_hci_cmd_send_sync>
		if (err) {
   14f98:	4603      	mov	r3, r0
   14f9a:	b968      	cbnz	r0, 14fb8 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   14f9c:	9b01      	ldr	r3, [sp, #4]
   14f9e:	6899      	ldr	r1, [r3, #8]
		memcpy(buffer, rp->rand, count);
   14fa0:	462a      	mov	r2, r5
   14fa2:	3101      	adds	r1, #1
   14fa4:	4630      	mov	r0, r6
   14fa6:	f014 fef1 	bl	29d8c <memcpy>
		net_buf_unref(rsp);
   14faa:	9801      	ldr	r0, [sp, #4]
   14fac:	f007 fdfe 	bl	1cbac <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   14fb0:	442e      	add	r6, r5
		len -= count;
   14fb2:	1b64      	subs	r4, r4, r5
   14fb4:	e7e5      	b.n	14f82 <bt_hci_le_rand+0x12>
	return 0;
   14fb6:	2300      	movs	r3, #0
}
   14fb8:	4618      	mov	r0, r3
   14fba:	b002      	add	sp, #8
   14fbc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   14fbe:	f06f 0385 	mvn.w	r3, #133	; 0x85
   14fc2:	e7f9      	b.n	14fb8 <bt_hci_le_rand+0x48>
   14fc4:	20000380 	.word	0x20000380

00014fc8 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   14fc8:	7b43      	ldrb	r3, [r0, #13]
   14fca:	2b07      	cmp	r3, #7
   14fcc:	d000      	beq.n	14fd0 <conn_auto_initiate+0x8>
   14fce:	4770      	bx	lr
{
   14fd0:	b510      	push	{r4, lr}
   14fd2:	b084      	sub	sp, #16
   14fd4:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14fd6:	210b      	movs	r1, #11
   14fd8:	3004      	adds	r0, #4
   14fda:	f015 f87d 	bl	2a0d8 <atomic_test_bit>
   14fde:	b960      	cbnz	r0, 14ffa <conn_auto_initiate+0x32>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14fe0:	78e3      	ldrb	r3, [r4, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14fe2:	b12b      	cbz	r3, 14ff0 <conn_auto_initiate+0x28>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   14fe4:	4b26      	ldr	r3, [pc, #152]	; (15080 <conn_auto_initiate+0xb8>)
   14fe6:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14fea:	f013 0f08 	tst.w	r3, #8
   14fee:	d004      	beq.n	14ffa <conn_auto_initiate+0x32>
		err = hci_le_read_remote_features(conn);
   14ff0:	4620      	mov	r0, r4
   14ff2:	f015 f8d3 	bl	2a19c <hci_le_read_remote_features>
		if (err) {
   14ff6:	4602      	mov	r2, r0
   14ff8:	b9c0      	cbnz	r0, 1502c <conn_auto_initiate+0x64>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   14ffa:	4b21      	ldr	r3, [pc, #132]	; (15080 <conn_auto_initiate+0xb8>)
   14ffc:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   15000:	f013 0f01 	tst.w	r3, #1
   15004:	d003      	beq.n	1500e <conn_auto_initiate+0x46>
	    !skip_auto_phy_update_on_conn_establishment(conn)) {
   15006:	4620      	mov	r0, r4
   15008:	f015 f847 	bl	2a09a <skip_auto_phy_update_on_conn_establishment>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   1500c:	b198      	cbz	r0, 15036 <conn_auto_initiate+0x6e>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   1500e:	4b1c      	ldr	r3, [pc, #112]	; (15080 <conn_auto_initiate+0xb8>)
   15010:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   15014:	f013 0f20 	tst.w	r3, #32
   15018:	d006      	beq.n	15028 <conn_auto_initiate+0x60>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1501a:	4b19      	ldr	r3, [pc, #100]	; (15080 <conn_auto_initiate+0xb8>)
   1501c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   15020:	689b      	ldr	r3, [r3, #8]
   15022:	f013 0f02 	tst.w	r3, #2
   15026:	d115      	bne.n	15054 <conn_auto_initiate+0x8c>
}
   15028:	b004      	add	sp, #16
   1502a:	bd10      	pop	{r4, pc}
			BT_ERR("Failed read remote features (%d)", err);
   1502c:	2145      	movs	r1, #69	; 0x45
   1502e:	4815      	ldr	r0, [pc, #84]	; (15084 <conn_auto_initiate+0xbc>)
   15030:	f013 fe0d 	bl	28c4e <z_log_minimal_printk>
   15034:	e7e1      	b.n	14ffa <conn_auto_initiate+0x32>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   15036:	2100      	movs	r1, #0
   15038:	9100      	str	r1, [sp, #0]
   1503a:	2302      	movs	r3, #2
   1503c:	461a      	mov	r2, r3
   1503e:	4620      	mov	r0, r4
   15040:	f015 f8fc 	bl	2a23c <bt_le_set_phy>
		if (err) {
   15044:	4602      	mov	r2, r0
   15046:	2800      	cmp	r0, #0
   15048:	d0e1      	beq.n	1500e <conn_auto_initiate+0x46>
			BT_ERR("Failed LE Set PHY (%d)", err);
   1504a:	2145      	movs	r1, #69	; 0x45
   1504c:	480e      	ldr	r0, [pc, #56]	; (15088 <conn_auto_initiate+0xc0>)
   1504e:	f013 fdfe 	bl	28c4e <z_log_minimal_printk>
   15052:	e7dc      	b.n	1500e <conn_auto_initiate+0x46>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15054:	f10d 010e 	add.w	r1, sp, #14
   15058:	a803      	add	r0, sp, #12
   1505a:	f7ff fdcd 	bl	14bf8 <hci_le_read_max_data_len>
			if (!err) {
   1505e:	2800      	cmp	r0, #0
   15060:	d1e2      	bne.n	15028 <conn_auto_initiate+0x60>
				err = bt_le_set_data_len(conn,
   15062:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   15066:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1506a:	4620      	mov	r0, r4
   1506c:	f015 f8c9 	bl	2a202 <bt_le_set_data_len>
				if (err) {
   15070:	4602      	mov	r2, r0
   15072:	2800      	cmp	r0, #0
   15074:	d0d8      	beq.n	15028 <conn_auto_initiate+0x60>
					BT_ERR("Failed to set data len (%d)", err);
   15076:	2145      	movs	r1, #69	; 0x45
   15078:	4804      	ldr	r0, [pc, #16]	; (1508c <conn_auto_initiate+0xc4>)
   1507a:	f013 fde8 	bl	28c4e <z_log_minimal_printk>
		}
   1507e:	e7d3      	b.n	15028 <conn_auto_initiate+0x60>
   15080:	20000380 	.word	0x20000380
   15084:	0003121c 	.word	0x0003121c
   15088:	00031244 	.word	0x00031244
   1508c:	00031260 	.word	0x00031260

00015090 <bt_hci_le_enh_conn_complete>:
{
   15090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15094:	b084      	sub	sp, #16
   15096:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15098:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   1509c:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   150a0:	4640      	mov	r0, r8
   150a2:	f7ff f89b 	bl	141dc <conn_handle_is_disconnected>
   150a6:	4606      	mov	r6, r0
	bt_id_pending_keys_update();
   150a8:	f000 fde4 	bl	15c74 <bt_id_pending_keys_update>
	if (evt->status) {
   150ac:	7820      	ldrb	r0, [r4, #0]
   150ae:	b150      	cbz	r0, 150c6 <bt_hci_le_enh_conn_complete+0x36>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   150b0:	283c      	cmp	r0, #60	; 0x3c
   150b2:	d005      	beq.n	150c0 <bt_hci_le_enh_conn_complete+0x30>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   150b4:	4602      	mov	r2, r0
   150b6:	2157      	movs	r1, #87	; 0x57
   150b8:	4854      	ldr	r0, [pc, #336]	; (1520c <bt_hci_le_enh_conn_complete+0x17c>)
   150ba:	f013 fdc8 	bl	28c4e <z_log_minimal_printk>
		return;
   150be:	e04a      	b.n	15156 <bt_hci_le_enh_conn_complete+0xc6>
			le_conn_complete_adv_timeout();
   150c0:	f7ff f976 	bl	143b0 <le_conn_complete_adv_timeout>
			return;
   150c4:	e047      	b.n	15156 <bt_hci_le_enh_conn_complete+0xc6>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   150c6:	7923      	ldrb	r3, [r4, #4]
   150c8:	3b02      	subs	r3, #2
   150ca:	b2db      	uxtb	r3, r3
   150cc:	2b01      	cmp	r3, #1
   150ce:	d945      	bls.n	1515c <bt_hci_le_enh_conn_complete+0xcc>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   150d0:	78e3      	ldrb	r3, [r4, #3]
   150d2:	2b01      	cmp	r3, #1
   150d4:	d057      	beq.n	15186 <bt_hci_le_enh_conn_complete+0xf6>
				bt_lookup_id_addr(id, &evt->peer_addr));
   150d6:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   150d8:	4629      	mov	r1, r5
   150da:	f015 fa19 	bl	2a510 <bt_lookup_id_addr>
   150de:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   150e0:	2207      	movs	r2, #7
   150e2:	4668      	mov	r0, sp
   150e4:	f014 fe52 	bl	29d8c <memcpy>
   150e8:	2207      	movs	r2, #7
   150ea:	4629      	mov	r1, r5
   150ec:	a802      	add	r0, sp, #8
   150ee:	f014 fe4d 	bl	29d8c <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   150f2:	4669      	mov	r1, sp
   150f4:	78e0      	ldrb	r0, [r4, #3]
   150f6:	f7ff f941 	bl	1437c <find_pending_connect>
   150fa:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   150fc:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   150fe:	2b01      	cmp	r3, #1
   15100:	d045      	beq.n	1518e <bt_hci_le_enh_conn_complete+0xfe>
	if (!conn) {
   15102:	2d00      	cmp	r5, #0
   15104:	d056      	beq.n	151b4 <bt_hci_le_enh_conn_complete+0x124>
	conn->handle = handle;
   15106:	4628      	mov	r0, r5
   15108:	f820 7b90 	strh.w	r7, [r0], #144
   1510c:	2207      	movs	r2, #7
   1510e:	4669      	mov	r1, sp
   15110:	f014 fe3c 	bl	29d8c <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   15114:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   15118:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1511c:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   15120:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15124:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   15128:	f8a5 30ae 	strh.w	r3, [r5, #174]	; 0xae
	conn->role = evt->role;
   1512c:	78e3      	ldrb	r3, [r4, #3]
   1512e:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   15130:	2200      	movs	r2, #0
   15132:	732a      	strb	r2, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15134:	2b01      	cmp	r3, #1
   15136:	d04a      	beq.n	151ce <bt_hci_le_enh_conn_complete+0x13e>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15138:	2107      	movs	r1, #7
   1513a:	4628      	mov	r0, r5
   1513c:	f001 ffac 	bl	17098 <bt_conn_set_state>
	if (is_disconnected) {
   15140:	2e00      	cmp	r6, #0
   15142:	d15e      	bne.n	15202 <bt_hci_le_enh_conn_complete+0x172>
	bt_conn_connected(conn);
   15144:	4628      	mov	r0, r5
   15146:	f015 fdac 	bl	2aca2 <bt_conn_connected>
	conn_auto_initiate(conn);
   1514a:	4628      	mov	r0, r5
   1514c:	f7ff ff3c 	bl	14fc8 <conn_auto_initiate>
	bt_conn_unref(conn);
   15150:	4628      	mov	r0, r5
   15152:	f001 ff65 	bl	17020 <bt_conn_unref>
}
   15156:	b004      	add	sp, #16
   15158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1515c:	2207      	movs	r2, #7
   1515e:	1d21      	adds	r1, r4, #4
   15160:	4668      	mov	r0, sp
   15162:	f014 fe13 	bl	29d8c <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15166:	f89d 3000 	ldrb.w	r3, [sp]
   1516a:	3b02      	subs	r3, #2
   1516c:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
   15170:	2206      	movs	r2, #6
   15172:	f104 0111 	add.w	r1, r4, #17
   15176:	f10d 0009 	add.w	r0, sp, #9
   1517a:	f014 fe07 	bl	29d8c <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1517e:	2301      	movs	r3, #1
   15180:	f88d 3008 	strb.w	r3, [sp, #8]
   15184:	e7b5      	b.n	150f2 <bt_hci_le_enh_conn_complete+0x62>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   15186:	4b22      	ldr	r3, [pc, #136]	; (15210 <bt_hci_le_enh_conn_complete+0x180>)
   15188:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   1518c:	e7a3      	b.n	150d6 <bt_hci_le_enh_conn_complete+0x46>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1518e:	f001 f961 	bl	16454 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   15192:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15196:	f3bf 8f5b 	dmb	ish
   1519a:	e853 1f00 	ldrex	r1, [r3]
   1519e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   151a2:	e843 1200 	strex	r2, r1, [r3]
   151a6:	2a00      	cmp	r2, #0
   151a8:	d1f7      	bne.n	1519a <bt_hci_le_enh_conn_complete+0x10a>
   151aa:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   151ae:	f015 fb95 	bl	2a8dc <bt_le_lim_adv_cancel_timeout>
   151b2:	e7a6      	b.n	15102 <bt_hci_le_enh_conn_complete+0x72>
		BT_ERR("No pending conn for peer %s",
   151b4:	1d20      	adds	r0, r4, #4
   151b6:	f7fe fdeb 	bl	13d90 <bt_addr_le_str>
   151ba:	4602      	mov	r2, r0
   151bc:	2145      	movs	r1, #69	; 0x45
   151be:	4815      	ldr	r0, [pc, #84]	; (15214 <bt_hci_le_enh_conn_complete+0x184>)
   151c0:	f013 fd45 	bl	28c4e <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   151c4:	211f      	movs	r1, #31
   151c6:	4640      	mov	r0, r8
   151c8:	f015 f801 	bl	2a1ce <bt_hci_disconnect>
		return;
   151cc:	e7c3      	b.n	15156 <bt_hci_le_enh_conn_complete+0xc6>
	memcpy(dst, src, sizeof(*dst));
   151ce:	2207      	movs	r2, #7
   151d0:	a902      	add	r1, sp, #8
   151d2:	f105 0097 	add.w	r0, r5, #151	; 0x97
   151d6:	f014 fdd9 	bl	29d8c <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   151da:	f001 f93b 	bl	16454 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   151de:	7a29      	ldrb	r1, [r5, #8]
   151e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   151e4:	4c0a      	ldr	r4, [pc, #40]	; (15210 <bt_hci_le_enh_conn_complete+0x180>)
   151e6:	2207      	movs	r2, #7
   151e8:	4421      	add	r1, r4
   151ea:	f105 009e 	add.w	r0, r5, #158	; 0x9e
   151ee:	f014 fdcd 	bl	29d8c <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   151f2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
   151f6:	f013 0f40 	tst.w	r3, #64	; 0x40
   151fa:	d09d      	beq.n	15138 <bt_hci_le_enh_conn_complete+0xa8>
			bt_le_adv_resume();
   151fc:	f015 fb73 	bl	2a8e6 <bt_le_adv_resume>
   15200:	e79a      	b.n	15138 <bt_hci_le_enh_conn_complete+0xa8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15202:	2101      	movs	r1, #1
   15204:	4628      	mov	r0, r5
   15206:	f001 ff47 	bl	17098 <bt_conn_set_state>
   1520a:	e79b      	b.n	15144 <bt_hci_le_enh_conn_complete+0xb4>
   1520c:	00031284 	.word	0x00031284
   15210:	20000380 	.word	0x20000380
   15214:	000312a4 	.word	0x000312a4

00015218 <le_legacy_conn_complete>:
{
   15218:	b510      	push	{r4, lr}
   1521a:	b088      	sub	sp, #32
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1521c:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
   1521e:	780b      	ldrb	r3, [r1, #0]
   15220:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   15224:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   15228:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1522c:	78cb      	ldrb	r3, [r1, #3]
   1522e:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   15232:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   15236:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1523a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1523e:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   15242:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   15246:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1524a:	7c4b      	ldrb	r3, [r1, #17]
   1524c:	f88d 301d 	strb.w	r3, [sp, #29]
   15250:	2207      	movs	r2, #7
   15252:	3104      	adds	r1, #4
   15254:	a801      	add	r0, sp, #4
   15256:	f014 fd99 	bl	29d8c <memcpy>
	memcpy(dst, src, sizeof(*dst));
   1525a:	4c09      	ldr	r4, [pc, #36]	; (15280 <le_legacy_conn_complete+0x68>)
   1525c:	2206      	movs	r2, #6
   1525e:	4621      	mov	r1, r4
   15260:	f10d 000b 	add.w	r0, sp, #11
   15264:	f014 fd92 	bl	29d8c <memcpy>
   15268:	2206      	movs	r2, #6
   1526a:	4621      	mov	r1, r4
   1526c:	f10d 0011 	add.w	r0, sp, #17
   15270:	f014 fd8c 	bl	29d8c <memcpy>
	enh_conn_complete(&enh);
   15274:	4668      	mov	r0, sp
   15276:	f015 f806 	bl	2a286 <enh_conn_complete>
}
   1527a:	b008      	add	sp, #32
   1527c:	bd10      	pop	{r4, pc}
   1527e:	bf00      	nop
   15280:	00030c34 	.word	0x00030c34

00015284 <hci_encrypt_key_refresh_complete>:
{
   15284:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   15286:	6883      	ldr	r3, [r0, #8]
	uint8_t status = evt->status;
   15288:	781c      	ldrb	r4, [r3, #0]
	handle = sys_le16_to_cpu(evt->handle);
   1528a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   1528e:	4630      	mov	r0, r6
   15290:	f001 fef8 	bl	17084 <bt_conn_lookup_handle>
	if (!conn) {
   15294:	b188      	cbz	r0, 152ba <hci_encrypt_key_refresh_complete+0x36>
   15296:	4605      	mov	r5, r0
	if (status) {
   15298:	b9ac      	cbnz	r4, 152c6 <hci_encrypt_key_refresh_complete+0x42>
	if (conn->type == BT_CONN_TYPE_LE) {
   1529a:	7883      	ldrb	r3, [r0, #2]
   1529c:	2b01      	cmp	r3, #1
   1529e:	d01e      	beq.n	152de <hci_encrypt_key_refresh_complete+0x5a>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   152a0:	4620      	mov	r0, r4
   152a2:	f015 f821 	bl	2a2e8 <bt_security_err_get>
   152a6:	4602      	mov	r2, r0
   152a8:	4621      	mov	r1, r4
   152aa:	4628      	mov	r0, r5
   152ac:	f002 f8e4 	bl	17478 <bt_conn_security_changed>
	if (status) {
   152b0:	b9f4      	cbnz	r4, 152f0 <hci_encrypt_key_refresh_complete+0x6c>
	bt_conn_unref(conn);
   152b2:	4628      	mov	r0, r5
   152b4:	f001 feb4 	bl	17020 <bt_conn_unref>
}
   152b8:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to look up conn with handle %u", handle);
   152ba:	4632      	mov	r2, r6
   152bc:	2145      	movs	r1, #69	; 0x45
   152be:	4811      	ldr	r0, [pc, #68]	; (15304 <hci_encrypt_key_refresh_complete+0x80>)
   152c0:	f013 fcc5 	bl	28c4e <z_log_minimal_printk>
		return;
   152c4:	e7f8      	b.n	152b8 <hci_encrypt_key_refresh_complete+0x34>
		bt_conn_security_changed(conn, status,
   152c6:	4620      	mov	r0, r4
   152c8:	f015 f80e 	bl	2a2e8 <bt_security_err_get>
   152cc:	4602      	mov	r2, r0
   152ce:	4621      	mov	r1, r4
   152d0:	4628      	mov	r0, r5
   152d2:	f002 f8d1 	bl	17478 <bt_conn_security_changed>
		bt_conn_unref(conn);
   152d6:	4628      	mov	r0, r5
   152d8:	f001 fea2 	bl	17020 <bt_conn_unref>
		return;
   152dc:	e7ec      	b.n	152b8 <hci_encrypt_key_refresh_complete+0x34>
		bt_smp_update_keys(conn);
   152de:	f006 fea5 	bl	1c02c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   152e2:	4628      	mov	r0, r5
   152e4:	f014 fedb 	bl	2a09e <update_sec_level>
   152e8:	2800      	cmp	r0, #0
   152ea:	d1d9      	bne.n	152a0 <hci_encrypt_key_refresh_complete+0x1c>
			status = BT_HCI_ERR_AUTH_FAIL;
   152ec:	2405      	movs	r4, #5
   152ee:	e7d7      	b.n	152a0 <hci_encrypt_key_refresh_complete+0x1c>
		BT_ERR("Failed to set required security level");
   152f0:	2145      	movs	r1, #69	; 0x45
   152f2:	4805      	ldr	r0, [pc, #20]	; (15308 <hci_encrypt_key_refresh_complete+0x84>)
   152f4:	f013 fcab 	bl	28c4e <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   152f8:	4621      	mov	r1, r4
   152fa:	4628      	mov	r0, r5
   152fc:	f015 fcd9 	bl	2acb2 <bt_conn_disconnect>
   15300:	e7d7      	b.n	152b2 <hci_encrypt_key_refresh_complete+0x2e>
   15302:	bf00      	nop
   15304:	00030ecc 	.word	0x00030ecc
   15308:	000312c8 	.word	0x000312c8

0001530c <hci_encrypt_change>:
{
   1530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1530e:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15310:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   15314:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   15316:	4638      	mov	r0, r7
   15318:	f001 feb4 	bl	17084 <bt_conn_lookup_handle>
	if (!conn) {
   1531c:	b198      	cbz	r0, 15346 <hci_encrypt_change+0x3a>
   1531e:	4604      	mov	r4, r0
	if (status) {
   15320:	b9bd      	cbnz	r5, 15352 <hci_encrypt_change+0x46>
	conn->encrypt = evt->encrypt;
   15322:	78f3      	ldrb	r3, [r6, #3]
   15324:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   15326:	7882      	ldrb	r2, [r0, #2]
   15328:	2a01      	cmp	r2, #1
   1532a:	d01e      	beq.n	1536a <hci_encrypt_change+0x5e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1532c:	4628      	mov	r0, r5
   1532e:	f014 ffdb 	bl	2a2e8 <bt_security_err_get>
   15332:	4602      	mov	r2, r0
   15334:	4629      	mov	r1, r5
   15336:	4620      	mov	r0, r4
   15338:	f002 f89e 	bl	17478 <bt_conn_security_changed>
	if (status) {
   1533c:	bb05      	cbnz	r5, 15380 <hci_encrypt_change+0x74>
	bt_conn_unref(conn);
   1533e:	4620      	mov	r0, r4
   15340:	f001 fe6e 	bl	17020 <bt_conn_unref>
}
   15344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Unable to look up conn with handle %u", handle);
   15346:	463a      	mov	r2, r7
   15348:	2145      	movs	r1, #69	; 0x45
   1534a:	4812      	ldr	r0, [pc, #72]	; (15394 <hci_encrypt_change+0x88>)
   1534c:	f013 fc7f 	bl	28c4e <z_log_minimal_printk>
		return;
   15350:	e7f8      	b.n	15344 <hci_encrypt_change+0x38>
		bt_conn_security_changed(conn, status,
   15352:	4628      	mov	r0, r5
   15354:	f014 ffc8 	bl	2a2e8 <bt_security_err_get>
   15358:	4602      	mov	r2, r0
   1535a:	4629      	mov	r1, r5
   1535c:	4620      	mov	r0, r4
   1535e:	f002 f88b 	bl	17478 <bt_conn_security_changed>
		bt_conn_unref(conn);
   15362:	4620      	mov	r0, r4
   15364:	f001 fe5c 	bl	17020 <bt_conn_unref>
		return;
   15368:	e7ec      	b.n	15344 <hci_encrypt_change+0x38>
		if (conn->encrypt) {
   1536a:	b933      	cbnz	r3, 1537a <hci_encrypt_change+0x6e>
		if (!update_sec_level(conn)) {
   1536c:	4620      	mov	r0, r4
   1536e:	f014 fe96 	bl	2a09e <update_sec_level>
   15372:	2800      	cmp	r0, #0
   15374:	d1da      	bne.n	1532c <hci_encrypt_change+0x20>
			status = BT_HCI_ERR_AUTH_FAIL;
   15376:	2505      	movs	r5, #5
   15378:	e7d8      	b.n	1532c <hci_encrypt_change+0x20>
			bt_smp_update_keys(conn);
   1537a:	f006 fe57 	bl	1c02c <bt_smp_update_keys>
   1537e:	e7f5      	b.n	1536c <hci_encrypt_change+0x60>
		BT_ERR("Failed to set required security level");
   15380:	2145      	movs	r1, #69	; 0x45
   15382:	4805      	ldr	r0, [pc, #20]	; (15398 <hci_encrypt_change+0x8c>)
   15384:	f013 fc63 	bl	28c4e <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   15388:	4629      	mov	r1, r5
   1538a:	4620      	mov	r0, r4
   1538c:	f015 fc91 	bl	2acb2 <bt_conn_disconnect>
   15390:	e7d5      	b.n	1533e <hci_encrypt_change+0x32>
   15392:	bf00      	nop
   15394:	00030ecc 	.word	0x00030ecc
   15398:	000312c8 	.word	0x000312c8

0001539c <bt_send>:
{
   1539c:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   1539e:	4b03      	ldr	r3, [pc, #12]	; (153ac <bt_send+0x10>)
   153a0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   153a4:	695b      	ldr	r3, [r3, #20]
   153a6:	4798      	blx	r3
}
   153a8:	bd08      	pop	{r3, pc}
   153aa:	bf00      	nop
   153ac:	20000380 	.word	0x20000380

000153b0 <bt_hci_cmd_send>:
{
   153b0:	b538      	push	{r3, r4, r5, lr}
   153b2:	4604      	mov	r4, r0
	if (!buf) {
   153b4:	460d      	mov	r5, r1
   153b6:	b151      	cbz	r1, 153ce <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   153b8:	f640 4335 	movw	r3, #3125	; 0xc35
   153bc:	429c      	cmp	r4, r3
   153be:	d00e      	beq.n	153de <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   153c0:	4629      	mov	r1, r5
   153c2:	480e      	ldr	r0, [pc, #56]	; (153fc <bt_hci_cmd_send+0x4c>)
   153c4:	f007 fbc6 	bl	1cb54 <net_buf_put>
	return 0;
   153c8:	2400      	movs	r4, #0
}
   153ca:	4620      	mov	r0, r4
   153cc:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   153ce:	f7ff fb13 	bl	149f8 <bt_hci_cmd_create>
		if (!buf) {
   153d2:	4605      	mov	r5, r0
   153d4:	2800      	cmp	r0, #0
   153d6:	d1ef      	bne.n	153b8 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   153d8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   153dc:	e7f5      	b.n	153ca <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   153de:	4628      	mov	r0, r5
   153e0:	f7ff ffdc 	bl	1539c <bt_send>
		if (err) {
   153e4:	4604      	mov	r4, r0
   153e6:	2800      	cmp	r0, #0
   153e8:	d0ef      	beq.n	153ca <bt_hci_cmd_send+0x1a>
			BT_ERR("Unable to send to driver (err %d)", err);
   153ea:	4602      	mov	r2, r0
   153ec:	2145      	movs	r1, #69	; 0x45
   153ee:	4804      	ldr	r0, [pc, #16]	; (15400 <bt_hci_cmd_send+0x50>)
   153f0:	f013 fc2d 	bl	28c4e <z_log_minimal_printk>
			net_buf_unref(buf);
   153f4:	4628      	mov	r0, r5
   153f6:	f007 fbd9 	bl	1cbac <net_buf_unref>
		return err;
   153fa:	e7e6      	b.n	153ca <bt_hci_cmd_send+0x1a>
   153fc:	200004c4 	.word	0x200004c4
   15400:	000312f4 	.word	0x000312f4

00015404 <le_ltk_reply>:
{
   15404:	b570      	push	{r4, r5, r6, lr}
   15406:	4605      	mov	r5, r0
   15408:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1540a:	2112      	movs	r1, #18
   1540c:	f242 001a 	movw	r0, #8218	; 0x201a
   15410:	f7ff faf2 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   15414:	b180      	cbz	r0, 15438 <le_ltk_reply+0x34>
   15416:	4606      	mov	r6, r0
   15418:	2112      	movs	r1, #18
   1541a:	3008      	adds	r0, #8
   1541c:	f007 fcc8 	bl	1cdb0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   15420:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   15424:	2210      	movs	r2, #16
   15426:	4621      	mov	r1, r4
   15428:	f014 fcb0 	bl	29d8c <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1542c:	4631      	mov	r1, r6
   1542e:	f242 001a 	movw	r0, #8218	; 0x201a
   15432:	f7ff ffbd 	bl	153b0 <bt_hci_cmd_send>
}
   15436:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Out of command buffers");
   15438:	2145      	movs	r1, #69	; 0x45
   1543a:	4802      	ldr	r0, [pc, #8]	; (15444 <le_ltk_reply+0x40>)
   1543c:	f013 fc07 	bl	28c4e <z_log_minimal_printk>
		return;
   15440:	e7f9      	b.n	15436 <le_ltk_reply+0x32>
   15442:	bf00      	nop
   15444:	0003131c 	.word	0x0003131c

00015448 <le_ltk_neg_reply>:
{
   15448:	b538      	push	{r3, r4, r5, lr}
   1544a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1544c:	2102      	movs	r1, #2
   1544e:	f242 001b 	movw	r0, #8219	; 0x201b
   15452:	f7ff fad1 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   15456:	b158      	cbz	r0, 15470 <le_ltk_neg_reply+0x28>
   15458:	4605      	mov	r5, r0
   1545a:	2102      	movs	r1, #2
   1545c:	3008      	adds	r0, #8
   1545e:	f007 fca7 	bl	1cdb0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   15462:	8004      	strh	r4, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   15464:	4629      	mov	r1, r5
   15466:	f242 001b 	movw	r0, #8219	; 0x201b
   1546a:	f7ff ffa1 	bl	153b0 <bt_hci_cmd_send>
}
   1546e:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Out of command buffers");
   15470:	2145      	movs	r1, #69	; 0x45
   15472:	4802      	ldr	r0, [pc, #8]	; (1547c <le_ltk_neg_reply+0x34>)
   15474:	f013 fbeb 	bl	28c4e <z_log_minimal_printk>
		return;
   15478:	e7f9      	b.n	1546e <le_ltk_neg_reply+0x26>
   1547a:	bf00      	nop
   1547c:	0003131c 	.word	0x0003131c

00015480 <le_ltk_request>:
{
   15480:	b570      	push	{r4, r5, r6, lr}
   15482:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   15484:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15486:	8825      	ldrh	r5, [r4, #0]
	conn = bt_conn_lookup_handle(handle);
   15488:	4628      	mov	r0, r5
   1548a:	f001 fdfb 	bl	17084 <bt_conn_lookup_handle>
	if (!conn) {
   1548e:	b1a0      	cbz	r0, 154ba <le_ltk_request+0x3a>
   15490:	4606      	mov	r6, r0
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   15492:	f8d4 2002 	ldr.w	r2, [r4, #2]
   15496:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1549a:	a902      	add	r1, sp, #8
   1549c:	9101      	str	r1, [sp, #4]
   1549e:	8961      	ldrh	r1, [r4, #10]
   154a0:	9100      	str	r1, [sp, #0]
   154a2:	f017 fd14 	bl	2cece <bt_smp_request_ltk>
   154a6:	b170      	cbz	r0, 154c6 <le_ltk_request+0x46>
		le_ltk_reply(handle, ltk);
   154a8:	a902      	add	r1, sp, #8
   154aa:	4628      	mov	r0, r5
   154ac:	f7ff ffaa 	bl	15404 <le_ltk_reply>
	bt_conn_unref(conn);
   154b0:	4630      	mov	r0, r6
   154b2:	f001 fdb5 	bl	17020 <bt_conn_unref>
}
   154b6:	b006      	add	sp, #24
   154b8:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   154ba:	462a      	mov	r2, r5
   154bc:	2145      	movs	r1, #69	; 0x45
   154be:	4804      	ldr	r0, [pc, #16]	; (154d0 <le_ltk_request+0x50>)
   154c0:	f013 fbc5 	bl	28c4e <z_log_minimal_printk>
		return;
   154c4:	e7f7      	b.n	154b6 <le_ltk_request+0x36>
		le_ltk_neg_reply(handle);
   154c6:	4628      	mov	r0, r5
   154c8:	f7ff ffbe 	bl	15448 <le_ltk_neg_reply>
   154cc:	e7f0      	b.n	154b0 <le_ltk_request+0x30>
   154ce:	bf00      	nop
   154d0:	00030ef8 	.word	0x00030ef8

000154d4 <le_conn_param_neg_reply>:
{
   154d4:	b570      	push	{r4, r5, r6, lr}
   154d6:	4605      	mov	r5, r0
   154d8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   154da:	2103      	movs	r1, #3
   154dc:	f242 0021 	movw	r0, #8225	; 0x2021
   154e0:	f7ff fa8a 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   154e4:	b160      	cbz	r0, 15500 <le_conn_param_neg_reply+0x2c>
   154e6:	4606      	mov	r6, r0
   154e8:	2103      	movs	r1, #3
   154ea:	3008      	adds	r0, #8
   154ec:	f007 fc60 	bl	1cdb0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   154f0:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   154f2:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   154f4:	4631      	mov	r1, r6
   154f6:	f242 0021 	movw	r0, #8225	; 0x2021
   154fa:	f7ff ff59 	bl	153b0 <bt_hci_cmd_send>
}
   154fe:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate buffer");
   15500:	2145      	movs	r1, #69	; 0x45
   15502:	4802      	ldr	r0, [pc, #8]	; (1550c <le_conn_param_neg_reply+0x38>)
   15504:	f013 fba3 	bl	28c4e <z_log_minimal_printk>
		return;
   15508:	e7f9      	b.n	154fe <le_conn_param_neg_reply+0x2a>
   1550a:	bf00      	nop
   1550c:	00031338 	.word	0x00031338

00015510 <le_conn_param_req>:
{
   15510:	b530      	push	{r4, r5, lr}
   15512:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   15514:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15516:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   15518:	885a      	ldrh	r2, [r3, #2]
   1551a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1551e:	889a      	ldrh	r2, [r3, #4]
   15520:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   15524:	88da      	ldrh	r2, [r3, #6]
   15526:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1552a:	891b      	ldrh	r3, [r3, #8]
   1552c:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   15530:	4620      	mov	r0, r4
   15532:	f001 fda7 	bl	17084 <bt_conn_lookup_handle>
	if (!conn) {
   15536:	b168      	cbz	r0, 15554 <le_conn_param_req+0x44>
   15538:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   1553a:	4669      	mov	r1, sp
   1553c:	f001 ff0e 	bl	1735c <le_param_req>
   15540:	b990      	cbnz	r0, 15568 <le_conn_param_req+0x58>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   15542:	211e      	movs	r1, #30
   15544:	4620      	mov	r0, r4
   15546:	f7ff ffc5 	bl	154d4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1554a:	4628      	mov	r0, r5
   1554c:	f001 fd68 	bl	17020 <bt_conn_unref>
}
   15550:	b003      	add	sp, #12
   15552:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15554:	4622      	mov	r2, r4
   15556:	2145      	movs	r1, #69	; 0x45
   15558:	4806      	ldr	r0, [pc, #24]	; (15574 <le_conn_param_req+0x64>)
   1555a:	f013 fb78 	bl	28c4e <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1555e:	2102      	movs	r1, #2
   15560:	4620      	mov	r0, r4
   15562:	f7ff ffb7 	bl	154d4 <le_conn_param_neg_reply>
		return;
   15566:	e7f3      	b.n	15550 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   15568:	4669      	mov	r1, sp
   1556a:	4620      	mov	r0, r4
   1556c:	f014 fee1 	bl	2a332 <le_conn_param_req_reply>
   15570:	e7eb      	b.n	1554a <le_conn_param_req+0x3a>
   15572:	bf00      	nop
   15574:	00030ef8 	.word	0x00030ef8

00015578 <send_cmd>:
{
   15578:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1557a:	2200      	movs	r2, #0
   1557c:	2300      	movs	r3, #0
   1557e:	4826      	ldr	r0, [pc, #152]	; (15618 <send_cmd+0xa0>)
   15580:	f007 f9be 	bl	1c900 <net_buf_get>
	BT_ASSERT(buf);
   15584:	4604      	mov	r4, r0
   15586:	b310      	cbz	r0, 155ce <send_cmd+0x56>
   15588:	4d24      	ldr	r5, [pc, #144]	; (1561c <send_cmd+0xa4>)
   1558a:	f04f 32ff 	mov.w	r2, #4294967295
   1558e:	f04f 33ff 	mov.w	r3, #4294967295
   15592:	4628      	mov	r0, r5
   15594:	f00d f908 	bl	227a8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   15598:	69ab      	ldr	r3, [r5, #24]
   1559a:	b163      	cbz	r3, 155b6 <send_cmd+0x3e>
		BT_ERR("Uncleared pending sent_cmd");
   1559c:	2145      	movs	r1, #69	; 0x45
   1559e:	4820      	ldr	r0, [pc, #128]	; (15620 <send_cmd+0xa8>)
   155a0:	f013 fb55 	bl	28c4e <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   155a4:	f5a5 7590 	sub.w	r5, r5, #288	; 0x120
   155a8:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
   155ac:	f007 fafe 	bl	1cbac <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   155b0:	2300      	movs	r3, #0
   155b2:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   155b6:	4620      	mov	r0, r4
   155b8:	f007 fb2c 	bl	1cc14 <net_buf_ref>
   155bc:	4b19      	ldr	r3, [pc, #100]	; (15624 <send_cmd+0xac>)
   155be:	f8c3 0138 	str.w	r0, [r3, #312]	; 0x138
	err = bt_send(buf);
   155c2:	4620      	mov	r0, r4
   155c4:	f7ff feea 	bl	1539c <bt_send>
	if (err) {
   155c8:	4602      	mov	r2, r0
   155ca:	b968      	cbnz	r0, 155e8 <send_cmd+0x70>
}
   155cc:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   155ce:	f640 1273 	movw	r2, #2419	; 0x973
   155d2:	4915      	ldr	r1, [pc, #84]	; (15628 <send_cmd+0xb0>)
   155d4:	4815      	ldr	r0, [pc, #84]	; (1562c <send_cmd+0xb4>)
   155d6:	f013 fb1a 	bl	28c0e <assert_print>
   155da:	4040      	eors	r0, r0
   155dc:	f380 8811 	msr	BASEPRI, r0
   155e0:	f04f 0003 	mov.w	r0, #3
   155e4:	df02      	svc	2
   155e6:	e7cf      	b.n	15588 <send_cmd+0x10>
		BT_ERR("Unable to send to driver (err %d)", err);
   155e8:	2145      	movs	r1, #69	; 0x45
   155ea:	4811      	ldr	r0, [pc, #68]	; (15630 <send_cmd+0xb8>)
   155ec:	f013 fb2f 	bl	28c4e <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   155f0:	480a      	ldr	r0, [pc, #40]	; (1561c <send_cmd+0xa4>)
   155f2:	f00d f89b 	bl	2272c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   155f6:	4620      	mov	r0, r4
   155f8:	f017 fea6 	bl	2d348 <net_buf_id>
   155fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15600:	4b0c      	ldr	r3, [pc, #48]	; (15634 <send_cmd+0xbc>)
   15602:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   15606:	4622      	mov	r2, r4
   15608:	211f      	movs	r1, #31
   1560a:	8858      	ldrh	r0, [r3, #2]
   1560c:	f7fe ffe2 	bl	145d4 <hci_cmd_done>
		net_buf_unref(buf);
   15610:	4620      	mov	r0, r4
   15612:	f007 facb 	bl	1cbac <net_buf_unref>
   15616:	e7d9      	b.n	155cc <send_cmd+0x54>
   15618:	200004c4 	.word	0x200004c4
   1561c:	200004a0 	.word	0x200004a0
   15620:	00031358 	.word	0x00031358
   15624:	20000380 	.word	0x20000380
   15628:	00031028 	.word	0x00031028
   1562c:	00030128 	.word	0x00030128
   15630:	000312f4 	.word	0x000312f4
   15634:	20002940 	.word	0x20002940

00015638 <process_events>:
{
   15638:	b538      	push	{r3, r4, r5, lr}
   1563a:	4604      	mov	r4, r0
   1563c:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   1563e:	e008      	b.n	15652 <process_events+0x1a>
				send_cmd();
   15640:	f7ff ff9a 	bl	15578 <send_cmd>
   15644:	e003      	b.n	1564e <process_events+0x16>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   15646:	2157      	movs	r1, #87	; 0x57
   15648:	480b      	ldr	r0, [pc, #44]	; (15678 <process_events+0x40>)
   1564a:	f013 fb00 	bl	28c4e <z_log_minimal_printk>
	for (; count; ev++, count--) {
   1564e:	3414      	adds	r4, #20
   15650:	3d01      	subs	r5, #1
   15652:	b185      	cbz	r5, 15676 <process_events+0x3e>
		switch (ev->state) {
   15654:	68e2      	ldr	r2, [r4, #12]
   15656:	f3c2 3286 	ubfx	r2, r2, #14, #7
   1565a:	2a01      	cmp	r2, #1
   1565c:	d9f7      	bls.n	1564e <process_events+0x16>
   1565e:	2a04      	cmp	r2, #4
   15660:	d1f1      	bne.n	15646 <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   15662:	7b23      	ldrb	r3, [r4, #12]
   15664:	2b00      	cmp	r3, #0
   15666:	d0eb      	beq.n	15640 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   15668:	2b01      	cmp	r3, #1
   1566a:	d1f0      	bne.n	1564e <process_events+0x16>
					conn = CONTAINER_OF(ev->fifo,
   1566c:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   1566e:	3838      	subs	r0, #56	; 0x38
   15670:	f002 f8aa 	bl	177c8 <bt_conn_process_tx>
   15674:	e7eb      	b.n	1564e <process_events+0x16>
}
   15676:	bd38      	pop	{r3, r4, r5, pc}
   15678:	00031378 	.word	0x00031378

0001567c <hci_tx_thread>:
{
   1567c:	b538      	push	{r3, r4, r5, lr}
   1567e:	e011      	b.n	156a4 <hci_tx_thread+0x28>
		BT_ASSERT(err == 0);
   15680:	f640 12da 	movw	r2, #2522	; 0x9da
   15684:	4912      	ldr	r1, [pc, #72]	; (156d0 <hci_tx_thread+0x54>)
   15686:	4813      	ldr	r0, [pc, #76]	; (156d4 <hci_tx_thread+0x58>)
   15688:	f013 fac1 	bl	28c0e <assert_print>
   1568c:	4040      	eors	r0, r0
   1568e:	f380 8811 	msr	BASEPRI, r0
   15692:	f04f 0003 	mov.w	r0, #3
   15696:	df02      	svc	2
		process_events(events, ev_count);
   15698:	4621      	mov	r1, r4
   1569a:	480f      	ldr	r0, [pc, #60]	; (156d8 <hci_tx_thread+0x5c>)
   1569c:	f7ff ffcc 	bl	15638 <process_events>
	z_impl_k_yield();
   156a0:	f00e fcb2 	bl	24008 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   156a4:	4d0c      	ldr	r5, [pc, #48]	; (156d8 <hci_tx_thread+0x5c>)
   156a6:	68eb      	ldr	r3, [r5, #12]
   156a8:	f36f 3394 	bfc	r3, #14, #7
   156ac:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   156ae:	f105 0014 	add.w	r0, r5, #20
   156b2:	f001 fc63 	bl	16f7c <bt_conn_prepare_events>
   156b6:	1c44      	adds	r4, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   156b8:	f04f 32ff 	mov.w	r2, #4294967295
   156bc:	f04f 33ff 	mov.w	r3, #4294967295
   156c0:	4621      	mov	r1, r4
   156c2:	4628      	mov	r0, r5
   156c4:	f00f fc1a 	bl	24efc <z_impl_k_poll>
		BT_ASSERT(err == 0);
   156c8:	2800      	cmp	r0, #0
   156ca:	d1d9      	bne.n	15680 <hci_tx_thread+0x4>
   156cc:	e7e4      	b.n	15698 <hci_tx_thread+0x1c>
   156ce:	bf00      	nop
   156d0:	00031028 	.word	0x00031028
   156d4:	00030128 	.word	0x00030128
   156d8:	20000690 	.word	0x20000690

000156dc <hci_event_prio>:
{
   156dc:	b570      	push	{r4, r5, r6, lr}
   156de:	b082      	sub	sp, #8
   156e0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   156e2:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   156e6:	4628      	mov	r0, r5
   156e8:	f017 fe62 	bl	2d3b0 <net_buf_simple_headroom>
   156ec:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   156f0:	89a3      	ldrh	r3, [r4, #12]
   156f2:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   156f6:	2b01      	cmp	r3, #1
   156f8:	d91e      	bls.n	15738 <hci_event_prio+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   156fa:	2102      	movs	r1, #2
   156fc:	4628      	mov	r0, r5
   156fe:	f007 fb1d 	bl	1cd3c <net_buf_simple_pull_mem>
   15702:	4606      	mov	r6, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15704:	7800      	ldrb	r0, [r0, #0]
   15706:	f014 fcb2 	bl	2a06e <bt_hci_evt_get_flags>
   1570a:	4605      	mov	r5, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1570c:	f010 0f01 	tst.w	r0, #1
   15710:	d01f      	beq.n	15752 <hci_event_prio+0x76>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   15712:	2305      	movs	r3, #5
   15714:	4a17      	ldr	r2, [pc, #92]	; (15774 <hci_event_prio+0x98>)
   15716:	4621      	mov	r1, r4
   15718:	7830      	ldrb	r0, [r6, #0]
   1571a:	f7ff f813 	bl	14744 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1571e:	f015 0f02 	tst.w	r5, #2
   15722:	d023      	beq.n	1576c <hci_event_prio+0x90>
	buf->data = buf->__buf + state->offset;
   15724:	6923      	ldr	r3, [r4, #16]
   15726:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1572a:	4413      	add	r3, r2
   1572c:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   1572e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15732:	81a3      	strh	r3, [r4, #12]
}
   15734:	b002      	add	sp, #8
   15736:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15738:	f640 5277 	movw	r2, #3447	; 0xd77
   1573c:	490e      	ldr	r1, [pc, #56]	; (15778 <hci_event_prio+0x9c>)
   1573e:	480f      	ldr	r0, [pc, #60]	; (1577c <hci_event_prio+0xa0>)
   15740:	f013 fa65 	bl	28c0e <assert_print>
   15744:	4040      	eors	r0, r0
   15746:	f380 8811 	msr	BASEPRI, r0
   1574a:	f04f 0003 	mov.w	r0, #3
   1574e:	df02      	svc	2
   15750:	e7d3      	b.n	156fa <hci_event_prio+0x1e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15752:	f640 527b 	movw	r2, #3451	; 0xd7b
   15756:	4908      	ldr	r1, [pc, #32]	; (15778 <hci_event_prio+0x9c>)
   15758:	4808      	ldr	r0, [pc, #32]	; (1577c <hci_event_prio+0xa0>)
   1575a:	f013 fa58 	bl	28c0e <assert_print>
   1575e:	4040      	eors	r0, r0
   15760:	f380 8811 	msr	BASEPRI, r0
   15764:	f04f 0003 	mov.w	r0, #3
   15768:	df02      	svc	2
   1576a:	e7d2      	b.n	15712 <hci_event_prio+0x36>
		net_buf_unref(buf);
   1576c:	4620      	mov	r0, r4
   1576e:	f007 fa1d 	bl	1cbac <net_buf_unref>
}
   15772:	e7df      	b.n	15734 <hci_event_prio+0x58>
   15774:	00031444 	.word	0x00031444
   15778:	00031028 	.word	0x00031028
   1577c:	00030128 	.word	0x00030128

00015780 <bt_recv>:
{
   15780:	b538      	push	{r3, r4, r5, lr}
   15782:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15784:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   15786:	2a01      	cmp	r2, #1
   15788:	d005      	beq.n	15796 <bt_recv+0x16>
   1578a:	2a03      	cmp	r2, #3
   1578c:	d119      	bne.n	157c2 <bt_recv+0x42>
		rx_queue_put(buf);
   1578e:	f7ff f83f 	bl	14810 <rx_queue_put>
		return 0;
   15792:	2000      	movs	r0, #0
}
   15794:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   15796:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15798:	7818      	ldrb	r0, [r3, #0]
   1579a:	f014 fc68 	bl	2a06e <bt_hci_evt_get_flags>
   1579e:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   157a0:	f010 0f01 	tst.w	r0, #1
   157a4:	d104      	bne.n	157b0 <bt_recv+0x30>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   157a6:	f015 0f02 	tst.w	r5, #2
   157aa:	d105      	bne.n	157b8 <bt_recv+0x38>
		return 0;
   157ac:	2000      	movs	r0, #0
   157ae:	e7f1      	b.n	15794 <bt_recv+0x14>
			hci_event_prio(buf);
   157b0:	4620      	mov	r0, r4
   157b2:	f7ff ff93 	bl	156dc <hci_event_prio>
   157b6:	e7f6      	b.n	157a6 <bt_recv+0x26>
			rx_queue_put(buf);
   157b8:	4620      	mov	r0, r4
   157ba:	f7ff f829 	bl	14810 <rx_queue_put>
		return 0;
   157be:	2000      	movs	r0, #0
   157c0:	e7e8      	b.n	15794 <bt_recv+0x14>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   157c2:	2145      	movs	r1, #69	; 0x45
   157c4:	4804      	ldr	r0, [pc, #16]	; (157d8 <bt_recv+0x58>)
   157c6:	f013 fa42 	bl	28c4e <z_log_minimal_printk>
		net_buf_unref(buf);
   157ca:	4620      	mov	r0, r4
   157cc:	f007 f9ee 	bl	1cbac <net_buf_unref>
		return -EINVAL;
   157d0:	f06f 0015 	mvn.w	r0, #21
   157d4:	e7de      	b.n	15794 <bt_recv+0x14>
   157d6:	bf00      	nop
   157d8:	000313a0 	.word	0x000313a0

000157dc <bt_hci_driver_register>:
	if (bt_dev.drv) {
   157dc:	4b0a      	ldr	r3, [pc, #40]	; (15808 <bt_hci_driver_register+0x2c>)
   157de:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   157e2:	b943      	cbnz	r3, 157f6 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   157e4:	68c3      	ldr	r3, [r0, #12]
   157e6:	b14b      	cbz	r3, 157fc <bt_hci_driver_register+0x20>
   157e8:	6943      	ldr	r3, [r0, #20]
   157ea:	b153      	cbz	r3, 15802 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   157ec:	4b06      	ldr	r3, [pc, #24]	; (15808 <bt_hci_driver_register+0x2c>)
   157ee:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
	return 0;
   157f2:	2000      	movs	r0, #0
   157f4:	4770      	bx	lr
		return -EALREADY;
   157f6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   157fa:	4770      	bx	lr
		return -EINVAL;
   157fc:	f06f 0015 	mvn.w	r0, #21
   15800:	4770      	bx	lr
   15802:	f06f 0015 	mvn.w	r0, #21
}
   15806:	4770      	bx	lr
   15808:	20000380 	.word	0x20000380

0001580c <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1580c:	4b06      	ldr	r3, [pc, #24]	; (15828 <bt_finalize_init+0x1c>)
   1580e:	f3bf 8f5b 	dmb	ish
   15812:	e853 1f00 	ldrex	r1, [r3]
   15816:	f041 0104 	orr.w	r1, r1, #4
   1581a:	e843 1200 	strex	r2, r1, [r3]
   1581e:	2a00      	cmp	r2, #0
   15820:	d1f7      	bne.n	15812 <bt_finalize_init+0x6>
   15822:	f3bf 8f5b 	dmb	ish
}
   15826:	4770      	bx	lr
   15828:	2000044c 	.word	0x2000044c

0001582c <bt_init>:
{
   1582c:	b510      	push	{r4, lr}
	err = hci_init();
   1582e:	f7ff fb6d 	bl	14f0c <hci_init>
	if (err) {
   15832:	4604      	mov	r4, r0
   15834:	b9a8      	cbnz	r0, 15862 <bt_init+0x36>
		err = bt_conn_init();
   15836:	f002 f841 	bl	178bc <bt_conn_init>
		if (err) {
   1583a:	4604      	mov	r4, r0
   1583c:	b988      	cbnz	r0, 15862 <bt_init+0x36>
		if (!bt_dev.id_count) {
   1583e:	4b0c      	ldr	r3, [pc, #48]	; (15870 <bt_init+0x44>)
   15840:	79db      	ldrb	r3, [r3, #7]
   15842:	b183      	cbz	r3, 15866 <bt_init+0x3a>
   15844:	4b0b      	ldr	r3, [pc, #44]	; (15874 <bt_init+0x48>)
   15846:	f3bf 8f5b 	dmb	ish
   1584a:	e853 1f00 	ldrex	r1, [r3]
   1584e:	f041 0108 	orr.w	r1, r1, #8
   15852:	e843 1200 	strex	r2, r1, [r3]
   15856:	2a00      	cmp	r2, #0
   15858:	d1f7      	bne.n	1584a <bt_init+0x1e>
   1585a:	f3bf 8f5b 	dmb	ish
	bt_finalize_init();
   1585e:	f7ff ffd5 	bl	1580c <bt_finalize_init>
}
   15862:	4620      	mov	r0, r4
   15864:	bd10      	pop	{r4, pc}
			BT_INFO("No ID address. App must call settings_load()");
   15866:	2149      	movs	r1, #73	; 0x49
   15868:	4803      	ldr	r0, [pc, #12]	; (15878 <bt_init+0x4c>)
   1586a:	f013 f9f0 	bl	28c4e <z_log_minimal_printk>
			return 0;
   1586e:	e7f8      	b.n	15862 <bt_init+0x36>
   15870:	20000380 	.word	0x20000380
   15874:	2000044c 	.word	0x2000044c
   15878:	000313bc 	.word	0x000313bc

0001587c <init_work>:
{
   1587c:	b508      	push	{r3, lr}
	err = bt_init();
   1587e:	f7ff ffd5 	bl	1582c <bt_init>
	if (ready_cb) {
   15882:	4b02      	ldr	r3, [pc, #8]	; (1588c <init_work+0x10>)
   15884:	681b      	ldr	r3, [r3, #0]
   15886:	b103      	cbz	r3, 1588a <init_work+0xe>
		ready_cb(err);
   15888:	4798      	blx	r3
}
   1588a:	bd08      	pop	{r3, pc}
   1588c:	20002958 	.word	0x20002958

00015890 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   15890:	b5f0      	push	{r4, r5, r6, r7, lr}
   15892:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
   15894:	4b3d      	ldr	r3, [pc, #244]	; (1598c <bt_enable+0xfc>)
   15896:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   1589a:	b31b      	cbz	r3, 158e4 <bt_enable+0x54>
   1589c:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1589e:	4b3c      	ldr	r3, [pc, #240]	; (15990 <bt_enable+0x100>)
   158a0:	f3bf 8f5b 	dmb	ish
   158a4:	e853 2f00 	ldrex	r2, [r3]
   158a8:	f022 0202 	bic.w	r2, r2, #2
   158ac:	e843 2100 	strex	r1, r2, [r3]
   158b0:	2900      	cmp	r1, #0
   158b2:	d1f7      	bne.n	158a4 <bt_enable+0x14>
   158b4:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   158b8:	f3bf 8f5b 	dmb	ish
   158bc:	e853 2f00 	ldrex	r2, [r3]
   158c0:	f042 0101 	orr.w	r1, r2, #1
   158c4:	e843 1000 	strex	r0, r1, [r3]
   158c8:	2800      	cmp	r0, #0
   158ca:	d1f7      	bne.n	158bc <bt_enable+0x2c>
   158cc:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   158d0:	f012 0f01 	tst.w	r2, #1
   158d4:	d156      	bne.n	15984 <bt_enable+0xf4>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   158d6:	f7fe fb7d 	bl	13fd4 <bt_settings_init>
		if (err) {
   158da:	4604      	mov	r4, r0
   158dc:	b148      	cbz	r0, 158f2 <bt_enable+0x62>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   158de:	4620      	mov	r0, r4
   158e0:	b009      	add	sp, #36	; 0x24
   158e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No HCI driver registered");
   158e4:	2145      	movs	r1, #69	; 0x45
   158e6:	482b      	ldr	r0, [pc, #172]	; (15994 <bt_enable+0x104>)
   158e8:	f013 f9b1 	bl	28c4e <z_log_minimal_printk>
		return -ENODEV;
   158ec:	f06f 0412 	mvn.w	r4, #18
   158f0:	e7f5      	b.n	158de <bt_enable+0x4e>
	ready_cb = cb;
   158f2:	4b29      	ldr	r3, [pc, #164]	; (15998 <bt_enable+0x108>)
   158f4:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   158f6:	4e29      	ldr	r6, [pc, #164]	; (1599c <bt_enable+0x10c>)
   158f8:	2201      	movs	r2, #1
   158fa:	4611      	mov	r1, r2
   158fc:	4630      	mov	r0, r6
   158fe:	f019 fc8f 	bl	2f220 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   15902:	f106 0024 	add.w	r0, r6, #36	; 0x24
   15906:	f019 fc67 	bl	2f1d8 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1590a:	4f25      	ldr	r7, [pc, #148]	; (159a0 <bt_enable+0x110>)
   1590c:	2200      	movs	r2, #0
   1590e:	2300      	movs	r3, #0
   15910:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15914:	2400      	movs	r4, #0
   15916:	9404      	str	r4, [sp, #16]
   15918:	f06f 0308 	mvn.w	r3, #8
   1591c:	9303      	str	r3, [sp, #12]
   1591e:	9402      	str	r4, [sp, #8]
   15920:	9401      	str	r4, [sp, #4]
   15922:	9400      	str	r4, [sp, #0]
   15924:	4b1f      	ldr	r3, [pc, #124]	; (159a4 <bt_enable+0x114>)
   15926:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1592a:	491f      	ldr	r1, [pc, #124]	; (159a8 <bt_enable+0x118>)
   1592c:	4638      	mov	r0, r7
   1592e:	f00c fb8d 	bl	2204c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15932:	491e      	ldr	r1, [pc, #120]	; (159ac <bt_enable+0x11c>)
   15934:	4638      	mov	r0, r7
   15936:	f00c fa55 	bl	21de4 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1593a:	4f1d      	ldr	r7, [pc, #116]	; (159b0 <bt_enable+0x120>)
   1593c:	4638      	mov	r0, r7
   1593e:	f00d fa6d 	bl	22e1c <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   15942:	9400      	str	r4, [sp, #0]
   15944:	f06f 0307 	mvn.w	r3, #7
   15948:	f640 0298 	movw	r2, #2200	; 0x898
   1594c:	4919      	ldr	r1, [pc, #100]	; (159b4 <bt_enable+0x124>)
   1594e:	4638      	mov	r0, r7
   15950:	f00d fa7c 	bl	22e4c <k_work_queue_start>
   15954:	4918      	ldr	r1, [pc, #96]	; (159b8 <bt_enable+0x128>)
   15956:	4638      	mov	r0, r7
   15958:	f00c fa44 	bl	21de4 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1595c:	6c33      	ldr	r3, [r6, #64]	; 0x40
   1595e:	68db      	ldr	r3, [r3, #12]
   15960:	4798      	blx	r3
	if (err) {
   15962:	4604      	mov	r4, r0
   15964:	b920      	cbnz	r0, 15970 <bt_enable+0xe0>
	if (!cb) {
   15966:	b14d      	cbz	r5, 1597c <bt_enable+0xec>
	k_work_submit(&bt_dev.init);
   15968:	4814      	ldr	r0, [pc, #80]	; (159bc <bt_enable+0x12c>)
   1596a:	f00d fa4f 	bl	22e0c <k_work_submit>
	return 0;
   1596e:	e7b6      	b.n	158de <bt_enable+0x4e>
		BT_ERR("HCI driver open failed (%d)", err);
   15970:	4602      	mov	r2, r0
   15972:	2145      	movs	r1, #69	; 0x45
   15974:	4812      	ldr	r0, [pc, #72]	; (159c0 <bt_enable+0x130>)
   15976:	f013 f96a 	bl	28c4e <z_log_minimal_printk>
		return err;
   1597a:	e7b0      	b.n	158de <bt_enable+0x4e>
		return bt_init();
   1597c:	f7ff ff56 	bl	1582c <bt_init>
   15980:	4604      	mov	r4, r0
   15982:	e7ac      	b.n	158de <bt_enable+0x4e>
		return -EALREADY;
   15984:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15988:	e7a9      	b.n	158de <bt_enable+0x4e>
   1598a:	bf00      	nop
   1598c:	20000380 	.word	0x20000380
   15990:	2000044c 	.word	0x2000044c
   15994:	000313f0 	.word	0x000313f0
   15998:	20002958 	.word	0x20002958
   1599c:	200004a0 	.word	0x200004a0
   159a0:	20001990 	.word	0x20001990
   159a4:	0001567d 	.word	0x0001567d
   159a8:	20004b80 	.word	0x20004b80
   159ac:	00031410 	.word	0x00031410
   159b0:	20001a48 	.word	0x20001a48
   159b4:	200051c0 	.word	0x200051c0
   159b8:	00031418 	.word	0x00031418
   159bc:	2000043c 	.word	0x2000043c
   159c0:	00031420 	.word	0x00031420

000159c4 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   159c4:	f3bf 8f5b 	dmb	ish
   159c8:	4b03      	ldr	r3, [pc, #12]	; (159d8 <bt_is_ready+0x14>)
   159ca:	6818      	ldr	r0, [r3, #0]
   159cc:	f3bf 8f5b 	dmb	ish
   159d0:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   159d4:	4770      	bx	lr
   159d6:	bf00      	nop
   159d8:	2000044c 	.word	0x2000044c

000159dc <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   159dc:	4800      	ldr	r0, [pc, #0]	; (159e0 <bt_get_name+0x4>)
   159de:	4770      	bx	lr
   159e0:	00030000 	.word	0x00030000

000159e4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   159e4:	b570      	push	{r4, r5, r6, lr}
   159e6:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   159e8:	2400      	movs	r4, #0
   159ea:	e001      	b.n	159f0 <id_find+0xc>
   159ec:	3401      	adds	r4, #1
   159ee:	b2e4      	uxtb	r4, r4
   159f0:	4b09      	ldr	r3, [pc, #36]	; (15a18 <id_find+0x34>)
   159f2:	79db      	ldrb	r3, [r3, #7]
   159f4:	42a3      	cmp	r3, r4
   159f6:	d90b      	bls.n	15a10 <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   159f8:	4626      	mov	r6, r4
   159fa:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   159fe:	2207      	movs	r2, #7
   15a00:	4b05      	ldr	r3, [pc, #20]	; (15a18 <id_find+0x34>)
   15a02:	4419      	add	r1, r3
   15a04:	4628      	mov	r0, r5
   15a06:	f014 f99c 	bl	29d42 <memcmp>
   15a0a:	2800      	cmp	r0, #0
   15a0c:	d1ee      	bne.n	159ec <id_find+0x8>
   15a0e:	e001      	b.n	15a14 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   15a10:	f06f 0601 	mvn.w	r6, #1
}
   15a14:	4630      	mov	r0, r6
   15a16:	bd70      	pop	{r4, r5, r6, pc}
   15a18:	20000380 	.word	0x20000380

00015a1c <set_random_address>:
{
   15a1c:	b570      	push	{r4, r5, r6, lr}
   15a1e:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   15a20:	2206      	movs	r2, #6
   15a22:	4914      	ldr	r1, [pc, #80]	; (15a74 <set_random_address+0x58>)
   15a24:	f014 f98d 	bl	29d42 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   15a28:	4605      	mov	r5, r0
   15a2a:	b908      	cbnz	r0, 15a30 <set_random_address+0x14>
}
   15a2c:	4628      	mov	r0, r5
   15a2e:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   15a30:	2106      	movs	r1, #6
   15a32:	f242 0005 	movw	r0, #8197	; 0x2005
   15a36:	f7fe ffdf 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   15a3a:	4605      	mov	r5, r0
   15a3c:	b1b8      	cbz	r0, 15a6e <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15a3e:	2206      	movs	r2, #6
   15a40:	4621      	mov	r1, r4
   15a42:	3008      	adds	r0, #8
   15a44:	f017 fcc1 	bl	2d3ca <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   15a48:	2200      	movs	r2, #0
   15a4a:	4629      	mov	r1, r5
   15a4c:	f242 0005 	movw	r0, #8197	; 0x2005
   15a50:	f7ff f822 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   15a54:	4605      	mov	r5, r0
   15a56:	2800      	cmp	r0, #0
   15a58:	d1e8      	bne.n	15a2c <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   15a5a:	4e06      	ldr	r6, [pc, #24]	; (15a74 <set_random_address+0x58>)
   15a5c:	2206      	movs	r2, #6
   15a5e:	4621      	mov	r1, r4
   15a60:	4630      	mov	r0, r6
   15a62:	f014 f993 	bl	29d8c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   15a66:	2301      	movs	r3, #1
   15a68:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   15a6c:	e7de      	b.n	15a2c <set_random_address+0x10>
		return -ENOBUFS;
   15a6e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   15a72:	e7db      	b.n	15a2c <set_random_address+0x10>
   15a74:	200003e1 	.word	0x200003e1

00015a78 <find_rl_conflict>:
{
   15a78:	b570      	push	{r4, r5, r6, lr}
   15a7a:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   15a7c:	b161      	cbz	r1, 15a98 <find_rl_conflict+0x20>
   15a7e:	4604      	mov	r4, r0
   15a80:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   15a82:	6808      	ldr	r0, [r1, #0]
   15a84:	b1a0      	cbz	r0, 15ab0 <find_rl_conflict+0x38>
	__ASSERT_NO_MSG(resident != NULL);
   15a86:	b1fc      	cbz	r4, 15ac8 <find_rl_conflict+0x50>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   15a88:	7a03      	ldrb	r3, [r0, #8]
   15a8a:	f013 0f04 	tst.w	r3, #4
   15a8e:	d127      	bne.n	15ae0 <find_rl_conflict+0x68>
	if (conflict->found) {
   15a90:	684b      	ldr	r3, [r1, #4]
   15a92:	b38b      	cbz	r3, 15af8 <find_rl_conflict+0x80>
}
   15a94:	b006      	add	sp, #24
   15a96:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(conflict != NULL);
   15a98:	4c2e      	ldr	r4, [pc, #184]	; (15b54 <find_rl_conflict+0xdc>)
   15a9a:	f240 325b 	movw	r2, #859	; 0x35b
   15a9e:	4621      	mov	r1, r4
   15aa0:	482d      	ldr	r0, [pc, #180]	; (15b58 <find_rl_conflict+0xe0>)
   15aa2:	f013 f8b4 	bl	28c0e <assert_print>
   15aa6:	f240 315b 	movw	r1, #859	; 0x35b
   15aaa:	4620      	mov	r0, r4
   15aac:	f013 f8a8 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   15ab0:	4c28      	ldr	r4, [pc, #160]	; (15b54 <find_rl_conflict+0xdc>)
   15ab2:	f44f 7257 	mov.w	r2, #860	; 0x35c
   15ab6:	4621      	mov	r1, r4
   15ab8:	4827      	ldr	r0, [pc, #156]	; (15b58 <find_rl_conflict+0xe0>)
   15aba:	f013 f8a8 	bl	28c0e <assert_print>
   15abe:	f44f 7157 	mov.w	r1, #860	; 0x35c
   15ac2:	4620      	mov	r0, r4
   15ac4:	f013 f89c 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(resident != NULL);
   15ac8:	4c22      	ldr	r4, [pc, #136]	; (15b54 <find_rl_conflict+0xdc>)
   15aca:	f240 325d 	movw	r2, #861	; 0x35d
   15ace:	4621      	mov	r1, r4
   15ad0:	4821      	ldr	r0, [pc, #132]	; (15b58 <find_rl_conflict+0xe0>)
   15ad2:	f013 f89c 	bl	28c0e <assert_print>
   15ad6:	f240 315d 	movw	r1, #861	; 0x35d
   15ada:	4620      	mov	r0, r4
   15adc:	f013 f890 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   15ae0:	4c1c      	ldr	r4, [pc, #112]	; (15b54 <find_rl_conflict+0xdc>)
   15ae2:	f240 325f 	movw	r2, #863	; 0x35f
   15ae6:	4621      	mov	r1, r4
   15ae8:	481b      	ldr	r0, [pc, #108]	; (15b58 <find_rl_conflict+0xe0>)
   15aea:	f013 f890 	bl	28c0e <assert_print>
   15aee:	f240 315f 	movw	r1, #863	; 0x35f
   15af2:	4620      	mov	r0, r4
   15af4:	f013 f884 	bl	28c00 <assert_post_action>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   15af8:	7a23      	ldrb	r3, [r4, #8]
   15afa:	f013 0f04 	tst.w	r3, #4
   15afe:	d0c9      	beq.n	15a94 <find_rl_conflict+0x1c>
	return memcmp(a, b, sizeof(*a));
   15b00:	2207      	movs	r2, #7
   15b02:	1c61      	adds	r1, r4, #1
   15b04:	3001      	adds	r0, #1
   15b06:	f014 f91c 	bl	29d42 <memcmp>
   15b0a:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   15b0c:	6828      	ldr	r0, [r5, #0]
   15b0e:	2300      	movs	r3, #0
   15b10:	9300      	str	r3, [sp, #0]
   15b12:	9301      	str	r3, [sp, #4]
   15b14:	9302      	str	r3, [sp, #8]
   15b16:	9303      	str	r3, [sp, #12]
   15b18:	9304      	str	r3, [sp, #16]
   15b1a:	f8ad 3014 	strh.w	r3, [sp, #20]
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   15b1e:	2210      	movs	r2, #16
   15b20:	4669      	mov	r1, sp
   15b22:	302a      	adds	r0, #42	; 0x2a
   15b24:	f014 f90d 	bl	29d42 <memcmp>
   15b28:	4603      	mov	r3, r0
   15b2a:	b930      	cbnz	r0, 15b3a <find_rl_conflict+0xc2>
   15b2c:	f003 0301 	and.w	r3, r3, #1
	if (addr_conflict || irk_conflict) {
   15b30:	b10e      	cbz	r6, 15b36 <find_rl_conflict+0xbe>
   15b32:	2b00      	cmp	r3, #0
   15b34:	d0ae      	beq.n	15a94 <find_rl_conflict+0x1c>
		conflict->found = resident;
   15b36:	606c      	str	r4, [r5, #4]
   15b38:	e7ac      	b.n	15a94 <find_rl_conflict+0x1c>
			bt_irk_eq(&conflict->candidate->irk, &resident->irk));
   15b3a:	6828      	ldr	r0, [r5, #0]
   15b3c:	2210      	movs	r2, #16
   15b3e:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   15b42:	302a      	adds	r0, #42	; 0x2a
   15b44:	f014 f8fd 	bl	29d42 <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   15b48:	b908      	cbnz	r0, 15b4e <find_rl_conflict+0xd6>
   15b4a:	2301      	movs	r3, #1
   15b4c:	e7ee      	b.n	15b2c <find_rl_conflict+0xb4>
   15b4e:	2300      	movs	r3, #0
   15b50:	e7ec      	b.n	15b2c <find_rl_conflict+0xb4>
   15b52:	bf00      	nop
   15b54:	00031508 	.word	0x00031508
   15b58:	00030128 	.word	0x00030128

00015b5c <le_set_privacy_mode>:
{
   15b5c:	b510      	push	{r4, lr}
   15b5e:	b082      	sub	sp, #8
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   15b60:	4b15      	ldr	r3, [pc, #84]	; (15bb8 <le_set_privacy_mode+0x5c>)
   15b62:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   15b66:	f013 0f04 	tst.w	r3, #4
   15b6a:	d01b      	beq.n	15ba4 <le_set_privacy_mode+0x48>
   15b6c:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
   15b6e:	2207      	movs	r2, #7
   15b70:	4601      	mov	r1, r0
   15b72:	4668      	mov	r0, sp
   15b74:	f014 f90a 	bl	29d8c <memcpy>
	cp.mode = mode;
   15b78:	f88d 4007 	strb.w	r4, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   15b7c:	2108      	movs	r1, #8
   15b7e:	f242 004e 	movw	r0, #8270	; 0x204e
   15b82:	f7fe ff39 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   15b86:	4604      	mov	r4, r0
   15b88:	b190      	cbz	r0, 15bb0 <le_set_privacy_mode+0x54>
   15b8a:	2208      	movs	r2, #8
   15b8c:	4669      	mov	r1, sp
   15b8e:	4410      	add	r0, r2
   15b90:	f017 fc1b 	bl	2d3ca <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   15b94:	2200      	movs	r2, #0
   15b96:	4621      	mov	r1, r4
   15b98:	f242 004e 	movw	r0, #8270	; 0x204e
   15b9c:	f7fe ff7c 	bl	14a98 <bt_hci_cmd_send_sync>
}
   15ba0:	b002      	add	sp, #8
   15ba2:	bd10      	pop	{r4, pc}
		BT_WARN("Set privacy mode command is not supported");
   15ba4:	2157      	movs	r1, #87	; 0x57
   15ba6:	4805      	ldr	r0, [pc, #20]	; (15bbc <le_set_privacy_mode+0x60>)
   15ba8:	f013 f851 	bl	28c4e <z_log_minimal_printk>
		return 0;
   15bac:	2000      	movs	r0, #0
   15bae:	e7f7      	b.n	15ba0 <le_set_privacy_mode+0x44>
		return -ENOBUFS;
   15bb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15bb4:	e7f4      	b.n	15ba0 <le_set_privacy_mode+0x44>
   15bb6:	bf00      	nop
   15bb8:	20000380 	.word	0x20000380
   15bbc:	00031538 	.word	0x00031538

00015bc0 <bt_id_pending_keys_update_set>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15bc0:	4b08      	ldr	r3, [pc, #32]	; (15be4 <bt_id_pending_keys_update_set+0x24>)
   15bc2:	f3bf 8f5b 	dmb	ish
   15bc6:	e853 cf00 	ldrex	ip, [r3]
   15bca:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
   15bce:	e843 c200 	strex	r2, ip, [r3]
   15bd2:	2a00      	cmp	r2, #0
   15bd4:	d1f7      	bne.n	15bc6 <bt_id_pending_keys_update_set+0x6>
   15bd6:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   15bda:	7a03      	ldrb	r3, [r0, #8]
   15bdc:	4319      	orrs	r1, r3
   15bde:	7201      	strb	r1, [r0, #8]
}
   15be0:	4770      	bx	lr
   15be2:	bf00      	nop
   15be4:	2000044c 	.word	0x2000044c

00015be8 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   15be8:	b530      	push	{r4, r5, lr}
   15bea:	b083      	sub	sp, #12
   15bec:	4604      	mov	r4, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   15bee:	460d      	mov	r5, r1
   15bf0:	b129      	cbz	r1, 15bfe <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   15bf2:	2207      	movs	r2, #7
   15bf4:	491c      	ldr	r1, [pc, #112]	; (15c68 <id_create+0x80>)
   15bf6:	4628      	mov	r0, r5
   15bf8:	f014 f8a3 	bl	29d42 <memcmp>
   15bfc:	bb30      	cbnz	r0, 15c4c <id_create+0x64>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   15bfe:	4668      	mov	r0, sp
   15c00:	f014 f9fd 	bl	29ffe <bt_addr_le_create_static>
			if (err) {
   15c04:	4603      	mov	r3, r0
   15c06:	b9f0      	cbnz	r0, 15c46 <id_create+0x5e>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   15c08:	4668      	mov	r0, sp
   15c0a:	f7ff feeb 	bl	159e4 <id_find>
   15c0e:	2800      	cmp	r0, #0
   15c10:	daf5      	bge.n	15bfe <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   15c12:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15c16:	4b15      	ldr	r3, [pc, #84]	; (15c6c <id_create+0x84>)
   15c18:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   15c1a:	2207      	movs	r2, #7
   15c1c:	4669      	mov	r1, sp
   15c1e:	4620      	mov	r0, r4
   15c20:	f014 f8b4 	bl	29d8c <memcpy>

		if (addr) {
   15c24:	b125      	cbz	r5, 15c30 <id_create+0x48>
   15c26:	2207      	movs	r2, #7
   15c28:	4621      	mov	r1, r4
   15c2a:	4628      	mov	r0, r5
   15c2c:	f014 f8ae 	bl	29d8c <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15c30:	f3bf 8f5b 	dmb	ish
   15c34:	4b0e      	ldr	r3, [pc, #56]	; (15c70 <id_create+0x88>)
   15c36:	681a      	ldr	r2, [r3, #0]
   15c38:	f3bf 8f5b 	dmb	ish
   15c3c:	f3c2 0380 	ubfx	r3, r2, #2, #1
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   15c40:	f012 0f04 	tst.w	r2, #4
   15c44:	d10b      	bne.n	15c5e <id_create+0x76>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   15c46:	4618      	mov	r0, r3
   15c48:	b003      	add	sp, #12
   15c4a:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   15c4c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15c50:	2207      	movs	r2, #7
   15c52:	4629      	mov	r1, r5
   15c54:	4805      	ldr	r0, [pc, #20]	; (15c6c <id_create+0x84>)
   15c56:	4420      	add	r0, r4
   15c58:	f014 f898 	bl	29d8c <memcpy>
}
   15c5c:	e7e8      	b.n	15c30 <id_create+0x48>
		bt_settings_save_id();
   15c5e:	f7fe f963 	bl	13f28 <bt_settings_save_id>
	return 0;
   15c62:	2300      	movs	r3, #0
   15c64:	e7ef      	b.n	15c46 <id_create+0x5e>
   15c66:	bf00      	nop
   15c68:	00030c24 	.word	0x00030c24
   15c6c:	20000380 	.word	0x20000380
   15c70:	2000044c 	.word	0x2000044c

00015c74 <bt_id_pending_keys_update>:
{
   15c74:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15c76:	4b0b      	ldr	r3, [pc, #44]	; (15ca4 <bt_id_pending_keys_update+0x30>)
   15c78:	f3bf 8f5b 	dmb	ish
   15c7c:	e853 2f00 	ldrex	r2, [r3]
   15c80:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   15c84:	e843 1000 	strex	r0, r1, [r3]
   15c88:	2800      	cmp	r0, #0
   15c8a:	d1f7      	bne.n	15c7c <bt_id_pending_keys_update+0x8>
   15c8c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   15c90:	f412 4f00 	tst.w	r2, #32768	; 0x8000
   15c94:	d100      	bne.n	15c98 <bt_id_pending_keys_update+0x24>
}
   15c96:	bd08      	pop	{r3, pc}
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   15c98:	2200      	movs	r2, #0
   15c9a:	4903      	ldr	r1, [pc, #12]	; (15ca8 <bt_id_pending_keys_update+0x34>)
   15c9c:	2002      	movs	r0, #2
   15c9e:	f006 facb 	bl	1c238 <bt_keys_foreach_type>
}
   15ca2:	e7f8      	b.n	15c96 <bt_id_pending_keys_update+0x22>
   15ca4:	2000044c 	.word	0x2000044c
   15ca8:	0002a581 	.word	0x0002a581

00015cac <bt_id_find_conflict>:
{
   15cac:	b500      	push	{lr}
   15cae:	b083      	sub	sp, #12
	struct bt_id_conflict conflict = {
   15cb0:	2300      	movs	r3, #0
   15cb2:	9300      	str	r3, [sp, #0]
   15cb4:	9301      	str	r3, [sp, #4]
   15cb6:	9000      	str	r0, [sp, #0]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   15cb8:	466a      	mov	r2, sp
   15cba:	4904      	ldr	r1, [pc, #16]	; (15ccc <bt_id_find_conflict+0x20>)
   15cbc:	2002      	movs	r0, #2
   15cbe:	f006 fabb 	bl	1c238 <bt_keys_foreach_type>
}
   15cc2:	9801      	ldr	r0, [sp, #4]
   15cc4:	b003      	add	sp, #12
   15cc6:	f85d fb04 	ldr.w	pc, [sp], #4
   15cca:	bf00      	nop
   15ccc:	00015a79 	.word	0x00015a79

00015cd0 <bt_id_add>:
	CHECKIF(keys == NULL) {
   15cd0:	2800      	cmp	r0, #0
   15cd2:	f000 8083 	beq.w	15ddc <bt_id_add+0x10c>
{
   15cd6:	b538      	push	{r3, r4, r5, lr}
   15cd8:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   15cda:	4b41      	ldr	r3, [pc, #260]	; (15de0 <bt_id_add+0x110>)
   15cdc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   15ce0:	b123      	cbz	r3, 15cec <bt_id_add+0x1c>
   15ce2:	4a3f      	ldr	r2, [pc, #252]	; (15de0 <bt_id_add+0x110>)
   15ce4:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
   15ce8:	4293      	cmp	r3, r2
   15cea:	d20a      	bcs.n	15d02 <bt_id_add+0x32>
		bt_dev.le.rl_entries++;
   15cec:	4a3c      	ldr	r2, [pc, #240]	; (15de0 <bt_id_add+0x110>)
   15cee:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   15cf2:	3301      	adds	r3, #1
   15cf4:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   15cf8:	7a23      	ldrb	r3, [r4, #8]
   15cfa:	f043 0304 	orr.w	r3, r3, #4
   15cfe:	7223      	strb	r3, [r4, #8]
}
   15d00:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   15d02:	2206      	movs	r2, #6
   15d04:	2100      	movs	r1, #0
   15d06:	4608      	mov	r0, r1
   15d08:	f001 fc30 	bl	1756c <bt_conn_lookup_state_le>
	if (conn) {
   15d0c:	4605      	mov	r5, r0
   15d0e:	b138      	cbz	r0, 15d20 <bt_id_add+0x50>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_ADD);
   15d10:	2101      	movs	r1, #1
   15d12:	4620      	mov	r0, r4
   15d14:	f7ff ff54 	bl	15bc0 <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   15d18:	4628      	mov	r0, r5
   15d1a:	f001 f981 	bl	17020 <bt_conn_unref>
		return;
   15d1e:	e7ef      	b.n	15d00 <bt_id_add+0x30>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   15d20:	2100      	movs	r1, #0
   15d22:	4830      	ldr	r0, [pc, #192]	; (15de4 <bt_id_add+0x114>)
   15d24:	f000 fb8e 	bl	16444 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   15d28:	4b2d      	ldr	r3, [pc, #180]	; (15de0 <bt_id_add+0x110>)
   15d2a:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   15d2e:	bb33      	cbnz	r3, 15d7e <bt_id_add+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   15d30:	4b2b      	ldr	r3, [pc, #172]	; (15de0 <bt_id_add+0x110>)
   15d32:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
   15d36:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   15d3a:	429a      	cmp	r2, r3
   15d3c:	d029      	beq.n	15d92 <bt_id_add+0xc2>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   15d3e:	1c65      	adds	r5, r4, #1
   15d40:	4622      	mov	r2, r4
   15d42:	f812 0b2a 	ldrb.w	r0, [r2], #42
   15d46:	4629      	mov	r1, r5
   15d48:	f014 fb76 	bl	2a438 <hci_id_add>
	if (err) {
   15d4c:	2800      	cmp	r0, #0
   15d4e:	d13b      	bne.n	15dc8 <bt_id_add+0xf8>
	bt_dev.le.rl_entries++;
   15d50:	4a23      	ldr	r2, [pc, #140]	; (15de0 <bt_id_add+0x110>)
   15d52:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   15d56:	3301      	adds	r3, #1
   15d58:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   15d5c:	7a23      	ldrb	r3, [r4, #8]
   15d5e:	f043 0304 	orr.w	r3, r3, #4
   15d62:	7223      	strb	r3, [r4, #8]
	err = le_set_privacy_mode(&keys->addr, BT_HCI_LE_PRIVACY_MODE_DEVICE);
   15d64:	2101      	movs	r1, #1
   15d66:	4628      	mov	r0, r5
   15d68:	f7ff fef8 	bl	15b5c <le_set_privacy_mode>
	if (err) {
   15d6c:	bb88      	cbnz	r0, 15dd2 <bt_id_add+0x102>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   15d6e:	2001      	movs	r0, #1
   15d70:	f014 fbb7 	bl	2a4e2 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   15d74:	2100      	movs	r1, #0
   15d76:	481c      	ldr	r0, [pc, #112]	; (15de8 <bt_id_add+0x118>)
   15d78:	f000 fb64 	bl	16444 <bt_le_ext_adv_foreach>
   15d7c:	e7c0      	b.n	15d00 <bt_id_add+0x30>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   15d7e:	2000      	movs	r0, #0
   15d80:	f014 fbaf 	bl	2a4e2 <addr_res_enable>
		if (err) {
   15d84:	2800      	cmp	r0, #0
   15d86:	d0d3      	beq.n	15d30 <bt_id_add+0x60>
			BT_WARN("Failed to disable address resolution");
   15d88:	2157      	movs	r1, #87	; 0x57
   15d8a:	4818      	ldr	r0, [pc, #96]	; (15dec <bt_id_add+0x11c>)
   15d8c:	f012 ff5f 	bl	28c4e <z_log_minimal_printk>
			goto done;
   15d90:	e7ed      	b.n	15d6e <bt_id_add+0x9e>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   15d92:	2157      	movs	r1, #87	; 0x57
   15d94:	4816      	ldr	r0, [pc, #88]	; (15df0 <bt_id_add+0x120>)
   15d96:	f012 ff5a 	bl	28c4e <z_log_minimal_printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   15d9a:	2200      	movs	r2, #0
   15d9c:	4611      	mov	r1, r2
   15d9e:	f242 0029 	movw	r0, #8233	; 0x2029
   15da2:	f7fe fe79 	bl	14a98 <bt_hci_cmd_send_sync>
		if (err) {
   15da6:	b950      	cbnz	r0, 15dbe <bt_id_add+0xee>
		bt_dev.le.rl_entries++;
   15da8:	4a0d      	ldr	r2, [pc, #52]	; (15de0 <bt_id_add+0x110>)
   15daa:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   15dae:	3301      	adds	r3, #1
   15db0:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   15db4:	7a23      	ldrb	r3, [r4, #8]
   15db6:	f043 0304 	orr.w	r3, r3, #4
   15dba:	7223      	strb	r3, [r4, #8]
		goto done;
   15dbc:	e7d7      	b.n	15d6e <bt_id_add+0x9e>
			BT_ERR("Failed to clear resolution list");
   15dbe:	2145      	movs	r1, #69	; 0x45
   15dc0:	480c      	ldr	r0, [pc, #48]	; (15df4 <bt_id_add+0x124>)
   15dc2:	f012 ff44 	bl	28c4e <z_log_minimal_printk>
			goto done;
   15dc6:	e7d2      	b.n	15d6e <bt_id_add+0x9e>
		BT_ERR("Failed to add IRK to controller");
   15dc8:	2145      	movs	r1, #69	; 0x45
   15dca:	480b      	ldr	r0, [pc, #44]	; (15df8 <bt_id_add+0x128>)
   15dcc:	f012 ff3f 	bl	28c4e <z_log_minimal_printk>
		goto done;
   15dd0:	e7cd      	b.n	15d6e <bt_id_add+0x9e>
		BT_ERR("Failed to set privacy mode");
   15dd2:	2145      	movs	r1, #69	; 0x45
   15dd4:	4809      	ldr	r0, [pc, #36]	; (15dfc <bt_id_add+0x12c>)
   15dd6:	f012 ff3a 	bl	28c4e <z_log_minimal_printk>
		goto done;
   15dda:	e7c8      	b.n	15d6e <bt_id_add+0x9e>
   15ddc:	4770      	bx	lr
   15dde:	bf00      	nop
   15de0:	20000380 	.word	0x20000380
   15de4:	0002a405 	.word	0x0002a405
   15de8:	0002a3eb 	.word	0x0002a3eb
   15dec:	00031568 	.word	0x00031568
   15df0:	00031594 	.word	0x00031594
   15df4:	000315cc 	.word	0x000315cc
   15df8:	000315f4 	.word	0x000315f4
   15dfc:	0003161c 	.word	0x0003161c

00015e00 <bt_id_del>:
	CHECKIF(keys == NULL) {
   15e00:	2800      	cmp	r0, #0
   15e02:	d076      	beq.n	15ef2 <bt_id_del+0xf2>
{
   15e04:	b538      	push	{r3, r4, r5, lr}
   15e06:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   15e08:	4b3a      	ldr	r3, [pc, #232]	; (15ef4 <bt_id_del+0xf4>)
   15e0a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   15e0e:	b12b      	cbz	r3, 15e1c <bt_id_del+0x1c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   15e10:	4a38      	ldr	r2, [pc, #224]	; (15ef4 <bt_id_del+0xf4>)
   15e12:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
   15e16:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
   15e18:	429a      	cmp	r2, r3
   15e1a:	dd18      	ble.n	15e4e <bt_id_del+0x4e>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   15e1c:	4b35      	ldr	r3, [pc, #212]	; (15ef4 <bt_id_del+0xf4>)
   15e1e:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   15e22:	b143      	cbz	r3, 15e36 <bt_id_del+0x36>
			bt_dev.le.rl_entries--;
   15e24:	3b01      	subs	r3, #1
   15e26:	4a33      	ldr	r2, [pc, #204]	; (15ef4 <bt_id_del+0xf4>)
   15e28:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   15e2c:	7a23      	ldrb	r3, [r4, #8]
   15e2e:	f023 0304 	bic.w	r3, r3, #4
   15e32:	7223      	strb	r3, [r4, #8]
}
   15e34:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   15e36:	4c30      	ldr	r4, [pc, #192]	; (15ef8 <bt_id_del+0xf8>)
   15e38:	f240 4222 	movw	r2, #1058	; 0x422
   15e3c:	4621      	mov	r1, r4
   15e3e:	482f      	ldr	r0, [pc, #188]	; (15efc <bt_id_del+0xfc>)
   15e40:	f012 fee5 	bl	28c0e <assert_print>
   15e44:	f240 4122 	movw	r1, #1058	; 0x422
   15e48:	4620      	mov	r0, r4
   15e4a:	f012 fed9 	bl	28c00 <assert_post_action>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   15e4e:	2206      	movs	r2, #6
   15e50:	2100      	movs	r1, #0
   15e52:	4608      	mov	r0, r1
   15e54:	f001 fb8a 	bl	1756c <bt_conn_lookup_state_le>
	if (conn) {
   15e58:	4605      	mov	r5, r0
   15e5a:	b138      	cbz	r0, 15e6c <bt_id_del+0x6c>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_DEL);
   15e5c:	2102      	movs	r1, #2
   15e5e:	4620      	mov	r0, r4
   15e60:	f7ff feae 	bl	15bc0 <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   15e64:	4628      	mov	r0, r5
   15e66:	f001 f8db 	bl	17020 <bt_conn_unref>
		return;
   15e6a:	e7e3      	b.n	15e34 <bt_id_del+0x34>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   15e6c:	2100      	movs	r1, #0
   15e6e:	4824      	ldr	r0, [pc, #144]	; (15f00 <bt_id_del+0x100>)
   15e70:	f000 fae8 	bl	16444 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   15e74:	2000      	movs	r0, #0
   15e76:	f014 fb34 	bl	2a4e2 <addr_res_enable>
	if (err) {
   15e7a:	4602      	mov	r2, r0
   15e7c:	b9e8      	cbnz	r0, 15eba <bt_id_del+0xba>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   15e7e:	4b1d      	ldr	r3, [pc, #116]	; (15ef4 <bt_id_del+0xf4>)
   15e80:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
   15e84:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   15e88:	429a      	cmp	r2, r3
   15e8a:	d81b      	bhi.n	15ec4 <bt_id_del+0xc4>
	err = hci_id_del(&keys->addr);
   15e8c:	1c60      	adds	r0, r4, #1
   15e8e:	f014 fb0d 	bl	2a4ac <hci_id_del>
	if (err) {
   15e92:	bb28      	cbnz	r0, 15ee0 <bt_id_del+0xe0>
	bt_dev.le.rl_entries--;
   15e94:	4a17      	ldr	r2, [pc, #92]	; (15ef4 <bt_id_del+0xf4>)
   15e96:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   15e9a:	3b01      	subs	r3, #1
   15e9c:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   15ea0:	7a23      	ldrb	r3, [r4, #8]
   15ea2:	f023 0304 	bic.w	r3, r3, #4
   15ea6:	7223      	strb	r3, [r4, #8]
	if (bt_dev.le.rl_entries) {
   15ea8:	4b12      	ldr	r3, [pc, #72]	; (15ef4 <bt_id_del+0xf4>)
   15eaa:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   15eae:	b9e3      	cbnz	r3, 15eea <bt_id_del+0xea>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   15eb0:	2100      	movs	r1, #0
   15eb2:	4814      	ldr	r0, [pc, #80]	; (15f04 <bt_id_del+0x104>)
   15eb4:	f000 fac6 	bl	16444 <bt_le_ext_adv_foreach>
   15eb8:	e7bc      	b.n	15e34 <bt_id_del+0x34>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   15eba:	2145      	movs	r1, #69	; 0x45
   15ebc:	4812      	ldr	r0, [pc, #72]	; (15f08 <bt_id_del+0x108>)
   15ebe:	f012 fec6 	bl	28c4e <z_log_minimal_printk>
		goto done;
   15ec2:	e7f1      	b.n	15ea8 <bt_id_del+0xa8>
		bt_dev.le.rl_entries--;
   15ec4:	3a01      	subs	r2, #1
   15ec6:	4b0b      	ldr	r3, [pc, #44]	; (15ef4 <bt_id_del+0xf4>)
   15ec8:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   15ecc:	7a23      	ldrb	r3, [r4, #8]
   15ece:	f023 0304 	bic.w	r3, r3, #4
   15ed2:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   15ed4:	2200      	movs	r2, #0
   15ed6:	490d      	ldr	r1, [pc, #52]	; (15f0c <bt_id_del+0x10c>)
   15ed8:	2002      	movs	r0, #2
   15eda:	f006 f9ad 	bl	1c238 <bt_keys_foreach_type>
		goto done;
   15ede:	e7e3      	b.n	15ea8 <bt_id_del+0xa8>
		BT_ERR("Failed to remove IRK from controller");
   15ee0:	2145      	movs	r1, #69	; 0x45
   15ee2:	480b      	ldr	r0, [pc, #44]	; (15f10 <bt_id_del+0x110>)
   15ee4:	f012 feb3 	bl	28c4e <z_log_minimal_printk>
		goto done;
   15ee8:	e7de      	b.n	15ea8 <bt_id_del+0xa8>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   15eea:	2001      	movs	r0, #1
   15eec:	f014 faf9 	bl	2a4e2 <addr_res_enable>
   15ef0:	e7de      	b.n	15eb0 <bt_id_del+0xb0>
   15ef2:	4770      	bx	lr
   15ef4:	20000380 	.word	0x20000380
   15ef8:	00031508 	.word	0x00031508
   15efc:	00030128 	.word	0x00030128
   15f00:	0002a405 	.word	0x0002a405
   15f04:	0002a3eb 	.word	0x0002a3eb
   15f08:	0003163c 	.word	0x0003163c
   15f0c:	0002a491 	.word	0x0002a491
   15f10:	00031670 	.word	0x00031670

00015f14 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   15f14:	b570      	push	{r4, r5, r6, lr}
   15f16:	b084      	sub	sp, #16
   15f18:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   15f1a:	4605      	mov	r5, r0
   15f1c:	b188      	cbz	r0, 15f42 <bt_id_create+0x2e>
	return memcmp(a, b, sizeof(*a));
   15f1e:	2207      	movs	r2, #7
   15f20:	4926      	ldr	r1, [pc, #152]	; (15fbc <bt_id_create+0xa8>)
   15f22:	f013 ff0e 	bl	29d42 <memcmp>
   15f26:	b160      	cbz	r0, 15f42 <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15f28:	782b      	ldrb	r3, [r5, #0]
   15f2a:	2b01      	cmp	r3, #1
   15f2c:	d133      	bne.n	15f96 <bt_id_create+0x82>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   15f2e:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15f30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15f34:	2bc0      	cmp	r3, #192	; 0xc0
   15f36:	d12e      	bne.n	15f96 <bt_id_create+0x82>
			BT_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   15f38:	4628      	mov	r0, r5
   15f3a:	f7ff fd53 	bl	159e4 <id_find>
   15f3e:	2800      	cmp	r0, #0
   15f40:	da33      	bge.n	15faa <bt_id_create+0x96>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   15f42:	2c00      	cmp	r4, #0
   15f44:	d134      	bne.n	15fb0 <bt_id_create+0x9c>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   15f46:	4b1e      	ldr	r3, [pc, #120]	; (15fc0 <bt_id_create+0xac>)
   15f48:	79db      	ldrb	r3, [r3, #7]
   15f4a:	2b01      	cmp	r3, #1
   15f4c:	d033      	beq.n	15fb6 <bt_id_create+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15f4e:	f3bf 8f5b 	dmb	ish
   15f52:	4b1c      	ldr	r3, [pc, #112]	; (15fc4 <bt_id_create+0xb0>)
   15f54:	681b      	ldr	r3, [r3, #0]
   15f56:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15f5a:	f013 0f01 	tst.w	r3, #1
   15f5e:	d10b      	bne.n	15f78 <bt_id_create+0x64>
		uint8_t zero_irk[16] = { 0 };
   15f60:	2300      	movs	r3, #0
   15f62:	9300      	str	r3, [sp, #0]
   15f64:	9301      	str	r3, [sp, #4]
   15f66:	9302      	str	r3, [sp, #8]
   15f68:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   15f6a:	b1dd      	cbz	r5, 15fa4 <bt_id_create+0x90>
   15f6c:	2207      	movs	r2, #7
   15f6e:	4913      	ldr	r1, [pc, #76]	; (15fbc <bt_id_create+0xa8>)
   15f70:	4628      	mov	r0, r5
   15f72:	f013 fee6 	bl	29d42 <memcmp>
   15f76:	b1a8      	cbz	r0, 15fa4 <bt_id_create+0x90>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   15f78:	4b11      	ldr	r3, [pc, #68]	; (15fc0 <bt_id_create+0xac>)
   15f7a:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   15f7c:	4622      	mov	r2, r4
   15f7e:	4629      	mov	r1, r5
   15f80:	4630      	mov	r0, r6
   15f82:	f7ff fe31 	bl	15be8 <id_create>
	if (err) {
   15f86:	b920      	cbnz	r0, 15f92 <bt_id_create+0x7e>
		return err;
	} else {
		bt_dev.id_count++;
   15f88:	4a0d      	ldr	r2, [pc, #52]	; (15fc0 <bt_id_create+0xac>)
   15f8a:	79d3      	ldrb	r3, [r2, #7]
   15f8c:	3301      	adds	r3, #1
   15f8e:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   15f90:	4630      	mov	r0, r6
}
   15f92:	b004      	add	sp, #16
   15f94:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Only static random identity address supported");
   15f96:	2145      	movs	r1, #69	; 0x45
   15f98:	480b      	ldr	r0, [pc, #44]	; (15fc8 <bt_id_create+0xb4>)
   15f9a:	f012 fe58 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   15f9e:	f06f 0015 	mvn.w	r0, #21
   15fa2:	e7f6      	b.n	15f92 <bt_id_create+0x7e>
			return -EINVAL;
   15fa4:	f06f 0015 	mvn.w	r0, #21
   15fa8:	e7f3      	b.n	15f92 <bt_id_create+0x7e>
			return -EALREADY;
   15faa:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15fae:	e7f0      	b.n	15f92 <bt_id_create+0x7e>
		return -EINVAL;
   15fb0:	f06f 0015 	mvn.w	r0, #21
   15fb4:	e7ed      	b.n	15f92 <bt_id_create+0x7e>
		return -ENOMEM;
   15fb6:	f06f 000b 	mvn.w	r0, #11
   15fba:	e7ea      	b.n	15f92 <bt_id_create+0x7e>
   15fbc:	00030c24 	.word	0x00030c24
   15fc0:	20000380 	.word	0x20000380
   15fc4:	2000044c 	.word	0x2000044c
   15fc8:	0003169c 	.word	0x0003169c

00015fcc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   15fcc:	b530      	push	{r4, r5, lr}
   15fce:	b083      	sub	sp, #12
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   15fd0:	b1e0      	cbz	r0, 1600c <bt_id_read_public_addr+0x40>
   15fd2:	4605      	mov	r5, r0
		BT_WARN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   15fd4:	aa01      	add	r2, sp, #4
   15fd6:	2100      	movs	r1, #0
   15fd8:	f241 0009 	movw	r0, #4105	; 0x1009
   15fdc:	f7fe fd5c 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   15fe0:	b9d0      	cbnz	r0, 16018 <bt_id_read_public_addr+0x4c>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   15fe2:	9b01      	ldr	r3, [sp, #4]
   15fe4:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15fe6:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   15fe8:	2206      	movs	r2, #6
   15fea:	4914      	ldr	r1, [pc, #80]	; (1603c <bt_id_read_public_addr+0x70>)
   15fec:	4620      	mov	r0, r4
   15fee:	f013 fea8 	bl	29d42 <memcmp>
   15ff2:	b128      	cbz	r0, 16000 <bt_id_read_public_addr+0x34>
   15ff4:	2206      	movs	r2, #6
   15ff6:	4912      	ldr	r1, [pc, #72]	; (16040 <bt_id_read_public_addr+0x74>)
   15ff8:	4620      	mov	r0, r4
   15ffa:	f013 fea2 	bl	29d42 <memcmp>
   15ffe:	b988      	cbnz	r0, 16024 <bt_id_read_public_addr+0x58>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   16000:	9801      	ldr	r0, [sp, #4]
   16002:	f006 fdd3 	bl	1cbac <net_buf_unref>
		return 0U;
   16006:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   16008:	b003      	add	sp, #12
   1600a:	bd30      	pop	{r4, r5, pc}
		BT_WARN("Invalid input parameters");
   1600c:	2157      	movs	r1, #87	; 0x57
   1600e:	480d      	ldr	r0, [pc, #52]	; (16044 <bt_id_read_public_addr+0x78>)
   16010:	f012 fe1d 	bl	28c4e <z_log_minimal_printk>
		return 0U;
   16014:	2000      	movs	r0, #0
   16016:	e7f7      	b.n	16008 <bt_id_read_public_addr+0x3c>
		BT_WARN("Failed to read public address");
   16018:	2157      	movs	r1, #87	; 0x57
   1601a:	480b      	ldr	r0, [pc, #44]	; (16048 <bt_id_read_public_addr+0x7c>)
   1601c:	f012 fe17 	bl	28c4e <z_log_minimal_printk>
		return 0U;
   16020:	2000      	movs	r0, #0
   16022:	e7f1      	b.n	16008 <bt_id_read_public_addr+0x3c>
	memcpy(dst, src, sizeof(*dst));
   16024:	2206      	movs	r2, #6
   16026:	4621      	mov	r1, r4
   16028:	1c68      	adds	r0, r5, #1
   1602a:	f013 feaf 	bl	29d8c <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   1602e:	2300      	movs	r3, #0
   16030:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   16032:	9801      	ldr	r0, [sp, #4]
   16034:	f006 fdba 	bl	1cbac <net_buf_unref>
	return 1U;
   16038:	2001      	movs	r0, #1
   1603a:	e7e5      	b.n	16008 <bt_id_read_public_addr+0x3c>
   1603c:	00030c34 	.word	0x00030c34
   16040:	00030c2c 	.word	0x00030c2c
   16044:	000316d0 	.word	0x000316d0
   16048:	000316f0 	.word	0x000316f0

0001604c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1604c:	b500      	push	{lr}
   1604e:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   16050:	4668      	mov	r0, sp
   16052:	f7ff ffbb 	bl	15fcc <bt_id_read_public_addr>
   16056:	4b06      	ldr	r3, [pc, #24]	; (16070 <bt_setup_public_id_addr+0x24>)
   16058:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1605a:	b918      	cbnz	r0, 16064 <bt_setup_public_id_addr+0x18>
		return 0;
   1605c:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   1605e:	b003      	add	sp, #12
   16060:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   16064:	2200      	movs	r2, #0
   16066:	4669      	mov	r1, sp
   16068:	4610      	mov	r0, r2
   1606a:	f7ff fdbd 	bl	15be8 <id_create>
   1606e:	e7f6      	b.n	1605e <bt_setup_public_id_addr+0x12>
   16070:	20000380 	.word	0x20000380

00016074 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   16074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16078:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1607a:	4b1d      	ldr	r3, [pc, #116]	; (160f0 <bt_read_static_addr+0x7c>)
   1607c:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   16080:	f015 0501 	ands.w	r5, r5, #1
   16084:	d010      	beq.n	160a8 <bt_read_static_addr+0x34>
   16086:	4606      	mov	r6, r0
   16088:	4688      	mov	r8, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1608a:	aa01      	add	r2, sp, #4
   1608c:	2100      	movs	r1, #0
   1608e:	f64f 4009 	movw	r0, #64521	; 0xfc09
   16092:	f7fe fd01 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   16096:	4604      	mov	r4, r0
   16098:	b958      	cbnz	r0, 160b2 <bt_read_static_addr+0x3e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   1609a:	9b01      	ldr	r3, [sp, #4]
   1609c:	689f      	ldr	r7, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1609e:	787d      	ldrb	r5, [r7, #1]
   160a0:	4545      	cmp	r5, r8
   160a2:	bf28      	it	cs
   160a4:	4645      	movcs	r5, r8
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   160a6:	e013      	b.n	160d0 <bt_read_static_addr+0x5c>
		BT_WARN("Read Static Addresses command not available");
   160a8:	2157      	movs	r1, #87	; 0x57
   160aa:	4812      	ldr	r0, [pc, #72]	; (160f4 <bt_read_static_addr+0x80>)
   160ac:	f012 fdcf 	bl	28c4e <z_log_minimal_printk>
		return 0;
   160b0:	e014      	b.n	160dc <bt_read_static_addr+0x68>
		BT_WARN("Failed to read static addresses");
   160b2:	2157      	movs	r1, #87	; 0x57
   160b4:	4810      	ldr	r0, [pc, #64]	; (160f8 <bt_read_static_addr+0x84>)
   160b6:	f012 fdca 	bl	28c4e <z_log_minimal_printk>
		return 0;
   160ba:	2500      	movs	r5, #0
   160bc:	e00e      	b.n	160dc <bt_read_static_addr+0x68>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   160be:	2216      	movs	r2, #22
   160c0:	fb02 f004 	mul.w	r0, r2, r4
   160c4:	1839      	adds	r1, r7, r0
   160c6:	3102      	adds	r1, #2
   160c8:	4430      	add	r0, r6
   160ca:	f013 fe5f 	bl	29d8c <memcpy>
	for (i = 0; i < cnt; i++) {
   160ce:	3401      	adds	r4, #1
   160d0:	42a5      	cmp	r5, r4
   160d2:	dcf4      	bgt.n	160be <bt_read_static_addr+0x4a>
	}

	net_buf_unref(rsp);
   160d4:	9801      	ldr	r0, [sp, #4]
   160d6:	f006 fd69 	bl	1cbac <net_buf_unref>
	if (!cnt) {
   160da:	b11d      	cbz	r5, 160e4 <bt_read_static_addr+0x70>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   160dc:	4628      	mov	r0, r5
   160de:	b002      	add	sp, #8
   160e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No static addresses stored in controller");
   160e4:	2157      	movs	r1, #87	; 0x57
   160e6:	4805      	ldr	r0, [pc, #20]	; (160fc <bt_read_static_addr+0x88>)
   160e8:	f012 fdb1 	bl	28c4e <z_log_minimal_printk>
   160ec:	e7f6      	b.n	160dc <bt_read_static_addr+0x68>
   160ee:	bf00      	nop
   160f0:	20000380 	.word	0x20000380
   160f4:	00031714 	.word	0x00031714
   160f8:	00031748 	.word	0x00031748
   160fc:	00031770 	.word	0x00031770

00016100 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   16100:	b510      	push	{r4, lr}
   16102:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   16104:	4b17      	ldr	r3, [pc, #92]	; (16164 <bt_setup_random_id_addr+0x64>)
   16106:	79dc      	ldrb	r4, [r3, #7]
   16108:	b934      	cbnz	r4, 16118 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1610a:	2101      	movs	r1, #1
   1610c:	a802      	add	r0, sp, #8
   1610e:	f7ff ffb1 	bl	16074 <bt_read_static_addr>
   16112:	4b14      	ldr	r3, [pc, #80]	; (16164 <bt_setup_random_id_addr+0x64>)
   16114:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   16116:	b948      	cbnz	r0, 1612c <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   16118:	2100      	movs	r1, #0
   1611a:	4608      	mov	r0, r1
   1611c:	f7ff fefa 	bl	15f14 <bt_id_create>
   16120:	4603      	mov	r3, r0
}
   16122:	4618      	mov	r0, r3
   16124:	b008      	add	sp, #32
   16126:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   16128:	3401      	adds	r4, #1
   1612a:	b2e4      	uxtb	r4, r4
   1612c:	4b0d      	ldr	r3, [pc, #52]	; (16164 <bt_setup_random_id_addr+0x64>)
   1612e:	79db      	ldrb	r3, [r3, #7]
   16130:	42a3      	cmp	r3, r4
   16132:	d914      	bls.n	1615e <bt_setup_random_id_addr+0x5e>
   16134:	2206      	movs	r2, #6
   16136:	2116      	movs	r1, #22
   16138:	ab02      	add	r3, sp, #8
   1613a:	fb01 3104 	mla	r1, r1, r4, r3
   1613e:	f10d 0001 	add.w	r0, sp, #1
   16142:	f013 fe23 	bl	29d8c <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   16146:	2301      	movs	r3, #1
   16148:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1614c:	2200      	movs	r2, #0
   1614e:	4669      	mov	r1, sp
   16150:	4620      	mov	r0, r4
   16152:	f7ff fd49 	bl	15be8 <id_create>
				if (err) {
   16156:	4603      	mov	r3, r0
   16158:	2800      	cmp	r0, #0
   1615a:	d0e5      	beq.n	16128 <bt_setup_random_id_addr+0x28>
   1615c:	e7e1      	b.n	16122 <bt_setup_random_id_addr+0x22>
			return 0;
   1615e:	2300      	movs	r3, #0
   16160:	e7df      	b.n	16122 <bt_setup_random_id_addr+0x22>
   16162:	bf00      	nop
   16164:	20000380 	.word	0x20000380

00016168 <bt_id_set_adv_own_addr>:
			   bool dir_adv, uint8_t *own_addr_type)
{
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   16168:	2800      	cmp	r0, #0
   1616a:	d051      	beq.n	16210 <bt_id_set_adv_own_addr+0xa8>
{
   1616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1616e:	460e      	mov	r6, r1
   16170:	4617      	mov	r7, r2
   16172:	461d      	mov	r5, r3
   16174:	4603      	mov	r3, r0
	CHECKIF(adv == NULL || own_addr_type == NULL) {
   16176:	2d00      	cmp	r5, #0
   16178:	d04d      	beq.n	16216 <bt_id_set_adv_own_addr+0xae>
		return -EINVAL;
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   1617a:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1617c:	f011 0f01 	tst.w	r1, #1
   16180:	d029      	beq.n	161d6 <bt_id_set_adv_own_addr+0x6e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   16182:	b142      	cbz	r2, 16196 <bt_id_set_adv_own_addr+0x2e>
   16184:	f011 0f20 	tst.w	r1, #32
   16188:	d005      	beq.n	16196 <bt_id_set_adv_own_addr+0x2e>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1618a:	4a28      	ldr	r2, [pc, #160]	; (1622c <bt_id_set_adv_own_addr+0xc4>)
   1618c:	f892 20d0 	ldrb.w	r2, [r2, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   16190:	f012 0f40 	tst.w	r2, #64	; 0x40
   16194:	d042      	beq.n	1621c <bt_id_set_adv_own_addr+0xb4>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16196:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   1619a:	4924      	ldr	r1, [pc, #144]	; (1622c <bt_id_set_adv_own_addr+0xc4>)
   1619c:	5c8a      	ldrb	r2, [r1, r2]
   1619e:	2a01      	cmp	r2, #1
   161a0:	d00e      	beq.n	161c0 <bt_id_set_adv_own_addr+0x58>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   161a2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   161a6:	4b21      	ldr	r3, [pc, #132]	; (1622c <bt_id_set_adv_own_addr+0xc4>)
   161a8:	5d1b      	ldrb	r3, [r3, r4]
   161aa:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   161ac:	2f00      	cmp	r7, #0
   161ae:	d038      	beq.n	16222 <bt_id_set_adv_own_addr+0xba>
   161b0:	f016 0f20 	tst.w	r6, #32
   161b4:	d037      	beq.n	16226 <bt_id_set_adv_own_addr+0xbe>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   161b6:	f043 0302 	orr.w	r3, r3, #2
   161ba:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   161bc:	2000      	movs	r0, #0
   161be:	e019      	b.n	161f4 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   161c0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   161c4:	4a19      	ldr	r2, [pc, #100]	; (1622c <bt_id_set_adv_own_addr+0xc4>)
   161c6:	4411      	add	r1, r2
   161c8:	3101      	adds	r1, #1
   161ca:	4618      	mov	r0, r3
   161cc:	f014 f9af 	bl	2a52e <bt_id_set_adv_random_addr>
				if (err) {
   161d0:	2800      	cmp	r0, #0
   161d2:	d0e6      	beq.n	161a2 <bt_id_set_adv_own_addr+0x3a>
   161d4:	e00e      	b.n	161f4 <bt_id_set_adv_own_addr+0x8c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   161d6:	f011 0f04 	tst.w	r1, #4
   161da:	d014      	beq.n	16206 <bt_id_set_adv_own_addr+0x9e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   161dc:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   161e0:	4912      	ldr	r1, [pc, #72]	; (1622c <bt_id_set_adv_own_addr+0xc4>)
   161e2:	5c8a      	ldrb	r2, [r1, r2]
   161e4:	2a01      	cmp	r2, #1
   161e6:	d006      	beq.n	161f6 <bt_id_set_adv_own_addr+0x8e>
	int err = 0;
   161e8:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   161ea:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   161ee:	4b0f      	ldr	r3, [pc, #60]	; (1622c <bt_id_set_adv_own_addr+0xc4>)
   161f0:	5d1b      	ldrb	r3, [r3, r4]
   161f2:	702b      	strb	r3, [r5, #0]
}
   161f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   161f6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   161fa:	4a0c      	ldr	r2, [pc, #48]	; (1622c <bt_id_set_adv_own_addr+0xc4>)
   161fc:	4411      	add	r1, r2
   161fe:	3101      	adds	r1, #1
   16200:	f014 f995 	bl	2a52e <bt_id_set_adv_random_addr>
   16204:	e7f1      	b.n	161ea <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   16206:	f014 f99f 	bl	2a548 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1620a:	2301      	movs	r3, #1
   1620c:	702b      	strb	r3, [r5, #0]
		if (err) {
   1620e:	e7f1      	b.n	161f4 <bt_id_set_adv_own_addr+0x8c>
		return -EINVAL;
   16210:	f06f 0015 	mvn.w	r0, #21
}
   16214:	4770      	bx	lr
		return -EINVAL;
   16216:	f06f 0015 	mvn.w	r0, #21
   1621a:	e7eb      	b.n	161f4 <bt_id_set_adv_own_addr+0x8c>
			return -ENOTSUP;
   1621c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16220:	e7e8      	b.n	161f4 <bt_id_set_adv_own_addr+0x8c>
	return 0;
   16222:	2000      	movs	r0, #0
   16224:	e7e6      	b.n	161f4 <bt_id_set_adv_own_addr+0x8c>
   16226:	2000      	movs	r0, #0
   16228:	e7e4      	b.n	161f4 <bt_id_set_adv_own_addr+0x8c>
   1622a:	bf00      	nop
   1622c:	20000380 	.word	0x20000380

00016230 <adv_get_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   16230:	4800      	ldr	r0, [pc, #0]	; (16234 <adv_get_legacy+0x4>)
   16232:	4770      	bx	lr
   16234:	20000398 	.word	0x20000398

00016238 <set_data_add_complete>:
	return valid_adv_ext_param(param);
}

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   16238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1623c:	b083      	sub	sp, #12
   1623e:	4606      	mov	r6, r0
   16240:	4689      	mov	r9, r1
   16242:	4693      	mov	fp, r2
   16244:	461c      	mov	r4, r3
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   16246:	2700      	movs	r7, #0
	uint8_t set_data_len = 0;
   16248:	463b      	mov	r3, r7
   1624a:	46b8      	mov	r8, r7
	for (size_t i = 0; i < ad_len; i++) {
   1624c:	4544      	cmp	r4, r8
   1624e:	d947      	bls.n	162e0 <set_data_add_complete+0xa8>
		const struct bt_data *data = ad[i].data;
   16250:	eb0b 0ac8 	add.w	sl, fp, r8, lsl #3
   16254:	f85b 7038 	ldr.w	r7, [fp, r8, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   16258:	2500      	movs	r5, #0
   1625a:	f8cd 8000 	str.w	r8, [sp]
   1625e:	f8cd b004 	str.w	fp, [sp, #4]
   16262:	e01e      	b.n	162a2 <set_data_add_complete+0x6a>
				ssize_t shortened_len = set_data_len_max -
							(set_data_len + 2);

				if (!(type == BT_DATA_NAME_COMPLETE &&
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
   16264:	2145      	movs	r1, #69	; 0x45
   16266:	4820      	ldr	r0, [pc, #128]	; (162e8 <set_data_add_complete+0xb0>)
   16268:	f012 fcf1 	bl	28c4e <z_log_minimal_printk>
					return -EINVAL;
   1626c:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   16270:	b003      	add	sp, #12
   16272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			set_data[set_data_len++] = len + 1;
   16276:	fa5f f882 	uxtb.w	r8, r2
   1627a:	1c59      	adds	r1, r3, #1
   1627c:	b2c9      	uxtb	r1, r1
   1627e:	f108 0b01 	add.w	fp, r8, #1
   16282:	f806 b00e 	strb.w	fp, [r6, lr]
			set_data[set_data_len++] = type;
   16286:	3302      	adds	r3, #2
   16288:	fa5f fb83 	uxtb.w	fp, r3
   1628c:	5470      	strb	r0, [r6, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1628e:	f8dc 1004 	ldr.w	r1, [ip, #4]
   16292:	eb06 000b 	add.w	r0, r6, fp
   16296:	f013 fd79 	bl	29d8c <memcpy>
			set_data_len += len;
   1629a:	eb0b 0308 	add.w	r3, fp, r8
   1629e:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   162a0:	3501      	adds	r5, #1
   162a2:	f8da 2004 	ldr.w	r2, [sl, #4]
   162a6:	4295      	cmp	r5, r2
   162a8:	d213      	bcs.n	162d2 <set_data_add_complete+0x9a>
			size_t len = data[j].data_len;
   162aa:	eb07 0cc5 	add.w	ip, r7, r5, lsl #3
   162ae:	f89c 2001 	ldrb.w	r2, [ip, #1]
			uint8_t type = data[j].type;
   162b2:	f817 0035 	ldrb.w	r0, [r7, r5, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   162b6:	469e      	mov	lr, r3
   162b8:	1899      	adds	r1, r3, r2
   162ba:	3102      	adds	r1, #2
   162bc:	4549      	cmp	r1, r9
   162be:	d9da      	bls.n	16276 <set_data_add_complete+0x3e>
							(set_data_len + 2);
   162c0:	1c9a      	adds	r2, r3, #2
				ssize_t shortened_len = set_data_len_max -
   162c2:	eba9 0202 	sub.w	r2, r9, r2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   162c6:	2809      	cmp	r0, #9
   162c8:	d1cc      	bne.n	16264 <set_data_add_complete+0x2c>
   162ca:	2a00      	cmp	r2, #0
   162cc:	ddca      	ble.n	16264 <set_data_add_complete+0x2c>
				type = BT_DATA_NAME_SHORTENED;
   162ce:	2008      	movs	r0, #8
   162d0:	e7d1      	b.n	16276 <set_data_add_complete+0x3e>
	for (size_t i = 0; i < ad_len; i++) {
   162d2:	f8dd 8000 	ldr.w	r8, [sp]
   162d6:	f8dd b004 	ldr.w	fp, [sp, #4]
   162da:	f108 0801 	add.w	r8, r8, #1
   162de:	e7b5      	b.n	1624c <set_data_add_complete+0x14>
	*data_len = set_data_len;
   162e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   162e2:	7013      	strb	r3, [r2, #0]
	return 0;
   162e4:	2000      	movs	r0, #0
   162e6:	e7c3      	b.n	16270 <set_data_add_complete+0x38>
   162e8:	000317a8 	.word	0x000317a8

000162ec <valid_adv_ext_param>:
{
   162ec:	b510      	push	{r4, lr}
   162ee:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   162f0:	7800      	ldrb	r0, [r0, #0]
   162f2:	4b21      	ldr	r3, [pc, #132]	; (16378 <valid_adv_ext_param+0x8c>)
   162f4:	79db      	ldrb	r3, [r3, #7]
   162f6:	4298      	cmp	r0, r3
   162f8:	d301      	bcc.n	162fe <valid_adv_ext_param+0x12>
		return false;
   162fa:	2000      	movs	r0, #0
}
   162fc:	bd10      	pop	{r4, pc}
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   162fe:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
   16302:	2207      	movs	r2, #7
   16304:	491d      	ldr	r1, [pc, #116]	; (1637c <valid_adv_ext_param+0x90>)
   16306:	4b1c      	ldr	r3, [pc, #112]	; (16378 <valid_adv_ext_param+0x8c>)
   16308:	4418      	add	r0, r3
   1630a:	f013 fd1a 	bl	29d42 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1630e:	2800      	cmp	r0, #0
   16310:	d0f3      	beq.n	162fa <valid_adv_ext_param+0xe>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16312:	6863      	ldr	r3, [r4, #4]
   16314:	f013 0f01 	tst.w	r3, #1
   16318:	d107      	bne.n	1632a <valid_adv_ext_param+0x3e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1631a:	4a17      	ldr	r2, [pc, #92]	; (16378 <valid_adv_ext_param+0x8c>)
   1631c:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
   16320:	2a08      	cmp	r2, #8
   16322:	d802      	bhi.n	1632a <valid_adv_ext_param+0x3e>
		    param->interval_min < 0x00a0) {
   16324:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   16326:	2a9f      	cmp	r2, #159	; 0x9f
   16328:	d91b      	bls.n	16362 <valid_adv_ext_param+0x76>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1632a:	f013 0f30 	tst.w	r3, #48	; 0x30
   1632e:	d001      	beq.n	16334 <valid_adv_ext_param+0x48>
	    !param->peer) {
   16330:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   16332:	b1c2      	cbz	r2, 16366 <valid_adv_ext_param+0x7a>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   16334:	f013 0f10 	tst.w	r3, #16
   16338:	d108      	bne.n	1634c <valid_adv_ext_param+0x60>
	    !param->peer) {
   1633a:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1633c:	b132      	cbz	r2, 1634c <valid_adv_ext_param+0x60>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1633e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   16342:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   16346:	d014      	beq.n	16372 <valid_adv_ext_param+0x86>
	return true;
   16348:	2001      	movs	r0, #1
   1634a:	e7d7      	b.n	162fc <valid_adv_ext_param+0x10>
		if (param->interval_min > param->interval_max ||
   1634c:	68a2      	ldr	r2, [r4, #8]
   1634e:	68e1      	ldr	r1, [r4, #12]
   16350:	428a      	cmp	r2, r1
   16352:	d80a      	bhi.n	1636a <valid_adv_ext_param+0x7e>
   16354:	2a1f      	cmp	r2, #31
   16356:	d90a      	bls.n	1636e <valid_adv_ext_param+0x82>
		    param->interval_min < 0x0020 ||
   16358:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   1635c:	d9ef      	bls.n	1633e <valid_adv_ext_param+0x52>
			return false;
   1635e:	2000      	movs	r0, #0
   16360:	e7cc      	b.n	162fc <valid_adv_ext_param+0x10>
			return false;
   16362:	2000      	movs	r0, #0
   16364:	e7ca      	b.n	162fc <valid_adv_ext_param+0x10>
		return false;
   16366:	2000      	movs	r0, #0
   16368:	e7c8      	b.n	162fc <valid_adv_ext_param+0x10>
			return false;
   1636a:	2000      	movs	r0, #0
   1636c:	e7c6      	b.n	162fc <valid_adv_ext_param+0x10>
   1636e:	2000      	movs	r0, #0
   16370:	e7c4      	b.n	162fc <valid_adv_ext_param+0x10>
		return false;
   16372:	2000      	movs	r0, #0
   16374:	e7c2      	b.n	162fc <valid_adv_ext_param+0x10>
   16376:	bf00      	nop
   16378:	20000380 	.word	0x20000380
   1637c:	00030c24 	.word	0x00030c24

00016380 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   16380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16382:	4604      	mov	r4, r0
   16384:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   16386:	4605      	mov	r5, r0
   16388:	f815 2b09 	ldrb.w	r2, [r5], #9
   1638c:	4b17      	ldr	r3, [pc, #92]	; (163ec <le_adv_start_add_conn+0x6c>)
   1638e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
   16392:	2207      	movs	r2, #7
   16394:	4916      	ldr	r1, [pc, #88]	; (163f0 <le_adv_start_add_conn+0x70>)
   16396:	4628      	mov	r0, r5
   16398:	f013 fcd3 	bl	29d42 <memcmp>

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1639c:	b960      	cbnz	r0, 163b8 <le_adv_start_add_conn+0x38>
   1639e:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   163a0:	4914      	ldr	r1, [pc, #80]	; (163f4 <le_adv_start_add_conn+0x74>)
   163a2:	7820      	ldrb	r0, [r4, #0]
   163a4:	f014 fcc2 	bl	2ad2c <bt_conn_add_le>
		if (!conn) {
   163a8:	4604      	mov	r4, r0
   163aa:	b1b0      	cbz	r0, 163da <le_adv_start_add_conn+0x5a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   163ac:	2104      	movs	r1, #4
   163ae:	f000 fe73 	bl	17098 <bt_conn_set_state>
		*out_conn = conn;
   163b2:	603c      	str	r4, [r7, #0]
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   163b4:	4630      	mov	r0, r6
   163b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   163b8:	4629      	mov	r1, r5
   163ba:	7820      	ldrb	r0, [r4, #0]
   163bc:	f001 f8c0 	bl	17540 <bt_conn_exists_le>
   163c0:	b970      	cbnz	r0, 163e0 <le_adv_start_add_conn+0x60>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   163c2:	4629      	mov	r1, r5
   163c4:	7820      	ldrb	r0, [r4, #0]
   163c6:	f014 fcb1 	bl	2ad2c <bt_conn_add_le>
	if (!conn) {
   163ca:	4604      	mov	r4, r0
   163cc:	b158      	cbz	r0, 163e6 <le_adv_start_add_conn+0x66>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   163ce:	2105      	movs	r1, #5
   163d0:	f000 fe62 	bl	17098 <bt_conn_set_state>
	*out_conn = conn;
   163d4:	603c      	str	r4, [r7, #0]
	return 0;
   163d6:	2600      	movs	r6, #0
   163d8:	e7ec      	b.n	163b4 <le_adv_start_add_conn+0x34>
			return -ENOMEM;
   163da:	f06f 060b 	mvn.w	r6, #11
   163de:	e7e9      	b.n	163b4 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   163e0:	f06f 0615 	mvn.w	r6, #21
   163e4:	e7e6      	b.n	163b4 <le_adv_start_add_conn+0x34>
		return -ENOMEM;
   163e6:	f06f 060b 	mvn.w	r6, #11
   163ea:	e7e3      	b.n	163b4 <le_adv_start_add_conn+0x34>
   163ec:	20000380 	.word	0x20000380
   163f0:	00030c24 	.word	0x00030c24
   163f4:	00030c1c 	.word	0x00030c1c

000163f8 <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   163f8:	b570      	push	{r4, r5, r6, lr}
   163fa:	4604      	mov	r4, r0
   163fc:	460d      	mov	r5, r1
	struct bt_conn *conn;

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   163fe:	f100 0609 	add.w	r6, r0, #9
   16402:	2207      	movs	r2, #7
   16404:	490d      	ldr	r1, [pc, #52]	; (1643c <le_adv_stop_free_conn+0x44>)
   16406:	4630      	mov	r0, r6
   16408:	f013 fc9b 	bl	29d42 <memcmp>
   1640c:	b978      	cbnz	r0, 1642e <le_adv_stop_free_conn+0x36>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1640e:	2204      	movs	r2, #4
   16410:	490b      	ldr	r1, [pc, #44]	; (16440 <le_adv_stop_free_conn+0x48>)
   16412:	7820      	ldrb	r0, [r4, #0]
   16414:	f001 f8aa 	bl	1756c <bt_conn_lookup_state_le>
   16418:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
   1641a:	b13c      	cbz	r4, 1642c <le_adv_stop_free_conn+0x34>
		conn->err = status;
   1641c:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1641e:	2100      	movs	r1, #0
   16420:	4620      	mov	r0, r4
   16422:	f000 fe39 	bl	17098 <bt_conn_set_state>
		bt_conn_unref(conn);
   16426:	4620      	mov	r0, r4
   16428:	f000 fdfa 	bl	17020 <bt_conn_unref>
	}
}
   1642c:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1642e:	2205      	movs	r2, #5
   16430:	4631      	mov	r1, r6
   16432:	7820      	ldrb	r0, [r4, #0]
   16434:	f001 f89a 	bl	1756c <bt_conn_lookup_state_le>
   16438:	4604      	mov	r4, r0
   1643a:	e7ee      	b.n	1641a <le_adv_stop_free_conn+0x22>
   1643c:	00030c24 	.word	0x00030c24
   16440:	00030c1c 	.word	0x00030c1c

00016444 <bt_le_ext_adv_foreach>:
{
   16444:	b508      	push	{r3, lr}
   16446:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   16448:	4801      	ldr	r0, [pc, #4]	; (16450 <bt_le_ext_adv_foreach+0xc>)
   1644a:	4798      	blx	r3
}
   1644c:	bd08      	pop	{r3, pc}
   1644e:	bf00      	nop
   16450:	20000398 	.word	0x20000398

00016454 <bt_le_adv_lookup_legacy>:
}
   16454:	4800      	ldr	r0, [pc, #0]	; (16458 <bt_le_adv_lookup_legacy+0x4>)
   16456:	4770      	bx	lr
   16458:	20000398 	.word	0x20000398

0001645c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1645c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16460:	b08d      	sub	sp, #52	; 0x34
   16462:	9205      	str	r2, [sp, #20]
   16464:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   16466:	2300      	movs	r3, #0
   16468:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1646a:	690e      	ldr	r6, [r1, #16]
   1646c:	ebb6 0b03 	subs.w	fp, r6, r3
   16470:	bf18      	it	ne
   16472:	f04f 0b01 	movne.w	fp, #1
   16476:	f3bf 8f5b 	dmb	ish
   1647a:	4b9d      	ldr	r3, [pc, #628]	; (166f0 <bt_le_adv_start_legacy+0x294>)
   1647c:	681b      	ldr	r3, [r3, #0]
   1647e:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16482:	f013 0f04 	tst.w	r3, #4
   16486:	f000 8122 	beq.w	166ce <bt_le_adv_start_legacy+0x272>
   1648a:	4605      	mov	r5, r0
   1648c:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1648e:	4608      	mov	r0, r1
   16490:	f014 f992 	bl	2a7b8 <valid_adv_param>
   16494:	2800      	cmp	r0, #0
   16496:	f000 811d 	beq.w	166d4 <bt_le_adv_start_legacy+0x278>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   1649a:	4620      	mov	r0, r4
   1649c:	f014 f86d 	bl	2a57a <bt_id_adv_random_addr_check>
   164a0:	4682      	mov	sl, r0
   164a2:	2800      	cmp	r0, #0
   164a4:	f000 8119 	beq.w	166da <bt_le_adv_start_legacy+0x27e>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   164a8:	f105 0710 	add.w	r7, r5, #16
   164ac:	2107      	movs	r1, #7
   164ae:	4638      	mov	r0, r7
   164b0:	f014 f8b0 	bl	2a614 <atomic_test_bit>
   164b4:	9004      	str	r0, [sp, #16]
   164b6:	2800      	cmp	r0, #0
   164b8:	f040 8112 	bne.w	166e0 <bt_le_adv_start_legacy+0x284>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   164bc:	220f      	movs	r2, #15
   164be:	2100      	movs	r1, #0
   164c0:	a808      	add	r0, sp, #32
   164c2:	f013 fc92 	bl	29dea <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   164c6:	68a3      	ldr	r3, [r4, #8]
   164c8:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   164cc:	68e3      	ldr	r3, [r4, #12]
   164ce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   164d2:	f8d4 9004 	ldr.w	r9, [r4, #4]
   164d6:	4648      	mov	r0, r9
   164d8:	f014 f88a 	bl	2a5f0 <get_adv_channel_map>
   164dc:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   164e0:	4648      	mov	r0, r9
   164e2:	f014 f883 	bl	2a5ec <get_filter_policy>
   164e6:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   164ea:	782a      	ldrb	r2, [r5, #0]
   164ec:	7823      	ldrb	r3, [r4, #0]
   164ee:	429a      	cmp	r2, r3
   164f0:	d00c      	beq.n	1650c <bt_le_adv_start_legacy+0xb0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   164f2:	4b7f      	ldr	r3, [pc, #508]	; (166f0 <bt_le_adv_start_legacy+0x294>)
   164f4:	f3bf 8f5b 	dmb	ish
   164f8:	e853 1f00 	ldrex	r1, [r3]
   164fc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   16500:	e843 1200 	strex	r2, r1, [r3]
   16504:	2a00      	cmp	r2, #0
   16506:	d1f7      	bne.n	164f8 <bt_le_adv_start_legacy+0x9c>
   16508:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   1650c:	7823      	ldrb	r3, [r4, #0]
   1650e:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   16510:	4a78      	ldr	r2, [pc, #480]	; (166f4 <bt_le_adv_start_legacy+0x298>)
   16512:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   16516:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1651a:	465a      	mov	r2, fp
   1651c:	6861      	ldr	r1, [r4, #4]
   1651e:	4628      	mov	r0, r5
   16520:	f7ff fe22 	bl	16168 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   16524:	4681      	mov	r9, r0
   16526:	2800      	cmp	r0, #0
   16528:	f040 80b7 	bne.w	1669a <bt_le_adv_start_legacy+0x23e>
		return err;
	}

	if (dir_adv) {
   1652c:	b1ee      	cbz	r6, 1656a <bt_le_adv_start_legacy+0x10e>
	memcpy(dst, src, sizeof(*dst));
   1652e:	2207      	movs	r2, #7
   16530:	6921      	ldr	r1, [r4, #16]
   16532:	f105 0009 	add.w	r0, r5, #9
   16536:	f013 fc29 	bl	29d8c <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   1653a:	4620      	mov	r0, r4
   1653c:	f014 f98e 	bl	2a85c <get_adv_name_type_param>
   16540:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16542:	6863      	ldr	r3, [r4, #4]
   16544:	f013 0f01 	tst.w	r3, #1
   16548:	d01e      	beq.n	16588 <bt_le_adv_start_legacy+0x12c>
		if (dir_adv) {
   1654a:	b1ce      	cbz	r6, 16580 <bt_le_adv_start_legacy+0x124>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   1654c:	f013 0f10 	tst.w	r3, #16
   16550:	d012      	beq.n	16578 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   16552:	2304      	movs	r3, #4
   16554:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16558:	2207      	movs	r2, #7
   1655a:	6921      	ldr	r1, [r4, #16]
   1655c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   16560:	f013 fc14 	bl	29d8c <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   16564:	f8dd a010 	ldr.w	sl, [sp, #16]
}
   16568:	e016      	b.n	16598 <bt_le_adv_start_legacy+0x13c>
	memcpy(dst, src, sizeof(*dst));
   1656a:	2207      	movs	r2, #7
   1656c:	4962      	ldr	r1, [pc, #392]	; (166f8 <bt_le_adv_start_legacy+0x29c>)
   1656e:	f105 0009 	add.w	r0, r5, #9
   16572:	f013 fc0b 	bl	29d8c <memcpy>
}
   16576:	e7e0      	b.n	1653a <bt_le_adv_start_legacy+0xde>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   16578:	2301      	movs	r3, #1
   1657a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1657e:	e7eb      	b.n	16558 <bt_le_adv_start_legacy+0xfc>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   16580:	2300      	movs	r3, #0
   16582:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16586:	e007      	b.n	16598 <bt_le_adv_start_legacy+0x13c>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   16588:	f413 7f00 	tst.w	r3, #512	; 0x200
   1658c:	d101      	bne.n	16592 <bt_le_adv_start_legacy+0x136>
   1658e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16590:	b353      	cbz	r3, 165e8 <bt_le_adv_start_legacy+0x18c>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   16592:	2302      	movs	r3, #2
   16594:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   16598:	210f      	movs	r1, #15
   1659a:	f242 0006 	movw	r0, #8198	; 0x2006
   1659e:	f7fe fa2b 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   165a2:	4681      	mov	r9, r0
   165a4:	2800      	cmp	r0, #0
   165a6:	f000 809e 	beq.w	166e6 <bt_le_adv_start_legacy+0x28a>
   165aa:	220f      	movs	r2, #15
   165ac:	a908      	add	r1, sp, #32
   165ae:	3008      	adds	r0, #8
   165b0:	f016 ff0b 	bl	2d3ca <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   165b4:	2200      	movs	r2, #0
   165b6:	4649      	mov	r1, r9
   165b8:	f242 0006 	movw	r0, #8198	; 0x2006
   165bc:	f7fe fa6c 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   165c0:	4681      	mov	r9, r0
   165c2:	2800      	cmp	r0, #0
   165c4:	d169      	bne.n	1669a <bt_le_adv_start_legacy+0x23e>
		return err;
	}

	if (!dir_adv) {
   165c6:	b1be      	cbz	r6, 165f8 <bt_le_adv_start_legacy+0x19c>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   165c8:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   165ca:	f013 0f01 	tst.w	r3, #1
   165ce:	d02b      	beq.n	16628 <bt_le_adv_start_legacy+0x1cc>
		err = le_adv_start_add_conn(adv, &conn);
   165d0:	a907      	add	r1, sp, #28
   165d2:	4628      	mov	r0, r5
   165d4:	f7ff fed4 	bl	16380 <le_adv_start_add_conn>
		if (err) {
   165d8:	b330      	cbz	r0, 16628 <bt_le_adv_start_legacy+0x1cc>
			if (err == -ENOMEM && !dir_adv &&
   165da:	f110 0f0c 	cmn.w	r0, #12
   165de:	f040 8085 	bne.w	166ec <bt_le_adv_start_legacy+0x290>
   165e2:	b1de      	cbz	r6, 1661c <bt_le_adv_start_legacy+0x1c0>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   165e4:	4681      	mov	r9, r0
   165e6:	e058      	b.n	1669a <bt_le_adv_start_legacy+0x23e>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   165e8:	2802      	cmp	r0, #2
   165ea:	d0d2      	beq.n	16592 <bt_le_adv_start_legacy+0x136>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   165ec:	2303      	movs	r3, #3
   165ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   165f2:	f8dd a010 	ldr.w	sl, [sp, #16]
   165f6:	e7cf      	b.n	16598 <bt_le_adv_start_legacy+0x13c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   165f8:	f8cd b00c 	str.w	fp, [sp, #12]
   165fc:	f8cd a008 	str.w	sl, [sp, #8]
   16600:	2300      	movs	r3, #0
   16602:	9301      	str	r3, [sp, #4]
   16604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16606:	9300      	str	r3, [sp, #0]
   16608:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1660a:	4642      	mov	r2, r8
   1660c:	9905      	ldr	r1, [sp, #20]
   1660e:	4628      	mov	r0, r5
   16610:	f014 f847 	bl	2a6a2 <le_adv_update>
		if (err) {
   16614:	2800      	cmp	r0, #0
   16616:	d0d7      	beq.n	165c8 <bt_le_adv_start_legacy+0x16c>
			return err;
   16618:	4681      	mov	r9, r0
   1661a:	e03e      	b.n	1669a <bt_le_adv_start_legacy+0x23e>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1661c:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1661e:	f012 0f02 	tst.w	r2, #2
   16622:	d00c      	beq.n	1663e <bt_le_adv_start_legacy+0x1e2>
			return err;
   16624:	4681      	mov	r9, r0
   16626:	e038      	b.n	1669a <bt_le_adv_start_legacy+0x23e>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   16628:	2101      	movs	r1, #1
   1662a:	4628      	mov	r0, r5
   1662c:	f014 f952 	bl	2a8d4 <bt_le_adv_set_enable>
	if (err) {
   16630:	4605      	mov	r5, r0
   16632:	2800      	cmp	r0, #0
   16634:	d135      	bne.n	166a2 <bt_le_adv_start_legacy+0x246>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16636:	9807      	ldr	r0, [sp, #28]
   16638:	b108      	cbz	r0, 1663e <bt_le_adv_start_legacy+0x1e2>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   1663a:	f000 fcf1 	bl	17020 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1663e:	2e00      	cmp	r6, #0
   16640:	d03d      	beq.n	166be <bt_le_adv_start_legacy+0x262>
   16642:	464a      	mov	r2, r9
   16644:	f002 0201 	and.w	r2, r2, #1
   16648:	210e      	movs	r1, #14
   1664a:	4638      	mov	r0, r7
   1664c:	f014 f8c5 	bl	2a7da <atomic_set_bit_to>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   16650:	f1bb 0f01 	cmp.w	fp, #1
   16654:	bf14      	ite	ne
   16656:	2200      	movne	r2, #0
   16658:	2201      	moveq	r2, #1
   1665a:	2108      	movs	r1, #8
   1665c:	4638      	mov	r0, r7
   1665e:	f014 f8bc 	bl	2a7da <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_AD);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   16662:	f1bb 0f02 	cmp.w	fp, #2
   16666:	bf14      	ite	ne
   16668:	2200      	movne	r2, #0
   1666a:	2201      	moveq	r2, #1
   1666c:	2109      	movs	r1, #9
   1666e:	4638      	mov	r0, r7
   16670:	f014 f8b3 	bl	2a7da <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   16674:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   16676:	f002 0201 	and.w	r2, r2, #1
   1667a:	210a      	movs	r1, #10
   1667c:	4638      	mov	r0, r7
   1667e:	f014 f8ac 	bl	2a7da <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   16682:	4652      	mov	r2, sl
   16684:	210b      	movs	r1, #11
   16686:	4638      	mov	r0, r7
   16688:	f014 f8a7 	bl	2a7da <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   1668c:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1668e:	f3c2 0280 	ubfx	r2, r2, #2, #1
   16692:	210d      	movs	r1, #13
   16694:	4638      	mov	r0, r7
   16696:	f014 f8a0 	bl	2a7da <atomic_set_bit_to>

	return 0;
}
   1669a:	4648      	mov	r0, r9
   1669c:	b00d      	add	sp, #52	; 0x34
   1669e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_ERR("Failed to start advertiser");
   166a2:	2145      	movs	r1, #69	; 0x45
   166a4:	4815      	ldr	r0, [pc, #84]	; (166fc <bt_le_adv_start_legacy+0x2a0>)
   166a6:	f012 fad2 	bl	28c4e <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   166aa:	9807      	ldr	r0, [sp, #28]
   166ac:	b128      	cbz	r0, 166ba <bt_le_adv_start_legacy+0x25e>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   166ae:	2100      	movs	r1, #0
   166b0:	f000 fcf2 	bl	17098 <bt_conn_set_state>
			bt_conn_unref(conn);
   166b4:	9807      	ldr	r0, [sp, #28]
   166b6:	f000 fcb3 	bl	17020 <bt_conn_unref>
		return err;
   166ba:	46a9      	mov	r9, r5
   166bc:	e7ed      	b.n	1669a <bt_le_adv_start_legacy+0x23e>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   166be:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   166c0:	f013 0f02 	tst.w	r3, #2
   166c4:	d001      	beq.n	166ca <bt_le_adv_start_legacy+0x26e>
   166c6:	464a      	mov	r2, r9
   166c8:	e7bc      	b.n	16644 <bt_le_adv_start_legacy+0x1e8>
   166ca:	2201      	movs	r2, #1
   166cc:	e7ba      	b.n	16644 <bt_le_adv_start_legacy+0x1e8>
		return -EAGAIN;
   166ce:	f06f 090a 	mvn.w	r9, #10
   166d2:	e7e2      	b.n	1669a <bt_le_adv_start_legacy+0x23e>
		return -EINVAL;
   166d4:	f06f 0915 	mvn.w	r9, #21
   166d8:	e7df      	b.n	1669a <bt_le_adv_start_legacy+0x23e>
		return -EINVAL;
   166da:	f06f 0915 	mvn.w	r9, #21
   166de:	e7dc      	b.n	1669a <bt_le_adv_start_legacy+0x23e>
		return -EALREADY;
   166e0:	f06f 0977 	mvn.w	r9, #119	; 0x77
   166e4:	e7d9      	b.n	1669a <bt_le_adv_start_legacy+0x23e>
		return -ENOBUFS;
   166e6:	f06f 0968 	mvn.w	r9, #104	; 0x68
   166ea:	e7d6      	b.n	1669a <bt_le_adv_start_legacy+0x23e>
			return err;
   166ec:	4681      	mov	r9, r0
   166ee:	e7d4      	b.n	1669a <bt_le_adv_start_legacy+0x23e>
   166f0:	2000044c 	.word	0x2000044c
   166f4:	20000380 	.word	0x20000380
   166f8:	00030c24 	.word	0x00030c24
   166fc:	000317c8 	.word	0x000317c8

00016700 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   16700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16704:	b082      	sub	sp, #8
   16706:	4606      	mov	r6, r0
   16708:	460c      	mov	r4, r1
   1670a:	4615      	mov	r5, r2
   1670c:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_get_legacy();
   1670e:	f7ff fd8f 	bl	16230 <adv_get_legacy>
	int err;

	if (!adv) {
   16712:	b1f8      	cbz	r0, 16754 <bt_le_adv_start+0x54>
   16714:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16716:	9b08      	ldr	r3, [sp, #32]
   16718:	9301      	str	r3, [sp, #4]
   1671a:	9700      	str	r7, [sp, #0]
   1671c:	462b      	mov	r3, r5
   1671e:	4622      	mov	r2, r4
   16720:	4631      	mov	r1, r6
   16722:	f7ff fe9b 	bl	1645c <bt_le_adv_start_legacy>
   16726:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   16728:	4629      	mov	r1, r5
   1672a:	4620      	mov	r0, r4
   1672c:	f013 ff3f 	bl	2a5ae <ad_is_limited>
   16730:	b918      	cbnz	r0, 1673a <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   16732:	4630      	mov	r0, r6
   16734:	b002      	add	sp, #8
   16736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1673a:	f108 0818 	add.w	r8, r8, #24
   1673e:	4907      	ldr	r1, [pc, #28]	; (1675c <bt_le_adv_start+0x5c>)
   16740:	4640      	mov	r0, r8
   16742:	f00c fbf3 	bl	22f2c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   16746:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1674a:	2300      	movs	r3, #0
   1674c:	4640      	mov	r0, r8
   1674e:	f00c fd05 	bl	2315c <k_work_reschedule>
   16752:	e7ee      	b.n	16732 <bt_le_adv_start+0x32>
		return -ENOMEM;
   16754:	f06f 060b 	mvn.w	r6, #11
   16758:	e7eb      	b.n	16732 <bt_le_adv_start+0x32>
   1675a:	bf00      	nop
   1675c:	000167c9 	.word	0x000167c9

00016760 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   16760:	b538      	push	{r3, r4, r5, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16762:	f7ff fe77 	bl	16454 <bt_le_adv_lookup_legacy>
	int err;

	if (!adv) {
   16766:	b1b8      	cbz	r0, 16798 <bt_le_adv_stop+0x38>
   16768:	4605      	mov	r5, r0
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1676a:	f014 f8b7 	bl	2a8dc <bt_le_lim_adv_cancel_timeout>

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   1676e:	f105 0410 	add.w	r4, r5, #16
   16772:	f3bf 8f5b 	dmb	ish
   16776:	e854 3f00 	ldrex	r3, [r4]
   1677a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   1677e:	e844 3200 	strex	r2, r3, [r4]
   16782:	2a00      	cmp	r2, #0
   16784:	d1f7      	bne.n	16776 <bt_le_adv_stop+0x16>
   16786:	f3bf 8f5b 	dmb	ish

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1678a:	2107      	movs	r1, #7
   1678c:	4620      	mov	r0, r4
   1678e:	f013 ff41 	bl	2a614 <atomic_test_bit>
   16792:	b938      	cbnz	r0, 167a4 <bt_le_adv_stop+0x44>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   16794:	2000      	movs	r0, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   16796:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("No valid legacy adv");
   16798:	2145      	movs	r1, #69	; 0x45
   1679a:	480a      	ldr	r0, [pc, #40]	; (167c4 <bt_le_adv_stop+0x64>)
   1679c:	f012 fa57 	bl	28c4e <z_log_minimal_printk>
		return 0;
   167a0:	2000      	movs	r0, #0
   167a2:	e7f8      	b.n	16796 <bt_le_adv_stop+0x36>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   167a4:	210a      	movs	r1, #10
   167a6:	4620      	mov	r0, r4
   167a8:	f013 ff34 	bl	2a614 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   167ac:	b920      	cbnz	r0, 167b8 <bt_le_adv_stop+0x58>
		err = bt_le_adv_set_enable_legacy(adv, false);
   167ae:	2100      	movs	r1, #0
   167b0:	4628      	mov	r0, r5
   167b2:	f014 f867 	bl	2a884 <bt_le_adv_set_enable_legacy>
		if (err) {
   167b6:	e7ee      	b.n	16796 <bt_le_adv_stop+0x36>
		le_adv_stop_free_conn(adv, 0);
   167b8:	2100      	movs	r1, #0
   167ba:	4628      	mov	r0, r5
   167bc:	f7ff fe1c 	bl	163f8 <le_adv_stop_free_conn>
   167c0:	e7f5      	b.n	167ae <bt_le_adv_stop+0x4e>
   167c2:	bf00      	nop
   167c4:	000317e8 	.word	0x000317e8

000167c8 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   167c8:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   167ca:	f7ff ffc9 	bl	16760 <bt_le_adv_stop>
   167ce:	4602      	mov	r2, r0
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   167d0:	2157      	movs	r1, #87	; 0x57
   167d2:	4802      	ldr	r0, [pc, #8]	; (167dc <adv_timeout+0x14>)
   167d4:	f012 fa3b 	bl	28c4e <z_log_minimal_printk>
}
   167d8:	bd08      	pop	{r3, pc}
   167da:	bf00      	nop
   167dc:	00031804 	.word	0x00031804

000167e0 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   167e0:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   167e2:	2240      	movs	r2, #64	; 0x40
   167e4:	4903      	ldr	r1, [pc, #12]	; (167f4 <bt_pub_key_is_debug+0x14>)
   167e6:	f013 faac 	bl	29d42 <memcmp>
}
   167ea:	fab0 f080 	clz	r0, r0
   167ee:	0940      	lsrs	r0, r0, #5
   167f0:	bd08      	pop	{r3, pc}
   167f2:	bf00      	nop
   167f4:	000318d0 	.word	0x000318d0

000167f8 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   167f8:	b538      	push	{r3, r4, r5, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   167fa:	4b3e      	ldr	r3, [pc, #248]	; (168f4 <bt_pub_key_gen+0xfc>)
   167fc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   16800:	f003 0306 	and.w	r3, r3, #6
   16804:	2b06      	cmp	r3, #6
   16806:	d10d      	bne.n	16824 <bt_pub_key_gen+0x2c>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   16808:	2800      	cmp	r0, #0
   1680a:	d070      	beq.n	168ee <bt_pub_key_gen+0xf6>
   1680c:	4b3a      	ldr	r3, [pc, #232]	; (168f8 <bt_pub_key_gen+0x100>)
   1680e:	681a      	ldr	r2, [r3, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16810:	b1b2      	cbz	r2, 16840 <bt_pub_key_gen+0x48>
   16812:	1f13      	subs	r3, r2, #4
   16814:	b1b3      	cbz	r3, 16844 <bt_pub_key_gen+0x4c>
		if (cb == new_cb) {
   16816:	4298      	cmp	r0, r3
   16818:	d00b      	beq.n	16832 <bt_pub_key_gen+0x3a>
	return node->next;
   1681a:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1681c:	2b00      	cmp	r3, #0
   1681e:	d0f9      	beq.n	16814 <bt_pub_key_gen+0x1c>
   16820:	3b04      	subs	r3, #4
   16822:	e7f7      	b.n	16814 <bt_pub_key_gen+0x1c>
		BT_WARN("ECC HCI commands not available");
   16824:	2157      	movs	r1, #87	; 0x57
   16826:	4835      	ldr	r0, [pc, #212]	; (168fc <bt_pub_key_gen+0x104>)
   16828:	f012 fa11 	bl	28c4e <z_log_minimal_printk>
		return -ENOTSUP;
   1682c:	f06f 0585 	mvn.w	r5, #133	; 0x85
   16830:	e037      	b.n	168a2 <bt_pub_key_gen+0xaa>
			BT_WARN("Callback already registered");
   16832:	2157      	movs	r1, #87	; 0x57
   16834:	4832      	ldr	r0, [pc, #200]	; (16900 <bt_pub_key_gen+0x108>)
   16836:	f012 fa0a 	bl	28c4e <z_log_minimal_printk>
			return -EALREADY;
   1683a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1683e:	e030      	b.n	168a2 <bt_pub_key_gen+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16840:	4613      	mov	r3, r2
   16842:	e7e7      	b.n	16814 <bt_pub_key_gen+0x1c>
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   16844:	1d01      	adds	r1, r0, #4
	parent->next = child;
   16846:	6042      	str	r2, [r0, #4]
	list->head = node;
   16848:	4b2b      	ldr	r3, [pc, #172]	; (168f8 <bt_pub_key_gen+0x100>)
   1684a:	6019      	str	r1, [r3, #0]
	return list->tail;
   1684c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1684e:	b18b      	cbz	r3, 16874 <bt_pub_key_gen+0x7c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16850:	4b2c      	ldr	r3, [pc, #176]	; (16904 <bt_pub_key_gen+0x10c>)
   16852:	f3bf 8f5b 	dmb	ish
   16856:	e853 2f00 	ldrex	r2, [r3]
   1685a:	f042 0120 	orr.w	r1, r2, #32
   1685e:	e843 1000 	strex	r0, r1, [r3]
   16862:	2800      	cmp	r0, #0
   16864:	d1f7      	bne.n	16856 <bt_pub_key_gen+0x5e>
   16866:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1686a:	f012 0f20 	tst.w	r2, #32
   1686e:	d004      	beq.n	1687a <bt_pub_key_gen+0x82>
		return 0;
   16870:	2500      	movs	r5, #0
   16872:	e016      	b.n	168a2 <bt_pub_key_gen+0xaa>
	list->tail = node;
   16874:	4b20      	ldr	r3, [pc, #128]	; (168f8 <bt_pub_key_gen+0x100>)
   16876:	6059      	str	r1, [r3, #4]
}
   16878:	e7ea      	b.n	16850 <bt_pub_key_gen+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1687a:	f3bf 8f5b 	dmb	ish
   1687e:	e853 1f00 	ldrex	r1, [r3]
   16882:	f021 0110 	bic.w	r1, r1, #16
   16886:	e843 1200 	strex	r2, r1, [r3]
   1688a:	2a00      	cmp	r2, #0
   1688c:	d1f7      	bne.n	1687e <bt_pub_key_gen+0x86>
   1688e:	f3bf 8f5b 	dmb	ish
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   16892:	2200      	movs	r2, #0
   16894:	4611      	mov	r1, r2
   16896:	f242 0025 	movw	r0, #8229	; 0x2025
   1689a:	f7fe f8fd 	bl	14a98 <bt_hci_cmd_send_sync>
	if (err) {
   1689e:	4605      	mov	r5, r0
   168a0:	b908      	cbnz	r0, 168a6 <bt_pub_key_gen+0xae>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   168a2:	4628      	mov	r0, r5
   168a4:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Sending LE P256 Public Key command failed");
   168a6:	2145      	movs	r1, #69	; 0x45
   168a8:	4817      	ldr	r0, [pc, #92]	; (16908 <bt_pub_key_gen+0x110>)
   168aa:	f012 f9d0 	bl	28c4e <z_log_minimal_printk>
   168ae:	4b15      	ldr	r3, [pc, #84]	; (16904 <bt_pub_key_gen+0x10c>)
   168b0:	f3bf 8f5b 	dmb	ish
   168b4:	e853 1f00 	ldrex	r1, [r3]
   168b8:	f021 0120 	bic.w	r1, r1, #32
   168bc:	e843 1200 	strex	r2, r1, [r3]
   168c0:	2a00      	cmp	r2, #0
   168c2:	d1f7      	bne.n	168b4 <bt_pub_key_gen+0xbc>
   168c4:	f3bf 8f5b 	dmb	ish
	return list->head;
   168c8:	4b0b      	ldr	r3, [pc, #44]	; (168f8 <bt_pub_key_gen+0x100>)
   168ca:	681c      	ldr	r4, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   168cc:	b104      	cbz	r4, 168d0 <bt_pub_key_gen+0xd8>
   168ce:	3c04      	subs	r4, #4
   168d0:	b144      	cbz	r4, 168e4 <bt_pub_key_gen+0xec>
			if (cb->func) {
   168d2:	6823      	ldr	r3, [r4, #0]
   168d4:	b10b      	cbz	r3, 168da <bt_pub_key_gen+0xe2>
				cb->func(NULL);
   168d6:	2000      	movs	r0, #0
   168d8:	4798      	blx	r3
	return node->next;
   168da:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   168dc:	2c00      	cmp	r4, #0
   168de:	d0f7      	beq.n	168d0 <bt_pub_key_gen+0xd8>
   168e0:	3c04      	subs	r4, #4
   168e2:	e7f5      	b.n	168d0 <bt_pub_key_gen+0xd8>
	list->head = NULL;
   168e4:	4b04      	ldr	r3, [pc, #16]	; (168f8 <bt_pub_key_gen+0x100>)
   168e6:	2200      	movs	r2, #0
   168e8:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   168ea:	605a      	str	r2, [r3, #4]
		return err;
   168ec:	e7d9      	b.n	168a2 <bt_pub_key_gen+0xaa>
		return -EINVAL;
   168ee:	f06f 0515 	mvn.w	r5, #21
   168f2:	e7d6      	b.n	168a2 <bt_pub_key_gen+0xaa>
   168f4:	20000380 	.word	0x20000380
   168f8:	20002960 	.word	0x20002960
   168fc:	00031830 	.word	0x00031830
   16900:	00031854 	.word	0x00031854
   16904:	2000044c 	.word	0x2000044c
   16908:	00031878 	.word	0x00031878

0001690c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1690c:	f3bf 8f5b 	dmb	ish
   16910:	4b05      	ldr	r3, [pc, #20]	; (16928 <bt_pub_key_get+0x1c>)
   16912:	681b      	ldr	r3, [r3, #0]
   16914:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		return debug_public_key;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   16918:	f013 0f10 	tst.w	r3, #16
   1691c:	d001      	beq.n	16922 <bt_pub_key_get+0x16>
		return pub_key;
   1691e:	4803      	ldr	r0, [pc, #12]	; (1692c <bt_pub_key_get+0x20>)
	}

	return NULL;
}
   16920:	4770      	bx	lr
	return NULL;
   16922:	2000      	movs	r0, #0
   16924:	4770      	bx	lr
   16926:	bf00      	nop
   16928:	2000044c 	.word	0x2000044c
   1692c:	20002968 	.word	0x20002968

00016930 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   16930:	b510      	push	{r4, lr}
	int err;

	if (dh_key_cb == cb) {
   16932:	4b18      	ldr	r3, [pc, #96]	; (16994 <bt_dh_key_gen+0x64>)
   16934:	681b      	ldr	r3, [r3, #0]
   16936:	428b      	cmp	r3, r1
   16938:	d026      	beq.n	16988 <bt_dh_key_gen+0x58>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1693a:	b9cb      	cbnz	r3, 16970 <bt_dh_key_gen+0x40>
   1693c:	f3bf 8f5b 	dmb	ish
   16940:	4b15      	ldr	r3, [pc, #84]	; (16998 <bt_dh_key_gen+0x68>)
   16942:	681b      	ldr	r3, [r3, #0]
   16944:	f3bf 8f5b 	dmb	ish
   16948:	f013 0f20 	tst.w	r3, #32
   1694c:	d110      	bne.n	16970 <bt_dh_key_gen+0x40>
   1694e:	f3bf 8f5b 	dmb	ish
   16952:	4b11      	ldr	r3, [pc, #68]	; (16998 <bt_dh_key_gen+0x68>)
   16954:	681b      	ldr	r3, [r3, #0]
   16956:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1695a:	f013 0f10 	tst.w	r3, #16
   1695e:	d016      	beq.n	1698e <bt_dh_key_gen+0x5e>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
   16960:	4b0c      	ldr	r3, [pc, #48]	; (16994 <bt_dh_key_gen+0x64>)
   16962:	6019      	str	r1, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		err = hci_generate_dhkey_v2(remote_pk,
					    BT_HCI_LE_KEY_TYPE_DEBUG);
	} else {
		err = hci_generate_dhkey_v1(remote_pk);
   16964:	f014 f802 	bl	2a96c <hci_generate_dhkey_v1>
	}

	if (err) {
   16968:	4604      	mov	r4, r0
   1696a:	b920      	cbnz	r0, 16976 <bt_dh_key_gen+0x46>
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   1696c:	4620      	mov	r0, r4
   1696e:	bd10      	pop	{r4, pc}
		return -EBUSY;
   16970:	f06f 040f 	mvn.w	r4, #15
   16974:	e7fa      	b.n	1696c <bt_dh_key_gen+0x3c>
		dh_key_cb = NULL;
   16976:	4b07      	ldr	r3, [pc, #28]	; (16994 <bt_dh_key_gen+0x64>)
   16978:	2200      	movs	r2, #0
   1697a:	601a      	str	r2, [r3, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   1697c:	4602      	mov	r2, r0
   1697e:	2157      	movs	r1, #87	; 0x57
   16980:	4806      	ldr	r0, [pc, #24]	; (1699c <bt_dh_key_gen+0x6c>)
   16982:	f012 f964 	bl	28c4e <z_log_minimal_printk>
		return err;
   16986:	e7f1      	b.n	1696c <bt_dh_key_gen+0x3c>
		return -EALREADY;
   16988:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1698c:	e7ee      	b.n	1696c <bt_dh_key_gen+0x3c>
		return -EADDRNOTAVAIL;
   1698e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   16992:	e7eb      	b.n	1696c <bt_dh_key_gen+0x3c>
   16994:	2000295c 	.word	0x2000295c
   16998:	2000044c 	.word	0x2000044c
   1699c:	000318a8 	.word	0x000318a8

000169a0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   169a0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   169a2:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   169a4:	4b1e      	ldr	r3, [pc, #120]	; (16a20 <bt_hci_evt_le_pkey_complete+0x80>)
   169a6:	f3bf 8f5b 	dmb	ish
   169aa:	e853 1f00 	ldrex	r1, [r3]
   169ae:	f021 0120 	bic.w	r1, r1, #32
   169b2:	e843 1200 	strex	r2, r1, [r3]
   169b6:	2a00      	cmp	r2, #0
   169b8:	d1f7      	bne.n	169aa <bt_hci_evt_le_pkey_complete+0xa>
   169ba:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   169be:	782b      	ldrb	r3, [r5, #0]
   169c0:	b123      	cbz	r3, 169cc <bt_hci_evt_le_pkey_complete+0x2c>
	return list->head;
   169c2:	4b18      	ldr	r3, [pc, #96]	; (16a24 <bt_hci_evt_le_pkey_complete+0x84>)
   169c4:	681c      	ldr	r4, [r3, #0]
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   169c6:	b1ec      	cbz	r4, 16a04 <bt_hci_evt_le_pkey_complete+0x64>
   169c8:	3c04      	subs	r4, #4
   169ca:	e01b      	b.n	16a04 <bt_hci_evt_le_pkey_complete+0x64>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   169cc:	2240      	movs	r2, #64	; 0x40
   169ce:	1c69      	adds	r1, r5, #1
   169d0:	4815      	ldr	r0, [pc, #84]	; (16a28 <bt_hci_evt_le_pkey_complete+0x88>)
   169d2:	f013 f9db 	bl	29d8c <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   169d6:	4b12      	ldr	r3, [pc, #72]	; (16a20 <bt_hci_evt_le_pkey_complete+0x80>)
   169d8:	f3bf 8f5b 	dmb	ish
   169dc:	e853 1f00 	ldrex	r1, [r3]
   169e0:	f041 0110 	orr.w	r1, r1, #16
   169e4:	e843 1200 	strex	r2, r1, [r3]
   169e8:	2a00      	cmp	r2, #0
   169ea:	d1f7      	bne.n	169dc <bt_hci_evt_le_pkey_complete+0x3c>
   169ec:	f3bf 8f5b 	dmb	ish
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
}
   169f0:	e7e7      	b.n	169c2 <bt_hci_evt_le_pkey_complete+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   169f2:	1d23      	adds	r3, r4, #4
   169f4:	d103      	bne.n	169fe <bt_hci_evt_le_pkey_complete+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   169f6:	461c      	mov	r4, r3
   169f8:	e004      	b.n	16a04 <bt_hci_evt_le_pkey_complete+0x64>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   169fa:	2000      	movs	r0, #0
   169fc:	4798      	blx	r3
	return node->next;
   169fe:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16a00:	b104      	cbz	r4, 16a04 <bt_hci_evt_le_pkey_complete+0x64>
   16a02:	3c04      	subs	r4, #4
   16a04:	b13c      	cbz	r4, 16a16 <bt_hci_evt_le_pkey_complete+0x76>
		if (cb->func) {
   16a06:	6823      	ldr	r3, [r4, #0]
   16a08:	2b00      	cmp	r3, #0
   16a0a:	d0f2      	beq.n	169f2 <bt_hci_evt_le_pkey_complete+0x52>
			cb->func(evt->status ? NULL : pub_key);
   16a0c:	782a      	ldrb	r2, [r5, #0]
   16a0e:	2a00      	cmp	r2, #0
   16a10:	d1f3      	bne.n	169fa <bt_hci_evt_le_pkey_complete+0x5a>
   16a12:	4805      	ldr	r0, [pc, #20]	; (16a28 <bt_hci_evt_le_pkey_complete+0x88>)
   16a14:	e7f2      	b.n	169fc <bt_hci_evt_le_pkey_complete+0x5c>
	list->head = NULL;
   16a16:	4b03      	ldr	r3, [pc, #12]	; (16a24 <bt_hci_evt_le_pkey_complete+0x84>)
   16a18:	2200      	movs	r2, #0
   16a1a:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   16a1c:	605a      	str	r2, [r3, #4]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   16a1e:	bd38      	pop	{r3, r4, r5, pc}
   16a20:	2000044c 	.word	0x2000044c
   16a24:	20002960 	.word	0x20002960
   16a28:	20002968 	.word	0x20002968

00016a2c <bt_hci_evt_le_dhkey_complete>:

void bt_hci_evt_le_dhkey_complete(struct net_buf *buf)
{
   16a2c:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   16a2e:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   16a30:	4b06      	ldr	r3, [pc, #24]	; (16a4c <bt_hci_evt_le_dhkey_complete+0x20>)
   16a32:	681b      	ldr	r3, [r3, #0]
   16a34:	b143      	cbz	r3, 16a48 <bt_hci_evt_le_dhkey_complete+0x1c>
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   16a36:	4a05      	ldr	r2, [pc, #20]	; (16a4c <bt_hci_evt_le_dhkey_complete+0x20>)
   16a38:	2100      	movs	r1, #0
   16a3a:	6011      	str	r1, [r2, #0]
		cb(evt->status ? NULL : evt->dhkey);
   16a3c:	7802      	ldrb	r2, [r0, #0]
   16a3e:	b90a      	cbnz	r2, 16a44 <bt_hci_evt_le_dhkey_complete+0x18>
   16a40:	3001      	adds	r0, #1
   16a42:	e000      	b.n	16a46 <bt_hci_evt_le_dhkey_complete+0x1a>
   16a44:	2000      	movs	r0, #0
   16a46:	4798      	blx	r3
	}
}
   16a48:	bd08      	pop	{r3, pc}
   16a4a:	bf00      	nop
   16a4c:	2000295c 	.word	0x2000295c

00016a50 <state2str>:
#endif /* CONFIG_BT_CONN */
}

static inline const char *state2str(bt_conn_state_t state)
{
	switch (state) {
   16a50:	2808      	cmp	r0, #8
   16a52:	d816      	bhi.n	16a82 <state2str+0x32>
   16a54:	e8df f000 	tbb	[pc, r0]
   16a58:	0d071705 	.word	0x0d071705
   16a5c:	110f090b 	.word	0x110f090b
   16a60:	13          	.byte	0x13
   16a61:	00          	.byte	0x00
   16a62:	480a      	ldr	r0, [pc, #40]	; (16a8c <state2str+0x3c>)
   16a64:	4770      	bx	lr
	case BT_CONN_DISCONNECTED:
		return "disconnected";
	case BT_CONN_DISCONNECT_COMPLETE:
		return "disconnect-complete";
	case BT_CONN_CONNECTING_SCAN:
		return "connecting-scan";
   16a66:	480a      	ldr	r0, [pc, #40]	; (16a90 <state2str+0x40>)
   16a68:	4770      	bx	lr
	case BT_CONN_CONNECTING_DIR_ADV:
		return "connecting-dir-adv";
   16a6a:	480a      	ldr	r0, [pc, #40]	; (16a94 <state2str+0x44>)
   16a6c:	4770      	bx	lr
	case BT_CONN_CONNECTING_ADV:
		return "connecting-adv";
   16a6e:	480a      	ldr	r0, [pc, #40]	; (16a98 <state2str+0x48>)
   16a70:	4770      	bx	lr
	case BT_CONN_CONNECTING_AUTO:
		return "connecting-auto";
   16a72:	480a      	ldr	r0, [pc, #40]	; (16a9c <state2str+0x4c>)
   16a74:	4770      	bx	lr
	case BT_CONN_CONNECTING:
		return "connecting";
   16a76:	480a      	ldr	r0, [pc, #40]	; (16aa0 <state2str+0x50>)
   16a78:	4770      	bx	lr
	case BT_CONN_CONNECTED:
		return "connected";
   16a7a:	480a      	ldr	r0, [pc, #40]	; (16aa4 <state2str+0x54>)
   16a7c:	4770      	bx	lr
	case BT_CONN_DISCONNECTING:
		return "disconnecting";
   16a7e:	480a      	ldr	r0, [pc, #40]	; (16aa8 <state2str+0x58>)
   16a80:	4770      	bx	lr
	default:
		return "(unknown)";
   16a82:	480a      	ldr	r0, [pc, #40]	; (16aac <state2str+0x5c>)
   16a84:	4770      	bx	lr
		return "disconnect-complete";
   16a86:	480a      	ldr	r0, [pc, #40]	; (16ab0 <state2str+0x60>)
	}
}
   16a88:	4770      	bx	lr
   16a8a:	bf00      	nop
   16a8c:	00031918 	.word	0x00031918
   16a90:	0003193c 	.word	0x0003193c
   16a94:	0003194c 	.word	0x0003194c
   16a98:	00031960 	.word	0x00031960
   16a9c:	00031970 	.word	0x00031970
   16aa0:	00031980 	.word	0x00031980
   16aa4:	0003198c 	.word	0x0003198c
   16aa8:	00031998 	.word	0x00031998
   16aac:	000319a8 	.word	0x000319a8
   16ab0:	00031928 	.word	0x00031928

00016ab4 <tx_free>:

static void tx_free(struct bt_conn_tx *tx)
{
   16ab4:	b508      	push	{r3, lr}
   16ab6:	4601      	mov	r1, r0
	tx->cb = NULL;
   16ab8:	2300      	movs	r3, #0
   16aba:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   16abc:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   16abe:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   16ac0:	4801      	ldr	r0, [pc, #4]	; (16ac8 <tx_free+0x14>)
   16ac2:	f018 fb96 	bl	2f1f2 <k_queue_append>
}
   16ac6:	bd08      	pop	{r3, pc}
   16ac8:	20000a80 	.word	0x20000a80

00016acc <notify_disconnected>:
		}
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   16acc:	b538      	push	{r3, r4, r5, lr}
   16ace:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   16ad0:	4b14      	ldr	r3, [pc, #80]	; (16b24 <notify_disconnected+0x58>)
   16ad2:	681c      	ldr	r4, [r3, #0]
   16ad4:	e000      	b.n	16ad8 <notify_disconnected+0xc>
   16ad6:	69a4      	ldr	r4, [r4, #24]
   16ad8:	b134      	cbz	r4, 16ae8 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   16ada:	6863      	ldr	r3, [r4, #4]
   16adc:	2b00      	cmp	r3, #0
   16ade:	d0fa      	beq.n	16ad6 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   16ae0:	7b29      	ldrb	r1, [r5, #12]
   16ae2:	4628      	mov	r0, r5
   16ae4:	4798      	blx	r3
   16ae6:	e7f6      	b.n	16ad6 <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16ae8:	4c0f      	ldr	r4, [pc, #60]	; (16b28 <notify_disconnected+0x5c>)
   16aea:	e000      	b.n	16aee <notify_disconnected+0x22>
   16aec:	341c      	adds	r4, #28
   16aee:	4b0f      	ldr	r3, [pc, #60]	; (16b2c <notify_disconnected+0x60>)
   16af0:	429c      	cmp	r4, r3
   16af2:	d809      	bhi.n	16b08 <notify_disconnected+0x3c>
   16af4:	4b0d      	ldr	r3, [pc, #52]	; (16b2c <notify_disconnected+0x60>)
   16af6:	429c      	cmp	r4, r3
   16af8:	d212      	bcs.n	16b20 <notify_disconnected+0x54>
		if (cb->disconnected) {
   16afa:	6863      	ldr	r3, [r4, #4]
   16afc:	2b00      	cmp	r3, #0
   16afe:	d0f5      	beq.n	16aec <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   16b00:	7b29      	ldrb	r1, [r5, #12]
   16b02:	4628      	mov	r0, r5
   16b04:	4798      	blx	r3
   16b06:	e7f1      	b.n	16aec <notify_disconnected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16b08:	4c09      	ldr	r4, [pc, #36]	; (16b30 <notify_disconnected+0x64>)
   16b0a:	f240 5269 	movw	r2, #1385	; 0x569
   16b0e:	4621      	mov	r1, r4
   16b10:	4808      	ldr	r0, [pc, #32]	; (16b34 <notify_disconnected+0x68>)
   16b12:	f012 f87c 	bl	28c0e <assert_print>
   16b16:	f240 5169 	movw	r1, #1385	; 0x569
   16b1a:	4620      	mov	r0, r4
   16b1c:	f012 f870 	bl	28c00 <assert_post_action>
		}
	}
}
   16b20:	bd38      	pop	{r3, r4, r5, pc}
   16b22:	bf00      	nop
   16b24:	200029d8 	.word	0x200029d8
   16b28:	0002f9bc 	.word	0x0002f9bc
   16b2c:	0002f9d8 	.word	0x0002f9d8
   16b30:	000319b4 	.word	0x000319b4
   16b34:	00030128 	.word	0x00030128

00016b38 <conn_tx_destroy>:
{
   16b38:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(tx);
   16b3a:	b159      	cbz	r1, 16b54 <conn_tx_destroy+0x1c>
   16b3c:	4604      	mov	r4, r0
   16b3e:	4608      	mov	r0, r1
	bt_conn_tx_cb_t cb = tx->cb;
   16b40:	684d      	ldr	r5, [r1, #4]
	void *user_data = tx->user_data;
   16b42:	688e      	ldr	r6, [r1, #8]
	tx_free(tx);
   16b44:	f7ff ffb6 	bl	16ab4 <tx_free>
	cb(conn, user_data, -ESHUTDOWN);
   16b48:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   16b4c:	4631      	mov	r1, r6
   16b4e:	4620      	mov	r0, r4
   16b50:	47a8      	blx	r5
}
   16b52:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(tx);
   16b54:	4c04      	ldr	r4, [pc, #16]	; (16b68 <conn_tx_destroy+0x30>)
   16b56:	2238      	movs	r2, #56	; 0x38
   16b58:	4621      	mov	r1, r4
   16b5a:	4804      	ldr	r0, [pc, #16]	; (16b6c <conn_tx_destroy+0x34>)
   16b5c:	f012 f857 	bl	28c0e <assert_print>
   16b60:	2138      	movs	r1, #56	; 0x38
   16b62:	4620      	mov	r0, r4
   16b64:	f012 f84c 	bl	28c00 <assert_post_action>
   16b68:	000319b4 	.word	0x000319b4
   16b6c:	00030128 	.word	0x00030128

00016b70 <notify_connected>:
{
   16b70:	b538      	push	{r3, r4, r5, lr}
   16b72:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   16b74:	4b14      	ldr	r3, [pc, #80]	; (16bc8 <notify_connected+0x58>)
   16b76:	681c      	ldr	r4, [r3, #0]
   16b78:	e000      	b.n	16b7c <notify_connected+0xc>
   16b7a:	69a4      	ldr	r4, [r4, #24]
   16b7c:	b134      	cbz	r4, 16b8c <notify_connected+0x1c>
		if (cb->connected) {
   16b7e:	6823      	ldr	r3, [r4, #0]
   16b80:	2b00      	cmp	r3, #0
   16b82:	d0fa      	beq.n	16b7a <notify_connected+0xa>
			cb->connected(conn, conn->err);
   16b84:	7b29      	ldrb	r1, [r5, #12]
   16b86:	4628      	mov	r0, r5
   16b88:	4798      	blx	r3
   16b8a:	e7f6      	b.n	16b7a <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16b8c:	4c0f      	ldr	r4, [pc, #60]	; (16bcc <notify_connected+0x5c>)
   16b8e:	e000      	b.n	16b92 <notify_connected+0x22>
   16b90:	341c      	adds	r4, #28
   16b92:	4b0f      	ldr	r3, [pc, #60]	; (16bd0 <notify_connected+0x60>)
   16b94:	429c      	cmp	r4, r3
   16b96:	d809      	bhi.n	16bac <notify_connected+0x3c>
   16b98:	4b0d      	ldr	r3, [pc, #52]	; (16bd0 <notify_connected+0x60>)
   16b9a:	429c      	cmp	r4, r3
   16b9c:	d212      	bcs.n	16bc4 <notify_connected+0x54>
		if (cb->connected) {
   16b9e:	6823      	ldr	r3, [r4, #0]
   16ba0:	2b00      	cmp	r3, #0
   16ba2:	d0f5      	beq.n	16b90 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   16ba4:	7b29      	ldrb	r1, [r5, #12]
   16ba6:	4628      	mov	r0, r5
   16ba8:	4798      	blx	r3
   16baa:	e7f1      	b.n	16b90 <notify_connected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16bac:	4c09      	ldr	r4, [pc, #36]	; (16bd4 <notify_connected+0x64>)
   16bae:	f44f 62ab 	mov.w	r2, #1368	; 0x558
   16bb2:	4621      	mov	r1, r4
   16bb4:	4808      	ldr	r0, [pc, #32]	; (16bd8 <notify_connected+0x68>)
   16bb6:	f012 f82a 	bl	28c0e <assert_print>
   16bba:	f44f 61ab 	mov.w	r1, #1368	; 0x558
   16bbe:	4620      	mov	r0, r4
   16bc0:	f012 f81e 	bl	28c00 <assert_post_action>
}
   16bc4:	bd38      	pop	{r3, r4, r5, pc}
   16bc6:	bf00      	nop
   16bc8:	200029d8 	.word	0x200029d8
   16bcc:	0002f9bc 	.word	0x0002f9bc
   16bd0:	0002f9d8 	.word	0x0002f9d8
   16bd4:	000319b4 	.word	0x000319b4
   16bd8:	00030128 	.word	0x00030128

00016bdc <conn_tx_alloc>:
{
   16bdc:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   16bde:	f00d fb73 	bl	242c8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   16be2:	4b08      	ldr	r3, [pc, #32]	; (16c04 <conn_tx_alloc+0x28>)
   16be4:	4283      	cmp	r3, r0
   16be6:	d007      	beq.n	16bf8 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   16be8:	f04f 32ff 	mov.w	r2, #4294967295
   16bec:	f04f 33ff 	mov.w	r3, #4294967295
   16bf0:	4805      	ldr	r0, [pc, #20]	; (16c08 <conn_tx_alloc+0x2c>)
   16bf2:	f00b fd25 	bl	22640 <z_impl_k_queue_get>
}
   16bf6:	bd08      	pop	{r3, pc}
   16bf8:	2200      	movs	r2, #0
   16bfa:	2300      	movs	r3, #0
   16bfc:	4802      	ldr	r0, [pc, #8]	; (16c08 <conn_tx_alloc+0x2c>)
   16bfe:	f00b fd1f 	bl	22640 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   16c02:	e7f8      	b.n	16bf6 <conn_tx_alloc+0x1a>
   16c04:	200021f8 	.word	0x200021f8
   16c08:	20000a80 	.word	0x20000a80

00016c0c <bt_conn_get_pkts>:
}
   16c0c:	4800      	ldr	r0, [pc, #0]	; (16c10 <bt_conn_get_pkts+0x4>)
   16c0e:	4770      	bx	lr
   16c10:	20000480 	.word	0x20000480

00016c14 <send_frag>:
{
   16c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c18:	4605      	mov	r5, r0
   16c1a:	460e      	mov	r6, r1
   16c1c:	4691      	mov	r9, r2
   16c1e:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   16c20:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   16c22:	f7ff fff3 	bl	16c0c <bt_conn_get_pkts>
   16c26:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   16c28:	f04f 32ff 	mov.w	r2, #4294967295
   16c2c:	f04f 33ff 	mov.w	r3, #4294967295
   16c30:	f00b fdba 	bl	227a8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   16c34:	7b6b      	ldrb	r3, [r5, #13]
   16c36:	2b07      	cmp	r3, #7
   16c38:	d142      	bne.n	16cc0 <send_frag+0xac>
   16c3a:	f04f 0240 	mov.w	r2, #64	; 0x40
   16c3e:	f3ef 8311 	mrs	r3, BASEPRI
   16c42:	f382 8812 	msr	BASEPRI_MAX, r2
   16c46:	f3bf 8f6f 	isb	sy
	if (tx) {
   16c4a:	b1af      	cbz	r7, 16c78 <send_frag+0x64>
	parent->next = child;
   16c4c:	2200      	movs	r2, #0
   16c4e:	603a      	str	r2, [r7, #0]
	return list->tail;
   16c50:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   16c52:	b172      	cbz	r2, 16c72 <send_frag+0x5e>
	parent->next = child;
   16c54:	6017      	str	r7, [r2, #0]
	list->tail = node;
   16c56:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   16c58:	f383 8811 	msr	BASEPRI, r3
   16c5c:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   16c60:	464a      	mov	r2, r9
   16c62:	4631      	mov	r1, r6
   16c64:	4628      	mov	r0, r5
   16c66:	f013 ff38 	bl	2aada <send_acl>
	if (err) {
   16c6a:	4602      	mov	r2, r0
   16c6c:	b988      	cbnz	r0, 16c92 <send_frag+0x7e>
	return true;
   16c6e:	2001      	movs	r0, #1
   16c70:	e032      	b.n	16cd8 <send_frag+0xc4>
   16c72:	61af      	str	r7, [r5, #24]
	list->head = node;
   16c74:	616f      	str	r7, [r5, #20]
}
   16c76:	e7ef      	b.n	16c58 <send_frag+0x44>
	return list->tail;
   16c78:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   16c7a:	b13a      	cbz	r2, 16c8c <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   16c7c:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   16c80:	f8da 2000 	ldr.w	r2, [sl]
   16c84:	3201      	adds	r2, #1
   16c86:	f8ca 2000 	str.w	r2, [sl]
   16c8a:	e7e5      	b.n	16c58 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   16c8c:	f105 0a1c 	add.w	sl, r5, #28
   16c90:	e7f6      	b.n	16c80 <send_frag+0x6c>
		BT_ERR("Unable to send to driver (err %d)", err);
   16c92:	2145      	movs	r1, #69	; 0x45
   16c94:	481d      	ldr	r0, [pc, #116]	; (16d0c <send_frag+0xf8>)
   16c96:	f011 ffda 	bl	28c4e <z_log_minimal_printk>
	__asm__ volatile(
   16c9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   16c9e:	f3ef 8911 	mrs	r9, BASEPRI
   16ca2:	f383 8812 	msr	BASEPRI_MAX, r3
   16ca6:	f3bf 8f6f 	isb	sy
		if (tx) {
   16caa:	b9bf      	cbnz	r7, 16cdc <send_frag+0xc8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   16cac:	f8da 3000 	ldr.w	r3, [sl]
   16cb0:	b1d3      	cbz	r3, 16ce8 <send_frag+0xd4>
			(*pending_no_cb)--;
   16cb2:	3b01      	subs	r3, #1
   16cb4:	f8ca 3000 	str.w	r3, [sl]
	__asm__ volatile(
   16cb8:	f389 8811 	msr	BASEPRI, r9
   16cbc:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   16cc0:	4640      	mov	r0, r8
   16cc2:	f00b fd33 	bl	2272c <z_impl_k_sem_give>
	if (tx) {
   16cc6:	b12f      	cbz	r7, 16cd4 <send_frag+0xc0>
		tx_data(buf)->tx = NULL;
   16cc8:	2300      	movs	r3, #0
   16cca:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   16ccc:	4639      	mov	r1, r7
   16cce:	4628      	mov	r0, r5
   16cd0:	f7ff ff32 	bl	16b38 <conn_tx_destroy>
	if (always_consume) {
   16cd4:	b9a4      	cbnz	r4, 16d00 <send_frag+0xec>
	return false;
   16cd6:	4620      	mov	r0, r4
}
   16cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   16cdc:	4639      	mov	r1, r7
   16cde:	f105 0014 	add.w	r0, r5, #20
   16ce2:	f013 fe71 	bl	2a9c8 <sys_slist_find_and_remove>
   16ce6:	e7e7      	b.n	16cb8 <send_frag+0xa4>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   16ce8:	4c09      	ldr	r4, [pc, #36]	; (16d10 <send_frag+0xfc>)
   16cea:	f240 2229 	movw	r2, #553	; 0x229
   16cee:	4621      	mov	r1, r4
   16cf0:	4808      	ldr	r0, [pc, #32]	; (16d14 <send_frag+0x100>)
   16cf2:	f011 ff8c 	bl	28c0e <assert_print>
   16cf6:	f240 2129 	movw	r1, #553	; 0x229
   16cfa:	4620      	mov	r0, r4
   16cfc:	f011 ff80 	bl	28c00 <assert_post_action>
		net_buf_unref(buf);
   16d00:	4630      	mov	r0, r6
   16d02:	f005 ff53 	bl	1cbac <net_buf_unref>
	return false;
   16d06:	2000      	movs	r0, #0
   16d08:	e7e6      	b.n	16cd8 <send_frag+0xc4>
   16d0a:	bf00      	nop
   16d0c:	000312f4 	.word	0x000312f4
   16d10:	000319b4 	.word	0x000319b4
   16d14:	00030128 	.word	0x00030128

00016d18 <bt_conn_new>:
{
   16d18:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   16d1a:	2300      	movs	r3, #0
   16d1c:	428b      	cmp	r3, r1
   16d1e:	d228      	bcs.n	16d72 <bt_conn_new+0x5a>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   16d20:	24c8      	movs	r4, #200	; 0xc8
   16d22:	fb04 0403 	mla	r4, r4, r3, r0
   16d26:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16d2a:	f04f 0c01 	mov.w	ip, #1
   16d2e:	f3bf 8f5b 	dmb	ish
   16d32:	e852 ef00 	ldrex	lr, [r2]
   16d36:	f1be 0f00 	cmp.w	lr, #0
   16d3a:	d103      	bne.n	16d44 <bt_conn_new+0x2c>
   16d3c:	e842 c500 	strex	r5, ip, [r2]
   16d40:	2d00      	cmp	r5, #0
   16d42:	d1f6      	bne.n	16d32 <bt_conn_new+0x1a>
   16d44:	f3bf 8f5b 	dmb	ish
   16d48:	d111      	bne.n	16d6e <bt_conn_new+0x56>
	if (!conn) {
   16d4a:	b174      	cbz	r4, 16d6a <bt_conn_new+0x52>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   16d4c:	22c0      	movs	r2, #192	; 0xc0
   16d4e:	2100      	movs	r1, #0
   16d50:	4620      	mov	r0, r4
   16d52:	f013 f84a 	bl	29dea <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   16d56:	4908      	ldr	r1, [pc, #32]	; (16d78 <bt_conn_new+0x60>)
   16d58:	f104 0060 	add.w	r0, r4, #96	; 0x60
   16d5c:	f00c f8e6 	bl	22f2c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   16d60:	4906      	ldr	r1, [pc, #24]	; (16d7c <bt_conn_new+0x64>)
   16d62:	f104 0028 	add.w	r0, r4, #40	; 0x28
   16d66:	f00b ffe1 	bl	22d2c <k_work_init>
}
   16d6a:	4620      	mov	r0, r4
   16d6c:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   16d6e:	4463      	add	r3, ip
   16d70:	e7d4      	b.n	16d1c <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   16d72:	2400      	movs	r4, #0
   16d74:	e7e9      	b.n	16d4a <bt_conn_new+0x32>
   16d76:	bf00      	nop
   16d78:	0001763d 	.word	0x0001763d
   16d7c:	0002aa35 	.word	0x0002aa35

00016d80 <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   16d80:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   16d82:	2101      	movs	r1, #1
   16d84:	4801      	ldr	r0, [pc, #4]	; (16d8c <acl_conn_new+0xc>)
   16d86:	f7ff ffc7 	bl	16d18 <bt_conn_new>
}
   16d8a:	bd08      	pop	{r3, pc}
   16d8c:	20001b20 	.word	0x20001b20

00016d90 <bt_acl_recv>:
{
   16d90:	b570      	push	{r4, r5, r6, lr}
   16d92:	4604      	mov	r4, r0
   16d94:	460d      	mov	r5, r1
	switch (flags) {
   16d96:	2a01      	cmp	r2, #1
   16d98:	d020      	beq.n	16ddc <bt_acl_recv+0x4c>
   16d9a:	2a02      	cmp	r2, #2
   16d9c:	d14f      	bne.n	16e3e <bt_acl_recv+0xae>
		if (conn->rx) {
   16d9e:	6903      	ldr	r3, [r0, #16]
   16da0:	b133      	cbz	r3, 16db0 <bt_acl_recv+0x20>
			BT_ERR("Unexpected first L2CAP frame");
   16da2:	2145      	movs	r1, #69	; 0x45
   16da4:	482f      	ldr	r0, [pc, #188]	; (16e64 <bt_acl_recv+0xd4>)
   16da6:	f011 ff52 	bl	28c4e <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   16daa:	4620      	mov	r0, r4
   16dac:	f013 fefc 	bl	2aba8 <bt_conn_reset_rx_state>
		conn->rx = buf;
   16db0:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   16db2:	6921      	ldr	r1, [r4, #16]
   16db4:	898a      	ldrh	r2, [r1, #12]
   16db6:	2a01      	cmp	r2, #1
   16db8:	d94b      	bls.n	16e52 <bt_acl_recv+0xc2>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   16dba:	688b      	ldr	r3, [r1, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   16dbc:	7858      	ldrb	r0, [r3, #1]
   16dbe:	781b      	ldrb	r3, [r3, #0]
   16dc0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   16dc4:	3304      	adds	r3, #4
   16dc6:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   16dc8:	429a      	cmp	r2, r3
   16dca:	d342      	bcc.n	16e52 <bt_acl_recv+0xc2>
	if (conn->rx->len > acl_total_len) {
   16dcc:	d842      	bhi.n	16e54 <bt_acl_recv+0xc4>
	conn->rx = NULL;
   16dce:	2300      	movs	r3, #0
   16dd0:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   16dd2:	2201      	movs	r2, #1
   16dd4:	4620      	mov	r0, r4
   16dd6:	f000 fe97 	bl	17b08 <bt_l2cap_recv>
   16dda:	e03a      	b.n	16e52 <bt_acl_recv+0xc2>
		if (!conn->rx) {
   16ddc:	6900      	ldr	r0, [r0, #16]
   16dde:	b180      	cbz	r0, 16e02 <bt_acl_recv+0x72>
		if (!buf->len) {
   16de0:	898e      	ldrh	r6, [r1, #12]
   16de2:	b1ce      	cbz	r6, 16e18 <bt_acl_recv+0x88>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   16de4:	3008      	adds	r0, #8
   16de6:	f016 fae7 	bl	2d3b8 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   16dea:	4286      	cmp	r6, r0
   16dec:	d818      	bhi.n	16e20 <bt_acl_recv+0x90>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   16dee:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16df0:	89aa      	ldrh	r2, [r5, #12]
   16df2:	68a9      	ldr	r1, [r5, #8]
   16df4:	3008      	adds	r0, #8
   16df6:	f016 fae8 	bl	2d3ca <net_buf_simple_add_mem>
		net_buf_unref(buf);
   16dfa:	4628      	mov	r0, r5
   16dfc:	f005 fed6 	bl	1cbac <net_buf_unref>
		break;
   16e00:	e7d7      	b.n	16db2 <bt_acl_recv+0x22>
			BT_ERR("Unexpected L2CAP continuation");
   16e02:	2145      	movs	r1, #69	; 0x45
   16e04:	4818      	ldr	r0, [pc, #96]	; (16e68 <bt_acl_recv+0xd8>)
   16e06:	f011 ff22 	bl	28c4e <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   16e0a:	4620      	mov	r0, r4
   16e0c:	f013 fecc 	bl	2aba8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   16e10:	4628      	mov	r0, r5
   16e12:	f005 fecb 	bl	1cbac <net_buf_unref>
			return;
   16e16:	e01c      	b.n	16e52 <bt_acl_recv+0xc2>
			net_buf_unref(buf);
   16e18:	4608      	mov	r0, r1
   16e1a:	f005 fec7 	bl	1cbac <net_buf_unref>
			return;
   16e1e:	e018      	b.n	16e52 <bt_acl_recv+0xc2>
			BT_ERR("Not enough buffer space for L2CAP data");
   16e20:	2145      	movs	r1, #69	; 0x45
   16e22:	4812      	ldr	r0, [pc, #72]	; (16e6c <bt_acl_recv+0xdc>)
   16e24:	f011 ff13 	bl	28c4e <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   16e28:	2200      	movs	r2, #0
   16e2a:	6921      	ldr	r1, [r4, #16]
   16e2c:	4620      	mov	r0, r4
   16e2e:	f000 fe6b 	bl	17b08 <bt_l2cap_recv>
			conn->rx = NULL;
   16e32:	2300      	movs	r3, #0
   16e34:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   16e36:	4628      	mov	r0, r5
   16e38:	f005 feb8 	bl	1cbac <net_buf_unref>
			return;
   16e3c:	e009      	b.n	16e52 <bt_acl_recv+0xc2>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   16e3e:	2145      	movs	r1, #69	; 0x45
   16e40:	480b      	ldr	r0, [pc, #44]	; (16e70 <bt_acl_recv+0xe0>)
   16e42:	f011 ff04 	bl	28c4e <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   16e46:	4620      	mov	r0, r4
   16e48:	f013 feae 	bl	2aba8 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   16e4c:	4628      	mov	r0, r5
   16e4e:	f005 fead 	bl	1cbac <net_buf_unref>
}
   16e52:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("ACL len mismatch (%u > %u)",
   16e54:	2145      	movs	r1, #69	; 0x45
   16e56:	4807      	ldr	r0, [pc, #28]	; (16e74 <bt_acl_recv+0xe4>)
   16e58:	f011 fef9 	bl	28c4e <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   16e5c:	4620      	mov	r0, r4
   16e5e:	f013 fea3 	bl	2aba8 <bt_conn_reset_rx_state>
		return;
   16e62:	e7f6      	b.n	16e52 <bt_acl_recv+0xc2>
   16e64:	000319e4 	.word	0x000319e4
   16e68:	00031a08 	.word	0x00031a08
   16e6c:	00031a2c 	.word	0x00031a2c
   16e70:	00031a58 	.word	0x00031a58
   16e74:	00031a7c 	.word	0x00031a7c

00016e78 <conn_cleanup>:
{
   16e78:	b538      	push	{r3, r4, r5, lr}
   16e7a:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   16e7c:	2200      	movs	r2, #0
   16e7e:	2300      	movs	r3, #0
   16e80:	f105 0038 	add.w	r0, r5, #56	; 0x38
   16e84:	f005 fd3c 	bl	1c900 <net_buf_get>
   16e88:	4603      	mov	r3, r0
   16e8a:	b160      	cbz	r0, 16ea6 <conn_cleanup+0x2e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   16e8c:	695c      	ldr	r4, [r3, #20]
		tx_data(buf)->tx = NULL;
   16e8e:	2200      	movs	r2, #0
   16e90:	615a      	str	r2, [r3, #20]
		net_buf_unref(buf);
   16e92:	4618      	mov	r0, r3
   16e94:	f005 fe8a 	bl	1cbac <net_buf_unref>
		if (tx) {
   16e98:	2c00      	cmp	r4, #0
   16e9a:	d0ef      	beq.n	16e7c <conn_cleanup+0x4>
			conn_tx_destroy(conn, tx);
   16e9c:	4621      	mov	r1, r4
   16e9e:	4628      	mov	r0, r5
   16ea0:	f7ff fe4a 	bl	16b38 <conn_tx_destroy>
   16ea4:	e7ea      	b.n	16e7c <conn_cleanup+0x4>
	return list->head;
   16ea6:	696b      	ldr	r3, [r5, #20]
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   16ea8:	b95b      	cbnz	r3, 16ec2 <conn_cleanup+0x4a>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   16eaa:	69eb      	ldr	r3, [r5, #28]
   16eac:	b9ab      	cbnz	r3, 16eda <conn_cleanup+0x62>
	bt_conn_reset_rx_state(conn);
   16eae:	4628      	mov	r0, r5
   16eb0:	f013 fe7a 	bl	2aba8 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   16eb4:	2200      	movs	r2, #0
   16eb6:	2300      	movs	r3, #0
   16eb8:	f105 0060 	add.w	r0, r5, #96	; 0x60
   16ebc:	f00c f94e 	bl	2315c <k_work_reschedule>
}
   16ec0:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   16ec2:	4c0c      	ldr	r4, [pc, #48]	; (16ef4 <conn_cleanup+0x7c>)
   16ec4:	f240 22b6 	movw	r2, #694	; 0x2b6
   16ec8:	4621      	mov	r1, r4
   16eca:	480b      	ldr	r0, [pc, #44]	; (16ef8 <conn_cleanup+0x80>)
   16ecc:	f011 fe9f 	bl	28c0e <assert_print>
   16ed0:	f240 21b6 	movw	r1, #694	; 0x2b6
   16ed4:	4620      	mov	r0, r4
   16ed6:	f011 fe93 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   16eda:	4c06      	ldr	r4, [pc, #24]	; (16ef4 <conn_cleanup+0x7c>)
   16edc:	f240 22b7 	movw	r2, #695	; 0x2b7
   16ee0:	4621      	mov	r1, r4
   16ee2:	4805      	ldr	r0, [pc, #20]	; (16ef8 <conn_cleanup+0x80>)
   16ee4:	f011 fe93 	bl	28c0e <assert_print>
   16ee8:	f240 21b7 	movw	r1, #695	; 0x2b7
   16eec:	4620      	mov	r0, r4
   16eee:	f011 fe87 	bl	28c00 <assert_post_action>
   16ef2:	bf00      	nop
   16ef4:	000319b4 	.word	0x000319b4
   16ef8:	00030128 	.word	0x00030128

00016efc <bt_conn_send_cb>:
{
   16efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f00:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   16f02:	7b43      	ldrb	r3, [r0, #13]
   16f04:	2b07      	cmp	r3, #7
   16f06:	d117      	bne.n	16f38 <bt_conn_send_cb+0x3c>
   16f08:	4604      	mov	r4, r0
   16f0a:	460d      	mov	r5, r1
   16f0c:	4616      	mov	r6, r2
	if (cb) {
   16f0e:	b35a      	cbz	r2, 16f68 <bt_conn_send_cb+0x6c>
		tx = conn_tx_alloc();
   16f10:	f7ff fe64 	bl	16bdc <conn_tx_alloc>
		if (!tx) {
   16f14:	4680      	mov	r8, r0
   16f16:	b1b0      	cbz	r0, 16f46 <bt_conn_send_cb+0x4a>
		if (conn->state != BT_CONN_CONNECTED) {
   16f18:	7b63      	ldrb	r3, [r4, #13]
   16f1a:	2b07      	cmp	r3, #7
   16f1c:	d11a      	bne.n	16f54 <bt_conn_send_cb+0x58>
		tx->cb = cb;
   16f1e:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   16f20:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   16f22:	2300      	movs	r3, #0
   16f24:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   16f26:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   16f28:	4629      	mov	r1, r5
   16f2a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16f2e:	f005 fe11 	bl	1cb54 <net_buf_put>
	return 0;
   16f32:	2000      	movs	r0, #0
}
   16f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("not connected!");
   16f38:	2145      	movs	r1, #69	; 0x45
   16f3a:	480d      	ldr	r0, [pc, #52]	; (16f70 <bt_conn_send_cb+0x74>)
   16f3c:	f011 fe87 	bl	28c4e <z_log_minimal_printk>
		return -ENOTCONN;
   16f40:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16f44:	e7f6      	b.n	16f34 <bt_conn_send_cb+0x38>
			BT_ERR("Unable to allocate TX context");
   16f46:	2145      	movs	r1, #69	; 0x45
   16f48:	480a      	ldr	r0, [pc, #40]	; (16f74 <bt_conn_send_cb+0x78>)
   16f4a:	f011 fe80 	bl	28c4e <z_log_minimal_printk>
			return -ENOBUFS;
   16f4e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16f52:	e7ef      	b.n	16f34 <bt_conn_send_cb+0x38>
			BT_WARN("Disconnected while allocating context");
   16f54:	2157      	movs	r1, #87	; 0x57
   16f56:	4808      	ldr	r0, [pc, #32]	; (16f78 <bt_conn_send_cb+0x7c>)
   16f58:	f011 fe79 	bl	28c4e <z_log_minimal_printk>
			tx_free(tx);
   16f5c:	4640      	mov	r0, r8
   16f5e:	f7ff fda9 	bl	16ab4 <tx_free>
			return -ENOTCONN;
   16f62:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16f66:	e7e5      	b.n	16f34 <bt_conn_send_cb+0x38>
		tx_data(buf)->tx = NULL;
   16f68:	2300      	movs	r3, #0
   16f6a:	614b      	str	r3, [r1, #20]
   16f6c:	e7dc      	b.n	16f28 <bt_conn_send_cb+0x2c>
   16f6e:	bf00      	nop
   16f70:	00031a9c 	.word	0x00031a9c
   16f74:	00031ab0 	.word	0x00031ab0
   16f78:	00031ad4 	.word	0x00031ad4

00016f7c <bt_conn_prepare_events>:
{
   16f7c:	b570      	push	{r4, r5, r6, lr}
   16f7e:	4606      	mov	r6, r0
	z_impl_k_poll_signal_init(sig);
   16f80:	4c0e      	ldr	r4, [pc, #56]	; (16fbc <bt_conn_prepare_events+0x40>)
   16f82:	4620      	mov	r0, r4
   16f84:	f018 fb38 	bl	2f5f8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   16f88:	4623      	mov	r3, r4
   16f8a:	2200      	movs	r2, #0
   16f8c:	2101      	movs	r1, #1
   16f8e:	4630      	mov	r0, r6
   16f90:	f00d ff76 	bl	24e80 <k_poll_event_init>
   16f94:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16f96:	2400      	movs	r4, #0
   16f98:	b10c      	cbz	r4, 16f9e <bt_conn_prepare_events+0x22>
}
   16f9a:	4628      	mov	r0, r5
   16f9c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn_prepare_events(conn, &events[ev_count])) {
   16f9e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   16fa2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   16fa6:	20c8      	movs	r0, #200	; 0xc8
   16fa8:	4b05      	ldr	r3, [pc, #20]	; (16fc0 <bt_conn_prepare_events+0x44>)
   16faa:	fb00 3004 	mla	r0, r0, r4, r3
   16fae:	f013 fe04 	bl	2abba <conn_prepare_events>
   16fb2:	b900      	cbnz	r0, 16fb6 <bt_conn_prepare_events+0x3a>
			ev_count++;
   16fb4:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16fb6:	3401      	adds	r4, #1
   16fb8:	e7ee      	b.n	16f98 <bt_conn_prepare_events+0x1c>
   16fba:	bf00      	nop
   16fbc:	200006dc 	.word	0x200006dc
   16fc0:	20001b20 	.word	0x20001b20

00016fc4 <bt_conn_ref>:
{
   16fc4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   16fc6:	4603      	mov	r3, r0
   16fc8:	b1c0      	cbz	r0, 16ffc <bt_conn_ref+0x38>
		old = atomic_get(&conn->ref);
   16fca:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16fce:	f3bf 8f5b 	dmb	ish
   16fd2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   16fd6:	f3bf 8f5b 	dmb	ish
		if (!old) {
   16fda:	b1da      	cbz	r2, 17014 <bt_conn_ref+0x50>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   16fdc:	1c50      	adds	r0, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16fde:	f3bf 8f5b 	dmb	ish
   16fe2:	e851 cf00 	ldrex	ip, [r1]
   16fe6:	4594      	cmp	ip, r2
   16fe8:	d103      	bne.n	16ff2 <bt_conn_ref+0x2e>
   16fea:	e841 0400 	strex	r4, r0, [r1]
   16fee:	2c00      	cmp	r4, #0
   16ff0:	d1f7      	bne.n	16fe2 <bt_conn_ref+0x1e>
   16ff2:	f3bf 8f5b 	dmb	ish
   16ff6:	d1e8      	bne.n	16fca <bt_conn_ref+0x6>
}
   16ff8:	4618      	mov	r0, r3
   16ffa:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   16ffc:	4c06      	ldr	r4, [pc, #24]	; (17018 <bt_conn_ref+0x54>)
   16ffe:	f44f 628f 	mov.w	r2, #1144	; 0x478
   17002:	4621      	mov	r1, r4
   17004:	4805      	ldr	r0, [pc, #20]	; (1701c <bt_conn_ref+0x58>)
   17006:	f011 fe02 	bl	28c0e <assert_print>
   1700a:	f44f 618f 	mov.w	r1, #1144	; 0x478
   1700e:	4620      	mov	r0, r4
   17010:	f011 fdf6 	bl	28c00 <assert_post_action>
			return NULL;
   17014:	2300      	movs	r3, #0
   17016:	e7ef      	b.n	16ff8 <bt_conn_ref+0x34>
   17018:	000319b4 	.word	0x000319b4
   1701c:	00030128 	.word	0x00030128

00017020 <bt_conn_unref>:
{
   17020:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   17022:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   17026:	f3bf 8f5b 	dmb	ish
   1702a:	e853 2f00 	ldrex	r2, [r3]
   1702e:	1e51      	subs	r1, r2, #1
   17030:	e843 1c00 	strex	ip, r1, [r3]
   17034:	f1bc 0f00 	cmp.w	ip, #0
   17038:	d1f7      	bne.n	1702a <bt_conn_unref+0xa>
   1703a:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   1703e:	2a00      	cmp	r2, #0
   17040:	dd05      	ble.n	1704e <bt_conn_unref+0x2e>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   17042:	8842      	ldrh	r2, [r0, #2]
   17044:	f240 1301 	movw	r3, #257	; 0x101
   17048:	429a      	cmp	r2, r3
   1704a:	d00c      	beq.n	17066 <bt_conn_unref+0x46>
}
   1704c:	bd10      	pop	{r4, pc}
	__ASSERT(old > 0, "Conn reference counter is 0");
   1704e:	4c0b      	ldr	r4, [pc, #44]	; (1707c <bt_conn_unref+0x5c>)
   17050:	f240 4295 	movw	r2, #1173	; 0x495
   17054:	4621      	mov	r1, r4
   17056:	480a      	ldr	r0, [pc, #40]	; (17080 <bt_conn_unref+0x60>)
   17058:	f011 fdd9 	bl	28c0e <assert_print>
   1705c:	f240 4195 	movw	r1, #1173	; 0x495
   17060:	4620      	mov	r0, r4
   17062:	f011 fdcd 	bl	28c00 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17066:	f3bf 8f5b 	dmb	ish
   1706a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   1706e:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   17072:	2b00      	cmp	r3, #0
   17074:	d1ea      	bne.n	1704c <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   17076:	f013 fc36 	bl	2a8e6 <bt_le_adv_resume>
}
   1707a:	e7e7      	b.n	1704c <bt_conn_unref+0x2c>
   1707c:	000319b4 	.word	0x000319b4
   17080:	00030128 	.word	0x00030128

00017084 <bt_conn_lookup_handle>:
{
   17084:	b508      	push	{r3, lr}
   17086:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   17088:	2101      	movs	r1, #1
   1708a:	4802      	ldr	r0, [pc, #8]	; (17094 <bt_conn_lookup_handle+0x10>)
   1708c:	f013 fdcd 	bl	2ac2a <conn_lookup_handle>
}
   17090:	bd08      	pop	{r3, pc}
   17092:	bf00      	nop
   17094:	20001b20 	.word	0x20001b20

00017098 <bt_conn_set_state>:
{
   17098:	b570      	push	{r4, r5, r6, lr}
   1709a:	460d      	mov	r5, r1
	if (conn->state == state) {
   1709c:	7b46      	ldrb	r6, [r0, #13]
   1709e:	428e      	cmp	r6, r1
   170a0:	d010      	beq.n	170c4 <bt_conn_set_state+0x2c>
   170a2:	4604      	mov	r4, r0
	conn->state = state;
   170a4:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   170a6:	b916      	cbnz	r6, 170ae <bt_conn_set_state+0x16>
		if (conn->type != BT_CONN_TYPE_ISO) {
   170a8:	7883      	ldrb	r3, [r0, #2]
   170aa:	2b08      	cmp	r3, #8
   170ac:	d113      	bne.n	170d6 <bt_conn_set_state+0x3e>
	switch (conn->state) {
   170ae:	7b63      	ldrb	r3, [r4, #13]
   170b0:	2b08      	cmp	r3, #8
   170b2:	f200 8090 	bhi.w	171d6 <bt_conn_set_state+0x13e>
   170b6:	e8df f003 	tbb	[pc, r3]
   170ba:	8a2a      	.short	0x8a2a
   170bc:	8d8d8d8d 	.word	0x8d8d8d8d
   170c0:	118d      	.short	0x118d
   170c2:	8d          	.byte	0x8d
   170c3:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
   170c4:	4608      	mov	r0, r1
   170c6:	f7ff fcc3 	bl	16a50 <state2str>
   170ca:	4602      	mov	r2, r0
   170cc:	2157      	movs	r1, #87	; 0x57
   170ce:	4845      	ldr	r0, [pc, #276]	; (171e4 <bt_conn_set_state+0x14c>)
   170d0:	f011 fdbd 	bl	28c4e <z_log_minimal_printk>
		return;
   170d4:	e07e      	b.n	171d4 <bt_conn_set_state+0x13c>
			bt_conn_ref(conn);
   170d6:	f7ff ff75 	bl	16fc4 <bt_conn_ref>
   170da:	e7e8      	b.n	170ae <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
   170dc:	78a3      	ldrb	r3, [r4, #2]
   170de:	2b04      	cmp	r3, #4
   170e0:	d078      	beq.n	171d4 <bt_conn_set_state+0x13c>
		k_fifo_init(&conn->tx_queue);
   170e2:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   170e6:	f018 f877 	bl	2f1d8 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   170ea:	2100      	movs	r1, #0
   170ec:	483e      	ldr	r0, [pc, #248]	; (171e8 <bt_conn_set_state+0x150>)
   170ee:	f00d ffe7 	bl	250c0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   170f2:	2300      	movs	r3, #0
   170f4:	6563      	str	r3, [r4, #84]	; 0x54
	list->tail = NULL;
   170f6:	65a3      	str	r3, [r4, #88]	; 0x58
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   170f8:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   170fa:	2b01      	cmp	r3, #1
   170fc:	d16a      	bne.n	171d4 <bt_conn_set_state+0x13c>
			k_work_schedule(&conn->deferred_work,
   170fe:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   17102:	2300      	movs	r3, #0
   17104:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17108:	f00b ffca 	bl	230a0 <k_work_schedule>
   1710c:	e062      	b.n	171d4 <bt_conn_set_state+0x13c>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1710e:	78a3      	ldrb	r3, [r4, #2]
   17110:	2b04      	cmp	r3, #4
   17112:	d008      	beq.n	17126 <bt_conn_set_state+0x8e>
		switch (old_state) {
   17114:	2e08      	cmp	r6, #8
   17116:	d85d      	bhi.n	171d4 <bt_conn_set_state+0x13c>
   17118:	e8df f006 	tbb	[pc, r6]
   1711c:	4b370953 	.word	0x4b370953
   17120:	5c2d414f 	.word	0x5c2d414f
   17124:	53          	.byte	0x53
   17125:	00          	.byte	0x00
			bt_conn_unref(conn);
   17126:	4620      	mov	r0, r4
   17128:	f7ff ff7a 	bl	17020 <bt_conn_unref>
			break;
   1712c:	e052      	b.n	171d4 <bt_conn_set_state+0x13c>
			tx_notify(conn);
   1712e:	4620      	mov	r0, r4
   17130:	f013 fc5d 	bl	2a9ee <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   17134:	78a3      	ldrb	r3, [r4, #2]
   17136:	2b01      	cmp	r3, #1
   17138:	d011      	beq.n	1715e <bt_conn_set_state+0xc6>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   1713a:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1713c:	f3bf 8f5b 	dmb	ish
   17140:	e854 3f00 	ldrex	r3, [r4]
   17144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17148:	e844 3200 	strex	r2, r3, [r4]
   1714c:	2a00      	cmp	r2, #0
   1714e:	d1f7      	bne.n	17140 <bt_conn_set_state+0xa8>
   17150:	f3bf 8f5b 	dmb	ish
   17154:	2100      	movs	r1, #0
   17156:	4824      	ldr	r0, [pc, #144]	; (171e8 <bt_conn_set_state+0x150>)
   17158:	f00d ffb2 	bl	250c0 <z_impl_k_poll_signal_raise>
   1715c:	e03a      	b.n	171d4 <bt_conn_set_state+0x13c>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1715e:	f104 0560 	add.w	r5, r4, #96	; 0x60
   17162:	4628      	mov	r0, r5
   17164:	f00b ff0c 	bl	22f80 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   17168:	f010 0f0c 	tst.w	r0, #12
   1716c:	d0e5      	beq.n	1713a <bt_conn_set_state+0xa2>
				k_work_cancel_delayable(&conn->deferred_work);
   1716e:	4628      	mov	r0, r5
   17170:	f00b fffc 	bl	2316c <k_work_cancel_delayable>
   17174:	e7e1      	b.n	1713a <bt_conn_set_state+0xa2>
			if (conn->err) {
   17176:	7b23      	ldrb	r3, [r4, #12]
   17178:	b91b      	cbnz	r3, 17182 <bt_conn_set_state+0xea>
			bt_conn_unref(conn);
   1717a:	4620      	mov	r0, r4
   1717c:	f7ff ff50 	bl	17020 <bt_conn_unref>
			break;
   17180:	e028      	b.n	171d4 <bt_conn_set_state+0x13c>
				notify_connected(conn);
   17182:	4620      	mov	r0, r4
   17184:	f7ff fcf4 	bl	16b70 <notify_connected>
   17188:	e7f7      	b.n	1717a <bt_conn_set_state+0xe2>
			if (conn->err) {
   1718a:	7b23      	ldrb	r3, [r4, #12]
   1718c:	b91b      	cbnz	r3, 17196 <bt_conn_set_state+0xfe>
			bt_conn_unref(conn);
   1718e:	4620      	mov	r0, r4
   17190:	f7ff ff46 	bl	17020 <bt_conn_unref>
			break;
   17194:	e01e      	b.n	171d4 <bt_conn_set_state+0x13c>
				notify_connected(conn);
   17196:	4620      	mov	r0, r4
   17198:	f7ff fcea 	bl	16b70 <notify_connected>
   1719c:	e7f7      	b.n	1718e <bt_conn_set_state+0xf6>
			if (conn->err) {
   1719e:	7b23      	ldrb	r3, [r4, #12]
   171a0:	b91b      	cbnz	r3, 171aa <bt_conn_set_state+0x112>
			bt_conn_unref(conn);
   171a2:	4620      	mov	r0, r4
   171a4:	f7ff ff3c 	bl	17020 <bt_conn_unref>
			break;
   171a8:	e014      	b.n	171d4 <bt_conn_set_state+0x13c>
				notify_connected(conn);
   171aa:	4620      	mov	r0, r4
   171ac:	f7ff fce0 	bl	16b70 <notify_connected>
   171b0:	e7f7      	b.n	171a2 <bt_conn_set_state+0x10a>
			bt_conn_unref(conn);
   171b2:	4620      	mov	r0, r4
   171b4:	f7ff ff34 	bl	17020 <bt_conn_unref>
			break;
   171b8:	e00c      	b.n	171d4 <bt_conn_set_state+0x13c>
			bt_conn_unref(conn);
   171ba:	4620      	mov	r0, r4
   171bc:	f7ff ff30 	bl	17020 <bt_conn_unref>
			break;
   171c0:	e008      	b.n	171d4 <bt_conn_set_state+0x13c>
			BT_WARN("Invalid (%u) old state", state);
   171c2:	462a      	mov	r2, r5
   171c4:	2157      	movs	r1, #87	; 0x57
   171c6:	4809      	ldr	r0, [pc, #36]	; (171ec <bt_conn_set_state+0x154>)
   171c8:	f011 fd41 	bl	28c4e <z_log_minimal_printk>
   171cc:	e002      	b.n	171d4 <bt_conn_set_state+0x13c>
		process_unack_tx(conn);
   171ce:	4620      	mov	r0, r4
   171d0:	f013 fca8 	bl	2ab24 <process_unack_tx>
}
   171d4:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("no valid (%u) state was set", state);
   171d6:	462a      	mov	r2, r5
   171d8:	2157      	movs	r1, #87	; 0x57
   171da:	4805      	ldr	r0, [pc, #20]	; (171f0 <bt_conn_set_state+0x158>)
   171dc:	f011 fd37 	bl	28c4e <z_log_minimal_printk>
   171e0:	e7f8      	b.n	171d4 <bt_conn_set_state+0x13c>
   171e2:	bf00      	nop
   171e4:	00031b00 	.word	0x00031b00
   171e8:	200006dc 	.word	0x200006dc
   171ec:	00031b18 	.word	0x00031b18
   171f0:	00031b34 	.word	0x00031b34

000171f4 <bt_conn_index>:
		index = conn - acl_conns;
   171f4:	4a0b      	ldr	r2, [pc, #44]	; (17224 <bt_conn_index+0x30>)
   171f6:	1a83      	subs	r3, r0, r2
   171f8:	10db      	asrs	r3, r3, #3
   171fa:	490b      	ldr	r1, [pc, #44]	; (17228 <bt_conn_index+0x34>)
   171fc:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   17200:	4290      	cmp	r0, r2
   17202:	d101      	bne.n	17208 <bt_conn_index+0x14>
}
   17204:	b2d8      	uxtb	r0, r3
   17206:	4770      	bx	lr
{
   17208:	b510      	push	{r4, lr}
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1720a:	4c08      	ldr	r4, [pc, #32]	; (1722c <bt_conn_index+0x38>)
   1720c:	f240 42b3 	movw	r2, #1203	; 0x4b3
   17210:	4621      	mov	r1, r4
   17212:	4807      	ldr	r0, [pc, #28]	; (17230 <bt_conn_index+0x3c>)
   17214:	f011 fcfb 	bl	28c0e <assert_print>
   17218:	f240 41b3 	movw	r1, #1203	; 0x4b3
   1721c:	4620      	mov	r0, r4
   1721e:	f011 fcef 	bl	28c00 <assert_post_action>
   17222:	bf00      	nop
   17224:	20001b20 	.word	0x20001b20
   17228:	c28f5c29 	.word	0xc28f5c29
   1722c:	000319b4 	.word	0x000319b4
   17230:	00030128 	.word	0x00030128

00017234 <bt_conn_create_pdu_timeout>:
{
   17234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17236:	4604      	mov	r4, r0
   17238:	460f      	mov	r7, r1
   1723a:	4616      	mov	r6, r2
   1723c:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   1723e:	f017 ff34 	bl	2f0aa <k_is_in_isr>
   17242:	b968      	cbnz	r0, 17260 <bt_conn_create_pdu_timeout+0x2c>
	if (!pool) {
   17244:	b1c4      	cbz	r4, 17278 <bt_conn_create_pdu_timeout+0x44>
	return net_buf_alloc_fixed(pool, timeout);
   17246:	4632      	mov	r2, r6
   17248:	462b      	mov	r3, r5
   1724a:	4620      	mov	r0, r4
   1724c:	f016 f8a1 	bl	2d392 <net_buf_alloc_fixed>
	if (!buf) {
   17250:	4604      	mov	r4, r0
   17252:	b198      	cbz	r0, 1727c <bt_conn_create_pdu_timeout+0x48>
	net_buf_simple_reserve(&buf->b, reserve);
   17254:	1d39      	adds	r1, r7, #4
   17256:	3008      	adds	r0, #8
   17258:	f005 fb7e 	bl	1c958 <net_buf_simple_reserve>
}
   1725c:	4620      	mov	r0, r4
   1725e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(!k_is_in_isr());
   17260:	4c09      	ldr	r4, [pc, #36]	; (17288 <bt_conn_create_pdu_timeout+0x54>)
   17262:	f240 42cf 	movw	r2, #1231	; 0x4cf
   17266:	4621      	mov	r1, r4
   17268:	4808      	ldr	r0, [pc, #32]	; (1728c <bt_conn_create_pdu_timeout+0x58>)
   1726a:	f011 fcd0 	bl	28c0e <assert_print>
   1726e:	f240 41cf 	movw	r1, #1231	; 0x4cf
   17272:	4620      	mov	r0, r4
   17274:	f011 fcc4 	bl	28c00 <assert_post_action>
		pool = &acl_tx_pool;
   17278:	4c05      	ldr	r4, [pc, #20]	; (17290 <bt_conn_create_pdu_timeout+0x5c>)
   1727a:	e7e4      	b.n	17246 <bt_conn_create_pdu_timeout+0x12>
		BT_WARN("Unable to allocate buffer within timeout");
   1727c:	2157      	movs	r1, #87	; 0x57
   1727e:	4805      	ldr	r0, [pc, #20]	; (17294 <bt_conn_create_pdu_timeout+0x60>)
   17280:	f011 fce5 	bl	28c4e <z_log_minimal_printk>
		return NULL;
   17284:	e7ea      	b.n	1725c <bt_conn_create_pdu_timeout+0x28>
   17286:	bf00      	nop
   17288:	000319b4 	.word	0x000319b4
   1728c:	00030128 	.word	0x00030128
   17290:	20000a9c 	.word	0x20000a9c
   17294:	00031b58 	.word	0x00031b58

00017298 <notify_le_param_updated>:
{
   17298:	b570      	push	{r4, r5, r6, lr}
   1729a:	4605      	mov	r5, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1729c:	1d04      	adds	r4, r0, #4
   1729e:	2108      	movs	r1, #8
   172a0:	4620      	mov	r0, r4
   172a2:	f013 fbe8 	bl	2aa76 <atomic_test_bit>
   172a6:	b178      	cbz	r0, 172c8 <notify_le_param_updated+0x30>
	    conn->le.interval >= conn->le.interval_min &&
   172a8:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
   172ac:	f8b5 20a8 	ldrh.w	r2, [r5, #168]	; 0xa8
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   172b0:	4293      	cmp	r3, r2
   172b2:	d309      	bcc.n	172c8 <notify_le_param_updated+0x30>
	    conn->le.interval <= conn->le.interval_max &&
   172b4:	f8b5 20aa 	ldrh.w	r2, [r5, #170]	; 0xaa
	    conn->le.interval >= conn->le.interval_min &&
   172b8:	4293      	cmp	r3, r2
   172ba:	d805      	bhi.n	172c8 <notify_le_param_updated+0x30>
	    conn->le.latency == conn->le.pending_latency &&
   172bc:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
   172c0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   172c4:	429a      	cmp	r2, r3
   172c6:	d002      	beq.n	172ce <notify_le_param_updated+0x36>
	for (cb = callback_list; cb; cb = cb->_next) {
   172c8:	4b1f      	ldr	r3, [pc, #124]	; (17348 <notify_le_param_updated+0xb0>)
   172ca:	681c      	ldr	r4, [r3, #0]
   172cc:	e00d      	b.n	172ea <notify_le_param_updated+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   172ce:	f3bf 8f5b 	dmb	ish
   172d2:	e854 3f00 	ldrex	r3, [r4]
   172d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   172da:	e844 3200 	strex	r2, r3, [r4]
   172de:	2a00      	cmp	r2, #0
   172e0:	d1f7      	bne.n	172d2 <notify_le_param_updated+0x3a>
   172e2:	f3bf 8f5b 	dmb	ish
}
   172e6:	e7ef      	b.n	172c8 <notify_le_param_updated+0x30>
   172e8:	69a4      	ldr	r4, [r4, #24]
   172ea:	b15c      	cbz	r4, 17304 <notify_le_param_updated+0x6c>
		if (cb->le_param_updated) {
   172ec:	68e6      	ldr	r6, [r4, #12]
   172ee:	2e00      	cmp	r6, #0
   172f0:	d0fa      	beq.n	172e8 <notify_le_param_updated+0x50>
			cb->le_param_updated(conn, conn->le.interval,
   172f2:	f8b5 30ae 	ldrh.w	r3, [r5, #174]	; 0xae
   172f6:	f8b5 20ac 	ldrh.w	r2, [r5, #172]	; 0xac
   172fa:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
   172fe:	4628      	mov	r0, r5
   17300:	47b0      	blx	r6
   17302:	e7f1      	b.n	172e8 <notify_le_param_updated+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17304:	4c11      	ldr	r4, [pc, #68]	; (1734c <notify_le_param_updated+0xb4>)
   17306:	e000      	b.n	1730a <notify_le_param_updated+0x72>
   17308:	341c      	adds	r4, #28
   1730a:	4b11      	ldr	r3, [pc, #68]	; (17350 <notify_le_param_updated+0xb8>)
   1730c:	429c      	cmp	r4, r3
   1730e:	d80e      	bhi.n	1732e <notify_le_param_updated+0x96>
   17310:	4b0f      	ldr	r3, [pc, #60]	; (17350 <notify_le_param_updated+0xb8>)
   17312:	429c      	cmp	r4, r3
   17314:	d217      	bcs.n	17346 <notify_le_param_updated+0xae>
		if (cb->le_param_updated) {
   17316:	68e6      	ldr	r6, [r4, #12]
   17318:	2e00      	cmp	r6, #0
   1731a:	d0f5      	beq.n	17308 <notify_le_param_updated+0x70>
			cb->le_param_updated(conn, conn->le.interval,
   1731c:	f8b5 30ae 	ldrh.w	r3, [r5, #174]	; 0xae
   17320:	f8b5 20ac 	ldrh.w	r2, [r5, #172]	; 0xac
   17324:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
   17328:	4628      	mov	r0, r5
   1732a:	47b0      	blx	r6
   1732c:	e7ec      	b.n	17308 <notify_le_param_updated+0x70>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1732e:	4c09      	ldr	r4, [pc, #36]	; (17354 <notify_le_param_updated+0xbc>)
   17330:	f240 52a2 	movw	r2, #1442	; 0x5a2
   17334:	4621      	mov	r1, r4
   17336:	4808      	ldr	r0, [pc, #32]	; (17358 <notify_le_param_updated+0xc0>)
   17338:	f011 fc69 	bl	28c0e <assert_print>
   1733c:	f240 51a2 	movw	r1, #1442	; 0x5a2
   17340:	4620      	mov	r0, r4
   17342:	f011 fc5d 	bl	28c00 <assert_post_action>
}
   17346:	bd70      	pop	{r4, r5, r6, pc}
   17348:	200029d8 	.word	0x200029d8
   1734c:	0002f9bc 	.word	0x0002f9bc
   17350:	0002f9d8 	.word	0x0002f9d8
   17354:	000319b4 	.word	0x000319b4
   17358:	00030128 	.word	0x00030128

0001735c <le_param_req>:
{
   1735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1735e:	4606      	mov	r6, r0
   17360:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   17362:	4608      	mov	r0, r1
   17364:	f012 ff98 	bl	2a298 <bt_le_conn_params_valid>
   17368:	4607      	mov	r7, r0
   1736a:	2800      	cmp	r0, #0
   1736c:	d036      	beq.n	173dc <le_param_req+0x80>
	for (cb = callback_list; cb; cb = cb->_next) {
   1736e:	4b1d      	ldr	r3, [pc, #116]	; (173e4 <le_param_req+0x88>)
   17370:	681c      	ldr	r4, [r3, #0]
   17372:	e000      	b.n	17376 <le_param_req+0x1a>
   17374:	69a4      	ldr	r4, [r4, #24]
   17376:	b16c      	cbz	r4, 17394 <le_param_req+0x38>
		if (!cb->le_param_req) {
   17378:	68a3      	ldr	r3, [r4, #8]
   1737a:	2b00      	cmp	r3, #0
   1737c:	d0fa      	beq.n	17374 <le_param_req+0x18>
		if (!cb->le_param_req(conn, param)) {
   1737e:	4629      	mov	r1, r5
   17380:	4630      	mov	r0, r6
   17382:	4798      	blx	r3
   17384:	b348      	cbz	r0, 173da <le_param_req+0x7e>
		if (!bt_le_conn_params_valid(param)) {
   17386:	4628      	mov	r0, r5
   17388:	f012 ff86 	bl	2a298 <bt_le_conn_params_valid>
   1738c:	2800      	cmp	r0, #0
   1738e:	d1f1      	bne.n	17374 <le_param_req+0x18>
			return false;
   17390:	4607      	mov	r7, r0
   17392:	e023      	b.n	173dc <le_param_req+0x80>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17394:	4c14      	ldr	r4, [pc, #80]	; (173e8 <le_param_req+0x8c>)
   17396:	e000      	b.n	1739a <le_param_req+0x3e>
   17398:	341c      	adds	r4, #28
   1739a:	4b14      	ldr	r3, [pc, #80]	; (173ec <le_param_req+0x90>)
   1739c:	429c      	cmp	r4, r3
   1739e:	d810      	bhi.n	173c2 <le_param_req+0x66>
   173a0:	4b12      	ldr	r3, [pc, #72]	; (173ec <le_param_req+0x90>)
   173a2:	429c      	cmp	r4, r3
   173a4:	d21a      	bcs.n	173dc <le_param_req+0x80>
		if (!cb->le_param_req) {
   173a6:	68a3      	ldr	r3, [r4, #8]
   173a8:	2b00      	cmp	r3, #0
   173aa:	d0f5      	beq.n	17398 <le_param_req+0x3c>
		if (!cb->le_param_req(conn, param)) {
   173ac:	4629      	mov	r1, r5
   173ae:	4630      	mov	r0, r6
   173b0:	4798      	blx	r3
   173b2:	b1a8      	cbz	r0, 173e0 <le_param_req+0x84>
		if (!bt_le_conn_params_valid(param)) {
   173b4:	4628      	mov	r0, r5
   173b6:	f012 ff6f 	bl	2a298 <bt_le_conn_params_valid>
   173ba:	2800      	cmp	r0, #0
   173bc:	d1ec      	bne.n	17398 <le_param_req+0x3c>
			return false;
   173be:	4607      	mov	r7, r0
   173c0:	e00c      	b.n	173dc <le_param_req+0x80>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   173c2:	4c0b      	ldr	r4, [pc, #44]	; (173f0 <le_param_req+0x94>)
   173c4:	f240 52ea 	movw	r2, #1514	; 0x5ea
   173c8:	4621      	mov	r1, r4
   173ca:	480a      	ldr	r0, [pc, #40]	; (173f4 <le_param_req+0x98>)
   173cc:	f011 fc1f 	bl	28c0e <assert_print>
   173d0:	f240 51ea 	movw	r1, #1514	; 0x5ea
   173d4:	4620      	mov	r0, r4
   173d6:	f011 fc13 	bl	28c00 <assert_post_action>
			return false;
   173da:	4607      	mov	r7, r0
}
   173dc:	4638      	mov	r0, r7
   173de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   173e0:	4607      	mov	r7, r0
   173e2:	e7fb      	b.n	173dc <le_param_req+0x80>
   173e4:	200029d8 	.word	0x200029d8
   173e8:	0002f9bc 	.word	0x0002f9bc
   173ec:	0002f9d8 	.word	0x0002f9d8
   173f0:	000319b4 	.word	0x000319b4
   173f4:	00030128 	.word	0x00030128

000173f8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   173f8:	b570      	push	{r4, r5, r6, lr}
   173fa:	4605      	mov	r5, r0
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   173fc:	78c3      	ldrb	r3, [r0, #3]
   173fe:	b923      	cbnz	r3, 1740a <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
   17400:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   17404:	4b17      	ldr	r3, [pc, #92]	; (17464 <bt_conn_identity_resolved+0x6c>)
   17406:	681c      	ldr	r4, [r3, #0]
   17408:	e003      	b.n	17412 <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
   1740a:	f100 0697 	add.w	r6, r0, #151	; 0x97
   1740e:	e7f9      	b.n	17404 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
   17410:	69a4      	ldr	r4, [r4, #24]
   17412:	b144      	cbz	r4, 17426 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
   17414:	6923      	ldr	r3, [r4, #16]
   17416:	2b00      	cmp	r3, #0
   17418:	d0fa      	beq.n	17410 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1741a:	f105 0290 	add.w	r2, r5, #144	; 0x90
   1741e:	4631      	mov	r1, r6
   17420:	4628      	mov	r0, r5
   17422:	4798      	blx	r3
   17424:	e7f4      	b.n	17410 <bt_conn_identity_resolved+0x18>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17426:	4c10      	ldr	r4, [pc, #64]	; (17468 <bt_conn_identity_resolved+0x70>)
   17428:	e000      	b.n	1742c <bt_conn_identity_resolved+0x34>
   1742a:	341c      	adds	r4, #28
   1742c:	4b0f      	ldr	r3, [pc, #60]	; (1746c <bt_conn_identity_resolved+0x74>)
   1742e:	429c      	cmp	r4, r3
   17430:	d80b      	bhi.n	1744a <bt_conn_identity_resolved+0x52>
   17432:	4b0e      	ldr	r3, [pc, #56]	; (1746c <bt_conn_identity_resolved+0x74>)
   17434:	429c      	cmp	r4, r3
   17436:	d214      	bcs.n	17462 <bt_conn_identity_resolved+0x6a>
		if (cb->identity_resolved) {
   17438:	6923      	ldr	r3, [r4, #16]
   1743a:	2b00      	cmp	r3, #0
   1743c:	d0f5      	beq.n	1742a <bt_conn_identity_resolved+0x32>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1743e:	f105 0290 	add.w	r2, r5, #144	; 0x90
   17442:	4631      	mov	r1, r6
   17444:	4628      	mov	r0, r5
   17446:	4798      	blx	r3
   17448:	e7ef      	b.n	1742a <bt_conn_identity_resolved+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1744a:	4c09      	ldr	r4, [pc, #36]	; (17470 <bt_conn_identity_resolved+0x78>)
   1744c:	f240 72a7 	movw	r2, #1959	; 0x7a7
   17450:	4621      	mov	r1, r4
   17452:	4808      	ldr	r0, [pc, #32]	; (17474 <bt_conn_identity_resolved+0x7c>)
   17454:	f011 fbdb 	bl	28c0e <assert_print>
   17458:	f240 71a7 	movw	r1, #1959	; 0x7a7
   1745c:	4620      	mov	r0, r4
   1745e:	f011 fbcf 	bl	28c00 <assert_post_action>
		}
	}
}
   17462:	bd70      	pop	{r4, r5, r6, pc}
   17464:	200029d8 	.word	0x200029d8
   17468:	0002f9bc 	.word	0x0002f9bc
   1746c:	0002f9d8 	.word	0x0002f9d8
   17470:	000319b4 	.word	0x000319b4
   17474:	00030128 	.word	0x00030128

00017478 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   17478:	b570      	push	{r4, r5, r6, lr}
   1747a:	4605      	mov	r5, r0
   1747c:	460c      	mov	r4, r1
   1747e:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
   17480:	f013 fab2 	bl	2a9e8 <reset_pairing>
	bt_l2cap_security_changed(conn, hci_err);
   17484:	4621      	mov	r1, r4
   17486:	4628      	mov	r0, r5
   17488:	f013 fd02 	bl	2ae90 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1748c:	4b15      	ldr	r3, [pc, #84]	; (174e4 <bt_conn_security_changed+0x6c>)
   1748e:	681c      	ldr	r4, [r3, #0]
   17490:	e000      	b.n	17494 <bt_conn_security_changed+0x1c>
   17492:	69a4      	ldr	r4, [r4, #24]
   17494:	b13c      	cbz	r4, 174a6 <bt_conn_security_changed+0x2e>
		if (cb->security_changed) {
   17496:	6963      	ldr	r3, [r4, #20]
   17498:	2b00      	cmp	r3, #0
   1749a:	d0fa      	beq.n	17492 <bt_conn_security_changed+0x1a>
			cb->security_changed(conn, conn->sec_level, err);
   1749c:	4632      	mov	r2, r6
   1749e:	7a69      	ldrb	r1, [r5, #9]
   174a0:	4628      	mov	r0, r5
   174a2:	4798      	blx	r3
   174a4:	e7f5      	b.n	17492 <bt_conn_security_changed+0x1a>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   174a6:	4c10      	ldr	r4, [pc, #64]	; (174e8 <bt_conn_security_changed+0x70>)
   174a8:	e000      	b.n	174ac <bt_conn_security_changed+0x34>
   174aa:	341c      	adds	r4, #28
   174ac:	4b0f      	ldr	r3, [pc, #60]	; (174ec <bt_conn_security_changed+0x74>)
   174ae:	429c      	cmp	r4, r3
   174b0:	d80a      	bhi.n	174c8 <bt_conn_security_changed+0x50>
   174b2:	4b0e      	ldr	r3, [pc, #56]	; (174ec <bt_conn_security_changed+0x74>)
   174b4:	429c      	cmp	r4, r3
   174b6:	d213      	bcs.n	174e0 <bt_conn_security_changed+0x68>
		if (cb->security_changed) {
   174b8:	6963      	ldr	r3, [r4, #20]
   174ba:	2b00      	cmp	r3, #0
   174bc:	d0f5      	beq.n	174aa <bt_conn_security_changed+0x32>
			cb->security_changed(conn, conn->sec_level, err);
   174be:	4632      	mov	r2, r6
   174c0:	7a69      	ldrb	r1, [r5, #9]
   174c2:	4628      	mov	r0, r5
   174c4:	4798      	blx	r3
   174c6:	e7f0      	b.n	174aa <bt_conn_security_changed+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   174c8:	4c09      	ldr	r4, [pc, #36]	; (174f0 <bt_conn_security_changed+0x78>)
   174ca:	f640 0213 	movw	r2, #2067	; 0x813
   174ce:	4621      	mov	r1, r4
   174d0:	4808      	ldr	r0, [pc, #32]	; (174f4 <bt_conn_security_changed+0x7c>)
   174d2:	f011 fb9c 	bl	28c0e <assert_print>
   174d6:	f640 0113 	movw	r1, #2067	; 0x813
   174da:	4620      	mov	r0, r4
   174dc:	f011 fb90 	bl	28c00 <assert_post_action>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   174e0:	bd70      	pop	{r4, r5, r6, pc}
   174e2:	bf00      	nop
   174e4:	200029d8 	.word	0x200029d8
   174e8:	0002f9bc 	.word	0x0002f9bc
   174ec:	0002f9d8 	.word	0x0002f9d8
   174f0:	000319b4 	.word	0x000319b4
   174f4:	00030128 	.word	0x00030128

000174f8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   174f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   174fa:	4607      	mov	r7, r0
   174fc:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   174fe:	2400      	movs	r4, #0
   17500:	b114      	cbz	r4, 17508 <bt_conn_lookup_addr_le+0x10>
		}

		return conn;
	}

	return NULL;
   17502:	2500      	movs	r5, #0
}
   17504:	4628      	mov	r0, r5
   17506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17508:	20c8      	movs	r0, #200	; 0xc8
   1750a:	4b0c      	ldr	r3, [pc, #48]	; (1753c <bt_conn_lookup_addr_le+0x44>)
   1750c:	fb00 3004 	mla	r0, r0, r4, r3
   17510:	f7ff fd58 	bl	16fc4 <bt_conn_ref>
		if (!conn) {
   17514:	4605      	mov	r5, r0
   17516:	b170      	cbz	r0, 17536 <bt_conn_lookup_addr_le+0x3e>
		if (conn->type != BT_CONN_TYPE_LE) {
   17518:	7883      	ldrb	r3, [r0, #2]
   1751a:	2b01      	cmp	r3, #1
   1751c:	d109      	bne.n	17532 <bt_conn_lookup_addr_le+0x3a>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1751e:	4632      	mov	r2, r6
   17520:	4639      	mov	r1, r7
   17522:	f013 fc1c 	bl	2ad5e <bt_conn_is_peer_addr_le>
   17526:	2800      	cmp	r0, #0
   17528:	d1ec      	bne.n	17504 <bt_conn_lookup_addr_le+0xc>
			bt_conn_unref(conn);
   1752a:	4628      	mov	r0, r5
   1752c:	f7ff fd78 	bl	17020 <bt_conn_unref>
			continue;
   17530:	e001      	b.n	17536 <bt_conn_lookup_addr_le+0x3e>
			bt_conn_unref(conn);
   17532:	f7ff fd75 	bl	17020 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17536:	3401      	adds	r4, #1
   17538:	e7e2      	b.n	17500 <bt_conn_lookup_addr_le+0x8>
   1753a:	bf00      	nop
   1753c:	20001b20 	.word	0x20001b20

00017540 <bt_conn_exists_le>:
{
   17540:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   17542:	f7ff ffd9 	bl	174f8 <bt_conn_lookup_addr_le>
	if (conn) {
   17546:	b908      	cbnz	r0, 1754c <bt_conn_exists_le+0xc>
	return false;
   17548:	2000      	movs	r0, #0
}
   1754a:	bd10      	pop	{r4, pc}
   1754c:	4604      	mov	r4, r0
		BT_WARN("Found valid connection in %s state",
   1754e:	7b40      	ldrb	r0, [r0, #13]
   17550:	f7ff fa7e 	bl	16a50 <state2str>
   17554:	4602      	mov	r2, r0
   17556:	2157      	movs	r1, #87	; 0x57
   17558:	4803      	ldr	r0, [pc, #12]	; (17568 <bt_conn_exists_le+0x28>)
   1755a:	f011 fb78 	bl	28c4e <z_log_minimal_printk>
		bt_conn_unref(conn);
   1755e:	4620      	mov	r0, r4
   17560:	f7ff fd5e 	bl	17020 <bt_conn_unref>
		return true;
   17564:	2001      	movs	r0, #1
   17566:	e7f0      	b.n	1754a <bt_conn_exists_le+0xa>
   17568:	00031b88 	.word	0x00031b88

0001756c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1756c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17570:	4680      	mov	r8, r0
   17572:	460f      	mov	r7, r1
   17574:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17576:	2400      	movs	r4, #0
   17578:	b11c      	cbz	r4, 17582 <bt_conn_lookup_state_le+0x16>
		}

		return conn;
	}

	return NULL;
   1757a:	2500      	movs	r5, #0
}
   1757c:	4628      	mov	r0, r5
   1757e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17582:	20c8      	movs	r0, #200	; 0xc8
   17584:	4b10      	ldr	r3, [pc, #64]	; (175c8 <bt_conn_lookup_state_le+0x5c>)
   17586:	fb00 3004 	mla	r0, r0, r4, r3
   1758a:	f7ff fd1b 	bl	16fc4 <bt_conn_ref>
		if (!conn) {
   1758e:	4605      	mov	r5, r0
   17590:	b188      	cbz	r0, 175b6 <bt_conn_lookup_state_le+0x4a>
		if (conn->type != BT_CONN_TYPE_LE) {
   17592:	7883      	ldrb	r3, [r0, #2]
   17594:	2b01      	cmp	r3, #1
   17596:	d110      	bne.n	175ba <bt_conn_lookup_state_le+0x4e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   17598:	b127      	cbz	r7, 175a4 <bt_conn_lookup_state_le+0x38>
   1759a:	463a      	mov	r2, r7
   1759c:	4641      	mov	r1, r8
   1759e:	f013 fbde 	bl	2ad5e <bt_conn_is_peer_addr_le>
   175a2:	b168      	cbz	r0, 175c0 <bt_conn_lookup_state_le+0x54>
		if (!(conn->state == state && conn->id == id)) {
   175a4:	7b6b      	ldrb	r3, [r5, #13]
   175a6:	42b3      	cmp	r3, r6
   175a8:	d102      	bne.n	175b0 <bt_conn_lookup_state_le+0x44>
   175aa:	7a2b      	ldrb	r3, [r5, #8]
   175ac:	4543      	cmp	r3, r8
   175ae:	d0e5      	beq.n	1757c <bt_conn_lookup_state_le+0x10>
			bt_conn_unref(conn);
   175b0:	4628      	mov	r0, r5
   175b2:	f7ff fd35 	bl	17020 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   175b6:	3401      	adds	r4, #1
   175b8:	e7de      	b.n	17578 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   175ba:	f7ff fd31 	bl	17020 <bt_conn_unref>
			continue;
   175be:	e7fa      	b.n	175b6 <bt_conn_lookup_state_le+0x4a>
			bt_conn_unref(conn);
   175c0:	4628      	mov	r0, r5
   175c2:	f7ff fd2d 	bl	17020 <bt_conn_unref>
			continue;
   175c6:	e7f6      	b.n	175b6 <bt_conn_lookup_state_le+0x4a>
   175c8:	20001b20 	.word	0x20001b20

000175cc <send_conn_le_param_update>:
{
   175cc:	b538      	push	{r3, r4, r5, lr}
   175ce:	4604      	mov	r4, r0
   175d0:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   175d2:	4608      	mov	r0, r1
   175d4:	f012 fe60 	bl	2a298 <bt_le_conn_params_valid>
   175d8:	b350      	cbz	r0, 17630 <send_conn_le_param_update+0x64>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   175da:	4b17      	ldr	r3, [pc, #92]	; (17638 <send_conn_le_param_update+0x6c>)
   175dc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   175e0:	f013 0f02 	tst.w	r3, #2
   175e4:	d004      	beq.n	175f0 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   175e6:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   175ea:	f013 0f02 	tst.w	r3, #2
   175ee:	d113      	bne.n	17618 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   175f0:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   175f2:	b9c3      	cbnz	r3, 17626 <send_conn_le_param_update+0x5a>
		rc = bt_conn_le_conn_update(conn, param);
   175f4:	4629      	mov	r1, r5
   175f6:	4620      	mov	r0, r4
   175f8:	f013 fbda 	bl	2adb0 <bt_conn_le_conn_update>
		if (rc == 0) {
   175fc:	b9b8      	cbnz	r0, 1762e <send_conn_le_param_update+0x62>
			conn->le.interval_min = param->interval_min;
   175fe:	882b      	ldrh	r3, [r5, #0]
   17600:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   17604:	886b      	ldrh	r3, [r5, #2]
   17606:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   1760a:	88ab      	ldrh	r3, [r5, #4]
   1760c:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   17610:	88eb      	ldrh	r3, [r5, #6]
   17612:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
		return rc;
   17616:	e00a      	b.n	1762e <send_conn_le_param_update+0x62>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   17618:	2109      	movs	r1, #9
   1761a:	1d20      	adds	r0, r4, #4
   1761c:	f013 fa2b 	bl	2aa76 <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   17620:	2800      	cmp	r0, #0
   17622:	d1e5      	bne.n	175f0 <send_conn_le_param_update+0x24>
   17624:	e7e6      	b.n	175f4 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   17626:	4629      	mov	r1, r5
   17628:	4620      	mov	r0, r4
   1762a:	f013 fcc0 	bl	2afae <bt_l2cap_update_conn_param>
}
   1762e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17630:	f06f 0015 	mvn.w	r0, #21
   17634:	e7fb      	b.n	1762e <send_conn_le_param_update+0x62>
   17636:	bf00      	nop
   17638:	20000380 	.word	0x20000380

0001763c <deferred_work>:
{
   1763c:	b570      	push	{r4, r5, r6, lr}
   1763e:	b084      	sub	sp, #16
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   17640:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   17644:	f810 3c53 	ldrb.w	r3, [r0, #-83]
   17648:	b36b      	cbz	r3, 176a6 <deferred_work+0x6a>
   1764a:	4604      	mov	r4, r0
	if (conn->type != BT_CONN_TYPE_LE) {
   1764c:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   17650:	2b01      	cmp	r3, #1
   17652:	d126      	bne.n	176a2 <deferred_work+0x66>
	if (atomic_test_and_clear_bit(conn->flags,
   17654:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
   17658:	2108      	movs	r1, #8
   1765a:	4630      	mov	r0, r6
   1765c:	f013 f9ef 	bl	2aa3e <atomic_test_and_clear_bit>
   17660:	b358      	cbz	r0, 176ba <deferred_work+0x7e>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17662:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   17666:	f8ad 3000 	strh.w	r3, [sp]
   1766a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1766e:	f8ad 3002 	strh.w	r3, [sp, #2]
   17672:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   17676:	f8ad 3004 	strh.w	r3, [sp, #4]
   1767a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1767e:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   17682:	4669      	mov	r1, sp
   17684:	4628      	mov	r0, r5
   17686:	f7ff ffa1 	bl	175cc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1768a:	f3bf 8f5b 	dmb	ish
   1768e:	e856 3f00 	ldrex	r3, [r6]
   17692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17696:	e846 3200 	strex	r2, r3, [r6]
   1769a:	2a00      	cmp	r2, #0
   1769c:	d1f7      	bne.n	1768e <deferred_work+0x52>
   1769e:	f3bf 8f5b 	dmb	ish
}
   176a2:	b004      	add	sp, #16
   176a4:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_disconnected(conn);
   176a6:	4628      	mov	r0, r5
   176a8:	f013 fbd7 	bl	2ae5a <bt_l2cap_disconnected>
		notify_disconnected(conn);
   176ac:	4628      	mov	r0, r5
   176ae:	f7ff fa0d 	bl	16acc <notify_disconnected>
		bt_conn_unref(conn);
   176b2:	4628      	mov	r0, r5
   176b4:	f7ff fcb4 	bl	17020 <bt_conn_unref>
		return;
   176b8:	e7f3      	b.n	176a2 <deferred_work+0x66>
		param = BT_LE_CONN_PARAM(
   176ba:	4a05      	ldr	r2, [pc, #20]	; (176d0 <deferred_work+0x94>)
   176bc:	ab02      	add	r3, sp, #8
   176be:	e892 0003 	ldmia.w	r2, {r0, r1}
   176c2:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
   176c6:	4619      	mov	r1, r3
   176c8:	4628      	mov	r0, r5
   176ca:	f7ff ff7f 	bl	175cc <send_conn_le_param_update>
   176ce:	e7dc      	b.n	1768a <deferred_work+0x4e>
   176d0:	0002fc20 	.word	0x0002fc20

000176d4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   176d4:	b508      	push	{r3, lr}
   176d6:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   176d8:	4801      	ldr	r0, [pc, #4]	; (176e0 <bt_conn_create_frag_timeout+0xc>)
   176da:	f7ff fdab 	bl	17234 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   176de:	bd08      	pop	{r3, pc}
   176e0:	20000b04 	.word	0x20000b04

000176e4 <create_frag>:
{
   176e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   176e6:	4606      	mov	r6, r0
   176e8:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   176ea:	f04f 32ff 	mov.w	r2, #4294967295
   176ee:	f04f 33ff 	mov.w	r3, #4294967295
   176f2:	2000      	movs	r0, #0
   176f4:	f7ff ffee 	bl	176d4 <bt_conn_create_frag_timeout>
   176f8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   176fa:	7b73      	ldrb	r3, [r6, #13]
   176fc:	2b07      	cmp	r3, #7
   176fe:	d11a      	bne.n	17736 <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   17700:	2300      	movs	r3, #0
   17702:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   17704:	4b10      	ldr	r3, [pc, #64]	; (17748 <create_frag+0x64>)
   17706:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   1770a:	f100 0708 	add.w	r7, r0, #8
   1770e:	4638      	mov	r0, r7
   17710:	f015 fe52 	bl	2d3b8 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17714:	4286      	cmp	r6, r0
   17716:	d212      	bcs.n	1773e <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   17718:	4b0b      	ldr	r3, [pc, #44]	; (17748 <create_frag+0x64>)
   1771a:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1771e:	4632      	mov	r2, r6
   17720:	f855 1f08 	ldr.w	r1, [r5, #8]!
   17724:	4638      	mov	r0, r7
   17726:	f015 fe50 	bl	2d3ca <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1772a:	4631      	mov	r1, r6
   1772c:	4628      	mov	r0, r5
   1772e:	f005 fae9 	bl	1cd04 <net_buf_simple_pull>
}
   17732:	4620      	mov	r0, r4
   17734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   17736:	f005 fa39 	bl	1cbac <net_buf_unref>
		return NULL;
   1773a:	2400      	movs	r4, #0
   1773c:	e7f9      	b.n	17732 <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   1773e:	4638      	mov	r0, r7
   17740:	f015 fe3a 	bl	2d3b8 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17744:	b286      	uxth	r6, r0
   17746:	e7ea      	b.n	1771e <create_frag+0x3a>
   17748:	20000380 	.word	0x20000380

0001774c <send_buf>:
{
   1774c:	b538      	push	{r3, r4, r5, lr}
   1774e:	4605      	mov	r5, r0
   17750:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   17752:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   17754:	4a1b      	ldr	r2, [pc, #108]	; (177c4 <send_buf+0x78>)
   17756:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   1775a:	429a      	cmp	r2, r3
   1775c:	d21f      	bcs.n	1779e <send_buf+0x52>
	frag = create_frag(conn, buf);
   1775e:	f7ff ffc1 	bl	176e4 <create_frag>
	if (!frag) {
   17762:	4601      	mov	r1, r0
   17764:	b350      	cbz	r0, 177bc <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   17766:	2301      	movs	r3, #1
   17768:	2200      	movs	r2, #0
   1776a:	4628      	mov	r0, r5
   1776c:	f7ff fa52 	bl	16c14 <send_frag>
   17770:	4603      	mov	r3, r0
   17772:	b1c8      	cbz	r0, 177a8 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   17774:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   17776:	4a13      	ldr	r2, [pc, #76]	; (177c4 <send_buf+0x78>)
   17778:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   1777c:	429a      	cmp	r2, r3
   1777e:	d215      	bcs.n	177ac <send_buf+0x60>
		frag = create_frag(conn, buf);
   17780:	4621      	mov	r1, r4
   17782:	4628      	mov	r0, r5
   17784:	f7ff ffae 	bl	176e4 <create_frag>
		if (!frag) {
   17788:	4601      	mov	r1, r0
   1778a:	b1c8      	cbz	r0, 177c0 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1778c:	2301      	movs	r3, #1
   1778e:	461a      	mov	r2, r3
   17790:	4628      	mov	r0, r5
   17792:	f7ff fa3f 	bl	16c14 <send_frag>
   17796:	4603      	mov	r3, r0
   17798:	2800      	cmp	r0, #0
   1779a:	d1eb      	bne.n	17774 <send_buf+0x28>
   1779c:	e004      	b.n	177a8 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1779e:	2300      	movs	r3, #0
   177a0:	2202      	movs	r2, #2
   177a2:	f7ff fa37 	bl	16c14 <send_frag>
   177a6:	4603      	mov	r3, r0
}
   177a8:	4618      	mov	r0, r3
   177aa:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   177ac:	2300      	movs	r3, #0
   177ae:	2203      	movs	r2, #3
   177b0:	4621      	mov	r1, r4
   177b2:	4628      	mov	r0, r5
   177b4:	f7ff fa2e 	bl	16c14 <send_frag>
   177b8:	4603      	mov	r3, r0
   177ba:	e7f5      	b.n	177a8 <send_buf+0x5c>
		return false;
   177bc:	2300      	movs	r3, #0
   177be:	e7f3      	b.n	177a8 <send_buf+0x5c>
			return false;
   177c0:	2300      	movs	r3, #0
   177c2:	e7f1      	b.n	177a8 <send_buf+0x5c>
   177c4:	20000380 	.word	0x20000380

000177c8 <bt_conn_process_tx>:
{
   177c8:	b570      	push	{r4, r5, r6, lr}
   177ca:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   177cc:	7b43      	ldrb	r3, [r0, #13]
   177ce:	b923      	cbnz	r3, 177da <bt_conn_process_tx+0x12>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   177d0:	2106      	movs	r1, #6
   177d2:	3004      	adds	r0, #4
   177d4:	f013 f933 	bl	2aa3e <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   177d8:	b968      	cbnz	r0, 177f6 <bt_conn_process_tx+0x2e>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   177da:	2200      	movs	r2, #0
   177dc:	2300      	movs	r3, #0
   177de:	f104 0038 	add.w	r0, r4, #56	; 0x38
   177e2:	f005 f88d 	bl	1c900 <net_buf_get>
	BT_ASSERT(buf);
   177e6:	4605      	mov	r5, r0
   177e8:	b148      	cbz	r0, 177fe <bt_conn_process_tx+0x36>
	if (!send_buf(conn, buf)) {
   177ea:	4629      	mov	r1, r5
   177ec:	4620      	mov	r0, r4
   177ee:	f7ff ffad 	bl	1774c <send_buf>
   177f2:	b188      	cbz	r0, 17818 <bt_conn_process_tx+0x50>
}
   177f4:	bd70      	pop	{r4, r5, r6, pc}
		conn_cleanup(conn);
   177f6:	4620      	mov	r0, r4
   177f8:	f7ff fb3e 	bl	16e78 <conn_cleanup>
		return;
   177fc:	e7fa      	b.n	177f4 <bt_conn_process_tx+0x2c>
	BT_ASSERT(buf);
   177fe:	f44f 7247 	mov.w	r2, #796	; 0x31c
   17802:	490c      	ldr	r1, [pc, #48]	; (17834 <bt_conn_process_tx+0x6c>)
   17804:	480c      	ldr	r0, [pc, #48]	; (17838 <bt_conn_process_tx+0x70>)
   17806:	f011 fa02 	bl	28c0e <assert_print>
   1780a:	4040      	eors	r0, r0
   1780c:	f380 8811 	msr	BASEPRI, r0
   17810:	f04f 0003 	mov.w	r0, #3
   17814:	df02      	svc	2
   17816:	e7e8      	b.n	177ea <bt_conn_process_tx+0x22>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   17818:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   1781a:	2300      	movs	r3, #0
   1781c:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   1781e:	4628      	mov	r0, r5
   17820:	f005 f9c4 	bl	1cbac <net_buf_unref>
		if (tx) {
   17824:	2e00      	cmp	r6, #0
   17826:	d0e5      	beq.n	177f4 <bt_conn_process_tx+0x2c>
			conn_tx_destroy(conn, tx);
   17828:	4631      	mov	r1, r6
   1782a:	4620      	mov	r0, r4
   1782c:	f7ff f984 	bl	16b38 <conn_tx_destroy>
   17830:	e7e0      	b.n	177f4 <bt_conn_process_tx+0x2c>
   17832:	bf00      	nop
   17834:	000319b4 	.word	0x000319b4
   17838:	00030128 	.word	0x00030128

0001783c <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   1783c:	4603      	mov	r3, r0
   1783e:	b140      	cbz	r0, 17852 <bt_conn_auth_cb_register+0x16>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   17840:	4a11      	ldr	r2, [pc, #68]	; (17888 <bt_conn_auth_cb_register+0x4c>)
   17842:	6812      	ldr	r2, [r2, #0]
   17844:	b9a2      	cbnz	r2, 17870 <bt_conn_auth_cb_register+0x34>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   17846:	6902      	ldr	r2, [r0, #16]
   17848:	b132      	cbz	r2, 17858 <bt_conn_auth_cb_register+0x1c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   1784a:	4a0f      	ldr	r2, [pc, #60]	; (17888 <bt_conn_auth_cb_register+0x4c>)
   1784c:	6013      	str	r3, [r2, #0]
	return 0;
   1784e:	2000      	movs	r0, #0
   17850:	4770      	bx	lr
		bt_auth = NULL;
   17852:	4b0d      	ldr	r3, [pc, #52]	; (17888 <bt_conn_auth_cb_register+0x4c>)
   17854:	6018      	str	r0, [r3, #0]
		return 0;
   17856:	4770      	bx	lr
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   17858:	6802      	ldr	r2, [r0, #0]
	if (!cb->cancel &&
   1785a:	b962      	cbnz	r2, 17876 <bt_conn_auth_cb_register+0x3a>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   1785c:	6842      	ldr	r2, [r0, #4]
   1785e:	b96a      	cbnz	r2, 1787c <bt_conn_auth_cb_register+0x40>
   17860:	6882      	ldr	r2, [r0, #8]
   17862:	b972      	cbnz	r2, 17882 <bt_conn_auth_cb_register+0x46>
	     cb->pairing_confirm)) {
   17864:	6942      	ldr	r2, [r0, #20]
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   17866:	2a00      	cmp	r2, #0
   17868:	d0ef      	beq.n	1784a <bt_conn_auth_cb_register+0xe>
		return -EINVAL;
   1786a:	f06f 0015 	mvn.w	r0, #21
}
   1786e:	4770      	bx	lr
		return -EALREADY;
   17870:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17874:	4770      	bx	lr
		return -EINVAL;
   17876:	f06f 0015 	mvn.w	r0, #21
   1787a:	4770      	bx	lr
   1787c:	f06f 0015 	mvn.w	r0, #21
   17880:	4770      	bx	lr
   17882:	f06f 0015 	mvn.w	r0, #21
   17886:	4770      	bx	lr
   17888:	200029e4 	.word	0x200029e4

0001788c <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   1788c:	b180      	cbz	r0, 178b0 <bt_conn_auth_info_cb_register+0x24>
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   1788e:	f100 020c 	add.w	r2, r0, #12
	parent->next = child;
   17892:	2100      	movs	r1, #0
   17894:	60c1      	str	r1, [r0, #12]
	return list->tail;
   17896:	4b08      	ldr	r3, [pc, #32]	; (178b8 <bt_conn_auth_info_cb_register+0x2c>)
   17898:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1789a:	b123      	cbz	r3, 178a6 <bt_conn_auth_info_cb_register+0x1a>
	parent->next = child;
   1789c:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1789e:	4b06      	ldr	r3, [pc, #24]	; (178b8 <bt_conn_auth_info_cb_register+0x2c>)
   178a0:	605a      	str	r2, [r3, #4]

	return 0;
   178a2:	2000      	movs	r0, #0
}
   178a4:	4770      	bx	lr
	list->tail = node;
   178a6:	4b04      	ldr	r3, [pc, #16]	; (178b8 <bt_conn_auth_info_cb_register+0x2c>)
   178a8:	605a      	str	r2, [r3, #4]
	list->head = node;
   178aa:	601a      	str	r2, [r3, #0]
   178ac:	4608      	mov	r0, r1
}
   178ae:	4770      	bx	lr
		return -EINVAL;
   178b0:	f06f 0015 	mvn.w	r0, #21
}
   178b4:	4770      	bx	lr
   178b6:	bf00      	nop
   178b8:	200029dc 	.word	0x200029dc

000178bc <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   178bc:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   178be:	480c      	ldr	r0, [pc, #48]	; (178f0 <bt_conn_init+0x34>)
   178c0:	f017 fc8a 	bl	2f1d8 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   178c4:	2400      	movs	r4, #0
   178c6:	e006      	b.n	178d6 <bt_conn_init+0x1a>
		k_fifo_put(&free_tx, &conn_tx[i]);
   178c8:	490a      	ldr	r1, [pc, #40]	; (178f4 <bt_conn_init+0x38>)
   178ca:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   178ce:	4808      	ldr	r0, [pc, #32]	; (178f0 <bt_conn_init+0x34>)
   178d0:	f017 fc8f 	bl	2f1f2 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   178d4:	3401      	adds	r4, #1
   178d6:	2c02      	cmp	r4, #2
   178d8:	d9f6      	bls.n	178c8 <bt_conn_init+0xc>
	}

	bt_att_init();
   178da:	f001 f853 	bl	18984 <bt_att_init>

	err = bt_smp_init();
   178de:	f004 fc39 	bl	1c154 <bt_smp_init>
	if (err) {
   178e2:	4604      	mov	r4, r0
   178e4:	b108      	cbz	r0, 178ea <bt_conn_init+0x2e>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   178e6:	4620      	mov	r0, r4
   178e8:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   178ea:	f013 fb8d 	bl	2b008 <bt_l2cap_init>
	return 0;
   178ee:	e7fa      	b.n	178e6 <bt_conn_init+0x2a>
   178f0:	20000a80 	.word	0x20000a80
   178f4:	200029a8 	.word	0x200029a8

000178f8 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   178f8:	4905      	ldr	r1, [pc, #20]	; (17910 <get_ident+0x18>)
   178fa:	780a      	ldrb	r2, [r1, #0]
   178fc:	1c53      	adds	r3, r2, #1
   178fe:	b2db      	uxtb	r3, r3
   17900:	700b      	strb	r3, [r1, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   17902:	b90b      	cbnz	r3, 17908 <get_ident+0x10>
		ident++;
   17904:	3202      	adds	r2, #2
   17906:	700a      	strb	r2, [r1, #0]
	}

	return ident;
}
   17908:	4b01      	ldr	r3, [pc, #4]	; (17910 <get_ident+0x18>)
   1790a:	7818      	ldrb	r0, [r3, #0]
   1790c:	4770      	bx	lr
   1790e:	bf00      	nop
   17910:	200045f2 	.word	0x200045f2

00017914 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   17914:	b510      	push	{r4, lr}
   17916:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17918:	2000      	movs	r0, #0
   1791a:	b130      	cbz	r0, 1792a <l2cap_accept+0x16>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   1791c:	2145      	movs	r1, #69	; 0x45
   1791e:	480b      	ldr	r0, [pc, #44]	; (1794c <l2cap_accept+0x38>)
   17920:	f011 f995 	bl	28c4e <z_log_minimal_printk>

	return -ENOMEM;
   17924:	f06f 000b 	mvn.w	r0, #11
}
   17928:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
   1792a:	2394      	movs	r3, #148	; 0x94
   1792c:	fb00 f303 	mul.w	r3, r0, r3
   17930:	4c07      	ldr	r4, [pc, #28]	; (17950 <l2cap_accept+0x3c>)
   17932:	58e3      	ldr	r3, [r4, r3]
   17934:	b10b      	cbz	r3, 1793a <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17936:	3001      	adds	r0, #1
   17938:	e7ef      	b.n	1791a <l2cap_accept+0x6>
		l2cap->chan.chan.ops = &ops;
   1793a:	4b05      	ldr	r3, [pc, #20]	; (17950 <l2cap_accept+0x3c>)
   1793c:	2294      	movs	r2, #148	; 0x94
   1793e:	fb02 3300 	mla	r3, r2, r0, r3
   17942:	4a04      	ldr	r2, [pc, #16]	; (17954 <l2cap_accept+0x40>)
   17944:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   17946:	600b      	str	r3, [r1, #0]
		return 0;
   17948:	e7ee      	b.n	17928 <l2cap_accept+0x14>
   1794a:	bf00      	nop
   1794c:	00031bd8 	.word	0x00031bd8
   17950:	200029e8 	.word	0x200029e8
   17954:	00031db4 	.word	0x00031db4

00017958 <le_conn_param_rsp>:
{
   17958:	b508      	push	{r3, lr}
	if (buf->len < sizeof(*rsp)) {
   1795a:	898b      	ldrh	r3, [r1, #12]
   1795c:	2b01      	cmp	r3, #1
   1795e:	d900      	bls.n	17962 <le_conn_param_rsp+0xa>
}
   17960:	bd08      	pop	{r3, pc}
		BT_ERR("Too small LE conn param rsp");
   17962:	2145      	movs	r1, #69	; 0x45
   17964:	4801      	ldr	r0, [pc, #4]	; (1796c <le_conn_param_rsp+0x14>)
   17966:	f011 f972 	bl	28c4e <z_log_minimal_printk>
		return;
   1796a:	e7f9      	b.n	17960 <le_conn_param_rsp+0x8>
   1796c:	00031c04 	.word	0x00031c04

00017970 <l2cap_chan_add>:
{
   17970:	b510      	push	{r4, lr}
	if (!le_chan) {
   17972:	b191      	cbz	r1, 1799a <l2cap_chan_add+0x2a>
   17974:	460b      	mov	r3, r1
	atomic_clear(chan->status);
   17976:	3110      	adds	r1, #16
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17978:	f04f 0c00 	mov.w	ip, #0
   1797c:	f3bf 8f5b 	dmb	ish
   17980:	e851 ef00 	ldrex	lr, [r1]
   17984:	e841 c400 	strex	r4, ip, [r1]
   17988:	2c00      	cmp	r4, #0
   1798a:	d1f9      	bne.n	17980 <l2cap_chan_add+0x10>
   1798c:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   17990:	4619      	mov	r1, r3
   17992:	f013 fa52 	bl	2ae3a <bt_l2cap_chan_add>
	return true;
   17996:	2001      	movs	r0, #1
}
   17998:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to allocate L2CAP channel ID");
   1799a:	2145      	movs	r1, #69	; 0x45
   1799c:	4802      	ldr	r0, [pc, #8]	; (179a8 <l2cap_chan_add+0x38>)
   1799e:	f011 f956 	bl	28c4e <z_log_minimal_printk>
		return false;
   179a2:	2000      	movs	r0, #0
   179a4:	e7f8      	b.n	17998 <l2cap_chan_add+0x28>
   179a6:	bf00      	nop
   179a8:	00031c28 	.word	0x00031c28

000179ac <bt_l2cap_connected>:
{
   179ac:	b530      	push	{r4, r5, lr}
   179ae:	b083      	sub	sp, #12
   179b0:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   179b2:	4c21      	ldr	r4, [pc, #132]	; (17a38 <bt_l2cap_connected+0x8c>)
   179b4:	e015      	b.n	179e2 <bt_l2cap_connected+0x36>
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   179b6:	9b01      	ldr	r3, [sp, #4]
   179b8:	3310      	adds	r3, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   179ba:	f3bf 8f5b 	dmb	ish
   179be:	e853 1f00 	ldrex	r1, [r3]
   179c2:	f041 0101 	orr.w	r1, r1, #1
   179c6:	e843 1200 	strex	r2, r1, [r3]
   179ca:	2a00      	cmp	r2, #0
   179cc:	d1f7      	bne.n	179be <bt_l2cap_connected+0x12>
   179ce:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   179d2:	9801      	ldr	r0, [sp, #4]
   179d4:	6843      	ldr	r3, [r0, #4]
   179d6:	69db      	ldr	r3, [r3, #28]
   179d8:	b113      	cbz	r3, 179e0 <bt_l2cap_connected+0x34>
			chan->ops->status(chan, chan->status);
   179da:	f100 0110 	add.w	r1, r0, #16
   179de:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   179e0:	340c      	adds	r4, #12
   179e2:	4b16      	ldr	r3, [pc, #88]	; (17a3c <bt_l2cap_connected+0x90>)
   179e4:	429c      	cmp	r4, r3
   179e6:	d818      	bhi.n	17a1a <bt_l2cap_connected+0x6e>
   179e8:	4b14      	ldr	r3, [pc, #80]	; (17a3c <bt_l2cap_connected+0x90>)
   179ea:	429c      	cmp	r4, r3
   179ec:	d221      	bcs.n	17a32 <bt_l2cap_connected+0x86>
		if (fchan->accept(conn, &chan) < 0) {
   179ee:	6863      	ldr	r3, [r4, #4]
   179f0:	a901      	add	r1, sp, #4
   179f2:	4628      	mov	r0, r5
   179f4:	4798      	blx	r3
   179f6:	2800      	cmp	r0, #0
   179f8:	dbf2      	blt.n	179e0 <bt_l2cap_connected+0x34>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   179fa:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   179fc:	8823      	ldrh	r3, [r4, #0]
   179fe:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
   17a00:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   17a02:	68a2      	ldr	r2, [r4, #8]
   17a04:	4628      	mov	r0, r5
   17a06:	f7ff ffb3 	bl	17970 <l2cap_chan_add>
   17a0a:	b190      	cbz	r0, 17a32 <bt_l2cap_connected+0x86>
		if (chan->ops->connected) {
   17a0c:	9801      	ldr	r0, [sp, #4]
   17a0e:	6843      	ldr	r3, [r0, #4]
   17a10:	681b      	ldr	r3, [r3, #0]
   17a12:	2b00      	cmp	r3, #0
   17a14:	d0cf      	beq.n	179b6 <bt_l2cap_connected+0xa>
			chan->ops->connected(chan);
   17a16:	4798      	blx	r3
   17a18:	e7cd      	b.n	179b6 <bt_l2cap_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17a1a:	4c09      	ldr	r4, [pc, #36]	; (17a40 <bt_l2cap_connected+0x94>)
   17a1c:	f240 1281 	movw	r2, #385	; 0x181
   17a20:	4621      	mov	r1, r4
   17a22:	4808      	ldr	r0, [pc, #32]	; (17a44 <bt_l2cap_connected+0x98>)
   17a24:	f011 f8f3 	bl	28c0e <assert_print>
   17a28:	f240 1181 	movw	r1, #385	; 0x181
   17a2c:	4620      	mov	r0, r4
   17a2e:	f011 f8e7 	bl	28c00 <assert_post_action>
}
   17a32:	b003      	add	sp, #12
   17a34:	bd30      	pop	{r4, r5, pc}
   17a36:	bf00      	nop
   17a38:	0002f998 	.word	0x0002f998
   17a3c:	0002f9bc 	.word	0x0002f9bc
   17a40:	00031c54 	.word	0x00031c54
   17a44:	00030128 	.word	0x00030128

00017a48 <l2cap_create_le_sig_pdu>:
{
   17a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a4a:	460c      	mov	r4, r1
   17a4c:	4616      	mov	r6, r2
   17a4e:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   17a50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17a54:	2300      	movs	r3, #0
   17a56:	2100      	movs	r1, #0
   17a58:	4608      	mov	r0, r1
   17a5a:	f013 fa38 	bl	2aece <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   17a5e:	4607      	mov	r7, r0
   17a60:	b140      	cbz	r0, 17a74 <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   17a62:	2104      	movs	r1, #4
   17a64:	3008      	adds	r0, #8
   17a66:	f005 f9a3 	bl	1cdb0 <net_buf_simple_add>
	hdr->code = code;
   17a6a:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   17a6c:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   17a6e:	8045      	strh	r5, [r0, #2]
}
   17a70:	4638      	mov	r0, r7
   17a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   17a74:	4622      	mov	r2, r4
   17a76:	2145      	movs	r1, #69	; 0x45
   17a78:	4801      	ldr	r0, [pc, #4]	; (17a80 <l2cap_create_le_sig_pdu+0x38>)
   17a7a:	f011 f8e8 	bl	28c4e <z_log_minimal_printk>
		return NULL;
   17a7e:	e7f7      	b.n	17a70 <l2cap_create_le_sig_pdu+0x28>
   17a80:	00031c88 	.word	0x00031c88

00017a84 <l2cap_recv>:
{
   17a84:	b570      	push	{r4, r5, r6, lr}
   17a86:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   17a88:	898b      	ldrh	r3, [r1, #12]
   17a8a:	2b03      	cmp	r3, #3
   17a8c:	d917      	bls.n	17abe <l2cap_recv+0x3a>
   17a8e:	4606      	mov	r6, r0
   17a90:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   17a92:	2104      	movs	r1, #4
   17a94:	f104 0008 	add.w	r0, r4, #8
   17a98:	f005 f950 	bl	1cd3c <net_buf_simple_pull_mem>
   17a9c:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   17a9e:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   17aa0:	89a2      	ldrh	r2, [r4, #12]
   17aa2:	429a      	cmp	r2, r3
   17aa4:	d112      	bne.n	17acc <l2cap_recv+0x48>
	if (!hdr->ident) {
   17aa6:	7843      	ldrb	r3, [r0, #1]
   17aa8:	b1ab      	cbz	r3, 17ad6 <l2cap_recv+0x52>
	switch (hdr->code) {
   17aaa:	7802      	ldrb	r2, [r0, #0]
   17aac:	2a01      	cmp	r2, #1
   17aae:	d00a      	beq.n	17ac6 <l2cap_recv+0x42>
   17ab0:	2a13      	cmp	r2, #19
   17ab2:	d115      	bne.n	17ae0 <l2cap_recv+0x5c>
		le_conn_param_rsp(l2cap, buf);
   17ab4:	4621      	mov	r1, r4
   17ab6:	4630      	mov	r0, r6
   17ab8:	f7ff ff4e 	bl	17958 <le_conn_param_rsp>
		break;
   17abc:	e003      	b.n	17ac6 <l2cap_recv+0x42>
		BT_ERR("Too small L2CAP signaling PDU");
   17abe:	2145      	movs	r1, #69	; 0x45
   17ac0:	480d      	ldr	r0, [pc, #52]	; (17af8 <l2cap_recv+0x74>)
   17ac2:	f011 f8c4 	bl	28c4e <z_log_minimal_printk>
}
   17ac6:	2000      	movs	r0, #0
   17ac8:	b002      	add	sp, #8
   17aca:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   17acc:	2145      	movs	r1, #69	; 0x45
   17ace:	480b      	ldr	r0, [pc, #44]	; (17afc <l2cap_recv+0x78>)
   17ad0:	f011 f8bd 	bl	28c4e <z_log_minimal_printk>
		return 0;
   17ad4:	e7f7      	b.n	17ac6 <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
   17ad6:	2145      	movs	r1, #69	; 0x45
   17ad8:	4809      	ldr	r0, [pc, #36]	; (17b00 <l2cap_recv+0x7c>)
   17ada:	f011 f8b8 	bl	28c4e <z_log_minimal_printk>
		return 0;
   17ade:	e7f2      	b.n	17ac6 <l2cap_recv+0x42>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   17ae0:	2157      	movs	r1, #87	; 0x57
   17ae2:	4808      	ldr	r0, [pc, #32]	; (17b04 <l2cap_recv+0x80>)
   17ae4:	f011 f8b3 	bl	28c4e <z_log_minimal_printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   17ae8:	7869      	ldrb	r1, [r5, #1]
   17aea:	2200      	movs	r2, #0
   17aec:	9200      	str	r2, [sp, #0]
   17aee:	4613      	mov	r3, r2
   17af0:	6830      	ldr	r0, [r6, #0]
   17af2:	f013 fa14 	bl	2af1e <l2cap_send_reject>
		break;
   17af6:	e7e6      	b.n	17ac6 <l2cap_recv+0x42>
   17af8:	00031cb8 	.word	0x00031cb8
   17afc:	00031cdc 	.word	0x00031cdc
   17b00:	00031d04 	.word	0x00031d04
   17b04:	00031d2c 	.word	0x00031d2c

00017b08 <bt_l2cap_recv>:
{
   17b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b0a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   17b0c:	898b      	ldrh	r3, [r1, #12]
   17b0e:	2b03      	cmp	r3, #3
   17b10:	d911      	bls.n	17b36 <bt_l2cap_recv+0x2e>
   17b12:	4605      	mov	r5, r0
   17b14:	4616      	mov	r6, r2
   17b16:	2104      	movs	r1, #4
   17b18:	f104 0008 	add.w	r0, r4, #8
   17b1c:	f005 f90e 	bl	1cd3c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   17b20:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   17b22:	4639      	mov	r1, r7
   17b24:	4628      	mov	r0, r5
   17b26:	f013 fa30 	bl	2af8a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17b2a:	b160      	cbz	r0, 17b46 <bt_l2cap_recv+0x3e>
	l2cap_chan_recv(chan, buf, complete);
   17b2c:	4632      	mov	r2, r6
   17b2e:	4621      	mov	r1, r4
   17b30:	f013 f967 	bl	2ae02 <l2cap_chan_recv>
}
   17b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Too small L2CAP PDU received");
   17b36:	2145      	movs	r1, #69	; 0x45
   17b38:	4807      	ldr	r0, [pc, #28]	; (17b58 <bt_l2cap_recv+0x50>)
   17b3a:	f011 f888 	bl	28c4e <z_log_minimal_printk>
		net_buf_unref(buf);
   17b3e:	4620      	mov	r0, r4
   17b40:	f005 f834 	bl	1cbac <net_buf_unref>
		return;
   17b44:	e7f6      	b.n	17b34 <bt_l2cap_recv+0x2c>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   17b46:	463a      	mov	r2, r7
   17b48:	2157      	movs	r1, #87	; 0x57
   17b4a:	4804      	ldr	r0, [pc, #16]	; (17b5c <bt_l2cap_recv+0x54>)
   17b4c:	f011 f87f 	bl	28c4e <z_log_minimal_printk>
		net_buf_unref(buf);
   17b50:	4620      	mov	r0, r4
   17b52:	f005 f82b 	bl	1cbac <net_buf_unref>
		return;
   17b56:	e7ed      	b.n	17b34 <bt_l2cap_recv+0x2c>
   17b58:	00031d5c 	.word	0x00031d5c
   17b5c:	00031d80 	.word	0x00031d80

00017b60 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   17b60:	2852      	cmp	r0, #82	; 0x52
   17b62:	d833      	bhi.n	17bcc <att_op_get_type+0x6c>
   17b64:	281b      	cmp	r0, #27
   17b66:	d321      	bcc.n	17bac <att_op_get_type+0x4c>
   17b68:	f1a0 031b 	sub.w	r3, r0, #27
   17b6c:	2b37      	cmp	r3, #55	; 0x37
   17b6e:	d82f      	bhi.n	17bd0 <att_op_get_type+0x70>
   17b70:	e8df f003 	tbb	[pc, r3]
   17b74:	3b392e37 	.word	0x3b392e37
   17b78:	2e352a2e 	.word	0x2e352a2e
   17b7c:	2e2e2e37 	.word	0x2e2e2e37
   17b80:	2e2e2e2e 	.word	0x2e2e2e2e
   17b84:	2e2e2e2e 	.word	0x2e2e2e2e
   17b88:	2e2e2e2e 	.word	0x2e2e2e2e
   17b8c:	2e2e2e2e 	.word	0x2e2e2e2e
   17b90:	2e2e2e2e 	.word	0x2e2e2e2e
   17b94:	2e2e2e2e 	.word	0x2e2e2e2e
   17b98:	2e2e2e2e 	.word	0x2e2e2e2e
   17b9c:	2e2e2e2e 	.word	0x2e2e2e2e
   17ba0:	2e2e2e2e 	.word	0x2e2e2e2e
   17ba4:	2e2e2e2e 	.word	0x2e2e2e2e
   17ba8:	332e2e2e 	.word	0x332e2e2e
   17bac:	2819      	cmp	r0, #25
   17bae:	d80f      	bhi.n	17bd0 <att_op_get_type+0x70>
   17bb0:	b243      	sxtb	r3, r0
   17bb2:	b16b      	cbz	r3, 17bd0 <att_op_get_type+0x70>
   17bb4:	2301      	movs	r3, #1
   17bb6:	4083      	lsls	r3, r0
   17bb8:	4a10      	ldr	r2, [pc, #64]	; (17bfc <att_op_get_type+0x9c>)
   17bba:	401a      	ands	r2, r3
   17bbc:	b9ba      	cbnz	r2, 17bee <att_op_get_type+0x8e>
   17bbe:	4a10      	ldr	r2, [pc, #64]	; (17c00 <att_op_get_type+0xa0>)
   17bc0:	401a      	ands	r2, r3
   17bc2:	b12a      	cbz	r2, 17bd0 <att_op_get_type+0x70>
   17bc4:	2001      	movs	r0, #1
   17bc6:	4770      	bx	lr
   17bc8:	2001      	movs	r0, #1
   17bca:	4770      	bx	lr
   17bcc:	28d2      	cmp	r0, #210	; 0xd2
   17bce:	d010      	beq.n	17bf2 <att_op_get_type+0x92>
		return ATT_NOTIFICATION;
	case BT_ATT_OP_INDICATE:
		return ATT_INDICATION;
	}

	if (op & ATT_CMD_MASK) {
   17bd0:	f010 0f40 	tst.w	r0, #64	; 0x40
   17bd4:	d10f      	bne.n	17bf6 <att_op_get_type+0x96>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   17bd6:	2006      	movs	r0, #6
   17bd8:	4770      	bx	lr
		return ATT_COMMAND;
   17bda:	2000      	movs	r0, #0
   17bdc:	4770      	bx	lr
		return ATT_RESPONSE;
   17bde:	2002      	movs	r0, #2
   17be0:	4770      	bx	lr
		return ATT_NOTIFICATION;
   17be2:	2003      	movs	r0, #3
   17be4:	4770      	bx	lr
		return ATT_INDICATION;
   17be6:	2005      	movs	r0, #5
   17be8:	4770      	bx	lr
		return ATT_CONFIRMATION;
   17bea:	2004      	movs	r0, #4
   17bec:	4770      	bx	lr
		return ATT_RESPONSE;
   17bee:	2002      	movs	r0, #2
   17bf0:	4770      	bx	lr
		return ATT_COMMAND;
   17bf2:	2000      	movs	r0, #0
   17bf4:	4770      	bx	lr
		return ATT_COMMAND;
   17bf6:	2000      	movs	r0, #0
}
   17bf8:	4770      	bx	lr
   17bfa:	bf00      	nop
   17bfc:	028aaaaa 	.word	0x028aaaaa
   17c00:	01455554 	.word	0x01455554

00017c04 <tx_meta_data_alloc>:
{
   17c04:	b508      	push	{r3, lr}
   17c06:	4602      	mov	r2, r0
   17c08:	460b      	mov	r3, r1
	return z_impl_k_queue_get(queue, timeout);
   17c0a:	4802      	ldr	r0, [pc, #8]	; (17c14 <tx_meta_data_alloc+0x10>)
   17c0c:	f00a fd18 	bl	22640 <z_impl_k_queue_get>
}
   17c10:	bd08      	pop	{r3, pc}
   17c12:	bf00      	nop
   17c14:	20000a64 	.word	0x20000a64

00017c18 <att_cb>:
{
   17c18:	b510      	push	{r4, lr}
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   17c1a:	6883      	ldr	r3, [r0, #8]
   17c1c:	7818      	ldrb	r0, [r3, #0]
   17c1e:	f7ff ff9f 	bl	17b60 <att_op_get_type>
	switch (op_type) {
   17c22:	2805      	cmp	r0, #5
   17c24:	d808      	bhi.n	17c38 <att_cb+0x20>
   17c26:	e8df f000 	tbb	[pc, r0]
   17c2a:	0305      	.short	0x0305
   17c2c:	03150513 	.word	0x03150513
		return att_req_sent;
   17c30:	4809      	ldr	r0, [pc, #36]	; (17c58 <att_cb+0x40>)
}
   17c32:	bd10      	pop	{r4, pc}
		return att_tx_complete;
   17c34:	4809      	ldr	r0, [pc, #36]	; (17c5c <att_cb+0x44>)
   17c36:	e7fc      	b.n	17c32 <att_cb+0x1a>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   17c38:	4c09      	ldr	r4, [pc, #36]	; (17c60 <att_cb+0x48>)
   17c3a:	f240 2257 	movw	r2, #599	; 0x257
   17c3e:	4621      	mov	r1, r4
   17c40:	4808      	ldr	r0, [pc, #32]	; (17c64 <att_cb+0x4c>)
   17c42:	f010 ffe4 	bl	28c0e <assert_print>
   17c46:	f240 2157 	movw	r1, #599	; 0x257
   17c4a:	4620      	mov	r0, r4
   17c4c:	f010 ffd8 	bl	28c00 <assert_post_action>
	switch (op_type) {
   17c50:	4805      	ldr	r0, [pc, #20]	; (17c68 <att_cb+0x50>)
   17c52:	e7ee      	b.n	17c32 <att_cb+0x1a>
		return att_cfm_sent;
   17c54:	4805      	ldr	r0, [pc, #20]	; (17c6c <att_cb+0x54>)
   17c56:	e7ec      	b.n	17c32 <att_cb+0x1a>
   17c58:	0002b82d 	.word	0x0002b82d
   17c5c:	0002b811 	.word	0x0002b811
   17c60:	00031de8 	.word	0x00031de8
   17c64:	00030128 	.word	0x00030128
   17c68:	0002b865 	.word	0x0002b865
   17c6c:	0002b849 	.word	0x0002b849

00017c70 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   17c70:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   17c72:	7b43      	ldrb	r3, [r0, #13]
   17c74:	2b07      	cmp	r3, #7
   17c76:	d10d      	bne.n	17c94 <att_get+0x24>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   17c78:	2104      	movs	r1, #4
   17c7a:	f013 f986 	bl	2af8a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17c7e:	4604      	mov	r4, r0
   17c80:	b170      	cbz	r0, 17ca0 <att_get+0x30>
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   17c82:	2102      	movs	r1, #2
   17c84:	3094      	adds	r0, #148	; 0x94
   17c86:	f013 fa30 	bl	2b0ea <atomic_test_bit>
   17c8a:	b170      	cbz	r0, 17caa <att_get+0x3a>
		 "ATT channel not connected");

	return att_chan->att;
   17c8c:	f854 4c04 	ldr.w	r4, [r4, #-4]
}
   17c90:	4620      	mov	r0, r4
   17c92:	bd10      	pop	{r4, pc}
		BT_WARN("Not connected");
   17c94:	2157      	movs	r1, #87	; 0x57
   17c96:	480b      	ldr	r0, [pc, #44]	; (17cc4 <att_get+0x54>)
   17c98:	f010 ffd9 	bl	28c4e <z_log_minimal_printk>
		return NULL;
   17c9c:	2400      	movs	r4, #0
   17c9e:	e7f7      	b.n	17c90 <att_get+0x20>
		BT_ERR("Unable to find ATT channel");
   17ca0:	2145      	movs	r1, #69	; 0x45
   17ca2:	4809      	ldr	r0, [pc, #36]	; (17cc8 <att_get+0x58>)
   17ca4:	f010 ffd3 	bl	28c4e <z_log_minimal_printk>
		return NULL;
   17ca8:	e7f2      	b.n	17c90 <att_get+0x20>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   17caa:	4c08      	ldr	r4, [pc, #32]	; (17ccc <att_get+0x5c>)
   17cac:	f640 322e 	movw	r2, #2862	; 0xb2e
   17cb0:	4621      	mov	r1, r4
   17cb2:	4807      	ldr	r0, [pc, #28]	; (17cd0 <att_get+0x60>)
   17cb4:	f010 ffab 	bl	28c0e <assert_print>
   17cb8:	f640 312e 	movw	r1, #2862	; 0xb2e
   17cbc:	4620      	mov	r0, r4
   17cbe:	f010 ff9f 	bl	28c00 <assert_post_action>
   17cc2:	bf00      	nop
   17cc4:	00031e18 	.word	0x00031e18
   17cc8:	00031e2c 	.word	0x00031e2c
   17ccc:	00031de8 	.word	0x00031de8
   17cd0:	00030128 	.word	0x00030128

00017cd4 <att_chan_new>:
	att_chan_mtu_updated(att_chan);
}
#endif /* CONFIG_BT_EATT */

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   17cd4:	b570      	push	{r4, r5, r6, lr}
   17cd6:	b082      	sub	sp, #8
   17cd8:	4605      	mov	r5, r0
   17cda:	460e      	mov	r6, r1
	return list->head;
   17cdc:	6a83      	ldr	r3, [r0, #40]	; 0x28
		.reconfigured = bt_att_reconfigured,
	#endif /* CONFIG_BT_EATT */
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17cde:	b103      	cbz	r3, 17ce2 <att_chan_new+0xe>
   17ce0:	3bf0      	subs	r3, #240	; 0xf0
   17ce2:	9301      	str	r3, [sp, #4]
	int quota = 0;
   17ce4:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17ce6:	e002      	b.n	17cee <att_chan_new+0x1a>
		if (chan->att == att) {
			quota++;
   17ce8:	3201      	adds	r2, #1
   17cea:	e005      	b.n	17cf8 <att_chan_new+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17cec:	9301      	str	r3, [sp, #4]
   17cee:	9c01      	ldr	r4, [sp, #4]
   17cf0:	b16c      	cbz	r4, 17d0e <att_chan_new+0x3a>
		if (chan->att == att) {
   17cf2:	6823      	ldr	r3, [r4, #0]
   17cf4:	42ab      	cmp	r3, r5
   17cf6:	d0f7      	beq.n	17ce8 <att_chan_new+0x14>
		}

		if (quota == ATT_CHAN_MAX) {
   17cf8:	2a01      	cmp	r2, #1
   17cfa:	d036      	beq.n	17d6a <att_chan_new+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17cfc:	f114 03f0 	adds.w	r3, r4, #240	; 0xf0
   17d00:	d0f4      	beq.n	17cec <att_chan_new+0x18>
	return node->next;
   17d02:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17d06:	2b00      	cmp	r3, #0
   17d08:	d0f0      	beq.n	17cec <att_chan_new+0x18>
   17d0a:	3bf0      	subs	r3, #240	; 0xf0
   17d0c:	e7ee      	b.n	17cec <att_chan_new+0x18>
			BT_DBG("Maximum number of channels reached: %d", quota);
			return NULL;
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   17d0e:	2200      	movs	r2, #0
   17d10:	2300      	movs	r3, #0
   17d12:	a901      	add	r1, sp, #4
   17d14:	4816      	ldr	r0, [pc, #88]	; (17d70 <att_chan_new+0x9c>)
   17d16:	f009 ffb1 	bl	21c7c <k_mem_slab_alloc>
   17d1a:	bb00      	cbnz	r0, 17d5e <att_chan_new+0x8a>
		BT_WARN("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   17d1c:	22f8      	movs	r2, #248	; 0xf8
   17d1e:	2100      	movs	r1, #0
   17d20:	9801      	ldr	r0, [sp, #4]
   17d22:	f012 f862 	bl	29dea <memset>
	chan->chan.chan.ops = &ops;
   17d26:	9801      	ldr	r0, [sp, #4]
   17d28:	4b12      	ldr	r3, [pc, #72]	; (17d74 <att_chan_new+0xa0>)
   17d2a:	6083      	str	r3, [r0, #8]
	k_fifo_init(&chan->tx_queue);
   17d2c:	30a0      	adds	r0, #160	; 0xa0
	z_impl_k_queue_init(queue);
   17d2e:	f017 fa53 	bl	2f1d8 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   17d32:	9b01      	ldr	r3, [sp, #4]
   17d34:	3398      	adds	r3, #152	; 0x98
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17d36:	f3bf 8f5b 	dmb	ish
   17d3a:	e853 2f00 	ldrex	r2, [r3]
   17d3e:	e843 6100 	strex	r1, r6, [r3]
   17d42:	2900      	cmp	r1, #0
   17d44:	d1f9      	bne.n	17d3a <att_chan_new+0x66>
   17d46:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   17d4a:	9b01      	ldr	r3, [sp, #4]
   17d4c:	601d      	str	r5, [r3, #0]
	att_chan_attach(att, chan);
   17d4e:	9901      	ldr	r1, [sp, #4]
   17d50:	4628      	mov	r0, r5
   17d52:	f013 f9d7 	bl	2b104 <att_chan_attach>

	return chan;
   17d56:	9c01      	ldr	r4, [sp, #4]
}
   17d58:	4620      	mov	r0, r4
   17d5a:	b002      	add	sp, #8
   17d5c:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("No available ATT channel for conn %p", att->conn);
   17d5e:	682a      	ldr	r2, [r5, #0]
   17d60:	2157      	movs	r1, #87	; 0x57
   17d62:	4805      	ldr	r0, [pc, #20]	; (17d78 <att_chan_new+0xa4>)
   17d64:	f010 ff73 	bl	28c4e <z_log_minimal_printk>
		return NULL;
   17d68:	e7f6      	b.n	17d58 <att_chan_new+0x84>
			return NULL;
   17d6a:	2400      	movs	r4, #0
   17d6c:	e7f4      	b.n	17d58 <att_chan_new+0x84>
   17d6e:	bf00      	nop
   17d70:	20000994 	.word	0x20000994
   17d74:	200006ec 	.word	0x200006ec
   17d78:	00031e4c 	.word	0x00031e4c

00017d7c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   17d7c:	b570      	push	{r4, r5, r6, lr}
   17d7e:	b082      	sub	sp, #8
   17d80:	4604      	mov	r4, r0
   17d82:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   17d84:	2200      	movs	r2, #0
   17d86:	2300      	movs	r3, #0
   17d88:	a901      	add	r1, sp, #4
   17d8a:	4815      	ldr	r0, [pc, #84]	; (17de0 <bt_att_accept+0x64>)
   17d8c:	f009 ff76 	bl	21c7c <k_mem_slab_alloc>
   17d90:	b9d0      	cbnz	r0, 17dc8 <bt_att_accept+0x4c>
   17d92:	4606      	mov	r6, r0
	return z_impl_z_current_get();
   17d94:	f00c fa98 	bl	242c8 <z_impl_z_current_get>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   17d98:	4b12      	ldr	r3, [pc, #72]	; (17de4 <bt_att_accept+0x68>)
   17d9a:	6018      	str	r0, [r3, #0]

	(void)memset(att, 0, sizeof(*att));
   17d9c:	2230      	movs	r2, #48	; 0x30
   17d9e:	2100      	movs	r1, #0
   17da0:	9801      	ldr	r0, [sp, #4]
   17da2:	f012 f822 	bl	29dea <memset>
	att->conn = conn;
   17da6:	9b01      	ldr	r3, [sp, #4]
   17da8:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   17daa:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   17dac:	2100      	movs	r1, #0
   17dae:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   17db0:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   17db2:	6281      	str	r1, [r0, #40]	; 0x28
	list->tail = NULL;
   17db4:	62c1      	str	r1, [r0, #44]	; 0x2c
#if defined(CONFIG_BT_EATT)
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
   17db6:	f7ff ff8d 	bl	17cd4 <att_chan_new>
	if (!chan) {
   17dba:	4603      	mov	r3, r0
   17dbc:	b160      	cbz	r0, 17dd8 <bt_att_accept+0x5c>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   17dbe:	3304      	adds	r3, #4
   17dc0:	602b      	str	r3, [r5, #0]

	return 0;
}
   17dc2:	4630      	mov	r0, r6
   17dc4:	b002      	add	sp, #8
   17dc6:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("No available ATT context for conn %p", conn);
   17dc8:	4622      	mov	r2, r4
   17dca:	2145      	movs	r1, #69	; 0x45
   17dcc:	4806      	ldr	r0, [pc, #24]	; (17de8 <bt_att_accept+0x6c>)
   17dce:	f010 ff3e 	bl	28c4e <z_log_minimal_printk>
		return -ENOMEM;
   17dd2:	f06f 060b 	mvn.w	r6, #11
   17dd6:	e7f4      	b.n	17dc2 <bt_att_accept+0x46>
		return -ENOMEM;
   17dd8:	f06f 060b 	mvn.w	r6, #11
   17ddc:	e7f1      	b.n	17dc2 <bt_att_accept+0x46>
   17dde:	bf00      	nop
   17de0:	20000974 	.word	0x20000974
   17de4:	20002ab8 	.word	0x20002ab8
   17de8:	00031e78 	.word	0x00031e78

00017dec <bt_att_released>:
{
   17dec:	b500      	push	{lr}
   17dee:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   17df0:	3804      	subs	r0, #4
   17df2:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   17df4:	a901      	add	r1, sp, #4
   17df6:	4803      	ldr	r0, [pc, #12]	; (17e04 <bt_att_released+0x18>)
   17df8:	f009 ffa0 	bl	21d3c <k_mem_slab_free>
}
   17dfc:	b003      	add	sp, #12
   17dfe:	f85d fb04 	ldr.w	pc, [sp], #4
   17e02:	bf00      	nop
   17e04:	20000994 	.word	0x20000994

00017e08 <tx_meta_data_free>:
{
   17e08:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   17e0a:	b148      	cbz	r0, 17e20 <tx_meta_data_free+0x18>
   17e0c:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   17e0e:	2214      	movs	r2, #20
   17e10:	2100      	movs	r1, #0
   17e12:	f011 ffea 	bl	29dea <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   17e16:	4621      	mov	r1, r4
   17e18:	4806      	ldr	r0, [pc, #24]	; (17e34 <tx_meta_data_free+0x2c>)
   17e1a:	f017 f9ea 	bl	2f1f2 <k_queue_append>
}
   17e1e:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(data);
   17e20:	4c05      	ldr	r4, [pc, #20]	; (17e38 <tx_meta_data_free+0x30>)
   17e22:	22a5      	movs	r2, #165	; 0xa5
   17e24:	4621      	mov	r1, r4
   17e26:	4805      	ldr	r0, [pc, #20]	; (17e3c <tx_meta_data_free+0x34>)
   17e28:	f010 fef1 	bl	28c0e <assert_print>
   17e2c:	21a5      	movs	r1, #165	; 0xa5
   17e2e:	4620      	mov	r0, r4
   17e30:	f010 fee6 	bl	28c00 <assert_post_action>
   17e34:	20000a64 	.word	0x20000a64
   17e38:	00031de8 	.word	0x00031de8
   17e3c:	00030128 	.word	0x00030128

00017e40 <chan_send>:
{
   17e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17e44:	b085      	sub	sp, #20
   17e46:	4605      	mov	r5, r0
   17e48:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   17e4a:	694f      	ldr	r7, [r1, #20]
	hdr = (void *)buf->data;
   17e4c:	688e      	ldr	r6, [r1, #8]
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   17e4e:	2102      	movs	r1, #2
   17e50:	3098      	adds	r0, #152	; 0x98
   17e52:	f013 f94a 	bl	2b0ea <atomic_test_bit>
   17e56:	2800      	cmp	r0, #0
   17e58:	d039      	beq.n	17ece <chan_send+0x8e>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   17e5a:	7833      	ldrb	r3, [r6, #0]
   17e5c:	2bd2      	cmp	r3, #210	; 0xd2
   17e5e:	d023      	beq.n	17ea8 <chan_send+0x68>
	state->offset = net_buf_simple_headroom(buf);
   17e60:	f104 0008 	add.w	r0, r4, #8
   17e64:	f015 faa4 	bl	2d3b0 <net_buf_simple_headroom>
   17e68:	4606      	mov	r6, r0
   17e6a:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   17e6e:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   17e72:	f8ad 800e 	strh.w	r8, [sp, #14]
	data->att_chan = chan;
   17e76:	603d      	str	r5, [r7, #0]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   17e78:	682b      	ldr	r3, [r5, #0]
   17e7a:	681d      	ldr	r5, [r3, #0]
   17e7c:	4620      	mov	r0, r4
   17e7e:	f7ff fecb 	bl	17c18 <att_cb>
   17e82:	4603      	mov	r3, r0
   17e84:	9700      	str	r7, [sp, #0]
   17e86:	4622      	mov	r2, r4
   17e88:	2104      	movs	r1, #4
   17e8a:	4628      	mov	r0, r5
   17e8c:	f013 f824 	bl	2aed8 <bt_l2cap_send_cb>
	if (err) {
   17e90:	4681      	mov	r9, r0
   17e92:	b128      	cbz	r0, 17ea0 <chan_send+0x60>
	buf->data = buf->__buf + state->offset;
   17e94:	6923      	ldr	r3, [r4, #16]
   17e96:	fa13 f686 	uxtah	r6, r3, r6
   17e9a:	60a6      	str	r6, [r4, #8]
	buf->len = state->len;
   17e9c:	f8a4 800c 	strh.w	r8, [r4, #12]
}
   17ea0:	4648      	mov	r0, r9
   17ea2:	b005      	add	sp, #20
   17ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   17ea8:	682b      	ldr	r3, [r5, #0]
   17eaa:	4621      	mov	r1, r4
   17eac:	6818      	ldr	r0, [r3, #0]
   17eae:	f015 f8e1 	bl	2d074 <bt_smp_sign>
		if (err) {
   17eb2:	4681      	mov	r9, r0
   17eb4:	2800      	cmp	r0, #0
   17eb6:	d0d3      	beq.n	17e60 <chan_send+0x20>
			BT_ERR("Error signing data");
   17eb8:	2145      	movs	r1, #69	; 0x45
   17eba:	4806      	ldr	r0, [pc, #24]	; (17ed4 <chan_send+0x94>)
   17ebc:	f010 fec7 	bl	28c4e <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   17ec0:	6960      	ldr	r0, [r4, #20]
   17ec2:	f7ff ffa1 	bl	17e08 <tx_meta_data_free>
			net_buf_unref(buf);
   17ec6:	4620      	mov	r0, r4
   17ec8:	f004 fe70 	bl	1cbac <net_buf_unref>
			return err;
   17ecc:	e7e8      	b.n	17ea0 <chan_send+0x60>
		return -EINVAL;
   17ece:	f06f 0915 	mvn.w	r9, #21
   17ed2:	e7e5      	b.n	17ea0 <chan_send+0x60>
   17ed4:	00031ea4 	.word	0x00031ea4

00017ed8 <bt_att_chan_req_send>:
{
   17ed8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan);
   17eda:	b140      	cbz	r0, 17eee <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req);
   17edc:	b199      	cbz	r1, 17f06 <bt_att_chan_req_send+0x2e>
	__ASSERT_NO_MSG(req->func);
   17ede:	684a      	ldr	r2, [r1, #4]
   17ee0:	b1ea      	cbz	r2, 17f1e <bt_att_chan_req_send+0x46>
	__ASSERT_NO_MSG(!chan->req);
   17ee2:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
   17ee6:	bb32      	cbnz	r2, 17f36 <bt_att_chan_req_send+0x5e>
	return chan_req_send(chan, req);
   17ee8:	f013 f93c 	bl	2b164 <chan_req_send>
}
   17eec:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(chan);
   17eee:	4c18      	ldr	r4, [pc, #96]	; (17f50 <bt_att_chan_req_send+0x78>)
   17ef0:	f44f 7246 	mov.w	r2, #792	; 0x318
   17ef4:	4621      	mov	r1, r4
   17ef6:	4817      	ldr	r0, [pc, #92]	; (17f54 <bt_att_chan_req_send+0x7c>)
   17ef8:	f010 fe89 	bl	28c0e <assert_print>
   17efc:	f44f 7146 	mov.w	r1, #792	; 0x318
   17f00:	4620      	mov	r0, r4
   17f02:	f010 fe7d 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(req);
   17f06:	4c12      	ldr	r4, [pc, #72]	; (17f50 <bt_att_chan_req_send+0x78>)
   17f08:	f240 3219 	movw	r2, #793	; 0x319
   17f0c:	4621      	mov	r1, r4
   17f0e:	4811      	ldr	r0, [pc, #68]	; (17f54 <bt_att_chan_req_send+0x7c>)
   17f10:	f010 fe7d 	bl	28c0e <assert_print>
   17f14:	f240 3119 	movw	r1, #793	; 0x319
   17f18:	4620      	mov	r0, r4
   17f1a:	f010 fe71 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   17f1e:	4c0c      	ldr	r4, [pc, #48]	; (17f50 <bt_att_chan_req_send+0x78>)
   17f20:	f240 321a 	movw	r2, #794	; 0x31a
   17f24:	4621      	mov	r1, r4
   17f26:	480b      	ldr	r0, [pc, #44]	; (17f54 <bt_att_chan_req_send+0x7c>)
   17f28:	f010 fe71 	bl	28c0e <assert_print>
   17f2c:	f240 311a 	movw	r1, #794	; 0x31a
   17f30:	4620      	mov	r0, r4
   17f32:	f010 fe65 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   17f36:	4c06      	ldr	r4, [pc, #24]	; (17f50 <bt_att_chan_req_send+0x78>)
   17f38:	f240 321b 	movw	r2, #795	; 0x31b
   17f3c:	4621      	mov	r1, r4
   17f3e:	4805      	ldr	r0, [pc, #20]	; (17f54 <bt_att_chan_req_send+0x7c>)
   17f40:	f010 fe65 	bl	28c0e <assert_print>
   17f44:	f240 311b 	movw	r1, #795	; 0x31b
   17f48:	4620      	mov	r0, r4
   17f4a:	f010 fe59 	bl	28c00 <assert_post_action>
   17f4e:	bf00      	nop
   17f50:	00031de8 	.word	0x00031de8
   17f54:	00030128 	.word	0x00030128

00017f58 <read_group_cb>:
{
   17f58:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f5a:	b085      	sub	sp, #20
   17f5c:	4605      	mov	r5, r0
   17f5e:	460e      	mov	r6, r1
   17f60:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   17f62:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17f64:	2300      	movs	r3, #0
   17f66:	f88d 3008 	strb.w	r3, [sp, #8]
   17f6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17f6e:	f8ad 300a 	strh.w	r3, [sp, #10]
   17f72:	a902      	add	r1, sp, #8
   17f74:	6800      	ldr	r0, [r0, #0]
   17f76:	f011 fff9 	bl	29f6c <bt_uuid_cmp>
   17f7a:	b158      	cbz	r0, 17f94 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17f7c:	2300      	movs	r3, #0
   17f7e:	f88d 300c 	strb.w	r3, [sp, #12]
   17f82:	f642 0301 	movw	r3, #10241	; 0x2801
   17f86:	f8ad 300e 	strh.w	r3, [sp, #14]
   17f8a:	a903      	add	r1, sp, #12
   17f8c:	6828      	ldr	r0, [r5, #0]
   17f8e:	f011 ffed 	bl	29f6c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17f92:	bb28      	cbnz	r0, 17fe0 <read_group_cb+0x88>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   17f94:	6861      	ldr	r1, [r4, #4]
   17f96:	6828      	ldr	r0, [r5, #0]
   17f98:	f011 ffe8 	bl	29f6c <bt_uuid_cmp>
   17f9c:	bb40      	cbnz	r0, 17ff0 <read_group_cb+0x98>
	if (data->rsp->len &&
   17f9e:	68e3      	ldr	r3, [r4, #12]
   17fa0:	781a      	ldrb	r2, [r3, #0]
   17fa2:	b12a      	cbz	r2, 17fb0 <read_group_cb+0x58>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   17fa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   17fa6:	68a1      	ldr	r1, [r4, #8]
   17fa8:	8989      	ldrh	r1, [r1, #12]
   17faa:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   17fac:	4293      	cmp	r3, r2
   17fae:	db24      	blt.n	17ffa <read_group_cb+0xa2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   17fb0:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   17fb2:	2104      	movs	r1, #4
   17fb4:	3008      	adds	r0, #8
   17fb6:	f004 fefb 	bl	1cdb0 <net_buf_simple_add>
   17fba:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   17fbc:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   17fbe:	6923      	ldr	r3, [r4, #16]
   17fc0:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   17fc2:	9401      	str	r4, [sp, #4]
   17fc4:	4b10      	ldr	r3, [pc, #64]	; (18008 <read_group_cb+0xb0>)
   17fc6:	9300      	str	r3, [sp, #0]
   17fc8:	2300      	movs	r3, #0
   17fca:	68a2      	ldr	r2, [r4, #8]
   17fcc:	4629      	mov	r1, r5
   17fce:	4638      	mov	r0, r7
   17fd0:	f013 fa68 	bl	2b4a4 <att_chan_read>
	if (read < 0) {
   17fd4:	2800      	cmp	r0, #0
   17fd6:	db12      	blt.n	17ffe <read_group_cb+0xa6>
	if (!data->group) {
   17fd8:	6923      	ldr	r3, [r4, #16]
   17fda:	b193      	cbz	r3, 18002 <read_group_cb+0xaa>
	return BT_GATT_ITER_CONTINUE;
   17fdc:	2001      	movs	r0, #1
   17fde:	e00a      	b.n	17ff6 <read_group_cb+0x9e>
		if (data->group &&
   17fe0:	6923      	ldr	r3, [r4, #16]
   17fe2:	b11b      	cbz	r3, 17fec <read_group_cb+0x94>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   17fe4:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   17fe6:	42b2      	cmp	r2, r6
   17fe8:	d200      	bcs.n	17fec <read_group_cb+0x94>
			data->group->end_handle = sys_cpu_to_le16(handle);
   17fea:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   17fec:	2001      	movs	r0, #1
   17fee:	e002      	b.n	17ff6 <read_group_cb+0x9e>
		data->group = NULL;
   17ff0:	2300      	movs	r3, #0
   17ff2:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   17ff4:	2001      	movs	r0, #1
}
   17ff6:	b005      	add	sp, #20
   17ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   17ffa:	2000      	movs	r0, #0
   17ffc:	e7fb      	b.n	17ff6 <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   17ffe:	2000      	movs	r0, #0
   18000:	e7f9      	b.n	17ff6 <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   18002:	2000      	movs	r0, #0
   18004:	e7f7      	b.n	17ff6 <read_group_cb+0x9e>
   18006:	bf00      	nop
   18008:	0002b0bd 	.word	0x0002b0bd

0001800c <read_type_cb>:
{
   1800c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18010:	b083      	sub	sp, #12
   18012:	4606      	mov	r6, r0
   18014:	4688      	mov	r8, r1
   18016:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   18018:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1801a:	687d      	ldr	r5, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1801c:	6851      	ldr	r1, [r2, #4]
   1801e:	6800      	ldr	r0, [r0, #0]
   18020:	f011 ffa4 	bl	29f6c <bt_uuid_cmp>
   18024:	b120      	cbz	r0, 18030 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   18026:	2501      	movs	r5, #1
}
   18028:	4628      	mov	r0, r5
   1802a:	b003      	add	sp, #12
   1802c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18030:	2295      	movs	r2, #149	; 0x95
   18032:	4631      	mov	r1, r6
   18034:	4628      	mov	r0, r5
   18036:	f014 f97b 	bl	2c330 <bt_gatt_check_perm>
   1803a:	4605      	mov	r5, r0
   1803c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1803e:	b130      	cbz	r0, 1804e <read_type_cb+0x42>
		if (data->rsp->len) {
   18040:	68e3      	ldr	r3, [r4, #12]
   18042:	781b      	ldrb	r3, [r3, #0]
   18044:	b10b      	cbz	r3, 1804a <read_type_cb+0x3e>
			data->err = 0x00;
   18046:	2300      	movs	r3, #0
   18048:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1804a:	2500      	movs	r5, #0
   1804c:	e7ec      	b.n	18028 <read_type_cb+0x1c>
	data->err = 0x00;
   1804e:	f04f 0900 	mov.w	r9, #0
   18052:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18056:	68a0      	ldr	r0, [r4, #8]
   18058:	f004 fdf2 	bl	1cc40 <net_buf_frag_last>
   1805c:	2102      	movs	r1, #2
   1805e:	3008      	adds	r0, #8
   18060:	f004 fea6 	bl	1cdb0 <net_buf_simple_add>
   18064:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   18066:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1806a:	9401      	str	r4, [sp, #4]
   1806c:	4b10      	ldr	r3, [pc, #64]	; (180b0 <read_type_cb+0xa4>)
   1806e:	9300      	str	r3, [sp, #0]
   18070:	464b      	mov	r3, r9
   18072:	68a2      	ldr	r2, [r4, #8]
   18074:	4631      	mov	r1, r6
   18076:	4638      	mov	r0, r7
   18078:	f013 fa14 	bl	2b4a4 <att_chan_read>
	if (read < 0) {
   1807c:	2800      	cmp	r0, #0
   1807e:	db06      	blt.n	1808e <read_type_cb+0x82>
	if (!data->item) {
   18080:	6923      	ldr	r3, [r4, #16]
   18082:	2b00      	cmp	r3, #0
   18084:	d0d0      	beq.n	18028 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18086:	8d7d      	ldrh	r5, [r7, #42]	; 0x2a
   18088:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1808a:	2200      	movs	r2, #0

	while (buf) {
   1808c:	e006      	b.n	1809c <read_type_cb+0x90>
		data->err = err_to_att(read);
   1808e:	f012 fff9 	bl	2b084 <err_to_att>
   18092:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18094:	e7c8      	b.n	18028 <read_type_cb+0x1c>
		bytes += buf->len;
   18096:	8999      	ldrh	r1, [r3, #12]
   18098:	440a      	add	r2, r1
		buf = buf->frags;
   1809a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1809c:	2b00      	cmp	r3, #0
   1809e:	d1fa      	bne.n	18096 <read_type_cb+0x8a>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   180a0:	1aad      	subs	r5, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   180a2:	68e3      	ldr	r3, [r4, #12]
   180a4:	781b      	ldrb	r3, [r3, #0]
   180a6:	429d      	cmp	r5, r3
   180a8:	bf94      	ite	ls
   180aa:	2500      	movls	r5, #0
   180ac:	2501      	movhi	r5, #1
   180ae:	e7bb      	b.n	18028 <read_type_cb+0x1c>
   180b0:	0002b095 	.word	0x0002b095

000180b4 <find_type_cb>:
{
   180b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180b8:	b093      	sub	sp, #76	; 0x4c
   180ba:	4605      	mov	r5, r0
   180bc:	460e      	mov	r6, r1
   180be:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   180c0:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   180c2:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   180c6:	2300      	movs	r3, #0
   180c8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   180cc:	f642 0301 	movw	r3, #10241	; 0x2801
   180d0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   180d4:	a910      	add	r1, sp, #64	; 0x40
   180d6:	6800      	ldr	r0, [r0, #0]
   180d8:	f011 ff48 	bl	29f6c <bt_uuid_cmp>
   180dc:	b928      	cbnz	r0, 180ea <find_type_cb+0x36>
	data->group = NULL;
   180de:	2300      	movs	r3, #0
   180e0:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   180e2:	2001      	movs	r0, #1
}
   180e4:	b013      	add	sp, #76	; 0x4c
   180e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   180ea:	2300      	movs	r3, #0
   180ec:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   180f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   180f4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   180f8:	a911      	add	r1, sp, #68	; 0x44
   180fa:	6828      	ldr	r0, [r5, #0]
   180fc:	f011 ff36 	bl	29f6c <bt_uuid_cmp>
   18100:	b928      	cbnz	r0, 1810e <find_type_cb+0x5a>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   18102:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
   18104:	6860      	ldr	r0, [r4, #4]
   18106:	4603      	mov	r3, r0
	size_t bytes = 0;
   18108:	f04f 0c00 	mov.w	ip, #0
	while (buf) {
   1810c:	e00a      	b.n	18124 <find_type_cb+0x70>
		if (data->group &&
   1810e:	68a3      	ldr	r3, [r4, #8]
   18110:	b11b      	cbz	r3, 1811a <find_type_cb+0x66>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   18112:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   18114:	42b2      	cmp	r2, r6
   18116:	d200      	bcs.n	1811a <find_type_cb+0x66>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18118:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1811a:	2001      	movs	r0, #1
   1811c:	e7e2      	b.n	180e4 <find_type_cb+0x30>
		bytes += buf->len;
   1811e:	899a      	ldrh	r2, [r3, #12]
   18120:	4494      	add	ip, r2
		buf = buf->frags;
   18122:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   18124:	2b00      	cmp	r3, #0
   18126:	d1fa      	bne.n	1811e <find_type_cb+0x6a>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   18128:	eba1 030c 	sub.w	r3, r1, ip
   1812c:	2b03      	cmp	r3, #3
   1812e:	d801      	bhi.n	18134 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   18130:	2000      	movs	r0, #0
   18132:	e7d7      	b.n	180e4 <find_type_cb+0x30>
	frag = net_buf_frag_last(data->buf);
   18134:	f004 fd84 	bl	1cc40 <net_buf_frag_last>
   18138:	4681      	mov	r9, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1813a:	f8b7 a02a 	ldrh.w	sl, [r7, #42]	; 0x2a
   1813e:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   18140:	2200      	movs	r2, #0
	while (buf) {
   18142:	e002      	b.n	1814a <find_type_cb+0x96>
		bytes += buf->len;
   18144:	8999      	ldrh	r1, [r3, #12]
   18146:	440a      	add	r2, r1
		buf = buf->frags;
   18148:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1814a:	2b00      	cmp	r3, #0
   1814c:	d1fa      	bne.n	18144 <find_type_cb+0x90>
   1814e:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   18152:	f109 0b08 	add.w	fp, r9, #8
   18156:	4658      	mov	r0, fp
   18158:	f015 f92e 	bl	2d3b8 <net_buf_simple_tailroom>
   1815c:	4582      	cmp	sl, r0
   1815e:	d228      	bcs.n	181b2 <find_type_cb+0xfe>
   18160:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   18162:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   18164:	2200      	movs	r2, #0
	while (buf) {
   18166:	e002      	b.n	1816e <find_type_cb+0xba>
		bytes += buf->len;
   18168:	8999      	ldrh	r1, [r3, #12]
   1816a:	440a      	add	r2, r1
		buf = buf->frags;
   1816c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1816e:	2b00      	cmp	r3, #0
   18170:	d1fa      	bne.n	18168 <find_type_cb+0xb4>
   18172:	1a80      	subs	r0, r0, r2
	if (!len) {
   18174:	b308      	cbz	r0, 181ba <find_type_cb+0x106>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   18176:	686f      	ldr	r7, [r5, #4]
   18178:	2300      	movs	r3, #0
   1817a:	9300      	str	r3, [sp, #0]
   1817c:	2310      	movs	r3, #16
   1817e:	aa0c      	add	r2, sp, #48	; 0x30
   18180:	4629      	mov	r1, r5
   18182:	4640      	mov	r0, r8
   18184:	47b8      	blx	r7
	if (read < 0) {
   18186:	1e05      	subs	r5, r0, #0
   18188:	dba9      	blt.n	180de <find_type_cb+0x2a>
	if (read != data->value_len) {
   1818a:	7c22      	ldrb	r2, [r4, #16]
   1818c:	42aa      	cmp	r2, r5
   1818e:	d030      	beq.n	181f2 <find_type_cb+0x13e>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18190:	68e1      	ldr	r1, [r4, #12]
   18192:	a807      	add	r0, sp, #28
   18194:	f011 ff08 	bl	29fa8 <bt_uuid_create>
   18198:	b1f8      	cbz	r0, 181da <find_type_cb+0x126>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1819a:	b2ea      	uxtb	r2, r5
   1819c:	a90c      	add	r1, sp, #48	; 0x30
   1819e:	a802      	add	r0, sp, #8
   181a0:	f011 ff02 	bl	29fa8 <bt_uuid_create>
   181a4:	b1f8      	cbz	r0, 181e6 <find_type_cb+0x132>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   181a6:	a902      	add	r1, sp, #8
   181a8:	a807      	add	r0, sp, #28
   181aa:	f011 fedf 	bl	29f6c <bt_uuid_cmp>
   181ae:	b340      	cbz	r0, 18202 <find_type_cb+0x14e>
   181b0:	e795      	b.n	180de <find_type_cb+0x2a>
	return net_buf_simple_tailroom(&buf->b);
   181b2:	4658      	mov	r0, fp
   181b4:	f015 f900 	bl	2d3b8 <net_buf_simple_tailroom>
   181b8:	e7dc      	b.n	18174 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   181ba:	6863      	ldr	r3, [r4, #4]
   181bc:	7998      	ldrb	r0, [r3, #6]
   181be:	f004 fa99 	bl	1c6f4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   181c2:	2200      	movs	r2, #0
   181c4:	2300      	movs	r3, #0
   181c6:	f015 f8e4 	bl	2d392 <net_buf_alloc_fixed>
		if (!frag) {
   181ca:	4681      	mov	r9, r0
   181cc:	2800      	cmp	r0, #0
   181ce:	d089      	beq.n	180e4 <find_type_cb+0x30>
		net_buf_frag_add(data->buf, frag);
   181d0:	4601      	mov	r1, r0
   181d2:	6860      	ldr	r0, [r4, #4]
   181d4:	f004 fd76 	bl	1ccc4 <net_buf_frag_add>
   181d8:	e7cd      	b.n	18176 <find_type_cb+0xc2>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   181da:	7c22      	ldrb	r2, [r4, #16]
   181dc:	2157      	movs	r1, #87	; 0x57
   181de:	480f      	ldr	r0, [pc, #60]	; (1821c <find_type_cb+0x168>)
   181e0:	f010 fd35 	bl	28c4e <z_log_minimal_printk>
			goto skip;
   181e4:	e77b      	b.n	180de <find_type_cb+0x2a>
			BT_WARN("Unable to create UUID: size %d", read);
   181e6:	462a      	mov	r2, r5
   181e8:	2157      	movs	r1, #87	; 0x57
   181ea:	480d      	ldr	r0, [pc, #52]	; (18220 <find_type_cb+0x16c>)
   181ec:	f010 fd2f 	bl	28c4e <z_log_minimal_printk>
			goto skip;
   181f0:	e775      	b.n	180de <find_type_cb+0x2a>
	} else if (memcmp(data->value, uuid, read)) {
   181f2:	462a      	mov	r2, r5
   181f4:	a90c      	add	r1, sp, #48	; 0x30
   181f6:	68e0      	ldr	r0, [r4, #12]
   181f8:	f011 fda3 	bl	29d42 <memcmp>
   181fc:	2800      	cmp	r0, #0
   181fe:	f47f af6e 	bne.w	180de <find_type_cb+0x2a>
	data->err = 0x00;
   18202:	2300      	movs	r3, #0
   18204:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18206:	2104      	movs	r1, #4
   18208:	f109 0008 	add.w	r0, r9, #8
   1820c:	f004 fdd0 	bl	1cdb0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18210:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18212:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18214:	68a3      	ldr	r3, [r4, #8]
   18216:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   18218:	2001      	movs	r0, #1
   1821a:	e763      	b.n	180e4 <find_type_cb+0x30>
   1821c:	00031ebc 	.word	0x00031ebc
   18220:	00031ee0 	.word	0x00031ee0

00018224 <bt_att_connected>:
{
   18224:	b510      	push	{r4, lr}
   18226:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   18228:	3804      	subs	r0, #4
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1822a:	f104 0394 	add.w	r3, r4, #148	; 0x94
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1822e:	f3bf 8f5b 	dmb	ish
   18232:	e853 1f00 	ldrex	r1, [r3]
   18236:	f041 0104 	orr.w	r1, r1, #4
   1823a:	e843 1200 	strex	r2, r1, [r3]
   1823e:	2a00      	cmp	r2, #0
   18240:	d1f7      	bne.n	18232 <bt_att_connected+0xe>
   18242:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18246:	2317      	movs	r3, #23
   18248:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1824a:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1824c:	f013 fa87 	bl	2b75e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   18250:	4904      	ldr	r1, [pc, #16]	; (18264 <bt_att_connected+0x40>)
   18252:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   18256:	f00a fe69 	bl	22f2c <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1825a:	6820      	ldr	r0, [r4, #0]
   1825c:	f002 f94e 	bl	1a4fc <bt_gatt_connected>
}
   18260:	bd10      	pop	{r4, pc}
   18262:	bf00      	nop
   18264:	00018b11 	.word	0x00018b11

00018268 <bt_att_chan_create_pdu>:
{
   18268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1826a:	1c53      	adds	r3, r2, #1
   1826c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   1826e:	4293      	cmp	r3, r2
   18270:	d80c      	bhi.n	1828c <bt_att_chan_create_pdu+0x24>
   18272:	460c      	mov	r4, r1
	switch (att_op_get_type(op)) {
   18274:	4608      	mov	r0, r1
   18276:	f7ff fc73 	bl	17b60 <att_op_get_type>
   1827a:	2802      	cmp	r0, #2
   1827c:	d00c      	beq.n	18298 <bt_att_chan_create_pdu+0x30>
   1827e:	2804      	cmp	r0, #4
   18280:	d00a      	beq.n	18298 <bt_att_chan_create_pdu+0x30>
		timeout = K_FOREVER;
   18282:	f04f 36ff 	mov.w	r6, #4294967295
   18286:	f04f 37ff 	mov.w	r7, #4294967295
   1828a:	e008      	b.n	1829e <bt_att_chan_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1828c:	2157      	movs	r1, #87	; 0x57
   1828e:	4817      	ldr	r0, [pc, #92]	; (182ec <bt_att_chan_create_pdu+0x84>)
   18290:	f010 fcdd 	bl	28c4e <z_log_minimal_printk>
		return NULL;
   18294:	2500      	movs	r5, #0
   18296:	e017      	b.n	182c8 <bt_att_chan_create_pdu+0x60>
		timeout = BT_ATT_TIMEOUT;
   18298:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   1829c:	2700      	movs	r7, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1829e:	4632      	mov	r2, r6
   182a0:	463b      	mov	r3, r7
   182a2:	2100      	movs	r1, #0
   182a4:	4608      	mov	r0, r1
   182a6:	f012 fe12 	bl	2aece <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   182aa:	4605      	mov	r5, r0
   182ac:	b170      	cbz	r0, 182cc <bt_att_chan_create_pdu+0x64>
	data = tx_meta_data_alloc(timeout);
   182ae:	4630      	mov	r0, r6
   182b0:	4639      	mov	r1, r7
   182b2:	f7ff fca7 	bl	17c04 <tx_meta_data_alloc>
	if (!data) {
   182b6:	4606      	mov	r6, r0
   182b8:	b170      	cbz	r0, 182d8 <bt_att_chan_create_pdu+0x70>
	bt_att_tx_meta_data(buf) = data;
   182ba:	6168      	str	r0, [r5, #20]
   182bc:	2101      	movs	r1, #1
   182be:	f105 0008 	add.w	r0, r5, #8
   182c2:	f004 fd75 	bl	1cdb0 <net_buf_simple_add>
	hdr->code = op;
   182c6:	7004      	strb	r4, [r0, #0]
}
   182c8:	4628      	mov	r0, r5
   182ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   182cc:	4622      	mov	r2, r4
   182ce:	2145      	movs	r1, #69	; 0x45
   182d0:	4807      	ldr	r0, [pc, #28]	; (182f0 <bt_att_chan_create_pdu+0x88>)
   182d2:	f010 fcbc 	bl	28c4e <z_log_minimal_printk>
		return NULL;
   182d6:	e7f7      	b.n	182c8 <bt_att_chan_create_pdu+0x60>
		BT_WARN("Unable to allocate ATT TX meta");
   182d8:	2157      	movs	r1, #87	; 0x57
   182da:	4806      	ldr	r0, [pc, #24]	; (182f4 <bt_att_chan_create_pdu+0x8c>)
   182dc:	f010 fcb7 	bl	28c4e <z_log_minimal_printk>
		net_buf_unref(buf);
   182e0:	4628      	mov	r0, r5
   182e2:	f004 fc63 	bl	1cbac <net_buf_unref>
		return NULL;
   182e6:	4635      	mov	r5, r6
   182e8:	e7ee      	b.n	182c8 <bt_att_chan_create_pdu+0x60>
   182ea:	bf00      	nop
   182ec:	00031f04 	.word	0x00031f04
   182f0:	00031c88 	.word	0x00031c88
   182f4:	00031f30 	.word	0x00031f30

000182f8 <bt_att_recv>:
{
   182f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*hdr)) {
   182fc:	898b      	ldrh	r3, [r1, #12]
   182fe:	b1bb      	cbz	r3, 18330 <bt_att_recv+0x38>
   18300:	4606      	mov	r6, r0
   18302:	460d      	mov	r5, r1
   18304:	1f07      	subs	r7, r0, #4
	return net_buf_simple_pull_mem(&buf->b, len);
   18306:	2101      	movs	r1, #1
   18308:	f105 0008 	add.w	r0, r5, #8
   1830c:	f004 fd16 	bl	1cd3c <net_buf_simple_pull_mem>
   18310:	4604      	mov	r4, r0
	if (!att_chan->att) {
   18312:	f856 3c04 	ldr.w	r3, [r6, #-4]
   18316:	b17b      	cbz	r3, 18338 <bt_att_recv+0x40>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18318:	2300      	movs	r3, #0
   1831a:	2b0d      	cmp	r3, #13
   1831c:	d830      	bhi.n	18380 <bt_att_recv+0x88>
		if (hdr->code == handlers[i].op) {
   1831e:	f894 c000 	ldrb.w	ip, [r4]
   18322:	4a31      	ldr	r2, [pc, #196]	; (183e8 <bt_att_recv+0xf0>)
   18324:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   18328:	4594      	cmp	ip, r2
   1832a:	d008      	beq.n	1833e <bt_att_recv+0x46>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1832c:	3301      	adds	r3, #1
   1832e:	e7f4      	b.n	1831a <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
   18330:	2145      	movs	r1, #69	; 0x45
   18332:	482e      	ldr	r0, [pc, #184]	; (183ec <bt_att_recv+0xf4>)
   18334:	f010 fc8b 	bl	28c4e <z_log_minimal_printk>
}
   18338:	2000      	movs	r0, #0
   1833a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			handler = &handlers[i];
   1833e:	4a2a      	ldr	r2, [pc, #168]	; (183e8 <bt_att_recv+0xf0>)
   18340:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
		if (handler->type == ATT_REQUEST &&
   18344:	f898 9002 	ldrb.w	r9, [r8, #2]
   18348:	f1b9 0f01 	cmp.w	r9, #1
   1834c:	d02c      	beq.n	183a8 <bt_att_recv+0xb0>
		} else if (handler->type == ATT_INDICATION &&
   1834e:	f1b9 0f05 	cmp.w	r9, #5
   18352:	d035      	beq.n	183c0 <bt_att_recv+0xc8>
	if (buf->len < handler->expect_len) {
   18354:	89aa      	ldrh	r2, [r5, #12]
   18356:	f898 3001 	ldrb.w	r3, [r8, #1]
   1835a:	429a      	cmp	r2, r3
   1835c:	d33c      	bcc.n	183d8 <bt_att_recv+0xe0>
		err = handler->func(att_chan, buf);
   1835e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18362:	4629      	mov	r1, r5
   18364:	4638      	mov	r0, r7
   18366:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   18368:	f1b9 0f01 	cmp.w	r9, #1
   1836c:	d1e4      	bne.n	18338 <bt_att_recv+0x40>
   1836e:	2800      	cmp	r0, #0
   18370:	d0e2      	beq.n	18338 <bt_att_recv+0x40>
		send_err_rsp(att_chan, hdr->code, 0, err);
   18372:	4603      	mov	r3, r0
   18374:	2200      	movs	r2, #0
   18376:	7821      	ldrb	r1, [r4, #0]
   18378:	4638      	mov	r0, r7
   1837a:	f013 fa81 	bl	2b880 <send_err_rsp>
   1837e:	e7db      	b.n	18338 <bt_att_recv+0x40>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   18380:	7822      	ldrb	r2, [r4, #0]
   18382:	2157      	movs	r1, #87	; 0x57
   18384:	481a      	ldr	r0, [pc, #104]	; (183f0 <bt_att_recv+0xf8>)
   18386:	f010 fc62 	bl	28c4e <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1838a:	7824      	ldrb	r4, [r4, #0]
   1838c:	4620      	mov	r0, r4
   1838e:	f7ff fbe7 	bl	17b60 <att_op_get_type>
   18392:	2800      	cmp	r0, #0
   18394:	d0d0      	beq.n	18338 <bt_att_recv+0x40>
   18396:	2805      	cmp	r0, #5
   18398:	d0ce      	beq.n	18338 <bt_att_recv+0x40>
			send_err_rsp(att_chan, hdr->code, 0,
   1839a:	2306      	movs	r3, #6
   1839c:	2200      	movs	r2, #0
   1839e:	4621      	mov	r1, r4
   183a0:	4638      	mov	r0, r7
   183a2:	f013 fa6d 	bl	2b880 <send_err_rsp>
		return 0;
   183a6:	e7c7      	b.n	18338 <bt_att_recv+0x40>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   183a8:	2100      	movs	r1, #0
   183aa:	f106 0094 	add.w	r0, r6, #148	; 0x94
   183ae:	f013 fa0e 	bl	2b7ce <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   183b2:	2800      	cmp	r0, #0
   183b4:	d0cb      	beq.n	1834e <bt_att_recv+0x56>
			BT_WARN("Ignoring unexpected request");
   183b6:	2157      	movs	r1, #87	; 0x57
   183b8:	480e      	ldr	r0, [pc, #56]	; (183f4 <bt_att_recv+0xfc>)
   183ba:	f010 fc48 	bl	28c4e <z_log_minimal_printk>
			return 0;
   183be:	e7bb      	b.n	18338 <bt_att_recv+0x40>
			   atomic_test_and_set_bit(att_chan->flags,
   183c0:	2101      	movs	r1, #1
   183c2:	f106 0094 	add.w	r0, r6, #148	; 0x94
   183c6:	f013 fa02 	bl	2b7ce <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   183ca:	2800      	cmp	r0, #0
   183cc:	d0c2      	beq.n	18354 <bt_att_recv+0x5c>
			BT_WARN("Ignoring unexpected indication");
   183ce:	2157      	movs	r1, #87	; 0x57
   183d0:	4809      	ldr	r0, [pc, #36]	; (183f8 <bt_att_recv+0x100>)
   183d2:	f010 fc3c 	bl	28c4e <z_log_minimal_printk>
			return 0;
   183d6:	e7af      	b.n	18338 <bt_att_recv+0x40>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   183d8:	7823      	ldrb	r3, [r4, #0]
   183da:	2145      	movs	r1, #69	; 0x45
   183dc:	4807      	ldr	r0, [pc, #28]	; (183fc <bt_att_recv+0x104>)
   183de:	f010 fc36 	bl	28c4e <z_log_minimal_printk>
		err = BT_ATT_ERR_INVALID_PDU;
   183e2:	2004      	movs	r0, #4
   183e4:	e7c0      	b.n	18368 <bt_att_recv+0x70>
   183e6:	bf00      	nop
   183e8:	00032050 	.word	0x00032050
   183ec:	00031f54 	.word	0x00031f54
   183f0:	00031f74 	.word	0x00031f74
   183f4:	00031f94 	.word	0x00031f94
   183f8:	00031fb8 	.word	0x00031fb8
   183fc:	00031fdc 	.word	0x00031fdc

00018400 <att_write_rsp>:
{
   18400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18404:	b08a      	sub	sp, #40	; 0x28
   18406:	4604      	mov	r4, r0
   18408:	4617      	mov	r7, r2
   1840a:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1840c:	6803      	ldr	r3, [r0, #0]
   1840e:	4688      	mov	r8, r1
   18410:	3900      	subs	r1, #0
   18412:	bf18      	it	ne
   18414:	2101      	movne	r1, #1
   18416:	6818      	ldr	r0, [r3, #0]
   18418:	f013 ffcb 	bl	2c3b2 <bt_gatt_change_aware>
   1841c:	b128      	cbz	r0, 1842a <att_write_rsp+0x2a>
	if (!handle) {
   1841e:	b975      	cbnz	r5, 1843e <att_write_rsp+0x3e>
		return BT_ATT_ERR_INVALID_HANDLE;
   18420:	2601      	movs	r6, #1
}
   18422:	4630      	mov	r0, r6
   18424:	b00a      	add	sp, #40	; 0x28
   18426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1842a:	2105      	movs	r1, #5
   1842c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18430:	f013 f9cd 	bl	2b7ce <atomic_test_and_set_bit>
   18434:	b108      	cbz	r0, 1843a <att_write_rsp+0x3a>
			return 0;
   18436:	2600      	movs	r6, #0
   18438:	e7f3      	b.n	18422 <att_write_rsp+0x22>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1843a:	2612      	movs	r6, #18
   1843c:	e7f1      	b.n	18422 <att_write_rsp+0x22>
	(void)memset(&data, 0, sizeof(data));
   1843e:	2218      	movs	r2, #24
   18440:	2100      	movs	r1, #0
   18442:	a804      	add	r0, sp, #16
   18444:	f011 fcd1 	bl	29dea <memset>
	if (rsp) {
   18448:	b13f      	cbz	r7, 1845a <att_write_rsp+0x5a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1844a:	2200      	movs	r2, #0
   1844c:	4639      	mov	r1, r7
   1844e:	4620      	mov	r0, r4
   18450:	f7ff ff0a 	bl	18268 <bt_att_chan_create_pdu>
   18454:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   18456:	2800      	cmp	r0, #0
   18458:	d03e      	beq.n	184d8 <att_write_rsp+0xd8>
	data.conn = chan->att->conn;
   1845a:	6823      	ldr	r3, [r4, #0]
   1845c:	681b      	ldr	r3, [r3, #0]
   1845e:	9304      	str	r3, [sp, #16]
	data.req = req;
   18460:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   18464:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   18468:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1846c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1846e:	9307      	str	r3, [sp, #28]
	data.len = len;
   18470:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   18474:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18478:	2301      	movs	r3, #1
   1847a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1847e:	ab04      	add	r3, sp, #16
   18480:	9302      	str	r3, [sp, #8]
   18482:	4b16      	ldr	r3, [pc, #88]	; (184dc <att_write_rsp+0xdc>)
   18484:	9301      	str	r3, [sp, #4]
   18486:	2200      	movs	r2, #0
   18488:	9200      	str	r2, [sp, #0]
   1848a:	4613      	mov	r3, r2
   1848c:	4629      	mov	r1, r5
   1848e:	4628      	mov	r0, r5
   18490:	f001 f9da 	bl	19848 <bt_gatt_foreach_attr_type>
	if (data.err) {
   18494:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   18498:	b936      	cbnz	r6, 184a8 <att_write_rsp+0xa8>
	if (data.buf) {
   1849a:	9905      	ldr	r1, [sp, #20]
   1849c:	2900      	cmp	r1, #0
   1849e:	d0c0      	beq.n	18422 <att_write_rsp+0x22>
		bt_att_chan_send_rsp(chan, data.buf);
   184a0:	4620      	mov	r0, r4
   184a2:	f012 fff2 	bl	2b48a <bt_att_chan_send_rsp>
   184a6:	e7bc      	b.n	18422 <att_write_rsp+0x22>
		if (rsp) {
   184a8:	b927      	cbnz	r7, 184b4 <att_write_rsp+0xb4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   184aa:	f1b8 0f18 	cmp.w	r8, #24
   184ae:	d010      	beq.n	184d2 <att_write_rsp+0xd2>
   184b0:	2600      	movs	r6, #0
   184b2:	e7b6      	b.n	18422 <att_write_rsp+0x22>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   184b4:	9b05      	ldr	r3, [sp, #20]
   184b6:	6958      	ldr	r0, [r3, #20]
   184b8:	f7ff fca6 	bl	17e08 <tx_meta_data_free>
			net_buf_unref(data.buf);
   184bc:	9805      	ldr	r0, [sp, #20]
   184be:	f004 fb75 	bl	1cbac <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   184c2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   184c6:	462a      	mov	r2, r5
   184c8:	4641      	mov	r1, r8
   184ca:	4620      	mov	r0, r4
   184cc:	f013 f9d8 	bl	2b880 <send_err_rsp>
   184d0:	e7eb      	b.n	184aa <att_write_rsp+0xaa>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   184d2:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   184d6:	e7a4      	b.n	18422 <att_write_rsp+0x22>
			return BT_ATT_ERR_UNLIKELY;
   184d8:	260e      	movs	r6, #14
   184da:	e7a2      	b.n	18422 <att_write_rsp+0x22>
   184dc:	0002b42b 	.word	0x0002b42b

000184e0 <bt_att_create_pdu>:
{
   184e0:	b570      	push	{r4, r5, r6, lr}
   184e2:	460e      	mov	r6, r1
   184e4:	4615      	mov	r5, r2
	att = att_get(conn);
   184e6:	f7ff fbc3 	bl	17c70 <att_get>
	if (!att) {
   184ea:	4604      	mov	r4, r0
   184ec:	b300      	cbz	r0, 18530 <bt_att_create_pdu+0x50>
	return list->head;
   184ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   184f0:	b304      	cbz	r4, 18534 <bt_att_create_pdu+0x54>
   184f2:	3cf0      	subs	r4, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   184f4:	f114 00f0 	adds.w	r0, r4, #240	; 0xf0
   184f8:	d007      	beq.n	1850a <bt_att_create_pdu+0x2a>
	return node->next;
   184fa:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   184fe:	b120      	cbz	r0, 1850a <bt_att_create_pdu+0x2a>
   18500:	38f0      	subs	r0, #240	; 0xf0
   18502:	e002      	b.n	1850a <bt_att_create_pdu+0x2a>
   18504:	4603      	mov	r3, r0
   18506:	4604      	mov	r4, r0
   18508:	4618      	mov	r0, r3
   1850a:	b1ac      	cbz	r4, 18538 <bt_att_create_pdu+0x58>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1850c:	1c6b      	adds	r3, r5, #1
   1850e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   18510:	4293      	cmp	r3, r2
   18512:	d907      	bls.n	18524 <bt_att_create_pdu+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18514:	2800      	cmp	r0, #0
   18516:	d0f5      	beq.n	18504 <bt_att_create_pdu+0x24>
   18518:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1851c:	2b00      	cmp	r3, #0
   1851e:	d0f2      	beq.n	18506 <bt_att_create_pdu+0x26>
   18520:	3bf0      	subs	r3, #240	; 0xf0
   18522:	e7f0      	b.n	18506 <bt_att_create_pdu+0x26>
		return bt_att_chan_create_pdu(chan, op, len);
   18524:	462a      	mov	r2, r5
   18526:	4631      	mov	r1, r6
   18528:	4620      	mov	r0, r4
   1852a:	f7ff fe9d 	bl	18268 <bt_att_chan_create_pdu>
   1852e:	4604      	mov	r4, r0
}
   18530:	4620      	mov	r0, r4
   18532:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18534:	4620      	mov	r0, r4
   18536:	e7e8      	b.n	1850a <bt_att_create_pdu+0x2a>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   18538:	1c6a      	adds	r2, r5, #1
   1853a:	2157      	movs	r1, #87	; 0x57
   1853c:	4801      	ldr	r0, [pc, #4]	; (18544 <bt_att_create_pdu+0x64>)
   1853e:	f010 fb86 	bl	28c4e <z_log_minimal_printk>
	return NULL;
   18542:	e7f5      	b.n	18530 <bt_att_create_pdu+0x50>
   18544:	00032000 	.word	0x00032000

00018548 <att_read_group_rsp>:
{
   18548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1854c:	b08a      	sub	sp, #40	; 0x28
   1854e:	4604      	mov	r4, r0
   18550:	460f      	mov	r7, r1
   18552:	4615      	mov	r5, r2
   18554:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   18556:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1855a:	2214      	movs	r2, #20
   1855c:	2100      	movs	r1, #0
   1855e:	eb0d 0002 	add.w	r0, sp, r2
   18562:	f011 fc42 	bl	29dea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   18566:	2201      	movs	r2, #1
   18568:	2111      	movs	r1, #17
   1856a:	4640      	mov	r0, r8
   1856c:	f7ff ffb8 	bl	184e0 <bt_att_create_pdu>
   18570:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   18572:	b368      	cbz	r0, 185d0 <att_read_group_rsp+0x88>
	data.chan = chan;
   18574:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   18576:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   18578:	2101      	movs	r1, #1
   1857a:	3008      	adds	r0, #8
   1857c:	f004 fc18 	bl	1cdb0 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18580:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   18582:	2200      	movs	r2, #0
   18584:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   18586:	9209      	str	r2, [sp, #36]	; 0x24
   18588:	ab05      	add	r3, sp, #20
   1858a:	9302      	str	r3, [sp, #8]
   1858c:	4b11      	ldr	r3, [pc, #68]	; (185d4 <att_read_group_rsp+0x8c>)
   1858e:	9301      	str	r3, [sp, #4]
   18590:	9200      	str	r2, [sp, #0]
   18592:	4613      	mov	r3, r2
   18594:	4631      	mov	r1, r6
   18596:	4628      	mov	r0, r5
   18598:	f001 f956 	bl	19848 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1859c:	9b08      	ldr	r3, [sp, #32]
   1859e:	781e      	ldrb	r6, [r3, #0]
   185a0:	b146      	cbz	r6, 185b4 <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   185a2:	9907      	ldr	r1, [sp, #28]
   185a4:	4620      	mov	r0, r4
   185a6:	f012 ff70 	bl	2b48a <bt_att_chan_send_rsp>
	return 0;
   185aa:	2600      	movs	r6, #0
}
   185ac:	4630      	mov	r0, r6
   185ae:	b00a      	add	sp, #40	; 0x28
   185b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   185b4:	9b07      	ldr	r3, [sp, #28]
   185b6:	6958      	ldr	r0, [r3, #20]
   185b8:	f7ff fc26 	bl	17e08 <tx_meta_data_free>
		net_buf_unref(data.buf);
   185bc:	9807      	ldr	r0, [sp, #28]
   185be:	f004 faf5 	bl	1cbac <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   185c2:	230a      	movs	r3, #10
   185c4:	462a      	mov	r2, r5
   185c6:	2110      	movs	r1, #16
   185c8:	4620      	mov	r0, r4
   185ca:	f013 f959 	bl	2b880 <send_err_rsp>
		return 0;
   185ce:	e7ed      	b.n	185ac <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   185d0:	260e      	movs	r6, #14
   185d2:	e7eb      	b.n	185ac <att_read_group_rsp+0x64>
   185d4:	00017f59 	.word	0x00017f59

000185d8 <att_read_mult_vl_req>:
{
   185d8:	b570      	push	{r4, r5, r6, lr}
   185da:	b088      	sub	sp, #32
   185dc:	4606      	mov	r6, r0
   185de:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   185e0:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   185e2:	2101      	movs	r1, #1
   185e4:	4620      	mov	r0, r4
   185e6:	f013 fee4 	bl	2c3b2 <bt_gatt_change_aware>
   185ea:	b950      	cbnz	r0, 18602 <att_read_mult_vl_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   185ec:	2105      	movs	r1, #5
   185ee:	f106 0098 	add.w	r0, r6, #152	; 0x98
   185f2:	f013 f8ec 	bl	2b7ce <atomic_test_and_set_bit>
   185f6:	b110      	cbz	r0, 185fe <att_read_mult_vl_req+0x26>
			return 0;
   185f8:	2000      	movs	r0, #0
}
   185fa:	b008      	add	sp, #32
   185fc:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   185fe:	2012      	movs	r0, #18
   18600:	e7fb      	b.n	185fa <att_read_mult_vl_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   18602:	2210      	movs	r2, #16
   18604:	2100      	movs	r1, #0
   18606:	eb0d 0002 	add.w	r0, sp, r2
   1860a:	f011 fbee 	bl	29dea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1860e:	2200      	movs	r2, #0
   18610:	2121      	movs	r1, #33	; 0x21
   18612:	4620      	mov	r0, r4
   18614:	f7ff ff64 	bl	184e0 <bt_att_create_pdu>
   18618:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1861a:	b378      	cbz	r0, 1867c <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1861c:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1861e:	89ab      	ldrh	r3, [r5, #12]
   18620:	2b01      	cmp	r3, #1
   18622:	d925      	bls.n	18670 <att_read_mult_vl_req+0x98>
	return net_buf_simple_pull_le16(&buf->b);
   18624:	f105 0008 	add.w	r0, r5, #8
   18628:	f014 feba 	bl	2d3a0 <net_buf_simple_pull_le16>
   1862c:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1862e:	2301      	movs	r3, #1
   18630:	f88d 301c 	strb.w	r3, [sp, #28]
   18634:	ab04      	add	r3, sp, #16
   18636:	9302      	str	r3, [sp, #8]
   18638:	4b11      	ldr	r3, [pc, #68]	; (18680 <att_read_mult_vl_req+0xa8>)
   1863a:	9301      	str	r3, [sp, #4]
   1863c:	2200      	movs	r2, #0
   1863e:	9200      	str	r2, [sp, #0]
   18640:	4613      	mov	r3, r2
   18642:	4601      	mov	r1, r0
   18644:	f001 f900 	bl	19848 <bt_gatt_foreach_attr_type>
		if (data.err) {
   18648:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1864c:	2b00      	cmp	r3, #0
   1864e:	d0e6      	beq.n	1861e <att_read_mult_vl_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18650:	9b06      	ldr	r3, [sp, #24]
   18652:	6958      	ldr	r0, [r3, #20]
   18654:	f7ff fbd8 	bl	17e08 <tx_meta_data_free>
			net_buf_unref(data.buf);
   18658:	9806      	ldr	r0, [sp, #24]
   1865a:	f004 faa7 	bl	1cbac <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_VL_REQ, handle,
   1865e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18662:	4622      	mov	r2, r4
   18664:	2120      	movs	r1, #32
   18666:	4630      	mov	r0, r6
   18668:	f013 f90a 	bl	2b880 <send_err_rsp>
			return 0;
   1866c:	2000      	movs	r0, #0
   1866e:	e7c4      	b.n	185fa <att_read_mult_vl_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   18670:	9906      	ldr	r1, [sp, #24]
   18672:	4630      	mov	r0, r6
   18674:	f012 ff09 	bl	2b48a <bt_att_chan_send_rsp>
	return 0;
   18678:	2000      	movs	r0, #0
   1867a:	e7be      	b.n	185fa <att_read_mult_vl_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1867c:	200e      	movs	r0, #14
   1867e:	e7bc      	b.n	185fa <att_read_mult_vl_req+0x22>
   18680:	0002b5f9 	.word	0x0002b5f9

00018684 <att_read_mult_req>:
{
   18684:	b570      	push	{r4, r5, r6, lr}
   18686:	b088      	sub	sp, #32
   18688:	4606      	mov	r6, r0
   1868a:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1868c:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1868e:	2101      	movs	r1, #1
   18690:	4620      	mov	r0, r4
   18692:	f013 fe8e 	bl	2c3b2 <bt_gatt_change_aware>
   18696:	b950      	cbnz	r0, 186ae <att_read_mult_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18698:	2105      	movs	r1, #5
   1869a:	f106 0098 	add.w	r0, r6, #152	; 0x98
   1869e:	f013 f896 	bl	2b7ce <atomic_test_and_set_bit>
   186a2:	b110      	cbz	r0, 186aa <att_read_mult_req+0x26>
			return 0;
   186a4:	2000      	movs	r0, #0
}
   186a6:	b008      	add	sp, #32
   186a8:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   186aa:	2012      	movs	r0, #18
   186ac:	e7fb      	b.n	186a6 <att_read_mult_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   186ae:	2210      	movs	r2, #16
   186b0:	2100      	movs	r1, #0
   186b2:	eb0d 0002 	add.w	r0, sp, r2
   186b6:	f011 fb98 	bl	29dea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   186ba:	2200      	movs	r2, #0
   186bc:	210f      	movs	r1, #15
   186be:	4620      	mov	r0, r4
   186c0:	f7ff ff0e 	bl	184e0 <bt_att_create_pdu>
   186c4:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   186c6:	b378      	cbz	r0, 18728 <att_read_mult_req+0xa4>
	data.chan = chan;
   186c8:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   186ca:	89ab      	ldrh	r3, [r5, #12]
   186cc:	2b01      	cmp	r3, #1
   186ce:	d925      	bls.n	1871c <att_read_mult_req+0x98>
   186d0:	f105 0008 	add.w	r0, r5, #8
   186d4:	f014 fe64 	bl	2d3a0 <net_buf_simple_pull_le16>
   186d8:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   186da:	2301      	movs	r3, #1
   186dc:	f88d 301c 	strb.w	r3, [sp, #28]
   186e0:	ab04      	add	r3, sp, #16
   186e2:	9302      	str	r3, [sp, #8]
   186e4:	4b11      	ldr	r3, [pc, #68]	; (1872c <att_read_mult_req+0xa8>)
   186e6:	9301      	str	r3, [sp, #4]
   186e8:	2200      	movs	r2, #0
   186ea:	9200      	str	r2, [sp, #0]
   186ec:	4613      	mov	r3, r2
   186ee:	4601      	mov	r1, r0
   186f0:	f001 f8aa 	bl	19848 <bt_gatt_foreach_attr_type>
		if (data.err) {
   186f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
   186f8:	2b00      	cmp	r3, #0
   186fa:	d0e6      	beq.n	186ca <att_read_mult_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   186fc:	9b06      	ldr	r3, [sp, #24]
   186fe:	6958      	ldr	r0, [r3, #20]
   18700:	f7ff fb82 	bl	17e08 <tx_meta_data_free>
			net_buf_unref(data.buf);
   18704:	9806      	ldr	r0, [sp, #24]
   18706:	f004 fa51 	bl	1cbac <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1870a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1870e:	4622      	mov	r2, r4
   18710:	210e      	movs	r1, #14
   18712:	4630      	mov	r0, r6
   18714:	f013 f8b4 	bl	2b880 <send_err_rsp>
			return 0;
   18718:	2000      	movs	r0, #0
   1871a:	e7c4      	b.n	186a6 <att_read_mult_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1871c:	9906      	ldr	r1, [sp, #24]
   1871e:	4630      	mov	r0, r6
   18720:	f012 feb3 	bl	2b48a <bt_att_chan_send_rsp>
	return 0;
   18724:	2000      	movs	r0, #0
   18726:	e7be      	b.n	186a6 <att_read_mult_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   18728:	200e      	movs	r0, #14
   1872a:	e7bc      	b.n	186a6 <att_read_mult_req+0x22>
   1872c:	0002b65f 	.word	0x0002b65f

00018730 <att_read_rsp>:
{
   18730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18734:	b088      	sub	sp, #32
   18736:	4604      	mov	r4, r0
   18738:	4688      	mov	r8, r1
   1873a:	4616      	mov	r6, r2
   1873c:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1873e:	6847      	ldr	r7, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   18740:	2101      	movs	r1, #1
   18742:	4638      	mov	r0, r7
   18744:	f013 fe35 	bl	2c3b2 <bt_gatt_change_aware>
   18748:	b128      	cbz	r0, 18756 <att_read_rsp+0x26>
	if (!handle) {
   1874a:	b975      	cbnz	r5, 1876a <att_read_rsp+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1874c:	2601      	movs	r6, #1
}
   1874e:	4630      	mov	r0, r6
   18750:	b008      	add	sp, #32
   18752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18756:	2105      	movs	r1, #5
   18758:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1875c:	f013 f837 	bl	2b7ce <atomic_test_and_set_bit>
   18760:	b108      	cbz	r0, 18766 <att_read_rsp+0x36>
			return 0;
   18762:	2600      	movs	r6, #0
   18764:	e7f3      	b.n	1874e <att_read_rsp+0x1e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18766:	2612      	movs	r6, #18
   18768:	e7f1      	b.n	1874e <att_read_rsp+0x1e>
	(void)memset(&data, 0, sizeof(data));
   1876a:	2210      	movs	r2, #16
   1876c:	2100      	movs	r1, #0
   1876e:	eb0d 0002 	add.w	r0, sp, r2
   18772:	f011 fb3a 	bl	29dea <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   18776:	2200      	movs	r2, #0
   18778:	4631      	mov	r1, r6
   1877a:	4638      	mov	r0, r7
   1877c:	f7ff feb0 	bl	184e0 <bt_att_create_pdu>
   18780:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   18782:	b350      	cbz	r0, 187da <att_read_rsp+0xaa>
	data.chan = chan;
   18784:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   18786:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1878a:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1878e:	2301      	movs	r3, #1
   18790:	f88d 301c 	strb.w	r3, [sp, #28]
   18794:	ab04      	add	r3, sp, #16
   18796:	9302      	str	r3, [sp, #8]
   18798:	4b11      	ldr	r3, [pc, #68]	; (187e0 <att_read_rsp+0xb0>)
   1879a:	9301      	str	r3, [sp, #4]
   1879c:	2200      	movs	r2, #0
   1879e:	9200      	str	r2, [sp, #0]
   187a0:	4613      	mov	r3, r2
   187a2:	4629      	mov	r1, r5
   187a4:	4628      	mov	r0, r5
   187a6:	f001 f84f 	bl	19848 <bt_gatt_foreach_attr_type>
	if (data.err) {
   187aa:	f89d 601c 	ldrb.w	r6, [sp, #28]
   187ae:	b926      	cbnz	r6, 187ba <att_read_rsp+0x8a>
	bt_att_chan_send_rsp(chan, data.buf);
   187b0:	9906      	ldr	r1, [sp, #24]
   187b2:	4620      	mov	r0, r4
   187b4:	f012 fe69 	bl	2b48a <bt_att_chan_send_rsp>
	return 0;
   187b8:	e7c9      	b.n	1874e <att_read_rsp+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   187ba:	9b06      	ldr	r3, [sp, #24]
   187bc:	6958      	ldr	r0, [r3, #20]
   187be:	f7ff fb23 	bl	17e08 <tx_meta_data_free>
		net_buf_unref(data.buf);
   187c2:	9806      	ldr	r0, [sp, #24]
   187c4:	f004 f9f2 	bl	1cbac <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   187c8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   187cc:	462a      	mov	r2, r5
   187ce:	4641      	mov	r1, r8
   187d0:	4620      	mov	r0, r4
   187d2:	f013 f855 	bl	2b880 <send_err_rsp>
		return 0;
   187d6:	2600      	movs	r6, #0
   187d8:	e7b9      	b.n	1874e <att_read_rsp+0x1e>
		return BT_ATT_ERR_UNLIKELY;
   187da:	260e      	movs	r6, #14
   187dc:	e7b7      	b.n	1874e <att_read_rsp+0x1e>
   187de:	bf00      	nop
   187e0:	0002b65f 	.word	0x0002b65f

000187e4 <att_read_type_rsp>:
{
   187e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187e8:	b08a      	sub	sp, #40	; 0x28
   187ea:	4604      	mov	r4, r0
   187ec:	460f      	mov	r7, r1
   187ee:	4615      	mov	r5, r2
   187f0:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   187f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   187f6:	2218      	movs	r2, #24
   187f8:	2100      	movs	r1, #0
   187fa:	a804      	add	r0, sp, #16
   187fc:	f011 faf5 	bl	29dea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   18800:	2201      	movs	r2, #1
   18802:	2109      	movs	r1, #9
   18804:	4640      	mov	r0, r8
   18806:	f7ff fe6b 	bl	184e0 <bt_att_create_pdu>
   1880a:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1880c:	b380      	cbz	r0, 18870 <att_read_type_rsp+0x8c>
	data.chan = chan;
   1880e:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   18810:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   18812:	2101      	movs	r1, #1
   18814:	3008      	adds	r0, #8
   18816:	f004 facb 	bl	1cdb0 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1881a:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1881c:	2200      	movs	r2, #0
   1881e:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18820:	230a      	movs	r3, #10
   18822:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   18826:	ab04      	add	r3, sp, #16
   18828:	9302      	str	r3, [sp, #8]
   1882a:	4b12      	ldr	r3, [pc, #72]	; (18874 <att_read_type_rsp+0x90>)
   1882c:	9301      	str	r3, [sp, #4]
   1882e:	9200      	str	r2, [sp, #0]
   18830:	4613      	mov	r3, r2
   18832:	4631      	mov	r1, r6
   18834:	4628      	mov	r0, r5
   18836:	f001 f807 	bl	19848 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1883a:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1883e:	b93e      	cbnz	r6, 18850 <att_read_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   18840:	9906      	ldr	r1, [sp, #24]
   18842:	4620      	mov	r0, r4
   18844:	f012 fe21 	bl	2b48a <bt_att_chan_send_rsp>
}
   18848:	4630      	mov	r0, r6
   1884a:	b00a      	add	sp, #40	; 0x28
   1884c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18850:	9b06      	ldr	r3, [sp, #24]
   18852:	6958      	ldr	r0, [r3, #20]
   18854:	f7ff fad8 	bl	17e08 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18858:	9806      	ldr	r0, [sp, #24]
   1885a:	f004 f9a7 	bl	1cbac <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1885e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   18862:	462a      	mov	r2, r5
   18864:	2108      	movs	r1, #8
   18866:	4620      	mov	r0, r4
   18868:	f013 f80a 	bl	2b880 <send_err_rsp>
		return 0;
   1886c:	2600      	movs	r6, #0
   1886e:	e7eb      	b.n	18848 <att_read_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   18870:	260e      	movs	r6, #14
   18872:	e7e9      	b.n	18848 <att_read_type_rsp+0x64>
   18874:	0001800d 	.word	0x0001800d

00018878 <att_find_type_rsp>:
{
   18878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1887c:	b08a      	sub	sp, #40	; 0x28
   1887e:	4604      	mov	r4, r0
   18880:	460d      	mov	r5, r1
   18882:	4616      	mov	r6, r2
   18884:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   18886:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1888a:	2214      	movs	r2, #20
   1888c:	2100      	movs	r1, #0
   1888e:	eb0d 0002 	add.w	r0, sp, r2
   18892:	f011 faaa 	bl	29dea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18896:	2200      	movs	r2, #0
   18898:	2107      	movs	r1, #7
   1889a:	4640      	mov	r0, r8
   1889c:	f7ff fe20 	bl	184e0 <bt_att_create_pdu>
   188a0:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   188a2:	b378      	cbz	r0, 18904 <att_find_type_rsp+0x8c>
	data.chan = chan;
   188a4:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   188a6:	2200      	movs	r2, #0
   188a8:	9207      	str	r2, [sp, #28]
	data.value = value;
   188aa:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   188ac:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   188b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   188b4:	230a      	movs	r3, #10
   188b6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   188ba:	ab05      	add	r3, sp, #20
   188bc:	9302      	str	r3, [sp, #8]
   188be:	4b12      	ldr	r3, [pc, #72]	; (18908 <att_find_type_rsp+0x90>)
   188c0:	9301      	str	r3, [sp, #4]
   188c2:	9200      	str	r2, [sp, #0]
   188c4:	4613      	mov	r3, r2
   188c6:	4631      	mov	r1, r6
   188c8:	4628      	mov	r0, r5
   188ca:	f000 ffbd 	bl	19848 <bt_gatt_foreach_attr_type>
	if (data.err) {
   188ce:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   188d2:	b93e      	cbnz	r6, 188e4 <att_find_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   188d4:	9906      	ldr	r1, [sp, #24]
   188d6:	4620      	mov	r0, r4
   188d8:	f012 fdd7 	bl	2b48a <bt_att_chan_send_rsp>
}
   188dc:	4630      	mov	r0, r6
   188de:	b00a      	add	sp, #40	; 0x28
   188e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   188e4:	9b06      	ldr	r3, [sp, #24]
   188e6:	6958      	ldr	r0, [r3, #20]
   188e8:	f7ff fa8e 	bl	17e08 <tx_meta_data_free>
		net_buf_unref(data.buf);
   188ec:	9806      	ldr	r0, [sp, #24]
   188ee:	f004 f95d 	bl	1cbac <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   188f2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   188f6:	462a      	mov	r2, r5
   188f8:	2106      	movs	r1, #6
   188fa:	4620      	mov	r0, r4
   188fc:	f012 ffc0 	bl	2b880 <send_err_rsp>
		return 0;
   18900:	2600      	movs	r6, #0
   18902:	e7eb      	b.n	188dc <att_find_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   18904:	260e      	movs	r6, #14
   18906:	e7e9      	b.n	188dc <att_find_type_rsp+0x64>
   18908:	000180b5 	.word	0x000180b5

0001890c <att_find_info_rsp>:
{
   1890c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1890e:	b089      	sub	sp, #36	; 0x24
   18910:	4604      	mov	r4, r0
   18912:	460f      	mov	r7, r1
   18914:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   18916:	6845      	ldr	r5, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   18918:	2210      	movs	r2, #16
   1891a:	2100      	movs	r1, #0
   1891c:	eb0d 0002 	add.w	r0, sp, r2
   18920:	f011 fa63 	bl	29dea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   18924:	2200      	movs	r2, #0
   18926:	2105      	movs	r1, #5
   18928:	4628      	mov	r0, r5
   1892a:	f7ff fdd9 	bl	184e0 <bt_att_create_pdu>
   1892e:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   18930:	b318      	cbz	r0, 1897a <att_find_info_rsp+0x6e>
	data.chan = chan;
   18932:	9404      	str	r4, [sp, #16]
   18934:	ab04      	add	r3, sp, #16
   18936:	9302      	str	r3, [sp, #8]
   18938:	4b11      	ldr	r3, [pc, #68]	; (18980 <att_find_info_rsp+0x74>)
   1893a:	9301      	str	r3, [sp, #4]
   1893c:	2200      	movs	r2, #0
   1893e:	9200      	str	r2, [sp, #0]
   18940:	4613      	mov	r3, r2
   18942:	4631      	mov	r1, r6
   18944:	4638      	mov	r0, r7
   18946:	f000 ff7f 	bl	19848 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1894a:	9b06      	ldr	r3, [sp, #24]
   1894c:	b133      	cbz	r3, 1895c <att_find_info_rsp+0x50>
	bt_att_chan_send_rsp(chan, data.buf);
   1894e:	9905      	ldr	r1, [sp, #20]
   18950:	4620      	mov	r0, r4
   18952:	f012 fd9a 	bl	2b48a <bt_att_chan_send_rsp>
	return 0;
   18956:	2000      	movs	r0, #0
}
   18958:	b009      	add	sp, #36	; 0x24
   1895a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1895c:	9b05      	ldr	r3, [sp, #20]
   1895e:	6958      	ldr	r0, [r3, #20]
   18960:	f7ff fa52 	bl	17e08 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18964:	9805      	ldr	r0, [sp, #20]
   18966:	f004 f921 	bl	1cbac <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1896a:	230a      	movs	r3, #10
   1896c:	463a      	mov	r2, r7
   1896e:	2104      	movs	r1, #4
   18970:	4620      	mov	r0, r4
   18972:	f012 ff85 	bl	2b880 <send_err_rsp>
		return 0;
   18976:	2000      	movs	r0, #0
   18978:	e7ee      	b.n	18958 <att_find_info_rsp+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1897a:	200e      	movs	r0, #14
   1897c:	e7ec      	b.n	18958 <att_find_info_rsp+0x4c>
   1897e:	bf00      	nop
   18980:	0002b6a7 	.word	0x0002b6a7

00018984 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   18984:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   18986:	4809      	ldr	r0, [pc, #36]	; (189ac <bt_att_init+0x28>)
   18988:	f016 fc26 	bl	2f1d8 <z_impl_k_queue_init>
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1898c:	2400      	movs	r4, #0
   1898e:	e008      	b.n	189a2 <bt_att_init+0x1e>
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   18990:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18994:	0093      	lsls	r3, r2, #2
   18996:	4906      	ldr	r1, [pc, #24]	; (189b0 <bt_att_init+0x2c>)
   18998:	4419      	add	r1, r3
   1899a:	4804      	ldr	r0, [pc, #16]	; (189ac <bt_att_init+0x28>)
   1899c:	f016 fc29 	bl	2f1f2 <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   189a0:	3401      	adds	r4, #1
   189a2:	2c02      	cmp	r4, #2
   189a4:	d9f4      	bls.n	18990 <bt_att_init+0xc>
	}

	bt_gatt_init();
   189a6:	f000 febf 	bl	19728 <bt_gatt_init>

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   189aa:	bd10      	pop	{r4, pc}
   189ac:	20000a64 	.word	0x20000a64
   189b0:	20002a7c 	.word	0x20002a7c

000189b4 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   189b4:	b530      	push	{r4, r5, lr}
   189b6:	b083      	sub	sp, #12
   189b8:	4605      	mov	r5, r0
   189ba:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   189bc:	2300      	movs	r3, #0
   189be:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   189c0:	f00b fc82 	bl	242c8 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   189c4:	4b0b      	ldr	r3, [pc, #44]	; (189f4 <bt_att_req_alloc+0x40>)
   189c6:	681b      	ldr	r3, [r3, #0]
   189c8:	4283      	cmp	r3, r0
   189ca:	d00e      	beq.n	189ea <bt_att_req_alloc+0x36>
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   189cc:	462a      	mov	r2, r5
   189ce:	4623      	mov	r3, r4
   189d0:	a901      	add	r1, sp, #4
   189d2:	4809      	ldr	r0, [pc, #36]	; (189f8 <bt_att_req_alloc+0x44>)
   189d4:	f009 f952 	bl	21c7c <k_mem_slab_alloc>
   189d8:	b950      	cbnz	r0, 189f0 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   189da:	221c      	movs	r2, #28
   189dc:	2100      	movs	r1, #0
   189de:	9801      	ldr	r0, [sp, #4]
   189e0:	f011 fa03 	bl	29dea <memset>

	return req;
   189e4:	9801      	ldr	r0, [sp, #4]
}
   189e6:	b003      	add	sp, #12
   189e8:	bd30      	pop	{r4, r5, pc}
		timeout = K_NO_WAIT;
   189ea:	2500      	movs	r5, #0
   189ec:	462c      	mov	r4, r5
   189ee:	e7ed      	b.n	189cc <bt_att_req_alloc+0x18>
		return NULL;
   189f0:	2000      	movs	r0, #0
   189f2:	e7f8      	b.n	189e6 <bt_att_req_alloc+0x32>
   189f4:	20002ab8 	.word	0x20002ab8
   189f8:	200009b4 	.word	0x200009b4

000189fc <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   189fc:	b500      	push	{lr}
   189fe:	b083      	sub	sp, #12
   18a00:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   18a02:	6883      	ldr	r3, [r0, #8]
   18a04:	b14b      	cbz	r3, 18a1a <bt_att_req_free+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   18a06:	6958      	ldr	r0, [r3, #20]
   18a08:	f7ff f9fe 	bl	17e08 <tx_meta_data_free>
		net_buf_unref(req->buf);
   18a0c:	9b01      	ldr	r3, [sp, #4]
   18a0e:	6898      	ldr	r0, [r3, #8]
   18a10:	f004 f8cc 	bl	1cbac <net_buf_unref>
		req->buf = NULL;
   18a14:	9b01      	ldr	r3, [sp, #4]
   18a16:	2200      	movs	r2, #0
   18a18:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   18a1a:	a901      	add	r1, sp, #4
   18a1c:	4802      	ldr	r0, [pc, #8]	; (18a28 <bt_att_req_free+0x2c>)
   18a1e:	f009 f98d 	bl	21d3c <k_mem_slab_free>
}
   18a22:	b003      	add	sp, #12
   18a24:	f85d fb04 	ldr.w	pc, [sp], #4
   18a28:	200009b4 	.word	0x200009b4

00018a2c <att_handle_rsp>:
{
   18a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a30:	b082      	sub	sp, #8
   18a32:	4604      	mov	r4, r0
   18a34:	460f      	mov	r7, r1
   18a36:	4691      	mov	r9, r2
   18a38:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   18a3a:	30c0      	adds	r0, #192	; 0xc0
   18a3c:	f00a fb96 	bl	2316c <k_work_cancel_delayable>
	if (!chan->req) {
   18a40:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   18a44:	b1f8      	cbz	r0, 18a86 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   18a46:	4b15      	ldr	r3, [pc, #84]	; (18a9c <att_handle_rsp+0x70>)
   18a48:	4298      	cmp	r0, r3
   18a4a:	d022      	beq.n	18a92 <att_handle_rsp+0x66>
	func = chan->req->func;
   18a4c:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   18a4e:	f04f 0a00 	mov.w	sl, #0
   18a52:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   18a56:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   18a5a:	f8d0 8018 	ldr.w	r8, [r0, #24]
	bt_att_req_free(chan->req);
   18a5e:	f7ff ffcd 	bl	189fc <bt_att_req_free>
	chan->req = NULL;
   18a62:	f8c4 a09c 	str.w	sl, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   18a66:	6820      	ldr	r0, [r4, #0]
   18a68:	f012 fbc5 	bl	2b1f6 <att_req_send_process>
	if (func) {
   18a6c:	b13d      	cbz	r5, 18a7e <att_handle_rsp+0x52>
		func(chan->att->conn, err, pdu, len, params);
   18a6e:	6823      	ldr	r3, [r4, #0]
   18a70:	6818      	ldr	r0, [r3, #0]
   18a72:	f8cd 8000 	str.w	r8, [sp]
   18a76:	464b      	mov	r3, r9
   18a78:	463a      	mov	r2, r7
   18a7a:	4631      	mov	r1, r6
   18a7c:	47a8      	blx	r5
}
   18a7e:	2000      	movs	r0, #0
   18a80:	b002      	add	sp, #8
   18a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No pending ATT request");
   18a86:	2157      	movs	r1, #87	; 0x57
   18a88:	4805      	ldr	r0, [pc, #20]	; (18aa0 <att_handle_rsp+0x74>)
   18a8a:	f010 f8e0 	bl	28c4e <z_log_minimal_printk>
	bt_att_func_t func = NULL;
   18a8e:	2500      	movs	r5, #0
		goto process;
   18a90:	e7e9      	b.n	18a66 <att_handle_rsp+0x3a>
		chan->req = NULL;
   18a92:	2500      	movs	r5, #0
   18a94:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
		goto process;
   18a98:	e7e5      	b.n	18a66 <att_handle_rsp+0x3a>
   18a9a:	bf00      	nop
   18a9c:	20002abc 	.word	0x20002abc
   18aa0:	00032020 	.word	0x00032020

00018aa4 <att_reset>:
{
   18aa4:	b530      	push	{r4, r5, lr}
   18aa6:	b085      	sub	sp, #20
   18aa8:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   18aaa:	e005      	b.n	18ab8 <att_reset+0x14>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   18aac:	6960      	ldr	r0, [r4, #20]
   18aae:	f7ff f9ab 	bl	17e08 <tx_meta_data_free>
		net_buf_unref(buf);
   18ab2:	4620      	mov	r0, r4
   18ab4:	f004 f87a 	bl	1cbac <net_buf_unref>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   18ab8:	2200      	movs	r2, #0
   18aba:	2300      	movs	r3, #0
   18abc:	9803      	ldr	r0, [sp, #12]
   18abe:	300c      	adds	r0, #12
   18ac0:	f003 ff1e 	bl	1c900 <net_buf_get>
   18ac4:	4604      	mov	r4, r0
   18ac6:	2800      	cmp	r0, #0
   18ac8:	d1f0      	bne.n	18aac <att_reset+0x8>
   18aca:	e00b      	b.n	18ae4 <att_reset+0x40>
	list->tail = node;
   18acc:	609a      	str	r2, [r3, #8]
}
   18ace:	e011      	b.n	18af4 <att_reset+0x50>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   18ad0:	6818      	ldr	r0, [r3, #0]
   18ad2:	69a3      	ldr	r3, [r4, #24]
   18ad4:	9300      	str	r3, [sp, #0]
   18ad6:	2300      	movs	r3, #0
   18ad8:	461a      	mov	r2, r3
   18ada:	210e      	movs	r1, #14
   18adc:	47a8      	blx	r5
		bt_att_req_free(req);
   18ade:	4620      	mov	r0, r4
   18ae0:	f7ff ff8c 	bl	189fc <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   18ae4:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   18ae6:	685c      	ldr	r4, [r3, #4]
   18ae8:	b144      	cbz	r4, 18afc <att_reset+0x58>
	return node->next;
   18aea:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   18aec:	605a      	str	r2, [r3, #4]
	return list->tail;
   18aee:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18af0:	42a1      	cmp	r1, r4
   18af2:	d0eb      	beq.n	18acc <att_reset+0x28>
		if (req->func) {
   18af4:	6865      	ldr	r5, [r4, #4]
   18af6:	2d00      	cmp	r5, #0
   18af8:	d1ea      	bne.n	18ad0 <att_reset+0x2c>
   18afa:	e7f0      	b.n	18ade <att_reset+0x3a>
	att->conn = NULL;
   18afc:	2200      	movs	r2, #0
   18afe:	601a      	str	r2, [r3, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   18b00:	a903      	add	r1, sp, #12
   18b02:	4802      	ldr	r0, [pc, #8]	; (18b0c <att_reset+0x68>)
   18b04:	f009 f91a 	bl	21d3c <k_mem_slab_free>
}
   18b08:	b005      	add	sp, #20
   18b0a:	bd30      	pop	{r4, r5, pc}
   18b0c:	20000974 	.word	0x20000974

00018b10 <att_timeout>:
{
   18b10:	b510      	push	{r4, lr}
   18b12:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   18b14:	2145      	movs	r1, #69	; 0x45
   18b16:	4804      	ldr	r0, [pc, #16]	; (18b28 <att_timeout+0x18>)
   18b18:	f010 f899 	bl	28c4e <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   18b1c:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
   18b20:	f013 f8af 	bl	2bc82 <bt_att_disconnected>
}
   18b24:	bd10      	pop	{r4, pc}
   18b26:	bf00      	nop
   18b28:	0003203c 	.word	0x0003203c

00018b2c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   18b2c:	b538      	push	{r3, r4, r5, lr}
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   18b2e:	b170      	cbz	r0, 18b4e <bt_att_send+0x22>
   18b30:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(buf);
   18b32:	b1c1      	cbz	r1, 18b66 <bt_att_send+0x3a>

	att = att_get(conn);
   18b34:	f7ff f89c 	bl	17c70 <att_get>
	if (!att) {
   18b38:	4605      	mov	r5, r0
   18b3a:	b300      	cbz	r0, 18b7e <bt_att_send+0x52>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	net_buf_put(&att->tx_queue, buf);
   18b3c:	4621      	mov	r1, r4
   18b3e:	300c      	adds	r0, #12
   18b40:	f004 f808 	bl	1cb54 <net_buf_put>
	att_send_process(att);
   18b44:	4628      	mov	r0, r5
   18b46:	f012 fc36 	bl	2b3b6 <att_send_process>

	return 0;
   18b4a:	2000      	movs	r0, #0
}
   18b4c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(conn);
   18b4e:	4c10      	ldr	r4, [pc, #64]	; (18b90 <bt_att_send+0x64>)
   18b50:	f640 62a8 	movw	r2, #3752	; 0xea8
   18b54:	4621      	mov	r1, r4
   18b56:	480f      	ldr	r0, [pc, #60]	; (18b94 <bt_att_send+0x68>)
   18b58:	f010 f859 	bl	28c0e <assert_print>
   18b5c:	f640 61a8 	movw	r1, #3752	; 0xea8
   18b60:	4620      	mov	r0, r4
   18b62:	f010 f84d 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   18b66:	4c0a      	ldr	r4, [pc, #40]	; (18b90 <bt_att_send+0x64>)
   18b68:	f640 62a9 	movw	r2, #3753	; 0xea9
   18b6c:	4621      	mov	r1, r4
   18b6e:	4809      	ldr	r0, [pc, #36]	; (18b94 <bt_att_send+0x68>)
   18b70:	f010 f84d 	bl	28c0e <assert_print>
   18b74:	f640 61a9 	movw	r1, #3753	; 0xea9
   18b78:	4620      	mov	r0, r4
   18b7a:	f010 f841 	bl	28c00 <assert_post_action>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   18b7e:	6960      	ldr	r0, [r4, #20]
   18b80:	f7ff f942 	bl	17e08 <tx_meta_data_free>
		net_buf_unref(buf);
   18b84:	4620      	mov	r0, r4
   18b86:	f004 f811 	bl	1cbac <net_buf_unref>
		return -ENOTCONN;
   18b8a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18b8e:	e7dd      	b.n	18b4c <bt_att_send+0x20>
   18b90:	00031de8 	.word	0x00031de8
   18b94:	00030128 	.word	0x00030128

00018b98 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   18b98:	b510      	push	{r4, lr}
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   18b9a:	b180      	cbz	r0, 18bbe <bt_att_req_send+0x26>
   18b9c:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(req);
   18b9e:	b1d1      	cbz	r1, 18bd6 <bt_att_req_send+0x3e>

	att = att_get(conn);
   18ba0:	f7ff f866 	bl	17c70 <att_get>
	if (!att) {
   18ba4:	4603      	mov	r3, r0
   18ba6:	b328      	cbz	r0, 18bf4 <bt_att_req_send+0x5c>
	parent->next = child;
   18ba8:	2200      	movs	r2, #0
   18baa:	6022      	str	r2, [r4, #0]
	return list->tail;
   18bac:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   18bae:	b1f2      	cbz	r2, 18bee <bt_att_req_send+0x56>
	parent->next = child;
   18bb0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   18bb2:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   18bb4:	4618      	mov	r0, r3
   18bb6:	f012 fb1e 	bl	2b1f6 <att_req_send_process>

	return 0;
   18bba:	2000      	movs	r0, #0
}
   18bbc:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   18bbe:	4c0f      	ldr	r4, [pc, #60]	; (18bfc <bt_att_req_send+0x64>)
   18bc0:	f640 62be 	movw	r2, #3774	; 0xebe
   18bc4:	4621      	mov	r1, r4
   18bc6:	480e      	ldr	r0, [pc, #56]	; (18c00 <bt_att_req_send+0x68>)
   18bc8:	f010 f821 	bl	28c0e <assert_print>
   18bcc:	f640 61be 	movw	r1, #3774	; 0xebe
   18bd0:	4620      	mov	r0, r4
   18bd2:	f010 f815 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(req);
   18bd6:	4c09      	ldr	r4, [pc, #36]	; (18bfc <bt_att_req_send+0x64>)
   18bd8:	f640 62bf 	movw	r2, #3775	; 0xebf
   18bdc:	4621      	mov	r1, r4
   18bde:	4808      	ldr	r0, [pc, #32]	; (18c00 <bt_att_req_send+0x68>)
   18be0:	f010 f815 	bl	28c0e <assert_print>
   18be4:	f640 61bf 	movw	r1, #3775	; 0xebf
   18be8:	4620      	mov	r0, r4
   18bea:	f010 f809 	bl	28c00 <assert_post_action>
   18bee:	6084      	str	r4, [r0, #8]
	list->head = node;
   18bf0:	6044      	str	r4, [r0, #4]
}
   18bf2:	e7df      	b.n	18bb4 <bt_att_req_send+0x1c>
		return -ENOTCONN;
   18bf4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18bf8:	e7e0      	b.n	18bbc <bt_att_req_send+0x24>
   18bfa:	bf00      	nop
   18bfc:	00031de8 	.word	0x00031de8
   18c00:	00030128 	.word	0x00030128

00018c04 <gatt_ccc_conn_queue_is_empty>:
	}
}

static bool gatt_ccc_conn_queue_is_empty(void)
{
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   18c04:	2300      	movs	r3, #0
   18c06:	b10b      	cbz	r3, 18c0c <gatt_ccc_conn_queue_is_empty+0x8>
		if (gatt_ccc_store.conn_list[i]) {
			return false;
		}
	}

	return true;
   18c08:	2001      	movs	r0, #1
   18c0a:	4770      	bx	lr
		if (gatt_ccc_store.conn_list[i]) {
   18c0c:	4a03      	ldr	r2, [pc, #12]	; (18c1c <gatt_ccc_conn_queue_is_empty+0x18>)
   18c0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   18c12:	b90a      	cbnz	r2, 18c18 <gatt_ccc_conn_queue_is_empty+0x14>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   18c14:	3301      	adds	r3, #1
   18c16:	e7f6      	b.n	18c06 <gatt_ccc_conn_queue_is_empty+0x2>
			return false;
   18c18:	2000      	movs	r0, #0
}
   18c1a:	4770      	bx	lr
   18c1c:	20001be8 	.word	0x20001be8

00018c20 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   18c20:	b510      	push	{r4, lr}
   18c22:	4614      	mov	r4, r2
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   18c24:	2210      	movs	r2, #16
   18c26:	4907      	ldr	r1, [pc, #28]	; (18c44 <db_hash_set+0x24>)
   18c28:	4618      	mov	r0, r3
   18c2a:	47a0      	blx	r4
	if (len < 0) {
   18c2c:	1e04      	subs	r4, r0, #0
   18c2e:	db02      	blt.n	18c36 <db_hash_set+0x16>
		return len;
	}

	LOG_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash), "Stored Hash: ");

	return 0;
   18c30:	2400      	movs	r4, #0
}
   18c32:	4620      	mov	r0, r4
   18c34:	bd10      	pop	{r4, pc}
		BT_ERR("Failed to decode value (err %zd)", len);
   18c36:	4622      	mov	r2, r4
   18c38:	2145      	movs	r1, #69	; 0x45
   18c3a:	4803      	ldr	r0, [pc, #12]	; (18c48 <db_hash_set+0x28>)
   18c3c:	f010 f807 	bl	28c4e <z_log_minimal_printk>
		return len;
   18c40:	e7f7      	b.n	18c32 <db_hash_set+0x12>
   18c42:	bf00      	nop
   18c44:	20001c30 	.word	0x20001c30
   18c48:	000320c8 	.word	0x000320c8

00018c4c <db_hash_store>:
{
   18c4c:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   18c4e:	2210      	movs	r2, #16
   18c50:	4905      	ldr	r1, [pc, #20]	; (18c68 <db_hash_store+0x1c>)
   18c52:	4806      	ldr	r0, [pc, #24]	; (18c6c <db_hash_store+0x20>)
   18c54:	f7f9 fb8e 	bl	12374 <settings_save_one>
	if (err) {
   18c58:	b900      	cbnz	r0, 18c5c <db_hash_store+0x10>
}
   18c5a:	bd08      	pop	{r3, pc}
   18c5c:	4602      	mov	r2, r0
		BT_ERR("Failed to save Database Hash (err %d)", err);
   18c5e:	2145      	movs	r1, #69	; 0x45
   18c60:	4803      	ldr	r0, [pc, #12]	; (18c70 <db_hash_store+0x24>)
   18c62:	f00f fff4 	bl	28c4e <z_log_minimal_printk>
}
   18c66:	e7f8      	b.n	18c5a <db_hash_store+0xe>
   18c68:	20001c20 	.word	0x20001c20
   18c6c:	000320f0 	.word	0x000320f0
   18c70:	000320f8 	.word	0x000320f8

00018c74 <find_cf_cfg>:
{
   18c74:	b570      	push	{r4, r5, r6, lr}
   18c76:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   18c78:	2400      	movs	r4, #0
   18c7a:	e007      	b.n	18c8c <find_cf_cfg+0x18>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   18c7c:	4628      	mov	r0, r5
	return memcmp(a, b, sizeof(*a));
   18c7e:	2207      	movs	r2, #7
   18c80:	490d      	ldr	r1, [pc, #52]	; (18cb8 <find_cf_cfg+0x44>)
   18c82:	3001      	adds	r0, #1
   18c84:	f011 f85d 	bl	29d42 <memcmp>
   18c88:	b1a0      	cbz	r0, 18cb4 <find_cf_cfg+0x40>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   18c8a:	3401      	adds	r4, #1
   18c8c:	2c01      	cmp	r4, #1
   18c8e:	d810      	bhi.n	18cb2 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   18c90:	4d0a      	ldr	r5, [pc, #40]	; (18cbc <find_cf_cfg+0x48>)
   18c92:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   18c96:	2e00      	cmp	r6, #0
   18c98:	d0f0      	beq.n	18c7c <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18c9a:	0123      	lsls	r3, r4, #4
   18c9c:	4907      	ldr	r1, [pc, #28]	; (18cbc <find_cf_cfg+0x48>)
   18c9e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   18ca2:	3201      	adds	r2, #1
   18ca4:	5cc9      	ldrb	r1, [r1, r3]
   18ca6:	4630      	mov	r0, r6
   18ca8:	f012 f859 	bl	2ad5e <bt_conn_is_peer_addr_le>
   18cac:	2800      	cmp	r0, #0
   18cae:	d0ec      	beq.n	18c8a <find_cf_cfg+0x16>
   18cb0:	e000      	b.n	18cb4 <find_cf_cfg+0x40>
	return NULL;
   18cb2:	2500      	movs	r5, #0
}
   18cb4:	4628      	mov	r0, r5
   18cb6:	bd70      	pop	{r4, r5, r6, pc}
   18cb8:	00030c24 	.word	0x00030c24
   18cbc:	20002af0 	.word	0x20002af0

00018cc0 <find_sc_cfg>:
{
   18cc0:	b570      	push	{r4, r5, r6, lr}
   18cc2:	4605      	mov	r5, r0
   18cc4:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18cc6:	2400      	movs	r4, #0
   18cc8:	e000      	b.n	18ccc <find_sc_cfg+0xc>
   18cca:	3401      	adds	r4, #1
   18ccc:	2c01      	cmp	r4, #1
   18cce:	d817      	bhi.n	18d00 <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
   18cd0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18cd4:	4a0b      	ldr	r2, [pc, #44]	; (18d04 <find_sc_cfg+0x44>)
   18cd6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   18cda:	429d      	cmp	r5, r3
   18cdc:	d1f5      	bne.n	18cca <find_sc_cfg+0xa>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   18cde:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18ce2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   18ce6:	2207      	movs	r2, #7
   18ce8:	4631      	mov	r1, r6
   18cea:	3001      	adds	r0, #1
   18cec:	f011 f829 	bl	29d42 <memcmp>
		if (id == sc_cfg[i].id &&
   18cf0:	2800      	cmp	r0, #0
   18cf2:	d1ea      	bne.n	18cca <find_sc_cfg+0xa>
			return &sc_cfg[i];
   18cf4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   18cf8:	4802      	ldr	r0, [pc, #8]	; (18d04 <find_sc_cfg+0x44>)
   18cfa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   18cfe:	e000      	b.n	18d02 <find_sc_cfg+0x42>
	return NULL;
   18d00:	2000      	movs	r0, #0
}
   18d02:	bd70      	pop	{r4, r5, r6, pc}
   18d04:	20002b10 	.word	0x20002b10

00018d08 <find_ccc_cfg>:
{
   18d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d0a:	4607      	mov	r7, r0
   18d0c:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18d0e:	2400      	movs	r4, #0
   18d10:	b114      	cbz	r4, 18d18 <find_ccc_cfg+0x10>
	return NULL;
   18d12:	2600      	movs	r6, #0
}
   18d14:	4630      	mov	r0, r6
   18d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   18d18:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   18d1c:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   18d20:	b167      	cbz	r7, 18d3c <find_ccc_cfg+0x34>
						    &cfg->peer)) {
   18d22:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   18d26:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   18d28:	3201      	adds	r2, #1
   18d2a:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   18d2e:	4638      	mov	r0, r7
   18d30:	f012 f815 	bl	2ad5e <bt_conn_is_peer_addr_le>
   18d34:	2800      	cmp	r0, #0
   18d36:	d1ed      	bne.n	18d14 <find_ccc_cfg+0xc>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18d38:	3401      	adds	r4, #1
   18d3a:	e7e9      	b.n	18d10 <find_ccc_cfg+0x8>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   18d3c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   18d40:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   18d44:	2207      	movs	r2, #7
   18d46:	4903      	ldr	r1, [pc, #12]	; (18d54 <find_ccc_cfg+0x4c>)
   18d48:	3001      	adds	r0, #1
   18d4a:	f010 fffa 	bl	29d42 <memcmp>
   18d4e:	2800      	cmp	r0, #0
   18d50:	d1f2      	bne.n	18d38 <find_ccc_cfg+0x30>
   18d52:	e7df      	b.n	18d14 <find_ccc_cfg+0xc>
   18d54:	00030c24 	.word	0x00030c24

00018d58 <ccc_save>:
{
   18d58:	b538      	push	{r3, r4, r5, lr}
   18d5a:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18d5c:	6882      	ldr	r2, [r0, #8]
   18d5e:	4b0d      	ldr	r3, [pc, #52]	; (18d94 <ccc_save+0x3c>)
   18d60:	429a      	cmp	r2, r3
   18d62:	d001      	beq.n	18d68 <ccc_save+0x10>
}
   18d64:	2001      	movs	r0, #1
   18d66:	bd38      	pop	{r3, r4, r5, pc}
   18d68:	460d      	mov	r5, r1
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   18d6a:	7922      	ldrb	r2, [r4, #4]
   18d6c:	6821      	ldr	r1, [r4, #0]
   18d6e:	68c0      	ldr	r0, [r0, #12]
   18d70:	f013 f8db 	bl	2bf2a <ccc_find_cfg>
	if (!cfg) {
   18d74:	2800      	cmp	r0, #0
   18d76:	d0f5      	beq.n	18d64 <ccc_save+0xc>
	save->store[save->count].handle = handle;
   18d78:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   18d7c:	1c9a      	adds	r2, r3, #2
   18d7e:	f824 5022 	strh.w	r5, [r4, r2, lsl #2]
	save->store[save->count].value = cfg->value;
   18d82:	8901      	ldrh	r1, [r0, #8]
   18d84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   18d88:	8051      	strh	r1, [r2, #2]
	save->count++;
   18d8a:	3301      	adds	r3, #1
   18d8c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	return BT_GATT_ITER_CONTINUE;
   18d90:	e7e8      	b.n	18d64 <ccc_save+0xc>
   18d92:	bf00      	nop
   18d94:	00019351 	.word	0x00019351

00018d98 <find_cf_cfg_by_addr>:
{
   18d98:	b570      	push	{r4, r5, r6, lr}
   18d9a:	4605      	mov	r5, r0
   18d9c:	460e      	mov	r6, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   18d9e:	2400      	movs	r4, #0
   18da0:	e000      	b.n	18da4 <find_cf_cfg_by_addr+0xc>
   18da2:	3401      	adds	r4, #1
   18da4:	2c01      	cmp	r4, #1
   18da6:	d811      	bhi.n	18dcc <find_cf_cfg_by_addr+0x34>
			if (id == cf_cfg[i].id &&
   18da8:	0123      	lsls	r3, r4, #4
   18daa:	4a09      	ldr	r2, [pc, #36]	; (18dd0 <find_cf_cfg_by_addr+0x38>)
   18dac:	5cd3      	ldrb	r3, [r2, r3]
   18dae:	42ab      	cmp	r3, r5
   18db0:	d1f7      	bne.n	18da2 <find_cf_cfg_by_addr+0xa>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   18db2:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   18db6:	2207      	movs	r2, #7
   18db8:	3101      	adds	r1, #1
   18dba:	4630      	mov	r0, r6
   18dbc:	f010 ffc1 	bl	29d42 <memcmp>
			if (id == cf_cfg[i].id &&
   18dc0:	2800      	cmp	r0, #0
   18dc2:	d1ee      	bne.n	18da2 <find_cf_cfg_by_addr+0xa>
				return &cf_cfg[i];
   18dc4:	4802      	ldr	r0, [pc, #8]	; (18dd0 <find_cf_cfg_by_addr+0x38>)
   18dc6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   18dca:	e000      	b.n	18dce <find_cf_cfg_by_addr+0x36>
	return NULL;
   18dcc:	2000      	movs	r0, #0
}
   18dce:	bd70      	pop	{r4, r5, r6, pc}
   18dd0:	20002af0 	.word	0x20002af0

00018dd4 <cf_write>:
{
   18dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18dd8:	461d      	mov	r5, r3
   18dda:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   18dde:	2b01      	cmp	r3, #1
   18de0:	d834      	bhi.n	18e4c <cf_write+0x78>
   18de2:	4606      	mov	r6, r0
   18de4:	4617      	mov	r7, r2
	if (offset + len > sizeof(cfg->data)) {
   18de6:	46a8      	mov	r8, r5
   18de8:	442b      	add	r3, r5
   18dea:	2b01      	cmp	r3, #1
   18dec:	d831      	bhi.n	18e52 <cf_write+0x7e>
	cfg = find_cf_cfg(conn);
   18dee:	f7ff ff41 	bl	18c74 <find_cf_cfg>
	if (!cfg) {
   18df2:	4604      	mov	r4, r0
   18df4:	b1f0      	cbz	r0, 18e34 <cf_write+0x60>
	if (!cf_set_value(cfg, value, len)) {
   18df6:	462a      	mov	r2, r5
   18df8:	4639      	mov	r1, r7
   18dfa:	4620      	mov	r0, r4
   18dfc:	f012 ffbd 	bl	2bd7a <cf_set_value>
   18e00:	b350      	cbz	r0, 18e58 <cf_write+0x84>
	memcpy(dst, src, sizeof(*dst));
   18e02:	2207      	movs	r2, #7
   18e04:	f106 0190 	add.w	r1, r6, #144	; 0x90
   18e08:	1c60      	adds	r0, r4, #1
   18e0a:	f010 ffbf 	bl	29d8c <memcpy>
	cfg->id = conn->id;
   18e0e:	7a33      	ldrb	r3, [r6, #8]
   18e10:	4620      	mov	r0, r4
   18e12:	f800 3b0c 	strb.w	r3, [r0], #12
   18e16:	f3bf 8f5b 	dmb	ish
   18e1a:	e850 3f00 	ldrex	r3, [r0]
   18e1e:	f043 0301 	orr.w	r3, r3, #1
   18e22:	e840 3200 	strex	r2, r3, [r0]
   18e26:	2a00      	cmp	r2, #0
   18e28:	d1f7      	bne.n	18e1a <cf_write+0x46>
   18e2a:	f3bf 8f5b 	dmb	ish
}
   18e2e:	4640      	mov	r0, r8
   18e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   18e34:	f7ff ff1e 	bl	18c74 <find_cf_cfg>
	if (!cfg) {
   18e38:	4604      	mov	r4, r0
   18e3a:	2800      	cmp	r0, #0
   18e3c:	d1db      	bne.n	18df6 <cf_write+0x22>
		BT_WARN("No space to store Client Supported Features");
   18e3e:	2157      	movs	r1, #87	; 0x57
   18e40:	4807      	ldr	r0, [pc, #28]	; (18e60 <cf_write+0x8c>)
   18e42:	f00f ff04 	bl	28c4e <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   18e46:	f06f 0810 	mvn.w	r8, #16
   18e4a:	e7f0      	b.n	18e2e <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18e4c:	f06f 0806 	mvn.w	r8, #6
   18e50:	e7ed      	b.n	18e2e <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18e52:	f06f 080c 	mvn.w	r8, #12
   18e56:	e7ea      	b.n	18e2e <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   18e58:	f06f 0812 	mvn.w	r8, #18
   18e5c:	e7e7      	b.n	18e2e <cf_write+0x5a>
   18e5e:	bf00      	nop
   18e60:	00032124 	.word	0x00032124

00018e64 <clear_ccc_cfg>:
{
   18e64:	b510      	push	{r4, lr}
   18e66:	4604      	mov	r4, r0
   18e68:	2207      	movs	r2, #7
   18e6a:	4904      	ldr	r1, [pc, #16]	; (18e7c <clear_ccc_cfg+0x18>)
   18e6c:	3001      	adds	r0, #1
   18e6e:	f010 ff8d 	bl	29d8c <memcpy>
	cfg->id = 0U;
   18e72:	2300      	movs	r3, #0
   18e74:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   18e76:	8123      	strh	r3, [r4, #8]
}
   18e78:	bd10      	pop	{r4, pc}
   18e7a:	bf00      	nop
   18e7c:	00030c24 	.word	0x00030c24

00018e80 <ccc_load>:
{
   18e80:	b570      	push	{r4, r5, r6, lr}
   18e82:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18e84:	6882      	ldr	r2, [r0, #8]
   18e86:	4b1f      	ldr	r3, [pc, #124]	; (18f04 <ccc_load+0x84>)
   18e88:	429a      	cmp	r2, r3
   18e8a:	d001      	beq.n	18e90 <ccc_load+0x10>
		return BT_GATT_ITER_CONTINUE;
   18e8c:	2001      	movs	r0, #1
}
   18e8e:	bd70      	pop	{r4, r5, r6, pc}
	ccc = attr->user_data;
   18e90:	68c5      	ldr	r5, [r0, #12]
	if (!load->entry) {
   18e92:	68a3      	ldr	r3, [r4, #8]
   18e94:	b143      	cbz	r3, 18ea8 <ccc_load+0x28>
	} else if (!load->count) {
   18e96:	68e2      	ldr	r2, [r4, #12]
   18e98:	2a00      	cmp	r2, #0
   18e9a:	d030      	beq.n	18efe <ccc_load+0x7e>
	if (load->entry->handle != handle) {
   18e9c:	881b      	ldrh	r3, [r3, #0]
   18e9e:	428b      	cmp	r3, r1
   18ea0:	d009      	beq.n	18eb6 <ccc_load+0x36>
		if (load->entry->handle < handle) {
   18ea2:	d312      	bcc.n	18eca <ccc_load+0x4a>
		return BT_GATT_ITER_CONTINUE;
   18ea4:	2001      	movs	r0, #1
   18ea6:	e7f2      	b.n	18e8e <ccc_load+0xe>
		ccc_clear(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   18ea8:	7922      	ldrb	r2, [r4, #4]
   18eaa:	6821      	ldr	r1, [r4, #0]
   18eac:	4628      	mov	r0, r5
   18eae:	f013 f869 	bl	2bf84 <ccc_clear>
		return BT_GATT_ITER_CONTINUE;
   18eb2:	2001      	movs	r0, #1
   18eb4:	e7eb      	b.n	18e8e <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   18eb6:	7922      	ldrb	r2, [r4, #4]
   18eb8:	6821      	ldr	r1, [r4, #0]
   18eba:	4628      	mov	r0, r5
   18ebc:	f013 f835 	bl	2bf2a <ccc_find_cfg>
	if (!cfg) {
   18ec0:	4606      	mov	r6, r0
   18ec2:	b160      	cbz	r0, 18ede <ccc_load+0x5e>
	cfg->value = load->entry->value;
   18ec4:	68a3      	ldr	r3, [r4, #8]
   18ec6:	885b      	ldrh	r3, [r3, #2]
   18ec8:	8133      	strh	r3, [r6, #8]
	load->entry++;
   18eca:	68a3      	ldr	r3, [r4, #8]
   18ecc:	3304      	adds	r3, #4
   18ece:	60a3      	str	r3, [r4, #8]
	load->count--;
   18ed0:	68e0      	ldr	r0, [r4, #12]
   18ed2:	3801      	subs	r0, #1
   18ed4:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18ed6:	3800      	subs	r0, #0
   18ed8:	bf18      	it	ne
   18eda:	2001      	movne	r0, #1
   18edc:	e7d7      	b.n	18e8e <ccc_load+0xe>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   18ede:	2200      	movs	r2, #0
   18ee0:	4909      	ldr	r1, [pc, #36]	; (18f08 <ccc_load+0x88>)
   18ee2:	4628      	mov	r0, r5
   18ee4:	f013 f821 	bl	2bf2a <ccc_find_cfg>
		if (!cfg) {
   18ee8:	4606      	mov	r6, r0
   18eea:	2800      	cmp	r0, #0
   18eec:	d0ed      	beq.n	18eca <ccc_load+0x4a>
   18eee:	2207      	movs	r2, #7
   18ef0:	6821      	ldr	r1, [r4, #0]
   18ef2:	3001      	adds	r0, #1
   18ef4:	f010 ff4a 	bl	29d8c <memcpy>
		cfg->id = load->addr_with_id.id;
   18ef8:	7923      	ldrb	r3, [r4, #4]
   18efa:	7033      	strb	r3, [r6, #0]
   18efc:	e7e2      	b.n	18ec4 <ccc_load+0x44>
		return BT_GATT_ITER_STOP;
   18efe:	2000      	movs	r0, #0
   18f00:	e7c5      	b.n	18e8e <ccc_load+0xe>
   18f02:	bf00      	nop
   18f04:	00019351 	.word	0x00019351
   18f08:	00030c24 	.word	0x00030c24

00018f0c <sc_store>:
{
   18f0c:	b530      	push	{r4, r5, lr}
   18f0e:	b08d      	sub	sp, #52	; 0x34
   18f10:	4604      	mov	r4, r0
	if (cfg->id) {
   18f12:	7802      	ldrb	r2, [r0, #0]
   18f14:	b1aa      	cbz	r2, 18f42 <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   18f16:	ad02      	add	r5, sp, #8
   18f18:	2104      	movs	r1, #4
   18f1a:	4628      	mov	r0, r5
   18f1c:	f7f7 fee0 	bl	10ce0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   18f20:	9500      	str	r5, [sp, #0]
   18f22:	1c63      	adds	r3, r4, #1
   18f24:	4a0e      	ldr	r2, [pc, #56]	; (18f60 <sc_store+0x54>)
   18f26:	2124      	movs	r1, #36	; 0x24
   18f28:	a803      	add	r0, sp, #12
   18f2a:	f7fa ffc1 	bl	13eb0 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   18f2e:	2204      	movs	r2, #4
   18f30:	f104 0108 	add.w	r1, r4, #8
   18f34:	a803      	add	r0, sp, #12
   18f36:	f7f9 fa1d 	bl	12374 <settings_save_one>
	if (err) {
   18f3a:	4602      	mov	r2, r0
   18f3c:	b950      	cbnz	r0, 18f54 <sc_store+0x48>
}
   18f3e:	b00d      	add	sp, #52	; 0x34
   18f40:	bd30      	pop	{r4, r5, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   18f42:	2300      	movs	r3, #0
   18f44:	9300      	str	r3, [sp, #0]
   18f46:	1c43      	adds	r3, r0, #1
   18f48:	4a05      	ldr	r2, [pc, #20]	; (18f60 <sc_store+0x54>)
   18f4a:	2124      	movs	r1, #36	; 0x24
   18f4c:	a803      	add	r0, sp, #12
   18f4e:	f7fa ffaf 	bl	13eb0 <bt_settings_encode_key>
   18f52:	e7ec      	b.n	18f2e <sc_store+0x22>
		BT_ERR("failed to store SC (err %d)", err);
   18f54:	2145      	movs	r1, #69	; 0x45
   18f56:	4803      	ldr	r0, [pc, #12]	; (18f64 <sc_store+0x58>)
   18f58:	f00f fe79 	bl	28c4e <z_log_minimal_printk>
		return;
   18f5c:	e7ef      	b.n	18f3e <sc_store+0x32>
   18f5e:	bf00      	nop
   18f60:	00032158 	.word	0x00032158
   18f64:	0003215c 	.word	0x0003215c

00018f68 <sc_save>:
{
   18f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f6c:	4607      	mov	r7, r0
   18f6e:	4688      	mov	r8, r1
   18f70:	4616      	mov	r6, r2
   18f72:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   18f74:	f7ff fea4 	bl	18cc0 <find_sc_cfg>
	if (!cfg) {
   18f78:	4604      	mov	r4, r0
   18f7a:	b1a0      	cbz	r0, 18fa6 <sc_save+0x3e>
	if (!(cfg->data.start || cfg->data.end)) {
   18f7c:	8923      	ldrh	r3, [r4, #8]
   18f7e:	b90b      	cbnz	r3, 18f84 <sc_save+0x1c>
   18f80:	8963      	ldrh	r3, [r4, #10]
   18f82:	b30b      	cbz	r3, 18fc8 <sc_save+0x60>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   18f84:	462b      	mov	r3, r5
   18f86:	4632      	mov	r2, r6
   18f88:	f104 010a 	add.w	r1, r4, #10
   18f8c:	f104 0008 	add.w	r0, r4, #8
   18f90:	f012 fed1 	bl	2bd36 <update_range>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18f94:	b128      	cbz	r0, 18fa2 <sc_save+0x3a>
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   18f96:	4621      	mov	r1, r4
   18f98:	f811 0b01 	ldrb.w	r0, [r1], #1
   18f9c:	f011 f9f0 	bl	2a380 <bt_addr_le_is_bonded>
   18fa0:	b9a8      	cbnz	r0, 18fce <sc_save+0x66>
}
   18fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   18fa6:	490c      	ldr	r1, [pc, #48]	; (18fd8 <sc_save+0x70>)
   18fa8:	f7ff fe8a 	bl	18cc0 <find_sc_cfg>
		if (!cfg) {
   18fac:	4604      	mov	r4, r0
   18fae:	b130      	cbz	r0, 18fbe <sc_save+0x56>
		cfg->id = id;
   18fb0:	f800 7b01 	strb.w	r7, [r0], #1
   18fb4:	2207      	movs	r2, #7
   18fb6:	4641      	mov	r1, r8
   18fb8:	f010 fee8 	bl	29d8c <memcpy>
}
   18fbc:	e7de      	b.n	18f7c <sc_save+0x14>
			BT_ERR("unable to save SC: no cfg left");
   18fbe:	2145      	movs	r1, #69	; 0x45
   18fc0:	4806      	ldr	r0, [pc, #24]	; (18fdc <sc_save+0x74>)
   18fc2:	f00f fe44 	bl	28c4e <z_log_minimal_printk>
			return;
   18fc6:	e7ec      	b.n	18fa2 <sc_save+0x3a>
		cfg->data.start = start;
   18fc8:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   18fca:	8165      	strh	r5, [r4, #10]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18fcc:	e7e3      	b.n	18f96 <sc_save+0x2e>
		sc_store(cfg);
   18fce:	4620      	mov	r0, r4
   18fd0:	f7ff ff9c 	bl	18f0c <sc_store>
   18fd4:	e7e5      	b.n	18fa2 <sc_save+0x3a>
   18fd6:	bf00      	nop
   18fd8:	00030c24 	.word	0x00030c24
   18fdc:	00032180 	.word	0x00032180

00018fe0 <bt_gatt_store_cf>:
{
   18fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18fe2:	b08d      	sub	sp, #52	; 0x34
   18fe4:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   18fe6:	f7ff fe45 	bl	18c74 <find_cf_cfg>
	if (!cfg) {
   18fea:	4605      	mov	r5, r0
   18fec:	b348      	cbz	r0, 19042 <bt_gatt_store_cf+0x62>
		str = (char *)cfg->data;
   18fee:	f100 0608 	add.w	r6, r0, #8
		if (conn->id) {
   18ff2:	7a22      	ldrb	r2, [r4, #8]
   18ff4:	b9b2      	cbnz	r2, 19024 <bt_gatt_store_cf+0x44>
		len = sizeof(cfg->data);
   18ff6:	2701      	movs	r7, #1
	if (!cfg || !conn->id) {
   18ff8:	b10d      	cbz	r5, 18ffe <bt_gatt_store_cf+0x1e>
   18ffa:	7a23      	ldrb	r3, [r4, #8]
   18ffc:	b943      	cbnz	r3, 19010 <bt_gatt_store_cf+0x30>
		bt_settings_encode_key(key, sizeof(key), "cf",
   18ffe:	2300      	movs	r3, #0
   19000:	9300      	str	r3, [sp, #0]
   19002:	f104 0390 	add.w	r3, r4, #144	; 0x90
   19006:	4a13      	ldr	r2, [pc, #76]	; (19054 <bt_gatt_store_cf+0x74>)
   19008:	2124      	movs	r1, #36	; 0x24
   1900a:	a803      	add	r0, sp, #12
   1900c:	f7fa ff50 	bl	13eb0 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   19010:	463a      	mov	r2, r7
   19012:	4631      	mov	r1, r6
   19014:	a803      	add	r0, sp, #12
   19016:	f7f9 f9ad 	bl	12374 <settings_save_one>
	if (err) {
   1901a:	4604      	mov	r4, r0
   1901c:	b9a0      	cbnz	r0, 19048 <bt_gatt_store_cf+0x68>
}
   1901e:	4620      	mov	r0, r4
   19020:	b00d      	add	sp, #52	; 0x34
   19022:	bdf0      	pop	{r4, r5, r6, r7, pc}
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   19024:	af02      	add	r7, sp, #8
   19026:	2104      	movs	r1, #4
   19028:	4638      	mov	r0, r7
   1902a:	f7f7 fe59 	bl	10ce0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1902e:	9700      	str	r7, [sp, #0]
   19030:	f104 0390 	add.w	r3, r4, #144	; 0x90
   19034:	4a07      	ldr	r2, [pc, #28]	; (19054 <bt_gatt_store_cf+0x74>)
   19036:	2124      	movs	r1, #36	; 0x24
   19038:	a803      	add	r0, sp, #12
   1903a:	f7fa ff39 	bl	13eb0 <bt_settings_encode_key>
		len = sizeof(cfg->data);
   1903e:	2701      	movs	r7, #1
   19040:	e7da      	b.n	18ff8 <bt_gatt_store_cf+0x18>
		str = NULL;
   19042:	4606      	mov	r6, r0
		len = 0;
   19044:	2700      	movs	r7, #0
   19046:	e7d7      	b.n	18ff8 <bt_gatt_store_cf+0x18>
		BT_ERR("Failed to store Client Features (err %d)", err);
   19048:	4602      	mov	r2, r0
   1904a:	2145      	movs	r1, #69	; 0x45
   1904c:	4802      	ldr	r0, [pc, #8]	; (19058 <bt_gatt_store_cf+0x78>)
   1904e:	f00f fdfe 	bl	28c4e <z_log_minimal_printk>
		return err;
   19052:	e7e4      	b.n	1901e <bt_gatt_store_cf+0x3e>
   19054:	000321a4 	.word	0x000321a4
   19058:	000321a8 	.word	0x000321a8

0001905c <bt_gatt_clear_sc>:
{
   1905c:	b530      	push	{r4, r5, lr}
   1905e:	b08d      	sub	sp, #52	; 0x34
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   19060:	f7ff fe2e 	bl	18cc0 <find_sc_cfg>
	if (!cfg) {
   19064:	b1b0      	cbz	r0, 19094 <bt_gatt_clear_sc+0x38>
   19066:	4604      	mov	r4, r0
		if (cfg->id) {
   19068:	7802      	ldrb	r2, [r0, #0]
   1906a:	b1b2      	cbz	r2, 1909a <bt_gatt_clear_sc+0x3e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1906c:	ad02      	add	r5, sp, #8
   1906e:	2104      	movs	r1, #4
   19070:	4628      	mov	r0, r5
   19072:	f7f7 fe35 	bl	10ce0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   19076:	9500      	str	r5, [sp, #0]
   19078:	1c63      	adds	r3, r4, #1
   1907a:	4a0f      	ldr	r2, [pc, #60]	; (190b8 <bt_gatt_clear_sc+0x5c>)
   1907c:	2124      	movs	r1, #36	; 0x24
   1907e:	a803      	add	r0, sp, #12
   19080:	f7fa ff16 	bl	13eb0 <bt_settings_encode_key>
		err = settings_delete(key);
   19084:	a803      	add	r0, sp, #12
   19086:	f010 f993 	bl	293b0 <settings_delete>
		if (err) {
   1908a:	4602      	mov	r2, r0
   1908c:	b970      	cbnz	r0, 190ac <bt_gatt_clear_sc+0x50>
	clear_sc_cfg(cfg);
   1908e:	4620      	mov	r0, r4
   19090:	f012 ff7f 	bl	2bf92 <clear_sc_cfg>
}
   19094:	2000      	movs	r0, #0
   19096:	b00d      	add	sp, #52	; 0x34
   19098:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1909a:	2300      	movs	r3, #0
   1909c:	9300      	str	r3, [sp, #0]
   1909e:	1c43      	adds	r3, r0, #1
   190a0:	4a05      	ldr	r2, [pc, #20]	; (190b8 <bt_gatt_clear_sc+0x5c>)
   190a2:	2124      	movs	r1, #36	; 0x24
   190a4:	a803      	add	r0, sp, #12
   190a6:	f7fa ff03 	bl	13eb0 <bt_settings_encode_key>
   190aa:	e7eb      	b.n	19084 <bt_gatt_clear_sc+0x28>
			BT_ERR("failed to delete SC (err %d)", err);
   190ac:	2145      	movs	r1, #69	; 0x45
   190ae:	4803      	ldr	r0, [pc, #12]	; (190bc <bt_gatt_clear_sc+0x60>)
   190b0:	f00f fdcd 	bl	28c4e <z_log_minimal_printk>
   190b4:	e7eb      	b.n	1908e <bt_gatt_clear_sc+0x32>
   190b6:	bf00      	nop
   190b8:	00032158 	.word	0x00032158
   190bc:	000321d8 	.word	0x000321d8

000190c0 <sc_clear>:
{
   190c0:	b538      	push	{r3, r4, r5, lr}
   190c2:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   190c4:	f100 0590 	add.w	r5, r0, #144	; 0x90
   190c8:	4629      	mov	r1, r5
   190ca:	7a00      	ldrb	r0, [r0, #8]
   190cc:	f011 f958 	bl	2a380 <bt_addr_le_is_bonded>
   190d0:	b158      	cbz	r0, 190ea <sc_clear+0x2a>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   190d2:	4629      	mov	r1, r5
   190d4:	7a20      	ldrb	r0, [r4, #8]
   190d6:	f7ff ffc1 	bl	1905c <bt_gatt_clear_sc>
		if (err) {
   190da:	4602      	mov	r2, r0
   190dc:	b900      	cbnz	r0, 190e0 <sc_clear+0x20>
}
   190de:	bd38      	pop	{r3, r4, r5, pc}
			BT_ERR("Failed to clear SC %d", err);
   190e0:	2145      	movs	r1, #69	; 0x45
   190e2:	4806      	ldr	r0, [pc, #24]	; (190fc <sc_clear+0x3c>)
   190e4:	f00f fdb3 	bl	28c4e <z_log_minimal_printk>
   190e8:	e7f9      	b.n	190de <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   190ea:	4629      	mov	r1, r5
   190ec:	7a20      	ldrb	r0, [r4, #8]
   190ee:	f7ff fde7 	bl	18cc0 <find_sc_cfg>
		if (cfg) {
   190f2:	2800      	cmp	r0, #0
   190f4:	d0f3      	beq.n	190de <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   190f6:	f012 ff4c 	bl	2bf92 <clear_sc_cfg>
}
   190fa:	e7f0      	b.n	190de <sc_clear+0x1e>
   190fc:	000321fc 	.word	0x000321fc

00019100 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   19100:	b508      	push	{r3, lr}
   19102:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   19104:	6881      	ldr	r1, [r0, #8]
   19106:	4a08      	ldr	r2, [pc, #32]	; (19128 <remove_peer_from_attr+0x28>)
   19108:	4291      	cmp	r1, r2
   1910a:	d001      	beq.n	19110 <remove_peer_from_attr+0x10>
	if (cfg) {
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   1910c:	2001      	movs	r0, #1
   1910e:	bd08      	pop	{r3, pc}
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   19110:	791a      	ldrb	r2, [r3, #4]
   19112:	6819      	ldr	r1, [r3, #0]
   19114:	68c0      	ldr	r0, [r0, #12]
   19116:	f012 ff08 	bl	2bf2a <ccc_find_cfg>
	if (cfg) {
   1911a:	2800      	cmp	r0, #0
   1911c:	d0f6      	beq.n	1910c <remove_peer_from_attr+0xc>
		memset(cfg, 0, sizeof(*cfg));
   1911e:	220a      	movs	r2, #10
   19120:	2100      	movs	r1, #0
   19122:	f010 fe62 	bl	29dea <memset>
   19126:	e7f1      	b.n	1910c <remove_peer_from_attr+0xc>
   19128:	00019351 	.word	0x00019351

0001912c <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1912c:	4b15      	ldr	r3, [pc, #84]	; (19184 <bt_gatt_service_init+0x58>)
   1912e:	2201      	movs	r2, #1
   19130:	f3bf 8f5b 	dmb	ish
   19134:	e853 1f00 	ldrex	r1, [r3]
   19138:	2900      	cmp	r1, #0
   1913a:	d103      	bne.n	19144 <bt_gatt_service_init+0x18>
   1913c:	e843 2000 	strex	r0, r2, [r3]
   19140:	2800      	cmp	r0, #0
   19142:	d1f7      	bne.n	19134 <bt_gatt_service_init+0x8>
   19144:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   19148:	d101      	bne.n	1914e <bt_gatt_service_init+0x22>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1914a:	4b0f      	ldr	r3, [pc, #60]	; (19188 <bt_gatt_service_init+0x5c>)
   1914c:	e006      	b.n	1915c <bt_gatt_service_init+0x30>
   1914e:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   19150:	685a      	ldr	r2, [r3, #4]
   19152:	490e      	ldr	r1, [pc, #56]	; (1918c <bt_gatt_service_init+0x60>)
   19154:	8808      	ldrh	r0, [r1, #0]
   19156:	4402      	add	r2, r0
   19158:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1915a:	3308      	adds	r3, #8
   1915c:	4a0c      	ldr	r2, [pc, #48]	; (19190 <bt_gatt_service_init+0x64>)
   1915e:	4293      	cmp	r3, r2
   19160:	d803      	bhi.n	1916a <bt_gatt_service_init+0x3e>
   19162:	4a0b      	ldr	r2, [pc, #44]	; (19190 <bt_gatt_service_init+0x64>)
   19164:	4293      	cmp	r3, r2
   19166:	d3f3      	bcc.n	19150 <bt_gatt_service_init+0x24>
   19168:	4770      	bx	lr
{
   1916a:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1916c:	4c09      	ldr	r4, [pc, #36]	; (19194 <bt_gatt_service_init+0x68>)
   1916e:	f240 520e 	movw	r2, #1294	; 0x50e
   19172:	4621      	mov	r1, r4
   19174:	4808      	ldr	r0, [pc, #32]	; (19198 <bt_gatt_service_init+0x6c>)
   19176:	f00f fd4a 	bl	28c0e <assert_print>
   1917a:	f240 510e 	movw	r1, #1294	; 0x50e
   1917e:	4620      	mov	r0, r4
   19180:	f00f fd3e 	bl	28c00 <assert_post_action>
   19184:	20002b28 	.word	0x20002b28
   19188:	0002f9d8 	.word	0x0002f9d8
   1918c:	200045e8 	.word	0x200045e8
   19190:	0002fa00 	.word	0x0002fa00
   19194:	00032218 	.word	0x00032218
   19198:	00030128 	.word	0x00030128

0001919c <sc_indicate>:
{
   1919c:	b510      	push	{r4, lr}
   1919e:	4602      	mov	r2, r0
   191a0:	460b      	mov	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   191a2:	4c16      	ldr	r4, [pc, #88]	; (191fc <sc_indicate+0x60>)
   191a4:	f3bf 8f5b 	dmb	ish
   191a8:	e854 1f00 	ldrex	r1, [r4]
   191ac:	f041 0001 	orr.w	r0, r1, #1
   191b0:	e844 0c00 	strex	ip, r0, [r4]
   191b4:	f1bc 0f00 	cmp.w	ip, #0
   191b8:	d1f6      	bne.n	191a8 <sc_indicate+0xc>
   191ba:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   191be:	f011 0f01 	tst.w	r1, #1
   191c2:	d10d      	bne.n	191e0 <sc_indicate+0x44>
		gatt_sc.start = start;
   191c4:	f1a4 0150 	sub.w	r1, r4, #80	; 0x50
   191c8:	830a      	strh	r2, [r1, #24]
		gatt_sc.end = end;
   191ca:	834b      	strh	r3, [r1, #26]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   191cc:	f3bf 8f5b 	dmb	ish
   191d0:	4b0a      	ldr	r3, [pc, #40]	; (191fc <sc_indicate+0x60>)
   191d2:	681b      	ldr	r3, [r3, #0]
   191d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   191d8:	f013 0f02 	tst.w	r3, #2
   191dc:	d007      	beq.n	191ee <sc_indicate+0x52>
}
   191de:	bd10      	pop	{r4, pc}
	if (!update_range(&gatt_sc.start, &gatt_sc.end, start, end)) {
   191e0:	4907      	ldr	r1, [pc, #28]	; (19200 <sc_indicate+0x64>)
   191e2:	1e88      	subs	r0, r1, #2
   191e4:	f012 fda7 	bl	2bd36 <update_range>
   191e8:	2800      	cmp	r0, #0
   191ea:	d1ef      	bne.n	191cc <sc_indicate+0x30>
   191ec:	e7f7      	b.n	191de <sc_indicate+0x42>
	k_work_reschedule(&gatt_sc.work, timeout);
   191ee:	f44f 72a4 	mov.w	r2, #328	; 0x148
   191f2:	2300      	movs	r3, #0
   191f4:	4803      	ldr	r0, [pc, #12]	; (19204 <sc_indicate+0x68>)
   191f6:	f009 ffb1 	bl	2315c <k_work_reschedule>
   191fa:	e7f0      	b.n	191de <sc_indicate+0x42>
   191fc:	20001ce8 	.word	0x20001ce8
   19200:	20001cb2 	.word	0x20001cb2
   19204:	20001cb8 	.word	0x20001cb8

00019208 <sc_indicate_rsp>:
{
   19208:	b510      	push	{r4, lr}
   1920a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1920c:	4b1b      	ldr	r3, [pc, #108]	; (1927c <sc_indicate_rsp+0x74>)
   1920e:	f3bf 8f5b 	dmb	ish
   19212:	e853 2f00 	ldrex	r2, [r3]
   19216:	f022 0202 	bic.w	r2, r2, #2
   1921a:	e843 2100 	strex	r1, r2, [r3]
   1921e:	2900      	cmp	r1, #0
   19220:	d1f7      	bne.n	19212 <sc_indicate_rsp+0xa>
   19222:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19226:	f3bf 8f5b 	dmb	ish
   1922a:	681b      	ldr	r3, [r3, #0]
   1922c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19230:	f013 0f01 	tst.w	r3, #1
   19234:	d104      	bne.n	19240 <sc_indicate_rsp+0x38>
	if (bt_att_fixed_chan_only(conn)) {
   19236:	4620      	mov	r0, r4
   19238:	f012 fd35 	bl	2bca6 <bt_att_fixed_chan_only>
   1923c:	b930      	cbnz	r0, 1924c <sc_indicate_rsp+0x44>
}
   1923e:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   19240:	2200      	movs	r2, #0
   19242:	2300      	movs	r3, #0
   19244:	480e      	ldr	r0, [pc, #56]	; (19280 <sc_indicate_rsp+0x78>)
   19246:	f009 ff89 	bl	2315c <k_work_reschedule>
   1924a:	e7f4      	b.n	19236 <sc_indicate_rsp+0x2e>
		cfg = find_cf_cfg(conn);
   1924c:	4620      	mov	r0, r4
   1924e:	f7ff fd11 	bl	18c74 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   19252:	4603      	mov	r3, r0
   19254:	2800      	cmp	r0, #0
   19256:	d0f2      	beq.n	1923e <sc_indicate_rsp+0x36>
   19258:	7a02      	ldrb	r2, [r0, #8]
   1925a:	f012 0f01 	tst.w	r2, #1
   1925e:	d0ee      	beq.n	1923e <sc_indicate_rsp+0x36>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   19260:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19262:	f3bf 8f5b 	dmb	ish
   19266:	e853 1f00 	ldrex	r1, [r3]
   1926a:	f041 0101 	orr.w	r1, r1, #1
   1926e:	e843 1200 	strex	r2, r1, [r3]
   19272:	2a00      	cmp	r2, #0
   19274:	d1f7      	bne.n	19266 <sc_indicate_rsp+0x5e>
   19276:	f3bf 8f5b 	dmb	ish
}
   1927a:	e7e0      	b.n	1923e <sc_indicate_rsp+0x36>
   1927c:	20001ce8 	.word	0x20001ce8
   19280:	20001cb8 	.word	0x20001cb8

00019284 <sc_commit>:
{
   19284:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19286:	4b0f      	ldr	r3, [pc, #60]	; (192c4 <sc_commit+0x40>)
   19288:	f3bf 8f5b 	dmb	ish
   1928c:	e853 2f00 	ldrex	r2, [r3]
   19290:	f022 0202 	bic.w	r2, r2, #2
   19294:	e843 2100 	strex	r1, r2, [r3]
   19298:	2900      	cmp	r1, #0
   1929a:	d1f7      	bne.n	1928c <sc_commit+0x8>
   1929c:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   192a0:	f3bf 8f5b 	dmb	ish
   192a4:	681b      	ldr	r3, [r3, #0]
   192a6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   192aa:	f013 0f01 	tst.w	r3, #1
   192ae:	d101      	bne.n	192b4 <sc_commit+0x30>
}
   192b0:	2000      	movs	r0, #0
   192b2:	bd08      	pop	{r3, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   192b4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   192b8:	2300      	movs	r3, #0
   192ba:	4803      	ldr	r0, [pc, #12]	; (192c8 <sc_commit+0x44>)
   192bc:	f009 ff4e 	bl	2315c <k_work_reschedule>
   192c0:	e7f6      	b.n	192b0 <sc_commit+0x2c>
   192c2:	bf00      	nop
   192c4:	20001ce8 	.word	0x20001ce8
   192c8:	20001cb8 	.word	0x20001cb8

000192cc <gatt_ccc_conn_is_queued>:
{
   192cc:	b510      	push	{r4, lr}
   192ce:	4604      	mov	r4, r0
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   192d0:	f7fd ff90 	bl	171f4 <bt_conn_index>
   192d4:	4b03      	ldr	r3, [pc, #12]	; (192e4 <gatt_ccc_conn_is_queued+0x18>)
   192d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   192da:	42a0      	cmp	r0, r4
   192dc:	bf14      	ite	ne
   192de:	2000      	movne	r0, #0
   192e0:	2001      	moveq	r0, #1
   192e2:	bd10      	pop	{r4, pc}
   192e4:	20001be8 	.word	0x20001be8

000192e8 <gatt_ccc_conn_unqueue>:
{
   192e8:	b510      	push	{r4, lr}
	uint8_t index = bt_conn_index(conn);
   192ea:	f7fd ff83 	bl	171f4 <bt_conn_index>
   192ee:	4604      	mov	r4, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   192f0:	4b05      	ldr	r3, [pc, #20]	; (19308 <gatt_ccc_conn_unqueue+0x20>)
   192f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   192f6:	b128      	cbz	r0, 19304 <gatt_ccc_conn_unqueue+0x1c>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   192f8:	f7fd fe92 	bl	17020 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   192fc:	4b02      	ldr	r3, [pc, #8]	; (19308 <gatt_ccc_conn_unqueue+0x20>)
   192fe:	2200      	movs	r2, #0
   19300:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   19304:	bd10      	pop	{r4, pc}
   19306:	bf00      	nop
   19308:	20001be8 	.word	0x20001be8

0001930c <gatt_ccc_conn_enqueue>:
{
   1930c:	b538      	push	{r3, r4, r5, lr}
   1930e:	4604      	mov	r4, r0
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   19310:	f7ff ffdc 	bl	192cc <gatt_ccc_conn_is_queued>
   19314:	b100      	cbz	r0, 19318 <gatt_ccc_conn_enqueue+0xc>
}
   19316:	bd38      	pop	{r3, r4, r5, pc}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19318:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1931c:	7a20      	ldrb	r0, [r4, #8]
   1931e:	f011 f82f 	bl	2a380 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   19322:	2800      	cmp	r0, #0
   19324:	d0f7      	beq.n	19316 <gatt_ccc_conn_enqueue+0xa>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   19326:	4620      	mov	r0, r4
   19328:	f7fd ff64 	bl	171f4 <bt_conn_index>
   1932c:	4605      	mov	r5, r0
			bt_conn_ref(conn);
   1932e:	4620      	mov	r0, r4
   19330:	f7fd fe48 	bl	16fc4 <bt_conn_ref>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   19334:	4905      	ldr	r1, [pc, #20]	; (1934c <gatt_ccc_conn_enqueue+0x40>)
   19336:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1933a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1933e:	2300      	movs	r3, #0
   19340:	f101 0008 	add.w	r0, r1, #8
   19344:	f009 ff0a 	bl	2315c <k_work_reschedule>
}
   19348:	e7e5      	b.n	19316 <gatt_ccc_conn_enqueue+0xa>
   1934a:	bf00      	nop
   1934c:	20001be8 	.word	0x20001be8

00019350 <bt_gatt_attr_write_ccc>:
{
   19350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19354:	461c      	mov	r4, r3
   19356:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1935a:	f8d1 800c 	ldr.w	r8, [r1, #12]
	if (offset) {
   1935e:	2b00      	cmp	r3, #0
   19360:	d154      	bne.n	1940c <bt_gatt_attr_write_ccc+0xbc>
   19362:	4606      	mov	r6, r0
   19364:	460f      	mov	r7, r1
	if (!len || len > sizeof(uint16_t)) {
   19366:	1e63      	subs	r3, r4, #1
   19368:	b29b      	uxth	r3, r3
   1936a:	2b01      	cmp	r3, #1
   1936c:	d851      	bhi.n	19412 <bt_gatt_attr_write_ccc+0xc2>
	if (len < sizeof(uint16_t)) {
   1936e:	2c01      	cmp	r4, #1
   19370:	d923      	bls.n	193ba <bt_gatt_attr_write_ccc+0x6a>
   19372:	7853      	ldrb	r3, [r2, #1]
   19374:	7815      	ldrb	r5, [r2, #0]
   19376:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1937a:	4641      	mov	r1, r8
   1937c:	4630      	mov	r0, r6
   1937e:	f7ff fcc3 	bl	18d08 <find_ccc_cfg>
	if (!cfg) {
   19382:	4681      	mov	r9, r0
   19384:	b1d8      	cbz	r0, 193be <bt_gatt_attr_write_ccc+0x6e>
	if (ccc->cfg_write) {
   19386:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1938a:	b143      	cbz	r3, 1939e <bt_gatt_attr_write_ccc+0x4e>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1938c:	462a      	mov	r2, r5
   1938e:	4639      	mov	r1, r7
   19390:	4630      	mov	r0, r6
   19392:	4798      	blx	r3
		if (write < 0) {
   19394:	2800      	cmp	r0, #0
   19396:	db0e      	blt.n	193b6 <bt_gatt_attr_write_ccc+0x66>
		if (write != sizeof(value) && write != 1) {
   19398:	3801      	subs	r0, #1
   1939a:	2801      	cmp	r0, #1
   1939c:	d83c      	bhi.n	19418 <bt_gatt_attr_write_ccc+0xc8>
	value_changed = cfg->value != value;
   1939e:	f8b9 a008 	ldrh.w	sl, [r9, #8]
	cfg->value = value;
   193a2:	f8a9 5008 	strh.w	r5, [r9, #8]
	if (cfg->value != ccc->value) {
   193a6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   193aa:	429d      	cmp	r5, r3
   193ac:	d121      	bne.n	193f2 <bt_gatt_attr_write_ccc+0xa2>
	if (value_changed) {
   193ae:	45aa      	cmp	sl, r5
   193b0:	d124      	bne.n	193fc <bt_gatt_attr_write_ccc+0xac>
	if (!value) {
   193b2:	b33d      	cbz	r5, 19404 <bt_gatt_attr_write_ccc+0xb4>
	return len;
   193b4:	4620      	mov	r0, r4
}
   193b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = *(uint8_t *)buf;
   193ba:	7815      	ldrb	r5, [r2, #0]
   193bc:	e7dd      	b.n	1937a <bt_gatt_attr_write_ccc+0x2a>
		if (!value) {
   193be:	b90d      	cbnz	r5, 193c4 <bt_gatt_attr_write_ccc+0x74>
			return len;
   193c0:	4620      	mov	r0, r4
   193c2:	e7f8      	b.n	193b6 <bt_gatt_attr_write_ccc+0x66>
		cfg = find_ccc_cfg(NULL, ccc);
   193c4:	4641      	mov	r1, r8
   193c6:	2000      	movs	r0, #0
   193c8:	f7ff fc9e 	bl	18d08 <find_ccc_cfg>
		if (!cfg) {
   193cc:	4681      	mov	r9, r0
   193ce:	b148      	cbz	r0, 193e4 <bt_gatt_attr_write_ccc+0x94>
	memcpy(dst, src, sizeof(*dst));
   193d0:	2207      	movs	r2, #7
   193d2:	f106 0190 	add.w	r1, r6, #144	; 0x90
   193d6:	3001      	adds	r0, #1
   193d8:	f010 fcd8 	bl	29d8c <memcpy>
		cfg->id = conn->id;
   193dc:	7a33      	ldrb	r3, [r6, #8]
   193de:	f889 3000 	strb.w	r3, [r9]
   193e2:	e7d0      	b.n	19386 <bt_gatt_attr_write_ccc+0x36>
			BT_WARN("No space to store CCC cfg");
   193e4:	2157      	movs	r1, #87	; 0x57
   193e6:	480e      	ldr	r0, [pc, #56]	; (19420 <bt_gatt_attr_write_ccc+0xd0>)
   193e8:	f00f fc31 	bl	28c4e <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   193ec:	f06f 0010 	mvn.w	r0, #16
   193f0:	e7e1      	b.n	193b6 <bt_gatt_attr_write_ccc+0x66>
		gatt_ccc_changed(attr, ccc);
   193f2:	4641      	mov	r1, r8
   193f4:	4638      	mov	r0, r7
   193f6:	f012 fcfa 	bl	2bdee <gatt_ccc_changed>
   193fa:	e7d8      	b.n	193ae <bt_gatt_attr_write_ccc+0x5e>
		gatt_ccc_conn_enqueue(conn);
   193fc:	4630      	mov	r0, r6
   193fe:	f7ff ff85 	bl	1930c <gatt_ccc_conn_enqueue>
   19402:	e7d6      	b.n	193b2 <bt_gatt_attr_write_ccc+0x62>
		clear_ccc_cfg(cfg);
   19404:	4648      	mov	r0, r9
   19406:	f7ff fd2d 	bl	18e64 <clear_ccc_cfg>
   1940a:	e7d3      	b.n	193b4 <bt_gatt_attr_write_ccc+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1940c:	f06f 0006 	mvn.w	r0, #6
   19410:	e7d1      	b.n	193b6 <bt_gatt_attr_write_ccc+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19412:	f06f 000c 	mvn.w	r0, #12
   19416:	e7ce      	b.n	193b6 <bt_gatt_attr_write_ccc+0x66>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   19418:	f06f 000d 	mvn.w	r0, #13
   1941c:	e7cb      	b.n	193b6 <bt_gatt_attr_write_ccc+0x66>
   1941e:	bf00      	nop
   19420:	00032248 	.word	0x00032248

00019424 <disconnected_cb>:
{
   19424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19428:	6881      	ldr	r1, [r0, #8]
   1942a:	4b2c      	ldr	r3, [pc, #176]	; (194dc <disconnected_cb+0xb8>)
   1942c:	4299      	cmp	r1, r3
   1942e:	d002      	beq.n	19436 <disconnected_cb+0x12>
}
   19430:	2001      	movs	r0, #1
   19432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19436:	4604      	mov	r4, r0
   19438:	4616      	mov	r6, r2
	ccc = attr->user_data;
   1943a:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   1943c:	897b      	ldrh	r3, [r7, #10]
   1943e:	2b00      	cmp	r3, #0
   19440:	d0f6      	beq.n	19430 <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19442:	2500      	movs	r5, #0
	value_used = false;
   19444:	46aa      	mov	sl, r5
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19446:	b15d      	cbz	r5, 19460 <disconnected_cb+0x3c>
	if (!value_used) {
   19448:	f1ba 0f00 	cmp.w	sl, #0
   1944c:	d1f0      	bne.n	19430 <disconnected_cb+0xc>
		ccc->value = 0U;
   1944e:	2300      	movs	r3, #0
   19450:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   19452:	68fb      	ldr	r3, [r7, #12]
   19454:	2b00      	cmp	r3, #0
   19456:	d0eb      	beq.n	19430 <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
   19458:	2100      	movs	r1, #0
   1945a:	4620      	mov	r0, r4
   1945c:	4798      	blx	r3
   1945e:	e7e7      	b.n	19430 <disconnected_cb+0xc>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   19460:	eb05 0885 	add.w	r8, r5, r5, lsl #2
   19464:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   19468:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1946c:	b1cb      	cbz	r3, 194a2 <disconnected_cb+0x7e>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1946e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19472:	f108 0901 	add.w	r9, r8, #1
   19476:	464a      	mov	r2, r9
   19478:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1947c:	4630      	mov	r0, r6
   1947e:	f011 fc6e 	bl	2ad5e <bt_conn_is_peer_addr_le>
   19482:	b998      	cbnz	r0, 194ac <disconnected_cb+0x88>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19484:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19488:	4649      	mov	r1, r9
   1948a:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   1948e:	f7fe f833 	bl	174f8 <bt_conn_lookup_addr_le>
			if (tmp) {
   19492:	4603      	mov	r3, r0
   19494:	b128      	cbz	r0, 194a2 <disconnected_cb+0x7e>
				if (tmp->state == BT_CONN_CONNECTED) {
   19496:	7b42      	ldrb	r2, [r0, #13]
   19498:	2a07      	cmp	r2, #7
   1949a:	d004      	beq.n	194a6 <disconnected_cb+0x82>
				bt_conn_unref(tmp);
   1949c:	4618      	mov	r0, r3
   1949e:	f7fd fdbf 	bl	17020 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   194a2:	3501      	adds	r5, #1
   194a4:	e7cf      	b.n	19446 <disconnected_cb+0x22>
					value_used = true;
   194a6:	f04f 0a01 	mov.w	sl, #1
   194aa:	e7f7      	b.n	1949c <disconnected_cb+0x78>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   194ac:	f106 0b90 	add.w	fp, r6, #144	; 0x90
   194b0:	4659      	mov	r1, fp
   194b2:	7a30      	ldrb	r0, [r6, #8]
   194b4:	f010 ff64 	bl	2a380 <bt_addr_le_is_bonded>
   194b8:	b950      	cbnz	r0, 194d0 <disconnected_cb+0xac>
				if (ccc == &sc_ccc) {
   194ba:	4b09      	ldr	r3, [pc, #36]	; (194e0 <disconnected_cb+0xbc>)
   194bc:	429f      	cmp	r7, r3
   194be:	d003      	beq.n	194c8 <disconnected_cb+0xa4>
				clear_ccc_cfg(cfg);
   194c0:	4640      	mov	r0, r8
   194c2:	f7ff fccf 	bl	18e64 <clear_ccc_cfg>
   194c6:	e7ec      	b.n	194a2 <disconnected_cb+0x7e>
					sc_clear(conn);
   194c8:	4630      	mov	r0, r6
   194ca:	f7ff fdf9 	bl	190c0 <sc_clear>
   194ce:	e7f7      	b.n	194c0 <disconnected_cb+0x9c>
   194d0:	2207      	movs	r2, #7
   194d2:	4659      	mov	r1, fp
   194d4:	4648      	mov	r0, r9
   194d6:	f010 fc59 	bl	29d8c <memcpy>
}
   194da:	e7e2      	b.n	194a2 <disconnected_cb+0x7e>
   194dc:	00019351 	.word	0x00019351
   194e0:	2000075c 	.word	0x2000075c

000194e4 <sc_set>:
{
   194e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   194e8:	b085      	sub	sp, #20
	if (!name) {
   194ea:	b330      	cbz	r0, 1953a <sc_set+0x56>
   194ec:	460c      	mov	r4, r1
   194ee:	4616      	mov	r6, r2
   194f0:	461f      	mov	r7, r3
   194f2:	4605      	mov	r5, r0
	err = bt_settings_decode_key(name, &addr);
   194f4:	a902      	add	r1, sp, #8
   194f6:	f010 fcfc 	bl	29ef2 <bt_settings_decode_key>
	if (err) {
   194fa:	4680      	mov	r8, r0
   194fc:	bb20      	cbnz	r0, 19548 <sc_set+0x64>
	settings_name_next(name, &next);
   194fe:	a901      	add	r1, sp, #4
   19500:	4628      	mov	r0, r5
   19502:	f00f ff85 	bl	29410 <settings_name_next>
	if (!next) {
   19506:	9801      	ldr	r0, [sp, #4]
   19508:	b370      	cbz	r0, 19568 <sc_set+0x84>
		unsigned long next_id = strtoul(next, NULL, 10);
   1950a:	220a      	movs	r2, #10
   1950c:	2100      	movs	r1, #0
   1950e:	f010 fb3a 	bl	29b86 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19512:	bb08      	cbnz	r0, 19558 <sc_set+0x74>
		id = (uint8_t)next_id;
   19514:	b2c5      	uxtb	r5, r0
	cfg = find_sc_cfg(id, &addr);
   19516:	a902      	add	r1, sp, #8
   19518:	4628      	mov	r0, r5
   1951a:	f7ff fbd1 	bl	18cc0 <find_sc_cfg>
	if (!cfg && len_rd) {
   1951e:	4681      	mov	r9, r0
   19520:	b320      	cbz	r0, 1956c <sc_set+0x88>
	if (len_rd) {
   19522:	b324      	cbz	r4, 1956e <sc_set+0x8a>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   19524:	2204      	movs	r2, #4
   19526:	f109 0108 	add.w	r1, r9, #8
   1952a:	4638      	mov	r0, r7
   1952c:	47b0      	blx	r6
		if (len < 0) {
   1952e:	1e04      	subs	r4, r0, #0
   19530:	db39      	blt.n	195a6 <sc_set+0xc2>
}
   19532:	4640      	mov	r0, r8
   19534:	b005      	add	sp, #20
   19536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Insufficient number of arguments");
   1953a:	2145      	movs	r1, #69	; 0x45
   1953c:	481d      	ldr	r0, [pc, #116]	; (195b4 <sc_set+0xd0>)
   1953e:	f00f fb86 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   19542:	f06f 0815 	mvn.w	r8, #21
   19546:	e7f4      	b.n	19532 <sc_set+0x4e>
		BT_ERR("Unable to decode address %s", name);
   19548:	462a      	mov	r2, r5
   1954a:	2145      	movs	r1, #69	; 0x45
   1954c:	481a      	ldr	r0, [pc, #104]	; (195b8 <sc_set+0xd4>)
   1954e:	f00f fb7e 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   19552:	f06f 0815 	mvn.w	r8, #21
   19556:	e7ec      	b.n	19532 <sc_set+0x4e>
			BT_ERR("Invalid local identity %lu", next_id);
   19558:	4602      	mov	r2, r0
   1955a:	2145      	movs	r1, #69	; 0x45
   1955c:	4817      	ldr	r0, [pc, #92]	; (195bc <sc_set+0xd8>)
   1955e:	f00f fb76 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   19562:	f06f 0815 	mvn.w	r8, #21
   19566:	e7e4      	b.n	19532 <sc_set+0x4e>
		id = BT_ID_DEFAULT;
   19568:	2500      	movs	r5, #0
   1956a:	e7d4      	b.n	19516 <sc_set+0x32>
	if (!cfg && len_rd) {
   1956c:	b944      	cbnz	r4, 19580 <sc_set+0x9c>
	} else if (cfg) {
   1956e:	f1b9 0f00 	cmp.w	r9, #0
   19572:	d0de      	beq.n	19532 <sc_set+0x4e>
		memset(cfg, 0, sizeof(*cfg));
   19574:	220c      	movs	r2, #12
   19576:	2100      	movs	r1, #0
   19578:	4648      	mov	r0, r9
   1957a:	f010 fc36 	bl	29dea <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1957e:	e7d8      	b.n	19532 <sc_set+0x4e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19580:	490f      	ldr	r1, [pc, #60]	; (195c0 <sc_set+0xdc>)
   19582:	f7ff fb9d 	bl	18cc0 <find_sc_cfg>
		if (!cfg) {
   19586:	4681      	mov	r9, r0
   19588:	b130      	cbz	r0, 19598 <sc_set+0xb4>
		cfg->id = id;
   1958a:	f800 5b01 	strb.w	r5, [r0], #1
	memcpy(dst, src, sizeof(*dst));
   1958e:	2207      	movs	r2, #7
   19590:	a902      	add	r1, sp, #8
   19592:	f010 fbfb 	bl	29d8c <memcpy>
}
   19596:	e7c4      	b.n	19522 <sc_set+0x3e>
			BT_ERR("Unable to restore SC: no cfg left");
   19598:	2145      	movs	r1, #69	; 0x45
   1959a:	480a      	ldr	r0, [pc, #40]	; (195c4 <sc_set+0xe0>)
   1959c:	f00f fb57 	bl	28c4e <z_log_minimal_printk>
			return -ENOMEM;
   195a0:	f06f 080b 	mvn.w	r8, #11
   195a4:	e7c5      	b.n	19532 <sc_set+0x4e>
			BT_ERR("Failed to decode value (err %zd)", len);
   195a6:	4622      	mov	r2, r4
   195a8:	2145      	movs	r1, #69	; 0x45
   195aa:	4807      	ldr	r0, [pc, #28]	; (195c8 <sc_set+0xe4>)
   195ac:	f00f fb4f 	bl	28c4e <z_log_minimal_printk>
			return len;
   195b0:	46a0      	mov	r8, r4
   195b2:	e7be      	b.n	19532 <sc_set+0x4e>
   195b4:	00030c90 	.word	0x00030c90
   195b8:	00032268 	.word	0x00032268
   195bc:	0003228c 	.word	0x0003228c
   195c0:	00030c24 	.word	0x00030c24
   195c4:	000322ac 	.word	0x000322ac
   195c8:	000320c8 	.word	0x000320c8

000195cc <clear_cf_cfg>:
{
   195cc:	b510      	push	{r4, lr}
   195ce:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   195d0:	2207      	movs	r2, #7
   195d2:	490b      	ldr	r1, [pc, #44]	; (19600 <clear_cf_cfg+0x34>)
   195d4:	3001      	adds	r0, #1
   195d6:	f010 fbd9 	bl	29d8c <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   195da:	2201      	movs	r2, #1
   195dc:	2100      	movs	r1, #0
   195de:	f104 0008 	add.w	r0, r4, #8
   195e2:	f010 fc02 	bl	29dea <memset>
	atomic_set(cfg->flags, 0);
   195e6:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   195e8:	2300      	movs	r3, #0
   195ea:	f3bf 8f5b 	dmb	ish
   195ee:	e854 2f00 	ldrex	r2, [r4]
   195f2:	e844 3100 	strex	r1, r3, [r4]
   195f6:	2900      	cmp	r1, #0
   195f8:	d1f9      	bne.n	195ee <clear_cf_cfg+0x22>
   195fa:	f3bf 8f5b 	dmb	ish
}
   195fe:	bd10      	pop	{r4, pc}
   19600:	00030c24 	.word	0x00030c24

00019604 <cf_set>:
{
   19604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19608:	b085      	sub	sp, #20
	if (!name) {
   1960a:	b338      	cbz	r0, 1965c <cf_set+0x58>
   1960c:	460c      	mov	r4, r1
   1960e:	4615      	mov	r5, r2
   19610:	461e      	mov	r6, r3
   19612:	4607      	mov	r7, r0
	err = bt_settings_decode_key(name, &addr);
   19614:	a902      	add	r1, sp, #8
   19616:	f010 fc6c 	bl	29ef2 <bt_settings_decode_key>
	if (err) {
   1961a:	4680      	mov	r8, r0
   1961c:	bb28      	cbnz	r0, 1966a <cf_set+0x66>
	settings_name_next(name, &next);
   1961e:	a901      	add	r1, sp, #4
   19620:	4638      	mov	r0, r7
   19622:	f00f fef5 	bl	29410 <settings_name_next>
	if (!next) {
   19626:	9801      	ldr	r0, [sp, #4]
   19628:	b378      	cbz	r0, 1968a <cf_set+0x86>
		unsigned long next_id = strtoul(next, NULL, 10);
   1962a:	220a      	movs	r2, #10
   1962c:	2100      	movs	r1, #0
   1962e:	f010 faaa 	bl	29b86 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19632:	bb10      	cbnz	r0, 1967a <cf_set+0x76>
		id = (uint8_t)next_id;
   19634:	b2c7      	uxtb	r7, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   19636:	a902      	add	r1, sp, #8
   19638:	4638      	mov	r0, r7
   1963a:	f7ff fbad 	bl	18d98 <find_cf_cfg_by_addr>
	if (!cfg) {
   1963e:	4681      	mov	r9, r0
   19640:	b328      	cbz	r0, 1968e <cf_set+0x8a>
	if (len_rd) {
   19642:	2c00      	cmp	r4, #0
   19644:	d03c      	beq.n	196c0 <cf_set+0xbc>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   19646:	2201      	movs	r2, #1
   19648:	f109 0108 	add.w	r1, r9, #8
   1964c:	4630      	mov	r0, r6
   1964e:	47a8      	blx	r5
		if (len < 0) {
   19650:	1e04      	subs	r4, r0, #0
   19652:	db2e      	blt.n	196b2 <cf_set+0xae>
}
   19654:	4640      	mov	r0, r8
   19656:	b005      	add	sp, #20
   19658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Insufficient number of arguments");
   1965c:	2145      	movs	r1, #69	; 0x45
   1965e:	481a      	ldr	r0, [pc, #104]	; (196c8 <cf_set+0xc4>)
   19660:	f00f faf5 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   19664:	f06f 0815 	mvn.w	r8, #21
   19668:	e7f4      	b.n	19654 <cf_set+0x50>
		BT_ERR("Unable to decode address %s", name);
   1966a:	463a      	mov	r2, r7
   1966c:	2145      	movs	r1, #69	; 0x45
   1966e:	4817      	ldr	r0, [pc, #92]	; (196cc <cf_set+0xc8>)
   19670:	f00f faed 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   19674:	f06f 0815 	mvn.w	r8, #21
   19678:	e7ec      	b.n	19654 <cf_set+0x50>
			BT_ERR("Invalid local identity %lu", next_id);
   1967a:	4602      	mov	r2, r0
   1967c:	2145      	movs	r1, #69	; 0x45
   1967e:	4814      	ldr	r0, [pc, #80]	; (196d0 <cf_set+0xcc>)
   19680:	f00f fae5 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   19684:	f06f 0815 	mvn.w	r8, #21
   19688:	e7e4      	b.n	19654 <cf_set+0x50>
		id = BT_ID_DEFAULT;
   1968a:	2700      	movs	r7, #0
   1968c:	e7d3      	b.n	19636 <cf_set+0x32>
		cfg = find_cf_cfg(NULL);
   1968e:	f7ff faf1 	bl	18c74 <find_cf_cfg>
		if (!cfg) {
   19692:	4681      	mov	r9, r0
   19694:	b130      	cbz	r0, 196a4 <cf_set+0xa0>
		cfg->id = id;
   19696:	f800 7b01 	strb.w	r7, [r0], #1
   1969a:	2207      	movs	r2, #7
   1969c:	a902      	add	r1, sp, #8
   1969e:	f010 fb75 	bl	29d8c <memcpy>
}
   196a2:	e7ce      	b.n	19642 <cf_set+0x3e>
			BT_ERR("Unable to restore CF: no cfg left");
   196a4:	2145      	movs	r1, #69	; 0x45
   196a6:	480b      	ldr	r0, [pc, #44]	; (196d4 <cf_set+0xd0>)
   196a8:	f00f fad1 	bl	28c4e <z_log_minimal_printk>
			return -ENOMEM;
   196ac:	f06f 080b 	mvn.w	r8, #11
   196b0:	e7d0      	b.n	19654 <cf_set+0x50>
			BT_ERR("Failed to decode value (err %zd)", len);
   196b2:	4622      	mov	r2, r4
   196b4:	2145      	movs	r1, #69	; 0x45
   196b6:	4808      	ldr	r0, [pc, #32]	; (196d8 <cf_set+0xd4>)
   196b8:	f00f fac9 	bl	28c4e <z_log_minimal_printk>
			return len;
   196bc:	46a0      	mov	r8, r4
   196be:	e7c9      	b.n	19654 <cf_set+0x50>
		clear_cf_cfg(cfg);
   196c0:	4648      	mov	r0, r9
   196c2:	f7ff ff83 	bl	195cc <clear_cf_cfg>
   196c6:	e7c5      	b.n	19654 <cf_set+0x50>
   196c8:	00030c90 	.word	0x00030c90
   196cc:	00032268 	.word	0x00032268
   196d0:	0003228c 	.word	0x0003228c
   196d4:	000322d4 	.word	0x000322d4
   196d8:	000320c8 	.word	0x000320c8

000196dc <db_hash_commit>:
{
   196dc:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   196de:	4b0f      	ldr	r3, [pc, #60]	; (1971c <db_hash_commit+0x40>)
   196e0:	f3bf 8f5b 	dmb	ish
   196e4:	e853 1f00 	ldrex	r1, [r3]
   196e8:	f041 0108 	orr.w	r1, r1, #8
   196ec:	e843 1200 	strex	r2, r1, [r3]
   196f0:	2a00      	cmp	r2, #0
   196f2:	d1f7      	bne.n	196e4 <db_hash_commit+0x8>
   196f4:	f3bf 8f5b 	dmb	ish
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   196f8:	2200      	movs	r2, #0
   196fa:	2300      	movs	r3, #0
   196fc:	4808      	ldr	r0, [pc, #32]	; (19720 <db_hash_commit+0x44>)
   196fe:	f7fa fc9f 	bl	14040 <bt_long_wq_reschedule>
	if (err > 0) {
   19702:	1e04      	subs	r4, r0, #0
   19704:	dd02      	ble.n	1970c <db_hash_commit+0x30>
		err = 0;
   19706:	2400      	movs	r4, #0
}
   19708:	4620      	mov	r0, r4
   1970a:	bd10      	pop	{r4, pc}
	if (err) {
   1970c:	2c00      	cmp	r4, #0
   1970e:	d0fb      	beq.n	19708 <db_hash_commit+0x2c>
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
   19710:	4622      	mov	r2, r4
   19712:	2145      	movs	r1, #69	; 0x45
   19714:	4803      	ldr	r0, [pc, #12]	; (19724 <db_hash_commit+0x48>)
   19716:	f00f fa9a 	bl	28c4e <z_log_minimal_printk>
   1971a:	e7f5      	b.n	19708 <db_hash_commit+0x2c>
   1971c:	20001ce8 	.word	0x20001ce8
   19720:	20001c40 	.word	0x20001c40
   19724:	000322fc 	.word	0x000322fc

00019728 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19728:	4b1c      	ldr	r3, [pc, #112]	; (1979c <bt_gatt_init+0x74>)
   1972a:	2201      	movs	r2, #1
   1972c:	f3bf 8f5b 	dmb	ish
   19730:	e853 1f00 	ldrex	r1, [r3]
   19734:	2900      	cmp	r1, #0
   19736:	d103      	bne.n	19740 <bt_gatt_init+0x18>
   19738:	e843 2000 	strex	r0, r2, [r3]
   1973c:	2800      	cmp	r0, #0
   1973e:	d1f7      	bne.n	19730 <bt_gatt_init+0x8>
   19740:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   19744:	d128      	bne.n	19798 <bt_gatt_init+0x70>
{
   19746:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   19748:	f7ff fcf0 	bl	1912c <bt_gatt_service_init>
	list->head = NULL;
   1974c:	4b14      	ldr	r3, [pc, #80]	; (197a0 <bt_gatt_init+0x78>)
   1974e:	2200      	movs	r2, #0
   19750:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   19752:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   19754:	4c13      	ldr	r4, [pc, #76]	; (197a4 <bt_gatt_init+0x7c>)
   19756:	4914      	ldr	r1, [pc, #80]	; (197a8 <bt_gatt_init+0x80>)
   19758:	4620      	mov	r0, r4
   1975a:	f009 fbe7 	bl	22f2c <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1975e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19762:	2300      	movs	r3, #0
   19764:	4620      	mov	r0, r4
   19766:	f7fa fc63 	bl	14030 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1976a:	4c10      	ldr	r4, [pc, #64]	; (197ac <bt_gatt_init+0x84>)
   1976c:	4910      	ldr	r1, [pc, #64]	; (197b0 <bt_gatt_init+0x88>)
   1976e:	4620      	mov	r0, r4
   19770:	f009 fbdc 	bl	22f2c <k_work_init_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19774:	3430      	adds	r4, #48	; 0x30
   19776:	f3bf 8f5b 	dmb	ish
   1977a:	e854 3f00 	ldrex	r3, [r4]
   1977e:	f043 0302 	orr.w	r3, r3, #2
   19782:	e844 3200 	strex	r2, r3, [r4]
   19786:	2a00      	cmp	r2, #0
   19788:	d1f7      	bne.n	1977a <bt_gatt_init+0x52>
   1978a:	f3bf 8f5b 	dmb	ish
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1978e:	4909      	ldr	r1, [pc, #36]	; (197b4 <bt_gatt_init+0x8c>)
   19790:	4809      	ldr	r0, [pc, #36]	; (197b8 <bt_gatt_init+0x90>)
   19792:	f009 fbcb 	bl	22f2c <k_work_init_delayable>
}
   19796:	bd10      	pop	{r4, pc}
   19798:	4770      	bx	lr
   1979a:	bf00      	nop
   1979c:	20002b2c 	.word	0x20002b2c
   197a0:	20002b30 	.word	0x20002b30
   197a4:	20001c40 	.word	0x20001c40
   197a8:	00019a39 	.word	0x00019a39
   197ac:	20001cb8 	.word	0x20001cb8
   197b0:	00019fe9 	.word	0x00019fe9
   197b4:	0002c467 	.word	0x0002c467
   197b8:	20001bf0 	.word	0x20001bf0

000197bc <bt_gatt_attr_get_handle>:
	if (!attr) {
   197bc:	2800      	cmp	r0, #0
   197be:	d036      	beq.n	1982e <bt_gatt_attr_get_handle+0x72>
{
   197c0:	b570      	push	{r4, r5, r6, lr}
   197c2:	4684      	mov	ip, r0
	if (attr->handle) {
   197c4:	8a06      	ldrh	r6, [r0, #16]
   197c6:	bba6      	cbnz	r6, 19832 <bt_gatt_attr_get_handle+0x76>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   197c8:	4c1b      	ldr	r4, [pc, #108]	; (19838 <bt_gatt_attr_get_handle+0x7c>)
	uint16_t handle = 1;
   197ca:	2001      	movs	r0, #1
   197cc:	e003      	b.n	197d6 <bt_gatt_attr_get_handle+0x1a>
			handle += static_svc->attr_count;
   197ce:	6863      	ldr	r3, [r4, #4]
   197d0:	4403      	add	r3, r0
   197d2:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   197d4:	3408      	adds	r4, #8
   197d6:	4b19      	ldr	r3, [pc, #100]	; (1983c <bt_gatt_attr_get_handle+0x80>)
   197d8:	429c      	cmp	r4, r3
   197da:	d81a      	bhi.n	19812 <bt_gatt_attr_get_handle+0x56>
   197dc:	4b17      	ldr	r3, [pc, #92]	; (1983c <bt_gatt_attr_get_handle+0x80>)
   197de:	429c      	cmp	r4, r3
   197e0:	d223      	bcs.n	1982a <bt_gatt_attr_get_handle+0x6e>
		if ((attr < &static_svc->attrs[0]) ||
   197e2:	6821      	ldr	r1, [r4, #0]
   197e4:	4561      	cmp	r1, ip
   197e6:	d8f2      	bhi.n	197ce <bt_gatt_attr_get_handle+0x12>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   197e8:	6865      	ldr	r5, [r4, #4]
   197ea:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   197ee:	009b      	lsls	r3, r3, #2
   197f0:	3b14      	subs	r3, #20
   197f2:	440b      	add	r3, r1
		if ((attr < &static_svc->attrs[0]) ||
   197f4:	4563      	cmp	r3, ip
   197f6:	d3ea      	bcc.n	197ce <bt_gatt_attr_get_handle+0x12>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   197f8:	2300      	movs	r3, #0
   197fa:	429d      	cmp	r5, r3
   197fc:	d9ea      	bls.n	197d4 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   197fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19802:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   19806:	4562      	cmp	r2, ip
   19808:	d014      	beq.n	19834 <bt_gatt_attr_get_handle+0x78>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1980a:	3301      	adds	r3, #1
   1980c:	3001      	adds	r0, #1
   1980e:	b280      	uxth	r0, r0
   19810:	e7f3      	b.n	197fa <bt_gatt_attr_get_handle+0x3e>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19812:	4c0b      	ldr	r4, [pc, #44]	; (19840 <bt_gatt_attr_get_handle+0x84>)
   19814:	f240 6265 	movw	r2, #1637	; 0x665
   19818:	4621      	mov	r1, r4
   1981a:	480a      	ldr	r0, [pc, #40]	; (19844 <bt_gatt_attr_get_handle+0x88>)
   1981c:	f00f f9f7 	bl	28c0e <assert_print>
   19820:	f240 6165 	movw	r1, #1637	; 0x665
   19824:	4620      	mov	r0, r4
   19826:	f00f f9eb 	bl	28c00 <assert_post_action>
	return 0;
   1982a:	4630      	mov	r0, r6
   1982c:	e002      	b.n	19834 <bt_gatt_attr_get_handle+0x78>
		return 0;
   1982e:	2000      	movs	r0, #0
}
   19830:	4770      	bx	lr
		return attr->handle;
   19832:	4630      	mov	r0, r6
}
   19834:	bd70      	pop	{r4, r5, r6, pc}
   19836:	bf00      	nop
   19838:	0002f9d8 	.word	0x0002f9d8
   1983c:	0002fa00 	.word	0x0002fa00
   19840:	00032218 	.word	0x00032218
   19844:	00030128 	.word	0x00030128

00019848 <bt_gatt_foreach_attr_type>:
{
   19848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1984c:	b089      	sub	sp, #36	; 0x24
   1984e:	4682      	mov	sl, r0
   19850:	9107      	str	r1, [sp, #28]
   19852:	4690      	mov	r8, r2
   19854:	4699      	mov	r9, r3
   19856:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   19858:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1985c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   19860:	b91b      	cbnz	r3, 1986a <bt_gatt_foreach_attr_type+0x22>
		num_matches = UINT16_MAX;
   19862:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19866:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1986a:	4b23      	ldr	r3, [pc, #140]	; (198f8 <bt_gatt_foreach_attr_type+0xb0>)
   1986c:	881b      	ldrh	r3, [r3, #0]
   1986e:	4553      	cmp	r3, sl
   19870:	d22e      	bcs.n	198d0 <bt_gatt_foreach_attr_type+0x88>
}
   19872:	b009      	add	sp, #36	; 0x24
   19874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19878:	2500      	movs	r5, #0
   1987a:	6873      	ldr	r3, [r6, #4]
   1987c:	42ab      	cmp	r3, r5
   1987e:	d91a      	bls.n	198b6 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19880:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   19884:	f8cd b010 	str.w	fp, [sp, #16]
   19888:	f8cd a00c 	str.w	sl, [sp, #12]
   1988c:	ab12      	add	r3, sp, #72	; 0x48
   1988e:	9302      	str	r3, [sp, #8]
   19890:	f8cd 9004 	str.w	r9, [sp, #4]
   19894:	f8cd 8000 	str.w	r8, [sp]
   19898:	9b07      	ldr	r3, [sp, #28]
   1989a:	463a      	mov	r2, r7
   1989c:	4621      	mov	r1, r4
   1989e:	f8d6 c000 	ldr.w	ip, [r6]
   198a2:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   198a6:	f012 fbda 	bl	2c05e <gatt_foreach_iter>
   198aa:	2800      	cmp	r0, #0
   198ac:	d0e1      	beq.n	19872 <bt_gatt_foreach_attr_type+0x2a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   198ae:	3501      	adds	r5, #1
   198b0:	3401      	adds	r4, #1
   198b2:	b2a4      	uxth	r4, r4
   198b4:	e7e1      	b.n	1987a <bt_gatt_foreach_attr_type+0x32>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   198b6:	3608      	adds	r6, #8
   198b8:	4b10      	ldr	r3, [pc, #64]	; (198fc <bt_gatt_foreach_attr_type+0xb4>)
   198ba:	429e      	cmp	r6, r3
   198bc:	d80f      	bhi.n	198de <bt_gatt_foreach_attr_type+0x96>
   198be:	4b0f      	ldr	r3, [pc, #60]	; (198fc <bt_gatt_foreach_attr_type+0xb4>)
   198c0:	429e      	cmp	r6, r3
   198c2:	d2d6      	bcs.n	19872 <bt_gatt_foreach_attr_type+0x2a>
			if (handle + static_svc->attr_count < start_handle) {
   198c4:	6873      	ldr	r3, [r6, #4]
   198c6:	18e1      	adds	r1, r4, r3
   198c8:	42b9      	cmp	r1, r7
   198ca:	d2d5      	bcs.n	19878 <bt_gatt_foreach_attr_type+0x30>
				handle += static_svc->attr_count;
   198cc:	b28c      	uxth	r4, r1
				continue;
   198ce:	e7f2      	b.n	198b6 <bt_gatt_foreach_attr_type+0x6e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   198d0:	4e0b      	ldr	r6, [pc, #44]	; (19900 <bt_gatt_foreach_attr_type+0xb8>)
		uint16_t handle = 1;
   198d2:	2401      	movs	r4, #1
   198d4:	9713      	str	r7, [sp, #76]	; 0x4c
   198d6:	4657      	mov	r7, sl
   198d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   198dc:	e7ec      	b.n	198b8 <bt_gatt_foreach_attr_type+0x70>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   198de:	4c09      	ldr	r4, [pc, #36]	; (19904 <bt_gatt_foreach_attr_type+0xbc>)
   198e0:	f240 7229 	movw	r2, #1833	; 0x729
   198e4:	4621      	mov	r1, r4
   198e6:	4808      	ldr	r0, [pc, #32]	; (19908 <bt_gatt_foreach_attr_type+0xc0>)
   198e8:	f00f f991 	bl	28c0e <assert_print>
   198ec:	f240 7129 	movw	r1, #1833	; 0x729
   198f0:	4620      	mov	r0, r4
   198f2:	f00f f985 	bl	28c00 <assert_post_action>
   198f6:	bf00      	nop
   198f8:	200045e8 	.word	0x200045e8
   198fc:	0002fa00 	.word	0x0002fa00
   19900:	0002f9d8 	.word	0x0002f9d8
   19904:	00032218 	.word	0x00032218
   19908:	00030128 	.word	0x00030128

0001990c <db_hash_gen>:
{
   1990c:	b530      	push	{r4, r5, lr}
   1990e:	b0cd      	sub	sp, #308	; 0x134
   19910:	4604      	mov	r4, r0
	uint8_t key[16] = {};
   19912:	2300      	movs	r3, #0
   19914:	9348      	str	r3, [sp, #288]	; 0x120
   19916:	9349      	str	r3, [sp, #292]	; 0x124
   19918:	934a      	str	r3, [sp, #296]	; 0x128
   1991a:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1991c:	aa1c      	add	r2, sp, #112	; 0x70
   1991e:	a948      	add	r1, sp, #288	; 0x120
   19920:	a804      	add	r0, sp, #16
   19922:	f00f ffda 	bl	298da <tc_cmac_setup>
   19926:	b320      	cbz	r0, 19972 <db_hash_gen+0x66>
   19928:	ad04      	add	r5, sp, #16
   1992a:	9502      	str	r5, [sp, #8]
   1992c:	4b17      	ldr	r3, [pc, #92]	; (1998c <db_hash_gen+0x80>)
   1992e:	9301      	str	r3, [sp, #4]
   19930:	2200      	movs	r2, #0
   19932:	9200      	str	r2, [sp, #0]
   19934:	4613      	mov	r3, r2
   19936:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1993a:	2001      	movs	r0, #1
   1993c:	f7ff ff84 	bl	19848 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19940:	4629      	mov	r1, r5
   19942:	4813      	ldr	r0, [pc, #76]	; (19990 <db_hash_gen+0x84>)
   19944:	f010 f866 	bl	29a14 <tc_cmac_final>
   19948:	b1c0      	cbz	r0, 1997c <db_hash_gen+0x70>
	sys_mem_swap(db_hash.hash, sizeof(db_hash.hash));
   1994a:	2110      	movs	r1, #16
   1994c:	4810      	ldr	r0, [pc, #64]	; (19990 <db_hash_gen+0x84>)
   1994e:	f012 f9dc 	bl	2bd0a <sys_mem_swap>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   19952:	b9c4      	cbnz	r4, 19986 <db_hash_gen+0x7a>
   19954:	4b0f      	ldr	r3, [pc, #60]	; (19994 <db_hash_gen+0x88>)
   19956:	f3bf 8f5b 	dmb	ish
   1995a:	e853 1f00 	ldrex	r1, [r3]
   1995e:	f041 0104 	orr.w	r1, r1, #4
   19962:	e843 1200 	strex	r2, r1, [r3]
   19966:	2a00      	cmp	r2, #0
   19968:	d1f7      	bne.n	1995a <db_hash_gen+0x4e>
   1996a:	f3bf 8f5b 	dmb	ish
}
   1996e:	b04d      	add	sp, #308	; 0x134
   19970:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unable to setup AES CMAC");
   19972:	2145      	movs	r1, #69	; 0x45
   19974:	4808      	ldr	r0, [pc, #32]	; (19998 <db_hash_gen+0x8c>)
   19976:	f00f f96a 	bl	28c4e <z_log_minimal_printk>
		return;
   1997a:	e7f8      	b.n	1996e <db_hash_gen+0x62>
		BT_ERR("Unable to calculate hash");
   1997c:	2145      	movs	r1, #69	; 0x45
   1997e:	4807      	ldr	r0, [pc, #28]	; (1999c <db_hash_gen+0x90>)
   19980:	f00f f965 	bl	28c4e <z_log_minimal_printk>
		return;
   19984:	e7f3      	b.n	1996e <db_hash_gen+0x62>
		db_hash_store();
   19986:	f7ff f961 	bl	18c4c <db_hash_store>
   1998a:	e7e3      	b.n	19954 <db_hash_gen+0x48>
   1998c:	0002be4d 	.word	0x0002be4d
   19990:	20001c20 	.word	0x20001c20
   19994:	20001ce8 	.word	0x20001ce8
   19998:	00032338 	.word	0x00032338
   1999c:	00032358 	.word	0x00032358

000199a0 <db_hash_read>:
{
   199a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   199a4:	b084      	sub	sp, #16
   199a6:	4604      	mov	r4, r0
   199a8:	460d      	mov	r5, r1
   199aa:	4616      	mov	r6, r2
   199ac:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   199ae:	491f      	ldr	r1, [pc, #124]	; (19a2c <db_hash_read+0x8c>)
   199b0:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   199b4:	f009 fc24 	bl	23200 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   199b8:	f3bf 8f5b 	dmb	ish
   199bc:	4b1c      	ldr	r3, [pc, #112]	; (19a30 <db_hash_read+0x90>)
   199be:	681b      	ldr	r3, [r3, #0]
   199c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   199c4:	f013 0f04 	tst.w	r3, #4
   199c8:	d017      	beq.n	199fa <db_hash_read+0x5a>
	cfg = find_cf_cfg(conn);
   199ca:	4620      	mov	r0, r4
   199cc:	f7ff f952 	bl	18c74 <find_cf_cfg>
	if (cfg &&
   199d0:	b118      	cbz	r0, 199da <db_hash_read+0x3a>
	    CF_ROBUST_CACHING(cfg) &&
   199d2:	7a02      	ldrb	r2, [r0, #8]
	if (cfg &&
   199d4:	f012 0f01 	tst.w	r2, #1
   199d8:	d113      	bne.n	19a02 <db_hash_read+0x62>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   199da:	2310      	movs	r3, #16
   199dc:	9302      	str	r3, [sp, #8]
   199de:	4b15      	ldr	r3, [pc, #84]	; (19a34 <db_hash_read+0x94>)
   199e0:	9301      	str	r3, [sp, #4]
   199e2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   199e6:	9300      	str	r3, [sp, #0]
   199e8:	463b      	mov	r3, r7
   199ea:	4632      	mov	r2, r6
   199ec:	4629      	mov	r1, r5
   199ee:	4620      	mov	r0, r4
   199f0:	f012 fb8b 	bl	2c10a <bt_gatt_attr_read>
}
   199f4:	b004      	add	sp, #16
   199f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		db_hash_gen(true);
   199fa:	2001      	movs	r0, #1
   199fc:	f7ff ff86 	bl	1990c <db_hash_gen>
   19a00:	e7e3      	b.n	199ca <db_hash_read+0x2a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   19a02:	f100 080c 	add.w	r8, r0, #12
   19a06:	2100      	movs	r1, #0
   19a08:	4640      	mov	r0, r8
   19a0a:	f012 faae 	bl	2bf6a <atomic_test_bit>
	    CF_ROBUST_CACHING(cfg) &&
   19a0e:	2800      	cmp	r0, #0
   19a10:	d1e3      	bne.n	199da <db_hash_read+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19a12:	f3bf 8f5b 	dmb	ish
   19a16:	e858 3f00 	ldrex	r3, [r8]
   19a1a:	f043 0302 	orr.w	r3, r3, #2
   19a1e:	e848 3200 	strex	r2, r3, [r8]
   19a22:	2a00      	cmp	r2, #0
   19a24:	d1f7      	bne.n	19a16 <db_hash_read+0x76>
   19a26:	f3bf 8f5b 	dmb	ish
}
   19a2a:	e7d6      	b.n	199da <db_hash_read+0x3a>
   19a2c:	20001c70 	.word	0x20001c70
   19a30:	20001ce8 	.word	0x20001ce8
   19a34:	20001c20 	.word	0x20001c20

00019a38 <db_hash_process>:
{
   19a38:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19a3a:	4b20      	ldr	r3, [pc, #128]	; (19abc <db_hash_process+0x84>)
   19a3c:	f3bf 8f5b 	dmb	ish
   19a40:	e853 2f00 	ldrex	r2, [r3]
   19a44:	f022 0108 	bic.w	r1, r2, #8
   19a48:	e843 1000 	strex	r0, r1, [r3]
   19a4c:	2800      	cmp	r0, #0
   19a4e:	d1f7      	bne.n	19a40 <db_hash_process+0x8>
   19a50:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   19a54:	f012 0f08 	tst.w	r2, #8
   19a58:	d02b      	beq.n	19ab2 <db_hash_process+0x7a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19a5a:	f3bf 8f5b 	dmb	ish
   19a5e:	681b      	ldr	r3, [r3, #0]
   19a60:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   19a64:	f013 0f04 	tst.w	r3, #4
   19a68:	d017      	beq.n	19a9a <db_hash_process+0x62>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   19a6a:	4915      	ldr	r1, [pc, #84]	; (19ac0 <db_hash_process+0x88>)
   19a6c:	2210      	movs	r2, #16
   19a6e:	1888      	adds	r0, r1, r2
   19a70:	f010 f967 	bl	29d42 <memcmp>
   19a74:	b9a8      	cbnz	r0, 19aa2 <db_hash_process+0x6a>
			k_work_cancel_delayable(&gatt_sc.work);
   19a76:	4c13      	ldr	r4, [pc, #76]	; (19ac4 <db_hash_process+0x8c>)
   19a78:	4620      	mov	r0, r4
   19a7a:	f009 fb77 	bl	2316c <k_work_cancel_delayable>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19a7e:	3430      	adds	r4, #48	; 0x30
   19a80:	f3bf 8f5b 	dmb	ish
   19a84:	e854 3f00 	ldrex	r3, [r4]
   19a88:	f023 0301 	bic.w	r3, r3, #1
   19a8c:	e844 3200 	strex	r2, r3, [r4]
   19a90:	2a00      	cmp	r2, #0
   19a92:	d1f7      	bne.n	19a84 <db_hash_process+0x4c>
   19a94:	f3bf 8f5b 	dmb	ish
}
   19a98:	bd10      	pop	{r4, pc}
			db_hash_gen(false);
   19a9a:	2000      	movs	r0, #0
   19a9c:	f7ff ff36 	bl	1990c <db_hash_gen>
   19aa0:	e7e3      	b.n	19a6a <db_hash_process+0x32>
		sc_indicate(0x0001, 0xffff);
   19aa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19aa6:	2001      	movs	r0, #1
   19aa8:	f7ff fb78 	bl	1919c <sc_indicate>
		db_hash_store();
   19aac:	f7ff f8ce 	bl	18c4c <db_hash_store>
		return;
   19ab0:	e7f2      	b.n	19a98 <db_hash_process+0x60>
	db_hash_gen(true);
   19ab2:	2001      	movs	r0, #1
   19ab4:	f7ff ff2a 	bl	1990c <db_hash_gen>
   19ab8:	e7ee      	b.n	19a98 <db_hash_process+0x60>
   19aba:	bf00      	nop
   19abc:	20001ce8 	.word	0x20001ce8
   19ac0:	20001c20 	.word	0x20001c20
   19ac4:	20001cb8 	.word	0x20001cb8

00019ac8 <ccc_set>:
{
   19ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19acc:	b0bc      	sub	sp, #240	; 0xf0
   19ace:	4604      	mov	r4, r0
   19ad0:	460d      	mov	r5, r1
   19ad2:	4690      	mov	r8, r2
   19ad4:	461f      	mov	r7, r3
		settings_name_next(name, &next);
   19ad6:	a905      	add	r1, sp, #20
   19ad8:	f00f fc9a 	bl	29410 <settings_name_next>
		if (!name) {
   19adc:	b154      	cbz	r4, 19af4 <ccc_set+0x2c>
		} else if (!next) {
   19ade:	9805      	ldr	r0, [sp, #20]
   19ae0:	b178      	cbz	r0, 19b02 <ccc_set+0x3a>
			unsigned long next_id = strtoul(next, NULL, 10);
   19ae2:	220a      	movs	r2, #10
   19ae4:	2100      	movs	r1, #0
   19ae6:	f010 f84e 	bl	29b86 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   19aea:	4602      	mov	r2, r0
   19aec:	bb08      	cbnz	r0, 19b32 <ccc_set+0x6a>
			load.addr_with_id.id = (uint8_t)next_id;
   19aee:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   19af2:	e009      	b.n	19b08 <ccc_set+0x40>
			BT_ERR("Insufficient number of arguments");
   19af4:	2145      	movs	r1, #69	; 0x45
   19af6:	4825      	ldr	r0, [pc, #148]	; (19b8c <ccc_set+0xc4>)
   19af8:	f00f f8a9 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   19afc:	f06f 0615 	mvn.w	r6, #21
   19b00:	e040      	b.n	19b84 <ccc_set+0xbc>
			load.addr_with_id.id = BT_ID_DEFAULT;
   19b02:	2300      	movs	r3, #0
   19b04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		err = bt_settings_decode_key(name, &addr);
   19b08:	a906      	add	r1, sp, #24
   19b0a:	4620      	mov	r0, r4
   19b0c:	f010 f9f1 	bl	29ef2 <bt_settings_decode_key>
		if (err) {
   19b10:	4606      	mov	r6, r0
   19b12:	b9a8      	cbnz	r0, 19b40 <ccc_set+0x78>
		load.addr_with_id.addr = &addr;
   19b14:	ab06      	add	r3, sp, #24
   19b16:	9308      	str	r3, [sp, #32]
		if (len_rd) {
   19b18:	b32d      	cbz	r5, 19b66 <ccc_set+0x9e>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   19b1a:	22c0      	movs	r2, #192	; 0xc0
   19b1c:	a90c      	add	r1, sp, #48	; 0x30
   19b1e:	4638      	mov	r0, r7
   19b20:	47c0      	blx	r8
			if (len < 0) {
   19b22:	1e04      	subs	r4, r0, #0
   19b24:	db14      	blt.n	19b50 <ccc_set+0x88>
			load.entry = ccc_store;
   19b26:	ab0c      	add	r3, sp, #48	; 0x30
   19b28:	930a      	str	r3, [sp, #40]	; 0x28
			load.count = len / sizeof(*ccc_store);
   19b2a:	08a4      	lsrs	r4, r4, #2
   19b2c:	940b      	str	r4, [sp, #44]	; 0x2c
			for (size_t i = 0; i < load.count; i++) {
   19b2e:	2300      	movs	r3, #0
   19b30:	e016      	b.n	19b60 <ccc_set+0x98>
				BT_ERR("Invalid local identity %lu", next_id);
   19b32:	2145      	movs	r1, #69	; 0x45
   19b34:	4816      	ldr	r0, [pc, #88]	; (19b90 <ccc_set+0xc8>)
   19b36:	f00f f88a 	bl	28c4e <z_log_minimal_printk>
				return -EINVAL;
   19b3a:	f06f 0615 	mvn.w	r6, #21
   19b3e:	e021      	b.n	19b84 <ccc_set+0xbc>
			BT_ERR("Unable to decode address %s", name);
   19b40:	4622      	mov	r2, r4
   19b42:	2145      	movs	r1, #69	; 0x45
   19b44:	4813      	ldr	r0, [pc, #76]	; (19b94 <ccc_set+0xcc>)
   19b46:	f00f f882 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   19b4a:	f06f 0615 	mvn.w	r6, #21
   19b4e:	e019      	b.n	19b84 <ccc_set+0xbc>
				BT_ERR("Failed to decode value (err %zd)", len);
   19b50:	4622      	mov	r2, r4
   19b52:	2145      	movs	r1, #69	; 0x45
   19b54:	4810      	ldr	r0, [pc, #64]	; (19b98 <ccc_set+0xd0>)
   19b56:	f00f f87a 	bl	28c4e <z_log_minimal_printk>
				return len;
   19b5a:	4626      	mov	r6, r4
   19b5c:	e012      	b.n	19b84 <ccc_set+0xbc>
			for (size_t i = 0; i < load.count; i++) {
   19b5e:	3301      	adds	r3, #1
   19b60:	429c      	cmp	r4, r3
   19b62:	d8fc      	bhi.n	19b5e <ccc_set+0x96>
   19b64:	e002      	b.n	19b6c <ccc_set+0xa4>
			load.entry = NULL;
   19b66:	2300      	movs	r3, #0
   19b68:	930a      	str	r3, [sp, #40]	; 0x28
			load.count = 0;
   19b6a:	930b      	str	r3, [sp, #44]	; 0x2c
   19b6c:	ab08      	add	r3, sp, #32
   19b6e:	9302      	str	r3, [sp, #8]
   19b70:	4b0a      	ldr	r3, [pc, #40]	; (19b9c <ccc_set+0xd4>)
   19b72:	9301      	str	r3, [sp, #4]
   19b74:	2200      	movs	r2, #0
   19b76:	9200      	str	r2, [sp, #0]
   19b78:	4613      	mov	r3, r2
   19b7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19b7e:	2001      	movs	r0, #1
   19b80:	f7ff fe62 	bl	19848 <bt_gatt_foreach_attr_type>
}
   19b84:	4630      	mov	r0, r6
   19b86:	b03c      	add	sp, #240	; 0xf0
   19b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19b8c:	00030c90 	.word	0x00030c90
   19b90:	0003228c 	.word	0x0003228c
   19b94:	00032268 	.word	0x00032268
   19b98:	000320c8 	.word	0x000320c8
   19b9c:	00018e81 	.word	0x00018e81

00019ba0 <ccc_set_direct>:
{
   19ba0:	b570      	push	{r4, r5, r6, lr}
   19ba2:	b082      	sub	sp, #8
   19ba4:	460c      	mov	r4, r1
   19ba6:	4615      	mov	r5, r2
   19ba8:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   19baa:	aa01      	add	r2, sp, #4
   19bac:	4909      	ldr	r1, [pc, #36]	; (19bd4 <ccc_set_direct+0x34>)
   19bae:	9806      	ldr	r0, [sp, #24]
   19bb0:	f00f fc04 	bl	293bc <settings_name_steq>
   19bb4:	b138      	cbz	r0, 19bc6 <ccc_set_direct+0x26>
		return ccc_set(name, len, read_cb, cb_arg);
   19bb6:	4633      	mov	r3, r6
   19bb8:	462a      	mov	r2, r5
   19bba:	4621      	mov	r1, r4
   19bbc:	9801      	ldr	r0, [sp, #4]
   19bbe:	f7ff ff83 	bl	19ac8 <ccc_set>
}
   19bc2:	b002      	add	sp, #8
   19bc4:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Invalid key");
   19bc6:	2145      	movs	r1, #69	; 0x45
   19bc8:	4803      	ldr	r0, [pc, #12]	; (19bd8 <ccc_set_direct+0x38>)
   19bca:	f00f f840 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   19bce:	f06f 0015 	mvn.w	r0, #21
   19bd2:	e7f6      	b.n	19bc2 <ccc_set_direct+0x22>
   19bd4:	00032378 	.word	0x00032378
   19bd8:	00032380 	.word	0x00032380

00019bdc <gatt_find_by_uuid>:
{
   19bdc:	b510      	push	{r4, lr}
   19bde:	b084      	sub	sp, #16
   19be0:	4604      	mov	r4, r0
   19be2:	460a      	mov	r2, r1
	found->attr = NULL;
   19be4:	2300      	movs	r3, #0
   19be6:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19be8:	9002      	str	r0, [sp, #8]
   19bea:	4907      	ldr	r1, [pc, #28]	; (19c08 <gatt_find_by_uuid+0x2c>)
   19bec:	9101      	str	r1, [sp, #4]
   19bee:	2101      	movs	r1, #1
   19bf0:	9100      	str	r1, [sp, #0]
   19bf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19bf6:	8880      	ldrh	r0, [r0, #4]
   19bf8:	f7ff fe26 	bl	19848 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   19bfc:	6820      	ldr	r0, [r4, #0]
}
   19bfe:	3800      	subs	r0, #0
   19c00:	bf18      	it	ne
   19c02:	2001      	movne	r0, #1
   19c04:	b004      	add	sp, #16
   19c06:	bd10      	pop	{r4, pc}
   19c08:	0002be41 	.word	0x0002be41

00019c0c <bt_gatt_attr_next>:
{
   19c0c:	b510      	push	{r4, lr}
   19c0e:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
   19c10:	2400      	movs	r4, #0
   19c12:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   19c14:	f7ff fdd2 	bl	197bc <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   19c18:	3001      	adds	r0, #1
   19c1a:	b280      	uxth	r0, r0
   19c1c:	ab05      	add	r3, sp, #20
   19c1e:	9302      	str	r3, [sp, #8]
   19c20:	4b05      	ldr	r3, [pc, #20]	; (19c38 <bt_gatt_attr_next+0x2c>)
   19c22:	9301      	str	r3, [sp, #4]
   19c24:	9400      	str	r4, [sp, #0]
   19c26:	4623      	mov	r3, r4
   19c28:	4622      	mov	r2, r4
   19c2a:	4601      	mov	r1, r0
   19c2c:	f7ff fe0c 	bl	19848 <bt_gatt_foreach_attr_type>
}
   19c30:	9805      	ldr	r0, [sp, #20]
   19c32:	b006      	add	sp, #24
   19c34:	bd10      	pop	{r4, pc}
   19c36:	bf00      	nop
   19c38:	0002bde9 	.word	0x0002bde9

00019c3c <bt_gatt_is_subscribed>:
{
   19c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c3e:	b089      	sub	sp, #36	; 0x24
	__ASSERT(conn, "invalid parameter\n");
   19c40:	b148      	cbz	r0, 19c56 <bt_gatt_is_subscribed+0x1a>
   19c42:	460c      	mov	r4, r1
   19c44:	4615      	mov	r5, r2
   19c46:	4606      	mov	r6, r0
	__ASSERT(attr, "invalid parameter\n");
   19c48:	b189      	cbz	r1, 19c6e <bt_gatt_is_subscribed+0x32>
	if (conn->state != BT_CONN_CONNECTED) {
   19c4a:	7b43      	ldrb	r3, [r0, #13]
   19c4c:	2b07      	cmp	r3, #7
   19c4e:	d01a      	beq.n	19c86 <bt_gatt_is_subscribed+0x4a>
		return false;
   19c50:	2000      	movs	r0, #0
}
   19c52:	b009      	add	sp, #36	; 0x24
   19c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT(conn, "invalid parameter\n");
   19c56:	4c5d      	ldr	r4, [pc, #372]	; (19dcc <bt_gatt_is_subscribed+0x190>)
   19c58:	f640 424b 	movw	r2, #3147	; 0xc4b
   19c5c:	4621      	mov	r1, r4
   19c5e:	485c      	ldr	r0, [pc, #368]	; (19dd0 <bt_gatt_is_subscribed+0x194>)
   19c60:	f00e ffd5 	bl	28c0e <assert_print>
   19c64:	f640 414b 	movw	r1, #3147	; 0xc4b
   19c68:	4620      	mov	r0, r4
   19c6a:	f00e ffc9 	bl	28c00 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   19c6e:	4c57      	ldr	r4, [pc, #348]	; (19dcc <bt_gatt_is_subscribed+0x190>)
   19c70:	f640 424c 	movw	r2, #3148	; 0xc4c
   19c74:	4621      	mov	r1, r4
   19c76:	4856      	ldr	r0, [pc, #344]	; (19dd0 <bt_gatt_is_subscribed+0x194>)
   19c78:	f00e ffc9 	bl	28c0e <assert_print>
   19c7c:	f640 414c 	movw	r1, #3148	; 0xc4c
   19c80:	4620      	mov	r0, r4
   19c82:	f00e ffbd 	bl	28c00 <assert_post_action>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   19c86:	6808      	ldr	r0, [r1, #0]
   19c88:	2300      	movs	r3, #0
   19c8a:	f88d 3004 	strb.w	r3, [sp, #4]
   19c8e:	f642 0303 	movw	r3, #10243	; 0x2803
   19c92:	f8ad 3006 	strh.w	r3, [sp, #6]
   19c96:	a901      	add	r1, sp, #4
   19c98:	f010 f968 	bl	29f6c <bt_uuid_cmp>
   19c9c:	b950      	cbnz	r0, 19cb4 <bt_gatt_is_subscribed+0x78>
		struct bt_gatt_chrc *chrc = attr->user_data;
   19c9e:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   19ca0:	799b      	ldrb	r3, [r3, #6]
   19ca2:	f013 0f30 	tst.w	r3, #48	; 0x30
   19ca6:	d0d4      	beq.n	19c52 <bt_gatt_is_subscribed+0x16>
		attr = bt_gatt_attr_next(attr);
   19ca8:	4620      	mov	r0, r4
   19caa:	f7ff ffaf 	bl	19c0c <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   19cae:	4604      	mov	r4, r0
   19cb0:	2800      	cmp	r0, #0
   19cb2:	d045      	beq.n	19d40 <bt_gatt_is_subscribed+0x104>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   19cb4:	6820      	ldr	r0, [r4, #0]
   19cb6:	2300      	movs	r3, #0
   19cb8:	f88d 3008 	strb.w	r3, [sp, #8]
   19cbc:	f642 1302 	movw	r3, #10498	; 0x2902
   19cc0:	f8ad 300a 	strh.w	r3, [sp, #10]
   19cc4:	a902      	add	r1, sp, #8
   19cc6:	f010 f951 	bl	29f6c <bt_uuid_cmp>
   19cca:	2800      	cmp	r0, #0
   19ccc:	d144      	bne.n	19d58 <bt_gatt_is_subscribed+0x11c>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   19cce:	6820      	ldr	r0, [r4, #0]
   19cd0:	2300      	movs	r3, #0
   19cd2:	f88d 300c 	strb.w	r3, [sp, #12]
   19cd6:	f642 1302 	movw	r3, #10498	; 0x2902
   19cda:	f8ad 300e 	strh.w	r3, [sp, #14]
   19cde:	a903      	add	r1, sp, #12
   19ce0:	f010 f944 	bl	29f6c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19ce4:	2800      	cmp	r0, #0
   19ce6:	d049      	beq.n	19d7c <bt_gatt_is_subscribed+0x140>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   19ce8:	6820      	ldr	r0, [r4, #0]
   19cea:	2300      	movs	r3, #0
   19cec:	f88d 3010 	strb.w	r3, [sp, #16]
   19cf0:	f642 0303 	movw	r3, #10243	; 0x2803
   19cf4:	f8ad 3012 	strh.w	r3, [sp, #18]
   19cf8:	a904      	add	r1, sp, #16
   19cfa:	f010 f937 	bl	29f6c <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   19cfe:	2800      	cmp	r0, #0
   19d00:	d03c      	beq.n	19d7c <bt_gatt_is_subscribed+0x140>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19d02:	6820      	ldr	r0, [r4, #0]
   19d04:	2300      	movs	r3, #0
   19d06:	f88d 3014 	strb.w	r3, [sp, #20]
   19d0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19d0e:	f8ad 3016 	strh.w	r3, [sp, #22]
   19d12:	a905      	add	r1, sp, #20
   19d14:	f010 f92a 	bl	29f6c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   19d18:	b380      	cbz	r0, 19d7c <bt_gatt_is_subscribed+0x140>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19d1a:	6820      	ldr	r0, [r4, #0]
   19d1c:	2300      	movs	r3, #0
   19d1e:	f88d 3018 	strb.w	r3, [sp, #24]
   19d22:	f642 0301 	movw	r3, #10241	; 0x2801
   19d26:	f8ad 301a 	strh.w	r3, [sp, #26]
   19d2a:	a906      	add	r1, sp, #24
   19d2c:	f010 f91e 	bl	29f6c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19d30:	b320      	cbz	r0, 19d7c <bt_gatt_is_subscribed+0x140>
		attr = bt_gatt_attr_next(attr);
   19d32:	4620      	mov	r0, r4
   19d34:	f7ff ff6a 	bl	19c0c <bt_gatt_attr_next>
		if (!attr) {
   19d38:	4604      	mov	r4, r0
   19d3a:	2800      	cmp	r0, #0
   19d3c:	d1c7      	bne.n	19cce <bt_gatt_is_subscribed+0x92>
   19d3e:	e788      	b.n	19c52 <bt_gatt_is_subscribed+0x16>
		__ASSERT(attr, "No more attributes\n");
   19d40:	4c22      	ldr	r4, [pc, #136]	; (19dcc <bt_gatt_is_subscribed+0x190>)
   19d42:	f640 425d 	movw	r2, #3165	; 0xc5d
   19d46:	4621      	mov	r1, r4
   19d48:	4821      	ldr	r0, [pc, #132]	; (19dd0 <bt_gatt_is_subscribed+0x194>)
   19d4a:	f00e ff60 	bl	28c0e <assert_print>
   19d4e:	f640 415d 	movw	r1, #3165	; 0xc5d
   19d52:	4620      	mov	r0, r4
   19d54:	f00e ff54 	bl	28c00 <assert_post_action>
		attr = bt_gatt_attr_next(attr);
   19d58:	4620      	mov	r0, r4
   19d5a:	f7ff ff57 	bl	19c0c <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   19d5e:	4604      	mov	r4, r0
   19d60:	2800      	cmp	r0, #0
   19d62:	d1b4      	bne.n	19cce <bt_gatt_is_subscribed+0x92>
   19d64:	4c19      	ldr	r4, [pc, #100]	; (19dcc <bt_gatt_is_subscribed+0x190>)
   19d66:	f640 4263 	movw	r2, #3171	; 0xc63
   19d6a:	4621      	mov	r1, r4
   19d6c:	4818      	ldr	r0, [pc, #96]	; (19dd0 <bt_gatt_is_subscribed+0x194>)
   19d6e:	f00e ff4e 	bl	28c0e <assert_print>
   19d72:	f640 4163 	movw	r1, #3171	; 0xc63
   19d76:	4620      	mov	r0, r4
   19d78:	f00e ff42 	bl	28c00 <assert_post_action>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   19d7c:	6820      	ldr	r0, [r4, #0]
   19d7e:	2300      	movs	r3, #0
   19d80:	f88d 301c 	strb.w	r3, [sp, #28]
   19d84:	f642 1302 	movw	r3, #10498	; 0x2902
   19d88:	f8ad 301e 	strh.w	r3, [sp, #30]
   19d8c:	a907      	add	r1, sp, #28
   19d8e:	f010 f8ed 	bl	29f6c <bt_uuid_cmp>
   19d92:	b920      	cbnz	r0, 19d9e <bt_gatt_is_subscribed+0x162>
	ccc = attr->user_data;
   19d94:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   19d96:	2400      	movs	r4, #0
   19d98:	b11c      	cbz	r4, 19da2 <bt_gatt_is_subscribed+0x166>
	return false;
   19d9a:	2000      	movs	r0, #0
   19d9c:	e759      	b.n	19c52 <bt_gatt_is_subscribed+0x16>
		return false;
   19d9e:	2000      	movs	r0, #0
   19da0:	e757      	b.n	19c52 <bt_gatt_is_subscribed+0x16>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   19da2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19da6:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   19daa:	3201      	adds	r2, #1
   19dac:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   19db0:	4630      	mov	r0, r6
   19db2:	f010 ffd4 	bl	2ad5e <bt_conn_is_peer_addr_le>
   19db6:	b138      	cbz	r0, 19dc8 <bt_gatt_is_subscribed+0x18c>
		    (ccc_type & ccc->cfg[i].value)) {
   19db8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19dbc:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   19dc0:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   19dc2:	422b      	tst	r3, r5
   19dc4:	f47f af45 	bne.w	19c52 <bt_gatt_is_subscribed+0x16>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   19dc8:	3401      	adds	r4, #1
   19dca:	e7e5      	b.n	19d98 <bt_gatt_is_subscribed+0x15c>
   19dcc:	00032218 	.word	0x00032218
   19dd0:	00030128 	.word	0x00030128

00019dd4 <gatt_indicate>:
{
   19dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19dd8:	b082      	sub	sp, #8
   19dda:	4605      	mov	r5, r0
   19ddc:	460f      	mov	r7, r1
   19dde:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19de0:	2294      	movs	r2, #148	; 0x94
   19de2:	6861      	ldr	r1, [r4, #4]
   19de4:	f012 faa4 	bl	2c330 <bt_gatt_check_perm>
   19de8:	2800      	cmp	r0, #0
   19dea:	d13c      	bne.n	19e66 <gatt_indicate+0x92>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   19dec:	2202      	movs	r2, #2
   19dee:	6861      	ldr	r1, [r4, #4]
   19df0:	4628      	mov	r0, r5
   19df2:	f7ff ff23 	bl	19c3c <bt_gatt_is_subscribed>
   19df6:	2800      	cmp	r0, #0
   19df8:	d03c      	beq.n	19e74 <gatt_indicate+0xa0>
	len = sizeof(*ind) + params->len;
   19dfa:	8aa6      	ldrh	r6, [r4, #20]
   19dfc:	3602      	adds	r6, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   19dfe:	9600      	str	r6, [sp, #0]
   19e00:	231d      	movs	r3, #29
   19e02:	2200      	movs	r2, #0
   19e04:	4621      	mov	r1, r4
   19e06:	4827      	ldr	r0, [pc, #156]	; (19ea4 <gatt_indicate+0xd0>)
   19e08:	f012 f954 	bl	2c0b4 <gatt_req_alloc>
	if (!req) {
   19e0c:	4681      	mov	r9, r0
   19e0e:	2800      	cmp	r0, #0
   19e10:	d045      	beq.n	19e9e <gatt_indicate+0xca>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   19e12:	4632      	mov	r2, r6
   19e14:	211d      	movs	r1, #29
   19e16:	4628      	mov	r0, r5
   19e18:	f7fe fb62 	bl	184e0 <bt_att_create_pdu>
	if (!buf) {
   19e1c:	4680      	mov	r8, r0
   19e1e:	b380      	cbz	r0, 19e82 <gatt_indicate+0xae>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   19e20:	2301      	movs	r3, #1
   19e22:	2200      	movs	r2, #0
   19e24:	4611      	mov	r1, r2
   19e26:	f011 ff69 	bl	2bcfc <bt_att_set_tx_meta_data>
   19e2a:	f108 0a08 	add.w	sl, r8, #8
   19e2e:	2102      	movs	r1, #2
   19e30:	4650      	mov	r0, sl
   19e32:	f002 ffbd 	bl	1cdb0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   19e36:	4606      	mov	r6, r0
   19e38:	f826 7b02 	strh.w	r7, [r6], #2
   19e3c:	8aa1      	ldrh	r1, [r4, #20]
   19e3e:	4650      	mov	r0, sl
   19e40:	f002 ffb6 	bl	1cdb0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   19e44:	8aa2      	ldrh	r2, [r4, #20]
   19e46:	6921      	ldr	r1, [r4, #16]
   19e48:	4630      	mov	r0, r6
   19e4a:	f00f ff9f 	bl	29d8c <memcpy>
	req->buf = buf;
   19e4e:	f8c9 8008 	str.w	r8, [r9, #8]
	err = bt_att_req_send(conn, req);
   19e52:	4649      	mov	r1, r9
   19e54:	4628      	mov	r0, r5
   19e56:	f7fe fe9f 	bl	18b98 <bt_att_req_send>
	if (err) {
   19e5a:	4604      	mov	r4, r0
   19e5c:	b9d8      	cbnz	r0, 19e96 <gatt_indicate+0xc2>
}
   19e5e:	4620      	mov	r0, r4
   19e60:	b002      	add	sp, #8
   19e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("Link is not encrypted");
   19e66:	2157      	movs	r1, #87	; 0x57
   19e68:	480f      	ldr	r0, [pc, #60]	; (19ea8 <gatt_indicate+0xd4>)
   19e6a:	f00e fef0 	bl	28c4e <z_log_minimal_printk>
		return -EPERM;
   19e6e:	f04f 34ff 	mov.w	r4, #4294967295
   19e72:	e7f4      	b.n	19e5e <gatt_indicate+0x8a>
			BT_WARN("Device is not subscribed to characteristic");
   19e74:	2157      	movs	r1, #87	; 0x57
   19e76:	480d      	ldr	r0, [pc, #52]	; (19eac <gatt_indicate+0xd8>)
   19e78:	f00e fee9 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   19e7c:	f06f 0415 	mvn.w	r4, #21
   19e80:	e7ed      	b.n	19e5e <gatt_indicate+0x8a>
		BT_WARN("No buffer available to send indication");
   19e82:	2157      	movs	r1, #87	; 0x57
   19e84:	480a      	ldr	r0, [pc, #40]	; (19eb0 <gatt_indicate+0xdc>)
   19e86:	f00e fee2 	bl	28c4e <z_log_minimal_printk>
		bt_att_req_free(req);
   19e8a:	4648      	mov	r0, r9
   19e8c:	f7fe fdb6 	bl	189fc <bt_att_req_free>
		return -ENOMEM;
   19e90:	f06f 040b 	mvn.w	r4, #11
   19e94:	e7e3      	b.n	19e5e <gatt_indicate+0x8a>
		bt_att_req_free(req);
   19e96:	4648      	mov	r0, r9
   19e98:	f7fe fdb0 	bl	189fc <bt_att_req_free>
   19e9c:	e7df      	b.n	19e5e <gatt_indicate+0x8a>
		return -ENOMEM;
   19e9e:	f06f 040b 	mvn.w	r4, #11
   19ea2:	e7dc      	b.n	19e5e <gatt_indicate+0x8a>
   19ea4:	0002be1f 	.word	0x0002be1f
   19ea8:	00032398 	.word	0x00032398
   19eac:	000323b4 	.word	0x000323b4
   19eb0:	000323e4 	.word	0x000323e4

00019eb4 <bt_gatt_indicate>:
{
   19eb4:	b530      	push	{r4, r5, lr}
   19eb6:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
   19eb8:	2900      	cmp	r1, #0
   19eba:	d043      	beq.n	19f44 <bt_gatt_indicate+0x90>
   19ebc:	4605      	mov	r5, r0
   19ebe:	460c      	mov	r4, r1
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   19ec0:	684b      	ldr	r3, [r1, #4]
   19ec2:	2b00      	cmp	r3, #0
   19ec4:	d04a      	beq.n	19f5c <bt_gatt_indicate+0xa8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19ec6:	f3bf 8f5b 	dmb	ish
   19eca:	4b43      	ldr	r3, [pc, #268]	; (19fd8 <bt_gatt_indicate+0x124>)
   19ecc:	681b      	ldr	r3, [r3, #0]
   19ece:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19ed2:	f013 0f04 	tst.w	r3, #4
   19ed6:	d076      	beq.n	19fc6 <bt_gatt_indicate+0x112>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   19ed8:	b115      	cbz	r5, 19ee0 <bt_gatt_indicate+0x2c>
   19eda:	7b6b      	ldrb	r3, [r5, #13]
   19edc:	2b07      	cmp	r3, #7
   19ede:	d175      	bne.n	19fcc <bt_gatt_indicate+0x118>
	data.attr = params->attr;
   19ee0:	6860      	ldr	r0, [r4, #4]
   19ee2:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19ee4:	f7ff fc6a 	bl	197bc <bt_gatt_attr_get_handle>
   19ee8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   19eec:	6821      	ldr	r1, [r4, #0]
   19eee:	2900      	cmp	r1, #0
   19ef0:	d043      	beq.n	19f7a <bt_gatt_indicate+0xc6>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   19ef2:	a805      	add	r0, sp, #20
   19ef4:	f7ff fe72 	bl	19bdc <gatt_find_by_uuid>
   19ef8:	2800      	cmp	r0, #0
   19efa:	d06a      	beq.n	19fd2 <bt_gatt_indicate+0x11e>
		params->attr = data.attr;
   19efc:	9b05      	ldr	r3, [sp, #20]
   19efe:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   19f00:	9b05      	ldr	r3, [sp, #20]
   19f02:	6818      	ldr	r0, [r3, #0]
   19f04:	2300      	movs	r3, #0
   19f06:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   19f0a:	f642 0303 	movw	r3, #10243	; 0x2803
   19f0e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   19f12:	a90b      	add	r1, sp, #44	; 0x2c
   19f14:	f010 f82a 	bl	29f6c <bt_uuid_cmp>
   19f18:	b948      	cbnz	r0, 19f2e <bt_gatt_indicate+0x7a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   19f1a:	9805      	ldr	r0, [sp, #20]
   19f1c:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   19f1e:	799b      	ldrb	r3, [r3, #6]
   19f20:	f013 0f20 	tst.w	r3, #32
   19f24:	d02e      	beq.n	19f84 <bt_gatt_indicate+0xd0>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   19f26:	f012 f9b4 	bl	2c292 <bt_gatt_attr_value_handle>
   19f2a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   19f2e:	b365      	cbz	r5, 19f8a <bt_gatt_indicate+0xd6>
		params->_ref = 1;
   19f30:	2301      	movs	r3, #1
   19f32:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   19f34:	4622      	mov	r2, r4
   19f36:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   19f3a:	4628      	mov	r0, r5
   19f3c:	f7ff ff4a 	bl	19dd4 <gatt_indicate>
}
   19f40:	b00d      	add	sp, #52	; 0x34
   19f42:	bd30      	pop	{r4, r5, pc}
	__ASSERT(params, "invalid parameters\n");
   19f44:	4c25      	ldr	r4, [pc, #148]	; (19fdc <bt_gatt_indicate+0x128>)
   19f46:	f640 320b 	movw	r2, #2827	; 0xb0b
   19f4a:	4621      	mov	r1, r4
   19f4c:	4824      	ldr	r0, [pc, #144]	; (19fe0 <bt_gatt_indicate+0x12c>)
   19f4e:	f00e fe5e 	bl	28c0e <assert_print>
   19f52:	f640 310b 	movw	r1, #2827	; 0xb0b
   19f56:	4620      	mov	r0, r4
   19f58:	f00e fe52 	bl	28c00 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   19f5c:	680b      	ldr	r3, [r1, #0]
   19f5e:	2b00      	cmp	r3, #0
   19f60:	d1b1      	bne.n	19ec6 <bt_gatt_indicate+0x12>
   19f62:	4c1e      	ldr	r4, [pc, #120]	; (19fdc <bt_gatt_indicate+0x128>)
   19f64:	f640 320c 	movw	r2, #2828	; 0xb0c
   19f68:	4621      	mov	r1, r4
   19f6a:	481d      	ldr	r0, [pc, #116]	; (19fe0 <bt_gatt_indicate+0x12c>)
   19f6c:	f00e fe4f 	bl	28c0e <assert_print>
   19f70:	f640 310c 	movw	r1, #2828	; 0xb0c
   19f74:	4620      	mov	r0, r4
   19f76:	f00e fe43 	bl	28c00 <assert_post_action>
		if (!data.handle) {
   19f7a:	2800      	cmp	r0, #0
   19f7c:	d1c0      	bne.n	19f00 <bt_gatt_indicate+0x4c>
			return -ENOENT;
   19f7e:	f06f 0001 	mvn.w	r0, #1
   19f82:	e7dd      	b.n	19f40 <bt_gatt_indicate+0x8c>
			return -EINVAL;
   19f84:	f06f 0015 	mvn.w	r0, #21
   19f88:	e7da      	b.n	19f40 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   19f8a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   19f8e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   19f90:	2302      	movs	r3, #2
   19f92:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   19f96:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   19f98:	2300      	movs	r3, #0
   19f9a:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19f9c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   19fa0:	f642 1202 	movw	r2, #10498	; 0x2902
   19fa4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   19fa8:	aa05      	add	r2, sp, #20
   19faa:	9202      	str	r2, [sp, #8]
   19fac:	4a0d      	ldr	r2, [pc, #52]	; (19fe4 <bt_gatt_indicate+0x130>)
   19fae:	9201      	str	r2, [sp, #4]
   19fb0:	2201      	movs	r2, #1
   19fb2:	9200      	str	r2, [sp, #0]
   19fb4:	aa0a      	add	r2, sp, #40	; 0x28
   19fb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19fba:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   19fbe:	f7ff fc43 	bl	19848 <bt_gatt_foreach_attr_type>
	return data.err;
   19fc2:	9807      	ldr	r0, [sp, #28]
   19fc4:	e7bc      	b.n	19f40 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   19fc6:	f06f 000a 	mvn.w	r0, #10
   19fca:	e7b9      	b.n	19f40 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   19fcc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19fd0:	e7b6      	b.n	19f40 <bt_gatt_indicate+0x8c>
			return -ENOENT;
   19fd2:	f06f 0001 	mvn.w	r0, #1
   19fd6:	e7b3      	b.n	19f40 <bt_gatt_indicate+0x8c>
   19fd8:	2000044c 	.word	0x2000044c
   19fdc:	00032218 	.word	0x00032218
   19fe0:	00030128 	.word	0x00030128
   19fe4:	0001a385 	.word	0x0001a385

00019fe8 <sc_process>:
{
   19fe8:	b530      	push	{r4, r5, lr}
   19fea:	b083      	sub	sp, #12
   19fec:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   19fee:	f100 0530 	add.w	r5, r0, #48	; 0x30
   19ff2:	2101      	movs	r1, #1
   19ff4:	4628      	mov	r0, r5
   19ff6:	f011 ffb8 	bl	2bf6a <atomic_test_bit>
   19ffa:	bb58      	cbnz	r0, 1a054 <sc_process+0x6c>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   19ffc:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1a000:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1a004:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   1a008:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a00c:	f3bf 8f5b 	dmb	ish
   1a010:	e855 3f00 	ldrex	r3, [r5]
   1a014:	f023 0301 	bic.w	r3, r3, #1
   1a018:	e845 3200 	strex	r2, r3, [r5]
   1a01c:	2a00      	cmp	r2, #0
   1a01e:	d1f7      	bne.n	1a010 <sc_process+0x28>
   1a020:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1a024:	2000      	movs	r0, #0
   1a026:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1a02a:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1a02e:	4b16      	ldr	r3, [pc, #88]	; (1a088 <sc_process+0xa0>)
   1a030:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1a034:	4b15      	ldr	r3, [pc, #84]	; (1a08c <sc_process+0xa4>)
   1a036:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1a03a:	ab01      	add	r3, sp, #4
   1a03c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1a040:	2304      	movs	r3, #4
   1a042:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1a046:	f1a4 0120 	sub.w	r1, r4, #32
   1a04a:	f7ff ff33 	bl	19eb4 <bt_gatt_indicate>
   1a04e:	b168      	cbz	r0, 1a06c <sc_process+0x84>
}
   1a050:	b003      	add	sp, #12
   1a052:	bd30      	pop	{r4, r5, pc}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1a054:	4c0e      	ldr	r4, [pc, #56]	; (1a090 <sc_process+0xa8>)
   1a056:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
   1a05a:	4621      	mov	r1, r4
   1a05c:	480d      	ldr	r0, [pc, #52]	; (1a094 <sc_process+0xac>)
   1a05e:	f00e fdd6 	bl	28c0e <assert_print>
   1a062:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   1a066:	4620      	mov	r0, r4
   1a068:	f00e fdca 	bl	28c00 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a06c:	f3bf 8f5b 	dmb	ish
   1a070:	e855 3f00 	ldrex	r3, [r5]
   1a074:	f043 0302 	orr.w	r3, r3, #2
   1a078:	e845 3200 	strex	r2, r3, [r5]
   1a07c:	2a00      	cmp	r2, #0
   1a07e:	d1f7      	bne.n	1a070 <sc_process+0x88>
   1a080:	f3bf 8f5b 	dmb	ish
   1a084:	e7e4      	b.n	1a050 <sc_process+0x68>
   1a086:	bf00      	nop
   1a088:	00032518 	.word	0x00032518
   1a08c:	00019209 	.word	0x00019209
   1a090:	00032218 	.word	0x00032218
   1a094:	00030128 	.word	0x00030128

0001a098 <sc_restore>:
{
   1a098:	b510      	push	{r4, lr}
   1a09a:	b082      	sub	sp, #8
   1a09c:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a09e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1a0a2:	7a00      	ldrb	r0, [r0, #8]
   1a0a4:	f7fe fe0c 	bl	18cc0 <find_sc_cfg>
	if (!cfg) {
   1a0a8:	b1f0      	cbz	r0, 1a0e8 <sc_restore+0x50>
   1a0aa:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1a0ac:	8902      	ldrh	r2, [r0, #8]
   1a0ae:	b90a      	cbnz	r2, 1a0b4 <sc_restore+0x1c>
   1a0b0:	8941      	ldrh	r1, [r0, #10]
   1a0b2:	b1c9      	cbz	r1, 1a0e8 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1a0b4:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1a0b8:	895b      	ldrh	r3, [r3, #10]
   1a0ba:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1a0be:	4620      	mov	r0, r4
   1a0c0:	f7fd f898 	bl	171f4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a0c4:	490c      	ldr	r1, [pc, #48]	; (1a0f8 <sc_restore+0x60>)
   1a0c6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1a0ca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1a0ce:	4a0b      	ldr	r2, [pc, #44]	; (1a0fc <sc_restore+0x64>)
   1a0d0:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1a0d2:	4a0b      	ldr	r2, [pc, #44]	; (1a100 <sc_restore+0x68>)
   1a0d4:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1a0d6:	aa01      	add	r2, sp, #4
   1a0d8:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1a0da:	2204      	movs	r2, #4
   1a0dc:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a0de:	4619      	mov	r1, r3
   1a0e0:	4620      	mov	r0, r4
   1a0e2:	f7ff fee7 	bl	19eb4 <bt_gatt_indicate>
   1a0e6:	b908      	cbnz	r0, 1a0ec <sc_restore+0x54>
}
   1a0e8:	b002      	add	sp, #8
   1a0ea:	bd10      	pop	{r4, pc}
		BT_ERR("SC restore indication failed");
   1a0ec:	2145      	movs	r1, #69	; 0x45
   1a0ee:	4805      	ldr	r0, [pc, #20]	; (1a104 <sc_restore+0x6c>)
   1a0f0:	f00e fdad 	bl	28c4e <z_log_minimal_printk>
   1a0f4:	e7f8      	b.n	1a0e8 <sc_restore+0x50>
   1a0f6:	bf00      	nop
   1a0f8:	20002ad8 	.word	0x20002ad8
   1a0fc:	00032518 	.word	0x00032518
   1a100:	0002bfd3 	.word	0x0002bfd3
   1a104:	00032410 	.word	0x00032410

0001a108 <update_ccc>:
{
   1a108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a10c:	4615      	mov	r5, r2
	struct bt_conn *conn = data->conn;
   1a10e:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a110:	6882      	ldr	r2, [r0, #8]
   1a112:	4b25      	ldr	r3, [pc, #148]	; (1a1a8 <update_ccc+0xa0>)
   1a114:	429a      	cmp	r2, r3
   1a116:	d002      	beq.n	1a11e <update_ccc+0x16>
}
   1a118:	2001      	movs	r0, #1
   1a11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a11e:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1a120:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a124:	2600      	movs	r6, #0
   1a126:	2e00      	cmp	r6, #0
   1a128:	d1f6      	bne.n	1a118 <update_ccc+0x10>
		if (!cfg->value ||
   1a12a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1a12e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   1a132:	891b      	ldrh	r3, [r3, #8]
   1a134:	b3ab      	cbz	r3, 1a1a2 <update_ccc+0x9a>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a136:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1a13a:	eb08 0243 	add.w	r2, r8, r3, lsl #1
   1a13e:	3201      	adds	r2, #1
   1a140:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   1a144:	4638      	mov	r0, r7
   1a146:	f010 fe0a 	bl	2ad5e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1a14a:	b350      	cbz	r0, 1a1a2 <update_ccc+0x9a>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1a14c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1a150:	4621      	mov	r1, r4
   1a152:	4638      	mov	r0, r7
   1a154:	f012 f8ec 	bl	2c330 <bt_gatt_check_perm>
		if (err) {
   1a158:	b150      	cbz	r0, 1a170 <update_ccc+0x68>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1a15a:	2803      	cmp	r0, #3
   1a15c:	d013      	beq.n	1a186 <update_ccc+0x7e>
			if (err == BT_ATT_ERR_AUTHENTICATION) {
   1a15e:	2805      	cmp	r0, #5
   1a160:	d017      	beq.n	1a192 <update_ccc+0x8a>
			sec = BT_SECURITY_L2;
   1a162:	f04f 0902 	mov.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   1a166:	4638      	mov	r0, r7
   1a168:	f010 fdde 	bl	2ad28 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a16c:	4581      	cmp	r9, r0
   1a16e:	d813      	bhi.n	1a198 <update_ccc+0x90>
		gatt_ccc_changed(attr, ccc);
   1a170:	4641      	mov	r1, r8
   1a172:	4620      	mov	r0, r4
   1a174:	f011 fe3b 	bl	2bdee <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1a178:	4b0c      	ldr	r3, [pc, #48]	; (1a1ac <update_ccc+0xa4>)
   1a17a:	4598      	cmp	r8, r3
   1a17c:	d1cc      	bne.n	1a118 <update_ccc+0x10>
			sc_restore(conn);
   1a17e:	4638      	mov	r0, r7
   1a180:	f7ff ff8a 	bl	1a098 <sc_restore>
   1a184:	e7c8      	b.n	1a118 <update_ccc+0x10>
				BT_WARN("CCC %p not writable", attr);
   1a186:	4622      	mov	r2, r4
   1a188:	2157      	movs	r1, #87	; 0x57
   1a18a:	4809      	ldr	r0, [pc, #36]	; (1a1b0 <update_ccc+0xa8>)
   1a18c:	f00e fd5f 	bl	28c4e <z_log_minimal_printk>
				continue;
   1a190:	e007      	b.n	1a1a2 <update_ccc+0x9a>
				sec = BT_SECURITY_L3;
   1a192:	f04f 0903 	mov.w	r9, #3
   1a196:	e7e6      	b.n	1a166 <update_ccc+0x5e>
				if (data->sec < sec) {
   1a198:	792b      	ldrb	r3, [r5, #4]
   1a19a:	4599      	cmp	r9, r3
   1a19c:	d901      	bls.n	1a1a2 <update_ccc+0x9a>
					data->sec = sec;
   1a19e:	f885 9004 	strb.w	r9, [r5, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a1a2:	3601      	adds	r6, #1
   1a1a4:	e7bf      	b.n	1a126 <update_ccc+0x1e>
   1a1a6:	bf00      	nop
   1a1a8:	00019351 	.word	0x00019351
   1a1ac:	2000075c 	.word	0x2000075c
   1a1b0:	00032434 	.word	0x00032434

0001a1b4 <gatt_notify>:
{
   1a1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a1b8:	4605      	mov	r5, r0
   1a1ba:	460f      	mov	r7, r1
   1a1bc:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a1be:	2294      	movs	r2, #148	; 0x94
   1a1c0:	6861      	ldr	r1, [r4, #4]
   1a1c2:	f012 f8b5 	bl	2c330 <bt_gatt_check_perm>
   1a1c6:	bb58      	cbnz	r0, 1a220 <gatt_notify+0x6c>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1a1c8:	2201      	movs	r2, #1
   1a1ca:	6861      	ldr	r1, [r4, #4]
   1a1cc:	4628      	mov	r0, r5
   1a1ce:	f7ff fd35 	bl	19c3c <bt_gatt_is_subscribed>
   1a1d2:	b360      	cbz	r0, 1a22e <gatt_notify+0x7a>
				sizeof(*nfy) + params->len);
   1a1d4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1a1d6:	3202      	adds	r2, #2
   1a1d8:	211b      	movs	r1, #27
   1a1da:	4628      	mov	r0, r5
   1a1dc:	f7fe f980 	bl	184e0 <bt_att_create_pdu>
	if (!buf) {
   1a1e0:	4680      	mov	r8, r0
   1a1e2:	b358      	cbz	r0, 1a23c <gatt_notify+0x88>
   1a1e4:	f100 0908 	add.w	r9, r0, #8
   1a1e8:	2102      	movs	r1, #2
   1a1ea:	4648      	mov	r0, r9
   1a1ec:	f002 fde0 	bl	1cdb0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1a1f0:	4606      	mov	r6, r0
   1a1f2:	f826 7b02 	strh.w	r7, [r6], #2
   1a1f6:	89a1      	ldrh	r1, [r4, #12]
   1a1f8:	4648      	mov	r0, r9
   1a1fa:	f002 fdd9 	bl	1cdb0 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1a1fe:	89a2      	ldrh	r2, [r4, #12]
   1a200:	68a1      	ldr	r1, [r4, #8]
   1a202:	4630      	mov	r0, r6
   1a204:	f00f fdc2 	bl	29d8c <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1a208:	2301      	movs	r3, #1
   1a20a:	6962      	ldr	r2, [r4, #20]
   1a20c:	6921      	ldr	r1, [r4, #16]
   1a20e:	4640      	mov	r0, r8
   1a210:	f011 fd74 	bl	2bcfc <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1a214:	4641      	mov	r1, r8
   1a216:	4628      	mov	r0, r5
   1a218:	f7fe fc88 	bl	18b2c <bt_att_send>
}
   1a21c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("Link is not encrypted");
   1a220:	2157      	movs	r1, #87	; 0x57
   1a222:	480a      	ldr	r0, [pc, #40]	; (1a24c <gatt_notify+0x98>)
   1a224:	f00e fd13 	bl	28c4e <z_log_minimal_printk>
		return -EPERM;
   1a228:	f04f 30ff 	mov.w	r0, #4294967295
   1a22c:	e7f6      	b.n	1a21c <gatt_notify+0x68>
			BT_WARN("Device is not subscribed to characteristic");
   1a22e:	2157      	movs	r1, #87	; 0x57
   1a230:	4807      	ldr	r0, [pc, #28]	; (1a250 <gatt_notify+0x9c>)
   1a232:	f00e fd0c 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   1a236:	f06f 0015 	mvn.w	r0, #21
   1a23a:	e7ef      	b.n	1a21c <gatt_notify+0x68>
		BT_WARN("No buffer available to send notification");
   1a23c:	2157      	movs	r1, #87	; 0x57
   1a23e:	4805      	ldr	r0, [pc, #20]	; (1a254 <gatt_notify+0xa0>)
   1a240:	f00e fd05 	bl	28c4e <z_log_minimal_printk>
		return -ENOMEM;
   1a244:	f06f 000b 	mvn.w	r0, #11
   1a248:	e7e8      	b.n	1a21c <gatt_notify+0x68>
   1a24a:	bf00      	nop
   1a24c:	00032398 	.word	0x00032398
   1a250:	000323b4 	.word	0x000323b4
   1a254:	00032450 	.word	0x00032450

0001a258 <bt_gatt_notify_cb>:
{
   1a258:	b530      	push	{r4, r5, lr}
   1a25a:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
   1a25c:	2900      	cmp	r1, #0
   1a25e:	d041      	beq.n	1a2e4 <bt_gatt_notify_cb+0x8c>
   1a260:	4604      	mov	r4, r0
   1a262:	460d      	mov	r5, r1
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a264:	684b      	ldr	r3, [r1, #4]
   1a266:	2b00      	cmp	r3, #0
   1a268:	d048      	beq.n	1a2fc <bt_gatt_notify_cb+0xa4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a26a:	f3bf 8f5b 	dmb	ish
   1a26e:	4b41      	ldr	r3, [pc, #260]	; (1a374 <bt_gatt_notify_cb+0x11c>)
   1a270:	681b      	ldr	r3, [r3, #0]
   1a272:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a276:	f013 0f04 	tst.w	r3, #4
   1a27a:	d072      	beq.n	1a362 <bt_gatt_notify_cb+0x10a>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a27c:	b114      	cbz	r4, 1a284 <bt_gatt_notify_cb+0x2c>
   1a27e:	7b63      	ldrb	r3, [r4, #13]
   1a280:	2b07      	cmp	r3, #7
   1a282:	d171      	bne.n	1a368 <bt_gatt_notify_cb+0x110>
	data.attr = params->attr;
   1a284:	6868      	ldr	r0, [r5, #4]
   1a286:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a288:	f7ff fa98 	bl	197bc <bt_gatt_attr_get_handle>
   1a28c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1a290:	6829      	ldr	r1, [r5, #0]
   1a292:	2900      	cmp	r1, #0
   1a294:	d041      	beq.n	1a31a <bt_gatt_notify_cb+0xc2>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a296:	a805      	add	r0, sp, #20
   1a298:	f7ff fca0 	bl	19bdc <gatt_find_by_uuid>
   1a29c:	2800      	cmp	r0, #0
   1a29e:	d066      	beq.n	1a36e <bt_gatt_notify_cb+0x116>
		params->attr = data.attr;
   1a2a0:	9b05      	ldr	r3, [sp, #20]
   1a2a2:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a2a4:	9b05      	ldr	r3, [sp, #20]
   1a2a6:	6818      	ldr	r0, [r3, #0]
   1a2a8:	2300      	movs	r3, #0
   1a2aa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1a2ae:	f642 0303 	movw	r3, #10243	; 0x2803
   1a2b2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1a2b6:	a90b      	add	r1, sp, #44	; 0x2c
   1a2b8:	f00f fe58 	bl	29f6c <bt_uuid_cmp>
   1a2bc:	b948      	cbnz	r0, 1a2d2 <bt_gatt_notify_cb+0x7a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a2be:	9805      	ldr	r0, [sp, #20]
   1a2c0:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1a2c2:	799b      	ldrb	r3, [r3, #6]
   1a2c4:	f013 0f10 	tst.w	r3, #16
   1a2c8:	d02c      	beq.n	1a324 <bt_gatt_notify_cb+0xcc>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a2ca:	f011 ffe2 	bl	2c292 <bt_gatt_attr_value_handle>
   1a2ce:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1a2d2:	b354      	cbz	r4, 1a32a <bt_gatt_notify_cb+0xd2>
		return gatt_notify(conn, data.handle, params);
   1a2d4:	462a      	mov	r2, r5
   1a2d6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1a2da:	4620      	mov	r0, r4
   1a2dc:	f7ff ff6a 	bl	1a1b4 <gatt_notify>
}
   1a2e0:	b00d      	add	sp, #52	; 0x34
   1a2e2:	bd30      	pop	{r4, r5, pc}
	__ASSERT(params, "invalid parameters\n");
   1a2e4:	4c24      	ldr	r4, [pc, #144]	; (1a378 <bt_gatt_notify_cb+0x120>)
   1a2e6:	f640 222b 	movw	r2, #2603	; 0xa2b
   1a2ea:	4621      	mov	r1, r4
   1a2ec:	4823      	ldr	r0, [pc, #140]	; (1a37c <bt_gatt_notify_cb+0x124>)
   1a2ee:	f00e fc8e 	bl	28c0e <assert_print>
   1a2f2:	f640 212b 	movw	r1, #2603	; 0xa2b
   1a2f6:	4620      	mov	r0, r4
   1a2f8:	f00e fc82 	bl	28c00 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a2fc:	680b      	ldr	r3, [r1, #0]
   1a2fe:	2b00      	cmp	r3, #0
   1a300:	d1b3      	bne.n	1a26a <bt_gatt_notify_cb+0x12>
   1a302:	4c1d      	ldr	r4, [pc, #116]	; (1a378 <bt_gatt_notify_cb+0x120>)
   1a304:	f640 222c 	movw	r2, #2604	; 0xa2c
   1a308:	4621      	mov	r1, r4
   1a30a:	481c      	ldr	r0, [pc, #112]	; (1a37c <bt_gatt_notify_cb+0x124>)
   1a30c:	f00e fc7f 	bl	28c0e <assert_print>
   1a310:	f640 212c 	movw	r1, #2604	; 0xa2c
   1a314:	4620      	mov	r0, r4
   1a316:	f00e fc73 	bl	28c00 <assert_post_action>
		if (!data.handle) {
   1a31a:	2800      	cmp	r0, #0
   1a31c:	d1c2      	bne.n	1a2a4 <bt_gatt_notify_cb+0x4c>
			return -ENOENT;
   1a31e:	f06f 0001 	mvn.w	r0, #1
   1a322:	e7dd      	b.n	1a2e0 <bt_gatt_notify_cb+0x88>
			return -EINVAL;
   1a324:	f06f 0015 	mvn.w	r0, #21
   1a328:	e7da      	b.n	1a2e0 <bt_gatt_notify_cb+0x88>
	data.err = -ENOTCONN;
   1a32a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1a32e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1a330:	2201      	movs	r2, #1
   1a332:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
   1a336:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a338:	2300      	movs	r3, #0
   1a33a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1a33e:	f642 1102 	movw	r1, #10498	; 0x2902
   1a342:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
   1a346:	a905      	add	r1, sp, #20
   1a348:	9102      	str	r1, [sp, #8]
   1a34a:	490d      	ldr	r1, [pc, #52]	; (1a380 <bt_gatt_notify_cb+0x128>)
   1a34c:	9101      	str	r1, [sp, #4]
   1a34e:	9200      	str	r2, [sp, #0]
   1a350:	aa0a      	add	r2, sp, #40	; 0x28
   1a352:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a356:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1a35a:	f7ff fa75 	bl	19848 <bt_gatt_foreach_attr_type>
	return data.err;
   1a35e:	9807      	ldr	r0, [sp, #28]
   1a360:	e7be      	b.n	1a2e0 <bt_gatt_notify_cb+0x88>
		return -EAGAIN;
   1a362:	f06f 000a 	mvn.w	r0, #10
   1a366:	e7bb      	b.n	1a2e0 <bt_gatt_notify_cb+0x88>
		return -ENOTCONN;
   1a368:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a36c:	e7b8      	b.n	1a2e0 <bt_gatt_notify_cb+0x88>
			return -ENOENT;
   1a36e:	f06f 0001 	mvn.w	r0, #1
   1a372:	e7b5      	b.n	1a2e0 <bt_gatt_notify_cb+0x88>
   1a374:	2000044c 	.word	0x2000044c
   1a378:	00032218 	.word	0x00032218
   1a37c:	00030128 	.word	0x00030128
   1a380:	0001a385 	.word	0x0001a385

0001a384 <notify_cb>:
{
   1a384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a388:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a38a:	6882      	ldr	r2, [r0, #8]
   1a38c:	4b56      	ldr	r3, [pc, #344]	; (1a4e8 <notify_cb+0x164>)
   1a38e:	429a      	cmp	r2, r3
   1a390:	d004      	beq.n	1a39c <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   1a392:	f04f 0901 	mov.w	r9, #1
}
   1a396:	4648      	mov	r0, r9
   1a398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a39c:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1a39e:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1a3a0:	4b52      	ldr	r3, [pc, #328]	; (1a4ec <notify_cb+0x168>)
   1a3a2:	429d      	cmp	r5, r3
   1a3a4:	d02d      	beq.n	1a402 <notify_cb+0x7e>
			err = 0;
   1a3a6:	2400      	movs	r4, #0
   1a3a8:	e063      	b.n	1a472 <notify_cb+0xee>
				sc = (struct sc_data *)data->ind_params->data;
   1a3aa:	6933      	ldr	r3, [r6, #16]
   1a3ac:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1a3ae:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1a3b2:	8853      	ldrh	r3, [r2, #2]
   1a3b4:	8812      	ldrh	r2, [r2, #0]
   1a3b6:	4641      	mov	r1, r8
   1a3b8:	f8df c134 	ldr.w	ip, [pc, #308]	; 1a4f0 <notify_cb+0x16c>
   1a3bc:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   1a3c0:	f7fe fdd2 	bl	18f68 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a3c4:	3401      	adds	r4, #1
   1a3c6:	2c01      	cmp	r4, #1
   1a3c8:	d8ed      	bhi.n	1a3a6 <notify_cb+0x22>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a3ca:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1a3ce:	4b48      	ldr	r3, [pc, #288]	; (1a4f0 <notify_cb+0x16c>)
   1a3d0:	eb03 0882 	add.w	r8, r3, r2, lsl #2
   1a3d4:	f108 0801 	add.w	r8, r8, #1
	return memcmp(a, b, sizeof(*a));
   1a3d8:	2207      	movs	r2, #7
   1a3da:	4946      	ldr	r1, [pc, #280]	; (1a4f4 <notify_cb+0x170>)
   1a3dc:	4640      	mov	r0, r8
   1a3de:	f00f fcb0 	bl	29d42 <memcmp>
   1a3e2:	2800      	cmp	r0, #0
   1a3e4:	d0ee      	beq.n	1a3c4 <notify_cb+0x40>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1a3e6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1a3ea:	2207      	movs	r2, #7
   1a3ec:	4641      	mov	r1, r8
   1a3ee:	4840      	ldr	r0, [pc, #256]	; (1a4f0 <notify_cb+0x16c>)
   1a3f0:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1a3f4:	f7fd f8ba 	bl	1756c <bt_conn_lookup_state_le>
			if (!conn) {
   1a3f8:	2800      	cmp	r0, #0
   1a3fa:	d0d6      	beq.n	1a3aa <notify_cb+0x26>
			bt_conn_unref(conn);
   1a3fc:	f7fc fe10 	bl	17020 <bt_conn_unref>
   1a400:	e7e0      	b.n	1a3c4 <notify_cb+0x40>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a402:	2400      	movs	r4, #0
   1a404:	e7df      	b.n	1a3c6 <notify_cb+0x42>
			bt_conn_unref(conn);
   1a406:	f7fc fe0b 	bl	17020 <bt_conn_unref>
			continue;
   1a40a:	e031      	b.n	1a470 <notify_cb+0xec>
			bt_conn_unref(conn);
   1a40c:	4640      	mov	r0, r8
   1a40e:	f7fc fe07 	bl	17020 <bt_conn_unref>
			continue;
   1a412:	e02d      	b.n	1a470 <notify_cb+0xec>
			BT_WARN("Link is not encrypted");
   1a414:	2157      	movs	r1, #87	; 0x57
   1a416:	4838      	ldr	r0, [pc, #224]	; (1a4f8 <notify_cb+0x174>)
   1a418:	f00e fc19 	bl	28c4e <z_log_minimal_printk>
			bt_conn_unref(conn);
   1a41c:	4640      	mov	r0, r8
   1a41e:	f7fc fdff 	bl	17020 <bt_conn_unref>
			continue;
   1a422:	e025      	b.n	1a470 <notify_cb+0xec>
		    (cfg->value & BT_GATT_CCC_INDICATE)) {
   1a424:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a428:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   1a42c:	8912      	ldrh	r2, [r2, #8]
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1a42e:	f012 0f02 	tst.w	r2, #2
   1a432:	d049      	beq.n	1a4c8 <notify_cb+0x144>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1a434:	6932      	ldr	r2, [r6, #16]
   1a436:	88b1      	ldrh	r1, [r6, #4]
   1a438:	4640      	mov	r0, r8
   1a43a:	f7ff fccb 	bl	19dd4 <gatt_indicate>
			if (err == 0) {
   1a43e:	4682      	mov	sl, r0
   1a440:	b970      	cbnz	r0, 1a460 <notify_cb+0xdc>
				data->ind_params->_ref++;
   1a442:	6932      	ldr	r2, [r6, #16]
   1a444:	7d93      	ldrb	r3, [r2, #22]
   1a446:	3301      	adds	r3, #1
   1a448:	7593      	strb	r3, [r2, #22]
   1a44a:	e009      	b.n	1a460 <notify_cb+0xdc>
			   (cfg->value & BT_GATT_CCC_NOTIFY)) {
   1a44c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a450:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1a454:	891b      	ldrh	r3, [r3, #8]
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1a456:	f013 0f01 	tst.w	r3, #1
   1a45a:	d13a      	bne.n	1a4d2 <notify_cb+0x14e>
			err = 0;
   1a45c:	f04f 0a00 	mov.w	sl, #0
		bt_conn_unref(conn);
   1a460:	4640      	mov	r0, r8
   1a462:	f7fc fddd 	bl	17020 <bt_conn_unref>
		if (err < 0) {
   1a466:	f1ba 0f00 	cmp.w	sl, #0
   1a46a:	db94      	blt.n	1a396 <notify_cb+0x12>
		data->err = 0;
   1a46c:	2300      	movs	r3, #0
   1a46e:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a470:	3401      	adds	r4, #1
   1a472:	2c00      	cmp	r4, #0
   1a474:	d134      	bne.n	1a4e0 <notify_cb+0x15c>
		if (cfg->value != data->type) {
   1a476:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a47a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1a47e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
   1a482:	89b3      	ldrh	r3, [r6, #12]
   1a484:	459c      	cmp	ip, r3
   1a486:	d1f3      	bne.n	1a470 <notify_cb+0xec>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a488:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a48c:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1a490:	3101      	adds	r1, #1
   1a492:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1a496:	f7fd f82f 	bl	174f8 <bt_conn_lookup_addr_le>
		if (!conn) {
   1a49a:	4680      	mov	r8, r0
   1a49c:	2800      	cmp	r0, #0
   1a49e:	d0e7      	beq.n	1a470 <notify_cb+0xec>
		if (conn->state != BT_CONN_CONNECTED) {
   1a4a0:	7b43      	ldrb	r3, [r0, #13]
   1a4a2:	2b07      	cmp	r3, #7
   1a4a4:	d1af      	bne.n	1a406 <notify_cb+0x82>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1a4a6:	696b      	ldr	r3, [r5, #20]
   1a4a8:	b11b      	cbz	r3, 1a4b2 <notify_cb+0x12e>
   1a4aa:	4639      	mov	r1, r7
   1a4ac:	4798      	blx	r3
   1a4ae:	2800      	cmp	r0, #0
   1a4b0:	d0ac      	beq.n	1a40c <notify_cb+0x88>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a4b2:	2294      	movs	r2, #148	; 0x94
   1a4b4:	4639      	mov	r1, r7
   1a4b6:	4640      	mov	r0, r8
   1a4b8:	f011 ff3a 	bl	2c330 <bt_gatt_check_perm>
   1a4bc:	4681      	mov	r9, r0
   1a4be:	2800      	cmp	r0, #0
   1a4c0:	d1a8      	bne.n	1a414 <notify_cb+0x90>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1a4c2:	89b3      	ldrh	r3, [r6, #12]
   1a4c4:	2b02      	cmp	r3, #2
   1a4c6:	d0ad      	beq.n	1a424 <notify_cb+0xa0>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1a4c8:	2b01      	cmp	r3, #1
   1a4ca:	d0bf      	beq.n	1a44c <notify_cb+0xc8>
			err = 0;
   1a4cc:	f04f 0a00 	mov.w	sl, #0
   1a4d0:	e7c6      	b.n	1a460 <notify_cb+0xdc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1a4d2:	6932      	ldr	r2, [r6, #16]
   1a4d4:	88b1      	ldrh	r1, [r6, #4]
   1a4d6:	4640      	mov	r0, r8
   1a4d8:	f7ff fe6c 	bl	1a1b4 <gatt_notify>
   1a4dc:	4682      	mov	sl, r0
   1a4de:	e7bf      	b.n	1a460 <notify_cb+0xdc>
	return BT_GATT_ITER_CONTINUE;
   1a4e0:	f04f 0901 	mov.w	r9, #1
   1a4e4:	e757      	b.n	1a396 <notify_cb+0x12>
   1a4e6:	bf00      	nop
   1a4e8:	00019351 	.word	0x00019351
   1a4ec:	2000075c 	.word	0x2000075c
   1a4f0:	20002b10 	.word	0x20002b10
   1a4f4:	00030c24 	.word	0x00030c24
   1a4f8:	00032398 	.word	0x00032398

0001a4fc <bt_gatt_connected>:
{
   1a4fc:	b570      	push	{r4, r5, r6, lr}
   1a4fe:	b090      	sub	sp, #64	; 0x40
   1a500:	4604      	mov	r4, r0
	data.conn = conn;
   1a502:	900e      	str	r0, [sp, #56]	; 0x38
	data.sec = BT_SECURITY_L1;
   1a504:	2301      	movs	r3, #1
   1a506:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a50a:	f100 0590 	add.w	r5, r0, #144	; 0x90
   1a50e:	4629      	mov	r1, r5
   1a510:	7a00      	ldrb	r0, [r0, #8]
   1a512:	f00f ff35 	bl	2a380 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1a516:	b190      	cbz	r0, 1a53e <bt_gatt_connected+0x42>
		if (conn->id) {
   1a518:	7a22      	ldrb	r2, [r4, #8]
   1a51a:	b32a      	cbz	r2, 1a568 <bt_gatt_connected+0x6c>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1a51c:	ae04      	add	r6, sp, #16
   1a51e:	2104      	movs	r1, #4
   1a520:	4630      	mov	r0, r6
   1a522:	f7f6 fbdd 	bl	10ce0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a526:	9600      	str	r6, [sp, #0]
   1a528:	462b      	mov	r3, r5
   1a52a:	4a19      	ldr	r2, [pc, #100]	; (1a590 <bt_gatt_connected+0x94>)
   1a52c:	2124      	movs	r1, #36	; 0x24
   1a52e:	a805      	add	r0, sp, #20
   1a530:	f7f9 fcbe 	bl	13eb0 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1a534:	aa05      	add	r2, sp, #20
   1a536:	4917      	ldr	r1, [pc, #92]	; (1a594 <bt_gatt_connected+0x98>)
   1a538:	4610      	mov	r0, r2
   1a53a:	f7f7 ff85 	bl	12448 <settings_load_subtree_direct>
   1a53e:	ab0e      	add	r3, sp, #56	; 0x38
   1a540:	9302      	str	r3, [sp, #8]
   1a542:	4b15      	ldr	r3, [pc, #84]	; (1a598 <bt_gatt_connected+0x9c>)
   1a544:	9301      	str	r3, [sp, #4]
   1a546:	2200      	movs	r2, #0
   1a548:	9200      	str	r2, [sp, #0]
   1a54a:	4613      	mov	r3, r2
   1a54c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a550:	2001      	movs	r0, #1
   1a552:	f7ff f979 	bl	19848 <bt_gatt_foreach_attr_type>
	    bt_conn_get_security(conn) < data.sec) {
   1a556:	4620      	mov	r0, r4
   1a558:	f010 fbe6 	bl	2ad28 <bt_conn_get_security>
   1a55c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a560:	4288      	cmp	r0, r1
   1a562:	d30a      	bcc.n	1a57a <bt_gatt_connected+0x7e>
}
   1a564:	b010      	add	sp, #64	; 0x40
   1a566:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a568:	2300      	movs	r3, #0
   1a56a:	9300      	str	r3, [sp, #0]
   1a56c:	462b      	mov	r3, r5
   1a56e:	4a08      	ldr	r2, [pc, #32]	; (1a590 <bt_gatt_connected+0x94>)
   1a570:	2124      	movs	r1, #36	; 0x24
   1a572:	a805      	add	r0, sp, #20
   1a574:	f7f9 fc9c 	bl	13eb0 <bt_settings_encode_key>
   1a578:	e7dc      	b.n	1a534 <bt_gatt_connected+0x38>
		int err = bt_conn_set_security(conn, data.sec);
   1a57a:	4620      	mov	r0, r4
   1a57c:	f010 fbb2 	bl	2ace4 <bt_conn_set_security>
		if (err) {
   1a580:	4602      	mov	r2, r0
   1a582:	2800      	cmp	r0, #0
   1a584:	d0ee      	beq.n	1a564 <bt_gatt_connected+0x68>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1a586:	2157      	movs	r1, #87	; 0x57
   1a588:	4804      	ldr	r0, [pc, #16]	; (1a59c <bt_gatt_connected+0xa0>)
   1a58a:	f00e fb60 	bl	28c4e <z_log_minimal_printk>
}
   1a58e:	e7e9      	b.n	1a564 <bt_gatt_connected+0x68>
   1a590:	00032394 	.word	0x00032394
   1a594:	00019ba1 	.word	0x00019ba1
   1a598:	0001a109 	.word	0x0001a109
   1a59c:	00032480 	.word	0x00032480

0001a5a0 <bt_gatt_att_max_mtu_changed>:
{
   1a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5a2:	4605      	mov	r5, r0
   1a5a4:	460e      	mov	r6, r1
   1a5a6:	4617      	mov	r7, r2
	return list->head;
   1a5a8:	4b0a      	ldr	r3, [pc, #40]	; (1a5d4 <bt_gatt_att_max_mtu_changed+0x34>)
   1a5aa:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1a5ac:	b104      	cbz	r4, 1a5b0 <bt_gatt_att_max_mtu_changed+0x10>
   1a5ae:	3c04      	subs	r4, #4
   1a5b0:	b174      	cbz	r4, 1a5d0 <bt_gatt_att_max_mtu_changed+0x30>
		if (cb->att_mtu_updated) {
   1a5b2:	6823      	ldr	r3, [r4, #0]
   1a5b4:	b143      	cbz	r3, 1a5c8 <bt_gatt_att_max_mtu_changed+0x28>
			cb->att_mtu_updated(conn, tx, rx);
   1a5b6:	463a      	mov	r2, r7
   1a5b8:	4631      	mov	r1, r6
   1a5ba:	4628      	mov	r0, r5
   1a5bc:	4798      	blx	r3
	return node->next;
   1a5be:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1a5c0:	2c00      	cmp	r4, #0
   1a5c2:	d0f5      	beq.n	1a5b0 <bt_gatt_att_max_mtu_changed+0x10>
   1a5c4:	3c04      	subs	r4, #4
   1a5c6:	e7f3      	b.n	1a5b0 <bt_gatt_att_max_mtu_changed+0x10>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a5c8:	1d23      	adds	r3, r4, #4
   1a5ca:	d1f8      	bne.n	1a5be <bt_gatt_att_max_mtu_changed+0x1e>
   1a5cc:	461c      	mov	r4, r3
   1a5ce:	e7ef      	b.n	1a5b0 <bt_gatt_att_max_mtu_changed+0x10>
}
   1a5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a5d2:	bf00      	nop
   1a5d4:	20002b30 	.word	0x20002b30

0001a5d8 <bt_gatt_encrypt_change>:
{
   1a5d8:	b500      	push	{lr}
   1a5da:	b087      	sub	sp, #28
	data.conn = conn;
   1a5dc:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1a5de:	2001      	movs	r0, #1
   1a5e0:	f88d 0014 	strb.w	r0, [sp, #20]
   1a5e4:	ab04      	add	r3, sp, #16
   1a5e6:	9302      	str	r3, [sp, #8]
   1a5e8:	4b05      	ldr	r3, [pc, #20]	; (1a600 <bt_gatt_encrypt_change+0x28>)
   1a5ea:	9301      	str	r3, [sp, #4]
   1a5ec:	2200      	movs	r2, #0
   1a5ee:	9200      	str	r2, [sp, #0]
   1a5f0:	4613      	mov	r3, r2
   1a5f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a5f6:	f7ff f927 	bl	19848 <bt_gatt_foreach_attr_type>
}
   1a5fa:	b007      	add	sp, #28
   1a5fc:	f85d fb04 	ldr.w	pc, [sp], #4
   1a600:	0001a109 	.word	0x0001a109

0001a604 <bt_gatt_store_ccc>:
{
   1a604:	b570      	push	{r4, r5, r6, lr}
   1a606:	b0c2      	sub	sp, #264	; 0x108
   1a608:	4604      	mov	r4, r0
   1a60a:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1a60c:	910f      	str	r1, [sp, #60]	; 0x3c
	save.addr_with_id.id = id;
   1a60e:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	save.count = 0;
   1a612:	2200      	movs	r2, #0
   1a614:	9241      	str	r2, [sp, #260]	; 0x104
   1a616:	ab0f      	add	r3, sp, #60	; 0x3c
   1a618:	9302      	str	r3, [sp, #8]
   1a61a:	4b1e      	ldr	r3, [pc, #120]	; (1a694 <bt_gatt_store_ccc+0x90>)
   1a61c:	9301      	str	r3, [sp, #4]
   1a61e:	9200      	str	r2, [sp, #0]
   1a620:	4613      	mov	r3, r2
   1a622:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a626:	2001      	movs	r0, #1
   1a628:	f7ff f90e 	bl	19848 <bt_gatt_foreach_attr_type>
	if (id) {
   1a62c:	b1d4      	cbz	r4, 1a664 <bt_gatt_store_ccc+0x60>
		u8_to_dec(id_str, sizeof(id_str), id);
   1a62e:	ae05      	add	r6, sp, #20
   1a630:	4622      	mov	r2, r4
   1a632:	2104      	movs	r1, #4
   1a634:	4630      	mov	r0, r6
   1a636:	f7f6 fb53 	bl	10ce0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1a63a:	9600      	str	r6, [sp, #0]
   1a63c:	462b      	mov	r3, r5
   1a63e:	4a16      	ldr	r2, [pc, #88]	; (1a698 <bt_gatt_store_ccc+0x94>)
   1a640:	2124      	movs	r1, #36	; 0x24
   1a642:	a806      	add	r0, sp, #24
   1a644:	f7f9 fc34 	bl	13eb0 <bt_settings_encode_key>
	if (save.count) {
   1a648:	9c41      	ldr	r4, [sp, #260]	; 0x104
   1a64a:	b1a4      	cbz	r4, 1a676 <bt_gatt_store_ccc+0x72>
		len = save.count * sizeof(*save.store);
   1a64c:	00a4      	lsls	r4, r4, #2
		str = (char *)save.store;
   1a64e:	a911      	add	r1, sp, #68	; 0x44
	err = settings_save_one(key, str, len);
   1a650:	4622      	mov	r2, r4
   1a652:	a806      	add	r0, sp, #24
   1a654:	f7f7 fe8e 	bl	12374 <settings_save_one>
	if (err) {
   1a658:	4605      	mov	r5, r0
   1a65a:	b970      	cbnz	r0, 1a67a <bt_gatt_store_ccc+0x76>
	if (len) {
   1a65c:	b9c4      	cbnz	r4, 1a690 <bt_gatt_store_ccc+0x8c>
}
   1a65e:	4628      	mov	r0, r5
   1a660:	b042      	add	sp, #264	; 0x108
   1a662:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1a664:	2300      	movs	r3, #0
   1a666:	9300      	str	r3, [sp, #0]
   1a668:	462b      	mov	r3, r5
   1a66a:	4a0b      	ldr	r2, [pc, #44]	; (1a698 <bt_gatt_store_ccc+0x94>)
   1a66c:	2124      	movs	r1, #36	; 0x24
   1a66e:	a806      	add	r0, sp, #24
   1a670:	f7f9 fc1e 	bl	13eb0 <bt_settings_encode_key>
   1a674:	e7e8      	b.n	1a648 <bt_gatt_store_ccc+0x44>
		str = NULL;
   1a676:	2100      	movs	r1, #0
   1a678:	e7ea      	b.n	1a650 <bt_gatt_store_ccc+0x4c>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1a67a:	4602      	mov	r2, r0
   1a67c:	2145      	movs	r1, #69	; 0x45
   1a67e:	4807      	ldr	r0, [pc, #28]	; (1a69c <bt_gatt_store_ccc+0x98>)
   1a680:	f00e fae5 	bl	28c4e <z_log_minimal_printk>
		return err;
   1a684:	e7eb      	b.n	1a65e <bt_gatt_store_ccc+0x5a>
		for (size_t i = 0; i < save.count; i++) {
   1a686:	3301      	adds	r3, #1
   1a688:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1a68a:	429a      	cmp	r2, r3
   1a68c:	d8fb      	bhi.n	1a686 <bt_gatt_store_ccc+0x82>
   1a68e:	e7e6      	b.n	1a65e <bt_gatt_store_ccc+0x5a>
   1a690:	2300      	movs	r3, #0
   1a692:	e7f9      	b.n	1a688 <bt_gatt_store_ccc+0x84>
   1a694:	00018d59 	.word	0x00018d59
   1a698:	00032394 	.word	0x00032394
   1a69c:	000324b4 	.word	0x000324b4

0001a6a0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1a6a0:	b530      	push	{r4, r5, lr}
   1a6a2:	b087      	sub	sp, #28
   1a6a4:	4604      	mov	r4, r0
   1a6a6:	9002      	str	r0, [sp, #8]
   1a6a8:	4b1e      	ldr	r3, [pc, #120]	; (1a724 <bt_gatt_disconnected+0x84>)
   1a6aa:	9301      	str	r3, [sp, #4]
   1a6ac:	2200      	movs	r2, #0
   1a6ae:	9200      	str	r2, [sp, #0]
   1a6b0:	4613      	mov	r3, r2
   1a6b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a6b6:	2001      	movs	r0, #1
   1a6b8:	f7ff f8c6 	bl	19848 <bt_gatt_foreach_attr_type>
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);
   1a6bc:	4620      	mov	r0, r4
   1a6be:	f7fe fe13 	bl	192e8 <gatt_ccc_conn_unqueue>

	if (gatt_ccc_conn_queue_is_empty()) {
   1a6c2:	f7fe fa9f 	bl	18c04 <gatt_ccc_conn_queue_is_empty>
   1a6c6:	b980      	cbnz	r0, 1a6ea <bt_gatt_disconnected+0x4a>
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a6c8:	f104 0590 	add.w	r5, r4, #144	; 0x90
   1a6cc:	4629      	mov	r1, r5
   1a6ce:	7a20      	ldrb	r0, [r4, #8]
   1a6d0:	f00f fe56 	bl	2a380 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1a6d4:	b968      	cbnz	r0, 1a6f2 <bt_gatt_disconnected+0x52>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a6d6:	4629      	mov	r1, r5
   1a6d8:	7a20      	ldrb	r0, [r4, #8]
   1a6da:	f00f fe51 	bl	2a380 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1a6de:	b980      	cbnz	r0, 1a702 <bt_gatt_disconnected+0x62>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1a6e0:	4620      	mov	r0, r4
   1a6e2:	f011 fcfb 	bl	2c0dc <remove_cf_cfg>
#endif
}
   1a6e6:	b007      	add	sp, #28
   1a6e8:	bd30      	pop	{r4, r5, pc}
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1a6ea:	480f      	ldr	r0, [pc, #60]	; (1a728 <bt_gatt_disconnected+0x88>)
   1a6ec:	f008 fd3e 	bl	2316c <k_work_cancel_delayable>
   1a6f0:	e7ea      	b.n	1a6c8 <bt_gatt_disconnected+0x28>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1a6f2:	4629      	mov	r1, r5
   1a6f4:	7a20      	ldrb	r0, [r4, #8]
   1a6f6:	f7ff ff85 	bl	1a604 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   1a6fa:	4620      	mov	r0, r4
   1a6fc:	f7fe fc70 	bl	18fe0 <bt_gatt_store_cf>
   1a700:	e7e9      	b.n	1a6d6 <bt_gatt_disconnected+0x36>
		struct addr_with_id addr_with_id = {
   1a702:	9504      	str	r5, [sp, #16]
			.id = conn->id,
   1a704:	7a23      	ldrb	r3, [r4, #8]
		struct addr_with_id addr_with_id = {
   1a706:	f88d 3014 	strb.w	r3, [sp, #20]
   1a70a:	ab04      	add	r3, sp, #16
   1a70c:	9302      	str	r3, [sp, #8]
   1a70e:	4b07      	ldr	r3, [pc, #28]	; (1a72c <bt_gatt_disconnected+0x8c>)
   1a710:	9301      	str	r3, [sp, #4]
   1a712:	2200      	movs	r2, #0
   1a714:	9200      	str	r2, [sp, #0]
   1a716:	4613      	mov	r3, r2
   1a718:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a71c:	2001      	movs	r0, #1
   1a71e:	f7ff f893 	bl	19848 <bt_gatt_foreach_attr_type>
   1a722:	e7dd      	b.n	1a6e0 <bt_gatt_disconnected+0x40>
   1a724:	00019425 	.word	0x00019425
   1a728:	20001bf0 	.word	0x20001bf0
   1a72c:	00019101 	.word	0x00019101

0001a730 <le_sc_supported>:
	 */
	if (IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		return false;
	}

	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a730:	4b04      	ldr	r3, [pc, #16]	; (1a744 <le_sc_supported+0x14>)
   1a732:	f893 009a 	ldrb.w	r0, [r3, #154]	; 0x9a
   1a736:	f000 0006 	and.w	r0, r0, #6
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}
   1a73a:	2806      	cmp	r0, #6
   1a73c:	bf14      	ite	ne
   1a73e:	2000      	movne	r0, #0
   1a740:	2001      	moveq	r0, #1
   1a742:	4770      	bx	lr
   1a744:	20000380 	.word	0x20000380

0001a748 <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
   1a748:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1a74a:	2106      	movs	r1, #6
   1a74c:	f010 fc1d 	bl	2af8a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a750:	4604      	mov	r4, r0
   1a752:	b118      	cbz	r0, 1a75c <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
   1a754:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
}
   1a758:	4620      	mov	r0, r4
   1a75a:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to find SMP channel");
   1a75c:	2145      	movs	r1, #69	; 0x45
   1a75e:	4802      	ldr	r0, [pc, #8]	; (1a768 <smp_chan_get+0x20>)
   1a760:	f00e fa75 	bl	28c4e <z_log_minimal_printk>
		return NULL;
   1a764:	e7f8      	b.n	1a758 <smp_chan_get+0x10>
   1a766:	bf00      	nop
   1a768:	0003261c 	.word	0x0003261c

0001a76c <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1a76c:	b510      	push	{r4, lr}
   1a76e:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1a770:	2000      	movs	r0, #0
   1a772:	b130      	cbz	r0, 1a782 <bt_smp_accept+0x16>
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1a774:	2145      	movs	r1, #69	; 0x45
   1a776:	480f      	ldr	r0, [pc, #60]	; (1a7b4 <bt_smp_accept+0x48>)
   1a778:	f00e fa69 	bl	28c4e <z_log_minimal_printk>

	return -ENOMEM;
   1a77c:	f06f 000b 	mvn.w	r0, #11
}
   1a780:	bd10      	pop	{r4, pc}
		if (smp->chan.chan.conn) {
   1a782:	4b0d      	ldr	r3, [pc, #52]	; (1a7b8 <bt_smp_accept+0x4c>)
   1a784:	f44f 7cdc 	mov.w	ip, #440	; 0x1b8
   1a788:	fb0c 3300 	mla	r3, ip, r0, r3
   1a78c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   1a790:	b10b      	cbz	r3, 1a796 <bt_smp_accept+0x2a>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1a792:	3001      	adds	r0, #1
   1a794:	e7ed      	b.n	1a772 <bt_smp_accept+0x6>
		smp->chan.chan.ops = &ops;
   1a796:	4a08      	ldr	r2, [pc, #32]	; (1a7b8 <bt_smp_accept+0x4c>)
   1a798:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1a79c:	fb00 f303 	mul.w	r3, r0, r3
   1a7a0:	eb02 0c03 	add.w	ip, r2, r3
   1a7a4:	4c05      	ldr	r4, [pc, #20]	; (1a7bc <bt_smp_accept+0x50>)
   1a7a6:	f8cc 40f0 	str.w	r4, [ip, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1a7aa:	33e8      	adds	r3, #232	; 0xe8
   1a7ac:	4413      	add	r3, r2
   1a7ae:	3304      	adds	r3, #4
   1a7b0:	600b      	str	r3, [r1, #0]
		return 0;
   1a7b2:	e7e5      	b.n	1a780 <bt_smp_accept+0x14>
   1a7b4:	0003263c 	.word	0x0003263c
   1a7b8:	20001cf0 	.word	0x20001cf0
   1a7bc:	00032ad8 	.word	0x00032ad8

0001a7c0 <smp_find>:
{
   1a7c0:	b538      	push	{r3, r4, r5, lr}
   1a7c2:	4605      	mov	r5, r0
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1a7c4:	2400      	movs	r4, #0
   1a7c6:	b10c      	cbz	r4, 1a7cc <smp_find+0xc>
	return NULL;
   1a7c8:	2000      	movs	r0, #0
}
   1a7ca:	bd38      	pop	{r3, r4, r5, pc}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1a7cc:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1a7d0:	4807      	ldr	r0, [pc, #28]	; (1a7f0 <smp_find+0x30>)
   1a7d2:	fb03 0004 	mla	r0, r3, r4, r0
   1a7d6:	4629      	mov	r1, r5
   1a7d8:	3004      	adds	r0, #4
   1a7da:	f011 ff0b 	bl	2c5f4 <atomic_test_bit>
   1a7de:	b908      	cbnz	r0, 1a7e4 <smp_find+0x24>
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1a7e0:	3401      	adds	r4, #1
   1a7e2:	e7f0      	b.n	1a7c6 <smp_find+0x6>
			return &bt_smp_pool[i];
   1a7e4:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1a7e8:	4801      	ldr	r0, [pc, #4]	; (1a7f0 <smp_find+0x30>)
   1a7ea:	fb03 0004 	mla	r0, r3, r4, r0
   1a7ee:	e7ec      	b.n	1a7ca <smp_find+0xa>
   1a7f0:	20001cf0 	.word	0x20001cf0

0001a7f4 <latch_auth_cb>:
{
   1a7f4:	b500      	push	{lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1a7f6:	f500 73d8 	add.w	r3, r0, #432	; 0x1b0
   1a7fa:	4a0c      	ldr	r2, [pc, #48]	; (1a82c <latch_auth_cb+0x38>)
   1a7fc:	6811      	ldr	r1, [r2, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a7fe:	4a0c      	ldr	r2, [pc, #48]	; (1a830 <latch_auth_cb+0x3c>)
   1a800:	f3bf 8f5b 	dmb	ish
   1a804:	e853 cf00 	ldrex	ip, [r3]
   1a808:	4594      	cmp	ip, r2
   1a80a:	d104      	bne.n	1a816 <latch_auth_cb+0x22>
   1a80c:	e843 1e00 	strex	lr, r1, [r3]
   1a810:	f1be 0f00 	cmp.w	lr, #0
   1a814:	d1f6      	bne.n	1a804 <latch_auth_cb+0x10>
   1a816:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a81a:	f3bf 8f5b 	dmb	ish
   1a81e:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
   1a822:	f3bf 8f5b 	dmb	ish
}
   1a826:	f85d fb04 	ldr.w	pc, [sp], #4
   1a82a:	bf00      	nop
   1a82c:	200029e4 	.word	0x200029e4
   1a830:	20001cf0 	.word	0x20001cf0

0001a834 <get_io_capa>:
{
   1a834:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a836:	f7ff ffdd 	bl	1a7f4 <latch_auth_cb>
	if (!smp_auth_cb) {
   1a83a:	b1c0      	cbz	r0, 1a86e <get_io_capa+0x3a>
   1a83c:	4603      	mov	r3, r0
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1a83e:	6802      	ldr	r2, [r0, #0]
   1a840:	b132      	cbz	r2, 1a850 <get_io_capa+0x1c>
   1a842:	6841      	ldr	r1, [r0, #4]
   1a844:	b121      	cbz	r1, 1a850 <get_io_capa+0x1c>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1a846:	6881      	ldr	r1, [r0, #8]
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1a848:	b999      	cbnz	r1, 1a872 <get_io_capa+0x3e>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1a84a:	490d      	ldr	r1, [pc, #52]	; (1a880 <get_io_capa+0x4c>)
   1a84c:	7809      	ldrb	r1, [r1, #0]
   1a84e:	b191      	cbz	r1, 1a876 <get_io_capa+0x42>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1a850:	490b      	ldr	r1, [pc, #44]	; (1a880 <get_io_capa+0x4c>)
   1a852:	7809      	ldrb	r1, [r1, #0]
   1a854:	b121      	cbz	r1, 1a860 <get_io_capa+0x2c>
   1a856:	b11a      	cbz	r2, 1a860 <get_io_capa+0x2c>
	    smp_auth_cb->passkey_confirm) {
   1a858:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && smp_auth_cb->passkey_display &&
   1a85a:	b109      	cbz	r1, 1a860 <get_io_capa+0x2c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1a85c:	2001      	movs	r0, #1
   1a85e:	e003      	b.n	1a868 <get_io_capa+0x34>
	if (smp_auth_cb->passkey_entry) {
   1a860:	685b      	ldr	r3, [r3, #4]
   1a862:	b953      	cbnz	r3, 1a87a <get_io_capa+0x46>
	if (smp_auth_cb->passkey_display) {
   1a864:	b10a      	cbz	r2, 1a86a <get_io_capa+0x36>
		return BT_SMP_IO_DISPLAY_ONLY;
   1a866:	2000      	movs	r0, #0
}
   1a868:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1a86a:	2003      	movs	r0, #3
   1a86c:	e7fc      	b.n	1a868 <get_io_capa+0x34>
   1a86e:	2003      	movs	r0, #3
   1a870:	e7fa      	b.n	1a868 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1a872:	2004      	movs	r0, #4
   1a874:	e7f8      	b.n	1a868 <get_io_capa+0x34>
   1a876:	2004      	movs	r0, #4
   1a878:	e7f6      	b.n	1a868 <get_io_capa+0x34>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1a87a:	2002      	movs	r0, #2
   1a87c:	e7f4      	b.n	1a868 <get_io_capa+0x34>
   1a87e:	bf00      	nop
   1a880:	200045f3 	.word	0x200045f3

0001a884 <get_auth>:
{
   1a884:	b510      	push	{r4, lr}
	if (sc_supported) {
   1a886:	4b0d      	ldr	r3, [pc, #52]	; (1a8bc <get_auth+0x38>)
   1a888:	781b      	ldrb	r3, [r3, #0]
   1a88a:	b16b      	cbz	r3, 1a8a8 <get_auth+0x24>
		auth &= BT_SMP_AUTH_MASK_SC;
   1a88c:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1a890:	f7ff ffd0 	bl	1a834 <get_io_capa>
   1a894:	2803      	cmp	r0, #3
   1a896:	d00a      	beq.n	1a8ae <get_auth+0x2a>
		auth |= BT_SMP_AUTH_MITM;
   1a898:	f044 0004 	orr.w	r0, r4, #4
	if (bondable) {
   1a89c:	4b08      	ldr	r3, [pc, #32]	; (1a8c0 <get_auth+0x3c>)
   1a89e:	781b      	ldrb	r3, [r3, #0]
   1a8a0:	b143      	cbz	r3, 1a8b4 <get_auth+0x30>
		auth |= BT_SMP_AUTH_BONDING;
   1a8a2:	f040 0001 	orr.w	r0, r0, #1
}
   1a8a6:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1a8a8:	f001 0407 	and.w	r4, r1, #7
   1a8ac:	e7f0      	b.n	1a890 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
   1a8ae:	f004 000b 	and.w	r0, r4, #11
   1a8b2:	e7f3      	b.n	1a89c <get_auth+0x18>
		auth &= ~BT_SMP_AUTH_BONDING;
   1a8b4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   1a8b8:	e7f5      	b.n	1a8a6 <get_auth+0x22>
   1a8ba:	bf00      	nop
   1a8bc:	200045f3 	.word	0x200045f3
   1a8c0:	2000095d 	.word	0x2000095d

0001a8c4 <legacy_get_pair_method>:
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1a8c4:	2904      	cmp	r1, #4
   1a8c6:	d821      	bhi.n	1a90c <legacy_get_pair_method+0x48>
{
   1a8c8:	b538      	push	{r3, r4, r5, lr}
   1a8ca:	4604      	mov	r4, r0
   1a8cc:	460d      	mov	r5, r1
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1a8ce:	7ac3      	ldrb	r3, [r0, #11]
   1a8d0:	7c82      	ldrb	r2, [r0, #18]
   1a8d2:	4013      	ands	r3, r2
   1a8d4:	f013 0f01 	tst.w	r3, #1
   1a8d8:	d11a      	bne.n	1a910 <legacy_get_pair_method+0x4c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1a8da:	7b00      	ldrb	r0, [r0, #12]
   1a8dc:	7ce3      	ldrb	r3, [r4, #19]
   1a8de:	4318      	orrs	r0, r3
   1a8e0:	f010 0004 	ands.w	r0, r0, #4
   1a8e4:	d100      	bne.n	1a8e8 <legacy_get_pair_method+0x24>
}
   1a8e6:	bd38      	pop	{r3, r4, r5, pc}
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1a8e8:	4620      	mov	r0, r4
   1a8ea:	f7ff ffa3 	bl	1a834 <get_io_capa>
   1a8ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a8f2:	4b08      	ldr	r3, [pc, #32]	; (1a914 <legacy_get_pair_method+0x50>)
   1a8f4:	442b      	add	r3, r5
   1a8f6:	5c18      	ldrb	r0, [r3, r0]
	if (method == PASSKEY_ROLE) {
   1a8f8:	2804      	cmp	r0, #4
   1a8fa:	d1f4      	bne.n	1a8e6 <legacy_get_pair_method+0x22>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1a8fc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1a900:	78db      	ldrb	r3, [r3, #3]
   1a902:	b10b      	cbz	r3, 1a908 <legacy_get_pair_method+0x44>
			method = PASSKEY_INPUT;
   1a904:	2001      	movs	r0, #1
   1a906:	e7ee      	b.n	1a8e6 <legacy_get_pair_method+0x22>
			method = PASSKEY_DISPLAY;
   1a908:	2002      	movs	r0, #2
   1a90a:	e7ec      	b.n	1a8e6 <legacy_get_pair_method+0x22>
		return JUST_WORKS;
   1a90c:	2000      	movs	r0, #0
}
   1a90e:	4770      	bx	lr
		return LEGACY_OOB;
   1a910:	2006      	movs	r0, #6
   1a912:	e7e8      	b.n	1a8e6 <legacy_get_pair_method+0x22>
   1a914:	00032ba4 	.word	0x00032ba4

0001a918 <get_pair_method>:
{
   1a918:	b538      	push	{r3, r4, r5, lr}
   1a91a:	4604      	mov	r4, r0
   1a91c:	460d      	mov	r5, r1
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a91e:	2105      	movs	r1, #5
   1a920:	3004      	adds	r0, #4
   1a922:	f011 fe67 	bl	2c5f4 <atomic_test_bit>
   1a926:	b1d8      	cbz	r0, 1a960 <get_pair_method+0x48>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1a928:	7b20      	ldrb	r0, [r4, #12]
   1a92a:	7ce3      	ldrb	r3, [r4, #19]
   1a92c:	ea00 0203 	and.w	r2, r0, r3
   1a930:	f012 0f08 	tst.w	r2, #8
   1a934:	d005      	beq.n	1a942 <get_pair_method+0x2a>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1a936:	7ae2      	ldrb	r2, [r4, #11]
   1a938:	7ca1      	ldrb	r1, [r4, #18]
   1a93a:	430a      	orrs	r2, r1
   1a93c:	f012 0f01 	tst.w	r2, #1
   1a940:	d113      	bne.n	1a96a <get_pair_method+0x52>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1a942:	2d04      	cmp	r5, #4
   1a944:	d813      	bhi.n	1a96e <get_pair_method+0x56>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1a946:	4318      	orrs	r0, r3
   1a948:	f010 0004 	ands.w	r0, r0, #4
   1a94c:	d010      	beq.n	1a970 <get_pair_method+0x58>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1a94e:	4620      	mov	r0, r4
   1a950:	f7ff ff70 	bl	1a834 <get_io_capa>
   1a954:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a958:	4b06      	ldr	r3, [pc, #24]	; (1a974 <get_pair_method+0x5c>)
   1a95a:	442b      	add	r3, r5
   1a95c:	5c18      	ldrb	r0, [r3, r0]
   1a95e:	e007      	b.n	1a970 <get_pair_method+0x58>
		return legacy_get_pair_method(smp, remote_io);
   1a960:	4629      	mov	r1, r5
   1a962:	4620      	mov	r0, r4
   1a964:	f7ff ffae 	bl	1a8c4 <legacy_get_pair_method>
   1a968:	e002      	b.n	1a970 <get_pair_method+0x58>
			return LE_SC_OOB;
   1a96a:	2005      	movs	r0, #5
   1a96c:	e000      	b.n	1a970 <get_pair_method+0x58>
		return JUST_WORKS;
   1a96e:	2000      	movs	r0, #0
}
   1a970:	bd38      	pop	{r3, r4, r5, pc}
   1a972:	bf00      	nop
   1a974:	00032b88 	.word	0x00032b88

0001a978 <sec_level_reachable>:
{
   1a978:	b538      	push	{r3, r4, r5, lr}
   1a97a:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a97c:	f7ff ff3a 	bl	1a7f4 <latch_auth_cb>
   1a980:	4605      	mov	r5, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1a982:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1a986:	7a9b      	ldrb	r3, [r3, #10]
   1a988:	2b03      	cmp	r3, #3
   1a98a:	d016      	beq.n	1a9ba <sec_level_reachable+0x42>
   1a98c:	d807      	bhi.n	1a99e <sec_level_reachable+0x26>
   1a98e:	3b01      	subs	r3, #1
   1a990:	b2db      	uxtb	r3, r3
   1a992:	2b01      	cmp	r3, #1
   1a994:	d801      	bhi.n	1a99a <sec_level_reachable+0x22>
   1a996:	2001      	movs	r0, #1
}
   1a998:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1a99a:	2000      	movs	r0, #0
   1a99c:	e7fc      	b.n	1a998 <sec_level_reachable+0x20>
	switch (smp->chan.chan.conn->required_sec_level) {
   1a99e:	2b04      	cmp	r3, #4
   1a9a0:	d109      	bne.n	1a9b6 <sec_level_reachable+0x3e>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a9a2:	4620      	mov	r0, r4
   1a9a4:	f7ff ff46 	bl	1a834 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1a9a8:	2803      	cmp	r0, #3
   1a9aa:	d016      	beq.n	1a9da <sec_level_reachable+0x62>
   1a9ac:	4b10      	ldr	r3, [pc, #64]	; (1a9f0 <sec_level_reachable+0x78>)
   1a9ae:	781b      	ldrb	r3, [r3, #0]
   1a9b0:	b9db      	cbnz	r3, 1a9ea <sec_level_reachable+0x72>
   1a9b2:	2000      	movs	r0, #0
   1a9b4:	e7f0      	b.n	1a998 <sec_level_reachable+0x20>
		return false;
   1a9b6:	2000      	movs	r0, #0
   1a9b8:	e7ee      	b.n	1a998 <sec_level_reachable+0x20>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a9ba:	4620      	mov	r0, r4
   1a9bc:	f7ff ff3a 	bl	1a834 <get_io_capa>
   1a9c0:	2803      	cmp	r0, #3
   1a9c2:	d001      	beq.n	1a9c8 <sec_level_reachable+0x50>
   1a9c4:	2001      	movs	r0, #1
   1a9c6:	e7e7      	b.n	1a998 <sec_level_reachable+0x20>
   1a9c8:	b12d      	cbz	r5, 1a9d6 <sec_level_reachable+0x5e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1a9ca:	68eb      	ldr	r3, [r5, #12]
   1a9cc:	b10b      	cbz	r3, 1a9d2 <sec_level_reachable+0x5a>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a9ce:	2001      	movs	r0, #1
   1a9d0:	e7e2      	b.n	1a998 <sec_level_reachable+0x20>
   1a9d2:	2000      	movs	r0, #0
   1a9d4:	e7e0      	b.n	1a998 <sec_level_reachable+0x20>
   1a9d6:	2000      	movs	r0, #0
   1a9d8:	e7de      	b.n	1a998 <sec_level_reachable+0x20>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a9da:	b125      	cbz	r5, 1a9e6 <sec_level_reachable+0x6e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1a9dc:	68eb      	ldr	r3, [r5, #12]
   1a9de:	2b00      	cmp	r3, #0
   1a9e0:	d1e4      	bne.n	1a9ac <sec_level_reachable+0x34>
   1a9e2:	2000      	movs	r0, #0
   1a9e4:	e7d8      	b.n	1a998 <sec_level_reachable+0x20>
   1a9e6:	2000      	movs	r0, #0
   1a9e8:	e7d6      	b.n	1a998 <sec_level_reachable+0x20>
   1a9ea:	2001      	movs	r0, #1
   1a9ec:	e7d4      	b.n	1a998 <sec_level_reachable+0x20>
   1a9ee:	bf00      	nop
   1a9f0:	200045f3 	.word	0x200045f3

0001a9f4 <legacy_pairing_random>:
{
   1a9f4:	b570      	push	{r4, r5, r6, lr}
   1a9f6:	b088      	sub	sp, #32
   1a9f8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1a9fa:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1a9fe:	f100 0547 	add.w	r5, r0, #71	; 0x47
   1aa02:	f100 0637 	add.w	r6, r0, #55	; 0x37
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1aa06:	f103 0297 	add.w	r2, r3, #151	; 0x97
   1aa0a:	339e      	adds	r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1aa0c:	a904      	add	r1, sp, #16
   1aa0e:	9102      	str	r1, [sp, #8]
   1aa10:	9301      	str	r3, [sp, #4]
   1aa12:	9200      	str	r2, [sp, #0]
   1aa14:	f100 0310 	add.w	r3, r0, #16
   1aa18:	f100 0209 	add.w	r2, r0, #9
   1aa1c:	4631      	mov	r1, r6
   1aa1e:	4628      	mov	r0, r5
   1aa20:	f011 feb3 	bl	2c78a <smp_c1>
	if (err) {
   1aa24:	bb68      	cbnz	r0, 1aa82 <legacy_pairing_random+0x8e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1aa26:	2210      	movs	r2, #16
   1aa28:	eb0d 0102 	add.w	r1, sp, r2
   1aa2c:	f104 0017 	add.w	r0, r4, #23
   1aa30:	f00f f987 	bl	29d42 <memcmp>
   1aa34:	bb38      	cbnz	r0, 1aa86 <legacy_pairing_random+0x92>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
   1aa36:	ab04      	add	r3, sp, #16
   1aa38:	4632      	mov	r2, r6
   1aa3a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1aa3e:	4628      	mov	r0, r5
   1aa40:	f011 feed 	bl	2c81e <smp_s1>
		if (err) {
   1aa44:	b9b8      	cbnz	r0, 1aa76 <legacy_pairing_random+0x82>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1aa46:	2210      	movs	r2, #16
   1aa48:	eb0d 0102 	add.w	r1, sp, r2
   1aa4c:	4628      	mov	r0, r5
   1aa4e:	f00f f99d 	bl	29d8c <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1aa52:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1aa54:	f3bf 8f5b 	dmb	ish
   1aa58:	e853 1f00 	ldrex	r1, [r3]
   1aa5c:	f041 0102 	orr.w	r1, r1, #2
   1aa60:	e843 1200 	strex	r2, r1, [r3]
   1aa64:	2a00      	cmp	r2, #0
   1aa66:	d1f7      	bne.n	1aa58 <legacy_pairing_random+0x64>
   1aa68:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
   1aa6c:	4620      	mov	r0, r4
   1aa6e:	f011 ffc7 	bl	2ca00 <smp_send_pairing_random>
}
   1aa72:	b008      	add	sp, #32
   1aa74:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Calculate STK failed");
   1aa76:	2145      	movs	r1, #69	; 0x45
   1aa78:	4804      	ldr	r0, [pc, #16]	; (1aa8c <legacy_pairing_random+0x98>)
   1aa7a:	f00e f8e8 	bl	28c4e <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1aa7e:	2008      	movs	r0, #8
   1aa80:	e7f7      	b.n	1aa72 <legacy_pairing_random+0x7e>
		return BT_SMP_ERR_UNSPECIFIED;
   1aa82:	2008      	movs	r0, #8
   1aa84:	e7f5      	b.n	1aa72 <legacy_pairing_random+0x7e>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1aa86:	2004      	movs	r0, #4
   1aa88:	e7f3      	b.n	1aa72 <legacy_pairing_random+0x7e>
   1aa8a:	bf00      	nop
   1aa8c:	00032668 	.word	0x00032668

0001aa90 <sc_send_public_key>:
{
   1aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa92:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1aa94:	2240      	movs	r2, #64	; 0x40
   1aa96:	210c      	movs	r1, #12
   1aa98:	f011 fef1 	bl	2c87e <smp_create_pdu>
	if (!req_buf) {
   1aa9c:	b1c0      	cbz	r0, 1aad0 <sc_send_public_key+0x40>
   1aa9e:	4606      	mov	r6, r0
   1aaa0:	2140      	movs	r1, #64	; 0x40
   1aaa2:	3008      	adds	r0, #8
   1aaa4:	f002 f984 	bl	1cdb0 <net_buf_simple_add>
   1aaa8:	4605      	mov	r5, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1aaaa:	4f0a      	ldr	r7, [pc, #40]	; (1aad4 <sc_send_public_key+0x44>)
   1aaac:	2220      	movs	r2, #32
   1aaae:	6839      	ldr	r1, [r7, #0]
   1aab0:	f00f f96c 	bl	29d8c <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1aab4:	6839      	ldr	r1, [r7, #0]
   1aab6:	2220      	movs	r2, #32
   1aab8:	4411      	add	r1, r2
   1aaba:	18a8      	adds	r0, r5, r2
   1aabc:	f00f f966 	bl	29d8c <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1aac0:	2300      	movs	r3, #0
   1aac2:	461a      	mov	r2, r3
   1aac4:	4631      	mov	r1, r6
   1aac6:	4620      	mov	r0, r4
   1aac8:	f011 ff01 	bl	2c8ce <smp_send>
	return 0;
   1aacc:	2000      	movs	r0, #0
}
   1aace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1aad0:	2008      	movs	r0, #8
   1aad2:	e7fc      	b.n	1aace <sc_send_public_key+0x3e>
   1aad4:	20002b38 	.word	0x20002b38

0001aad8 <sys_memcpy_swap>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1aad8:	4288      	cmp	r0, r1
   1aada:	d902      	bls.n	1aae2 <sys_memcpy_swap+0xa>
   1aadc:	188b      	adds	r3, r1, r2
   1aade:	4283      	cmp	r3, r0
   1aae0:	d904      	bls.n	1aaec <sys_memcpy_swap+0x14>
   1aae2:	4288      	cmp	r0, r1
   1aae4:	d205      	bcs.n	1aaf2 <sys_memcpy_swap+0x1a>
   1aae6:	1883      	adds	r3, r0, r2
   1aae8:	428b      	cmp	r3, r1
   1aaea:	d802      	bhi.n	1aaf2 <sys_memcpy_swap+0x1a>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   1aaec:	1e53      	subs	r3, r2, #1
   1aaee:	4419      	add	r1, r3

	for (; length > 0; length--) {
   1aaf0:	e011      	b.n	1ab16 <sys_memcpy_swap+0x3e>
{
   1aaf2:	b510      	push	{r4, lr}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1aaf4:	4c09      	ldr	r4, [pc, #36]	; (1ab1c <sys_memcpy_swap+0x44>)
   1aaf6:	f240 2215 	movw	r2, #533	; 0x215
   1aafa:	4621      	mov	r1, r4
   1aafc:	4808      	ldr	r0, [pc, #32]	; (1ab20 <sys_memcpy_swap+0x48>)
   1aafe:	f00e f886 	bl	28c0e <assert_print>
   1ab02:	f240 2115 	movw	r1, #533	; 0x215
   1ab06:	4620      	mov	r0, r4
   1ab08:	f00e f87a 	bl	28c00 <assert_post_action>
		*pdst++ = *psrc--;
   1ab0c:	f811 3901 	ldrb.w	r3, [r1], #-1
   1ab10:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1ab14:	3a01      	subs	r2, #1
   1ab16:	2a00      	cmp	r2, #0
   1ab18:	d1f8      	bne.n	1ab0c <sys_memcpy_swap+0x34>
   1ab1a:	4770      	bx	lr
   1ab1c:	00032684 	.word	0x00032684
   1ab20:	00030128 	.word	0x00030128

0001ab24 <smp_send_pairing_confirm>:
{
   1ab24:	b570      	push	{r4, r5, r6, lr}
   1ab26:	b082      	sub	sp, #8
   1ab28:	4605      	mov	r5, r0
	switch (smp->method) {
   1ab2a:	7a04      	ldrb	r4, [r0, #8]
   1ab2c:	4622      	mov	r2, r4
   1ab2e:	2c02      	cmp	r4, #2
   1ab30:	d808      	bhi.n	1ab44 <smp_send_pairing_confirm+0x20>
   1ab32:	b263      	sxtb	r3, r4
   1ab34:	bbab      	cbnz	r3, 1aba2 <smp_send_pairing_confirm+0x7e>
   1ab36:	b144      	cbz	r4, 1ab4a <smp_send_pairing_confirm+0x26>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1ab38:	2145      	movs	r1, #69	; 0x45
   1ab3a:	4822      	ldr	r0, [pc, #136]	; (1abc4 <smp_send_pairing_confirm+0xa0>)
   1ab3c:	f00e f887 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1ab40:	2008      	movs	r0, #8
   1ab42:	e02c      	b.n	1ab9e <smp_send_pairing_confirm+0x7a>
	switch (smp->method) {
   1ab44:	2c03      	cmp	r4, #3
   1ab46:	d1f7      	bne.n	1ab38 <smp_send_pairing_confirm+0x14>
   1ab48:	2400      	movs	r4, #0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1ab4a:	2210      	movs	r2, #16
   1ab4c:	2103      	movs	r1, #3
   1ab4e:	4628      	mov	r0, r5
   1ab50:	f011 fe95 	bl	2c87e <smp_create_pdu>
	if (!buf) {
   1ab54:	4606      	mov	r6, r0
   1ab56:	b398      	cbz	r0, 1abc0 <smp_send_pairing_confirm+0x9c>
   1ab58:	2110      	movs	r1, #16
   1ab5a:	3008      	adds	r0, #8
   1ab5c:	f002 f928 	bl	1cdb0 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1ab60:	9000      	str	r0, [sp, #0]
   1ab62:	4623      	mov	r3, r4
   1ab64:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1ab68:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1ab6c:	4816      	ldr	r0, [pc, #88]	; (1abc8 <smp_send_pairing_confirm+0xa4>)
   1ab6e:	6800      	ldr	r0, [r0, #0]
   1ab70:	f011 ff9e 	bl	2cab0 <smp_f4>
   1ab74:	b9f8      	cbnz	r0, 1abb6 <smp_send_pairing_confirm+0x92>
	smp_send(smp, buf, NULL, NULL);
   1ab76:	2300      	movs	r3, #0
   1ab78:	461a      	mov	r2, r3
   1ab7a:	4631      	mov	r1, r6
   1ab7c:	4628      	mov	r0, r5
   1ab7e:	f011 fea6 	bl	2c8ce <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1ab82:	3504      	adds	r5, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ab84:	f3bf 8f5b 	dmb	ish
   1ab88:	e855 3f00 	ldrex	r3, [r5]
   1ab8c:	f023 0301 	bic.w	r3, r3, #1
   1ab90:	e845 3200 	strex	r2, r3, [r5]
   1ab94:	2a00      	cmp	r2, #0
   1ab96:	d1f7      	bne.n	1ab88 <smp_send_pairing_confirm+0x64>
   1ab98:	f3bf 8f5b 	dmb	ish
	return 0;
   1ab9c:	2000      	movs	r0, #0
}
   1ab9e:	b002      	add	sp, #8
   1aba0:	bd70      	pop	{r4, r5, r6, pc}
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1aba2:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1aba6:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1abaa:	40dc      	lsrs	r4, r3
   1abac:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1abb0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
		break;
   1abb4:	e7c9      	b.n	1ab4a <smp_send_pairing_confirm+0x26>
		net_buf_unref(buf);
   1abb6:	4630      	mov	r0, r6
   1abb8:	f001 fff8 	bl	1cbac <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1abbc:	2008      	movs	r0, #8
   1abbe:	e7ee      	b.n	1ab9e <smp_send_pairing_confirm+0x7a>
		return BT_SMP_ERR_UNSPECIFIED;
   1abc0:	2008      	movs	r0, #8
   1abc2:	e7ec      	b.n	1ab9e <smp_send_pairing_confirm+0x7a>
   1abc4:	000326b8 	.word	0x000326b8
   1abc8:	20002b38 	.word	0x20002b38

0001abcc <smp_pairing_confirm>:
{
   1abcc:	b538      	push	{r3, r4, r5, lr}
   1abce:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1abd0:	6889      	ldr	r1, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1abd2:	1d05      	adds	r5, r0, #4
   1abd4:	f3bf 8f5b 	dmb	ish
   1abd8:	e855 3f00 	ldrex	r3, [r5]
   1abdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1abe0:	e845 3200 	strex	r2, r3, [r5]
   1abe4:	2a00      	cmp	r2, #0
   1abe6:	d1f7      	bne.n	1abd8 <smp_pairing_confirm+0xc>
   1abe8:	f3bf 8f5b 	dmb	ish
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1abec:	2210      	movs	r2, #16
   1abee:	f104 0017 	add.w	r0, r4, #23
   1abf2:	f00f f8cb 	bl	29d8c <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1abf6:	2105      	movs	r1, #5
   1abf8:	4628      	mov	r0, r5
   1abfa:	f011 fcfb 	bl	2c5f4 <atomic_test_bit>
   1abfe:	b1a0      	cbz	r0, 1ac2a <smp_pairing_confirm+0x5e>
	switch (smp->method) {
   1ac00:	7a22      	ldrb	r2, [r4, #8]
   1ac02:	2a01      	cmp	r2, #1
   1ac04:	d015      	beq.n	1ac32 <smp_pairing_confirm+0x66>
   1ac06:	2a02      	cmp	r2, #2
   1ac08:	d136      	bne.n	1ac78 <smp_pairing_confirm+0xac>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ac0a:	f3bf 8f5b 	dmb	ish
   1ac0e:	e854 3f00 	ldrex	r3, [r4]
   1ac12:	f043 0310 	orr.w	r3, r3, #16
   1ac16:	e844 3200 	strex	r2, r3, [r4]
   1ac1a:	2a00      	cmp	r2, #0
   1ac1c:	d1f7      	bne.n	1ac0e <smp_pairing_confirm+0x42>
   1ac1e:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
   1ac22:	4620      	mov	r0, r4
   1ac24:	f7ff ff7e 	bl	1ab24 <smp_send_pairing_confirm>
}
   1ac28:	bd38      	pop	{r3, r4, r5, pc}
		return legacy_pairing_confirm(smp);
   1ac2a:	4620      	mov	r0, r4
   1ac2c:	f011 fea7 	bl	2c97e <legacy_pairing_confirm>
   1ac30:	e7fa      	b.n	1ac28 <smp_pairing_confirm+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1ac32:	210a      	movs	r1, #10
   1ac34:	4628      	mov	r0, r5
   1ac36:	f011 fcdd 	bl	2c5f4 <atomic_test_bit>
   1ac3a:	b978      	cbnz	r0, 1ac5c <smp_pairing_confirm+0x90>
   1ac3c:	f3bf 8f5b 	dmb	ish
   1ac40:	e854 3f00 	ldrex	r3, [r4]
   1ac44:	f043 0310 	orr.w	r3, r3, #16
   1ac48:	e844 3200 	strex	r2, r3, [r4]
   1ac4c:	2a00      	cmp	r2, #0
   1ac4e:	d1f7      	bne.n	1ac40 <smp_pairing_confirm+0x74>
   1ac50:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
   1ac54:	4620      	mov	r0, r4
   1ac56:	f7ff ff65 	bl	1ab24 <smp_send_pairing_confirm>
   1ac5a:	e7e5      	b.n	1ac28 <smp_pairing_confirm+0x5c>
   1ac5c:	f3bf 8f5b 	dmb	ish
   1ac60:	e855 3f00 	ldrex	r3, [r5]
   1ac64:	f043 0301 	orr.w	r3, r3, #1
   1ac68:	e845 3200 	strex	r2, r3, [r5]
   1ac6c:	2a00      	cmp	r2, #0
   1ac6e:	d1f7      	bne.n	1ac60 <smp_pairing_confirm+0x94>
   1ac70:	f3bf 8f5b 	dmb	ish
			return 0;
   1ac74:	2000      	movs	r0, #0
   1ac76:	e7d7      	b.n	1ac28 <smp_pairing_confirm+0x5c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1ac78:	2145      	movs	r1, #69	; 0x45
   1ac7a:	4802      	ldr	r0, [pc, #8]	; (1ac84 <smp_pairing_confirm+0xb8>)
   1ac7c:	f00d ffe7 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1ac80:	2008      	movs	r0, #8
   1ac82:	e7d1      	b.n	1ac28 <smp_pairing_confirm+0x5c>
   1ac84:	000326b8 	.word	0x000326b8

0001ac88 <sc_smp_check_confirm>:
{
   1ac88:	b510      	push	{r4, lr}
   1ac8a:	b086      	sub	sp, #24
   1ac8c:	4604      	mov	r4, r0
	switch (smp->method) {
   1ac8e:	7a02      	ldrb	r2, [r0, #8]
   1ac90:	2a05      	cmp	r2, #5
   1ac92:	d80e      	bhi.n	1acb2 <sc_smp_check_confirm+0x2a>
   1ac94:	e8df f002 	tbb	[pc, r2]
   1ac98:	13030313 	.word	0x13030313
   1ac9c:	2e0d      	.short	0x2e0d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1ac9e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   1aca2:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   1aca6:	40d3      	lsrs	r3, r2
   1aca8:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1acac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		break;
   1acb0:	e006      	b.n	1acc0 <sc_smp_check_confirm+0x38>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1acb2:	2145      	movs	r1, #69	; 0x45
   1acb4:	4811      	ldr	r0, [pc, #68]	; (1acfc <sc_smp_check_confirm+0x74>)
   1acb6:	f00d ffca 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1acba:	2008      	movs	r0, #8
   1acbc:	e012      	b.n	1ace4 <sc_smp_check_confirm+0x5c>
	switch (smp->method) {
   1acbe:	2300      	movs	r3, #0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1acc0:	aa02      	add	r2, sp, #8
   1acc2:	9200      	str	r2, [sp, #0]
   1acc4:	f104 0237 	add.w	r2, r4, #55	; 0x37
   1acc8:	490d      	ldr	r1, [pc, #52]	; (1ad00 <sc_smp_check_confirm+0x78>)
   1acca:	6809      	ldr	r1, [r1, #0]
   1accc:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1acd0:	f011 feee 	bl	2cab0 <smp_f4>
   1acd4:	b940      	cbnz	r0, 1ace8 <sc_smp_check_confirm+0x60>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1acd6:	2210      	movs	r2, #16
   1acd8:	a902      	add	r1, sp, #8
   1acda:	f104 0017 	add.w	r0, r4, #23
   1acde:	f00f f830 	bl	29d42 <memcmp>
   1ace2:	b948      	cbnz	r0, 1acf8 <sc_smp_check_confirm+0x70>
}
   1ace4:	b006      	add	sp, #24
   1ace6:	bd10      	pop	{r4, pc}
		BT_ERR("Calculate confirm failed");
   1ace8:	2145      	movs	r1, #69	; 0x45
   1acea:	4806      	ldr	r0, [pc, #24]	; (1ad04 <sc_smp_check_confirm+0x7c>)
   1acec:	f00d ffaf 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1acf0:	2008      	movs	r0, #8
   1acf2:	e7f7      	b.n	1ace4 <sc_smp_check_confirm+0x5c>
	switch (smp->method) {
   1acf4:	2000      	movs	r0, #0
   1acf6:	e7f5      	b.n	1ace4 <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1acf8:	2004      	movs	r0, #4
   1acfa:	e7f3      	b.n	1ace4 <sc_smp_check_confirm+0x5c>
   1acfc:	000326b8 	.word	0x000326b8
   1ad00:	20002b38 	.word	0x20002b38
   1ad04:	000326dc 	.word	0x000326dc

0001ad08 <smp_f5>:
{
   1ad08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad0a:	b09b      	sub	sp, #108	; 0x6c
   1ad0c:	4686      	mov	lr, r0
   1ad0e:	460f      	mov	r7, r1
   1ad10:	4616      	mov	r6, r2
   1ad12:	461d      	mov	r5, r3
	uint8_t m[53] = { 0x00, /* counter */
   1ad14:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   1ad18:	4c2e      	ldr	r4, [pc, #184]	; (1add4 <smp_f5+0xcc>)
   1ad1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ad1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1ad20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ad22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1ad26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ad28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1ad2c:	e894 0003 	ldmia.w	r4, {r0, r1}
   1ad30:	f84c 0b04 	str.w	r0, [ip], #4
   1ad34:	f88c 1000 	strb.w	r1, [ip]
	sys_memcpy_swap(ws, w, 32);
   1ad38:	2220      	movs	r2, #32
   1ad3a:	4671      	mov	r1, lr
   1ad3c:	4668      	mov	r0, sp
   1ad3e:	f7ff fecb 	bl	1aad8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1ad42:	ab08      	add	r3, sp, #32
   1ad44:	2220      	movs	r2, #32
   1ad46:	4669      	mov	r1, sp
   1ad48:	4823      	ldr	r0, [pc, #140]	; (1add8 <smp_f5+0xd0>)
   1ad4a:	f011 fe8f 	bl	2ca6c <bt_smp_aes_cmac>
	if (err) {
   1ad4e:	4604      	mov	r4, r0
   1ad50:	b110      	cbz	r0, 1ad58 <smp_f5+0x50>
}
   1ad52:	4620      	mov	r0, r4
   1ad54:	b01b      	add	sp, #108	; 0x6c
   1ad56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_memcpy_swap(m + 5, n1, 16);
   1ad58:	2210      	movs	r2, #16
   1ad5a:	4639      	mov	r1, r7
   1ad5c:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1ad60:	f7ff feba 	bl	1aad8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1ad64:	2210      	movs	r2, #16
   1ad66:	4631      	mov	r1, r6
   1ad68:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1ad6c:	f7ff feb4 	bl	1aad8 <sys_memcpy_swap>
	m[37] = a1->type;
   1ad70:	4629      	mov	r1, r5
   1ad72:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ad76:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1ad7a:	2206      	movs	r2, #6
   1ad7c:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   1ad80:	f7ff feaa 	bl	1aad8 <sys_memcpy_swap>
	m[44] = a2->type;
   1ad84:	9920      	ldr	r1, [sp, #128]	; 0x80
   1ad86:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ad8a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1ad8e:	2206      	movs	r2, #6
   1ad90:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   1ad94:	f7ff fea0 	bl	1aad8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1ad98:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1ad9a:	2235      	movs	r2, #53	; 0x35
   1ad9c:	a90c      	add	r1, sp, #48	; 0x30
   1ad9e:	a808      	add	r0, sp, #32
   1ada0:	f011 fe64 	bl	2ca6c <bt_smp_aes_cmac>
	if (err) {
   1ada4:	4604      	mov	r4, r0
   1ada6:	2800      	cmp	r0, #0
   1ada8:	d1d3      	bne.n	1ad52 <smp_f5+0x4a>
	sys_mem_swap(mackey, 16);
   1adaa:	2110      	movs	r1, #16
   1adac:	9821      	ldr	r0, [sp, #132]	; 0x84
   1adae:	f011 fb7a 	bl	2c4a6 <sys_mem_swap>
	m[0] = 0x01;
   1adb2:	2301      	movs	r3, #1
   1adb4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1adb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1adba:	2235      	movs	r2, #53	; 0x35
   1adbc:	a90c      	add	r1, sp, #48	; 0x30
   1adbe:	a808      	add	r0, sp, #32
   1adc0:	f011 fe54 	bl	2ca6c <bt_smp_aes_cmac>
	if (err) {
   1adc4:	4604      	mov	r4, r0
   1adc6:	2800      	cmp	r0, #0
   1adc8:	d1c3      	bne.n	1ad52 <smp_f5+0x4a>
	sys_mem_swap(ltk, 16);
   1adca:	2110      	movs	r1, #16
   1adcc:	9822      	ldr	r0, [sp, #136]	; 0x88
   1adce:	f011 fb6a 	bl	2c4a6 <sys_mem_swap>
	return 0;
   1add2:	e7be      	b.n	1ad52 <smp_f5+0x4a>
   1add4:	0002fc28 	.word	0x0002fc28
   1add8:	00032b00 	.word	0x00032b00

0001addc <compute_and_check_and_send_periph_dhcheck>:
{
   1addc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1adde:	b091      	sub	sp, #68	; 0x44
   1ade0:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1ade2:	2210      	movs	r2, #16
   1ade4:	2100      	movs	r1, #0
   1ade6:	eb0d 0002 	add.w	r0, sp, r2
   1adea:	f00e fffe 	bl	29dea <memset>
	switch (smp->method) {
   1adee:	7a22      	ldrb	r2, [r4, #8]
   1adf0:	2a05      	cmp	r2, #5
   1adf2:	d873      	bhi.n	1aedc <compute_and_check_and_send_periph_dhcheck+0x100>
   1adf4:	e8df f002 	tbb	[pc, r2]
   1adf8:	09030309 	.word	0x09030309
   1adfc:	6872      	.short	0x6872
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1adfe:	2204      	movs	r2, #4
   1ae00:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1ae04:	a804      	add	r0, sp, #16
   1ae06:	f00e ffc1 	bl	29d8c <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1ae0a:	f104 0637 	add.w	r6, r4, #55	; 0x37
   1ae0e:	f104 0727 	add.w	r7, r4, #39	; 0x27
		   &smp->chan.chan.conn->le.init_addr,
   1ae12:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1ae16:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   1ae1a:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
		   smp->tk)) {
   1ae1e:	f104 0147 	add.w	r1, r4, #71	; 0x47
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1ae22:	9102      	str	r1, [sp, #8]
   1ae24:	9501      	str	r5, [sp, #4]
   1ae26:	9200      	str	r2, [sp, #0]
   1ae28:	3397      	adds	r3, #151	; 0x97
   1ae2a:	463a      	mov	r2, r7
   1ae2c:	4631      	mov	r1, r6
   1ae2e:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1ae32:	f7ff ff69 	bl	1ad08 <smp_f5>
   1ae36:	2800      	cmp	r0, #0
   1ae38:	d156      	bne.n	1aee8 <compute_and_check_and_send_periph_dhcheck+0x10c>
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1ae3a:	f104 0211 	add.w	r2, r4, #17
		   &smp->chan.chan.conn->le.resp_addr,
   1ae3e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1ae42:	f103 019e 	add.w	r1, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1ae46:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1ae48:	a808      	add	r0, sp, #32
   1ae4a:	9003      	str	r0, [sp, #12]
   1ae4c:	9302      	str	r3, [sp, #8]
   1ae4e:	9101      	str	r1, [sp, #4]
   1ae50:	9200      	str	r2, [sp, #0]
   1ae52:	ab04      	add	r3, sp, #16
   1ae54:	4632      	mov	r2, r6
   1ae56:	4639      	mov	r1, r7
   1ae58:	4628      	mov	r0, r5
   1ae5a:	f011 fe50 	bl	2cafe <smp_f6>
   1ae5e:	2800      	cmp	r0, #0
   1ae60:	d148      	bne.n	1aef4 <compute_and_check_and_send_periph_dhcheck+0x118>
	if (smp->method == LE_SC_OOB) {
   1ae62:	7a23      	ldrb	r3, [r4, #8]
   1ae64:	2b05      	cmp	r3, #5
   1ae66:	d04b      	beq.n	1af00 <compute_and_check_and_send_periph_dhcheck+0x124>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1ae68:	f104 020a 	add.w	r2, r4, #10
		   &smp->chan.chan.conn->le.init_addr,
   1ae6c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1ae70:	f103 0197 	add.w	r1, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1ae74:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1ae76:	a80c      	add	r0, sp, #48	; 0x30
   1ae78:	9003      	str	r0, [sp, #12]
   1ae7a:	9302      	str	r3, [sp, #8]
   1ae7c:	9101      	str	r1, [sp, #4]
   1ae7e:	9200      	str	r2, [sp, #0]
   1ae80:	ab04      	add	r3, sp, #16
   1ae82:	463a      	mov	r2, r7
   1ae84:	4631      	mov	r1, r6
   1ae86:	4628      	mov	r0, r5
   1ae88:	f011 fe39 	bl	2cafe <smp_f6>
   1ae8c:	2800      	cmp	r0, #0
   1ae8e:	d147      	bne.n	1af20 <compute_and_check_and_send_periph_dhcheck+0x144>
	if (memcmp(smp->e, re, 16)) {
   1ae90:	2210      	movs	r2, #16
   1ae92:	a90c      	add	r1, sp, #48	; 0x30
   1ae94:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1ae98:	f00e ff53 	bl	29d42 <memcmp>
   1ae9c:	2800      	cmp	r0, #0
   1ae9e:	d145      	bne.n	1af2c <compute_and_check_and_send_periph_dhcheck+0x150>
	err = sc_smp_send_dhkey_check(smp, e);
   1aea0:	a908      	add	r1, sp, #32
   1aea2:	4620      	mov	r0, r4
   1aea4:	f011 fd91 	bl	2c9ca <sc_smp_send_dhkey_check>
	if (err) {
   1aea8:	b960      	cbnz	r0, 1aec4 <compute_and_check_and_send_periph_dhcheck+0xe8>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1aeaa:	3404      	adds	r4, #4
   1aeac:	f3bf 8f5b 	dmb	ish
   1aeb0:	e854 3f00 	ldrex	r3, [r4]
   1aeb4:	f043 0302 	orr.w	r3, r3, #2
   1aeb8:	e844 3200 	strex	r2, r3, [r4]
   1aebc:	2a00      	cmp	r2, #0
   1aebe:	d1f7      	bne.n	1aeb0 <compute_and_check_and_send_periph_dhcheck+0xd4>
   1aec0:	f3bf 8f5b 	dmb	ish
}
   1aec4:	b011      	add	sp, #68	; 0x44
   1aec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (smp->oobd_remote) {
   1aec8:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1aecc:	2900      	cmp	r1, #0
   1aece:	d09c      	beq.n	1ae0a <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1aed0:	2210      	movs	r2, #16
   1aed2:	eb0d 0002 	add.w	r0, sp, r2
   1aed6:	f00e ff59 	bl	29d8c <memcpy>
   1aeda:	e796      	b.n	1ae0a <compute_and_check_and_send_periph_dhcheck+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1aedc:	2145      	movs	r1, #69	; 0x45
   1aede:	4814      	ldr	r0, [pc, #80]	; (1af30 <compute_and_check_and_send_periph_dhcheck+0x154>)
   1aee0:	f00d feb5 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1aee4:	2008      	movs	r0, #8
   1aee6:	e7ed      	b.n	1aec4 <compute_and_check_and_send_periph_dhcheck+0xe8>
		BT_ERR("Calculate LTK failed");
   1aee8:	2145      	movs	r1, #69	; 0x45
   1aeea:	4812      	ldr	r0, [pc, #72]	; (1af34 <compute_and_check_and_send_periph_dhcheck+0x158>)
   1aeec:	f00d feaf 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1aef0:	2008      	movs	r0, #8
   1aef2:	e7e7      	b.n	1aec4 <compute_and_check_and_send_periph_dhcheck+0xe8>
		BT_ERR("Calculate local DHKey check failed");
   1aef4:	2145      	movs	r1, #69	; 0x45
   1aef6:	4810      	ldr	r0, [pc, #64]	; (1af38 <compute_and_check_and_send_periph_dhcheck+0x15c>)
   1aef8:	f00d fea9 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1aefc:	2008      	movs	r0, #8
   1aefe:	e7e1      	b.n	1aec4 <compute_and_check_and_send_periph_dhcheck+0xe8>
		if (smp->oobd_local) {
   1af00:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1af04:	b129      	cbz	r1, 1af12 <compute_and_check_and_send_periph_dhcheck+0x136>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1af06:	2210      	movs	r2, #16
   1af08:	eb0d 0002 	add.w	r0, sp, r2
   1af0c:	f00e ff3e 	bl	29d8c <memcpy>
   1af10:	e7aa      	b.n	1ae68 <compute_and_check_and_send_periph_dhcheck+0x8c>
			memset(r, 0, sizeof(r));
   1af12:	2210      	movs	r2, #16
   1af14:	2100      	movs	r1, #0
   1af16:	eb0d 0002 	add.w	r0, sp, r2
   1af1a:	f00e ff66 	bl	29dea <memset>
   1af1e:	e7a3      	b.n	1ae68 <compute_and_check_and_send_periph_dhcheck+0x8c>
		BT_ERR("Calculate remote DHKey check failed");
   1af20:	2145      	movs	r1, #69	; 0x45
   1af22:	4806      	ldr	r0, [pc, #24]	; (1af3c <compute_and_check_and_send_periph_dhcheck+0x160>)
   1af24:	f00d fe93 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1af28:	2008      	movs	r0, #8
   1af2a:	e7cb      	b.n	1aec4 <compute_and_check_and_send_periph_dhcheck+0xe8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1af2c:	200b      	movs	r0, #11
   1af2e:	e7c9      	b.n	1aec4 <compute_and_check_and_send_periph_dhcheck+0xe8>
   1af30:	000326b8 	.word	0x000326b8
   1af34:	000326fc 	.word	0x000326fc
   1af38:	00032718 	.word	0x00032718
   1af3c:	00032740 	.word	0x00032740

0001af40 <smp_g2>:
{
   1af40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af42:	b099      	sub	sp, #100	; 0x64
   1af44:	460f      	mov	r7, r1
   1af46:	4614      	mov	r4, r2
   1af48:	461d      	mov	r5, r3
   1af4a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   1af4c:	2220      	movs	r2, #32
   1af4e:	4601      	mov	r1, r0
   1af50:	a804      	add	r0, sp, #16
   1af52:	f7ff fdc1 	bl	1aad8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1af56:	2220      	movs	r2, #32
   1af58:	4639      	mov	r1, r7
   1af5a:	a80c      	add	r0, sp, #48	; 0x30
   1af5c:	f7ff fdbc 	bl	1aad8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1af60:	2210      	movs	r2, #16
   1af62:	4629      	mov	r1, r5
   1af64:	a814      	add	r0, sp, #80	; 0x50
   1af66:	f7ff fdb7 	bl	1aad8 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1af6a:	2210      	movs	r2, #16
   1af6c:	4621      	mov	r1, r4
   1af6e:	4668      	mov	r0, sp
   1af70:	f7ff fdb2 	bl	1aad8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1af74:	466b      	mov	r3, sp
   1af76:	2250      	movs	r2, #80	; 0x50
   1af78:	a904      	add	r1, sp, #16
   1af7a:	4668      	mov	r0, sp
   1af7c:	f011 fd76 	bl	2ca6c <bt_smp_aes_cmac>
	if (err) {
   1af80:	4604      	mov	r4, r0
   1af82:	b110      	cbz	r0, 1af8a <smp_g2+0x4a>
}
   1af84:	4620      	mov	r0, r4
   1af86:	b019      	add	sp, #100	; 0x64
   1af88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
   1af8a:	2204      	movs	r2, #4
   1af8c:	a903      	add	r1, sp, #12
   1af8e:	4630      	mov	r0, r6
   1af90:	f00e fefc 	bl	29d8c <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1af94:	6832      	ldr	r2, [r6, #0]
   1af96:	0a13      	lsrs	r3, r2, #8
   1af98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1af9c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1afa0:	0211      	lsls	r1, r2, #8
   1afa2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1afa6:	430b      	orrs	r3, r1
   1afa8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1afac:	4a04      	ldr	r2, [pc, #16]	; (1afc0 <smp_g2+0x80>)
   1afae:	fba2 1203 	umull	r1, r2, r2, r3
   1afb2:	0c92      	lsrs	r2, r2, #18
   1afb4:	4903      	ldr	r1, [pc, #12]	; (1afc4 <smp_g2+0x84>)
   1afb6:	fb01 3212 	mls	r2, r1, r2, r3
   1afba:	6032      	str	r2, [r6, #0]
	return 0;
   1afbc:	e7e2      	b.n	1af84 <smp_g2+0x44>
   1afbe:	bf00      	nop
   1afc0:	431bde83 	.word	0x431bde83
   1afc4:	000f4240 	.word	0x000f4240

0001afc8 <display_passkey>:
{
   1afc8:	b570      	push	{r4, r5, r6, lr}
   1afca:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1afcc:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1afd0:	f7ff fc10 	bl	1a7f4 <latch_auth_cb>
   1afd4:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1afd6:	2104      	movs	r1, #4
   1afd8:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1afdc:	f004 fe02 	bl	1fbe4 <bt_rand>
   1afe0:	bb20      	cbnz	r0, 1b02c <display_passkey+0x64>
		smp->passkey %= 1000000;
   1afe2:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   1afe6:	4b12      	ldr	r3, [pc, #72]	; (1b030 <display_passkey+0x68>)
   1afe8:	fba3 1302 	umull	r1, r3, r3, r2
   1afec:	0c9b      	lsrs	r3, r3, #18
   1afee:	4911      	ldr	r1, [pc, #68]	; (1b034 <display_passkey+0x6c>)
   1aff0:	fb01 2213 	mls	r2, r1, r3, r2
   1aff4:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1aff8:	2300      	movs	r3, #0
   1affa:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1affe:	b19d      	cbz	r5, 1b028 <display_passkey+0x60>
   1b000:	682b      	ldr	r3, [r5, #0]
   1b002:	b18b      	cbz	r3, 1b028 <display_passkey+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b004:	1d23      	adds	r3, r4, #4
   1b006:	f3bf 8f5b 	dmb	ish
   1b00a:	e853 1f00 	ldrex	r1, [r3]
   1b00e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   1b012:	e843 1200 	strex	r2, r1, [r3]
   1b016:	2a00      	cmp	r2, #0
   1b018:	d1f7      	bne.n	1b00a <display_passkey+0x42>
   1b01a:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1b01e:	682b      	ldr	r3, [r5, #0]
   1b020:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1b024:	4630      	mov	r0, r6
   1b026:	4798      	blx	r3
	return 0;
   1b028:	2000      	movs	r0, #0
}
   1b02a:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1b02c:	2008      	movs	r0, #8
   1b02e:	e7fc      	b.n	1b02a <display_passkey+0x62>
   1b030:	431bde83 	.word	0x431bde83
   1b034:	000f4240 	.word	0x000f4240

0001b038 <smp_pairing_random>:
{
   1b038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b03c:	b084      	sub	sp, #16
   1b03e:	4604      	mov	r4, r0
   1b040:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b042:	f7ff fbd7 	bl	1a7f4 <latch_auth_cb>
   1b046:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1b048:	f104 0837 	add.w	r8, r4, #55	; 0x37
   1b04c:	2210      	movs	r2, #16
   1b04e:	68a9      	ldr	r1, [r5, #8]
   1b050:	4640      	mov	r0, r8
   1b052:	f00e fe9b 	bl	29d8c <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b056:	1d27      	adds	r7, r4, #4
   1b058:	2105      	movs	r1, #5
   1b05a:	4638      	mov	r0, r7
   1b05c:	f011 faca 	bl	2c5f4 <atomic_test_bit>
   1b060:	b140      	cbz	r0, 1b074 <smp_pairing_random+0x3c>
	switch (smp->method) {
   1b062:	7a22      	ldrb	r2, [r4, #8]
   1b064:	2a05      	cmp	r2, #5
   1b066:	f200 80b3 	bhi.w	1b1d0 <smp_pairing_random+0x198>
   1b06a:	e8df f002 	tbb	[pc, r2]
   1b06e:	4727      	.short	0x4727
   1b070:	89b10847 	.word	0x89b10847
		return legacy_pairing_random(smp);
   1b074:	4620      	mov	r0, r4
   1b076:	f7ff fcbd 	bl	1a9f4 <legacy_pairing_random>
   1b07a:	4605      	mov	r5, r0
   1b07c:	e03a      	b.n	1b0f4 <smp_pairing_random+0xbc>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1b07e:	ab03      	add	r3, sp, #12
   1b080:	9300      	str	r3, [sp, #0]
   1b082:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1b086:	4642      	mov	r2, r8
   1b088:	4958      	ldr	r1, [pc, #352]	; (1b1ec <smp_pairing_random+0x1b4>)
   1b08a:	6809      	ldr	r1, [r1, #0]
   1b08c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b090:	f7ff ff56 	bl	1af40 <smp_g2>
   1b094:	2800      	cmp	r0, #0
   1b096:	f040 80a1 	bne.w	1b1dc <smp_pairing_random+0x1a4>
   1b09a:	f3bf 8f5b 	dmb	ish
   1b09e:	e857 3f00 	ldrex	r3, [r7]
   1b0a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b0a6:	e847 3200 	strex	r2, r3, [r7]
   1b0aa:	2a00      	cmp	r2, #0
   1b0ac:	d1f7      	bne.n	1b09e <smp_pairing_random+0x66>
   1b0ae:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1b0b2:	68b3      	ldr	r3, [r6, #8]
   1b0b4:	9903      	ldr	r1, [sp, #12]
   1b0b6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b0ba:	4798      	blx	r3
   1b0bc:	f3bf 8f5b 	dmb	ish
   1b0c0:	e854 3f00 	ldrex	r3, [r4]
   1b0c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1b0c8:	e844 3200 	strex	r2, r3, [r4]
   1b0cc:	2a00      	cmp	r2, #0
   1b0ce:	d1f7      	bne.n	1b0c0 <smp_pairing_random+0x88>
   1b0d0:	f3bf 8f5b 	dmb	ish
   1b0d4:	f3bf 8f5b 	dmb	ish
   1b0d8:	e857 3f00 	ldrex	r3, [r7]
   1b0dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1b0e0:	e847 3200 	strex	r2, r3, [r7]
   1b0e4:	2a00      	cmp	r2, #0
   1b0e6:	d1f7      	bne.n	1b0d8 <smp_pairing_random+0xa0>
   1b0e8:	f3bf 8f5b 	dmb	ish
	return smp_send_pairing_random(smp);
   1b0ec:	4620      	mov	r0, r4
   1b0ee:	f011 fc87 	bl	2ca00 <smp_send_pairing_random>
   1b0f2:	4605      	mov	r5, r0
}
   1b0f4:	4628      	mov	r0, r5
   1b0f6:	b004      	add	sp, #16
   1b0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = sc_smp_check_confirm(smp);
   1b0fc:	4620      	mov	r0, r4
   1b0fe:	f7ff fdc3 	bl	1ac88 <sc_smp_check_confirm>
		if (err) {
   1b102:	4605      	mov	r5, r0
   1b104:	2800      	cmp	r0, #0
   1b106:	d1f5      	bne.n	1b0f4 <smp_pairing_random+0xbc>
   1b108:	f3bf 8f5b 	dmb	ish
   1b10c:	e854 3f00 	ldrex	r3, [r4]
   1b110:	f043 0308 	orr.w	r3, r3, #8
   1b114:	e844 3200 	strex	r2, r3, [r4]
   1b118:	2a00      	cmp	r2, #0
   1b11a:	d1f7      	bne.n	1b10c <smp_pairing_random+0xd4>
   1b11c:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_random(smp);
   1b120:	4620      	mov	r0, r4
   1b122:	f011 fc6d 	bl	2ca00 <smp_send_pairing_random>
		if (err) {
   1b126:	4605      	mov	r5, r0
   1b128:	2800      	cmp	r0, #0
   1b12a:	d1e3      	bne.n	1b0f4 <smp_pairing_random+0xbc>
		smp->passkey_round++;
   1b12c:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1b130:	3301      	adds	r3, #1
   1b132:	b2db      	uxtb	r3, r3
   1b134:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1b138:	2b14      	cmp	r3, #20
   1b13a:	d008      	beq.n	1b14e <smp_pairing_random+0x116>
		if (bt_rand(smp->prnd, 16)) {
   1b13c:	2110      	movs	r1, #16
   1b13e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1b142:	f004 fd4f 	bl	1fbe4 <bt_rand>
   1b146:	2800      	cmp	r0, #0
   1b148:	d0d4      	beq.n	1b0f4 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_UNSPECIFIED;
   1b14a:	2508      	movs	r5, #8
   1b14c:	e7d2      	b.n	1b0f4 <smp_pairing_random+0xbc>
   1b14e:	f3bf 8f5b 	dmb	ish
   1b152:	e854 3f00 	ldrex	r3, [r4]
   1b156:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1b15a:	e844 3200 	strex	r2, r3, [r4]
   1b15e:	2a00      	cmp	r2, #0
   1b160:	d1f7      	bne.n	1b152 <smp_pairing_random+0x11a>
   1b162:	f3bf 8f5b 	dmb	ish
   1b166:	f3bf 8f5b 	dmb	ish
   1b16a:	e857 3f00 	ldrex	r3, [r7]
   1b16e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1b172:	e847 3200 	strex	r2, r3, [r7]
   1b176:	2a00      	cmp	r2, #0
   1b178:	d1f7      	bne.n	1b16a <smp_pairing_random+0x132>
   1b17a:	f3bf 8f5b 	dmb	ish
			return 0;
   1b17e:	e7b9      	b.n	1b0f4 <smp_pairing_random+0xbc>
		if (bt_rand(smp->prnd, 16)) {
   1b180:	2110      	movs	r1, #16
   1b182:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1b186:	f004 fd2d 	bl	1fbe4 <bt_rand>
   1b18a:	bb48      	cbnz	r0, 1b1e0 <smp_pairing_random+0x1a8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1b18c:	b356      	cbz	r6, 1b1e4 <smp_pairing_random+0x1ac>
   1b18e:	68f3      	ldr	r3, [r6, #12]
   1b190:	b353      	cbz	r3, 1b1e8 <smp_pairing_random+0x1b0>
			struct bt_conn_oob_info info = {
   1b192:	4b17      	ldr	r3, [pc, #92]	; (1b1f0 <smp_pairing_random+0x1b8>)
   1b194:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   1b196:	f8ad 3008 	strh.w	r3, [sp, #8]
			le_sc_oob_config_set(smp, &info);
   1b19a:	a902      	add	r1, sp, #8
   1b19c:	4620      	mov	r0, r4
   1b19e:	f011 fa03 	bl	2c5a8 <le_sc_oob_config_set>
			smp->oobd_local = NULL;
   1b1a2:	2500      	movs	r5, #0
   1b1a4:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
			smp->oobd_remote = NULL;
   1b1a8:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
   1b1ac:	f3bf 8f5b 	dmb	ish
   1b1b0:	e857 3f00 	ldrex	r3, [r7]
   1b1b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1b1b8:	e847 3200 	strex	r2, r3, [r7]
   1b1bc:	2a00      	cmp	r2, #0
   1b1be:	d1f7      	bne.n	1b1b0 <smp_pairing_random+0x178>
   1b1c0:	f3bf 8f5b 	dmb	ish
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1b1c4:	68f3      	ldr	r3, [r6, #12]
   1b1c6:	a902      	add	r1, sp, #8
   1b1c8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b1cc:	4798      	blx	r3
			return 0;
   1b1ce:	e791      	b.n	1b0f4 <smp_pairing_random+0xbc>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b1d0:	2145      	movs	r1, #69	; 0x45
   1b1d2:	4808      	ldr	r0, [pc, #32]	; (1b1f4 <smp_pairing_random+0x1bc>)
   1b1d4:	f00d fd3b 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b1d8:	2508      	movs	r5, #8
   1b1da:	e78b      	b.n	1b0f4 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_UNSPECIFIED;
   1b1dc:	2508      	movs	r5, #8
   1b1de:	e789      	b.n	1b0f4 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_UNSPECIFIED;
   1b1e0:	2508      	movs	r5, #8
   1b1e2:	e787      	b.n	1b0f4 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1b1e4:	2502      	movs	r5, #2
   1b1e6:	e785      	b.n	1b0f4 <smp_pairing_random+0xbc>
   1b1e8:	2502      	movs	r5, #2
   1b1ea:	e783      	b.n	1b0f4 <smp_pairing_random+0xbc>
   1b1ec:	20002b38 	.word	0x20002b38
   1b1f0:	0002fc28 	.word	0x0002fc28
   1b1f4:	000326b8 	.word	0x000326b8

0001b1f8 <smp_init>:
{
   1b1f8:	b538      	push	{r3, r4, r5, lr}
   1b1fa:	4604      	mov	r4, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1b1fc:	22ec      	movs	r2, #236	; 0xec
   1b1fe:	2100      	movs	r1, #0
   1b200:	f00e fdf3 	bl	29dea <memset>
	if (bt_rand(smp->prnd, 16)) {
   1b204:	2110      	movs	r1, #16
   1b206:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1b20a:	f004 fceb 	bl	1fbe4 <bt_rand>
   1b20e:	b990      	cbnz	r0, 1b236 <smp_init+0x3e>
   1b210:	4605      	mov	r5, r0
   1b212:	f3bf 8f5b 	dmb	ish
   1b216:	e854 3f00 	ldrex	r3, [r4]
   1b21a:	f043 0320 	orr.w	r3, r3, #32
   1b21e:	e844 3200 	strex	r2, r3, [r4]
   1b222:	2a00      	cmp	r2, #0
   1b224:	d1f7      	bne.n	1b216 <smp_init+0x1e>
   1b226:	f3bf 8f5b 	dmb	ish
	sc_public_key = bt_pub_key_get();
   1b22a:	f7fb fb6f 	bl	1690c <bt_pub_key_get>
   1b22e:	4b03      	ldr	r3, [pc, #12]	; (1b23c <smp_init+0x44>)
   1b230:	6018      	str	r0, [r3, #0]
}
   1b232:	4628      	mov	r0, r5
   1b234:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1b236:	2508      	movs	r5, #8
   1b238:	e7fb      	b.n	1b232 <smp_init+0x3a>
   1b23a:	bf00      	nop
   1b23c:	20002b38 	.word	0x20002b38

0001b240 <legacy_distribute_keys>:
{
   1b240:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b242:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = smp->chan.chan.conn;
   1b244:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	struct bt_keys *keys = conn->le.keys;
   1b248:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1b24c:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   1b250:	f013 0f01 	tst.w	r3, #1
   1b254:	d101      	bne.n	1b25a <legacy_distribute_keys+0x1a>
}
   1b256:	b009      	add	sp, #36	; 0x24
   1b258:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b25a:	4604      	mov	r4, r0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1b25c:	211a      	movs	r1, #26
   1b25e:	a801      	add	r0, sp, #4
   1b260:	f004 fcc0 	bl	1fbe4 <bt_rand>
   1b264:	2800      	cmp	r0, #0
   1b266:	d153      	bne.n	1b310 <legacy_distribute_keys+0xd0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1b268:	2210      	movs	r2, #16
   1b26a:	2106      	movs	r1, #6
   1b26c:	4620      	mov	r0, r4
   1b26e:	f011 fb06 	bl	2c87e <smp_create_pdu>
		if (!buf) {
   1b272:	4607      	mov	r7, r0
   1b274:	2800      	cmp	r0, #0
   1b276:	d050      	beq.n	1b31a <legacy_distribute_keys+0xda>
   1b278:	2110      	movs	r1, #16
   1b27a:	3008      	adds	r0, #8
   1b27c:	f001 fd98 	bl	1cdb0 <net_buf_simple_add>
   1b280:	4606      	mov	r6, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
   1b282:	7b2a      	ldrb	r2, [r5, #12]
   1b284:	a901      	add	r1, sp, #4
   1b286:	f00e fd81 	bl	29d8c <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1b28a:	7b28      	ldrb	r0, [r5, #12]
   1b28c:	280f      	cmp	r0, #15
   1b28e:	d949      	bls.n	1b324 <legacy_distribute_keys+0xe4>
		smp_send(smp, buf, NULL, NULL);
   1b290:	2300      	movs	r3, #0
   1b292:	461a      	mov	r2, r3
   1b294:	4639      	mov	r1, r7
   1b296:	4620      	mov	r0, r4
   1b298:	f011 fb19 	bl	2c8ce <smp_send>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1b29c:	220a      	movs	r2, #10
   1b29e:	2107      	movs	r1, #7
   1b2a0:	4620      	mov	r0, r4
   1b2a2:	f011 faec 	bl	2c87e <smp_create_pdu>
		if (!buf) {
   1b2a6:	4607      	mov	r7, r0
   1b2a8:	2800      	cmp	r0, #0
   1b2aa:	d042      	beq.n	1b332 <legacy_distribute_keys+0xf2>
   1b2ac:	210a      	movs	r1, #10
   1b2ae:	3008      	adds	r0, #8
   1b2b0:	f001 fd7e 	bl	1cdb0 <net_buf_simple_add>
   1b2b4:	4606      	mov	r6, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1b2b6:	2208      	movs	r2, #8
   1b2b8:	a905      	add	r1, sp, #20
   1b2ba:	3002      	adds	r0, #2
   1b2bc:	f00e fd66 	bl	29d8c <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1b2c0:	2202      	movs	r2, #2
   1b2c2:	a907      	add	r1, sp, #28
   1b2c4:	4630      	mov	r0, r6
   1b2c6:	f00e fd61 	bl	29d8c <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1b2ca:	2300      	movs	r3, #0
   1b2cc:	4a1b      	ldr	r2, [pc, #108]	; (1b33c <legacy_distribute_keys+0xfc>)
   1b2ce:	4639      	mov	r1, r7
   1b2d0:	4620      	mov	r0, r4
   1b2d2:	f011 fafc 	bl	2c8ce <smp_send>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b2d6:	210d      	movs	r1, #13
   1b2d8:	1d20      	adds	r0, r4, #4
   1b2da:	f011 f98b 	bl	2c5f4 <atomic_test_bit>
   1b2de:	2800      	cmp	r0, #0
   1b2e0:	d0b9      	beq.n	1b256 <legacy_distribute_keys+0x16>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1b2e2:	2101      	movs	r1, #1
   1b2e4:	4628      	mov	r0, r5
   1b2e6:	f001 f8b7 	bl	1c458 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1b2ea:	2210      	movs	r2, #16
   1b2ec:	a901      	add	r1, sp, #4
   1b2ee:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   1b2f2:	f00e fd4b 	bl	29d8c <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1b2f6:	2208      	movs	r2, #8
   1b2f8:	a905      	add	r1, sp, #20
   1b2fa:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1b2fe:	f00e fd45 	bl	29d8c <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1b302:	2202      	movs	r2, #2
   1b304:	a907      	add	r1, sp, #28
   1b306:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1b30a:	f00e fd3f 	bl	29d8c <memcpy>
   1b30e:	e7a2      	b.n	1b256 <legacy_distribute_keys+0x16>
			BT_ERR("Unable to get random bytes");
   1b310:	2145      	movs	r1, #69	; 0x45
   1b312:	480b      	ldr	r0, [pc, #44]	; (1b340 <legacy_distribute_keys+0x100>)
   1b314:	f00d fc9b 	bl	28c4e <z_log_minimal_printk>
			return;
   1b318:	e79d      	b.n	1b256 <legacy_distribute_keys+0x16>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1b31a:	2145      	movs	r1, #69	; 0x45
   1b31c:	4809      	ldr	r0, [pc, #36]	; (1b344 <legacy_distribute_keys+0x104>)
   1b31e:	f00d fc96 	bl	28c4e <z_log_minimal_printk>
			return;
   1b322:	e798      	b.n	1b256 <legacy_distribute_keys+0x16>
			(void)memset(info->ltk + keys->enc_size, 0,
   1b324:	f1c0 0210 	rsb	r2, r0, #16
   1b328:	2100      	movs	r1, #0
   1b32a:	4430      	add	r0, r6
   1b32c:	f00e fd5d 	bl	29dea <memset>
   1b330:	e7ae      	b.n	1b290 <legacy_distribute_keys+0x50>
			BT_ERR("Unable to allocate Central Ident buffer");
   1b332:	2145      	movs	r1, #69	; 0x45
   1b334:	4804      	ldr	r0, [pc, #16]	; (1b348 <legacy_distribute_keys+0x108>)
   1b336:	f00d fc8a 	bl	28c4e <z_log_minimal_printk>
			return;
   1b33a:	e78c      	b.n	1b256 <legacy_distribute_keys+0x16>
   1b33c:	0002d253 	.word	0x0002d253
   1b340:	0003276c 	.word	0x0003276c
   1b344:	0003278c 	.word	0x0003278c
   1b348:	000327b8 	.word	0x000327b8

0001b34c <bt_smp_distribute_keys>:
{
   1b34c:	b510      	push	{r4, lr}
   1b34e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1b350:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
	struct bt_keys *keys = conn->le.keys;
   1b354:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
	if (!keys) {
   1b358:	b133      	cbz	r3, 1b368 <bt_smp_distribute_keys+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b35a:	2105      	movs	r1, #5
   1b35c:	1d20      	adds	r0, r4, #4
   1b35e:	f011 f949 	bl	2c5f4 <atomic_test_bit>
   1b362:	b158      	cbz	r0, 1b37c <bt_smp_distribute_keys+0x30>
	return 0;
   1b364:	2000      	movs	r0, #0
}
   1b366:	bd10      	pop	{r4, pc}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1b368:	3090      	adds	r0, #144	; 0x90
   1b36a:	f7f8 fd11 	bl	13d90 <bt_addr_le_str>
   1b36e:	4602      	mov	r2, r0
   1b370:	2145      	movs	r1, #69	; 0x45
   1b372:	4805      	ldr	r0, [pc, #20]	; (1b388 <bt_smp_distribute_keys+0x3c>)
   1b374:	f00d fc6b 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b378:	2008      	movs	r0, #8
   1b37a:	e7f4      	b.n	1b366 <bt_smp_distribute_keys+0x1a>
		legacy_distribute_keys(smp);
   1b37c:	4620      	mov	r0, r4
   1b37e:	f7ff ff5f 	bl	1b240 <legacy_distribute_keys>
	return 0;
   1b382:	2000      	movs	r0, #0
   1b384:	e7ef      	b.n	1b366 <bt_smp_distribute_keys+0x1a>
   1b386:	bf00      	nop
   1b388:	000327e8 	.word	0x000327e8

0001b38c <smp_dhkey_generate>:
{
   1b38c:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b38e:	1d04      	adds	r4, r0, #4
   1b390:	f3bf 8f5b 	dmb	ish
   1b394:	e854 3f00 	ldrex	r3, [r4]
   1b398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1b39c:	e844 3200 	strex	r2, r3, [r4]
   1b3a0:	2a00      	cmp	r2, #0
   1b3a2:	d1f7      	bne.n	1b394 <smp_dhkey_generate+0x8>
   1b3a4:	f3bf 8f5b 	dmb	ish
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1b3a8:	490c      	ldr	r1, [pc, #48]	; (1b3dc <smp_dhkey_generate+0x50>)
   1b3aa:	3057      	adds	r0, #87	; 0x57
   1b3ac:	f7fb fac0 	bl	16930 <bt_dh_key_gen>
	if (err) {
   1b3b0:	b908      	cbnz	r0, 1b3b6 <smp_dhkey_generate+0x2a>
	return 0;
   1b3b2:	2000      	movs	r0, #0
}
   1b3b4:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b3b6:	f3bf 8f5b 	dmb	ish
   1b3ba:	e854 3f00 	ldrex	r3, [r4]
   1b3be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1b3c2:	e844 3200 	strex	r2, r3, [r4]
   1b3c6:	2a00      	cmp	r2, #0
   1b3c8:	d1f7      	bne.n	1b3ba <smp_dhkey_generate+0x2e>
   1b3ca:	f3bf 8f5b 	dmb	ish
		BT_ERR("Failed to generate DHKey");
   1b3ce:	2145      	movs	r1, #69	; 0x45
   1b3d0:	4803      	ldr	r0, [pc, #12]	; (1b3e0 <smp_dhkey_generate+0x54>)
   1b3d2:	f00d fc3c 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b3d6:	2008      	movs	r0, #8
   1b3d8:	e7ec      	b.n	1b3b4 <smp_dhkey_generate+0x28>
   1b3da:	bf00      	nop
   1b3dc:	0002d08f 	.word	0x0002d08f
   1b3e0:	00032804 	.word	0x00032804

0001b3e4 <smp_public_key_periph>:
{
   1b3e4:	b570      	push	{r4, r5, r6, lr}
   1b3e6:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b3e8:	f7ff fa04 	bl	1a7f4 <latch_auth_cb>
   1b3ec:	4605      	mov	r5, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b3ee:	1d26      	adds	r6, r4, #4
   1b3f0:	210e      	movs	r1, #14
   1b3f2:	4630      	mov	r0, r6
   1b3f4:	f011 f8fe 	bl	2c5f4 <atomic_test_bit>
   1b3f8:	b938      	cbnz	r0, 1b40a <smp_public_key_periph+0x26>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1b3fa:	2220      	movs	r2, #32
   1b3fc:	4b46      	ldr	r3, [pc, #280]	; (1b518 <smp_public_key_periph+0x134>)
   1b3fe:	6819      	ldr	r1, [r3, #0]
   1b400:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b404:	f00e fc9d 	bl	29d42 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b408:	b168      	cbz	r0, 1b426 <smp_public_key_periph+0x42>
	err = sc_send_public_key(smp);
   1b40a:	4620      	mov	r0, r4
   1b40c:	f7ff fb40 	bl	1aa90 <sc_send_public_key>
	if (err) {
   1b410:	4603      	mov	r3, r0
   1b412:	2800      	cmp	r0, #0
   1b414:	d16b      	bne.n	1b4ee <smp_public_key_periph+0x10a>
	switch (smp->method) {
   1b416:	7a22      	ldrb	r2, [r4, #8]
   1b418:	2a05      	cmp	r2, #5
   1b41a:	d877      	bhi.n	1b50c <smp_public_key_periph+0x128>
   1b41c:	e8df f002 	tbb	[pc, r2]
   1b420:	091c3b09 	.word	0x091c3b09
   1b424:	6976      	.short	0x6976
		BT_WARN("Remote public key rejected");
   1b426:	2157      	movs	r1, #87	; 0x57
   1b428:	483c      	ldr	r0, [pc, #240]	; (1b51c <smp_public_key_periph+0x138>)
   1b42a:	f00d fc10 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b42e:	2308      	movs	r3, #8
   1b430:	e05d      	b.n	1b4ee <smp_public_key_periph+0x10a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b432:	f3bf 8f5b 	dmb	ish
   1b436:	e854 3f00 	ldrex	r3, [r4]
   1b43a:	f043 0310 	orr.w	r3, r3, #16
   1b43e:	e844 3200 	strex	r2, r3, [r4]
   1b442:	2a00      	cmp	r2, #0
   1b444:	d1f7      	bne.n	1b436 <smp_public_key_periph+0x52>
   1b446:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
   1b44a:	4620      	mov	r0, r4
   1b44c:	f7ff fb6a 	bl	1ab24 <smp_send_pairing_confirm>
		if (err) {
   1b450:	4603      	mov	r3, r0
   1b452:	2800      	cmp	r0, #0
   1b454:	d047      	beq.n	1b4e6 <smp_public_key_periph+0x102>
   1b456:	e04a      	b.n	1b4ee <smp_public_key_periph+0x10a>
		err = display_passkey(smp);
   1b458:	4620      	mov	r0, r4
   1b45a:	f7ff fdb5 	bl	1afc8 <display_passkey>
		if (err) {
   1b45e:	4603      	mov	r3, r0
   1b460:	2800      	cmp	r0, #0
   1b462:	d144      	bne.n	1b4ee <smp_public_key_periph+0x10a>
   1b464:	f3bf 8f5b 	dmb	ish
   1b468:	e854 3f00 	ldrex	r3, [r4]
   1b46c:	f043 0308 	orr.w	r3, r3, #8
   1b470:	e844 3200 	strex	r2, r3, [r4]
   1b474:	2a00      	cmp	r2, #0
   1b476:	d1f7      	bne.n	1b468 <smp_public_key_periph+0x84>
   1b478:	f3bf 8f5b 	dmb	ish
   1b47c:	f3bf 8f5b 	dmb	ish
   1b480:	e854 3f00 	ldrex	r3, [r4]
   1b484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1b488:	e844 3200 	strex	r2, r3, [r4]
   1b48c:	2a00      	cmp	r2, #0
   1b48e:	d1f7      	bne.n	1b480 <smp_public_key_periph+0x9c>
   1b490:	f3bf 8f5b 	dmb	ish
   1b494:	e027      	b.n	1b4e6 <smp_public_key_periph+0x102>
   1b496:	f3bf 8f5b 	dmb	ish
   1b49a:	e854 3f00 	ldrex	r3, [r4]
   1b49e:	f043 0308 	orr.w	r3, r3, #8
   1b4a2:	e844 3200 	strex	r2, r3, [r4]
   1b4a6:	2a00      	cmp	r2, #0
   1b4a8:	d1f7      	bne.n	1b49a <smp_public_key_periph+0xb6>
   1b4aa:	f3bf 8f5b 	dmb	ish
   1b4ae:	f3bf 8f5b 	dmb	ish
   1b4b2:	e854 3f00 	ldrex	r3, [r4]
   1b4b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1b4ba:	e844 3200 	strex	r2, r3, [r4]
   1b4be:	2a00      	cmp	r2, #0
   1b4c0:	d1f7      	bne.n	1b4b2 <smp_public_key_periph+0xce>
   1b4c2:	f3bf 8f5b 	dmb	ish
   1b4c6:	f3bf 8f5b 	dmb	ish
   1b4ca:	e856 3f00 	ldrex	r3, [r6]
   1b4ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b4d2:	e846 3200 	strex	r2, r3, [r6]
   1b4d6:	2a00      	cmp	r2, #0
   1b4d8:	d1f7      	bne.n	1b4ca <smp_public_key_periph+0xe6>
   1b4da:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1b4de:	686b      	ldr	r3, [r5, #4]
   1b4e0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b4e4:	4798      	blx	r3
	return generate_dhkey(smp);
   1b4e6:	4620      	mov	r0, r4
   1b4e8:	f011 fc94 	bl	2ce14 <generate_dhkey>
   1b4ec:	4603      	mov	r3, r0
}
   1b4ee:	4618      	mov	r0, r3
   1b4f0:	bd70      	pop	{r4, r5, r6, pc}
   1b4f2:	f3bf 8f5b 	dmb	ish
   1b4f6:	e854 3f00 	ldrex	r3, [r4]
   1b4fa:	f043 0310 	orr.w	r3, r3, #16
   1b4fe:	e844 3200 	strex	r2, r3, [r4]
   1b502:	2a00      	cmp	r2, #0
   1b504:	d1f7      	bne.n	1b4f6 <smp_public_key_periph+0x112>
   1b506:	f3bf 8f5b 	dmb	ish
   1b50a:	e7ec      	b.n	1b4e6 <smp_public_key_periph+0x102>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b50c:	2145      	movs	r1, #69	; 0x45
   1b50e:	4804      	ldr	r0, [pc, #16]	; (1b520 <smp_public_key_periph+0x13c>)
   1b510:	f00d fb9d 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b514:	2308      	movs	r3, #8
   1b516:	e7ea      	b.n	1b4ee <smp_public_key_periph+0x10a>
   1b518:	20002b38 	.word	0x20002b38
   1b51c:	00032824 	.word	0x00032824
   1b520:	000326b8 	.word	0x000326b8

0001b524 <smp_public_key>:
{
   1b524:	b570      	push	{r4, r5, r6, lr}
   1b526:	4604      	mov	r4, r0
   1b528:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b52a:	f7ff f963 	bl	1a7f4 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1b52e:	68ae      	ldr	r6, [r5, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1b530:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1b534:	2220      	movs	r2, #32
   1b536:	4631      	mov	r1, r6
   1b538:	4628      	mov	r0, r5
   1b53a:	f00e fc27 	bl	29d8c <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1b53e:	2220      	movs	r2, #32
   1b540:	18b1      	adds	r1, r6, r2
   1b542:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1b546:	f00e fc21 	bl	29d8c <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1b54a:	4628      	mov	r0, r5
   1b54c:	f7fb f948 	bl	167e0 <bt_pub_key_is_debug>
   1b550:	b1a0      	cbz	r0, 1b57c <smp_public_key+0x58>
		BT_INFO("Remote is using Debug Public key");
   1b552:	2149      	movs	r1, #73	; 0x49
   1b554:	4815      	ldr	r0, [pc, #84]	; (1b5ac <smp_public_key+0x88>)
   1b556:	f00d fb7a 	bl	28c4e <z_log_minimal_printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1b55a:	1d23      	adds	r3, r4, #4
   1b55c:	f3bf 8f5b 	dmb	ish
   1b560:	e853 1f00 	ldrex	r1, [r3]
   1b564:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   1b568:	e843 1200 	strex	r2, r1, [r3]
   1b56c:	2a00      	cmp	r2, #0
   1b56e:	d1f7      	bne.n	1b560 <smp_public_key+0x3c>
   1b570:	f3bf 8f5b 	dmb	ish
		if (!update_debug_keys_check(smp)) {
   1b574:	4620      	mov	r0, r4
   1b576:	f011 fba1 	bl	2ccbc <update_debug_keys_check>
   1b57a:	b1a8      	cbz	r0, 1b5a8 <smp_public_key+0x84>
	if (!sc_public_key) {
   1b57c:	4b0c      	ldr	r3, [pc, #48]	; (1b5b0 <smp_public_key+0x8c>)
   1b57e:	681b      	ldr	r3, [r3, #0]
   1b580:	b11b      	cbz	r3, 1b58a <smp_public_key+0x66>
	err = smp_public_key_periph(smp);
   1b582:	4620      	mov	r0, r4
   1b584:	f7ff ff2e 	bl	1b3e4 <smp_public_key_periph>
}
   1b588:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1b58a:	3404      	adds	r4, #4
   1b58c:	f3bf 8f5b 	dmb	ish
   1b590:	e854 3f00 	ldrex	r3, [r4]
   1b594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b598:	e844 3200 	strex	r2, r3, [r4]
   1b59c:	2a00      	cmp	r2, #0
   1b59e:	d1f7      	bne.n	1b590 <smp_public_key+0x6c>
   1b5a0:	f3bf 8f5b 	dmb	ish
		return 0;
   1b5a4:	2000      	movs	r0, #0
   1b5a6:	e7ef      	b.n	1b588 <smp_public_key+0x64>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b5a8:	2003      	movs	r0, #3
   1b5aa:	e7ed      	b.n	1b588 <smp_public_key+0x64>
   1b5ac:	00032844 	.word	0x00032844
   1b5b0:	20002b38 	.word	0x20002b38

0001b5b4 <legacy_request_tk>:
{
   1b5b4:	b570      	push	{r4, r5, r6, lr}
   1b5b6:	b082      	sub	sp, #8
   1b5b8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1b5ba:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b5be:	f7ff f919 	bl	1a7f4 <latch_auth_cb>
   1b5c2:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1b5c4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1b5c8:	7a28      	ldrb	r0, [r5, #8]
   1b5ca:	f000 ff13 	bl	1c3f4 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1b5ce:	b128      	cbz	r0, 1b5dc <legacy_request_tk+0x28>
   1b5d0:	7b43      	ldrb	r3, [r0, #13]
   1b5d2:	f013 0f01 	tst.w	r3, #1
   1b5d6:	d001      	beq.n	1b5dc <legacy_request_tk+0x28>
	    smp->method == JUST_WORKS) {
   1b5d8:	7a23      	ldrb	r3, [r4, #8]
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1b5da:	b143      	cbz	r3, 1b5ee <legacy_request_tk+0x3a>
	switch (smp->method) {
   1b5dc:	7a20      	ldrb	r0, [r4, #8]
   1b5de:	2806      	cmp	r0, #6
   1b5e0:	d86d      	bhi.n	1b6be <legacy_request_tk+0x10a>
   1b5e2:	e8df f000 	tbb	[pc, r0]
   1b5e6:	596a      	.short	0x596a
   1b5e8:	6c6c6c26 	.word	0x6c6c6c26
   1b5ec:	0a          	.byte	0x0a
   1b5ed:	00          	.byte	0x00
		BT_ERR("JustWorks failed, authenticated keys present");
   1b5ee:	2145      	movs	r1, #69	; 0x45
   1b5f0:	4839      	ldr	r0, [pc, #228]	; (1b6d8 <legacy_request_tk+0x124>)
   1b5f2:	f00d fb2c 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b5f6:	2008      	movs	r0, #8
   1b5f8:	e05f      	b.n	1b6ba <legacy_request_tk+0x106>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1b5fa:	2e00      	cmp	r6, #0
   1b5fc:	d066      	beq.n	1b6cc <legacy_request_tk+0x118>
   1b5fe:	68f3      	ldr	r3, [r6, #12]
   1b600:	2b00      	cmp	r3, #0
   1b602:	d065      	beq.n	1b6d0 <legacy_request_tk+0x11c>
			struct bt_conn_oob_info info = {
   1b604:	2500      	movs	r5, #0
   1b606:	f8ad 5000 	strh.w	r5, [sp]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b60a:	1d23      	adds	r3, r4, #4
   1b60c:	f3bf 8f5b 	dmb	ish
   1b610:	e853 1f00 	ldrex	r1, [r3]
   1b614:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   1b618:	e843 1200 	strex	r2, r1, [r3]
   1b61c:	2a00      	cmp	r2, #0
   1b61e:	d1f7      	bne.n	1b610 <legacy_request_tk+0x5c>
   1b620:	f3bf 8f5b 	dmb	ish
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1b624:	68f3      	ldr	r3, [r6, #12]
   1b626:	4669      	mov	r1, sp
   1b628:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b62c:	4798      	blx	r3
	return 0;
   1b62e:	4628      	mov	r0, r5
		break;
   1b630:	e043      	b.n	1b6ba <legacy_request_tk+0x106>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1b632:	2104      	movs	r1, #4
   1b634:	eb0d 0001 	add.w	r0, sp, r1
   1b638:	f004 fad4 	bl	1fbe4 <bt_rand>
   1b63c:	2800      	cmp	r0, #0
   1b63e:	d149      	bne.n	1b6d4 <legacy_request_tk+0x120>
			passkey %= 1000000;
   1b640:	9a01      	ldr	r2, [sp, #4]
   1b642:	4b26      	ldr	r3, [pc, #152]	; (1b6dc <legacy_request_tk+0x128>)
   1b644:	fba3 1302 	umull	r1, r3, r3, r2
   1b648:	0c9b      	lsrs	r3, r3, #18
   1b64a:	4925      	ldr	r1, [pc, #148]	; (1b6e0 <legacy_request_tk+0x12c>)
   1b64c:	fb01 2213 	mls	r2, r1, r3, r2
   1b650:	9201      	str	r2, [sp, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1b652:	b196      	cbz	r6, 1b67a <legacy_request_tk+0xc6>
   1b654:	6833      	ldr	r3, [r6, #0]
   1b656:	b183      	cbz	r3, 1b67a <legacy_request_tk+0xc6>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b658:	1d23      	adds	r3, r4, #4
   1b65a:	f3bf 8f5b 	dmb	ish
   1b65e:	e853 1f00 	ldrex	r1, [r3]
   1b662:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   1b666:	e843 1200 	strex	r2, r1, [r3]
   1b66a:	2a00      	cmp	r2, #0
   1b66c:	d1f7      	bne.n	1b65e <legacy_request_tk+0xaa>
   1b66e:	f3bf 8f5b 	dmb	ish
			smp_auth_cb->passkey_display(conn, passkey);
   1b672:	6833      	ldr	r3, [r6, #0]
   1b674:	9901      	ldr	r1, [sp, #4]
   1b676:	4628      	mov	r0, r5
   1b678:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1b67a:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1b67c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1b680:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1b684:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
	sys_put_le16(val >> 16, &dst[2]);
   1b688:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1b68a:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1b68e:	0e1b      	lsrs	r3, r3, #24
   1b690:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	return 0;
   1b694:	2000      	movs	r0, #0
}
   1b696:	e010      	b.n	1b6ba <legacy_request_tk+0x106>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b698:	3404      	adds	r4, #4
   1b69a:	f3bf 8f5b 	dmb	ish
   1b69e:	e854 3f00 	ldrex	r3, [r4]
   1b6a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b6a6:	e844 3200 	strex	r2, r3, [r4]
   1b6aa:	2a00      	cmp	r2, #0
   1b6ac:	d1f7      	bne.n	1b69e <legacy_request_tk+0xea>
   1b6ae:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->passkey_entry(conn);
   1b6b2:	6873      	ldr	r3, [r6, #4]
   1b6b4:	4628      	mov	r0, r5
   1b6b6:	4798      	blx	r3
	return 0;
   1b6b8:	2000      	movs	r0, #0
}
   1b6ba:	b002      	add	sp, #8
   1b6bc:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b6be:	4602      	mov	r2, r0
   1b6c0:	2145      	movs	r1, #69	; 0x45
   1b6c2:	4808      	ldr	r0, [pc, #32]	; (1b6e4 <legacy_request_tk+0x130>)
   1b6c4:	f00d fac3 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b6c8:	2008      	movs	r0, #8
   1b6ca:	e7f6      	b.n	1b6ba <legacy_request_tk+0x106>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1b6cc:	2002      	movs	r0, #2
   1b6ce:	e7f4      	b.n	1b6ba <legacy_request_tk+0x106>
   1b6d0:	2002      	movs	r0, #2
   1b6d2:	e7f2      	b.n	1b6ba <legacy_request_tk+0x106>
				return BT_SMP_ERR_UNSPECIFIED;
   1b6d4:	2008      	movs	r0, #8
   1b6d6:	e7f0      	b.n	1b6ba <legacy_request_tk+0x106>
   1b6d8:	0003286c 	.word	0x0003286c
   1b6dc:	431bde83 	.word	0x431bde83
   1b6e0:	000f4240 	.word	0x000f4240
   1b6e4:	000326b8 	.word	0x000326b8

0001b6e8 <smp_pairing_req>:
{
   1b6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b6ec:	4604      	mov	r4, r0
   1b6ee:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1b6f0:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b6f4:	f7ff f87e 	bl	1a7f4 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1b6f8:	68ad      	ldr	r5, [r5, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1b6fa:	78eb      	ldrb	r3, [r5, #3]
   1b6fc:	3b07      	subs	r3, #7
   1b6fe:	b2db      	uxtb	r3, r3
   1b700:	2b09      	cmp	r3, #9
   1b702:	f200 80dd 	bhi.w	1b8c0 <smp_pairing_req+0x1d8>
   1b706:	4607      	mov	r7, r0
	if (!conn->le.keys) {
   1b708:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1b70c:	2b00      	cmp	r3, #0
   1b70e:	f000 80b4 	beq.w	1b87a <smp_pairing_req+0x192>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1b712:	f104 0804 	add.w	r8, r4, #4
   1b716:	210f      	movs	r1, #15
   1b718:	4640      	mov	r0, r8
   1b71a:	f010 ff6b 	bl	2c5f4 <atomic_test_bit>
   1b71e:	b928      	cbnz	r0, 1b72c <smp_pairing_req+0x44>
		int ret = smp_init(smp);
   1b720:	4620      	mov	r0, r4
   1b722:	f7ff fd69 	bl	1b1f8 <smp_init>
		if (ret) {
   1b726:	2800      	cmp	r0, #0
   1b728:	f040 80b3 	bne.w	1b892 <smp_pairing_req+0x1aa>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1b72c:	2301      	movs	r3, #1
   1b72e:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1b730:	2206      	movs	r2, #6
   1b732:	4629      	mov	r1, r5
   1b734:	f104 000a 	add.w	r0, r4, #10
   1b738:	f00e fb28 	bl	29d8c <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1b73c:	2302      	movs	r3, #2
   1b73e:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1b740:	78a9      	ldrb	r1, [r5, #2]
   1b742:	4620      	mov	r0, r4
   1b744:	f7ff f89e 	bl	1a884 <get_auth>
   1b748:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1b74a:	4620      	mov	r0, r4
   1b74c:	f7ff f872 	bl	1a834 <get_io_capa>
   1b750:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1b752:	4b5d      	ldr	r3, [pc, #372]	; (1b8c8 <smp_pairing_req+0x1e0>)
   1b754:	781b      	ldrb	r3, [r3, #0]
   1b756:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1b758:	2310      	movs	r3, #16
   1b75a:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1b75c:	792b      	ldrb	r3, [r5, #4]
   1b75e:	f003 0303 	and.w	r3, r3, #3
   1b762:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1b764:	796b      	ldrb	r3, [r5, #5]
   1b766:	f003 0301 	and.w	r3, r3, #1
   1b76a:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1b76c:	7ce3      	ldrb	r3, [r4, #19]
   1b76e:	f013 0f08 	tst.w	r3, #8
   1b772:	d015      	beq.n	1b7a0 <smp_pairing_req+0xb8>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
   1b774:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1b776:	f013 0f08 	tst.w	r3, #8
   1b77a:	d011      	beq.n	1b7a0 <smp_pairing_req+0xb8>
   1b77c:	f3bf 8f5b 	dmb	ish
   1b780:	e858 3f00 	ldrex	r3, [r8]
   1b784:	f043 0320 	orr.w	r3, r3, #32
   1b788:	e848 3200 	strex	r2, r3, [r8]
   1b78c:	2a00      	cmp	r2, #0
   1b78e:	d1f7      	bne.n	1b780 <smp_pairing_req+0x98>
   1b790:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
   1b794:	7d63      	ldrb	r3, [r4, #21]
   1b796:	f003 0302 	and.w	r3, r3, #2
   1b79a:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1b79c:	2300      	movs	r3, #0
   1b79e:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1b7a0:	7ce3      	ldrb	r3, [r4, #19]
   1b7a2:	f013 0f20 	tst.w	r3, #32
   1b7a6:	d00f      	beq.n	1b7c8 <smp_pairing_req+0xe0>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
   1b7a8:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1b7aa:	f013 0f20 	tst.w	r3, #32
   1b7ae:	d00b      	beq.n	1b7c8 <smp_pairing_req+0xe0>
   1b7b0:	f3bf 8f5b 	dmb	ish
   1b7b4:	e858 3f00 	ldrex	r3, [r8]
   1b7b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b7bc:	e848 3200 	strex	r2, r3, [r8]
   1b7c0:	2a00      	cmp	r2, #0
   1b7c2:	d1f7      	bne.n	1b7b4 <smp_pairing_req+0xcc>
   1b7c4:	f3bf 8f5b 	dmb	ish
	smp->local_dist = rsp->resp_key_dist;
   1b7c8:	7da3      	ldrb	r3, [r4, #22]
   1b7ca:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1b7ce:	7d63      	ldrb	r3, [r4, #21]
   1b7d0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1b7d4:	7ce3      	ldrb	r3, [r4, #19]
   1b7d6:	f013 0f01 	tst.w	r3, #1
   1b7da:	d00f      	beq.n	1b7fc <smp_pairing_req+0x114>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
   1b7dc:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1b7de:	f013 0f01 	tst.w	r3, #1
   1b7e2:	d00b      	beq.n	1b7fc <smp_pairing_req+0x114>
   1b7e4:	f3bf 8f5b 	dmb	ish
   1b7e8:	e858 3f00 	ldrex	r3, [r8]
   1b7ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1b7f0:	e848 3200 	strex	r2, r3, [r8]
   1b7f4:	2a00      	cmp	r2, #0
   1b7f6:	d1f7      	bne.n	1b7e8 <smp_pairing_req+0x100>
   1b7f8:	f3bf 8f5b 	dmb	ish
   1b7fc:	f3bf 8f5b 	dmb	ish
   1b800:	e858 3f00 	ldrex	r3, [r8]
   1b804:	f043 0308 	orr.w	r3, r3, #8
   1b808:	e848 3200 	strex	r2, r3, [r8]
   1b80c:	2a00      	cmp	r2, #0
   1b80e:	d1f7      	bne.n	1b800 <smp_pairing_req+0x118>
   1b810:	f3bf 8f5b 	dmb	ish
	smp->method = get_pair_method(smp, req->io_capability);
   1b814:	7829      	ldrb	r1, [r5, #0]
   1b816:	4620      	mov	r0, r4
   1b818:	f7ff f87e 	bl	1a918 <get_pair_method>
   1b81c:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1b81e:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
   1b822:	4620      	mov	r0, r4
   1b824:	f010 ff32 	bl	2c68c <update_keys_check>
   1b828:	2800      	cmp	r0, #0
   1b82a:	d04b      	beq.n	1b8c4 <smp_pairing_req+0x1dc>
	err = remote_sec_level_reachable(smp);
   1b82c:	4620      	mov	r0, r4
   1b82e:	f010 ff5b 	bl	2c6e8 <remote_sec_level_reachable>
	if (err) {
   1b832:	4605      	mov	r5, r0
   1b834:	b9f0      	cbnz	r0, 1b874 <smp_pairing_req+0x18c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b836:	2105      	movs	r1, #5
   1b838:	4640      	mov	r0, r8
   1b83a:	f010 fedb 	bl	2c5f4 <atomic_test_bit>
   1b83e:	b350      	cbz	r0, 1b896 <smp_pairing_req+0x1ae>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b840:	7a25      	ldrb	r5, [r4, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1b842:	b93d      	cbnz	r5, 1b854 <smp_pairing_req+0x16c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b844:	210f      	movs	r1, #15
   1b846:	4640      	mov	r0, r8
   1b848:	f010 fed4 	bl	2c5f4 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b84c:	b910      	cbnz	r0, 1b854 <smp_pairing_req+0x16c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b84e:	b10f      	cbz	r7, 1b854 <smp_pairing_req+0x16c>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1b850:	697b      	ldr	r3, [r7, #20]
   1b852:	bb2b      	cbnz	r3, 1b8a0 <smp_pairing_req+0x1b8>
   1b854:	f3bf 8f5b 	dmb	ish
   1b858:	e854 3f00 	ldrex	r3, [r4]
   1b85c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1b860:	e844 3200 	strex	r2, r3, [r4]
   1b864:	2a00      	cmp	r2, #0
   1b866:	d1f7      	bne.n	1b858 <smp_pairing_req+0x170>
   1b868:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
   1b86c:	4620      	mov	r0, r4
   1b86e:	f011 f8e2 	bl	2ca36 <send_pairing_rsp>
   1b872:	4605      	mov	r5, r0
}
   1b874:	4628      	mov	r0, r5
   1b876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b87a:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1b87e:	7a30      	ldrb	r0, [r6, #8]
   1b880:	f000 fc8c 	bl	1c19c <bt_keys_get_addr>
   1b884:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
		if (!conn->le.keys) {
   1b888:	2800      	cmp	r0, #0
   1b88a:	f47f af42 	bne.w	1b712 <smp_pairing_req+0x2a>
			return BT_SMP_ERR_UNSPECIFIED;
   1b88e:	2508      	movs	r5, #8
   1b890:	e7f0      	b.n	1b874 <smp_pairing_req+0x18c>
			return ret;
   1b892:	b2c5      	uxtb	r5, r0
   1b894:	e7ee      	b.n	1b874 <smp_pairing_req+0x18c>
		return legacy_pairing_req(smp);
   1b896:	4620      	mov	r0, r4
   1b898:	f011 fad5 	bl	2ce46 <legacy_pairing_req>
   1b89c:	4605      	mov	r5, r0
   1b89e:	e7e9      	b.n	1b874 <smp_pairing_req+0x18c>
   1b8a0:	f3bf 8f5b 	dmb	ish
   1b8a4:	e858 3f00 	ldrex	r3, [r8]
   1b8a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b8ac:	e848 3200 	strex	r2, r3, [r8]
   1b8b0:	2a00      	cmp	r2, #0
   1b8b2:	d1f7      	bne.n	1b8a4 <smp_pairing_req+0x1bc>
   1b8b4:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->pairing_confirm(conn);
   1b8b8:	697b      	ldr	r3, [r7, #20]
   1b8ba:	4630      	mov	r0, r6
   1b8bc:	4798      	blx	r3
		return 0;
   1b8be:	e7d9      	b.n	1b874 <smp_pairing_req+0x18c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1b8c0:	2506      	movs	r5, #6
   1b8c2:	e7d7      	b.n	1b874 <smp_pairing_req+0x18c>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b8c4:	2503      	movs	r5, #3
   1b8c6:	e7d5      	b.n	1b874 <smp_pairing_req+0x18c>
   1b8c8:	200045f4 	.word	0x200045f4

0001b8cc <smp_ident_info>:
{
   1b8cc:	b570      	push	{r4, r5, r6, lr}
   1b8ce:	4604      	mov	r4, r0
   1b8d0:	460d      	mov	r5, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b8d2:	210d      	movs	r1, #13
   1b8d4:	3004      	adds	r0, #4
   1b8d6:	f010 fe8d 	bl	2c5f4 <atomic_test_bit>
   1b8da:	b178      	cbz	r0, 1b8fc <smp_ident_info+0x30>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1b8dc:	68ae      	ldr	r6, [r5, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1b8de:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1b8e2:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1b8e6:	462a      	mov	r2, r5
   1b8e8:	7a19      	ldrb	r1, [r3, #8]
   1b8ea:	2002      	movs	r0, #2
   1b8ec:	f000 fdca 	bl	1c484 <bt_keys_get_type>
		if (!keys) {
   1b8f0:	b190      	cbz	r0, 1b918 <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
   1b8f2:	2210      	movs	r2, #16
   1b8f4:	4631      	mov	r1, r6
   1b8f6:	302a      	adds	r0, #42	; 0x2a
   1b8f8:	f00e fa48 	bl	29d8c <memcpy>
   1b8fc:	f3bf 8f5b 	dmb	ish
   1b900:	e854 3f00 	ldrex	r3, [r4]
   1b904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b908:	e844 3200 	strex	r2, r3, [r4]
   1b90c:	2a00      	cmp	r2, #0
   1b90e:	d1f7      	bne.n	1b900 <smp_ident_info+0x34>
   1b910:	f3bf 8f5b 	dmb	ish
	return 0;
   1b914:	2000      	movs	r0, #0
}
   1b916:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Unable to get keys for %s",
   1b918:	4628      	mov	r0, r5
   1b91a:	f7f8 fa39 	bl	13d90 <bt_addr_le_str>
   1b91e:	4602      	mov	r2, r0
   1b920:	2145      	movs	r1, #69	; 0x45
   1b922:	4802      	ldr	r0, [pc, #8]	; (1b92c <smp_ident_info+0x60>)
   1b924:	f00d f993 	bl	28c4e <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1b928:	2008      	movs	r0, #8
   1b92a:	e7f4      	b.n	1b916 <smp_ident_info+0x4a>
   1b92c:	000328a0 	.word	0x000328a0

0001b930 <smp_encrypt_info>:
{
   1b930:	b570      	push	{r4, r5, r6, lr}
   1b932:	4604      	mov	r4, r0
   1b934:	460d      	mov	r5, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b936:	210d      	movs	r1, #13
   1b938:	3004      	adds	r0, #4
   1b93a:	f010 fe5b 	bl	2c5f4 <atomic_test_bit>
   1b93e:	b178      	cbz	r0, 1b960 <smp_encrypt_info+0x30>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1b940:	68ae      	ldr	r6, [r5, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1b942:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b946:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1b94a:	462a      	mov	r2, r5
   1b94c:	7a19      	ldrb	r1, [r3, #8]
   1b94e:	2004      	movs	r0, #4
   1b950:	f000 fd98 	bl	1c484 <bt_keys_get_type>
		if (!keys) {
   1b954:	b190      	cbz	r0, 1b97c <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
   1b956:	2210      	movs	r2, #16
   1b958:	4631      	mov	r1, r6
   1b95a:	301a      	adds	r0, #26
   1b95c:	f00e fa16 	bl	29d8c <memcpy>
   1b960:	f3bf 8f5b 	dmb	ish
   1b964:	e854 3f00 	ldrex	r3, [r4]
   1b968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b96c:	e844 3200 	strex	r2, r3, [r4]
   1b970:	2a00      	cmp	r2, #0
   1b972:	d1f7      	bne.n	1b964 <smp_encrypt_info+0x34>
   1b974:	f3bf 8f5b 	dmb	ish
	return 0;
   1b978:	2000      	movs	r0, #0
}
   1b97a:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Unable to get keys for %s",
   1b97c:	4628      	mov	r0, r5
   1b97e:	f7f8 fa07 	bl	13d90 <bt_addr_le_str>
   1b982:	4602      	mov	r2, r0
   1b984:	2145      	movs	r1, #69	; 0x45
   1b986:	4802      	ldr	r0, [pc, #8]	; (1b990 <smp_encrypt_info+0x60>)
   1b988:	f00d f961 	bl	28c4e <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1b98c:	2008      	movs	r0, #8
   1b98e:	e7f4      	b.n	1b97a <smp_encrypt_info+0x4a>
   1b990:	000328a0 	.word	0x000328a0

0001b994 <smp_id_add_replace>:
{
   1b994:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1b996:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1b99a:	f013 0402 	ands.w	r4, r3, #2
   1b99e:	d10d      	bne.n	1b9bc <smp_id_add_replace+0x28>
   1b9a0:	460d      	mov	r5, r1
	conflict = bt_id_find_conflict(new_bond);
   1b9a2:	4608      	mov	r0, r1
   1b9a4:	f7fa f982 	bl	15cac <bt_id_find_conflict>
	if (conflict) {
   1b9a8:	b9a0      	cbnz	r0, 1b9d4 <smp_id_add_replace+0x40>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1b9aa:	4628      	mov	r0, r5
   1b9ac:	f7fa f97e 	bl	15cac <bt_id_find_conflict>
   1b9b0:	b9b0      	cbnz	r0, 1b9e0 <smp_id_add_replace+0x4c>
	bt_id_add(new_bond);
   1b9b2:	4628      	mov	r0, r5
   1b9b4:	f7fa f98c 	bl	15cd0 <bt_id_add>
}
   1b9b8:	4620      	mov	r0, r4
   1b9ba:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1b9bc:	4c0e      	ldr	r4, [pc, #56]	; (1b9f8 <smp_id_add_replace+0x64>)
   1b9be:	f640 727d 	movw	r2, #3965	; 0xf7d
   1b9c2:	4621      	mov	r1, r4
   1b9c4:	480d      	ldr	r0, [pc, #52]	; (1b9fc <smp_id_add_replace+0x68>)
   1b9c6:	f00d f922 	bl	28c0e <assert_print>
   1b9ca:	f640 717d 	movw	r1, #3965	; 0xf7d
   1b9ce:	4620      	mov	r0, r4
   1b9d0:	f00d f916 	bl	28c00 <assert_post_action>
		BT_WARN("Refusing new pairing. The old bond must be unpaired first.");
   1b9d4:	2157      	movs	r1, #87	; 0x57
   1b9d6:	480a      	ldr	r0, [pc, #40]	; (1ba00 <smp_id_add_replace+0x6c>)
   1b9d8:	f00d f939 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b9dc:	2403      	movs	r4, #3
   1b9de:	e7eb      	b.n	1b9b8 <smp_id_add_replace+0x24>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1b9e0:	4c05      	ldr	r4, [pc, #20]	; (1b9f8 <smp_id_add_replace+0x64>)
   1b9e2:	f640 7299 	movw	r2, #3993	; 0xf99
   1b9e6:	4621      	mov	r1, r4
   1b9e8:	4804      	ldr	r0, [pc, #16]	; (1b9fc <smp_id_add_replace+0x68>)
   1b9ea:	f00d f910 	bl	28c0e <assert_print>
   1b9ee:	f640 7199 	movw	r1, #3993	; 0xf99
   1b9f2:	4620      	mov	r0, r4
   1b9f4:	f00d f904 	bl	28c00 <assert_post_action>
   1b9f8:	000328c0 	.word	0x000328c0
   1b9fc:	00030128 	.word	0x00030128
   1ba00:	000328f0 	.word	0x000328f0

0001ba04 <bt_smp_connected>:
{
   1ba04:	b538      	push	{r3, r4, r5, lr}
   1ba06:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1ba08:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
	k_work_init_delayable(&smp->work, smp_timeout);
   1ba0c:	4909      	ldr	r1, [pc, #36]	; (1ba34 <bt_smp_connected+0x30>)
   1ba0e:	3094      	adds	r0, #148	; 0x94
   1ba10:	f007 fa8c 	bl	22f2c <k_work_init_delayable>
	smp_reset(smp);
   1ba14:	4628      	mov	r0, r5
   1ba16:	f010 fe8e 	bl	2c736 <smp_reset>
	atomic_ptr_set(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED);
   1ba1a:	34c4      	adds	r4, #196	; 0xc4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ba1c:	4b06      	ldr	r3, [pc, #24]	; (1ba38 <bt_smp_connected+0x34>)
   1ba1e:	f3bf 8f5b 	dmb	ish
   1ba22:	e854 2f00 	ldrex	r2, [r4]
   1ba26:	e844 3100 	strex	r1, r3, [r4]
   1ba2a:	2900      	cmp	r1, #0
   1ba2c:	d1f9      	bne.n	1ba22 <bt_smp_connected+0x1e>
   1ba2e:	f3bf 8f5b 	dmb	ish
}
   1ba32:	bd38      	pop	{r3, r4, r5, pc}
   1ba34:	0001bff1 	.word	0x0001bff1
   1ba38:	20001cf0 	.word	0x20001cf0

0001ba3c <smp_pairing_complete>:
{
   1ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba3e:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ba40:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (!status) {
   1ba44:	b359      	cbz	r1, 1ba9e <smp_pairing_complete+0x62>
   1ba46:	4608      	mov	r0, r1
		enum bt_security_err security_err = security_err_get(status);
   1ba48:	f010 fd43 	bl	2c4d2 <security_err_get>
   1ba4c:	4607      	mov	r7, r0
		if (conn->le.keys &&
   1ba4e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1ba52:	b16b      	cbz	r3, 1ba70 <smp_pairing_complete+0x34>
		    (!conn->le.keys->enc_size ||
   1ba54:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys &&
   1ba56:	b123      	cbz	r3, 1ba62 <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1ba58:	2102      	movs	r1, #2
   1ba5a:	1d30      	adds	r0, r6, #4
   1ba5c:	f010 fdca 	bl	2c5f4 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1ba60:	b130      	cbz	r0, 1ba70 <smp_pairing_complete+0x34>
			bt_keys_clear(conn->le.keys);
   1ba62:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1ba66:	f000 fd31 	bl	1c4cc <bt_keys_clear>
			conn->le.keys = NULL;
   1ba6a:	2300      	movs	r3, #0
   1ba6c:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1ba70:	1d34      	adds	r4, r6, #4
   1ba72:	2102      	movs	r1, #2
   1ba74:	4620      	mov	r0, r4
   1ba76:	f010 fdbd 	bl	2c5f4 <atomic_test_bit>
   1ba7a:	2800      	cmp	r0, #0
   1ba7c:	d037      	beq.n	1baee <smp_pairing_complete+0xb2>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ba7e:	2103      	movs	r1, #3
   1ba80:	4620      	mov	r0, r4
   1ba82:	f010 fdb7 	bl	2c5f4 <atomic_test_bit>
   1ba86:	2800      	cmp	r0, #0
   1ba88:	d04c      	beq.n	1bb24 <smp_pairing_complete+0xe8>
	return list->head;
   1ba8a:	4b2c      	ldr	r3, [pc, #176]	; (1bb3c <smp_pairing_complete+0x100>)
   1ba8c:	681a      	ldr	r2, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1ba8e:	2a00      	cmp	r2, #0
   1ba90:	d036      	beq.n	1bb00 <smp_pairing_complete+0xc4>
	return node->next;
   1ba92:	f852 490c 	ldr.w	r4, [r2], #-12
   1ba96:	2c00      	cmp	r4, #0
   1ba98:	d037      	beq.n	1bb0a <smp_pairing_complete+0xce>
   1ba9a:	3c0c      	subs	r4, #12
   1ba9c:	e035      	b.n	1bb0a <smp_pairing_complete+0xce>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1ba9e:	210d      	movs	r1, #13
   1baa0:	3004      	adds	r0, #4
   1baa2:	f010 fda7 	bl	2c5f4 <atomic_test_bit>
		if (bond_flag) {
   1baa6:	4607      	mov	r7, r0
   1baa8:	b950      	cbnz	r0, 1bac0 <smp_pairing_complete+0x84>
	return list->head;
   1baaa:	4b24      	ldr	r3, [pc, #144]	; (1bb3c <smp_pairing_complete+0x100>)
   1baac:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1baae:	b163      	cbz	r3, 1baca <smp_pairing_complete+0x8e>
   1bab0:	3b0c      	subs	r3, #12
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bab2:	f113 040c 	adds.w	r4, r3, #12
   1bab6:	d00d      	beq.n	1bad4 <smp_pairing_complete+0x98>
	return node->next;
   1bab8:	68dc      	ldr	r4, [r3, #12]
   1baba:	b15c      	cbz	r4, 1bad4 <smp_pairing_complete+0x98>
   1babc:	3c0c      	subs	r4, #12
   1babe:	e009      	b.n	1bad4 <smp_pairing_complete+0x98>
			bt_keys_store(conn->le.keys);
   1bac0:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1bac4:	f000 fdca 	bl	1c65c <bt_keys_store>
   1bac8:	e7ef      	b.n	1baaa <smp_pairing_complete+0x6e>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1baca:	461c      	mov	r4, r3
   1bacc:	e002      	b.n	1bad4 <smp_pairing_complete+0x98>
   1bace:	4622      	mov	r2, r4
   1bad0:	4623      	mov	r3, r4
   1bad2:	4614      	mov	r4, r2
   1bad4:	b333      	cbz	r3, 1bb24 <smp_pairing_complete+0xe8>
			if (listener->pairing_complete) {
   1bad6:	681b      	ldr	r3, [r3, #0]
   1bad8:	b113      	cbz	r3, 1bae0 <smp_pairing_complete+0xa4>
				listener->pairing_complete(conn, bond_flag);
   1bada:	4639      	mov	r1, r7
   1badc:	4628      	mov	r0, r5
   1bade:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1bae0:	2c00      	cmp	r4, #0
   1bae2:	d0f4      	beq.n	1bace <smp_pairing_complete+0x92>
   1bae4:	68e2      	ldr	r2, [r4, #12]
   1bae6:	2a00      	cmp	r2, #0
   1bae8:	d0f2      	beq.n	1bad0 <smp_pairing_complete+0x94>
   1baea:	3a0c      	subs	r2, #12
   1baec:	e7f0      	b.n	1bad0 <smp_pairing_complete+0x94>
			bt_conn_security_changed(conn,
   1baee:	4638      	mov	r0, r7
   1baf0:	f010 fd27 	bl	2c542 <hci_err_get>
   1baf4:	4601      	mov	r1, r0
   1baf6:	463a      	mov	r2, r7
   1baf8:	4628      	mov	r0, r5
   1bafa:	f7fb fcbd 	bl	17478 <bt_conn_security_changed>
   1bafe:	e7be      	b.n	1ba7e <smp_pairing_complete+0x42>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1bb00:	4614      	mov	r4, r2
   1bb02:	e002      	b.n	1bb0a <smp_pairing_complete+0xce>
   1bb04:	4623      	mov	r3, r4
   1bb06:	4622      	mov	r2, r4
   1bb08:	461c      	mov	r4, r3
   1bb0a:	b15a      	cbz	r2, 1bb24 <smp_pairing_complete+0xe8>
				if (listener->pairing_failed) {
   1bb0c:	6853      	ldr	r3, [r2, #4]
   1bb0e:	b113      	cbz	r3, 1bb16 <smp_pairing_complete+0xda>
					listener->pairing_failed(conn, security_err);
   1bb10:	4639      	mov	r1, r7
   1bb12:	4628      	mov	r0, r5
   1bb14:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1bb16:	2c00      	cmp	r4, #0
   1bb18:	d0f4      	beq.n	1bb04 <smp_pairing_complete+0xc8>
   1bb1a:	68e3      	ldr	r3, [r4, #12]
   1bb1c:	2b00      	cmp	r3, #0
   1bb1e:	d0f2      	beq.n	1bb06 <smp_pairing_complete+0xca>
   1bb20:	3b0c      	subs	r3, #12
   1bb22:	e7f0      	b.n	1bb06 <smp_pairing_complete+0xca>
	smp_reset(smp);
   1bb24:	4630      	mov	r0, r6
   1bb26:	f010 fe06 	bl	2c736 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1bb2a:	7a6a      	ldrb	r2, [r5, #9]
   1bb2c:	7aab      	ldrb	r3, [r5, #10]
   1bb2e:	429a      	cmp	r2, r3
   1bb30:	d100      	bne.n	1bb34 <smp_pairing_complete+0xf8>
}
   1bb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_smp_start_security(conn);
   1bb34:	4628      	mov	r0, r5
   1bb36:	f011 faa0 	bl	2d07a <bt_smp_start_security>
}
   1bb3a:	e7fa      	b.n	1bb32 <smp_pairing_complete+0xf6>
   1bb3c:	200029dc 	.word	0x200029dc

0001bb40 <smp_error>:
{
   1bb40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb42:	b083      	sub	sp, #12
   1bb44:	4604      	mov	r4, r0
   1bb46:	460d      	mov	r5, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1bb48:	1d07      	adds	r7, r0, #4
   1bb4a:	2102      	movs	r1, #2
   1bb4c:	4638      	mov	r0, r7
   1bb4e:	f010 fd51 	bl	2c5f4 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1bb52:	b120      	cbz	r0, 1bb5e <smp_error+0x1e>
   1bb54:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1bb58:	b343      	cbz	r3, 1bbac <smp_error+0x6c>
   1bb5a:	2600      	movs	r6, #0
   1bb5c:	e000      	b.n	1bb60 <smp_error+0x20>
   1bb5e:	2600      	movs	r6, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1bb60:	2103      	movs	r1, #3
   1bb62:	4638      	mov	r0, r7
   1bb64:	f010 fd46 	bl	2c5f4 <atomic_test_bit>
   1bb68:	b920      	cbnz	r0, 1bb74 <smp_error+0x34>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1bb6a:	2101      	movs	r1, #1
   1bb6c:	4638      	mov	r0, r7
   1bb6e:	f010 fd41 	bl	2c5f4 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1bb72:	b1e8      	cbz	r0, 1bbb0 <smp_error+0x70>
		smp_pairing_complete(smp, reason);
   1bb74:	4629      	mov	r1, r5
   1bb76:	4620      	mov	r0, r4
   1bb78:	f7ff ff60 	bl	1ba3c <smp_pairing_complete>
	if (remote_already_completed) {
   1bb7c:	b9fe      	cbnz	r6, 1bbbe <smp_error+0x7e>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1bb7e:	2201      	movs	r2, #1
   1bb80:	2105      	movs	r1, #5
   1bb82:	4620      	mov	r0, r4
   1bb84:	f010 fe7b 	bl	2c87e <smp_create_pdu>
	if (!buf) {
   1bb88:	4606      	mov	r6, r0
   1bb8a:	b340      	cbz	r0, 1bbde <smp_error+0x9e>
   1bb8c:	2101      	movs	r1, #1
   1bb8e:	3008      	adds	r0, #8
   1bb90:	f001 f90e 	bl	1cdb0 <net_buf_simple_add>
	rsp->reason = reason;
   1bb94:	7005      	strb	r5, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1bb96:	2300      	movs	r3, #0
   1bb98:	9300      	str	r3, [sp, #0]
   1bb9a:	4632      	mov	r2, r6
   1bb9c:	2106      	movs	r1, #6
   1bb9e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1bba2:	f00f f999 	bl	2aed8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1bba6:	b9a8      	cbnz	r0, 1bbd4 <smp_error+0x94>
}
   1bba8:	b003      	add	sp, #12
   1bbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				    !smp->local_dist && !smp->remote_dist);
   1bbac:	2601      	movs	r6, #1
   1bbae:	e7d7      	b.n	1bb60 <smp_error+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1bbb0:	210f      	movs	r1, #15
   1bbb2:	4638      	mov	r0, r7
   1bbb4:	f010 fd1e 	bl	2c5f4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1bbb8:	2800      	cmp	r0, #0
   1bbba:	d0df      	beq.n	1bb7c <smp_error+0x3c>
   1bbbc:	e7da      	b.n	1bb74 <smp_error+0x34>
		BT_WARN("SMP does not allow a pairing failure at this point. Known issue. "
   1bbbe:	2157      	movs	r1, #87	; 0x57
   1bbc0:	4808      	ldr	r0, [pc, #32]	; (1bbe4 <smp_error+0xa4>)
   1bbc2:	f00d f844 	bl	28c4e <z_log_minimal_printk>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1bbc6:	2105      	movs	r1, #5
   1bbc8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1bbcc:	f00f f871 	bl	2acb2 <bt_conn_disconnect>
		return 0;
   1bbd0:	2000      	movs	r0, #0
   1bbd2:	e7e9      	b.n	1bba8 <smp_error+0x68>
		net_buf_unref(buf);
   1bbd4:	4630      	mov	r0, r6
   1bbd6:	f000 ffe9 	bl	1cbac <net_buf_unref>
	return 0;
   1bbda:	2000      	movs	r0, #0
   1bbdc:	e7e4      	b.n	1bba8 <smp_error+0x68>
		return -ENOBUFS;
   1bbde:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1bbe2:	e7e1      	b.n	1bba8 <smp_error+0x68>
   1bbe4:	00032930 	.word	0x00032930

0001bbe8 <bt_smp_recv>:
{
   1bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1bbea:	898b      	ldrh	r3, [r1, #12]
   1bbec:	b37b      	cbz	r3, 1bc4e <bt_smp_recv+0x66>
   1bbee:	4606      	mov	r6, r0
   1bbf0:	460c      	mov	r4, r1
   1bbf2:	f1a0 07ec 	sub.w	r7, r0, #236	; 0xec
	return net_buf_simple_pull_mem(&buf->b, len);
   1bbf6:	2101      	movs	r1, #1
   1bbf8:	f104 0008 	add.w	r0, r4, #8
   1bbfc:	f001 f89e 	bl	1cd3c <net_buf_simple_pull_mem>
   1bc00:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1bc02:	2104      	movs	r1, #4
   1bc04:	f1a6 00e8 	sub.w	r0, r6, #232	; 0xe8
   1bc08:	f010 fcf4 	bl	2c5f4 <atomic_test_bit>
   1bc0c:	bb28      	cbnz	r0, 1bc5a <bt_smp_recv+0x72>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1bc0e:	7829      	ldrb	r1, [r5, #0]
   1bc10:	290e      	cmp	r1, #14
   1bc12:	d828      	bhi.n	1bc66 <bt_smp_recv+0x7e>
	if (!handlers[hdr->code].func) {
   1bc14:	4b27      	ldr	r3, [pc, #156]	; (1bcb4 <bt_smp_recv+0xcc>)
   1bc16:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1bc1a:	b353      	cbz	r3, 1bc72 <bt_smp_recv+0x8a>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1bc1c:	f1a6 00ec 	sub.w	r0, r6, #236	; 0xec
   1bc20:	f010 fe11 	bl	2c846 <atomic_test_and_clear_bit>
   1bc24:	b378      	cbz	r0, 1bc86 <bt_smp_recv+0x9e>
	if (buf->len != handlers[hdr->code].expect_len) {
   1bc26:	89a2      	ldrh	r2, [r4, #12]
   1bc28:	782b      	ldrb	r3, [r5, #0]
   1bc2a:	4922      	ldr	r1, [pc, #136]	; (1bcb4 <bt_smp_recv+0xcc>)
   1bc2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1bc30:	7909      	ldrb	r1, [r1, #4]
   1bc32:	428a      	cmp	r2, r1
   1bc34:	d134      	bne.n	1bca0 <bt_smp_recv+0xb8>
	err = handlers[hdr->code].func(smp, buf);
   1bc36:	4a1f      	ldr	r2, [pc, #124]	; (1bcb4 <bt_smp_recv+0xcc>)
   1bc38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   1bc3c:	4621      	mov	r1, r4
   1bc3e:	4638      	mov	r0, r7
   1bc40:	4798      	blx	r3
	if (err) {
   1bc42:	4601      	mov	r1, r0
   1bc44:	b138      	cbz	r0, 1bc56 <bt_smp_recv+0x6e>
		smp_error(smp, err);
   1bc46:	4638      	mov	r0, r7
   1bc48:	f7ff ff7a 	bl	1bb40 <smp_error>
   1bc4c:	e003      	b.n	1bc56 <bt_smp_recv+0x6e>
		BT_ERR("Too small SMP PDU received");
   1bc4e:	2145      	movs	r1, #69	; 0x45
   1bc50:	4819      	ldr	r0, [pc, #100]	; (1bcb8 <bt_smp_recv+0xd0>)
   1bc52:	f00c fffc 	bl	28c4e <z_log_minimal_printk>
}
   1bc56:	2000      	movs	r0, #0
   1bc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1bc5a:	782a      	ldrb	r2, [r5, #0]
   1bc5c:	2157      	movs	r1, #87	; 0x57
   1bc5e:	4817      	ldr	r0, [pc, #92]	; (1bcbc <bt_smp_recv+0xd4>)
   1bc60:	f00c fff5 	bl	28c4e <z_log_minimal_printk>
		return 0;
   1bc64:	e7f7      	b.n	1bc56 <bt_smp_recv+0x6e>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1bc66:	460a      	mov	r2, r1
   1bc68:	2157      	movs	r1, #87	; 0x57
   1bc6a:	4815      	ldr	r0, [pc, #84]	; (1bcc0 <bt_smp_recv+0xd8>)
   1bc6c:	f00c ffef 	bl	28c4e <z_log_minimal_printk>
		return 0;
   1bc70:	e7f1      	b.n	1bc56 <bt_smp_recv+0x6e>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1bc72:	460a      	mov	r2, r1
   1bc74:	2157      	movs	r1, #87	; 0x57
   1bc76:	4813      	ldr	r0, [pc, #76]	; (1bcc4 <bt_smp_recv+0xdc>)
   1bc78:	f00c ffe9 	bl	28c4e <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1bc7c:	2107      	movs	r1, #7
   1bc7e:	4638      	mov	r0, r7
   1bc80:	f7ff ff5e 	bl	1bb40 <smp_error>
		return 0;
   1bc84:	e7e7      	b.n	1bc56 <bt_smp_recv+0x6e>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1bc86:	782a      	ldrb	r2, [r5, #0]
   1bc88:	2157      	movs	r1, #87	; 0x57
   1bc8a:	480f      	ldr	r0, [pc, #60]	; (1bcc8 <bt_smp_recv+0xe0>)
   1bc8c:	f00c ffdf 	bl	28c4e <z_log_minimal_printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1bc90:	782b      	ldrb	r3, [r5, #0]
   1bc92:	2b05      	cmp	r3, #5
   1bc94:	d0df      	beq.n	1bc56 <bt_smp_recv+0x6e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1bc96:	2108      	movs	r1, #8
   1bc98:	4638      	mov	r0, r7
   1bc9a:	f7ff ff51 	bl	1bb40 <smp_error>
		return 0;
   1bc9e:	e7da      	b.n	1bc56 <bt_smp_recv+0x6e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1bca0:	2145      	movs	r1, #69	; 0x45
   1bca2:	480a      	ldr	r0, [pc, #40]	; (1bccc <bt_smp_recv+0xe4>)
   1bca4:	f00c ffd3 	bl	28c4e <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1bca8:	210a      	movs	r1, #10
   1bcaa:	4638      	mov	r0, r7
   1bcac:	f7ff ff48 	bl	1bb40 <smp_error>
		return 0;
   1bcb0:	e7d1      	b.n	1bc56 <bt_smp_recv+0x6e>
   1bcb2:	bf00      	nop
   1bcb4:	00032b10 	.word	0x00032b10
   1bcb8:	00032990 	.word	0x00032990
   1bcbc:	000329b0 	.word	0x000329b0
   1bcc0:	000329e8 	.word	0x000329e8
   1bcc4:	00032a10 	.word	0x00032a10
   1bcc8:	00032a30 	.word	0x00032a30
   1bccc:	00031fdc 	.word	0x00031fdc

0001bcd0 <bt_smp_pkey_ready>:
{
   1bcd0:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   1bcd2:	4b12      	ldr	r3, [pc, #72]	; (1bd1c <bt_smp_pkey_ready+0x4c>)
   1bcd4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1bcd6:	b120      	cbz	r0, 1bce2 <bt_smp_pkey_ready+0x12>
	z_impl_k_sem_give(sem);
   1bcd8:	4811      	ldr	r0, [pc, #68]	; (1bd20 <bt_smp_pkey_ready+0x50>)
   1bcda:	f006 fd27 	bl	2272c <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1bcde:	2400      	movs	r4, #0
   1bce0:	e014      	b.n	1bd0c <bt_smp_pkey_ready+0x3c>
		BT_WARN("Public key not available");
   1bce2:	2157      	movs	r1, #87	; 0x57
   1bce4:	480f      	ldr	r0, [pc, #60]	; (1bd24 <bt_smp_pkey_ready+0x54>)
   1bce6:	f00c ffb2 	bl	28c4e <z_log_minimal_printk>
		return;
   1bcea:	e011      	b.n	1bd10 <bt_smp_pkey_ready+0x40>
		struct bt_smp *smp = &bt_smp_pool[i];
   1bcec:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1bcf0:	4d0d      	ldr	r5, [pc, #52]	; (1bd28 <bt_smp_pkey_ready+0x58>)
   1bcf2:	fb03 5504 	mla	r5, r3, r4, r5
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1bcf6:	2106      	movs	r1, #6
   1bcf8:	1d28      	adds	r0, r5, #4
   1bcfa:	f010 fc7b 	bl	2c5f4 <atomic_test_bit>
   1bcfe:	b120      	cbz	r0, 1bd0a <bt_smp_pkey_ready+0x3a>
		err = smp_public_key_periph(smp);
   1bd00:	4628      	mov	r0, r5
   1bd02:	f7ff fb6f 	bl	1b3e4 <smp_public_key_periph>
		if (err) {
   1bd06:	4601      	mov	r1, r0
   1bd08:	b918      	cbnz	r0, 1bd12 <bt_smp_pkey_ready+0x42>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1bd0a:	3401      	adds	r4, #1
   1bd0c:	2c00      	cmp	r4, #0
   1bd0e:	d0ed      	beq.n	1bcec <bt_smp_pkey_ready+0x1c>
}
   1bd10:	bd38      	pop	{r3, r4, r5, pc}
			smp_error(smp, err);
   1bd12:	4628      	mov	r0, r5
   1bd14:	f7ff ff14 	bl	1bb40 <smp_error>
   1bd18:	e7f7      	b.n	1bd0a <bt_smp_pkey_ready+0x3a>
   1bd1a:	bf00      	nop
   1bd1c:	20002b38 	.word	0x20002b38
   1bd20:	20000a4c 	.word	0x20000a4c
   1bd24:	00032a50 	.word	0x00032a50
   1bd28:	20001cf0 	.word	0x20001cf0

0001bd2c <smp_ident_addr_info>:
{
   1bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd30:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1bd32:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1bd36:	688d      	ldr	r5, [r1, #8]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1bd38:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1bd3c:	f023 0302 	bic.w	r3, r3, #2
   1bd40:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1bd44:	782b      	ldrb	r3, [r5, #0]
   1bd46:	b123      	cbz	r3, 1bd52 <smp_ident_addr_info+0x26>
	return BT_ADDR_IS_STATIC(&addr->a);
   1bd48:	79ab      	ldrb	r3, [r5, #6]
   1bd4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_identity(&req->addr)) {
   1bd4e:	2bc0      	cmp	r3, #192	; 0xc0
   1bd50:	d133      	bne.n	1bdba <smp_ident_addr_info+0x8e>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1bd52:	f106 0790 	add.w	r7, r6, #144	; 0x90
	return memcmp(a, b, sizeof(*a));
   1bd56:	2207      	movs	r2, #7
   1bd58:	4629      	mov	r1, r5
   1bd5a:	4638      	mov	r0, r7
   1bd5c:	f00d fff1 	bl	29d42 <memcmp>
   1bd60:	b170      	cbz	r0, 1bd80 <smp_ident_addr_info+0x54>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1bd62:	4629      	mov	r1, r5
   1bd64:	7a30      	ldrb	r0, [r6, #8]
   1bd66:	f000 fb45 	bl	1c3f4 <bt_keys_find_addr>
		if (keys) {
   1bd6a:	4680      	mov	r8, r0
   1bd6c:	b140      	cbz	r0, 1bd80 <smp_ident_addr_info+0x54>
			if (!update_keys_check(smp, keys)) {
   1bd6e:	4601      	mov	r1, r0
   1bd70:	4620      	mov	r0, r4
   1bd72:	f010 fc8b 	bl	2c68c <update_keys_check>
   1bd76:	2800      	cmp	r0, #0
   1bd78:	d07e      	beq.n	1be78 <smp_ident_addr_info+0x14c>
			bt_keys_clear(keys);
   1bd7a:	4640      	mov	r0, r8
   1bd7c:	f000 fba6 	bl	1c4cc <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bd80:	210d      	movs	r1, #13
   1bd82:	1d20      	adds	r0, r4, #4
   1bd84:	f010 fc36 	bl	2c5f4 <atomic_test_bit>
   1bd88:	bb50      	cbnz	r0, 1bde0 <smp_ident_addr_info+0xb4>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1bd8a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1bd8e:	f013 0f04 	tst.w	r3, #4
   1bd92:	d00b      	beq.n	1bdac <smp_ident_addr_info+0x80>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bd94:	f3bf 8f5b 	dmb	ish
   1bd98:	e854 3f00 	ldrex	r3, [r4]
   1bd9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1bda0:	e844 3200 	strex	r2, r3, [r4]
   1bda4:	2a00      	cmp	r2, #0
   1bda6:	d1f7      	bne.n	1bd98 <smp_ident_addr_info+0x6c>
   1bda8:	f3bf 8f5b 	dmb	ish
	if (!smp->local_dist && !smp->remote_dist) {
   1bdac:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1bdb0:	2b00      	cmp	r3, #0
   1bdb2:	d05b      	beq.n	1be6c <smp_ident_addr_info+0x140>
	return 0;
   1bdb4:	2000      	movs	r0, #0
}
   1bdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1bdba:	4628      	mov	r0, r5
   1bdbc:	f7f7 ffe8 	bl	13d90 <bt_addr_le_str>
   1bdc0:	4602      	mov	r2, r0
   1bdc2:	2145      	movs	r1, #69	; 0x45
   1bdc4:	482d      	ldr	r0, [pc, #180]	; (1be7c <smp_ident_addr_info+0x150>)
   1bdc6:	f00c ff42 	bl	28c4e <z_log_minimal_printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1bdca:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1bdce:	f7f7 ffdf 	bl	13d90 <bt_addr_le_str>
   1bdd2:	4602      	mov	r2, r0
   1bdd4:	2145      	movs	r1, #69	; 0x45
   1bdd6:	482a      	ldr	r0, [pc, #168]	; (1be80 <smp_ident_addr_info+0x154>)
   1bdd8:	f00c ff39 	bl	28c4e <z_log_minimal_printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1bddc:	200a      	movs	r0, #10
   1bdde:	e7ea      	b.n	1bdb6 <smp_ident_addr_info+0x8a>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1bde0:	463a      	mov	r2, r7
   1bde2:	7a31      	ldrb	r1, [r6, #8]
   1bde4:	2002      	movs	r0, #2
   1bde6:	f000 fb4d 	bl	1c484 <bt_keys_get_type>
		if (!keys) {
   1bdea:	4680      	mov	r8, r0
   1bdec:	b190      	cbz	r0, 1be14 <smp_ident_addr_info+0xe8>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1bdee:	78f3      	ldrb	r3, [r6, #3]
   1bdf0:	b9d3      	cbnz	r3, 1be28 <smp_ident_addr_info+0xfc>
			dst = &conn->le.resp_addr;
   1bdf2:	f106 019e 	add.w	r1, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1bdf6:	780b      	ldrb	r3, [r1, #0]
   1bdf8:	2b01      	cmp	r3, #1
   1bdfa:	d104      	bne.n	1be06 <smp_ident_addr_info+0xda>
	return BT_ADDR_IS_RPA(&addr->a);
   1bdfc:	798b      	ldrb	r3, [r1, #6]
   1bdfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		if (bt_addr_le_is_rpa(dst)) {
   1be02:	2b40      	cmp	r3, #64	; 0x40
   1be04:	d013      	beq.n	1be2e <smp_ident_addr_info+0x102>
		err = smp_id_add_replace(smp, keys);
   1be06:	4641      	mov	r1, r8
   1be08:	4620      	mov	r0, r4
   1be0a:	f7ff fdc3 	bl	1b994 <smp_id_add_replace>
		if (err) {
   1be0e:	2800      	cmp	r0, #0
   1be10:	d0bb      	beq.n	1bd8a <smp_ident_addr_info+0x5e>
   1be12:	e7d0      	b.n	1bdb6 <smp_ident_addr_info+0x8a>
			BT_ERR("Unable to get keys for %s",
   1be14:	4638      	mov	r0, r7
   1be16:	f7f7 ffbb 	bl	13d90 <bt_addr_le_str>
   1be1a:	4602      	mov	r2, r0
   1be1c:	2145      	movs	r1, #69	; 0x45
   1be1e:	4819      	ldr	r0, [pc, #100]	; (1be84 <smp_ident_addr_info+0x158>)
   1be20:	f00c ff15 	bl	28c4e <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1be24:	2008      	movs	r0, #8
   1be26:	e7c6      	b.n	1bdb6 <smp_ident_addr_info+0x8a>
			dst = &conn->le.init_addr;
   1be28:	f106 0197 	add.w	r1, r6, #151	; 0x97
   1be2c:	e7e3      	b.n	1bdf6 <smp_ident_addr_info+0xca>
	memcpy(dst, src, sizeof(*dst));
   1be2e:	2206      	movs	r2, #6
   1be30:	3101      	adds	r1, #1
   1be32:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1be36:	f00d ffa9 	bl	29d8c <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1be3a:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   1be3e:	2b00      	cmp	r3, #0
   1be40:	d0e1      	beq.n	1be06 <smp_ident_addr_info+0xda>
	return BT_ADDR_IS_STATIC(&addr->a);
   1be42:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   1be46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1be4a:	2bc0      	cmp	r3, #192	; 0xc0
   1be4c:	d0db      	beq.n	1be06 <smp_ident_addr_info+0xda>
	memcpy(dst, src, sizeof(*dst));
   1be4e:	2207      	movs	r2, #7
   1be50:	4629      	mov	r1, r5
   1be52:	f108 0001 	add.w	r0, r8, #1
   1be56:	f00d ff99 	bl	29d8c <memcpy>
   1be5a:	2207      	movs	r2, #7
   1be5c:	4629      	mov	r1, r5
   1be5e:	4638      	mov	r0, r7
   1be60:	f00d ff94 	bl	29d8c <memcpy>
				bt_conn_identity_resolved(conn);
   1be64:	4630      	mov	r0, r6
   1be66:	f7fb fac7 	bl	173f8 <bt_conn_identity_resolved>
   1be6a:	e7cc      	b.n	1be06 <smp_ident_addr_info+0xda>
		smp_pairing_complete(smp, 0);
   1be6c:	2100      	movs	r1, #0
   1be6e:	4620      	mov	r0, r4
   1be70:	f7ff fde4 	bl	1ba3c <smp_pairing_complete>
	return 0;
   1be74:	2000      	movs	r0, #0
   1be76:	e79e      	b.n	1bdb6 <smp_ident_addr_info+0x8a>
				return BT_SMP_ERR_UNSPECIFIED;
   1be78:	2008      	movs	r0, #8
   1be7a:	e79c      	b.n	1bdb6 <smp_ident_addr_info+0x8a>
   1be7c:	00032a70 	.word	0x00032a70
   1be80:	00032a8c 	.word	0x00032a8c
   1be84:	000328a0 	.word	0x000328a0

0001be88 <smp_central_ident>:
{
   1be88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be8c:	4604      	mov	r4, r0
   1be8e:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1be90:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1be94:	210d      	movs	r1, #13
   1be96:	3004      	adds	r0, #4
   1be98:	f010 fbac 	bl	2c5f4 <atomic_test_bit>
   1be9c:	b9c0      	cbnz	r0, 1bed0 <smp_central_ident+0x48>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1be9e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1bea2:	f023 0201 	bic.w	r2, r3, #1
   1bea6:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1beaa:	f013 0f02 	tst.w	r3, #2
   1beae:	d12f      	bne.n	1bf10 <smp_central_ident+0x88>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1beb0:	f013 0f04 	tst.w	r3, #4
   1beb4:	d038      	beq.n	1bf28 <smp_central_ident+0xa0>
   1beb6:	f3bf 8f5b 	dmb	ish
   1beba:	e854 3f00 	ldrex	r3, [r4]
   1bebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1bec2:	e844 3200 	strex	r2, r3, [r4]
   1bec6:	2a00      	cmp	r2, #0
   1bec8:	d1f7      	bne.n	1beba <smp_central_ident+0x32>
   1beca:	f3bf 8f5b 	dmb	ish
   1bece:	e02b      	b.n	1bf28 <smp_central_ident+0xa0>
		struct bt_smp_central_ident *req = (void *)buf->data;
   1bed0:	68af      	ldr	r7, [r5, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1bed2:	f106 0890 	add.w	r8, r6, #144	; 0x90
   1bed6:	4642      	mov	r2, r8
   1bed8:	7a31      	ldrb	r1, [r6, #8]
   1beda:	2004      	movs	r0, #4
   1bedc:	f000 fad2 	bl	1c484 <bt_keys_get_type>
		if (!keys) {
   1bee0:	4605      	mov	r5, r0
   1bee2:	b158      	cbz	r0, 1befc <smp_central_ident+0x74>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1bee4:	2202      	movs	r2, #2
   1bee6:	4639      	mov	r1, r7
   1bee8:	3018      	adds	r0, #24
   1beea:	f00d ff4f 	bl	29d8c <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1beee:	2208      	movs	r2, #8
   1bef0:	1cb9      	adds	r1, r7, #2
   1bef2:	f105 0010 	add.w	r0, r5, #16
   1bef6:	f00d ff49 	bl	29d8c <memcpy>
   1befa:	e7d0      	b.n	1be9e <smp_central_ident+0x16>
			BT_ERR("Unable to get keys for %s",
   1befc:	4640      	mov	r0, r8
   1befe:	f7f7 ff47 	bl	13d90 <bt_addr_le_str>
   1bf02:	4602      	mov	r2, r0
   1bf04:	2145      	movs	r1, #69	; 0x45
   1bf06:	480e      	ldr	r0, [pc, #56]	; (1bf40 <smp_central_ident+0xb8>)
   1bf08:	f00c fea1 	bl	28c4e <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1bf0c:	2008      	movs	r0, #8
   1bf0e:	e00f      	b.n	1bf30 <smp_central_ident+0xa8>
   1bf10:	f3bf 8f5b 	dmb	ish
   1bf14:	e854 3f00 	ldrex	r3, [r4]
   1bf18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1bf1c:	e844 3200 	strex	r2, r3, [r4]
   1bf20:	2a00      	cmp	r2, #0
   1bf22:	d1f7      	bne.n	1bf14 <smp_central_ident+0x8c>
   1bf24:	f3bf 8f5b 	dmb	ish
	if (!smp->local_dist && !smp->remote_dist) {
   1bf28:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1bf2c:	b113      	cbz	r3, 1bf34 <smp_central_ident+0xac>
	return 0;
   1bf2e:	2000      	movs	r0, #0
}
   1bf30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		smp_pairing_complete(smp, 0);
   1bf34:	2100      	movs	r1, #0
   1bf36:	4620      	mov	r0, r4
   1bf38:	f7ff fd80 	bl	1ba3c <smp_pairing_complete>
	return 0;
   1bf3c:	2000      	movs	r0, #0
   1bf3e:	e7f7      	b.n	1bf30 <smp_central_ident+0xa8>
   1bf40:	000328a0 	.word	0x000328a0

0001bf44 <smp_pairing_failed>:
{
   1bf44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf48:	4604      	mov	r4, r0
   1bf4a:	460e      	mov	r6, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1bf4c:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bf50:	f7fe fc50 	bl	1a7f4 <latch_auth_cb>
   1bf54:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1bf56:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1bf58:	7832      	ldrb	r2, [r6, #0]
   1bf5a:	2145      	movs	r1, #69	; 0x45
   1bf5c:	480d      	ldr	r0, [pc, #52]	; (1bf94 <smp_pairing_failed+0x50>)
   1bf5e:	f00c fe76 	bl	28c4e <z_log_minimal_printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1bf62:	1d27      	adds	r7, r4, #4
   1bf64:	210a      	movs	r1, #10
   1bf66:	4638      	mov	r0, r7
   1bf68:	f010 fc6d 	bl	2c846 <atomic_test_and_clear_bit>
   1bf6c:	b158      	cbz	r0, 1bf86 <smp_pairing_failed+0x42>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1bf6e:	b11d      	cbz	r5, 1bf78 <smp_pairing_failed+0x34>
   1bf70:	692b      	ldr	r3, [r5, #16]
   1bf72:	b10b      	cbz	r3, 1bf78 <smp_pairing_failed+0x34>
			smp_auth_cb->cancel(conn);
   1bf74:	4640      	mov	r0, r8
   1bf76:	4798      	blx	r3
	smp_pairing_complete(smp, req->reason);
   1bf78:	7831      	ldrb	r1, [r6, #0]
   1bf7a:	4620      	mov	r0, r4
   1bf7c:	f7ff fd5e 	bl	1ba3c <smp_pairing_complete>
}
   1bf80:	2000      	movs	r0, #0
   1bf82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1bf86:	210b      	movs	r1, #11
   1bf88:	4638      	mov	r0, r7
   1bf8a:	f010 fc5c 	bl	2c846 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1bf8e:	2800      	cmp	r0, #0
   1bf90:	d0f2      	beq.n	1bf78 <smp_pairing_failed+0x34>
   1bf92:	e7ec      	b.n	1bf6e <smp_pairing_failed+0x2a>
   1bf94:	00032a9c 	.word	0x00032a9c

0001bf98 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1bf98:	7883      	ldrb	r3, [r0, #2]
   1bf9a:	2b01      	cmp	r3, #1
   1bf9c:	d000      	beq.n	1bfa0 <smp_check_complete+0x8>
   1bf9e:	4770      	bx	lr
{
   1bfa0:	b510      	push	{r4, lr}
   1bfa2:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1bfa4:	2106      	movs	r1, #6
   1bfa6:	f00e ffde 	bl	2af66 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1bfaa:	4603      	mov	r3, r0
   1bfac:	b158      	cbz	r0, 1bfc6 <smp_check_complete+0x2e>
		smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1bfae:	38ec      	subs	r0, #236	; 0xec
		smp->local_dist &= ~dist_complete;
   1bfb0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
   1bfb4:	43e1      	mvns	r1, r4
   1bfb6:	b249      	sxtb	r1, r1
   1bfb8:	400a      	ands	r2, r1
   1bfba:	f803 2c04 	strb.w	r2, [r3, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1bfbe:	f833 3c04 	ldrh.w	r3, [r3, #-4]
   1bfc2:	b163      	cbz	r3, 1bfde <smp_check_complete+0x46>
}
   1bfc4:	bd10      	pop	{r4, pc}
		__ASSERT(chan, "No SMP channel found");
   1bfc6:	4c08      	ldr	r4, [pc, #32]	; (1bfe8 <smp_check_complete+0x50>)
   1bfc8:	f240 3245 	movw	r2, #837	; 0x345
   1bfcc:	4621      	mov	r1, r4
   1bfce:	4807      	ldr	r0, [pc, #28]	; (1bfec <smp_check_complete+0x54>)
   1bfd0:	f00c fe1d 	bl	28c0e <assert_print>
   1bfd4:	f240 3145 	movw	r1, #837	; 0x345
   1bfd8:	4620      	mov	r0, r4
   1bfda:	f00c fe11 	bl	28c00 <assert_post_action>
			smp_pairing_complete(smp, 0);
   1bfde:	2100      	movs	r1, #0
   1bfe0:	f7ff fd2c 	bl	1ba3c <smp_pairing_complete>
		return;
   1bfe4:	e7ee      	b.n	1bfc4 <smp_check_complete+0x2c>
   1bfe6:	bf00      	nop
   1bfe8:	000328c0 	.word	0x000328c0
   1bfec:	00030128 	.word	0x00030128

0001bff0 <smp_timeout>:
{
   1bff0:	b538      	push	{r3, r4, r5, lr}
   1bff2:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
   1bff4:	f5a0 75c0 	sub.w	r5, r0, #384	; 0x180
	BT_ERR("SMP Timeout");
   1bff8:	2145      	movs	r1, #69	; 0x45
   1bffa:	480b      	ldr	r0, [pc, #44]	; (1c028 <smp_timeout+0x38>)
   1bffc:	f00c fe27 	bl	28c4e <z_log_minimal_printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1c000:	2108      	movs	r1, #8
   1c002:	4628      	mov	r0, r5
   1c004:	f7ff fd1a 	bl	1ba3c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1c008:	f5a4 74be 	sub.w	r4, r4, #380	; 0x17c
   1c00c:	f3bf 8f5b 	dmb	ish
   1c010:	e854 3f00 	ldrex	r3, [r4]
   1c014:	f043 0310 	orr.w	r3, r3, #16
   1c018:	e844 3200 	strex	r2, r3, [r4]
   1c01c:	2a00      	cmp	r2, #0
   1c01e:	d1f7      	bne.n	1c010 <smp_timeout+0x20>
   1c020:	f3bf 8f5b 	dmb	ish
}
   1c024:	bd38      	pop	{r3, r4, r5, pc}
   1c026:	bf00      	nop
   1c028:	00032ac4 	.word	0x00032ac4

0001c02c <bt_smp_update_keys>:
{
   1c02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c02e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1c030:	f7fe fb8a 	bl	1a748 <smp_chan_get>
	if (!smp) {
   1c034:	2800      	cmp	r0, #0
   1c036:	d044      	beq.n	1c0c2 <bt_smp_update_keys+0x96>
   1c038:	4605      	mov	r5, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c03a:	1d06      	adds	r6, r0, #4
   1c03c:	2103      	movs	r1, #3
   1c03e:	4630      	mov	r0, r6
   1c040:	f010 fad8 	bl	2c5f4 <atomic_test_bit>
   1c044:	2800      	cmp	r0, #0
   1c046:	d03c      	beq.n	1c0c2 <bt_smp_update_keys+0x96>
	if (conn->le.keys) {
   1c048:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c04c:	b108      	cbz	r0, 1c052 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1c04e:	f000 fa3d 	bl	1c4cc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c052:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1c056:	4639      	mov	r1, r7
   1c058:	7a20      	ldrb	r0, [r4, #8]
   1c05a:	f000 f89f 	bl	1c19c <bt_keys_get_addr>
   1c05e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1c062:	b378      	cbz	r0, 1c0c4 <bt_smp_update_keys+0x98>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1c064:	210e      	movs	r1, #14
   1c066:	4630      	mov	r0, r6
   1c068:	f010 fac4 	bl	2c5f4 <atomic_test_bit>
   1c06c:	b128      	cbz	r0, 1c07a <bt_smp_update_keys+0x4e>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1c06e:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c072:	7b53      	ldrb	r3, [r2, #13]
   1c074:	f043 0302 	orr.w	r3, r3, #2
   1c078:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1c07a:	7a2b      	ldrb	r3, [r5, #8]
   1c07c:	2b03      	cmp	r3, #3
   1c07e:	d92e      	bls.n	1c0de <bt_smp_update_keys+0xb2>
   1c080:	3b05      	subs	r3, #5
   1c082:	b2db      	uxtb	r3, r3
   1c084:	2b01      	cmp	r3, #1
   1c086:	d82d      	bhi.n	1c0e4 <bt_smp_update_keys+0xb8>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1c088:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c08c:	7b53      	ldrb	r3, [r2, #13]
   1c08e:	f043 0320 	orr.w	r3, r3, #32
   1c092:	7353      	strb	r3, [r2, #13]
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1c094:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c098:	7b53      	ldrb	r3, [r2, #13]
   1c09a:	f043 0301 	orr.w	r3, r3, #1
   1c09e:	7353      	strb	r3, [r2, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1c0a0:	f8d4 70bc 	ldr.w	r7, [r4, #188]	; 0xbc
   1c0a4:	4628      	mov	r0, r5
   1c0a6:	f010 fa45 	bl	2c534 <get_encryption_key_size>
   1c0aa:	7338      	strb	r0, [r7, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c0ac:	2105      	movs	r1, #5
   1c0ae:	4630      	mov	r0, r6
   1c0b0:	f010 faa0 	bl	2c5f4 <atomic_test_bit>
   1c0b4:	bb18      	cbnz	r0, 1c0fe <bt_smp_update_keys+0xd2>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1c0b6:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c0ba:	7b53      	ldrb	r3, [r2, #13]
   1c0bc:	f023 0310 	bic.w	r3, r3, #16
   1c0c0:	7353      	strb	r3, [r2, #13]
}
   1c0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Unable to get keys for %s",
   1c0c4:	4638      	mov	r0, r7
   1c0c6:	f7f7 fe63 	bl	13d90 <bt_addr_le_str>
   1c0ca:	4602      	mov	r2, r0
   1c0cc:	2145      	movs	r1, #69	; 0x45
   1c0ce:	4820      	ldr	r0, [pc, #128]	; (1c150 <bt_smp_update_keys+0x124>)
   1c0d0:	f00c fdbd 	bl	28c4e <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c0d4:	2108      	movs	r1, #8
   1c0d6:	4628      	mov	r0, r5
   1c0d8:	f7ff fd32 	bl	1bb40 <smp_error>
		return;
   1c0dc:	e7f1      	b.n	1c0c2 <bt_smp_update_keys+0x96>
	switch (smp->method) {
   1c0de:	b25b      	sxtb	r3, r3
   1c0e0:	2b00      	cmp	r3, #0
   1c0e2:	d1d7      	bne.n	1c094 <bt_smp_update_keys+0x68>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1c0e4:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c0e8:	7b53      	ldrb	r3, [r2, #13]
   1c0ea:	f023 0320 	bic.w	r3, r3, #32
   1c0ee:	7353      	strb	r3, [r2, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1c0f0:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c0f4:	7b53      	ldrb	r3, [r2, #13]
   1c0f6:	f023 0301 	bic.w	r3, r3, #1
   1c0fa:	7353      	strb	r3, [r2, #13]
		break;
   1c0fc:	e7d0      	b.n	1c0a0 <bt_smp_update_keys+0x74>
		conn->le.keys->flags |= BT_KEYS_SC;
   1c0fe:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c102:	7b53      	ldrb	r3, [r2, #13]
   1c104:	f043 0310 	orr.w	r3, r3, #16
   1c108:	7353      	strb	r3, [r2, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c10a:	210d      	movs	r1, #13
   1c10c:	4630      	mov	r0, r6
   1c10e:	f010 fa71 	bl	2c5f4 <atomic_test_bit>
   1c112:	2800      	cmp	r0, #0
   1c114:	d0d5      	beq.n	1c0c2 <bt_smp_update_keys+0x96>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1c116:	2120      	movs	r1, #32
   1c118:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c11c:	f000 f99c 	bl	1c458 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1c120:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c124:	2210      	movs	r2, #16
   1c126:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1c12a:	301a      	adds	r0, #26
   1c12c:	f00d fe2e 	bl	29d8c <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1c130:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c134:	2208      	movs	r2, #8
   1c136:	2100      	movs	r1, #0
   1c138:	3010      	adds	r0, #16
   1c13a:	f00d fe56 	bl	29dea <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1c13e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c142:	2202      	movs	r2, #2
   1c144:	2100      	movs	r1, #0
   1c146:	3018      	adds	r0, #24
   1c148:	f00d fe4f 	bl	29dea <memset>
   1c14c:	e7b9      	b.n	1c0c2 <bt_smp_update_keys+0x96>
   1c14e:	bf00      	nop
   1c150:	000328a0 	.word	0x000328a0

0001c154 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1c154:	b508      	push	{r3, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
   1c156:	f7fe faeb 	bl	1a730 <le_sc_supported>
   1c15a:	4b03      	ldr	r3, [pc, #12]	; (1c168 <bt_smp_init+0x14>)
   1c15c:	7018      	strb	r0, [r3, #0]
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1c15e:	4803      	ldr	r0, [pc, #12]	; (1c16c <bt_smp_init+0x18>)
   1c160:	f7fa fb4a 	bl	167f8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1c164:	2000      	movs	r0, #0
   1c166:	bd08      	pop	{r3, pc}
   1c168:	200045f3 	.word	0x200045f3
   1c16c:	200007b8 	.word	0x200007b8

0001c170 <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   1c170:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1c172:	b110      	cbz	r0, 1c17a <id_add+0xa>

	bt_id_add(keys);
   1c174:	f7f9 fdac 	bl	15cd0 <bt_id_add>
}
   1c178:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(keys != NULL);
   1c17a:	4c06      	ldr	r4, [pc, #24]	; (1c194 <id_add+0x24>)
   1c17c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
   1c180:	4621      	mov	r1, r4
   1c182:	4805      	ldr	r0, [pc, #20]	; (1c198 <id_add+0x28>)
   1c184:	f00c fd43 	bl	28c0e <assert_print>
   1c188:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   1c18c:	4620      	mov	r0, r4
   1c18e:	f00c fd37 	bl	28c00 <assert_post_action>
   1c192:	bf00      	nop
   1c194:	00032bc8 	.word	0x00032bc8
   1c198:	00030128 	.word	0x00030128

0001c19c <bt_keys_get_addr>:
{
   1c19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1c1a0:	b149      	cbz	r1, 1c1b6 <bt_keys_get_addr+0x1a>
   1c1a2:	4606      	mov	r6, r0
   1c1a4:	4688      	mov	r8, r1
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   1c1a6:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c1a8:	2400      	movs	r4, #0
   1c1aa:	b174      	cbz	r4, 1c1ca <bt_keys_get_addr+0x2e>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1c1ac:	b37d      	cbz	r5, 1c20e <bt_keys_get_addr+0x72>
	return NULL;
   1c1ae:	2700      	movs	r7, #0
}
   1c1b0:	4638      	mov	r0, r7
   1c1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(addr != NULL);
   1c1b6:	4c1c      	ldr	r4, [pc, #112]	; (1c228 <bt_keys_get_addr+0x8c>)
   1c1b8:	2258      	movs	r2, #88	; 0x58
   1c1ba:	4621      	mov	r1, r4
   1c1bc:	481b      	ldr	r0, [pc, #108]	; (1c22c <bt_keys_get_addr+0x90>)
   1c1be:	f00c fd26 	bl	28c0e <assert_print>
   1c1c2:	2158      	movs	r1, #88	; 0x58
   1c1c4:	4620      	mov	r0, r4
   1c1c6:	f00c fd1b 	bl	28c00 <assert_post_action>
		keys = &key_pool[i];
   1c1ca:	235c      	movs	r3, #92	; 0x5c
   1c1cc:	fb04 f303 	mul.w	r3, r4, r3
   1c1d0:	4a17      	ldr	r2, [pc, #92]	; (1c230 <bt_keys_get_addr+0x94>)
   1c1d2:	189f      	adds	r7, r3, r2
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1c1d4:	5cd3      	ldrb	r3, [r2, r3]
   1c1d6:	42b3      	cmp	r3, r6
   1c1d8:	d003      	beq.n	1c1e2 <bt_keys_get_addr+0x46>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1c1da:	2d01      	cmp	r5, #1
   1c1dc:	d00a      	beq.n	1c1f4 <bt_keys_get_addr+0x58>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c1de:	3401      	adds	r4, #1
   1c1e0:	e7e3      	b.n	1c1aa <bt_keys_get_addr+0xe>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1c1e2:	4638      	mov	r0, r7
	return memcmp(a, b, sizeof(*a));
   1c1e4:	2207      	movs	r2, #7
   1c1e6:	4641      	mov	r1, r8
   1c1e8:	3001      	adds	r0, #1
   1c1ea:	f00d fdaa 	bl	29d42 <memcmp>
   1c1ee:	2800      	cmp	r0, #0
   1c1f0:	d1f3      	bne.n	1c1da <bt_keys_get_addr+0x3e>
   1c1f2:	e7dd      	b.n	1c1b0 <bt_keys_get_addr+0x14>
		    bt_addr_le_eq(&keys->addr, BT_ADDR_LE_ANY)) {
   1c1f4:	235c      	movs	r3, #92	; 0x5c
   1c1f6:	480e      	ldr	r0, [pc, #56]	; (1c230 <bt_keys_get_addr+0x94>)
   1c1f8:	fb03 0004 	mla	r0, r3, r4, r0
   1c1fc:	2207      	movs	r2, #7
   1c1fe:	490d      	ldr	r1, [pc, #52]	; (1c234 <bt_keys_get_addr+0x98>)
   1c200:	3001      	adds	r0, #1
   1c202:	f00d fd9e 	bl	29d42 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1c206:	2800      	cmp	r0, #0
   1c208:	d1e9      	bne.n	1c1de <bt_keys_get_addr+0x42>
			first_free_slot = i;
   1c20a:	4625      	mov	r5, r4
   1c20c:	e7e7      	b.n	1c1de <bt_keys_get_addr+0x42>
		keys = &key_pool[first_free_slot];
   1c20e:	235c      	movs	r3, #92	; 0x5c
   1c210:	fb03 f505 	mul.w	r5, r3, r5
   1c214:	4b06      	ldr	r3, [pc, #24]	; (1c230 <bt_keys_get_addr+0x94>)
   1c216:	18ef      	adds	r7, r5, r3
		keys->id = id;
   1c218:	555e      	strb	r6, [r3, r5]
	memcpy(dst, src, sizeof(*dst));
   1c21a:	2207      	movs	r2, #7
   1c21c:	4641      	mov	r1, r8
   1c21e:	1c78      	adds	r0, r7, #1
   1c220:	f00d fdb4 	bl	29d8c <memcpy>
		return keys;
   1c224:	e7c4      	b.n	1c1b0 <bt_keys_get_addr+0x14>
   1c226:	bf00      	nop
   1c228:	00032bc8 	.word	0x00032bc8
   1c22c:	00030128 	.word	0x00030128
   1c230:	20002b3c 	.word	0x20002b3c
   1c234:	00030c24 	.word	0x00030c24

0001c238 <bt_keys_foreach_type>:
{
   1c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(func != NULL);
   1c23a:	b121      	cbz	r1, 1c246 <bt_keys_foreach_type+0xe>
   1c23c:	4605      	mov	r5, r0
   1c23e:	4616      	mov	r6, r2
   1c240:	460f      	mov	r7, r1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c242:	2400      	movs	r4, #0
   1c244:	e016      	b.n	1c274 <bt_keys_foreach_type+0x3c>
	__ASSERT_NO_MSG(func != NULL);
   1c246:	4c0d      	ldr	r4, [pc, #52]	; (1c27c <bt_keys_foreach_type+0x44>)
   1c248:	22b2      	movs	r2, #178	; 0xb2
   1c24a:	4621      	mov	r1, r4
   1c24c:	480c      	ldr	r0, [pc, #48]	; (1c280 <bt_keys_foreach_type+0x48>)
   1c24e:	f00c fcde 	bl	28c0e <assert_print>
   1c252:	21b2      	movs	r1, #178	; 0xb2
   1c254:	4620      	mov	r0, r4
   1c256:	f00c fcd3 	bl	28c00 <assert_post_action>
		if ((key_pool[i].keys & type)) {
   1c25a:	4b0a      	ldr	r3, [pc, #40]	; (1c284 <bt_keys_foreach_type+0x4c>)
   1c25c:	225c      	movs	r2, #92	; 0x5c
   1c25e:	fb02 3304 	mla	r3, r2, r4, r3
   1c262:	89db      	ldrh	r3, [r3, #14]
   1c264:	421d      	tst	r5, r3
   1c266:	d004      	beq.n	1c272 <bt_keys_foreach_type+0x3a>
			func(&key_pool[i], data);
   1c268:	4631      	mov	r1, r6
   1c26a:	4b06      	ldr	r3, [pc, #24]	; (1c284 <bt_keys_foreach_type+0x4c>)
   1c26c:	fb02 3004 	mla	r0, r2, r4, r3
   1c270:	47b8      	blx	r7
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c272:	3401      	adds	r4, #1
   1c274:	2c00      	cmp	r4, #0
   1c276:	d0f0      	beq.n	1c25a <bt_keys_foreach_type+0x22>
}
   1c278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c27a:	bf00      	nop
   1c27c:	00032bc8 	.word	0x00032bc8
   1c280:	00030128 	.word	0x00030128
   1c284:	20002b3c 	.word	0x20002b3c

0001c288 <keys_commit>:

static int keys_commit(void)
{
   1c288:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1c28a:	2200      	movs	r2, #0
   1c28c:	4902      	ldr	r1, [pc, #8]	; (1c298 <keys_commit+0x10>)
   1c28e:	2002      	movs	r0, #2
   1c290:	f7ff ffd2 	bl	1c238 <bt_keys_foreach_type>
	}

	return 0;
}
   1c294:	2000      	movs	r0, #0
   1c296:	bd08      	pop	{r3, pc}
   1c298:	0001c171 	.word	0x0001c171

0001c29c <bt_keys_find>:
{
   1c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1c29e:	b132      	cbz	r2, 1c2ae <bt_keys_find+0x12>
   1c2a0:	4606      	mov	r6, r0
   1c2a2:	460d      	mov	r5, r1
   1c2a4:	4617      	mov	r7, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c2a6:	2400      	movs	r4, #0
   1c2a8:	b15c      	cbz	r4, 1c2c2 <bt_keys_find+0x26>
	return NULL;
   1c2aa:	2000      	movs	r0, #0
}
   1c2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(addr != NULL);
   1c2ae:	4c14      	ldr	r4, [pc, #80]	; (1c300 <bt_keys_find+0x64>)
   1c2b0:	22bf      	movs	r2, #191	; 0xbf
   1c2b2:	4621      	mov	r1, r4
   1c2b4:	4813      	ldr	r0, [pc, #76]	; (1c304 <bt_keys_find+0x68>)
   1c2b6:	f00c fcaa 	bl	28c0e <assert_print>
   1c2ba:	21bf      	movs	r1, #191	; 0xbf
   1c2bc:	4620      	mov	r0, r4
   1c2be:	f00c fc9f 	bl	28c00 <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1c2c2:	4b11      	ldr	r3, [pc, #68]	; (1c308 <bt_keys_find+0x6c>)
   1c2c4:	225c      	movs	r2, #92	; 0x5c
   1c2c6:	fb02 3304 	mla	r3, r2, r4, r3
   1c2ca:	89db      	ldrh	r3, [r3, #14]
   1c2cc:	421e      	tst	r6, r3
   1c2ce:	d006      	beq.n	1c2de <bt_keys_find+0x42>
   1c2d0:	4613      	mov	r3, r2
   1c2d2:	fb04 f303 	mul.w	r3, r4, r3
   1c2d6:	4a0c      	ldr	r2, [pc, #48]	; (1c308 <bt_keys_find+0x6c>)
   1c2d8:	5cd3      	ldrb	r3, [r2, r3]
   1c2da:	429d      	cmp	r5, r3
   1c2dc:	d001      	beq.n	1c2e2 <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c2de:	3401      	adds	r4, #1
   1c2e0:	e7e2      	b.n	1c2a8 <bt_keys_find+0xc>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
   1c2e2:	235c      	movs	r3, #92	; 0x5c
   1c2e4:	fb03 2004 	mla	r0, r3, r4, r2
	return memcmp(a, b, sizeof(*a));
   1c2e8:	2207      	movs	r2, #7
   1c2ea:	4639      	mov	r1, r7
   1c2ec:	3001      	adds	r0, #1
   1c2ee:	f00d fd28 	bl	29d42 <memcmp>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1c2f2:	2800      	cmp	r0, #0
   1c2f4:	d1f3      	bne.n	1c2de <bt_keys_find+0x42>
			return &key_pool[i];
   1c2f6:	235c      	movs	r3, #92	; 0x5c
   1c2f8:	4803      	ldr	r0, [pc, #12]	; (1c308 <bt_keys_find+0x6c>)
   1c2fa:	fb03 0004 	mla	r0, r3, r4, r0
   1c2fe:	e7d5      	b.n	1c2ac <bt_keys_find+0x10>
   1c300:	00032bc8 	.word	0x00032bc8
   1c304:	00030128 	.word	0x00030128
   1c308:	20002b3c 	.word	0x20002b3c

0001c30c <bt_keys_find_irk>:
{
   1c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1c30e:	b179      	cbz	r1, 1c330 <bt_keys_find_irk+0x24>
   1c310:	4605      	mov	r5, r0
   1c312:	460e      	mov	r6, r1
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1c314:	780b      	ldrb	r3, [r1, #0]
   1c316:	2b01      	cmp	r3, #1
   1c318:	d163      	bne.n	1c3e2 <bt_keys_find_irk+0xd6>
	return BT_ADDR_IS_RPA(&addr->a);
   1c31a:	798b      	ldrb	r3, [r1, #6]
   1c31c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_rpa(addr)) {
   1c320:	2b40      	cmp	r3, #64	; 0x40
   1c322:	d10f      	bne.n	1c344 <bt_keys_find_irk+0x38>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c324:	2400      	movs	r4, #0
   1c326:	b17c      	cbz	r4, 1c348 <bt_keys_find_irk+0x3c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c328:	2400      	movs	r4, #0
   1c32a:	b37c      	cbz	r4, 1c38c <bt_keys_find_irk+0x80>
	return NULL;
   1c32c:	2000      	movs	r0, #0
   1c32e:	e059      	b.n	1c3e4 <bt_keys_find_irk+0xd8>
	__ASSERT_NO_MSG(addr != NULL);
   1c330:	4c2d      	ldr	r4, [pc, #180]	; (1c3e8 <bt_keys_find_irk+0xdc>)
   1c332:	22e8      	movs	r2, #232	; 0xe8
   1c334:	4621      	mov	r1, r4
   1c336:	482d      	ldr	r0, [pc, #180]	; (1c3ec <bt_keys_find_irk+0xe0>)
   1c338:	f00c fc69 	bl	28c0e <assert_print>
   1c33c:	21e8      	movs	r1, #232	; 0xe8
   1c33e:	4620      	mov	r0, r4
   1c340:	f00c fc5e 	bl	28c00 <assert_post_action>
		return NULL;
   1c344:	2000      	movs	r0, #0
   1c346:	e04d      	b.n	1c3e4 <bt_keys_find_irk+0xd8>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1c348:	4b29      	ldr	r3, [pc, #164]	; (1c3f0 <bt_keys_find_irk+0xe4>)
   1c34a:	225c      	movs	r2, #92	; 0x5c
   1c34c:	fb02 3304 	mla	r3, r2, r4, r3
   1c350:	89db      	ldrh	r3, [r3, #14]
   1c352:	f013 0f02 	tst.w	r3, #2
   1c356:	d006      	beq.n	1c366 <bt_keys_find_irk+0x5a>
		if (key_pool[i].id == id &&
   1c358:	4613      	mov	r3, r2
   1c35a:	fb04 f303 	mul.w	r3, r4, r3
   1c35e:	4a24      	ldr	r2, [pc, #144]	; (1c3f0 <bt_keys_find_irk+0xe4>)
   1c360:	5cd3      	ldrb	r3, [r2, r3]
   1c362:	42ab      	cmp	r3, r5
   1c364:	d001      	beq.n	1c36a <bt_keys_find_irk+0x5e>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c366:	3401      	adds	r4, #1
   1c368:	e7dd      	b.n	1c326 <bt_keys_find_irk+0x1a>
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   1c36a:	215c      	movs	r1, #92	; 0x5c
   1c36c:	fb04 f101 	mul.w	r1, r4, r1
   1c370:	3138      	adds	r1, #56	; 0x38
   1c372:	4411      	add	r1, r2
	return memcmp(a, b, sizeof(*a));
   1c374:	2206      	movs	r2, #6
   1c376:	3102      	adds	r1, #2
   1c378:	1c70      	adds	r0, r6, #1
   1c37a:	f00d fce2 	bl	29d42 <memcmp>
		if (key_pool[i].id == id &&
   1c37e:	2800      	cmp	r0, #0
   1c380:	d1f1      	bne.n	1c366 <bt_keys_find_irk+0x5a>
			return &key_pool[i];
   1c382:	235c      	movs	r3, #92	; 0x5c
   1c384:	481a      	ldr	r0, [pc, #104]	; (1c3f0 <bt_keys_find_irk+0xe4>)
   1c386:	fb03 0004 	mla	r0, r3, r4, r0
   1c38a:	e02b      	b.n	1c3e4 <bt_keys_find_irk+0xd8>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1c38c:	4b18      	ldr	r3, [pc, #96]	; (1c3f0 <bt_keys_find_irk+0xe4>)
   1c38e:	225c      	movs	r2, #92	; 0x5c
   1c390:	fb02 3304 	mla	r3, r2, r4, r3
   1c394:	89db      	ldrh	r3, [r3, #14]
   1c396:	f013 0f02 	tst.w	r3, #2
   1c39a:	d006      	beq.n	1c3aa <bt_keys_find_irk+0x9e>
		if (key_pool[i].id != id) {
   1c39c:	4613      	mov	r3, r2
   1c39e:	fb04 f303 	mul.w	r3, r4, r3
   1c3a2:	4a13      	ldr	r2, [pc, #76]	; (1c3f0 <bt_keys_find_irk+0xe4>)
   1c3a4:	5cd3      	ldrb	r3, [r2, r3]
   1c3a6:	42ab      	cmp	r3, r5
   1c3a8:	d001      	beq.n	1c3ae <bt_keys_find_irk+0xa2>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c3aa:	3401      	adds	r4, #1
   1c3ac:	e7bd      	b.n	1c32a <bt_keys_find_irk+0x1e>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1c3ae:	205c      	movs	r0, #92	; 0x5c
   1c3b0:	fb04 f000 	mul.w	r0, r4, r0
   1c3b4:	3028      	adds	r0, #40	; 0x28
   1c3b6:	4410      	add	r0, r2
   1c3b8:	1c77      	adds	r7, r6, #1
   1c3ba:	4639      	mov	r1, r7
   1c3bc:	3002      	adds	r0, #2
   1c3be:	f00d fd84 	bl	29eca <bt_rpa_irk_matches>
   1c3c2:	2800      	cmp	r0, #0
   1c3c4:	d0f1      	beq.n	1c3aa <bt_keys_find_irk+0x9e>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   1c3c6:	235c      	movs	r3, #92	; 0x5c
   1c3c8:	fb03 f404 	mul.w	r4, r3, r4
   1c3cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1c3d0:	4d07      	ldr	r5, [pc, #28]	; (1c3f0 <bt_keys_find_irk+0xe4>)
   1c3d2:	4428      	add	r0, r5
	memcpy(dst, src, sizeof(*dst));
   1c3d4:	2206      	movs	r2, #6
   1c3d6:	4639      	mov	r1, r7
   1c3d8:	3002      	adds	r0, #2
   1c3da:	f00d fcd7 	bl	29d8c <memcpy>
			return &key_pool[i];
   1c3de:	1960      	adds	r0, r4, r5
   1c3e0:	e000      	b.n	1c3e4 <bt_keys_find_irk+0xd8>
		return NULL;
   1c3e2:	2000      	movs	r0, #0
}
   1c3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c3e6:	bf00      	nop
   1c3e8:	00032bc8 	.word	0x00032bc8
   1c3ec:	00030128 	.word	0x00030128
   1c3f0:	20002b3c 	.word	0x20002b3c

0001c3f4 <bt_keys_find_addr>:
{
   1c3f4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1c3f6:	b129      	cbz	r1, 1c404 <bt_keys_find_addr+0x10>
   1c3f8:	4605      	mov	r5, r0
   1c3fa:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c3fc:	2400      	movs	r4, #0
   1c3fe:	b16c      	cbz	r4, 1c41c <bt_keys_find_addr+0x28>
	return NULL;
   1c400:	2000      	movs	r0, #0
}
   1c402:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(addr != NULL);
   1c404:	4c11      	ldr	r4, [pc, #68]	; (1c44c <bt_keys_find_addr+0x58>)
   1c406:	f240 121b 	movw	r2, #283	; 0x11b
   1c40a:	4621      	mov	r1, r4
   1c40c:	4810      	ldr	r0, [pc, #64]	; (1c450 <bt_keys_find_addr+0x5c>)
   1c40e:	f00c fbfe 	bl	28c0e <assert_print>
   1c412:	f240 111b 	movw	r1, #283	; 0x11b
   1c416:	4620      	mov	r0, r4
   1c418:	f00c fbf2 	bl	28c00 <assert_post_action>
		if (key_pool[i].id == id &&
   1c41c:	235c      	movs	r3, #92	; 0x5c
   1c41e:	fb04 f303 	mul.w	r3, r4, r3
   1c422:	4a0c      	ldr	r2, [pc, #48]	; (1c454 <bt_keys_find_addr+0x60>)
   1c424:	5cd3      	ldrb	r3, [r2, r3]
   1c426:	429d      	cmp	r5, r3
   1c428:	d001      	beq.n	1c42e <bt_keys_find_addr+0x3a>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c42a:	3401      	adds	r4, #1
   1c42c:	e7e7      	b.n	1c3fe <bt_keys_find_addr+0xa>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
   1c42e:	235c      	movs	r3, #92	; 0x5c
   1c430:	fb03 2004 	mla	r0, r3, r4, r2
	return memcmp(a, b, sizeof(*a));
   1c434:	2207      	movs	r2, #7
   1c436:	4631      	mov	r1, r6
   1c438:	3001      	adds	r0, #1
   1c43a:	f00d fc82 	bl	29d42 <memcmp>
		if (key_pool[i].id == id &&
   1c43e:	2800      	cmp	r0, #0
   1c440:	d1f3      	bne.n	1c42a <bt_keys_find_addr+0x36>
			return &key_pool[i];
   1c442:	235c      	movs	r3, #92	; 0x5c
   1c444:	4803      	ldr	r0, [pc, #12]	; (1c454 <bt_keys_find_addr+0x60>)
   1c446:	fb03 0004 	mla	r0, r3, r4, r0
   1c44a:	e7da      	b.n	1c402 <bt_keys_find_addr+0xe>
   1c44c:	00032bc8 	.word	0x00032bc8
   1c450:	00030128 	.word	0x00030128
   1c454:	20002b3c 	.word	0x20002b3c

0001c458 <bt_keys_add_type>:
	__ASSERT_NO_MSG(keys != NULL);
   1c458:	b118      	cbz	r0, 1c462 <bt_keys_add_type+0xa>
	keys->keys |= type;
   1c45a:	89c2      	ldrh	r2, [r0, #14]
   1c45c:	4311      	orrs	r1, r2
   1c45e:	81c1      	strh	r1, [r0, #14]
   1c460:	4770      	bx	lr
{
   1c462:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1c464:	4c05      	ldr	r4, [pc, #20]	; (1c47c <bt_keys_add_type+0x24>)
   1c466:	f240 122b 	movw	r2, #299	; 0x12b
   1c46a:	4621      	mov	r1, r4
   1c46c:	4804      	ldr	r0, [pc, #16]	; (1c480 <bt_keys_add_type+0x28>)
   1c46e:	f00c fbce 	bl	28c0e <assert_print>
   1c472:	f240 112b 	movw	r1, #299	; 0x12b
   1c476:	4620      	mov	r0, r4
   1c478:	f00c fbc2 	bl	28c00 <assert_post_action>
   1c47c:	00032bc8 	.word	0x00032bc8
   1c480:	00030128 	.word	0x00030128

0001c484 <bt_keys_get_type>:
{
   1c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1c486:	b142      	cbz	r2, 1c49a <bt_keys_get_type+0x16>
   1c488:	4605      	mov	r5, r0
   1c48a:	460c      	mov	r4, r1
   1c48c:	4617      	mov	r7, r2
	keys = bt_keys_find(type, id, addr);
   1c48e:	f7ff ff05 	bl	1c29c <bt_keys_find>
	if (keys) {
   1c492:	4606      	mov	r6, r0
   1c494:	b158      	cbz	r0, 1c4ae <bt_keys_get_type+0x2a>
}
   1c496:	4630      	mov	r0, r6
   1c498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(addr != NULL);
   1c49a:	4c0a      	ldr	r4, [pc, #40]	; (1c4c4 <bt_keys_get_type+0x40>)
   1c49c:	22d1      	movs	r2, #209	; 0xd1
   1c49e:	4621      	mov	r1, r4
   1c4a0:	4809      	ldr	r0, [pc, #36]	; (1c4c8 <bt_keys_get_type+0x44>)
   1c4a2:	f00c fbb4 	bl	28c0e <assert_print>
   1c4a6:	21d1      	movs	r1, #209	; 0xd1
   1c4a8:	4620      	mov	r0, r4
   1c4aa:	f00c fba9 	bl	28c00 <assert_post_action>
	keys = bt_keys_get_addr(id, addr);
   1c4ae:	4639      	mov	r1, r7
   1c4b0:	4620      	mov	r0, r4
   1c4b2:	f7ff fe73 	bl	1c19c <bt_keys_get_addr>
	if (!keys) {
   1c4b6:	4606      	mov	r6, r0
   1c4b8:	2800      	cmp	r0, #0
   1c4ba:	d0ec      	beq.n	1c496 <bt_keys_get_type+0x12>
	bt_keys_add_type(keys, type);
   1c4bc:	4629      	mov	r1, r5
   1c4be:	f7ff ffcb 	bl	1c458 <bt_keys_add_type>
	return keys;
   1c4c2:	e7e8      	b.n	1c496 <bt_keys_get_type+0x12>
   1c4c4:	00032bc8 	.word	0x00032bc8
   1c4c8:	00030128 	.word	0x00030128

0001c4cc <bt_keys_clear>:
{
   1c4cc:	b530      	push	{r4, r5, lr}
   1c4ce:	b08d      	sub	sp, #52	; 0x34
	__ASSERT_NO_MSG(keys != NULL);
   1c4d0:	b1e0      	cbz	r0, 1c50c <bt_keys_clear+0x40>
   1c4d2:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1c4d4:	7a03      	ldrb	r3, [r0, #8]
   1c4d6:	f013 0f04 	tst.w	r3, #4
   1c4da:	d123      	bne.n	1c524 <bt_keys_clear+0x58>
		if (keys->id) {
   1c4dc:	7822      	ldrb	r2, [r4, #0]
   1c4de:	b322      	cbz	r2, 1c52a <bt_keys_clear+0x5e>
			u8_to_dec(id, sizeof(id), keys->id);
   1c4e0:	ad02      	add	r5, sp, #8
   1c4e2:	2104      	movs	r1, #4
   1c4e4:	4628      	mov	r0, r5
   1c4e6:	f7f4 fbfb 	bl	10ce0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1c4ea:	9500      	str	r5, [sp, #0]
   1c4ec:	1c63      	adds	r3, r4, #1
   1c4ee:	4a13      	ldr	r2, [pc, #76]	; (1c53c <bt_keys_clear+0x70>)
   1c4f0:	2124      	movs	r1, #36	; 0x24
   1c4f2:	a803      	add	r0, sp, #12
   1c4f4:	f7f7 fcdc 	bl	13eb0 <bt_settings_encode_key>
		settings_delete(key);
   1c4f8:	a803      	add	r0, sp, #12
   1c4fa:	f00c ff59 	bl	293b0 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1c4fe:	225c      	movs	r2, #92	; 0x5c
   1c500:	2100      	movs	r1, #0
   1c502:	4620      	mov	r0, r4
   1c504:	f00d fc71 	bl	29dea <memset>
}
   1c508:	b00d      	add	sp, #52	; 0x34
   1c50a:	bd30      	pop	{r4, r5, pc}
	__ASSERT_NO_MSG(keys != NULL);
   1c50c:	4c0c      	ldr	r4, [pc, #48]	; (1c540 <bt_keys_clear+0x74>)
   1c50e:	f44f 7299 	mov.w	r2, #306	; 0x132
   1c512:	4621      	mov	r1, r4
   1c514:	480b      	ldr	r0, [pc, #44]	; (1c544 <bt_keys_clear+0x78>)
   1c516:	f00c fb7a 	bl	28c0e <assert_print>
   1c51a:	f44f 7199 	mov.w	r1, #306	; 0x132
   1c51e:	4620      	mov	r0, r4
   1c520:	f00c fb6e 	bl	28c00 <assert_post_action>
		bt_id_del(keys);
   1c524:	f7f9 fc6c 	bl	15e00 <bt_id_del>
   1c528:	e7d8      	b.n	1c4dc <bt_keys_clear+0x10>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1c52a:	2300      	movs	r3, #0
   1c52c:	9300      	str	r3, [sp, #0]
   1c52e:	1c63      	adds	r3, r4, #1
   1c530:	4a02      	ldr	r2, [pc, #8]	; (1c53c <bt_keys_clear+0x70>)
   1c532:	2124      	movs	r1, #36	; 0x24
   1c534:	a803      	add	r0, sp, #12
   1c536:	f7f7 fcbb 	bl	13eb0 <bt_settings_encode_key>
   1c53a:	e7dd      	b.n	1c4f8 <bt_keys_clear+0x2c>
   1c53c:	00032bf8 	.word	0x00032bf8
   1c540:	00032bc8 	.word	0x00032bc8
   1c544:	00030128 	.word	0x00030128

0001c548 <keys_set>:
{
   1c548:	b570      	push	{r4, r5, r6, lr}
   1c54a:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   1c54c:	b358      	cbz	r0, 1c5a6 <keys_set+0x5e>
   1c54e:	4614      	mov	r4, r2
   1c550:	4605      	mov	r5, r0
	len = read_cb(cb_arg, val, sizeof(val));
   1c552:	2250      	movs	r2, #80	; 0x50
   1c554:	a902      	add	r1, sp, #8
   1c556:	4618      	mov	r0, r3
   1c558:	47a0      	blx	r4
	if (len < 0) {
   1c55a:	1e04      	subs	r4, r0, #0
   1c55c:	db2a      	blt.n	1c5b4 <keys_set+0x6c>
	err = bt_settings_decode_key(name, &addr);
   1c55e:	a916      	add	r1, sp, #88	; 0x58
   1c560:	4628      	mov	r0, r5
   1c562:	f00d fcc6 	bl	29ef2 <bt_settings_decode_key>
	if (err) {
   1c566:	4606      	mov	r6, r0
   1c568:	bb60      	cbnz	r0, 1c5c4 <keys_set+0x7c>
	settings_name_next(name, &next);
   1c56a:	a901      	add	r1, sp, #4
   1c56c:	4628      	mov	r0, r5
   1c56e:	f00c ff4f 	bl	29410 <settings_name_next>
	if (!next) {
   1c572:	9801      	ldr	r0, [sp, #4]
   1c574:	b3a8      	cbz	r0, 1c5e2 <keys_set+0x9a>
		unsigned long next_id = strtoul(next, NULL, 10);
   1c576:	220a      	movs	r2, #10
   1c578:	2100      	movs	r1, #0
   1c57a:	f00d fb04 	bl	29b86 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1c57e:	4602      	mov	r2, r0
   1c580:	bb40      	cbnz	r0, 1c5d4 <keys_set+0x8c>
		id = (uint8_t)next_id;
   1c582:	b2c0      	uxtb	r0, r0
	if (!len) {
   1c584:	b37c      	cbz	r4, 1c5e6 <keys_set+0x9e>
	keys = bt_keys_get_addr(id, &addr);
   1c586:	a916      	add	r1, sp, #88	; 0x58
   1c588:	f7ff fe08 	bl	1c19c <bt_keys_get_addr>
	if (!keys) {
   1c58c:	4605      	mov	r5, r0
   1c58e:	2800      	cmp	r0, #0
   1c590:	d03e      	beq.n	1c610 <keys_set+0xc8>
	if (len != BT_KEYS_STORAGE_LEN) {
   1c592:	2c50      	cmp	r4, #80	; 0x50
   1c594:	d147      	bne.n	1c626 <keys_set+0xde>
		memcpy(keys->storage_start, val, len);
   1c596:	4622      	mov	r2, r4
   1c598:	a902      	add	r1, sp, #8
   1c59a:	300c      	adds	r0, #12
   1c59c:	f00d fbf6 	bl	29d8c <memcpy>
}
   1c5a0:	4630      	mov	r0, r6
   1c5a2:	b018      	add	sp, #96	; 0x60
   1c5a4:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Insufficient number of arguments");
   1c5a6:	2145      	movs	r1, #69	; 0x45
   1c5a8:	4825      	ldr	r0, [pc, #148]	; (1c640 <keys_set+0xf8>)
   1c5aa:	f00c fb50 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1c5ae:	f06f 0615 	mvn.w	r6, #21
   1c5b2:	e7f5      	b.n	1c5a0 <keys_set+0x58>
		BT_ERR("Failed to read value (err %zd)", len);
   1c5b4:	4622      	mov	r2, r4
   1c5b6:	2145      	movs	r1, #69	; 0x45
   1c5b8:	4822      	ldr	r0, [pc, #136]	; (1c644 <keys_set+0xfc>)
   1c5ba:	f00c fb48 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1c5be:	f06f 0615 	mvn.w	r6, #21
   1c5c2:	e7ed      	b.n	1c5a0 <keys_set+0x58>
		BT_ERR("Unable to decode address %s", name);
   1c5c4:	462a      	mov	r2, r5
   1c5c6:	2145      	movs	r1, #69	; 0x45
   1c5c8:	481f      	ldr	r0, [pc, #124]	; (1c648 <keys_set+0x100>)
   1c5ca:	f00c fb40 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1c5ce:	f06f 0615 	mvn.w	r6, #21
   1c5d2:	e7e5      	b.n	1c5a0 <keys_set+0x58>
			BT_ERR("Invalid local identity %lu", next_id);
   1c5d4:	2145      	movs	r1, #69	; 0x45
   1c5d6:	481d      	ldr	r0, [pc, #116]	; (1c64c <keys_set+0x104>)
   1c5d8:	f00c fb39 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   1c5dc:	f06f 0615 	mvn.w	r6, #21
   1c5e0:	e7de      	b.n	1c5a0 <keys_set+0x58>
		id = BT_ID_DEFAULT;
   1c5e2:	2000      	movs	r0, #0
   1c5e4:	e7ce      	b.n	1c584 <keys_set+0x3c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1c5e6:	aa16      	add	r2, sp, #88	; 0x58
   1c5e8:	4601      	mov	r1, r0
   1c5ea:	203f      	movs	r0, #63	; 0x3f
   1c5ec:	f7ff fe56 	bl	1c29c <bt_keys_find>
		if (keys) {
   1c5f0:	b128      	cbz	r0, 1c5fe <keys_set+0xb6>
			(void)memset(keys, 0, sizeof(*keys));
   1c5f2:	225c      	movs	r2, #92	; 0x5c
   1c5f4:	2100      	movs	r1, #0
   1c5f6:	f00d fbf8 	bl	29dea <memset>
		return 0;
   1c5fa:	4626      	mov	r6, r4
   1c5fc:	e7d0      	b.n	1c5a0 <keys_set+0x58>
			BT_WARN("Unable to find deleted keys for %s",
   1c5fe:	a816      	add	r0, sp, #88	; 0x58
   1c600:	f7f7 fbc6 	bl	13d90 <bt_addr_le_str>
   1c604:	4602      	mov	r2, r0
   1c606:	2157      	movs	r1, #87	; 0x57
   1c608:	4811      	ldr	r0, [pc, #68]	; (1c650 <keys_set+0x108>)
   1c60a:	f00c fb20 	bl	28c4e <z_log_minimal_printk>
   1c60e:	e7f4      	b.n	1c5fa <keys_set+0xb2>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1c610:	a816      	add	r0, sp, #88	; 0x58
   1c612:	f7f7 fbbd 	bl	13d90 <bt_addr_le_str>
   1c616:	4602      	mov	r2, r0
   1c618:	2145      	movs	r1, #69	; 0x45
   1c61a:	480e      	ldr	r0, [pc, #56]	; (1c654 <keys_set+0x10c>)
   1c61c:	f00c fb17 	bl	28c4e <z_log_minimal_printk>
		return -ENOMEM;
   1c620:	f06f 060b 	mvn.w	r6, #11
   1c624:	e7bc      	b.n	1c5a0 <keys_set+0x58>
			BT_ERR("Invalid key length %zd != %zu", len,
   1c626:	2350      	movs	r3, #80	; 0x50
   1c628:	4622      	mov	r2, r4
   1c62a:	2145      	movs	r1, #69	; 0x45
   1c62c:	480a      	ldr	r0, [pc, #40]	; (1c658 <keys_set+0x110>)
   1c62e:	f00c fb0e 	bl	28c4e <z_log_minimal_printk>
			bt_keys_clear(keys);
   1c632:	4628      	mov	r0, r5
   1c634:	f7ff ff4a 	bl	1c4cc <bt_keys_clear>
			return -EINVAL;
   1c638:	f06f 0615 	mvn.w	r6, #21
   1c63c:	e7b0      	b.n	1c5a0 <keys_set+0x58>
   1c63e:	bf00      	nop
   1c640:	00030c90 	.word	0x00030c90
   1c644:	00032c00 	.word	0x00032c00
   1c648:	00032268 	.word	0x00032268
   1c64c:	0003228c 	.word	0x0003228c
   1c650:	00032c24 	.word	0x00032c24
   1c654:	00032c4c 	.word	0x00032c4c
   1c658:	00032c70 	.word	0x00032c70

0001c65c <bt_keys_store>:
{
   1c65c:	b530      	push	{r4, r5, lr}
   1c65e:	b08d      	sub	sp, #52	; 0x34
	__ASSERT_NO_MSG(keys != NULL);
   1c660:	b1c8      	cbz	r0, 1c696 <bt_keys_store+0x3a>
   1c662:	4604      	mov	r4, r0
	if (keys->id) {
   1c664:	7802      	ldrb	r2, [r0, #0]
   1c666:	b312      	cbz	r2, 1c6ae <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
   1c668:	ad02      	add	r5, sp, #8
   1c66a:	2104      	movs	r1, #4
   1c66c:	4628      	mov	r0, r5
   1c66e:	f7f4 fb37 	bl	10ce0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1c672:	9500      	str	r5, [sp, #0]
   1c674:	1c63      	adds	r3, r4, #1
   1c676:	4a15      	ldr	r2, [pc, #84]	; (1c6cc <bt_keys_store+0x70>)
   1c678:	2124      	movs	r1, #36	; 0x24
   1c67a:	a803      	add	r0, sp, #12
   1c67c:	f7f7 fc18 	bl	13eb0 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1c680:	2250      	movs	r2, #80	; 0x50
   1c682:	f104 010c 	add.w	r1, r4, #12
   1c686:	a803      	add	r0, sp, #12
   1c688:	f7f5 fe74 	bl	12374 <settings_save_one>
	if (err) {
   1c68c:	4604      	mov	r4, r0
   1c68e:	b9b8      	cbnz	r0, 1c6c0 <bt_keys_store+0x64>
}
   1c690:	4620      	mov	r0, r4
   1c692:	b00d      	add	sp, #52	; 0x34
   1c694:	bd30      	pop	{r4, r5, pc}
	__ASSERT_NO_MSG(keys != NULL);
   1c696:	4c0e      	ldr	r4, [pc, #56]	; (1c6d0 <bt_keys_store+0x74>)
   1c698:	f44f 72ab 	mov.w	r2, #342	; 0x156
   1c69c:	4621      	mov	r1, r4
   1c69e:	480d      	ldr	r0, [pc, #52]	; (1c6d4 <bt_keys_store+0x78>)
   1c6a0:	f00c fab5 	bl	28c0e <assert_print>
   1c6a4:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1c6a8:	4620      	mov	r0, r4
   1c6aa:	f00c faa9 	bl	28c00 <assert_post_action>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1c6ae:	2300      	movs	r3, #0
   1c6b0:	9300      	str	r3, [sp, #0]
   1c6b2:	1c43      	adds	r3, r0, #1
   1c6b4:	4a05      	ldr	r2, [pc, #20]	; (1c6cc <bt_keys_store+0x70>)
   1c6b6:	2124      	movs	r1, #36	; 0x24
   1c6b8:	a803      	add	r0, sp, #12
   1c6ba:	f7f7 fbf9 	bl	13eb0 <bt_settings_encode_key>
   1c6be:	e7df      	b.n	1c680 <bt_keys_store+0x24>
		BT_ERR("Failed to save keys (err %d)", err);
   1c6c0:	4602      	mov	r2, r0
   1c6c2:	2145      	movs	r1, #69	; 0x45
   1c6c4:	4804      	ldr	r0, [pc, #16]	; (1c6d8 <bt_keys_store+0x7c>)
   1c6c6:	f00c fac2 	bl	28c4e <z_log_minimal_printk>
		return err;
   1c6ca:	e7e1      	b.n	1c690 <bt_keys_store+0x34>
   1c6cc:	00032bf8 	.word	0x00032bf8
   1c6d0:	00032bc8 	.word	0x00032bc8
   1c6d4:	00030128 	.word	0x00030128
   1c6d8:	00032c94 	.word	0x00032c94

0001c6dc <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1c6dc:	4b03      	ldr	r3, [pc, #12]	; (1c6ec <pool_id+0x10>)
   1c6de:	1ac0      	subs	r0, r0, r3
   1c6e0:	1080      	asrs	r0, r0, #2
}
   1c6e2:	4b03      	ldr	r3, [pc, #12]	; (1c6f0 <pool_id+0x14>)
   1c6e4:	fb03 f000 	mul.w	r0, r3, r0
   1c6e8:	4770      	bx	lr
   1c6ea:	bf00      	nop
   1c6ec:	20000a9c 	.word	0x20000a9c
   1c6f0:	c4ec4ec5 	.word	0xc4ec4ec5

0001c6f4 <net_buf_pool_get>:
}
   1c6f4:	2234      	movs	r2, #52	; 0x34
   1c6f6:	4b02      	ldr	r3, [pc, #8]	; (1c700 <net_buf_pool_get+0xc>)
   1c6f8:	fb02 3000 	mla	r0, r2, r0, r3
   1c6fc:	4770      	bx	lr
   1c6fe:	bf00      	nop
   1c700:	20000a9c 	.word	0x20000a9c

0001c704 <net_buf_reset>:

	return buf;
}

void net_buf_reset(struct net_buf *buf)
{
   1c704:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1c706:	7943      	ldrb	r3, [r0, #5]
   1c708:	b933      	cbnz	r3, 1c718 <net_buf_reset+0x14>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1c70a:	6803      	ldr	r3, [r0, #0]
   1c70c:	b973      	cbnz	r3, 1c72c <net_buf_reset+0x28>
	buf->len  = 0U;
   1c70e:	2300      	movs	r3, #0
   1c710:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   1c712:	6903      	ldr	r3, [r0, #16]
   1c714:	6083      	str	r3, [r0, #8]

	net_buf_simple_reset(&buf->b);
}
   1c716:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1c718:	4c09      	ldr	r4, [pc, #36]	; (1c740 <net_buf_reset+0x3c>)
   1c71a:	2256      	movs	r2, #86	; 0x56
   1c71c:	4621      	mov	r1, r4
   1c71e:	4809      	ldr	r0, [pc, #36]	; (1c744 <net_buf_reset+0x40>)
   1c720:	f00c fa75 	bl	28c0e <assert_print>
   1c724:	2156      	movs	r1, #86	; 0x56
   1c726:	4620      	mov	r0, r4
   1c728:	f00c fa6a 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1c72c:	4c04      	ldr	r4, [pc, #16]	; (1c740 <net_buf_reset+0x3c>)
   1c72e:	2257      	movs	r2, #87	; 0x57
   1c730:	4621      	mov	r1, r4
   1c732:	4804      	ldr	r0, [pc, #16]	; (1c744 <net_buf_reset+0x40>)
   1c734:	f00c fa6b 	bl	28c0e <assert_print>
   1c738:	2157      	movs	r1, #87	; 0x57
   1c73a:	4620      	mov	r0, r4
   1c73c:	f00c fa60 	bl	28c00 <assert_post_action>
   1c740:	00032cc8 	.word	0x00032cc8
   1c744:	00030128 	.word	0x00030128

0001c748 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c74c:	b083      	sub	sp, #12
   1c74e:	4605      	mov	r5, r0
   1c750:	9101      	str	r1, [sp, #4]
   1c752:	4616      	mov	r6, r2
   1c754:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1c756:	4610      	mov	r0, r2
   1c758:	4619      	mov	r1, r3
   1c75a:	f012 fe90 	bl	2f47e <sys_clock_timeout_end_calc>
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1c75e:	b345      	cbz	r5, 1c7b2 <net_buf_alloc_len+0x6a>
   1c760:	4682      	mov	sl, r0
   1c762:	468b      	mov	fp, r1
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1c764:	f105 091c 	add.w	r9, r5, #28
	__asm__ volatile(
   1c768:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c76c:	f3ef 8811 	mrs	r8, BASEPRI
   1c770:	f383 8812 	msr	BASEPRI_MAX, r3
   1c774:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c778:	4648      	mov	r0, r9
   1c77a:	f005 fb53 	bl	21e24 <z_spin_lock_valid>
   1c77e:	b310      	cbz	r0, 1c7c6 <net_buf_alloc_len+0x7e>
	z_spin_lock_set_owner(l);
   1c780:	4648      	mov	r0, r9
   1c782:	f005 fb6f 	bl	21e64 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1c786:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1c788:	2b00      	cmp	r3, #0
   1c78a:	d071      	beq.n	1c870 <net_buf_alloc_len+0x128>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1c78c:	8c2a      	ldrh	r2, [r5, #32]
   1c78e:	4293      	cmp	r3, r2
   1c790:	d22d      	bcs.n	1c7ee <net_buf_alloc_len+0xa6>
	return z_impl_k_queue_get(queue, timeout);
   1c792:	2200      	movs	r2, #0
   1c794:	2300      	movs	r3, #0
   1c796:	4628      	mov	r0, r5
   1c798:	f005 ff52 	bl	22640 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1c79c:	4604      	mov	r4, r0
   1c79e:	b330      	cbz	r0, 1c7ee <net_buf_alloc_len+0xa6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c7a0:	4648      	mov	r0, r9
   1c7a2:	f005 fb4f 	bl	21e44 <z_spin_unlock_valid>
   1c7a6:	b1c0      	cbz	r0, 1c7da <net_buf_alloc_len+0x92>
	__asm__ volatile(
   1c7a8:	f388 8811 	msr	BASEPRI, r8
   1c7ac:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   1c7b0:	e02d      	b.n	1c80e <net_buf_alloc_len+0xc6>
	__ASSERT_NO_MSG(pool);
   1c7b2:	4c50      	ldr	r4, [pc, #320]	; (1c8f4 <net_buf_alloc_len+0x1ac>)
   1c7b4:	22f4      	movs	r2, #244	; 0xf4
   1c7b6:	4621      	mov	r1, r4
   1c7b8:	484f      	ldr	r0, [pc, #316]	; (1c8f8 <net_buf_alloc_len+0x1b0>)
   1c7ba:	f00c fa28 	bl	28c0e <assert_print>
   1c7be:	21f4      	movs	r1, #244	; 0xf4
   1c7c0:	4620      	mov	r0, r4
   1c7c2:	f00c fa1d 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c7c6:	4c4d      	ldr	r4, [pc, #308]	; (1c8fc <net_buf_alloc_len+0x1b4>)
   1c7c8:	2294      	movs	r2, #148	; 0x94
   1c7ca:	4621      	mov	r1, r4
   1c7cc:	484a      	ldr	r0, [pc, #296]	; (1c8f8 <net_buf_alloc_len+0x1b0>)
   1c7ce:	f00c fa1e 	bl	28c0e <assert_print>
   1c7d2:	2194      	movs	r1, #148	; 0x94
   1c7d4:	4620      	mov	r0, r4
   1c7d6:	f00c fa13 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c7da:	4c48      	ldr	r4, [pc, #288]	; (1c8fc <net_buf_alloc_len+0x1b4>)
   1c7dc:	22c2      	movs	r2, #194	; 0xc2
   1c7de:	4621      	mov	r1, r4
   1c7e0:	4845      	ldr	r0, [pc, #276]	; (1c8f8 <net_buf_alloc_len+0x1b0>)
   1c7e2:	f00c fa14 	bl	28c0e <assert_print>
   1c7e6:	21c2      	movs	r1, #194	; 0xc2
   1c7e8:	4620      	mov	r0, r4
   1c7ea:	f00c fa09 	bl	28c00 <assert_post_action>
			}
		}

		uninit_count = pool->uninit_count--;
   1c7ee:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1c7f0:	1e63      	subs	r3, r4, #1
   1c7f2:	846b      	strh	r3, [r5, #34]	; 0x22
   1c7f4:	4648      	mov	r0, r9
   1c7f6:	f005 fb25 	bl	21e44 <z_spin_unlock_valid>
   1c7fa:	b378      	cbz	r0, 1c85c <net_buf_alloc_len+0x114>
   1c7fc:	f388 8811 	msr	BASEPRI, r8
   1c800:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   1c804:	4621      	mov	r1, r4
   1c806:	4628      	mov	r0, r5
   1c808:	f010 fd5b 	bl	2d2c2 <pool_get_uninit>
   1c80c:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1c80e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1c812:	f1b8 0f00 	cmp.w	r8, #0
   1c816:	d05c      	beq.n	1c8d2 <net_buf_alloc_len+0x18a>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c818:	ea56 0307 	orrs.w	r3, r6, r7
   1c81c:	d005      	beq.n	1c82a <net_buf_alloc_len+0xe2>
   1c81e:	f1b7 3fff 	cmp.w	r7, #4294967295
   1c822:	bf08      	it	eq
   1c824:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1c828:	d13d      	bne.n	1c8a6 <net_buf_alloc_len+0x15e>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1c82a:	4632      	mov	r2, r6
   1c82c:	463b      	mov	r3, r7
   1c82e:	a901      	add	r1, sp, #4
   1c830:	4620      	mov	r0, r4
   1c832:	f010 fd5b 	bl	2d2ec <data_alloc>
   1c836:	4605      	mov	r5, r0
   1c838:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1c83a:	2800      	cmp	r0, #0
   1c83c:	d044      	beq.n	1c8c8 <net_buf_alloc_len+0x180>
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1c83e:	9b01      	ldr	r3, [sp, #4]
   1c840:	4598      	cmp	r8, r3
   1c842:	d948      	bls.n	1c8d6 <net_buf_alloc_len+0x18e>
   1c844:	4c2b      	ldr	r4, [pc, #172]	; (1c8f4 <net_buf_alloc_len+0x1ac>)
   1c846:	f240 1255 	movw	r2, #341	; 0x155
   1c84a:	4621      	mov	r1, r4
   1c84c:	482a      	ldr	r0, [pc, #168]	; (1c8f8 <net_buf_alloc_len+0x1b0>)
   1c84e:	f00c f9de 	bl	28c0e <assert_print>
   1c852:	f240 1155 	movw	r1, #341	; 0x155
   1c856:	4620      	mov	r0, r4
   1c858:	f00c f9d2 	bl	28c00 <assert_post_action>
   1c85c:	4c27      	ldr	r4, [pc, #156]	; (1c8fc <net_buf_alloc_len+0x1b4>)
   1c85e:	22c2      	movs	r2, #194	; 0xc2
   1c860:	4621      	mov	r1, r4
   1c862:	4825      	ldr	r0, [pc, #148]	; (1c8f8 <net_buf_alloc_len+0x1b0>)
   1c864:	f00c f9d3 	bl	28c0e <assert_print>
   1c868:	21c2      	movs	r1, #194	; 0xc2
   1c86a:	4620      	mov	r0, r4
   1c86c:	f00c f9c8 	bl	28c00 <assert_post_action>
   1c870:	4648      	mov	r0, r9
   1c872:	f005 fae7 	bl	21e44 <z_spin_unlock_valid>
   1c876:	b160      	cbz	r0, 1c892 <net_buf_alloc_len+0x14a>
   1c878:	f388 8811 	msr	BASEPRI, r8
   1c87c:	f3bf 8f6f 	isb	sy
   1c880:	4632      	mov	r2, r6
   1c882:	463b      	mov	r3, r7
   1c884:	4628      	mov	r0, r5
   1c886:	f005 fedb 	bl	22640 <z_impl_k_queue_get>
	if (!buf) {
   1c88a:	4604      	mov	r4, r0
   1c88c:	2800      	cmp	r0, #0
   1c88e:	d1be      	bne.n	1c80e <net_buf_alloc_len+0xc6>
   1c890:	e02b      	b.n	1c8ea <net_buf_alloc_len+0x1a2>
   1c892:	4c1a      	ldr	r4, [pc, #104]	; (1c8fc <net_buf_alloc_len+0x1b4>)
   1c894:	22c2      	movs	r2, #194	; 0xc2
   1c896:	4621      	mov	r1, r4
   1c898:	4817      	ldr	r0, [pc, #92]	; (1c8f8 <net_buf_alloc_len+0x1b0>)
   1c89a:	f00c f9b8 	bl	28c0e <assert_print>
   1c89e:	21c2      	movs	r1, #194	; 0xc2
   1c8a0:	4620      	mov	r0, r4
   1c8a2:	f00c f9ad 	bl	28c00 <assert_post_action>
			int64_t remaining = end - sys_clock_tick_get();
   1c8a6:	f008 f8b5 	bl	24a14 <sys_clock_tick_get>
   1c8aa:	ebba 0a00 	subs.w	sl, sl, r0
   1c8ae:	eb6b 0b01 	sbc.w	fp, fp, r1
			if (remaining <= 0) {
   1c8b2:	f1ba 0f01 	cmp.w	sl, #1
   1c8b6:	f17b 0300 	sbcs.w	r3, fp, #0
   1c8ba:	db02      	blt.n	1c8c2 <net_buf_alloc_len+0x17a>
				timeout = Z_TIMEOUT_TICKS(remaining);
   1c8bc:	4656      	mov	r6, sl
   1c8be:	465f      	mov	r7, fp
   1c8c0:	e7b3      	b.n	1c82a <net_buf_alloc_len+0xe2>
				timeout = K_NO_WAIT;
   1c8c2:	2600      	movs	r6, #0
   1c8c4:	4637      	mov	r7, r6
   1c8c6:	e7b0      	b.n	1c82a <net_buf_alloc_len+0xe2>
			net_buf_destroy(buf);
   1c8c8:	4620      	mov	r0, r4
   1c8ca:	f010 fd23 	bl	2d314 <net_buf_destroy>
			return NULL;
   1c8ce:	462c      	mov	r4, r5
   1c8d0:	e00b      	b.n	1c8ea <net_buf_alloc_len+0x1a2>
#endif
	} else {
		buf->__buf = NULL;
   1c8d2:	2300      	movs	r3, #0
   1c8d4:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   1c8d6:	2301      	movs	r3, #1
   1c8d8:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   1c8da:	2300      	movs	r3, #0
   1c8dc:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1c8de:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   1c8e0:	9b01      	ldr	r3, [sp, #4]
   1c8e2:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1c8e4:	4620      	mov	r0, r4
   1c8e6:	f7ff ff0d 	bl	1c704 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1c8ea:	4620      	mov	r0, r4
   1c8ec:	b003      	add	sp, #12
   1c8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8f2:	bf00      	nop
   1c8f4:	00032cc8 	.word	0x00032cc8
   1c8f8:	00030128 	.word	0x00030128
   1c8fc:	00030164 	.word	0x00030164

0001c900 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1c900:	b570      	push	{r4, r5, r6, lr}
   1c902:	4605      	mov	r5, r0
   1c904:	f005 fe9c 	bl	22640 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1c908:	4606      	mov	r6, r0
   1c90a:	b1f8      	cbz	r0, 1c94c <net_buf_get+0x4c>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c90c:	4604      	mov	r4, r0
   1c90e:	7963      	ldrb	r3, [r4, #5]
   1c910:	f013 0f01 	tst.w	r3, #1
   1c914:	d018      	beq.n	1c948 <net_buf_get+0x48>
   1c916:	2200      	movs	r2, #0
   1c918:	2300      	movs	r3, #0
   1c91a:	4628      	mov	r0, r5
   1c91c:	f005 fe90 	bl	22640 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1c920:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1c922:	b128      	cbz	r0, 1c930 <net_buf_get+0x30>

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1c924:	7963      	ldrb	r3, [r4, #5]
   1c926:	f023 0301 	bic.w	r3, r3, #1
   1c92a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c92c:	4604      	mov	r4, r0
   1c92e:	e7ee      	b.n	1c90e <net_buf_get+0xe>
		__ASSERT_NO_MSG(frag->frags);
   1c930:	4c07      	ldr	r4, [pc, #28]	; (1c950 <net_buf_get+0x50>)
   1c932:	f240 12ad 	movw	r2, #429	; 0x1ad
   1c936:	4621      	mov	r1, r4
   1c938:	4806      	ldr	r0, [pc, #24]	; (1c954 <net_buf_get+0x54>)
   1c93a:	f00c f968 	bl	28c0e <assert_print>
   1c93e:	f240 11ad 	movw	r1, #429	; 0x1ad
   1c942:	4620      	mov	r0, r4
   1c944:	f00c f95c 	bl	28c00 <assert_post_action>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1c948:	2300      	movs	r3, #0
   1c94a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1c94c:	4630      	mov	r0, r6
   1c94e:	bd70      	pop	{r4, r5, r6, pc}
   1c950:	00032cc8 	.word	0x00032cc8
   1c954:	00030128 	.word	0x00030128

0001c958 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1c958:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1c95a:	b128      	cbz	r0, 1c968 <net_buf_simple_reserve+0x10>
	__ASSERT_NO_MSG(buf->len == 0U);
   1c95c:	8882      	ldrh	r2, [r0, #4]
   1c95e:	b97a      	cbnz	r2, 1c980 <net_buf_simple_reserve+0x28>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1c960:	6882      	ldr	r2, [r0, #8]
   1c962:	440a      	add	r2, r1
   1c964:	6002      	str	r2, [r0, #0]
}
   1c966:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(buf);
   1c968:	4c0b      	ldr	r4, [pc, #44]	; (1c998 <net_buf_simple_reserve+0x40>)
   1c96a:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   1c96e:	4621      	mov	r1, r4
   1c970:	480a      	ldr	r0, [pc, #40]	; (1c99c <net_buf_simple_reserve+0x44>)
   1c972:	f00c f94c 	bl	28c0e <assert_print>
   1c976:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1c97a:	4620      	mov	r0, r4
   1c97c:	f00c f940 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1c980:	4c05      	ldr	r4, [pc, #20]	; (1c998 <net_buf_simple_reserve+0x40>)
   1c982:	f240 12c5 	movw	r2, #453	; 0x1c5
   1c986:	4621      	mov	r1, r4
   1c988:	4804      	ldr	r0, [pc, #16]	; (1c99c <net_buf_simple_reserve+0x44>)
   1c98a:	f00c f940 	bl	28c0e <assert_print>
   1c98e:	f240 11c5 	movw	r1, #453	; 0x1c5
   1c992:	4620      	mov	r0, r4
   1c994:	f00c f934 	bl	28c00 <assert_post_action>
   1c998:	00032cc8 	.word	0x00032cc8
   1c99c:	00030128 	.word	0x00030128

0001c9a0 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1c9a2:	b120      	cbz	r0, 1c9ae <net_buf_slist_put+0xe>
   1c9a4:	460d      	mov	r5, r1
   1c9a6:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(buf);
   1c9a8:	b169      	cbz	r1, 1c9c6 <net_buf_slist_put+0x26>

	for (tail = buf; tail->frags; tail = tail->frags) {
   1c9aa:	460c      	mov	r4, r1
   1c9ac:	e01c      	b.n	1c9e8 <net_buf_slist_put+0x48>
	__ASSERT_NO_MSG(list);
   1c9ae:	4c2b      	ldr	r4, [pc, #172]	; (1ca5c <net_buf_slist_put+0xbc>)
   1c9b0:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1c9b4:	4621      	mov	r1, r4
   1c9b6:	482a      	ldr	r0, [pc, #168]	; (1ca60 <net_buf_slist_put+0xc0>)
   1c9b8:	f00c f929 	bl	28c0e <assert_print>
   1c9bc:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1c9c0:	4620      	mov	r0, r4
   1c9c2:	f00c f91d 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1c9c6:	4c25      	ldr	r4, [pc, #148]	; (1ca5c <net_buf_slist_put+0xbc>)
   1c9c8:	f240 12d3 	movw	r2, #467	; 0x1d3
   1c9cc:	4621      	mov	r1, r4
   1c9ce:	4824      	ldr	r0, [pc, #144]	; (1ca60 <net_buf_slist_put+0xc0>)
   1c9d0:	f00c f91d 	bl	28c0e <assert_print>
   1c9d4:	f240 11d3 	movw	r1, #467	; 0x1d3
   1c9d8:	4620      	mov	r0, r4
   1c9da:	f00c f911 	bl	28c00 <assert_post_action>
		tail->flags |= NET_BUF_FRAGS;
   1c9de:	7963      	ldrb	r3, [r4, #5]
   1c9e0:	f043 0301 	orr.w	r3, r3, #1
   1c9e4:	7163      	strb	r3, [r4, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1c9e6:	4614      	mov	r4, r2
   1c9e8:	6822      	ldr	r2, [r4, #0]
   1c9ea:	2a00      	cmp	r2, #0
   1c9ec:	d1f7      	bne.n	1c9de <net_buf_slist_put+0x3e>
	__asm__ volatile(
   1c9ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c9f2:	f3ef 8311 	mrs	r3, BASEPRI
   1c9f6:	f382 8812 	msr	BASEPRI_MAX, r2
   1c9fa:	f3bf 8f6f 	isb	sy
   1c9fe:	461e      	mov	r6, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ca00:	4818      	ldr	r0, [pc, #96]	; (1ca64 <net_buf_slist_put+0xc4>)
   1ca02:	f005 fa0f 	bl	21e24 <z_spin_lock_valid>
   1ca06:	b190      	cbz	r0, 1ca2e <net_buf_slist_put+0x8e>
	z_spin_lock_set_owner(l);
   1ca08:	4816      	ldr	r0, [pc, #88]	; (1ca64 <net_buf_slist_put+0xc4>)
   1ca0a:	f005 fa2b 	bl	21e64 <z_spin_lock_set_owner>
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
   1ca0e:	4623      	mov	r3, r4
Z_GENLIST_APPEND_LIST(slist, snode)
   1ca10:	b125      	cbz	r5, 1ca1c <net_buf_slist_put+0x7c>
   1ca12:	b11c      	cbz	r4, 1ca1c <net_buf_slist_put+0x7c>
	return list->tail;
   1ca14:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1ca16:	b1a2      	cbz	r2, 1ca42 <net_buf_slist_put+0xa2>
	parent->next = child;
   1ca18:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1ca1a:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ca1c:	4811      	ldr	r0, [pc, #68]	; (1ca64 <net_buf_slist_put+0xc4>)
   1ca1e:	f005 fa11 	bl	21e44 <z_spin_unlock_valid>
   1ca22:	b180      	cbz	r0, 1ca46 <net_buf_slist_put+0xa6>
	__asm__ volatile(
   1ca24:	f386 8811 	msr	BASEPRI, r6
   1ca28:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1ca2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ca2e:	4c0e      	ldr	r4, [pc, #56]	; (1ca68 <net_buf_slist_put+0xc8>)
   1ca30:	2294      	movs	r2, #148	; 0x94
   1ca32:	4621      	mov	r1, r4
   1ca34:	480a      	ldr	r0, [pc, #40]	; (1ca60 <net_buf_slist_put+0xc0>)
   1ca36:	f00c f8ea 	bl	28c0e <assert_print>
   1ca3a:	2194      	movs	r1, #148	; 0x94
   1ca3c:	4620      	mov	r0, r4
   1ca3e:	f00c f8df 	bl	28c00 <assert_post_action>
	list->head = node;
   1ca42:	603d      	str	r5, [r7, #0]
}
   1ca44:	e7e9      	b.n	1ca1a <net_buf_slist_put+0x7a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ca46:	4c08      	ldr	r4, [pc, #32]	; (1ca68 <net_buf_slist_put+0xc8>)
   1ca48:	22c2      	movs	r2, #194	; 0xc2
   1ca4a:	4621      	mov	r1, r4
   1ca4c:	4804      	ldr	r0, [pc, #16]	; (1ca60 <net_buf_slist_put+0xc0>)
   1ca4e:	f00c f8de 	bl	28c0e <assert_print>
   1ca52:	21c2      	movs	r1, #194	; 0xc2
   1ca54:	4620      	mov	r0, r4
   1ca56:	f00c f8d3 	bl	28c00 <assert_post_action>
   1ca5a:	bf00      	nop
   1ca5c:	00032cc8 	.word	0x00032cc8
   1ca60:	00030128 	.word	0x00030128
   1ca64:	20002b98 	.word	0x20002b98
   1ca68:	00030164 	.word	0x00030164

0001ca6c <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1ca6c:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1ca6e:	b1c8      	cbz	r0, 1caa4 <net_buf_slist_get+0x38>
   1ca70:	4604      	mov	r4, r0
	__asm__ volatile(
   1ca72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca76:	f3ef 8611 	mrs	r6, BASEPRI
   1ca7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ca82:	4830      	ldr	r0, [pc, #192]	; (1cb44 <net_buf_slist_get+0xd8>)
   1ca84:	f005 f9ce 	bl	21e24 <z_spin_lock_valid>
   1ca88:	b1c0      	cbz	r0, 1cabc <net_buf_slist_get+0x50>
	z_spin_lock_set_owner(l);
   1ca8a:	482e      	ldr	r0, [pc, #184]	; (1cb44 <net_buf_slist_get+0xd8>)
   1ca8c:	f005 f9ea 	bl	21e64 <z_spin_lock_set_owner>
	return list->head;
   1ca90:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1ca92:	2d00      	cmp	r5, #0
   1ca94:	d041      	beq.n	1cb1a <net_buf_slist_get+0xae>
	return node->next;
   1ca96:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1ca98:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ca9a:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ca9c:	4295      	cmp	r5, r2
   1ca9e:	d017      	beq.n	1cad0 <net_buf_slist_get+0x64>
{
   1caa0:	462a      	mov	r2, r5
   1caa2:	e01e      	b.n	1cae2 <net_buf_slist_get+0x76>
	__ASSERT_NO_MSG(list);
   1caa4:	4c28      	ldr	r4, [pc, #160]	; (1cb48 <net_buf_slist_get+0xdc>)
   1caa6:	f240 12e3 	movw	r2, #483	; 0x1e3
   1caaa:	4621      	mov	r1, r4
   1caac:	4827      	ldr	r0, [pc, #156]	; (1cb4c <net_buf_slist_get+0xe0>)
   1caae:	f00c f8ae 	bl	28c0e <assert_print>
   1cab2:	f240 11e3 	movw	r1, #483	; 0x1e3
   1cab6:	4620      	mov	r0, r4
   1cab8:	f00c f8a2 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cabc:	4c24      	ldr	r4, [pc, #144]	; (1cb50 <net_buf_slist_get+0xe4>)
   1cabe:	2294      	movs	r2, #148	; 0x94
   1cac0:	4621      	mov	r1, r4
   1cac2:	4822      	ldr	r0, [pc, #136]	; (1cb4c <net_buf_slist_get+0xe0>)
   1cac4:	f00c f8a3 	bl	28c0e <assert_print>
   1cac8:	2194      	movs	r1, #148	; 0x94
   1caca:	4620      	mov	r0, r4
   1cacc:	f00c f898 	bl	28c00 <assert_post_action>
	list->tail = node;
   1cad0:	6063      	str	r3, [r4, #4]
}
   1cad2:	e7e5      	b.n	1caa0 <net_buf_slist_get+0x34>
	buf = (void *)sys_slist_get(list);

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
   1cad4:	6013      	str	r3, [r2, #0]
			__ASSERT_NO_MSG(frag->frags);
   1cad6:	b193      	cbz	r3, 1cafe <net_buf_slist_get+0x92>

			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
   1cad8:	7951      	ldrb	r1, [r2, #5]
   1cada:	f021 0101 	bic.w	r1, r1, #1
   1cade:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cae0:	461a      	mov	r2, r3
   1cae2:	7953      	ldrb	r3, [r2, #5]
   1cae4:	f013 0f01 	tst.w	r3, #1
   1cae8:	d015      	beq.n	1cb16 <net_buf_slist_get+0xaa>
	return list->head;
   1caea:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1caec:	2b00      	cmp	r3, #0
   1caee:	d0f1      	beq.n	1cad4 <net_buf_slist_get+0x68>
	return node->next;
   1caf0:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   1caf2:	6021      	str	r1, [r4, #0]
	return list->tail;
   1caf4:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1caf6:	4283      	cmp	r3, r0
   1caf8:	d1ec      	bne.n	1cad4 <net_buf_slist_get+0x68>
	list->tail = node;
   1cafa:	6061      	str	r1, [r4, #4]
}
   1cafc:	e7ea      	b.n	1cad4 <net_buf_slist_get+0x68>
			__ASSERT_NO_MSG(frag->frags);
   1cafe:	4c12      	ldr	r4, [pc, #72]	; (1cb48 <net_buf_slist_get+0xdc>)
   1cb00:	f240 12ed 	movw	r2, #493	; 0x1ed
   1cb04:	4621      	mov	r1, r4
   1cb06:	4811      	ldr	r0, [pc, #68]	; (1cb4c <net_buf_slist_get+0xe0>)
   1cb08:	f00c f881 	bl	28c0e <assert_print>
   1cb0c:	f240 11ed 	movw	r1, #493	; 0x1ed
   1cb10:	4620      	mov	r0, r4
   1cb12:	f00c f875 	bl	28c00 <assert_post_action>
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1cb16:	2300      	movs	r3, #0
   1cb18:	6013      	str	r3, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cb1a:	480a      	ldr	r0, [pc, #40]	; (1cb44 <net_buf_slist_get+0xd8>)
   1cb1c:	f005 f992 	bl	21e44 <z_spin_unlock_valid>
   1cb20:	b128      	cbz	r0, 1cb2e <net_buf_slist_get+0xc2>
	__asm__ volatile(
   1cb22:	f386 8811 	msr	BASEPRI, r6
   1cb26:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1cb2a:	4628      	mov	r0, r5
   1cb2c:	bd70      	pop	{r4, r5, r6, pc}
   1cb2e:	4c08      	ldr	r4, [pc, #32]	; (1cb50 <net_buf_slist_get+0xe4>)
   1cb30:	22c2      	movs	r2, #194	; 0xc2
   1cb32:	4621      	mov	r1, r4
   1cb34:	4805      	ldr	r0, [pc, #20]	; (1cb4c <net_buf_slist_get+0xe0>)
   1cb36:	f00c f86a 	bl	28c0e <assert_print>
   1cb3a:	21c2      	movs	r1, #194	; 0xc2
   1cb3c:	4620      	mov	r0, r4
   1cb3e:	f00c f85f 	bl	28c00 <assert_post_action>
   1cb42:	bf00      	nop
   1cb44:	20002b98 	.word	0x20002b98
   1cb48:	00032cc8 	.word	0x00032cc8
   1cb4c:	00030128 	.word	0x00030128
   1cb50:	00030164 	.word	0x00030164

0001cb54 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1cb54:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1cb56:	b110      	cbz	r0, 1cb5e <net_buf_put+0xa>
	__ASSERT_NO_MSG(buf);
   1cb58:	b169      	cbz	r1, 1cb76 <net_buf_put+0x22>

	for (tail = buf; tail->frags; tail = tail->frags) {
   1cb5a:	460a      	mov	r2, r1
   1cb5c:	e01c      	b.n	1cb98 <net_buf_put+0x44>
	__ASSERT_NO_MSG(fifo);
   1cb5e:	4c11      	ldr	r4, [pc, #68]	; (1cba4 <net_buf_put+0x50>)
   1cb60:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cb64:	4621      	mov	r1, r4
   1cb66:	4810      	ldr	r0, [pc, #64]	; (1cba8 <net_buf_put+0x54>)
   1cb68:	f00c f851 	bl	28c0e <assert_print>
   1cb6c:	f44f 7100 	mov.w	r1, #512	; 0x200
   1cb70:	4620      	mov	r0, r4
   1cb72:	f00c f845 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1cb76:	4c0b      	ldr	r4, [pc, #44]	; (1cba4 <net_buf_put+0x50>)
   1cb78:	f240 2201 	movw	r2, #513	; 0x201
   1cb7c:	4621      	mov	r1, r4
   1cb7e:	480a      	ldr	r0, [pc, #40]	; (1cba8 <net_buf_put+0x54>)
   1cb80:	f00c f845 	bl	28c0e <assert_print>
   1cb84:	f240 2101 	movw	r1, #513	; 0x201
   1cb88:	4620      	mov	r0, r4
   1cb8a:	f00c f839 	bl	28c00 <assert_post_action>
		tail->flags |= NET_BUF_FRAGS;
   1cb8e:	7953      	ldrb	r3, [r2, #5]
   1cb90:	f043 0301 	orr.w	r3, r3, #1
   1cb94:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1cb96:	4622      	mov	r2, r4
   1cb98:	6814      	ldr	r4, [r2, #0]
   1cb9a:	2c00      	cmp	r4, #0
   1cb9c:	d1f7      	bne.n	1cb8e <net_buf_put+0x3a>
	}

	k_fifo_put_list(fifo, buf, tail);
   1cb9e:	f005 fcff 	bl	225a0 <k_queue_append_list>
}
   1cba2:	bd10      	pop	{r4, pc}
   1cba4:	00032cc8 	.word	0x00032cc8
   1cba8:	00030128 	.word	0x00030128

0001cbac <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1cbac:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   1cbae:	4604      	mov	r4, r0
   1cbb0:	b9b0      	cbnz	r0, 1cbe0 <net_buf_unref+0x34>
   1cbb2:	4c16      	ldr	r4, [pc, #88]	; (1cc0c <net_buf_unref+0x60>)
   1cbb4:	f44f 7204 	mov.w	r2, #528	; 0x210
   1cbb8:	4621      	mov	r1, r4
   1cbba:	4815      	ldr	r0, [pc, #84]	; (1cc10 <net_buf_unref+0x64>)
   1cbbc:	f00c f827 	bl	28c0e <assert_print>
   1cbc0:	f44f 7104 	mov.w	r1, #528	; 0x210
   1cbc4:	4620      	mov	r0, r4
   1cbc6:	f00c f81b 	bl	28c00 <assert_post_action>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   1cbca:	2300      	movs	r3, #0
   1cbcc:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   1cbce:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1cbd0:	79a0      	ldrb	r0, [r4, #6]
   1cbd2:	f7ff fd8f 	bl	1c6f4 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1cbd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1cbd8:	b193      	cbz	r3, 1cc00 <net_buf_unref+0x54>
			pool->destroy(buf);
   1cbda:	4620      	mov	r0, r4
   1cbdc:	4798      	blx	r3
{
   1cbde:	462c      	mov	r4, r5
	while (buf) {
   1cbe0:	b194      	cbz	r4, 1cc08 <net_buf_unref+0x5c>
		struct net_buf *frags = buf->frags;
   1cbe2:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   1cbe4:	7923      	ldrb	r3, [r4, #4]
   1cbe6:	3b01      	subs	r3, #1
   1cbe8:	b2db      	uxtb	r3, r3
   1cbea:	7123      	strb	r3, [r4, #4]
   1cbec:	b963      	cbnz	r3, 1cc08 <net_buf_unref+0x5c>
		if (buf->__buf) {
   1cbee:	6921      	ldr	r1, [r4, #16]
   1cbf0:	2900      	cmp	r1, #0
   1cbf2:	d0ea      	beq.n	1cbca <net_buf_unref+0x1e>
			data_unref(buf, buf->__buf);
   1cbf4:	4620      	mov	r0, r4
   1cbf6:	f010 fb96 	bl	2d326 <data_unref>
			buf->__buf = NULL;
   1cbfa:	2300      	movs	r3, #0
   1cbfc:	6123      	str	r3, [r4, #16]
   1cbfe:	e7e4      	b.n	1cbca <net_buf_unref+0x1e>
		} else {
			net_buf_destroy(buf);
   1cc00:	4620      	mov	r0, r4
   1cc02:	f010 fb87 	bl	2d314 <net_buf_destroy>
   1cc06:	e7ea      	b.n	1cbde <net_buf_unref+0x32>
		}

		buf = frags;
	}
}
   1cc08:	bd38      	pop	{r3, r4, r5, pc}
   1cc0a:	bf00      	nop
   1cc0c:	00032cc8 	.word	0x00032cc8
   1cc10:	00030128 	.word	0x00030128

0001cc14 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
	__ASSERT_NO_MSG(buf);
   1cc14:	b118      	cbz	r0, 1cc1e <net_buf_ref+0xa>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1cc16:	7902      	ldrb	r2, [r0, #4]
   1cc18:	3201      	adds	r2, #1
   1cc1a:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1cc1c:	4770      	bx	lr
{
   1cc1e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1cc20:	4c05      	ldr	r4, [pc, #20]	; (1cc38 <net_buf_ref+0x24>)
   1cc22:	f240 223f 	movw	r2, #575	; 0x23f
   1cc26:	4621      	mov	r1, r4
   1cc28:	4804      	ldr	r0, [pc, #16]	; (1cc3c <net_buf_ref+0x28>)
   1cc2a:	f00b fff0 	bl	28c0e <assert_print>
   1cc2e:	f240 213f 	movw	r1, #575	; 0x23f
   1cc32:	4620      	mov	r0, r4
   1cc34:	f00b ffe4 	bl	28c00 <assert_post_action>
   1cc38:	00032cc8 	.word	0x00032cc8
   1cc3c:	00030128 	.word	0x00030128

0001cc40 <net_buf_frag_last>:
	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	__ASSERT_NO_MSG(buf);
   1cc40:	4603      	mov	r3, r0
   1cc42:	b120      	cbz	r0, 1cc4e <net_buf_frag_last+0xe>

	while (buf->frags) {
   1cc44:	4618      	mov	r0, r3
   1cc46:	681b      	ldr	r3, [r3, #0]
   1cc48:	2b00      	cmp	r3, #0
   1cc4a:	d1fb      	bne.n	1cc44 <net_buf_frag_last+0x4>
		buf = buf->frags;
	}

	return buf;
}
   1cc4c:	4770      	bx	lr
{
   1cc4e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1cc50:	4c05      	ldr	r4, [pc, #20]	; (1cc68 <net_buf_frag_last+0x28>)
   1cc52:	f44f 721f 	mov.w	r2, #636	; 0x27c
   1cc56:	4621      	mov	r1, r4
   1cc58:	4804      	ldr	r0, [pc, #16]	; (1cc6c <net_buf_frag_last+0x2c>)
   1cc5a:	f00b ffd8 	bl	28c0e <assert_print>
   1cc5e:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1cc62:	4620      	mov	r0, r4
   1cc64:	f00b ffcc 	bl	28c00 <assert_post_action>
   1cc68:	00032cc8 	.word	0x00032cc8
   1cc6c:	00030128 	.word	0x00030128

0001cc70 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1cc70:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(parent);
   1cc72:	b158      	cbz	r0, 1cc8c <net_buf_frag_insert+0x1c>
   1cc74:	460c      	mov	r4, r1
   1cc76:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1cc78:	b1a1      	cbz	r1, 1cca4 <net_buf_frag_insert+0x34>

	if (parent->frags) {
   1cc7a:	6803      	ldr	r3, [r0, #0]
   1cc7c:	b123      	cbz	r3, 1cc88 <net_buf_frag_insert+0x18>
		net_buf_frag_last(frag)->frags = parent->frags;
   1cc7e:	4608      	mov	r0, r1
   1cc80:	f7ff ffde 	bl	1cc40 <net_buf_frag_last>
   1cc84:	682b      	ldr	r3, [r5, #0]
   1cc86:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1cc88:	602c      	str	r4, [r5, #0]
}
   1cc8a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(parent);
   1cc8c:	4c0b      	ldr	r4, [pc, #44]	; (1ccbc <net_buf_frag_insert+0x4c>)
   1cc8e:	f240 2287 	movw	r2, #647	; 0x287
   1cc92:	4621      	mov	r1, r4
   1cc94:	480a      	ldr	r0, [pc, #40]	; (1ccc0 <net_buf_frag_insert+0x50>)
   1cc96:	f00b ffba 	bl	28c0e <assert_print>
   1cc9a:	f240 2187 	movw	r1, #647	; 0x287
   1cc9e:	4620      	mov	r0, r4
   1cca0:	f00b ffae 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1cca4:	4c05      	ldr	r4, [pc, #20]	; (1ccbc <net_buf_frag_insert+0x4c>)
   1cca6:	f44f 7222 	mov.w	r2, #648	; 0x288
   1ccaa:	4621      	mov	r1, r4
   1ccac:	4804      	ldr	r0, [pc, #16]	; (1ccc0 <net_buf_frag_insert+0x50>)
   1ccae:	f00b ffae 	bl	28c0e <assert_print>
   1ccb2:	f44f 7122 	mov.w	r1, #648	; 0x288
   1ccb6:	4620      	mov	r0, r4
   1ccb8:	f00b ffa2 	bl	28c00 <assert_post_action>
   1ccbc:	00032cc8 	.word	0x00032cc8
   1ccc0:	00030128 	.word	0x00030128

0001ccc4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1ccc4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(frag);
   1ccc6:	b149      	cbz	r1, 1ccdc <net_buf_frag_add+0x18>
   1ccc8:	4604      	mov	r4, r0
   1ccca:	460d      	mov	r5, r1

	if (!head) {
   1cccc:	b190      	cbz	r0, 1ccf4 <net_buf_frag_add+0x30>
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1ccce:	f7ff ffb7 	bl	1cc40 <net_buf_frag_last>
   1ccd2:	4629      	mov	r1, r5
   1ccd4:	f7ff ffcc 	bl	1cc70 <net_buf_frag_insert>

	return head;
   1ccd8:	4620      	mov	r0, r4
}
   1ccda:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(frag);
   1ccdc:	4c07      	ldr	r4, [pc, #28]	; (1ccfc <net_buf_frag_add+0x38>)
   1ccde:	f240 2293 	movw	r2, #659	; 0x293
   1cce2:	4621      	mov	r1, r4
   1cce4:	4806      	ldr	r0, [pc, #24]	; (1cd00 <net_buf_frag_add+0x3c>)
   1cce6:	f00b ff92 	bl	28c0e <assert_print>
   1ccea:	f240 2193 	movw	r1, #659	; 0x293
   1ccee:	4620      	mov	r0, r4
   1ccf0:	f00b ff86 	bl	28c00 <assert_post_action>
		return net_buf_ref(frag);
   1ccf4:	4608      	mov	r0, r1
   1ccf6:	f7ff ff8d 	bl	1cc14 <net_buf_ref>
   1ccfa:	e7ee      	b.n	1ccda <net_buf_frag_add+0x16>
   1ccfc:	00032cc8 	.word	0x00032cc8
   1cd00:	00030128 	.word	0x00030128

0001cd04 <net_buf_simple_pull>:

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   1cd04:	8882      	ldrh	r2, [r0, #4]
   1cd06:	428a      	cmp	r2, r1
   1cd08:	d306      	bcc.n	1cd18 <net_buf_simple_pull+0x14>
   1cd0a:	4603      	mov	r3, r0

	buf->len -= len;
   1cd0c:	1a52      	subs	r2, r2, r1
   1cd0e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1cd10:	6800      	ldr	r0, [r0, #0]
   1cd12:	4408      	add	r0, r1
   1cd14:	6018      	str	r0, [r3, #0]
}
   1cd16:	4770      	bx	lr
{
   1cd18:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1cd1a:	4c06      	ldr	r4, [pc, #24]	; (1cd34 <net_buf_simple_pull+0x30>)
   1cd1c:	f240 4277 	movw	r2, #1143	; 0x477
   1cd20:	4621      	mov	r1, r4
   1cd22:	4805      	ldr	r0, [pc, #20]	; (1cd38 <net_buf_simple_pull+0x34>)
   1cd24:	f00b ff73 	bl	28c0e <assert_print>
   1cd28:	f240 4177 	movw	r1, #1143	; 0x477
   1cd2c:	4620      	mov	r0, r4
   1cd2e:	f00b ff67 	bl	28c00 <assert_post_action>
   1cd32:	bf00      	nop
   1cd34:	00032cc8 	.word	0x00032cc8
   1cd38:	00030128 	.word	0x00030128

0001cd3c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1cd3c:	4603      	mov	r3, r0
	void *data = buf->data;
   1cd3e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   1cd40:	889a      	ldrh	r2, [r3, #4]
   1cd42:	428a      	cmp	r2, r1
   1cd44:	d304      	bcc.n	1cd50 <net_buf_simple_pull_mem+0x14>

	buf->len -= len;
   1cd46:	1a52      	subs	r2, r2, r1
   1cd48:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1cd4a:	4401      	add	r1, r0
   1cd4c:	6019      	str	r1, [r3, #0]

	return data;
}
   1cd4e:	4770      	bx	lr
{
   1cd50:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1cd52:	4c06      	ldr	r4, [pc, #24]	; (1cd6c <net_buf_simple_pull_mem+0x30>)
   1cd54:	f240 4283 	movw	r2, #1155	; 0x483
   1cd58:	4621      	mov	r1, r4
   1cd5a:	4805      	ldr	r0, [pc, #20]	; (1cd70 <net_buf_simple_pull_mem+0x34>)
   1cd5c:	f00b ff57 	bl	28c0e <assert_print>
   1cd60:	f240 4183 	movw	r1, #1155	; 0x483
   1cd64:	4620      	mov	r0, r4
   1cd66:	f00b ff4b 	bl	28c00 <assert_post_action>
   1cd6a:	bf00      	nop
   1cd6c:	00032cc8 	.word	0x00032cc8
   1cd70:	00030128 	.word	0x00030128

0001cd74 <net_buf_simple_push>:
{
   1cd74:	b538      	push	{r3, r4, r5, lr}
   1cd76:	4604      	mov	r4, r0
   1cd78:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1cd7a:	f010 fb19 	bl	2d3b0 <net_buf_simple_headroom>
   1cd7e:	42a8      	cmp	r0, r5
   1cd80:	d306      	bcc.n	1cd90 <net_buf_simple_push+0x1c>
	buf->data -= len;
   1cd82:	6820      	ldr	r0, [r4, #0]
   1cd84:	1b40      	subs	r0, r0, r5
   1cd86:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1cd88:	88a3      	ldrh	r3, [r4, #4]
   1cd8a:	442b      	add	r3, r5
   1cd8c:	80a3      	strh	r3, [r4, #4]
}
   1cd8e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1cd90:	4c05      	ldr	r4, [pc, #20]	; (1cda8 <net_buf_simple_push+0x34>)
   1cd92:	f240 4217 	movw	r2, #1047	; 0x417
   1cd96:	4621      	mov	r1, r4
   1cd98:	4804      	ldr	r0, [pc, #16]	; (1cdac <net_buf_simple_push+0x38>)
   1cd9a:	f00b ff38 	bl	28c0e <assert_print>
   1cd9e:	f240 4117 	movw	r1, #1047	; 0x417
   1cda2:	4620      	mov	r0, r4
   1cda4:	f00b ff2c 	bl	28c00 <assert_post_action>
   1cda8:	00032cc8 	.word	0x00032cc8
   1cdac:	00030128 	.word	0x00030128

0001cdb0 <net_buf_simple_add>:
{
   1cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cdb2:	4604      	mov	r4, r0
   1cdb4:	460d      	mov	r5, r1
	return buf->data + buf->len;
   1cdb6:	6803      	ldr	r3, [r0, #0]
   1cdb8:	8886      	ldrh	r6, [r0, #4]
   1cdba:	199f      	adds	r7, r3, r6
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1cdbc:	f010 fafc 	bl	2d3b8 <net_buf_simple_tailroom>
   1cdc0:	42a8      	cmp	r0, r5
   1cdc2:	d303      	bcc.n	1cdcc <net_buf_simple_add+0x1c>
	buf->len += len;
   1cdc4:	442e      	add	r6, r5
   1cdc6:	80a6      	strh	r6, [r4, #4]
}
   1cdc8:	4638      	mov	r0, r7
   1cdca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1cdcc:	4c05      	ldr	r4, [pc, #20]	; (1cde4 <net_buf_simple_add+0x34>)
   1cdce:	f44f 724a 	mov.w	r2, #808	; 0x328
   1cdd2:	4621      	mov	r1, r4
   1cdd4:	4804      	ldr	r0, [pc, #16]	; (1cde8 <net_buf_simple_add+0x38>)
   1cdd6:	f00b ff1a 	bl	28c0e <assert_print>
   1cdda:	f44f 714a 	mov.w	r1, #808	; 0x328
   1cdde:	4620      	mov	r0, r4
   1cde0:	f00b ff0e 	bl	28c00 <assert_post_action>
   1cde4:	00032cc8 	.word	0x00032cc8
   1cde8:	00030128 	.word	0x00030128

0001cdec <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1cdec:	b508      	push	{r3, lr}
   1cdee:	4804      	ldr	r0, [pc, #16]	; (1ce00 <xoshiro128_initialize+0x14>)
   1cdf0:	f012 f902 	bl	2eff8 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   1cdf4:	b108      	cbz	r0, 1cdfa <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
   1cdf6:	2000      	movs	r0, #0
}
   1cdf8:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1cdfa:	f06f 0012 	mvn.w	r0, #18
   1cdfe:	e7fb      	b.n	1cdf8 <xoshiro128_initialize+0xc>
   1ce00:	0002f764 	.word	0x0002f764

0001ce04 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1ce04:	4800      	ldr	r0, [pc, #0]	; (1ce08 <get_hf_flags+0x4>)
   1ce06:	4770      	bx	lr
   1ce08:	20002bf8 	.word	0x20002bf8

0001ce0c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1ce0c:	4b01      	ldr	r3, [pc, #4]	; (1ce14 <get_subsys+0x8>)
   1ce0e:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
   1ce10:	1140      	asrs	r0, r0, #5
   1ce12:	4770      	bx	lr
   1ce14:	20002bb0 	.word	0x20002bb0

0001ce18 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1ce18:	b530      	push	{r4, r5, lr}
   1ce1a:	b083      	sub	sp, #12
   1ce1c:	4605      	mov	r5, r0
   1ce1e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ce20:	f7ff fff4 	bl	1ce0c <get_subsys>
   1ce24:	4601      	mov	r1, r0
   1ce26:	2340      	movs	r3, #64	; 0x40
   1ce28:	9300      	str	r3, [sp, #0]
   1ce2a:	4623      	mov	r3, r4
   1ce2c:	4a05      	ldr	r2, [pc, #20]	; (1ce44 <onoff_start+0x2c>)
   1ce2e:	4806      	ldr	r0, [pc, #24]	; (1ce48 <onoff_start+0x30>)
   1ce30:	f010 fb4a 	bl	2d4c8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1ce34:	1e01      	subs	r1, r0, #0
   1ce36:	db01      	blt.n	1ce3c <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1ce38:	b003      	add	sp, #12
   1ce3a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1ce3c:	4628      	mov	r0, r5
   1ce3e:	47a0      	blx	r4
}
   1ce40:	e7fa      	b.n	1ce38 <onoff_start+0x20>
   1ce42:	bf00      	nop
   1ce44:	0002d511 	.word	0x0002d511
   1ce48:	0002f6ec 	.word	0x0002f6ec

0001ce4c <generic_hfclk_stop>:
{
   1ce4c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ce4e:	4b0a      	ldr	r3, [pc, #40]	; (1ce78 <generic_hfclk_stop+0x2c>)
   1ce50:	f3bf 8f5b 	dmb	ish
   1ce54:	e853 2f00 	ldrex	r2, [r3]
   1ce58:	f022 0102 	bic.w	r1, r2, #2
   1ce5c:	e843 1000 	strex	r0, r1, [r3]
   1ce60:	2800      	cmp	r0, #0
   1ce62:	d1f7      	bne.n	1ce54 <generic_hfclk_stop+0x8>
   1ce64:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1ce68:	f012 0f01 	tst.w	r2, #1
   1ce6c:	d000      	beq.n	1ce70 <generic_hfclk_stop+0x24>
}
   1ce6e:	bd08      	pop	{r3, pc}
	hfclk_stop();
   1ce70:	f010 fb60 	bl	2d534 <hfclk_stop>
   1ce74:	e7fb      	b.n	1ce6e <generic_hfclk_stop+0x22>
   1ce76:	bf00      	nop
   1ce78:	20002c08 	.word	0x20002c08

0001ce7c <sys_notify_init_spinwait>:
 *
 * @param notify pointer to the notification configuration object.
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);
   1ce7c:	b130      	cbz	r0, 1ce8c <sys_notify_init_spinwait+0x10>

	*notify = (struct sys_notify){
   1ce7e:	2200      	movs	r2, #0
   1ce80:	6002      	str	r2, [r0, #0]
   1ce82:	6042      	str	r2, [r0, #4]
   1ce84:	6082      	str	r2, [r0, #8]
   1ce86:	2201      	movs	r2, #1
   1ce88:	6042      	str	r2, [r0, #4]
   1ce8a:	4770      	bx	lr
{
   1ce8c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(notify != NULL);
   1ce8e:	4c06      	ldr	r4, [pc, #24]	; (1cea8 <sys_notify_init_spinwait+0x2c>)
   1ce90:	f44f 7285 	mov.w	r2, #266	; 0x10a
   1ce94:	4621      	mov	r1, r4
   1ce96:	4805      	ldr	r0, [pc, #20]	; (1ceac <sys_notify_init_spinwait+0x30>)
   1ce98:	f00b feb9 	bl	28c0e <assert_print>
   1ce9c:	f44f 7185 	mov.w	r1, #266	; 0x10a
   1cea0:	4620      	mov	r0, r4
   1cea2:	f00b fead 	bl	28c00 <assert_post_action>
   1cea6:	bf00      	nop
   1cea8:	00032d00 	.word	0x00032d00
   1ceac:	00030128 	.word	0x00030128

0001ceb0 <nrf_clock_is_running>:

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    switch (domain)
   1ceb0:	b1d9      	cbz	r1, 1ceea <nrf_clock_is_running+0x3a>
   1ceb2:	2901      	cmp	r1, #1
   1ceb4:	d10c      	bne.n	1ced0 <nrf_clock_is_running+0x20>
            {
                return true;
            }
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
   1ceb6:	b122      	cbz	r2, 1cec2 <nrf_clock_is_running+0x12>
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ceb8:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1cebc:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1cec0:	7013      	strb	r3, [r2, #0]
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1cec2:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1cec6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1ceca:	d11d      	bne.n	1cf08 <nrf_clock_is_running+0x58>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
   1cecc:	2000      	movs	r0, #0
   1cece:	4770      	bx	lr
{
   1ced0:	b510      	push	{r4, lr}
            NRFX_ASSERT(0);
   1ced2:	4c0e      	ldr	r4, [pc, #56]	; (1cf0c <nrf_clock_is_running+0x5c>)
   1ced4:	f240 3247 	movw	r2, #839	; 0x347
   1ced8:	4621      	mov	r1, r4
   1ceda:	480d      	ldr	r0, [pc, #52]	; (1cf10 <nrf_clock_is_running+0x60>)
   1cedc:	f00b fe97 	bl	28c0e <assert_print>
   1cee0:	f240 3147 	movw	r1, #839	; 0x347
   1cee4:	4620      	mov	r0, r4
   1cee6:	f00b fe8b 	bl	28c00 <assert_post_action>
            if (p_clk_src != NULL)
   1ceea:	b122      	cbz	r2, 1cef6 <nrf_clock_is_running+0x46>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ceec:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1cef0:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1cef4:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1cef6:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   1cefa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1cefe:	d101      	bne.n	1cf04 <nrf_clock_is_running+0x54>
    return false;
   1cf00:	2000      	movs	r0, #0
   1cf02:	4770      	bx	lr
                return true;
   1cf04:	2001      	movs	r0, #1
   1cf06:	4770      	bx	lr
                return true;
   1cf08:	2001      	movs	r0, #1
}
   1cf0a:	4770      	bx	lr
   1cf0c:	00032d30 	.word	0x00032d30
   1cf10:	00030128 	.word	0x00030128

0001cf14 <generic_hfclk_start>:
{
   1cf14:	b510      	push	{r4, lr}
   1cf16:	b082      	sub	sp, #8
	__asm__ volatile(
   1cf18:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf1c:	f3ef 8411 	mrs	r4, BASEPRI
   1cf20:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf24:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1cf28:	4a14      	ldr	r2, [pc, #80]	; (1cf7c <generic_hfclk_start+0x68>)
   1cf2a:	6813      	ldr	r3, [r2, #0]
   1cf2c:	f043 0102 	orr.w	r1, r3, #2
   1cf30:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1cf32:	f013 0f01 	tst.w	r3, #1
   1cf36:	d109      	bne.n	1cf4c <generic_hfclk_start+0x38>
	bool already_started = false;
   1cf38:	2300      	movs	r3, #0
	__asm__ volatile(
   1cf3a:	f384 8811 	msr	BASEPRI, r4
   1cf3e:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1cf42:	b9b3      	cbnz	r3, 1cf72 <generic_hfclk_start+0x5e>
	hfclk_start();
   1cf44:	f010 faec 	bl	2d520 <hfclk_start>
}
   1cf48:	b002      	add	sp, #8
   1cf4a:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   1cf4c:	f10d 0207 	add.w	r2, sp, #7
   1cf50:	2101      	movs	r1, #1
   1cf52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1cf56:	f7ff ffab 	bl	1ceb0 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1cf5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cf5e:	2b01      	cmp	r3, #1
   1cf60:	d001      	beq.n	1cf66 <generic_hfclk_start+0x52>
	bool already_started = false;
   1cf62:	2300      	movs	r3, #0
   1cf64:	e7e9      	b.n	1cf3a <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   1cf66:	f7ff ff4d 	bl	1ce04 <get_hf_flags>
   1cf6a:	f010 fa88 	bl	2d47e <set_on_state>
			already_started = true;
   1cf6e:	2301      	movs	r3, #1
   1cf70:	e7e3      	b.n	1cf3a <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   1cf72:	2100      	movs	r1, #0
   1cf74:	4802      	ldr	r0, [pc, #8]	; (1cf80 <generic_hfclk_start+0x6c>)
   1cf76:	f010 fa95 	bl	2d4a4 <clkstarted_handle>
		return;
   1cf7a:	e7e5      	b.n	1cf48 <generic_hfclk_start+0x34>
   1cf7c:	20002c08 	.word	0x20002c08
   1cf80:	0002f6ec 	.word	0x0002f6ec

0001cf84 <get_status>:
{
   1cf84:	b510      	push	{r4, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1cf86:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cf88:	2901      	cmp	r1, #1
   1cf8a:	d805      	bhi.n	1cf98 <get_status+0x14>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1cf8c:	f010 fa2f 	bl	2d3ee <get_sub_data>
   1cf90:	6880      	ldr	r0, [r0, #8]
}
   1cf92:	f000 0007 	and.w	r0, r0, #7
   1cf96:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cf98:	4c04      	ldr	r4, [pc, #16]	; (1cfac <get_status+0x28>)
   1cf9a:	227a      	movs	r2, #122	; 0x7a
   1cf9c:	4621      	mov	r1, r4
   1cf9e:	4804      	ldr	r0, [pc, #16]	; (1cfb0 <get_status+0x2c>)
   1cfa0:	f00b fe35 	bl	28c0e <assert_print>
   1cfa4:	217a      	movs	r1, #122	; 0x7a
   1cfa6:	4620      	mov	r0, r4
   1cfa8:	f00b fe2a 	bl	28c00 <assert_post_action>
   1cfac:	00032d64 	.word	0x00032d64
   1cfb0:	00030128 	.word	0x00030128

0001cfb4 <stop>:
{
   1cfb4:	b570      	push	{r4, r5, r6, lr}
   1cfb6:	4605      	mov	r5, r0
   1cfb8:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1cfba:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1cfbc:	4621      	mov	r1, r4
   1cfbe:	f010 fa16 	bl	2d3ee <get_sub_data>
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cfc2:	2c01      	cmp	r4, #1
   1cfc4:	d80d      	bhi.n	1cfe2 <stop+0x2e>
	err = set_off_state(&subdata->flags, ctx);
   1cfc6:	4631      	mov	r1, r6
   1cfc8:	3008      	adds	r0, #8
   1cfca:	f010 fa21 	bl	2d410 <set_off_state>
	if (err < 0) {
   1cfce:	2800      	cmp	r0, #0
   1cfd0:	db06      	blt.n	1cfe0 <stop+0x2c>
	get_sub_config(dev, type)->stop();
   1cfd2:	4621      	mov	r1, r4
   1cfd4:	4628      	mov	r0, r5
   1cfd6:	f010 fa11 	bl	2d3fc <get_sub_config>
   1cfda:	6843      	ldr	r3, [r0, #4]
   1cfdc:	4798      	blx	r3
	return 0;
   1cfde:	2000      	movs	r0, #0
}
   1cfe0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cfe2:	4c06      	ldr	r4, [pc, #24]	; (1cffc <stop+0x48>)
   1cfe4:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   1cfe8:	4621      	mov	r1, r4
   1cfea:	4805      	ldr	r0, [pc, #20]	; (1d000 <stop+0x4c>)
   1cfec:	f00b fe0f 	bl	28c0e <assert_print>
   1cff0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1cff4:	4620      	mov	r0, r4
   1cff6:	f00b fe03 	bl	28c00 <assert_post_action>
   1cffa:	bf00      	nop
   1cffc:	00032d64 	.word	0x00032d64
   1d000:	00030128 	.word	0x00030128

0001d004 <onoff_stop>:
{
   1d004:	b538      	push	{r3, r4, r5, lr}
   1d006:	4605      	mov	r5, r0
   1d008:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d00a:	f7ff feff 	bl	1ce0c <get_subsys>
   1d00e:	4601      	mov	r1, r0
   1d010:	2240      	movs	r2, #64	; 0x40
   1d012:	4803      	ldr	r0, [pc, #12]	; (1d020 <onoff_stop+0x1c>)
   1d014:	f7ff ffce 	bl	1cfb4 <stop>
   1d018:	4601      	mov	r1, r0
	notify(mgr, res);
   1d01a:	4628      	mov	r0, r5
   1d01c:	47a0      	blx	r4
}
   1d01e:	bd38      	pop	{r3, r4, r5, pc}
   1d020:	0002f6ec 	.word	0x0002f6ec

0001d024 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1d024:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1d026:	2801      	cmp	r0, #1
   1d028:	d00f      	beq.n	1d04a <clock_event_handler+0x26>
   1d02a:	2803      	cmp	r0, #3
   1d02c:	d012      	beq.n	1d054 <clock_event_handler+0x30>
   1d02e:	b9e8      	cbnz	r0, 1d06c <clock_event_handler+0x48>
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1d030:	2100      	movs	r1, #0
   1d032:	4814      	ldr	r0, [pc, #80]	; (1d084 <clock_event_handler+0x60>)
   1d034:	f010 f9db 	bl	2d3ee <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d038:	6883      	ldr	r3, [r0, #8]
   1d03a:	f013 0f07 	tst.w	r3, #7
   1d03e:	d108      	bne.n	1d052 <clock_event_handler+0x2e>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1d040:	2100      	movs	r1, #0
   1d042:	4810      	ldr	r0, [pc, #64]	; (1d084 <clock_event_handler+0x60>)
   1d044:	f010 fa2e 	bl	2d4a4 <clkstarted_handle>
   1d048:	e003      	b.n	1d052 <clock_event_handler+0x2e>
#endif
	case NRFX_CLOCK_EVT_LFCLK_STARTED:
		if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d04a:	2101      	movs	r1, #1
   1d04c:	480d      	ldr	r0, [pc, #52]	; (1d084 <clock_event_handler+0x60>)
   1d04e:	f010 fa29 	bl	2d4a4 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   1d052:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
   1d054:	4c0c      	ldr	r4, [pc, #48]	; (1d088 <clock_event_handler+0x64>)
   1d056:	f240 225f 	movw	r2, #607	; 0x25f
   1d05a:	4621      	mov	r1, r4
   1d05c:	480b      	ldr	r0, [pc, #44]	; (1d08c <clock_event_handler+0x68>)
   1d05e:	f00b fdd6 	bl	28c0e <assert_print>
   1d062:	f240 215f 	movw	r1, #607	; 0x25f
   1d066:	4620      	mov	r0, r4
   1d068:	f00b fdca 	bl	28c00 <assert_post_action>
		__ASSERT_NO_MSG(0);
   1d06c:	4c06      	ldr	r4, [pc, #24]	; (1d088 <clock_event_handler+0x64>)
   1d06e:	f240 2263 	movw	r2, #611	; 0x263
   1d072:	4621      	mov	r1, r4
   1d074:	4805      	ldr	r0, [pc, #20]	; (1d08c <clock_event_handler+0x68>)
   1d076:	f00b fdca 	bl	28c0e <assert_print>
   1d07a:	f240 2163 	movw	r1, #611	; 0x263
   1d07e:	4620      	mov	r0, r4
   1d080:	f00b fdbe 	bl	28c00 <assert_post_action>
   1d084:	0002f6ec 	.word	0x0002f6ec
   1d088:	00032d64 	.word	0x00032d64
   1d08c:	00030128 	.word	0x00030128

0001d090 <lfclk_spinwait>:
{
   1d090:	b570      	push	{r4, r5, r6, lr}
   1d092:	b082      	sub	sp, #8
   1d094:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1d096:	2801      	cmp	r0, #1
   1d098:	d107      	bne.n	1d0aa <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d09a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d09e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1d0a2:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1d0a6:	2b01      	cmp	r3, #1
   1d0a8:	d04c      	beq.n	1d144 <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d0aa:	f011 fffe 	bl	2f0aa <k_is_in_isr>
   1d0ae:	4604      	mov	r4, r0
   1d0b0:	b918      	cbnz	r0, 1d0ba <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   1d0b2:	4b28      	ldr	r3, [pc, #160]	; (1d154 <lfclk_spinwait+0xc4>)
   1d0b4:	781b      	ldrb	r3, [r3, #0]
   1d0b6:	2b00      	cmp	r3, #0
   1d0b8:	d139      	bne.n	1d12e <lfclk_spinwait+0x9e>
	__asm__ volatile(
   1d0ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0be:	f3ef 8611 	mrs	r6, BASEPRI
   1d0c2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0c6:	f3bf 8f6f 	isb	sy
   1d0ca:	2401      	movs	r4, #1
	if (!isr_mode) {
   1d0cc:	b924      	cbnz	r4, 1d0d8 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
   1d0ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d0d2:	2202      	movs	r2, #2
   1d0d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1d0d8:	aa01      	add	r2, sp, #4
   1d0da:	2100      	movs	r1, #0
   1d0dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1d0e0:	f7ff fee6 	bl	1ceb0 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d0e4:	b120      	cbz	r0, 1d0f0 <lfclk_spinwait+0x60>
		 && ((type == target_type)
   1d0e6:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d0e8:	2b01      	cmp	r3, #1
   1d0ea:	d026      	beq.n	1d13a <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d0ec:	2d01      	cmp	r5, #1
   1d0ee:	d024      	beq.n	1d13a <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d0f0:	b1fc      	cbz	r4, 1d132 <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d0f2:	4630      	mov	r0, r6
   1d0f4:	f7f5 ff7c 	bl	12ff0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1d0f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d0fc:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1d100:	2b00      	cmp	r3, #0
   1d102:	d1e9      	bne.n	1d0d8 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d108:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1d10c:	2b00      	cmp	r3, #0
   1d10e:	d0e3      	beq.n	1d0d8 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d114:	2200      	movs	r2, #0
   1d116:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1d11a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d11e:	2201      	movs	r2, #1
   1d120:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d124:	490c      	ldr	r1, [pc, #48]	; (1d158 <lfclk_spinwait+0xc8>)
   1d126:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d12a:	609a      	str	r2, [r3, #8]
}
   1d12c:	e7d4      	b.n	1d0d8 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
   1d12e:	2600      	movs	r6, #0
   1d130:	e7cc      	b.n	1d0cc <lfclk_spinwait+0x3c>
				k_msleep(1);
   1d132:	2001      	movs	r0, #1
   1d134:	f010 fa0d 	bl	2d552 <k_msleep>
   1d138:	e7de      	b.n	1d0f8 <lfclk_spinwait+0x68>
	if (isr_mode) {
   1d13a:	b12c      	cbz	r4, 1d148 <lfclk_spinwait+0xb8>
	__asm__ volatile(
   1d13c:	f386 8811 	msr	BASEPRI, r6
   1d140:	f3bf 8f6f 	isb	sy
}
   1d144:	b002      	add	sp, #8
   1d146:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   1d148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d14c:	2202      	movs	r2, #2
   1d14e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d152:	e7f7      	b.n	1d144 <lfclk_spinwait+0xb4>
   1d154:	200045fc 	.word	0x200045fc
   1d158:	e000e100 	.word	0xe000e100

0001d15c <api_blocking_start>:
{
   1d15c:	b500      	push	{lr}
   1d15e:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d160:	f8cd d000 	str.w	sp, [sp]
   1d164:	f8cd d004 	str.w	sp, [sp, #4]
   1d168:	2300      	movs	r3, #0
   1d16a:	9302      	str	r3, [sp, #8]
   1d16c:	2301      	movs	r3, #1
   1d16e:	9303      	str	r3, [sp, #12]
   1d170:	ab04      	add	r3, sp, #16
   1d172:	9304      	str	r3, [sp, #16]
   1d174:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d176:	466b      	mov	r3, sp
   1d178:	4a06      	ldr	r2, [pc, #24]	; (1d194 <api_blocking_start+0x38>)
   1d17a:	f010 f9c1 	bl	2d500 <api_start>
	if (err < 0) {
   1d17e:	2800      	cmp	r0, #0
   1d180:	db05      	blt.n	1d18e <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1d182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d186:	2300      	movs	r3, #0
   1d188:	4668      	mov	r0, sp
   1d18a:	f005 fb0d 	bl	227a8 <z_impl_k_sem_take>
}
   1d18e:	b007      	add	sp, #28
   1d190:	f85d fb04 	ldr.w	pc, [sp], #4
   1d194:	0002d57f 	.word	0x0002d57f

0001d198 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1d198:	b570      	push	{r4, r5, r6, lr}
   1d19a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d19c:	2200      	movs	r2, #0
   1d19e:	2101      	movs	r1, #1
   1d1a0:	4610      	mov	r0, r2
   1d1a2:	f7f5 ff99 	bl	130d8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d1a6:	4811      	ldr	r0, [pc, #68]	; (1d1ec <clk_init+0x54>)
   1d1a8:	f002 ff8e 	bl	200c8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d1ac:	4b10      	ldr	r3, [pc, #64]	; (1d1f0 <clk_init+0x58>)
   1d1ae:	4298      	cmp	r0, r3
   1d1b0:	d119      	bne.n	1d1e6 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d1b2:	f011 fbfd 	bl	2e9b0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1d1b6:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1d1b8:	2c01      	cmp	r4, #1
   1d1ba:	d812      	bhi.n	1d1e2 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1d1bc:	4621      	mov	r1, r4
   1d1be:	4630      	mov	r0, r6
   1d1c0:	f010 f915 	bl	2d3ee <get_sub_data>
   1d1c4:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d1c6:	4621      	mov	r1, r4
   1d1c8:	4630      	mov	r0, r6
   1d1ca:	f010 f91d 	bl	2d408 <get_onoff_manager>
   1d1ce:	4909      	ldr	r1, [pc, #36]	; (1d1f4 <clk_init+0x5c>)
   1d1d0:	f00b faaf 	bl	28732 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1d1d4:	2800      	cmp	r0, #0
   1d1d6:	db05      	blt.n	1d1e4 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d1d8:	2301      	movs	r3, #1
   1d1da:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1d1dc:	441c      	add	r4, r3
   1d1de:	b2e4      	uxtb	r4, r4
   1d1e0:	e7ea      	b.n	1d1b8 <clk_init+0x20>
	}

	return 0;
   1d1e2:	2000      	movs	r0, #0
}
   1d1e4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d1e6:	f06f 0004 	mvn.w	r0, #4
   1d1ea:	e7fb      	b.n	1d1e4 <clk_init+0x4c>
   1d1ec:	0001d025 	.word	0x0001d025
   1d1f0:	0bad0000 	.word	0x0bad0000
   1d1f4:	00032da4 	.word	0x00032da4

0001d1f8 <z_nrf_clock_control_lf_on>:
{
   1d1f8:	b570      	push	{r4, r5, r6, lr}
   1d1fa:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d1fc:	4b1d      	ldr	r3, [pc, #116]	; (1d274 <z_nrf_clock_control_lf_on+0x7c>)
   1d1fe:	2101      	movs	r1, #1
   1d200:	f3bf 8f5b 	dmb	ish
   1d204:	e853 2f00 	ldrex	r2, [r3]
   1d208:	e843 1000 	strex	r0, r1, [r3]
   1d20c:	2800      	cmp	r0, #0
   1d20e:	d1f9      	bne.n	1d204 <z_nrf_clock_control_lf_on+0xc>
   1d210:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1d214:	b142      	cbz	r2, 1d228 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
   1d216:	b134      	cbz	r4, 1d226 <z_nrf_clock_control_lf_on+0x2e>
   1d218:	1e63      	subs	r3, r4, #1
   1d21a:	b2db      	uxtb	r3, r3
   1d21c:	2b01      	cmp	r3, #1
   1d21e:	d81d      	bhi.n	1d25c <z_nrf_clock_control_lf_on+0x64>
		lfclk_spinwait(start_mode);
   1d220:	4620      	mov	r0, r4
   1d222:	f7ff ff35 	bl	1d090 <lfclk_spinwait>
}
   1d226:	bd70      	pop	{r4, r5, r6, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1d228:	4813      	ldr	r0, [pc, #76]	; (1d278 <z_nrf_clock_control_lf_on+0x80>)
   1d22a:	f010 f8ed 	bl	2d408 <get_onoff_manager>
   1d22e:	4605      	mov	r5, r0
		sys_notify_init_spinwait(&cli.notify);
   1d230:	4e12      	ldr	r6, [pc, #72]	; (1d27c <z_nrf_clock_control_lf_on+0x84>)
   1d232:	4630      	mov	r0, r6
   1d234:	f7ff fe22 	bl	1ce7c <sys_notify_init_spinwait>
		err = onoff_request(mgr, &cli);
   1d238:	1f31      	subs	r1, r6, #4
   1d23a:	4628      	mov	r0, r5
   1d23c:	f7f4 f91a 	bl	11474 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1d240:	2800      	cmp	r0, #0
   1d242:	dae8      	bge.n	1d216 <z_nrf_clock_control_lf_on+0x1e>
   1d244:	4c0e      	ldr	r4, [pc, #56]	; (1d280 <z_nrf_clock_control_lf_on+0x88>)
   1d246:	f240 2221 	movw	r2, #545	; 0x221
   1d24a:	4621      	mov	r1, r4
   1d24c:	480d      	ldr	r0, [pc, #52]	; (1d284 <z_nrf_clock_control_lf_on+0x8c>)
   1d24e:	f00b fcde 	bl	28c0e <assert_print>
   1d252:	f240 2121 	movw	r1, #545	; 0x221
   1d256:	4620      	mov	r0, r4
   1d258:	f00b fcd2 	bl	28c00 <assert_post_action>
		__ASSERT_NO_MSG(false);
   1d25c:	4c08      	ldr	r4, [pc, #32]	; (1d280 <z_nrf_clock_control_lf_on+0x88>)
   1d25e:	f240 2233 	movw	r2, #563	; 0x233
   1d262:	4621      	mov	r1, r4
   1d264:	4807      	ldr	r0, [pc, #28]	; (1d284 <z_nrf_clock_control_lf_on+0x8c>)
   1d266:	f00b fcd2 	bl	28c0e <assert_print>
   1d26a:	f240 2133 	movw	r1, #563	; 0x233
   1d26e:	4620      	mov	r0, r4
   1d270:	f00b fcc6 	bl	28c00 <assert_post_action>
   1d274:	20002bac 	.word	0x20002bac
   1d278:	0002f6ec 	.word	0x0002f6ec
   1d27c:	20002ba0 	.word	0x20002ba0
   1d280:	00032d64 	.word	0x00032d64
   1d284:	00030128 	.word	0x00030128

0001d288 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1d288:	b510      	push	{r4, lr}
   1d28a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1d28c:	280a      	cmp	r0, #10
   1d28e:	d006      	beq.n	1d29e <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1d290:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
   1d292:	4806      	ldr	r0, [pc, #24]	; (1d2ac <console_out+0x24>)
   1d294:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1d296:	685b      	ldr	r3, [r3, #4]
   1d298:	4798      	blx	r3

	return c;
}
   1d29a:	4620      	mov	r0, r4
   1d29c:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
   1d29e:	4803      	ldr	r0, [pc, #12]	; (1d2ac <console_out+0x24>)
   1d2a0:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1d2a2:	685b      	ldr	r3, [r3, #4]
   1d2a4:	210d      	movs	r1, #13
   1d2a6:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   1d2a8:	e7f2      	b.n	1d290 <console_out+0x8>
   1d2aa:	bf00      	nop
   1d2ac:	0002f794 	.word	0x0002f794

0001d2b0 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   1d2b0:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1d2b2:	4c04      	ldr	r4, [pc, #16]	; (1d2c4 <uart_console_hook_install+0x14>)
   1d2b4:	4620      	mov	r0, r4
   1d2b6:	f7f6 fcad 	bl	13c14 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   1d2ba:	4620      	mov	r0, r4
   1d2bc:	f7f3 fd40 	bl	10d40 <__printk_hook_install>
#endif
}
   1d2c0:	bd10      	pop	{r4, pc}
   1d2c2:	bf00      	nop
   1d2c4:	0001d289 	.word	0x0001d289

0001d2c8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1d2c8:	b508      	push	{r3, lr}
   1d2ca:	4805      	ldr	r0, [pc, #20]	; (1d2e0 <uart_console_init+0x18>)
   1d2cc:	f011 fe94 	bl	2eff8 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1d2d0:	b118      	cbz	r0, 1d2da <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
   1d2d2:	f7ff ffed 	bl	1d2b0 <uart_console_hook_install>

	return 0;
   1d2d6:	2000      	movs	r0, #0
}
   1d2d8:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1d2da:	f06f 0012 	mvn.w	r0, #18
   1d2de:	e7fb      	b.n	1d2d8 <uart_console_init+0x10>
   1d2e0:	0002f794 	.word	0x0002f794

0001d2e4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d2e4:	b128      	cbz	r0, 1d2f2 <get_dev+0xe>
   1d2e6:	2801      	cmp	r0, #1
   1d2e8:	d101      	bne.n	1d2ee <get_dev+0xa>
   1d2ea:	4803      	ldr	r0, [pc, #12]	; (1d2f8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   1d2ec:	4770      	bx	lr
	const struct device *dev = NULL;
   1d2ee:	2000      	movs	r0, #0
   1d2f0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d2f2:	4802      	ldr	r0, [pc, #8]	; (1d2fc <get_dev+0x18>)
   1d2f4:	4770      	bx	lr
   1d2f6:	bf00      	nop
   1d2f8:	0002f704 	.word	0x0002f704
   1d2fc:	0002f71c 	.word	0x0002f71c

0001d300 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   1d300:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(callback, "No callback!");
   1d302:	b169      	cbz	r1, 1d320 <gpio_manage_callback+0x20>
   1d304:	4604      	mov	r4, r0
   1d306:	4616      	mov	r6, r2
   1d308:	460d      	mov	r5, r1
	__ASSERT(callback->handler, "No callback handler!");
   1d30a:	684b      	ldr	r3, [r1, #4]
   1d30c:	b193      	cbz	r3, 1d334 <gpio_manage_callback+0x34>
	return list->head;
   1d30e:	6803      	ldr	r3, [r0, #0]

	if (!sys_slist_is_empty(callbacks)) {
   1d310:	b1d3      	cbz	r3, 1d348 <gpio_manage_callback+0x48>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1d312:	f010 f95e 	bl	2d5d2 <sys_slist_find_and_remove>
   1d316:	bb10      	cbnz	r0, 1d35e <gpio_manage_callback+0x5e>
			if (!set) {
   1d318:	b9be      	cbnz	r6, 1d34a <gpio_manage_callback+0x4a>
				return -EINVAL;
   1d31a:	f06f 0015 	mvn.w	r0, #21
   1d31e:	e01a      	b.n	1d356 <gpio_manage_callback+0x56>
	__ASSERT(callback, "No callback!");
   1d320:	4c12      	ldr	r4, [pc, #72]	; (1d36c <gpio_manage_callback+0x6c>)
   1d322:	222a      	movs	r2, #42	; 0x2a
   1d324:	4621      	mov	r1, r4
   1d326:	4812      	ldr	r0, [pc, #72]	; (1d370 <gpio_manage_callback+0x70>)
   1d328:	f00b fc71 	bl	28c0e <assert_print>
   1d32c:	212a      	movs	r1, #42	; 0x2a
   1d32e:	4620      	mov	r0, r4
   1d330:	f00b fc66 	bl	28c00 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1d334:	4c0d      	ldr	r4, [pc, #52]	; (1d36c <gpio_manage_callback+0x6c>)
   1d336:	222b      	movs	r2, #43	; 0x2b
   1d338:	4621      	mov	r1, r4
   1d33a:	480d      	ldr	r0, [pc, #52]	; (1d370 <gpio_manage_callback+0x70>)
   1d33c:	f00b fc67 	bl	28c0e <assert_print>
   1d340:	212b      	movs	r1, #43	; 0x2b
   1d342:	4620      	mov	r0, r4
   1d344:	f00b fc5c 	bl	28c00 <assert_post_action>
			}
		}
	} else if (!set) {
   1d348:	b132      	cbz	r2, 1d358 <gpio_manage_callback+0x58>
   1d34a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   1d34c:	602b      	str	r3, [r5, #0]
	list->head = node;
   1d34e:	6025      	str	r5, [r4, #0]
	return list->tail;
   1d350:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d352:	b143      	cbz	r3, 1d366 <gpio_manage_callback+0x66>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d354:	2000      	movs	r0, #0
}
   1d356:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1d358:	f06f 0015 	mvn.w	r0, #21
   1d35c:	e7fb      	b.n	1d356 <gpio_manage_callback+0x56>
	if (set) {
   1d35e:	2e00      	cmp	r6, #0
   1d360:	d1f3      	bne.n	1d34a <gpio_manage_callback+0x4a>
	return 0;
   1d362:	2000      	movs	r0, #0
   1d364:	e7f7      	b.n	1d356 <gpio_manage_callback+0x56>
	list->tail = node;
   1d366:	6065      	str	r5, [r4, #4]
   1d368:	2000      	movs	r0, #0
}
   1d36a:	e7f4      	b.n	1d356 <gpio_manage_callback+0x56>
   1d36c:	00032e14 	.word	0x00032e14
   1d370:	00030128 	.word	0x00030128

0001d374 <nrf_gpio_pin_port_decode>:
 *                      that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   1d374:	b538      	push	{r3, r4, r5, lr}
   1d376:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d378:	6804      	ldr	r4, [r0, #0]
   1d37a:	4620      	mov	r0, r4
   1d37c:	f010 f904 	bl	2d588 <nrf_gpio_pin_present_check>
   1d380:	b140      	cbz	r0, 1d394 <nrf_gpio_pin_port_decode+0x20>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1d382:	f004 031f 	and.w	r3, r4, #31
   1d386:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d388:	0964      	lsrs	r4, r4, #5
   1d38a:	d01b      	beq.n	1d3c4 <nrf_gpio_pin_port_decode+0x50>
   1d38c:	2c01      	cmp	r4, #1
   1d38e:	d10d      	bne.n	1d3ac <nrf_gpio_pin_port_decode+0x38>
        case 1: return NRF_P1;
   1d390:	480e      	ldr	r0, [pc, #56]	; (1d3cc <nrf_gpio_pin_port_decode+0x58>)
}
   1d392:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d394:	4c0e      	ldr	r4, [pc, #56]	; (1d3d0 <nrf_gpio_pin_port_decode+0x5c>)
   1d396:	f240 2247 	movw	r2, #583	; 0x247
   1d39a:	4621      	mov	r1, r4
   1d39c:	480d      	ldr	r0, [pc, #52]	; (1d3d4 <nrf_gpio_pin_port_decode+0x60>)
   1d39e:	f00b fc36 	bl	28c0e <assert_print>
   1d3a2:	f240 2147 	movw	r1, #583	; 0x247
   1d3a6:	4620      	mov	r0, r4
   1d3a8:	f00b fc2a 	bl	28c00 <assert_post_action>
            NRFX_ASSERT(0);
   1d3ac:	4c08      	ldr	r4, [pc, #32]	; (1d3d0 <nrf_gpio_pin_port_decode+0x5c>)
   1d3ae:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1d3b2:	4621      	mov	r1, r4
   1d3b4:	4807      	ldr	r0, [pc, #28]	; (1d3d4 <nrf_gpio_pin_port_decode+0x60>)
   1d3b6:	f00b fc2a 	bl	28c0e <assert_print>
   1d3ba:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1d3be:	4620      	mov	r0, r4
   1d3c0:	f00b fc1e 	bl	28c00 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d3c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1d3c8:	e7e3      	b.n	1d392 <nrf_gpio_pin_port_decode+0x1e>
   1d3ca:	bf00      	nop
   1d3cc:	50000300 	.word	0x50000300
   1d3d0:	00032e50 	.word	0x00032e50
   1d3d4:	00030128 	.word	0x00030128

0001d3d8 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1d3d8:	b570      	push	{r4, r5, r6, lr}
   1d3da:	460e      	mov	r6, r1
   1d3dc:	4615      	mov	r5, r2
	return list->head;
   1d3de:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d3e0:	b121      	cbz	r1, 1d3ec <gpio_fire_callbacks+0x14>
	return node->next;
   1d3e2:	680c      	ldr	r4, [r1, #0]
   1d3e4:	b18c      	cbz	r4, 1d40a <gpio_fire_callbacks+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d3e6:	b981      	cbnz	r1, 1d40a <gpio_fire_callbacks+0x32>
   1d3e8:	460c      	mov	r4, r1
   1d3ea:	e00e      	b.n	1d40a <gpio_fire_callbacks+0x32>
   1d3ec:	460c      	mov	r4, r1
   1d3ee:	e00c      	b.n	1d40a <gpio_fire_callbacks+0x32>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   1d3f0:	4c0f      	ldr	r4, [pc, #60]	; (1d430 <gpio_fire_callbacks+0x58>)
   1d3f2:	224d      	movs	r2, #77	; 0x4d
   1d3f4:	4621      	mov	r1, r4
   1d3f6:	480f      	ldr	r0, [pc, #60]	; (1d434 <gpio_fire_callbacks+0x5c>)
   1d3f8:	f00b fc09 	bl	28c0e <assert_print>
   1d3fc:	214d      	movs	r1, #77	; 0x4d
   1d3fe:	4620      	mov	r0, r4
   1d400:	f00b fbfe 	bl	28c00 <assert_post_action>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d404:	4623      	mov	r3, r4
   1d406:	4621      	mov	r1, r4
   1d408:	461c      	mov	r4, r3
   1d40a:	b181      	cbz	r1, 1d42e <gpio_fire_callbacks+0x56>
		if (cb->pin_mask & pins) {
   1d40c:	688a      	ldr	r2, [r1, #8]
   1d40e:	402a      	ands	r2, r5
   1d410:	d004      	beq.n	1d41c <gpio_fire_callbacks+0x44>
			__ASSERT(cb->handler, "No callback handler!");
   1d412:	684b      	ldr	r3, [r1, #4]
   1d414:	2b00      	cmp	r3, #0
   1d416:	d0eb      	beq.n	1d3f0 <gpio_fire_callbacks+0x18>
			cb->handler(port, cb, cb->pin_mask & pins);
   1d418:	4630      	mov	r0, r6
   1d41a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d41c:	2c00      	cmp	r4, #0
   1d41e:	d0f1      	beq.n	1d404 <gpio_fire_callbacks+0x2c>
	return node->next;
   1d420:	6823      	ldr	r3, [r4, #0]
   1d422:	2b00      	cmp	r3, #0
   1d424:	d0ef      	beq.n	1d406 <gpio_fire_callbacks+0x2e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d426:	2c00      	cmp	r4, #0
   1d428:	d1ed      	bne.n	1d406 <gpio_fire_callbacks+0x2e>
   1d42a:	4623      	mov	r3, r4
   1d42c:	e7eb      	b.n	1d406 <gpio_fire_callbacks+0x2e>
		}
	}
}
   1d42e:	bd70      	pop	{r4, r5, r6, pc}
   1d430:	00032e14 	.word	0x00032e14
   1d434:	00030128 	.word	0x00030128

0001d438 <gpio_nrfx_pin_interrupt_configure>:
{
   1d438:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d43a:	b085      	sub	sp, #20
   1d43c:	460e      	mov	r6, r1
   1d43e:	4619      	mov	r1, r3
	return port->config;
   1d440:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d442:	7b1b      	ldrb	r3, [r3, #12]
   1d444:	f006 051f 	and.w	r5, r6, #31
   1d448:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d44c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   1d450:	d022      	beq.n	1d498 <gpio_nrfx_pin_interrupt_configure+0x60>
   1d452:	4607      	mov	r7, r0
   1d454:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d456:	2300      	movs	r3, #0
   1d458:	9301      	str	r3, [sp, #4]
   1d45a:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   1d45c:	4610      	mov	r0, r2
   1d45e:	f010 f943 	bl	2d6e8 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d462:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   1d466:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1d468:	6899      	ldr	r1, [r3, #8]
   1d46a:	40f1      	lsrs	r1, r6
   1d46c:	f011 0f01 	tst.w	r1, #1
   1d470:	d102      	bne.n	1d478 <gpio_nrfx_pin_interrupt_configure+0x40>
   1d472:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   1d476:	d014      	beq.n	1d4a2 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d478:	2300      	movs	r3, #0
   1d47a:	aa01      	add	r2, sp, #4
   1d47c:	4619      	mov	r1, r3
   1d47e:	4628      	mov	r0, r5
   1d480:	f003 faca 	bl	20a18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d484:	4b16      	ldr	r3, [pc, #88]	; (1d4e0 <gpio_nrfx_pin_interrupt_configure+0xa8>)
   1d486:	4298      	cmp	r0, r3
   1d488:	d126      	bne.n	1d4d8 <gpio_nrfx_pin_interrupt_configure+0xa0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1d48a:	2101      	movs	r1, #1
   1d48c:	4628      	mov	r0, r5
   1d48e:	f003 fc33 	bl	20cf8 <nrfx_gpiote_trigger_enable>
	return 0;
   1d492:	2000      	movs	r0, #0
}
   1d494:	b005      	add	sp, #20
   1d496:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   1d498:	4628      	mov	r0, r5
   1d49a:	f003 fc7f 	bl	20d9c <nrfx_gpiote_trigger_disable>
		return 0;
   1d49e:	2000      	movs	r0, #0
   1d4a0:	e7f8      	b.n	1d494 <gpio_nrfx_pin_interrupt_configure+0x5c>
	    (nrf_gpio_pin_dir_get(abs_pin) == NRF_GPIO_PIN_DIR_INPUT)) {
   1d4a2:	4628      	mov	r0, r5
   1d4a4:	f010 f93c 	bl	2d720 <nrf_gpio_pin_dir_get>
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d4a8:	2800      	cmp	r0, #0
   1d4aa:	d1e5      	bne.n	1d478 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d4ac:	f10d 010f 	add.w	r1, sp, #15
   1d4b0:	4628      	mov	r0, r5
   1d4b2:	f003 fbb5 	bl	20c20 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1d4b6:	4b0b      	ldr	r3, [pc, #44]	; (1d4e4 <gpio_nrfx_pin_interrupt_configure+0xac>)
   1d4b8:	4298      	cmp	r0, r3
   1d4ba:	d003      	beq.n	1d4c4 <gpio_nrfx_pin_interrupt_configure+0x8c>
		trigger_config.p_in_channel = &ch;
   1d4bc:	f10d 030f 	add.w	r3, sp, #15
   1d4c0:	9302      	str	r3, [sp, #8]
   1d4c2:	e7d9      	b.n	1d478 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   1d4c4:	f10d 000f 	add.w	r0, sp, #15
   1d4c8:	f003 fc0e 	bl	20ce8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1d4cc:	4b04      	ldr	r3, [pc, #16]	; (1d4e0 <gpio_nrfx_pin_interrupt_configure+0xa8>)
   1d4ce:	4298      	cmp	r0, r3
   1d4d0:	d0f4      	beq.n	1d4bc <gpio_nrfx_pin_interrupt_configure+0x84>
				return -ENOMEM;
   1d4d2:	f06f 000b 	mvn.w	r0, #11
   1d4d6:	e7dd      	b.n	1d494 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   1d4d8:	f06f 0015 	mvn.w	r0, #21
   1d4dc:	e7da      	b.n	1d494 <gpio_nrfx_pin_interrupt_configure+0x5c>
   1d4de:	bf00      	nop
   1d4e0:	0bad0000 	.word	0x0bad0000
   1d4e4:	0bad0004 	.word	0x0bad0004

0001d4e8 <gpio_nrfx_pin_configure>:
{
   1d4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d4ec:	b086      	sub	sp, #24
   1d4ee:	460e      	mov	r6, r1
   1d4f0:	4614      	mov	r4, r2
	return port->config;
   1d4f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d4f6:	f898 300c 	ldrb.w	r3, [r8, #12]
   1d4fa:	f001 051f 	and.w	r5, r1, #31
   1d4fe:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d502:	f10d 0117 	add.w	r1, sp, #23
   1d506:	4628      	mov	r0, r5
   1d508:	f003 fb8a 	bl	20c20 <nrfx_gpiote_channel_get>
   1d50c:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1d50e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   1d512:	d11b      	bne.n	1d54c <gpio_nrfx_pin_configure+0x64>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1d514:	4628      	mov	r0, r5
   1d516:	f003 fc63 	bl	20de0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1d51a:	4b43      	ldr	r3, [pc, #268]	; (1d628 <gpio_nrfx_pin_configure+0x140>)
   1d51c:	429f      	cmp	r7, r3
   1d51e:	d004      	beq.n	1d52a <gpio_nrfx_pin_configure+0x42>
		return 0;
   1d520:	2700      	movs	r7, #0
}
   1d522:	4638      	mov	r0, r7
   1d524:	b006      	add	sp, #24
   1d526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   1d52a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1d52e:	f003 fbd3 	bl	20cd8 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1d532:	4b3d      	ldr	r3, [pc, #244]	; (1d628 <gpio_nrfx_pin_configure+0x140>)
   1d534:	4298      	cmp	r0, r3
   1d536:	d0f3      	beq.n	1d520 <gpio_nrfx_pin_configure+0x38>
   1d538:	4c3c      	ldr	r4, [pc, #240]	; (1d62c <gpio_nrfx_pin_configure+0x144>)
   1d53a:	226a      	movs	r2, #106	; 0x6a
   1d53c:	4621      	mov	r1, r4
   1d53e:	483c      	ldr	r0, [pc, #240]	; (1d630 <gpio_nrfx_pin_configure+0x148>)
   1d540:	f00b fb65 	bl	28c0e <assert_print>
   1d544:	216a      	movs	r1, #106	; 0x6a
   1d546:	4620      	mov	r0, r4
   1d548:	f00b fb5a 	bl	28c00 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d54c:	2100      	movs	r1, #0
   1d54e:	9103      	str	r1, [sp, #12]
   1d550:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d552:	460b      	mov	r3, r1
   1d554:	aa03      	add	r2, sp, #12
   1d556:	4628      	mov	r0, r5
   1d558:	f003 fa5e 	bl	20a18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d55c:	4b32      	ldr	r3, [pc, #200]	; (1d628 <gpio_nrfx_pin_configure+0x140>)
   1d55e:	4298      	cmp	r0, r3
   1d560:	d15e      	bne.n	1d620 <gpio_nrfx_pin_configure+0x138>
	if (free_ch) {
   1d562:	429f      	cmp	r7, r3
   1d564:	d02e      	beq.n	1d5c4 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_OUTPUT) {
   1d566:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   1d56a:	d046      	beq.n	1d5fa <gpio_nrfx_pin_configure+0x112>
		int rv = get_drive(flags, &drive);
   1d56c:	f10d 0103 	add.w	r1, sp, #3
   1d570:	4620      	mov	r0, r4
   1d572:	f010 f83e 	bl	2d5f2 <get_drive>
		if (rv != 0) {
   1d576:	4607      	mov	r7, r0
   1d578:	2800      	cmp	r0, #0
   1d57a:	d1d2      	bne.n	1d522 <gpio_nrfx_pin_configure+0x3a>
		nrfx_gpiote_output_config_t output_config = {
   1d57c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1d580:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1d584:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   1d588:	bf0c      	ite	eq
   1d58a:	2301      	moveq	r3, #1
   1d58c:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   1d58e:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   1d592:	4620      	mov	r0, r4
   1d594:	f010 f870 	bl	2d678 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   1d598:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d59c:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   1d5a0:	d021      	beq.n	1d5e6 <gpio_nrfx_pin_configure+0xfe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1d5a2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1d5a6:	2301      	movs	r3, #1
   1d5a8:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1d5aa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1d5ae:	2200      	movs	r2, #0
   1d5b0:	a901      	add	r1, sp, #4
   1d5b2:	4628      	mov	r0, r5
   1d5b4:	f003 fac4 	bl	20b40 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d5b8:	4b1b      	ldr	r3, [pc, #108]	; (1d628 <gpio_nrfx_pin_configure+0x140>)
   1d5ba:	4298      	cmp	r0, r3
   1d5bc:	d0b1      	beq.n	1d522 <gpio_nrfx_pin_configure+0x3a>
   1d5be:	f06f 0715 	mvn.w	r7, #21
   1d5c2:	e7ae      	b.n	1d522 <gpio_nrfx_pin_configure+0x3a>
		err = nrfx_gpiote_channel_free(ch);
   1d5c4:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1d5c8:	f003 fb86 	bl	20cd8 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1d5cc:	4b16      	ldr	r3, [pc, #88]	; (1d628 <gpio_nrfx_pin_configure+0x140>)
   1d5ce:	4298      	cmp	r0, r3
   1d5d0:	d0c9      	beq.n	1d566 <gpio_nrfx_pin_configure+0x7e>
   1d5d2:	4c16      	ldr	r4, [pc, #88]	; (1d62c <gpio_nrfx_pin_configure+0x144>)
   1d5d4:	227c      	movs	r2, #124	; 0x7c
   1d5d6:	4621      	mov	r1, r4
   1d5d8:	4815      	ldr	r0, [pc, #84]	; (1d630 <gpio_nrfx_pin_configure+0x148>)
   1d5da:	f00b fb18 	bl	28c0e <assert_print>
   1d5de:	217c      	movs	r1, #124	; 0x7c
   1d5e0:	4620      	mov	r0, r4
   1d5e2:	f00b fb0d 	bl	28c00 <assert_post_action>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1d5e6:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   1d5ea:	d0e0      	beq.n	1d5ae <gpio_nrfx_pin_configure+0xc6>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1d5ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1d5f0:	2301      	movs	r3, #1
   1d5f2:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   1d5f4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1d5f8:	e7d9      	b.n	1d5ae <gpio_nrfx_pin_configure+0xc6>
		.pull = get_pull(flags)
   1d5fa:	4620      	mov	r0, r4
   1d5fc:	f010 f83c 	bl	2d678 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1d600:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d604:	2300      	movs	r3, #0
   1d606:	461a      	mov	r2, r3
   1d608:	a902      	add	r1, sp, #8
   1d60a:	4628      	mov	r0, r5
   1d60c:	f003 fa04 	bl	20a18 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d610:	4b05      	ldr	r3, [pc, #20]	; (1d628 <gpio_nrfx_pin_configure+0x140>)
   1d612:	4298      	cmp	r0, r3
   1d614:	d101      	bne.n	1d61a <gpio_nrfx_pin_configure+0x132>
   1d616:	2700      	movs	r7, #0
   1d618:	e783      	b.n	1d522 <gpio_nrfx_pin_configure+0x3a>
   1d61a:	f06f 0715 	mvn.w	r7, #21
   1d61e:	e780      	b.n	1d522 <gpio_nrfx_pin_configure+0x3a>
		return -EINVAL;
   1d620:	f06f 0715 	mvn.w	r7, #21
   1d624:	e77d      	b.n	1d522 <gpio_nrfx_pin_configure+0x3a>
   1d626:	bf00      	nop
   1d628:	0bad0000 	.word	0x0bad0000
   1d62c:	00032e84 	.word	0x00032e84
   1d630:	00030128 	.word	0x00030128

0001d634 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d634:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1d636:	f003 fb45 	bl	20cc4 <nrfx_gpiote_is_init>
   1d63a:	b108      	cbz	r0, 1d640 <gpio_nrfx_init+0xc>
		return 0;
   1d63c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1d63e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   1d640:	f003 fb16 	bl	20c70 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1d644:	4b08      	ldr	r3, [pc, #32]	; (1d668 <gpio_nrfx_init+0x34>)
   1d646:	4298      	cmp	r0, r3
   1d648:	d10a      	bne.n	1d660 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1d64a:	2100      	movs	r1, #0
   1d64c:	4807      	ldr	r0, [pc, #28]	; (1d66c <gpio_nrfx_init+0x38>)
   1d64e:	f003 fae1 	bl	20c14 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d652:	2200      	movs	r2, #0
   1d654:	2105      	movs	r1, #5
   1d656:	2006      	movs	r0, #6
   1d658:	f7f5 fd3e 	bl	130d8 <z_arm_irq_priority_set>
	return 0;
   1d65c:	2000      	movs	r0, #0
   1d65e:	e7ee      	b.n	1d63e <gpio_nrfx_init+0xa>
		return -EIO;
   1d660:	f06f 0004 	mvn.w	r0, #4
   1d664:	e7eb      	b.n	1d63e <gpio_nrfx_init+0xa>
   1d666:	bf00      	nop
   1d668:	0bad0000 	.word	0x0bad0000
   1d66c:	0002d741 	.word	0x0002d741

0001d670 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1d670:	4b02      	ldr	r3, [pc, #8]	; (1d67c <qspi_nor_pages_layout+0xc>)
   1d672:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1d674:	2301      	movs	r3, #1
   1d676:	6013      	str	r3, [r2, #0]
}
   1d678:	4770      	bx	lr
   1d67a:	bf00      	nop
   1d67c:	000331bc 	.word	0x000331bc

0001d680 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1d680:	4800      	ldr	r0, [pc, #0]	; (1d684 <qspi_flash_get_parameters+0x4>)
   1d682:	4770      	bx	lr
   1d684:	00033134 	.word	0x00033134

0001d688 <qspi_device_init>:
{
   1d688:	b538      	push	{r3, r4, r5, lr}
   1d68a:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
   1d68c:	6905      	ldr	r5, [r0, #16]
	qspi_lock(dev);
   1d68e:	f010 f890 	bl	2d7b2 <qspi_lock>
	k_sem_give(&dev_data->count);
   1d692:	f105 0048 	add.w	r0, r5, #72	; 0x48
	z_impl_k_sem_give(sem);
   1d696:	f005 f849 	bl	2272c <z_impl_k_sem_give>
	if (!qspi_initialized) {
   1d69a:	4b0c      	ldr	r3, [pc, #48]	; (1d6cc <qspi_device_init+0x44>)
   1d69c:	781b      	ldrb	r3, [r3, #0]
   1d69e:	b133      	cbz	r3, 1d6ae <qspi_device_init+0x26>
	int ret = 0;
   1d6a0:	2500      	movs	r5, #0
	struct qspi_nor_data *dev_data = dev->data;
   1d6a2:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   1d6a4:	3018      	adds	r0, #24
   1d6a6:	f005 f841 	bl	2272c <z_impl_k_sem_give>
}
   1d6aa:	4628      	mov	r0, r5
   1d6ac:	bd38      	pop	{r3, r4, r5, pc}
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1d6ae:	462a      	mov	r2, r5
   1d6b0:	4907      	ldr	r1, [pc, #28]	; (1d6d0 <qspi_device_init+0x48>)
   1d6b2:	6860      	ldr	r0, [r4, #4]
   1d6b4:	f003 fe44 	bl	21340 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1d6b8:	f010 f851 	bl	2d75e <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1d6bc:	4605      	mov	r5, r0
   1d6be:	fab0 f080 	clz	r0, r0
   1d6c2:	0940      	lsrs	r0, r0, #5
   1d6c4:	4b01      	ldr	r3, [pc, #4]	; (1d6cc <qspi_device_init+0x44>)
   1d6c6:	7018      	strb	r0, [r3, #0]
   1d6c8:	e7eb      	b.n	1d6a2 <qspi_device_init+0x1a>
   1d6ca:	bf00      	nop
   1d6cc:	200045f5 	.word	0x200045f5
   1d6d0:	0002d791 	.word	0x0002d791

0001d6d4 <qspi_wait_for_completion>:
{
   1d6d4:	b508      	push	{r3, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1d6d6:	6900      	ldr	r0, [r0, #16]
	if (res == NRFX_SUCCESS) {
   1d6d8:	4b05      	ldr	r3, [pc, #20]	; (1d6f0 <qspi_wait_for_completion+0x1c>)
   1d6da:	4299      	cmp	r1, r3
   1d6dc:	d000      	beq.n	1d6e0 <qspi_wait_for_completion+0xc>
}
   1d6de:	bd08      	pop	{r3, pc}
		k_sem_take(&dev_data->sync, K_FOREVER);
   1d6e0:	3030      	adds	r0, #48	; 0x30
	return z_impl_k_sem_take(sem, timeout);
   1d6e2:	f04f 32ff 	mov.w	r2, #4294967295
   1d6e6:	f04f 33ff 	mov.w	r3, #4294967295
   1d6ea:	f005 f85d 	bl	227a8 <z_impl_k_sem_take>
}
   1d6ee:	e7f6      	b.n	1d6de <qspi_wait_for_completion+0xa>
   1d6f0:	0bad0000 	.word	0x0bad0000

0001d6f4 <qspi_send_cmd>:
	if (!cmd) {
   1d6f4:	2900      	cmp	r1, #0
   1d6f6:	d043      	beq.n	1d780 <qspi_send_cmd+0x8c>
{
   1d6f8:	b570      	push	{r4, r5, r6, lr}
   1d6fa:	b082      	sub	sp, #8
   1d6fc:	4604      	mov	r4, r0
   1d6fe:	4608      	mov	r0, r1
	if (cmd->tx_buf) {
   1d700:	684b      	ldr	r3, [r1, #4]
   1d702:	b15b      	cbz	r3, 1d71c <qspi_send_cmd+0x28>
		tx_buf = cmd->tx_buf->buf;
   1d704:	681d      	ldr	r5, [r3, #0]
		tx_len = cmd->tx_buf->len;
   1d706:	6859      	ldr	r1, [r3, #4]
	if (cmd->rx_buf) {
   1d708:	6883      	ldr	r3, [r0, #8]
   1d70a:	b153      	cbz	r3, 1d722 <qspi_send_cmd+0x2e>
		rx_buf = cmd->rx_buf->buf;
   1d70c:	681e      	ldr	r6, [r3, #0]
		rx_len = cmd->rx_buf->len;
   1d70e:	685b      	ldr	r3, [r3, #4]
	if ((rx_len != 0) && (tx_len != 0)) {
   1d710:	b14b      	cbz	r3, 1d726 <qspi_send_cmd+0x32>
   1d712:	b141      	cbz	r1, 1d726 <qspi_send_cmd+0x32>
		if (rx_len != tx_len) {
   1d714:	428b      	cmp	r3, r1
   1d716:	d136      	bne.n	1d786 <qspi_send_cmd+0x92>
		xfer_len += tx_len;
   1d718:	1c4b      	adds	r3, r1, #1
   1d71a:	e006      	b.n	1d72a <qspi_send_cmd+0x36>
	const void *tx_buf = NULL;
   1d71c:	461d      	mov	r5, r3
	size_t tx_len = 0;
   1d71e:	2100      	movs	r1, #0
   1d720:	e7f2      	b.n	1d708 <qspi_send_cmd+0x14>
	void *rx_buf = NULL;
   1d722:	461e      	mov	r6, r3
	size_t rx_len = 0;
   1d724:	2300      	movs	r3, #0
		xfer_len += tx_len + rx_len;
   1d726:	440b      	add	r3, r1
   1d728:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1d72a:	2b09      	cmp	r3, #9
   1d72c:	d820      	bhi.n	1d770 <qspi_send_cmd+0x7c>
		.opcode = cmd->op_code,
   1d72e:	7801      	ldrb	r1, [r0, #0]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1d730:	f88d 1000 	strb.w	r1, [sp]
   1d734:	f88d 3001 	strb.w	r3, [sp, #1]
   1d738:	2301      	movs	r3, #1
   1d73a:	f88d 3002 	strb.w	r3, [sp, #2]
   1d73e:	f88d 3003 	strb.w	r3, [sp, #3]
   1d742:	2300      	movs	r3, #0
   1d744:	f88d 3004 	strb.w	r3, [sp, #4]
   1d748:	f88d 2005 	strb.w	r2, [sp, #5]
	qspi_lock(dev);
   1d74c:	4620      	mov	r0, r4
   1d74e:	f010 f830 	bl	2d7b2 <qspi_lock>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1d752:	4632      	mov	r2, r6
   1d754:	4629      	mov	r1, r5
   1d756:	4668      	mov	r0, sp
   1d758:	f003 fe48 	bl	213ec <nrfx_qspi_cinstr_xfer>
   1d75c:	4605      	mov	r5, r0
	struct qspi_nor_data *dev_data = dev->data;
   1d75e:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   1d760:	3018      	adds	r0, #24
	z_impl_k_sem_give(sem);
   1d762:	f004 ffe3 	bl	2272c <z_impl_k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1d766:	4628      	mov	r0, r5
   1d768:	f00f fff9 	bl	2d75e <qspi_get_zephyr_ret_code>
}
   1d76c:	b002      	add	sp, #8
   1d76e:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1d770:	7802      	ldrb	r2, [r0, #0]
   1d772:	2157      	movs	r1, #87	; 0x57
   1d774:	4805      	ldr	r0, [pc, #20]	; (1d78c <qspi_send_cmd+0x98>)
   1d776:	f00b fa6a 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1d77a:	f06f 0015 	mvn.w	r0, #21
   1d77e:	e7f5      	b.n	1d76c <qspi_send_cmd+0x78>
		return -EINVAL;
   1d780:	f06f 0015 	mvn.w	r0, #21
}
   1d784:	4770      	bx	lr
			return -EINVAL;
   1d786:	f06f 0015 	mvn.w	r0, #21
   1d78a:	e7ef      	b.n	1d76c <qspi_send_cmd+0x78>
   1d78c:	00032f14 	.word	0x00032f14

0001d790 <qspi_wrsr>:
{
   1d790:	b510      	push	{r4, lr}
   1d792:	b086      	sub	sp, #24
	uint8_t sr_array[2] = {0};
   1d794:	2300      	movs	r3, #0
   1d796:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (sr_num > 2 || sr_num == 0) {
   1d79a:	1e53      	subs	r3, r2, #1
   1d79c:	b2db      	uxtb	r3, r3
   1d79e:	2b01      	cmp	r3, #1
   1d7a0:	d820      	bhi.n	1d7e4 <qspi_wrsr+0x54>
   1d7a2:	4604      	mov	r4, r0
	if (sr_num == 1) {
   1d7a4:	2a01      	cmp	r2, #1
   1d7a6:	d112      	bne.n	1d7ce <qspi_wrsr+0x3e>
		sr_array[0] = sr_val;
   1d7a8:	f88d 1014 	strb.w	r1, [sp, #20]
	const struct qspi_buf sr_buf = {
   1d7ac:	ab05      	add	r3, sp, #20
   1d7ae:	9303      	str	r3, [sp, #12]
   1d7b0:	9204      	str	r2, [sp, #16]
	struct qspi_cmd cmd = {
   1d7b2:	2300      	movs	r3, #0
   1d7b4:	9300      	str	r3, [sp, #0]
   1d7b6:	9301      	str	r3, [sp, #4]
   1d7b8:	9302      	str	r3, [sp, #8]
   1d7ba:	f88d 2000 	strb.w	r2, [sp]
   1d7be:	ab03      	add	r3, sp, #12
   1d7c0:	9301      	str	r3, [sp, #4]
	ret = qspi_send_cmd(dev, &cmd, true);
   1d7c2:	4669      	mov	r1, sp
   1d7c4:	f7ff ff96 	bl	1d6f4 <qspi_send_cmd>
	if (ret == 0) {
   1d7c8:	b140      	cbz	r0, 1d7dc <qspi_wrsr+0x4c>
}
   1d7ca:	b006      	add	sp, #24
   1d7cc:	bd10      	pop	{r4, pc}
		LOG_ERR("Attempted to write status register 2, but no known method to write sr2");
   1d7ce:	2145      	movs	r1, #69	; 0x45
   1d7d0:	4806      	ldr	r0, [pc, #24]	; (1d7ec <qspi_wrsr+0x5c>)
   1d7d2:	f00b fa3c 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1d7d6:	f06f 0015 	mvn.w	r0, #21
   1d7da:	e7f6      	b.n	1d7ca <qspi_wrsr+0x3a>
		ret = qspi_wait_while_writing(dev);
   1d7dc:	4620      	mov	r0, r4
   1d7de:	f010 f831 	bl	2d844 <qspi_wait_while_writing>
   1d7e2:	e7f2      	b.n	1d7ca <qspi_wrsr+0x3a>
		return -EINVAL;
   1d7e4:	f06f 0015 	mvn.w	r0, #21
   1d7e8:	e7ef      	b.n	1d7ca <qspi_wrsr+0x3a>
   1d7ea:	bf00      	nop
   1d7ec:	00032f3c 	.word	0x00032f3c

0001d7f0 <qspi_nrfx_configure>:
{
   1d7f0:	b570      	push	{r4, r5, r6, lr}
   1d7f2:	4605      	mov	r5, r0
	const struct qspi_nor_config *dev_config = dev->config;
   1d7f4:	6846      	ldr	r6, [r0, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1d7f6:	6902      	ldr	r2, [r0, #16]
   1d7f8:	491f      	ldr	r1, [pc, #124]	; (1d878 <qspi_nrfx_configure+0x88>)
   1d7fa:	4630      	mov	r0, r6
   1d7fc:	f003 fda0 	bl	21340 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1d800:	f00f ffad 	bl	2d75e <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1d804:	1e04      	subs	r4, r0, #0
   1d806:	db1b      	blt.n	1d840 <qspi_nrfx_configure+0x50>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1d808:	7af3      	ldrb	r3, [r6, #11]
   1d80a:	3b02      	subs	r3, #2
   1d80c:	b2db      	uxtb	r3, r3
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1d80e:	2b01      	cmp	r3, #1
   1d810:	d908      	bls.n	1d824 <qspi_nrfx_configure+0x34>
   1d812:	7ab3      	ldrb	r3, [r6, #10]
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1d814:	2b04      	cmp	r3, #4
   1d816:	d015      	beq.n	1d844 <qspi_nrfx_configure+0x54>
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1d818:	2b03      	cmp	r3, #3
   1d81a:	d001      	beq.n	1d820 <qspi_nrfx_configure+0x30>
   1d81c:	2300      	movs	r3, #0
   1d81e:	e002      	b.n	1d826 <qspi_nrfx_configure+0x36>
   1d820:	2301      	movs	r3, #1
   1d822:	e000      	b.n	1d826 <qspi_nrfx_configure+0x36>
   1d824:	2301      	movs	r3, #1
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1d826:	461e      	mov	r6, r3
		ret = qspi_rdsr(dev, sr_num);
   1d828:	2101      	movs	r1, #1
   1d82a:	4628      	mov	r0, r5
   1d82c:	f00f ffe2 	bl	2d7f4 <qspi_rdsr>
		if (ret < 0) {
   1d830:	1e04      	subs	r4, r0, #0
   1d832:	db09      	blt.n	1d848 <qspi_nrfx_configure+0x58>
		uint8_t sr = (uint8_t)ret;
   1d834:	b2e1      	uxtb	r1, r4
		bool qe_state = ((sr & qe_mask) != 0U);
   1d836:	f3c4 1480 	ubfx	r4, r4, #6, #1
		if (qe_state != qe_value) {
   1d83a:	42b4      	cmp	r4, r6
   1d83c:	d10a      	bne.n	1d854 <qspi_nrfx_configure+0x64>
		ret = 0;
   1d83e:	2400      	movs	r4, #0
}
   1d840:	4620      	mov	r0, r4
   1d842:	bd70      	pop	{r4, r5, r6, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1d844:	2301      	movs	r3, #1
   1d846:	e7ee      	b.n	1d826 <qspi_nrfx_configure+0x36>
			LOG_ERR("RDSR failed: %d", ret);
   1d848:	4622      	mov	r2, r4
   1d84a:	2145      	movs	r1, #69	; 0x45
   1d84c:	480b      	ldr	r0, [pc, #44]	; (1d87c <qspi_nrfx_configure+0x8c>)
   1d84e:	f00b f9fe 	bl	28c4e <z_log_minimal_printk>
			return ret;
   1d852:	e7f5      	b.n	1d840 <qspi_nrfx_configure+0x50>
			ret = qspi_wrsr(dev, sr, sr_num);
   1d854:	2201      	movs	r2, #1
   1d856:	f081 0140 	eor.w	r1, r1, #64	; 0x40
   1d85a:	4628      	mov	r0, r5
   1d85c:	f7ff ff98 	bl	1d790 <qspi_wrsr>
		if (ret < 0) {
   1d860:	1e04      	subs	r4, r0, #0
   1d862:	daed      	bge.n	1d840 <qspi_nrfx_configure+0x50>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1d864:	b136      	cbz	r6, 1d874 <qspi_nrfx_configure+0x84>
   1d866:	4a06      	ldr	r2, [pc, #24]	; (1d880 <qspi_nrfx_configure+0x90>)
   1d868:	4623      	mov	r3, r4
   1d86a:	2145      	movs	r1, #69	; 0x45
   1d86c:	4805      	ldr	r0, [pc, #20]	; (1d884 <qspi_nrfx_configure+0x94>)
   1d86e:	f00b f9ee 	bl	28c4e <z_log_minimal_printk>
			return ret;
   1d872:	e7e5      	b.n	1d840 <qspi_nrfx_configure+0x50>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1d874:	4a04      	ldr	r2, [pc, #16]	; (1d888 <qspi_nrfx_configure+0x98>)
   1d876:	e7f7      	b.n	1d868 <qspi_nrfx_configure+0x78>
   1d878:	0002d791 	.word	0x0002d791
   1d87c:	00032f94 	.word	0x00032f94
   1d880:	00032f88 	.word	0x00032f88
   1d884:	00032fac 	.word	0x00032fac
   1d888:	00032f8c 	.word	0x00032f8c

0001d88c <qspi_device_uninit>:
{
   1d88c:	b538      	push	{r3, r4, r5, lr}
   1d88e:	4604      	mov	r4, r0
	qspi_lock(dev);
   1d890:	f00f ff8f 	bl	2d7b2 <qspi_lock>
	struct qspi_nor_data *dev_data = dev->data;
   1d894:	6925      	ldr	r5, [r4, #16]
	(void) k_sem_take(&dev_data->count, K_NO_WAIT);
   1d896:	f105 0048 	add.w	r0, r5, #72	; 0x48
	return z_impl_k_sem_take(sem, timeout);
   1d89a:	2200      	movs	r2, #0
   1d89c:	2300      	movs	r3, #0
   1d89e:	f004 ff83 	bl	227a8 <z_impl_k_sem_take>
	return sem->count;
   1d8a2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
	if (last) {
   1d8a4:	b13b      	cbz	r3, 1d8b6 <qspi_device_uninit+0x2a>
	struct qspi_nor_data *dev_data = dev->data;
   1d8a6:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   1d8a8:	3018      	adds	r0, #24
	z_impl_k_sem_give(sem);
   1d8aa:	f004 ff3f 	bl	2272c <z_impl_k_sem_give>
}
   1d8ae:	bd38      	pop	{r3, r4, r5, pc}
				k_msleep(50);
   1d8b0:	2032      	movs	r0, #50	; 0x32
   1d8b2:	f00f ffd5 	bl	2d860 <k_msleep>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1d8b6:	f003 fdf1 	bl	2149c <nrfx_qspi_mem_busy_check>
   1d8ba:	4b04      	ldr	r3, [pc, #16]	; (1d8cc <qspi_device_uninit+0x40>)
   1d8bc:	4298      	cmp	r0, r3
   1d8be:	d1f7      	bne.n	1d8b0 <qspi_device_uninit+0x24>
		nrfx_qspi_uninit();
   1d8c0:	f003 fe14 	bl	214ec <nrfx_qspi_uninit>
		qspi_initialized = false;
   1d8c4:	4b02      	ldr	r3, [pc, #8]	; (1d8d0 <qspi_device_uninit+0x44>)
   1d8c6:	2200      	movs	r2, #0
   1d8c8:	701a      	strb	r2, [r3, #0]
   1d8ca:	e7ec      	b.n	1d8a6 <qspi_device_uninit+0x1a>
   1d8cc:	0bad0000 	.word	0x0bad0000
   1d8d0:	200045f5 	.word	0x200045f5

0001d8d4 <qspi_erase>:
{
   1d8d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1d8d8:	f3c1 030b 	ubfx	r3, r1, #0, #12
   1d8dc:	2b00      	cmp	r3, #0
   1d8de:	d175      	bne.n	1d9cc <qspi_erase+0xf8>
   1d8e0:	4606      	mov	r6, r0
   1d8e2:	460d      	mov	r5, r1
   1d8e4:	4614      	mov	r4, r2
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1d8e6:	2a00      	cmp	r2, #0
   1d8e8:	d073      	beq.n	1d9d2 <qspi_erase+0xfe>
   1d8ea:	f3c2 0a0b 	ubfx	sl, r2, #0, #12
   1d8ee:	f1ba 0f00 	cmp.w	sl, #0
   1d8f2:	d171      	bne.n	1d9d8 <qspi_erase+0x104>
	const struct qspi_nor_config *params = dev->config;
   1d8f4:	f8d0 b004 	ldr.w	fp, [r0, #4]
	rv = qspi_device_init(dev);
   1d8f8:	f7ff fec6 	bl	1d688 <qspi_device_init>
	if (rv != 0) {
   1d8fc:	4681      	mov	r9, r0
   1d8fe:	b128      	cbz	r0, 1d90c <qspi_erase+0x38>
	qspi_device_uninit(dev);
   1d900:	4630      	mov	r0, r6
   1d902:	f7ff ffc3 	bl	1d88c <qspi_device_uninit>
}
   1d906:	4648      	mov	r0, r9
   1d908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	qspi_trans_lock(dev);
   1d90c:	4630      	mov	r0, r6
   1d90e:	f00f ff47 	bl	2d7a0 <qspi_trans_lock>
	rv = qspi_nor_write_protection_set(dev, false);
   1d912:	2100      	movs	r1, #0
   1d914:	4630      	mov	r0, r6
   1d916:	f00f ff56 	bl	2d7c6 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1d91a:	4681      	mov	r9, r0
   1d91c:	b118      	cbz	r0, 1d926 <qspi_erase+0x52>
	struct qspi_nor_data *dev_data = dev->data;
   1d91e:	6930      	ldr	r0, [r6, #16]
   1d920:	f004 ff04 	bl	2272c <z_impl_k_sem_give>
}
   1d924:	e7ec      	b.n	1d900 <qspi_erase+0x2c>
	qspi_lock(dev);
   1d926:	4630      	mov	r0, r6
   1d928:	f00f ff43 	bl	2d7b2 <qspi_lock>
	while (size > 0) {
   1d92c:	e01c      	b.n	1d968 <qspi_erase+0x94>
			res = nrfx_qspi_chip_erase();
   1d92e:	f011 fb54 	bl	2efda <nrfx_qspi_chip_erase>
   1d932:	4607      	mov	r7, r0
			adj = size;
   1d934:	46a0      	mov	r8, r4
   1d936:	e00d      	b.n	1d954 <qspi_erase+0x80>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1d938:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1d93c:	d302      	bcc.n	1d944 <qspi_erase+0x70>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1d93e:	f3c5 030b 	ubfx	r3, r5, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1d942:	b323      	cbz	r3, 1d98e <qspi_erase+0xba>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1d944:	4623      	mov	r3, r4
   1d946:	462a      	mov	r2, r5
   1d948:	2145      	movs	r1, #69	; 0x45
   1d94a:	4825      	ldr	r0, [pc, #148]	; (1d9e0 <qspi_erase+0x10c>)
   1d94c:	f00b f97f 	bl	28c4e <z_log_minimal_printk>
		uint32_t adj = 0;
   1d950:	46d0      	mov	r8, sl
			res = NRFX_ERROR_INVALID_PARAM;
   1d952:	4f24      	ldr	r7, [pc, #144]	; (1d9e4 <qspi_erase+0x110>)
		qspi_wait_for_completion(dev, res);
   1d954:	4639      	mov	r1, r7
   1d956:	4630      	mov	r0, r6
   1d958:	f7ff febc 	bl	1d6d4 <qspi_wait_for_completion>
		if (res == NRFX_SUCCESS) {
   1d95c:	4b22      	ldr	r3, [pc, #136]	; (1d9e8 <qspi_erase+0x114>)
   1d95e:	429f      	cmp	r7, r3
   1d960:	d11d      	bne.n	1d99e <qspi_erase+0xca>
			addr += adj;
   1d962:	4445      	add	r5, r8
			size -= adj;
   1d964:	eba4 0408 	sub.w	r4, r4, r8
	while (size > 0) {
   1d968:	b31c      	cbz	r4, 1d9b2 <qspi_erase+0xde>
		if (size == params->size) {
   1d96a:	f8db 3018 	ldr.w	r3, [fp, #24]
   1d96e:	42a3      	cmp	r3, r4
   1d970:	d0dd      	beq.n	1d92e <qspi_erase+0x5a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1d972:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1d976:	d3df      	bcc.n	1d938 <qspi_erase+0x64>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1d978:	b2ab      	uxth	r3, r5
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1d97a:	2b00      	cmp	r3, #0
   1d97c:	d1dc      	bne.n	1d938 <qspi_erase+0x64>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1d97e:	4629      	mov	r1, r5
   1d980:	2001      	movs	r0, #1
   1d982:	f003 fdf5 	bl	21570 <nrfx_qspi_erase>
   1d986:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   1d988:	f44f 3880 	mov.w	r8, #65536	; 0x10000
   1d98c:	e7e2      	b.n	1d954 <qspi_erase+0x80>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1d98e:	4629      	mov	r1, r5
   1d990:	2000      	movs	r0, #0
   1d992:	f003 fded 	bl	21570 <nrfx_qspi_erase>
   1d996:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   1d998:	f44f 5880 	mov.w	r8, #4096	; 0x1000
   1d99c:	e7da      	b.n	1d954 <qspi_erase+0x80>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1d99e:	4623      	mov	r3, r4
   1d9a0:	462a      	mov	r2, r5
   1d9a2:	2145      	movs	r1, #69	; 0x45
   1d9a4:	4811      	ldr	r0, [pc, #68]	; (1d9ec <qspi_erase+0x118>)
   1d9a6:	f00b f952 	bl	28c4e <z_log_minimal_printk>
			rv = qspi_get_zephyr_ret_code(res);
   1d9aa:	4638      	mov	r0, r7
   1d9ac:	f00f fed7 	bl	2d75e <qspi_get_zephyr_ret_code>
   1d9b0:	4681      	mov	r9, r0
	struct qspi_nor_data *dev_data = dev->data;
   1d9b2:	6930      	ldr	r0, [r6, #16]
	k_sem_give(&dev_data->sem);
   1d9b4:	3018      	adds	r0, #24
   1d9b6:	f004 feb9 	bl	2272c <z_impl_k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1d9ba:	2101      	movs	r1, #1
   1d9bc:	4630      	mov	r0, r6
   1d9be:	f00f ff02 	bl	2d7c6 <qspi_nor_write_protection_set>
	if (!rv) {
   1d9c2:	f1b9 0f00 	cmp.w	r9, #0
   1d9c6:	d1aa      	bne.n	1d91e <qspi_erase+0x4a>
		rv = rv2;
   1d9c8:	4681      	mov	r9, r0
   1d9ca:	e7a8      	b.n	1d91e <qspi_erase+0x4a>
		return -EINVAL;
   1d9cc:	f06f 0915 	mvn.w	r9, #21
   1d9d0:	e799      	b.n	1d906 <qspi_erase+0x32>
		return -EINVAL;
   1d9d2:	f06f 0915 	mvn.w	r9, #21
   1d9d6:	e796      	b.n	1d906 <qspi_erase+0x32>
   1d9d8:	f06f 0915 	mvn.w	r9, #21
   1d9dc:	e793      	b.n	1d906 <qspi_erase+0x32>
   1d9de:	bf00      	nop
   1d9e0:	00032fc4 	.word	0x00032fc4
   1d9e4:	0bad0004 	.word	0x0bad0004
   1d9e8:	0bad0000 	.word	0x0bad0000
   1d9ec:	00032fe8 	.word	0x00032fe8

0001d9f0 <qspi_nor_erase>:
{
   1d9f0:	b510      	push	{r4, lr}
	const struct qspi_nor_config *params = dev->config;
   1d9f2:	6844      	ldr	r4, [r0, #4]
	if (addr < 0 ||
   1d9f4:	2900      	cmp	r1, #0
   1d9f6:	db06      	blt.n	1da06 <qspi_nor_erase+0x16>
	    (addr + size) > params->size) {
   1d9f8:	188b      	adds	r3, r1, r2
   1d9fa:	69a4      	ldr	r4, [r4, #24]
	if (addr < 0 ||
   1d9fc:	42a3      	cmp	r3, r4
   1d9fe:	d802      	bhi.n	1da06 <qspi_nor_erase+0x16>
	int ret = qspi_erase(dev, addr, size);
   1da00:	f7ff ff68 	bl	1d8d4 <qspi_erase>
}
   1da04:	bd10      	pop	{r4, pc}
		LOG_ERR("erase error: address or size "
   1da06:	4613      	mov	r3, r2
   1da08:	460a      	mov	r2, r1
   1da0a:	2145      	movs	r1, #69	; 0x45
   1da0c:	4802      	ldr	r0, [pc, #8]	; (1da18 <qspi_nor_erase+0x28>)
   1da0e:	f00b f91e 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1da12:	f06f 0015 	mvn.w	r0, #21
   1da16:	e7f5      	b.n	1da04 <qspi_nor_erase+0x14>
   1da18:	0003300c 	.word	0x0003300c

0001da1c <write_sub_word>:
{
   1da1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da20:	b082      	sub	sp, #8
   1da22:	4605      	mov	r5, r0
   1da24:	460e      	mov	r6, r1
   1da26:	4617      	mov	r7, r2
   1da28:	4698      	mov	r8, r3
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1da2a:	460a      	mov	r2, r1
   1da2c:	2104      	movs	r1, #4
   1da2e:	eb0d 0001 	add.w	r0, sp, r1
   1da32:	f011 facd 	bl	2efd0 <nrfx_qspi_read>
   1da36:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1da38:	4601      	mov	r1, r0
   1da3a:	4628      	mov	r0, r5
   1da3c:	f7ff fe4a 	bl	1d6d4 <qspi_wait_for_completion>
	if (res == NRFX_SUCCESS) {
   1da40:	4b0b      	ldr	r3, [pc, #44]	; (1da70 <write_sub_word+0x54>)
   1da42:	429c      	cmp	r4, r3
   1da44:	d003      	beq.n	1da4e <write_sub_word+0x32>
}
   1da46:	4620      	mov	r0, r4
   1da48:	b002      	add	sp, #8
   1da4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(buf, sptr, slen);
   1da4e:	4642      	mov	r2, r8
   1da50:	4639      	mov	r1, r7
   1da52:	a801      	add	r0, sp, #4
   1da54:	f00c f99a 	bl	29d8c <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1da58:	4632      	mov	r2, r6
   1da5a:	2104      	movs	r1, #4
   1da5c:	eb0d 0001 	add.w	r0, sp, r1
   1da60:	f011 fab1 	bl	2efc6 <nrfx_qspi_write>
   1da64:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1da66:	4601      	mov	r1, r0
   1da68:	4628      	mov	r0, r5
   1da6a:	f7ff fe33 	bl	1d6d4 <qspi_wait_for_completion>
	return res;
   1da6e:	e7ea      	b.n	1da46 <write_sub_word+0x2a>
   1da70:	0bad0000 	.word	0x0bad0000

0001da74 <write_from_nvmc>:
{
   1da74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1da78:	b083      	sub	sp, #12
   1da7a:	4681      	mov	r9, r0
   1da7c:	4688      	mov	r8, r1
   1da7e:	4617      	mov	r7, r2
   1da80:	461d      	mov	r5, r3
	nrfx_err_t res = NRFX_SUCCESS;
   1da82:	4c12      	ldr	r4, [pc, #72]	; (1dacc <write_from_nvmc+0x58>)
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1da84:	b1ed      	cbz	r5, 1dac2 <write_from_nvmc+0x4e>
   1da86:	4b11      	ldr	r3, [pc, #68]	; (1dacc <write_from_nvmc+0x58>)
   1da88:	429c      	cmp	r4, r3
   1da8a:	d11a      	bne.n	1dac2 <write_from_nvmc+0x4e>
			size_t len = MIN(slen, sizeof(buf));
   1da8c:	462e      	mov	r6, r5
   1da8e:	2d04      	cmp	r5, #4
   1da90:	bf28      	it	cs
   1da92:	2604      	movcs	r6, #4
			memcpy(buf, sp, len);
   1da94:	4632      	mov	r2, r6
   1da96:	4639      	mov	r1, r7
   1da98:	a801      	add	r0, sp, #4
   1da9a:	f00c f977 	bl	29d8c <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1da9e:	4642      	mov	r2, r8
   1daa0:	2104      	movs	r1, #4
   1daa2:	eb0d 0001 	add.w	r0, sp, r1
   1daa6:	f011 fa8e 	bl	2efc6 <nrfx_qspi_write>
   1daaa:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1daac:	4601      	mov	r1, r0
   1daae:	4648      	mov	r0, r9
   1dab0:	f7ff fe10 	bl	1d6d4 <qspi_wait_for_completion>
			if (res == NRFX_SUCCESS) {
   1dab4:	4b05      	ldr	r3, [pc, #20]	; (1dacc <write_from_nvmc+0x58>)
   1dab6:	429c      	cmp	r4, r3
   1dab8:	d1e4      	bne.n	1da84 <write_from_nvmc+0x10>
				slen -= len;
   1daba:	1bad      	subs	r5, r5, r6
				sp += len;
   1dabc:	4437      	add	r7, r6
				addr += len;
   1dabe:	44b0      	add	r8, r6
   1dac0:	e7e0      	b.n	1da84 <write_from_nvmc+0x10>
}
   1dac2:	4620      	mov	r0, r4
   1dac4:	b003      	add	sp, #12
   1dac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1daca:	bf00      	nop
   1dacc:	0bad0000 	.word	0x0bad0000

0001dad0 <qspi_nor_write>:
{
   1dad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!src) {
   1dad4:	2a00      	cmp	r2, #0
   1dad6:	d068      	beq.n	1dbaa <qspi_nor_write+0xda>
   1dad8:	4604      	mov	r4, r0
   1dada:	460e      	mov	r6, r1
   1dadc:	461d      	mov	r5, r3
   1dade:	4690      	mov	r8, r2
	if ((size == 0)
   1dae0:	2b00      	cmp	r3, #0
   1dae2:	d065      	beq.n	1dbb0 <qspi_nor_write+0xe0>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1dae4:	2b04      	cmp	r3, #4
   1dae6:	d902      	bls.n	1daee <qspi_nor_write+0x1e>
   1dae8:	f013 0f03 	tst.w	r3, #3
   1daec:	d163      	bne.n	1dbb6 <qspi_nor_write+0xe6>
	if ((addr % 4U) != 0) {
   1daee:	f016 0f03 	tst.w	r6, #3
   1daf2:	d163      	bne.n	1dbbc <qspi_nor_write+0xec>
	const struct qspi_nor_config *params = dev->config;
   1daf4:	6862      	ldr	r2, [r4, #4]
	if (addr < 0 ||
   1daf6:	2e00      	cmp	r6, #0
   1daf8:	db0e      	blt.n	1db18 <qspi_nor_write+0x48>
	    (addr + size) > params->size) {
   1dafa:	1973      	adds	r3, r6, r5
   1dafc:	6992      	ldr	r2, [r2, #24]
	if (addr < 0 ||
   1dafe:	4293      	cmp	r3, r2
   1db00:	d80a      	bhi.n	1db18 <qspi_nor_write+0x48>
	int rc = qspi_device_init(dev);
   1db02:	4620      	mov	r0, r4
   1db04:	f7ff fdc0 	bl	1d688 <qspi_device_init>
	if (rc != 0) {
   1db08:	4607      	mov	r7, r0
   1db0a:	b170      	cbz	r0, 1db2a <qspi_nor_write+0x5a>
	qspi_device_uninit(dev);
   1db0c:	4620      	mov	r0, r4
   1db0e:	f7ff febd 	bl	1d88c <qspi_device_uninit>
}
   1db12:	4638      	mov	r0, r7
   1db14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("write error: address or size "
   1db18:	462b      	mov	r3, r5
   1db1a:	4632      	mov	r2, r6
   1db1c:	2145      	movs	r1, #69	; 0x45
   1db1e:	4829      	ldr	r0, [pc, #164]	; (1dbc4 <qspi_nor_write+0xf4>)
   1db20:	f00b f895 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1db24:	f06f 0715 	mvn.w	r7, #21
   1db28:	e7f3      	b.n	1db12 <qspi_nor_write+0x42>
	qspi_trans_lock(dev);
   1db2a:	4620      	mov	r0, r4
   1db2c:	f00f fe38 	bl	2d7a0 <qspi_trans_lock>
	res = qspi_nor_write_protection_set(dev, false);
   1db30:	2100      	movs	r1, #0
   1db32:	4620      	mov	r0, r4
   1db34:	f00f fe47 	bl	2d7c6 <qspi_nor_write_protection_set>
   1db38:	4607      	mov	r7, r0
	qspi_lock(dev);
   1db3a:	4620      	mov	r0, r4
   1db3c:	f00f fe39 	bl	2d7b2 <qspi_lock>
	if (!res) {
   1db40:	b96f      	cbnz	r7, 1db5e <qspi_nor_write+0x8e>
		if (size < 4U) {
   1db42:	2d03      	cmp	r5, #3
   1db44:	d91e      	bls.n	1db84 <qspi_nor_write+0xb4>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1db46:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1db4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1db4e:	d021      	beq.n	1db94 <qspi_nor_write+0xc4>
			res = write_from_nvmc(dev, addr, src, size);
   1db50:	462b      	mov	r3, r5
   1db52:	4642      	mov	r2, r8
   1db54:	4631      	mov	r1, r6
   1db56:	4620      	mov	r0, r4
   1db58:	f7ff ff8c 	bl	1da74 <write_from_nvmc>
   1db5c:	4607      	mov	r7, r0
	struct qspi_nor_data *dev_data = dev->data;
   1db5e:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   1db60:	3018      	adds	r0, #24
   1db62:	f004 fde3 	bl	2272c <z_impl_k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1db66:	2101      	movs	r1, #1
   1db68:	4620      	mov	r0, r4
   1db6a:	f00f fe2c 	bl	2d7c6 <qspi_nor_write_protection_set>
   1db6e:	4605      	mov	r5, r0
	struct qspi_nor_data *dev_data = dev->data;
   1db70:	6920      	ldr	r0, [r4, #16]
   1db72:	f004 fddb 	bl	2272c <z_impl_k_sem_give>
	if (!res) {
   1db76:	b907      	cbnz	r7, 1db7a <qspi_nor_write+0xaa>
		res = res2;
   1db78:	462f      	mov	r7, r5
	rc = qspi_get_zephyr_ret_code(res);
   1db7a:	4638      	mov	r0, r7
   1db7c:	f00f fdef 	bl	2d75e <qspi_get_zephyr_ret_code>
   1db80:	4607      	mov	r7, r0
   1db82:	e7c3      	b.n	1db0c <qspi_nor_write+0x3c>
			res = write_sub_word(dev, addr, src, size);
   1db84:	462b      	mov	r3, r5
   1db86:	4642      	mov	r2, r8
   1db88:	4631      	mov	r1, r6
   1db8a:	4620      	mov	r0, r4
   1db8c:	f7ff ff46 	bl	1da1c <write_sub_word>
   1db90:	4607      	mov	r7, r0
   1db92:	e7e4      	b.n	1db5e <qspi_nor_write+0x8e>
			res = nrfx_qspi_write(src, size, addr);
   1db94:	4632      	mov	r2, r6
   1db96:	4629      	mov	r1, r5
   1db98:	4640      	mov	r0, r8
   1db9a:	f011 fa14 	bl	2efc6 <nrfx_qspi_write>
   1db9e:	4607      	mov	r7, r0
			qspi_wait_for_completion(dev, res);
   1dba0:	4601      	mov	r1, r0
   1dba2:	4620      	mov	r0, r4
   1dba4:	f7ff fd96 	bl	1d6d4 <qspi_wait_for_completion>
   1dba8:	e7d9      	b.n	1db5e <qspi_nor_write+0x8e>
		return -EINVAL;
   1dbaa:	f06f 0715 	mvn.w	r7, #21
   1dbae:	e7b0      	b.n	1db12 <qspi_nor_write+0x42>
		return -EINVAL;
   1dbb0:	f06f 0715 	mvn.w	r7, #21
   1dbb4:	e7ad      	b.n	1db12 <qspi_nor_write+0x42>
   1dbb6:	f06f 0715 	mvn.w	r7, #21
   1dbba:	e7aa      	b.n	1db12 <qspi_nor_write+0x42>
		return -EINVAL;
   1dbbc:	f06f 0715 	mvn.w	r7, #21
   1dbc0:	e7a7      	b.n	1db12 <qspi_nor_write+0x42>
   1dbc2:	bf00      	nop
   1dbc4:	0003305c 	.word	0x0003305c

0001dbc8 <read_non_aligned>:
{
   1dbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbcc:	b087      	sub	sp, #28
   1dbce:	4682      	mov	sl, r0
   1dbd0:	460e      	mov	r6, r1
   1dbd2:	4617      	mov	r7, r2
	off_t flash_prefix = (WORD_SIZE - (addr % WORD_SIZE)) % WORD_SIZE;
   1dbd4:	424a      	negs	r2, r1
   1dbd6:	f001 0403 	and.w	r4, r1, #3
   1dbda:	f002 0203 	and.w	r2, r2, #3
   1dbde:	bf58      	it	pl
   1dbe0:	4254      	negpl	r4, r2
   1dbe2:	f1c4 0404 	rsb	r4, r4, #4
   1dbe6:	4262      	negs	r2, r4
   1dbe8:	f004 0403 	and.w	r4, r4, #3
   1dbec:	f002 0203 	and.w	r2, r2, #3
   1dbf0:	bf58      	it	pl
   1dbf2:	4254      	negpl	r4, r2
	if (flash_prefix > size) {
   1dbf4:	429c      	cmp	r4, r3
   1dbf6:	d900      	bls.n	1dbfa <read_non_aligned+0x32>
		flash_prefix = size;
   1dbf8:	461c      	mov	r4, r3
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1dbfa:	427a      	negs	r2, r7
   1dbfc:	f007 0503 	and.w	r5, r7, #3
   1dc00:	f002 0203 	and.w	r2, r2, #3
   1dc04:	bf58      	it	pl
   1dc06:	4255      	negpl	r5, r2
   1dc08:	f1c5 0504 	rsb	r5, r5, #4
   1dc0c:	426a      	negs	r2, r5
   1dc0e:	f005 0503 	and.w	r5, r5, #3
   1dc12:	f002 0203 	and.w	r2, r2, #3
   1dc16:	bf58      	it	pl
   1dc18:	4255      	negpl	r5, r2
	if (dest_prefix > size) {
   1dc1a:	429d      	cmp	r5, r3
   1dc1c:	d900      	bls.n	1dc20 <read_non_aligned+0x58>
		dest_prefix = size;
   1dc1e:	461d      	mov	r5, r3
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1dc20:	9401      	str	r4, [sp, #4]
   1dc22:	1b1a      	subs	r2, r3, r4
   1dc24:	f002 0b03 	and.w	fp, r2, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1dc28:	f022 0903 	bic.w	r9, r2, #3
			    (size - dest_prefix) % WORD_SIZE;
   1dc2c:	4629      	mov	r1, r5
   1dc2e:	1b5b      	subs	r3, r3, r5
   1dc30:	f023 0303 	bic.w	r3, r3, #3
	if (flash_middle > dest_middle) {
   1dc34:	4599      	cmp	r9, r3
   1dc36:	dd02      	ble.n	1dc3e <read_non_aligned+0x76>
		flash_suffix = size - flash_prefix - flash_middle;
   1dc38:	eba2 0b03 	sub.w	fp, r2, r3
		flash_middle = dest_middle;
   1dc3c:	4699      	mov	r9, r3
	if (flash_middle != 0) {
   1dc3e:	f1b9 0f00 	cmp.w	r9, #0
   1dc42:	d109      	bne.n	1dc58 <read_non_aligned+0x90>
	nrfx_err_t res = NRFX_SUCCESS;
   1dc44:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1dce8 <read_non_aligned+0x120>
	if (flash_prefix != 0) {
   1dc48:	bb04      	cbnz	r4, 1dc8c <read_non_aligned+0xc4>
	if (flash_suffix != 0) {
   1dc4a:	f1bb 0f00 	cmp.w	fp, #0
   1dc4e:	d135      	bne.n	1dcbc <read_non_aligned+0xf4>
}
   1dc50:	4640      	mov	r0, r8
   1dc52:	b007      	add	sp, #28
   1dc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1dc58:	187b      	adds	r3, r7, r1
   1dc5a:	f8cd 900c 	str.w	r9, [sp, #12]
   1dc5e:	19a2      	adds	r2, r4, r6
   1dc60:	4649      	mov	r1, r9
   1dc62:	9302      	str	r3, [sp, #8]
   1dc64:	4618      	mov	r0, r3
   1dc66:	f011 f9b3 	bl	2efd0 <nrfx_qspi_read>
   1dc6a:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   1dc6c:	4601      	mov	r1, r0
   1dc6e:	4650      	mov	r0, sl
   1dc70:	f7ff fd30 	bl	1d6d4 <qspi_wait_for_completion>
		if (res != NRFX_SUCCESS) {
   1dc74:	4b1c      	ldr	r3, [pc, #112]	; (1dce8 <read_non_aligned+0x120>)
   1dc76:	4598      	cmp	r8, r3
   1dc78:	d1ea      	bne.n	1dc50 <read_non_aligned+0x88>
		if (flash_prefix != dest_prefix) {
   1dc7a:	42ac      	cmp	r4, r5
   1dc7c:	d0e4      	beq.n	1dc48 <read_non_aligned+0x80>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
   1dc7e:	9a03      	ldr	r2, [sp, #12]
   1dc80:	9902      	ldr	r1, [sp, #8]
   1dc82:	9b01      	ldr	r3, [sp, #4]
   1dc84:	18f8      	adds	r0, r7, r3
   1dc86:	f00c f86e 	bl	29d66 <memmove>
   1dc8a:	e7dd      	b.n	1dc48 <read_non_aligned+0x80>
				     (WORD_SIZE - flash_prefix));
   1dc8c:	f1c4 0204 	rsb	r2, r4, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1dc90:	1ab2      	subs	r2, r6, r2
   1dc92:	2104      	movs	r1, #4
   1dc94:	a804      	add	r0, sp, #16
   1dc96:	f011 f99b 	bl	2efd0 <nrfx_qspi_read>
   1dc9a:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   1dc9c:	4601      	mov	r1, r0
   1dc9e:	4650      	mov	r0, sl
   1dca0:	f7ff fd18 	bl	1d6d4 <qspi_wait_for_completion>
		if (res != NRFX_SUCCESS) {
   1dca4:	4b10      	ldr	r3, [pc, #64]	; (1dce8 <read_non_aligned+0x120>)
   1dca6:	4598      	cmp	r8, r3
   1dca8:	d1d2      	bne.n	1dc50 <read_non_aligned+0x88>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
   1dcaa:	9a01      	ldr	r2, [sp, #4]
   1dcac:	f1c2 0104 	rsb	r1, r2, #4
   1dcb0:	ab04      	add	r3, sp, #16
   1dcb2:	4419      	add	r1, r3
   1dcb4:	4638      	mov	r0, r7
   1dcb6:	f00c f869 	bl	29d8c <memcpy>
   1dcba:	e7c6      	b.n	1dc4a <read_non_aligned+0x82>
				     addr + flash_prefix + flash_middle);
   1dcbc:	19a2      	adds	r2, r4, r6
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1dcbe:	444a      	add	r2, r9
   1dcc0:	2108      	movs	r1, #8
   1dcc2:	a804      	add	r0, sp, #16
   1dcc4:	f011 f984 	bl	2efd0 <nrfx_qspi_read>
   1dcc8:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   1dcca:	4601      	mov	r1, r0
   1dccc:	4650      	mov	r0, sl
   1dcce:	f7ff fd01 	bl	1d6d4 <qspi_wait_for_completion>
		if (res != NRFX_SUCCESS) {
   1dcd2:	4b05      	ldr	r3, [pc, #20]	; (1dce8 <read_non_aligned+0x120>)
   1dcd4:	4598      	cmp	r8, r3
   1dcd6:	d1bb      	bne.n	1dc50 <read_non_aligned+0x88>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1dcd8:	9801      	ldr	r0, [sp, #4]
   1dcda:	4448      	add	r0, r9
   1dcdc:	465a      	mov	r2, fp
   1dcde:	a904      	add	r1, sp, #16
   1dce0:	4438      	add	r0, r7
   1dce2:	f00c f853 	bl	29d8c <memcpy>
   1dce6:	e7b3      	b.n	1dc50 <read_non_aligned+0x88>
   1dce8:	0bad0000 	.word	0x0bad0000

0001dcec <qspi_nor_read>:
{
   1dcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!dest) {
   1dcf0:	b38a      	cbz	r2, 1dd56 <qspi_nor_read+0x6a>
   1dcf2:	4604      	mov	r4, r0
   1dcf4:	460f      	mov	r7, r1
   1dcf6:	461d      	mov	r5, r3
   1dcf8:	4690      	mov	r8, r2
	if (!size) {
   1dcfa:	b37b      	cbz	r3, 1dd5c <qspi_nor_read+0x70>
	const struct qspi_nor_config *params = dev->config;
   1dcfc:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1dcfe:	2900      	cmp	r1, #0
   1dd00:	db0d      	blt.n	1dd1e <qspi_nor_read+0x32>
	    (addr + size) > params->size) {
   1dd02:	18cb      	adds	r3, r1, r3
   1dd04:	6992      	ldr	r2, [r2, #24]
	if (addr < 0 ||
   1dd06:	4293      	cmp	r3, r2
   1dd08:	d809      	bhi.n	1dd1e <qspi_nor_read+0x32>
	int rc = qspi_device_init(dev);
   1dd0a:	f7ff fcbd 	bl	1d688 <qspi_device_init>
	if (rc != 0) {
   1dd0e:	4606      	mov	r6, r0
   1dd10:	b170      	cbz	r0, 1dd30 <qspi_nor_read+0x44>
	qspi_device_uninit(dev);
   1dd12:	4620      	mov	r0, r4
   1dd14:	f7ff fdba 	bl	1d88c <qspi_device_uninit>
}
   1dd18:	4630      	mov	r0, r6
   1dd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("read error: address or size "
   1dd1e:	462b      	mov	r3, r5
   1dd20:	463a      	mov	r2, r7
   1dd22:	2145      	movs	r1, #69	; 0x45
   1dd24:	480e      	ldr	r0, [pc, #56]	; (1dd60 <qspi_nor_read+0x74>)
   1dd26:	f00a ff92 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1dd2a:	f06f 0615 	mvn.w	r6, #21
   1dd2e:	e7f3      	b.n	1dd18 <qspi_nor_read+0x2c>
	qspi_lock(dev);
   1dd30:	4620      	mov	r0, r4
   1dd32:	f00f fd3e 	bl	2d7b2 <qspi_lock>
	nrfx_err_t res = read_non_aligned(dev, addr, dest, size);
   1dd36:	462b      	mov	r3, r5
   1dd38:	4642      	mov	r2, r8
   1dd3a:	4639      	mov	r1, r7
   1dd3c:	4620      	mov	r0, r4
   1dd3e:	f7ff ff43 	bl	1dbc8 <read_non_aligned>
   1dd42:	4605      	mov	r5, r0
	struct qspi_nor_data *dev_data = dev->data;
   1dd44:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   1dd46:	3018      	adds	r0, #24
   1dd48:	f004 fcf0 	bl	2272c <z_impl_k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1dd4c:	4628      	mov	r0, r5
   1dd4e:	f00f fd06 	bl	2d75e <qspi_get_zephyr_ret_code>
   1dd52:	4606      	mov	r6, r0
   1dd54:	e7dd      	b.n	1dd12 <qspi_nor_read+0x26>
		return -EINVAL;
   1dd56:	f06f 0615 	mvn.w	r6, #21
   1dd5a:	e7dd      	b.n	1dd18 <qspi_nor_read+0x2c>
		return 0;
   1dd5c:	2600      	movs	r6, #0
   1dd5e:	e7db      	b.n	1dd18 <qspi_nor_read+0x2c>
   1dd60:	000330ac 	.word	0x000330ac

0001dd64 <qspi_nor_read_id>:
{
   1dd64:	b510      	push	{r4, lr}
   1dd66:	b086      	sub	sp, #24
   1dd68:	4604      	mov	r4, r0
	int ret = qspi_read_jedec_id(dev, id);
   1dd6a:	a905      	add	r1, sp, #20
   1dd6c:	f00f fd8e 	bl	2d88c <qspi_read_jedec_id>
	if (ret != 0) {
   1dd70:	b9e8      	cbnz	r0, 1ddae <qspi_nor_read_id+0x4a>
	const struct qspi_nor_config *qnc = dev->config;
   1dd72:	6864      	ldr	r4, [r4, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1dd74:	2203      	movs	r2, #3
   1dd76:	a905      	add	r1, sp, #20
   1dd78:	f104 001c 	add.w	r0, r4, #28
   1dd7c:	f00b ffe1 	bl	29d42 <memcmp>
   1dd80:	b908      	cbnz	r0, 1dd86 <qspi_nor_read_id+0x22>
}
   1dd82:	b006      	add	sp, #24
   1dd84:	bd10      	pop	{r4, pc}
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1dd86:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1dd8a:	7f22      	ldrb	r2, [r4, #28]
   1dd8c:	7f61      	ldrb	r1, [r4, #29]
   1dd8e:	7fa0      	ldrb	r0, [r4, #30]
   1dd90:	9003      	str	r0, [sp, #12]
   1dd92:	9102      	str	r1, [sp, #8]
   1dd94:	9201      	str	r2, [sp, #4]
   1dd96:	9300      	str	r3, [sp, #0]
   1dd98:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1dd9c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1dda0:	2145      	movs	r1, #69	; 0x45
   1dda2:	4804      	ldr	r0, [pc, #16]	; (1ddb4 <qspi_nor_read_id+0x50>)
   1dda4:	f00a ff53 	bl	28c4e <z_log_minimal_printk>
		return -ENODEV;
   1dda8:	f06f 0012 	mvn.w	r0, #18
   1ddac:	e7e9      	b.n	1dd82 <qspi_nor_read_id+0x1e>
		return -EIO;
   1ddae:	f06f 0004 	mvn.w	r0, #4
   1ddb2:	e7e6      	b.n	1dd82 <qspi_nor_read_id+0x1e>
   1ddb4:	000330fc 	.word	0x000330fc

0001ddb8 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1ddb8:	4b03      	ldr	r3, [pc, #12]	; (1ddc8 <nvmc_wait_ready+0x10>)
   1ddba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
   1ddbe:	f013 0f01 	tst.w	r3, #1
   1ddc2:	d0f9      	beq.n	1ddb8 <nvmc_wait_ready>
	}
}
   1ddc4:	4770      	bx	lr
   1ddc6:	bf00      	nop
   1ddc8:	4001e000 	.word	0x4001e000

0001ddcc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1ddcc:	4b02      	ldr	r3, [pc, #8]	; (1ddd8 <flash_nrf_pages_layout+0xc>)
   1ddce:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1ddd0:	2301      	movs	r3, #1
   1ddd2:	6013      	str	r3, [r2, #0]
}
   1ddd4:	4770      	bx	lr
   1ddd6:	bf00      	nop
   1ddd8:	20002c24 	.word	0x20002c24

0001dddc <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1dddc:	4800      	ldr	r0, [pc, #0]	; (1dde0 <flash_nrf_get_parameters+0x4>)
   1ddde:	4770      	bx	lr
   1dde0:	000332a0 	.word	0x000332a0

0001dde4 <erase_synchronously>:
		 &flash_nrf_api);

#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE

static int erase_synchronously(uint32_t addr, uint32_t size)
{
   1dde4:	b500      	push	{lr}
   1dde6:	b087      	sub	sp, #28
	struct flash_context context = {
   1dde8:	ab02      	add	r3, sp, #8
   1ddea:	2200      	movs	r2, #0
   1ddec:	9202      	str	r2, [sp, #8]
   1ddee:	9203      	str	r2, [sp, #12]
   1ddf0:	9204      	str	r2, [sp, #16]
   1ddf2:	9205      	str	r2, [sp, #20]
   1ddf4:	9003      	str	r0, [sp, #12]
   1ddf6:	9104      	str	r1, [sp, #16]
   1ddf8:	2201      	movs	r2, #1
   1ddfa:	f88d 2014 	strb.w	r2, [sp, #20]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	struct flash_op_desc flash_op_desc = {
   1ddfe:	4a06      	ldr	r2, [pc, #24]	; (1de18 <erase_synchronously+0x34>)
   1de00:	9200      	str	r2, [sp, #0]
   1de02:	9301      	str	r3, [sp, #4]
		.handler = erase_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1de04:	4805      	ldr	r0, [pc, #20]	; (1de1c <erase_synchronously+0x38>)
   1de06:	f002 f9f5 	bl	201f4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1de0a:	4668      	mov	r0, sp
   1de0c:	f002 f9f8 	bl	20200 <nrf_flash_sync_exe>
}
   1de10:	b007      	add	sp, #28
   1de12:	f85d fb04 	ldr.w	pc, [sp], #4
   1de16:	bf00      	nop
   1de18:	0002d983 	.word	0x0002d983
   1de1c:	00015e64 	.word	0x00015e64

0001de20 <write_synchronously>:

static int write_synchronously(off_t addr, const void *data, size_t len)
{
   1de20:	b500      	push	{lr}
   1de22:	b087      	sub	sp, #28
	struct flash_context context = {
   1de24:	9102      	str	r1, [sp, #8]
   1de26:	9003      	str	r0, [sp, #12]
   1de28:	9204      	str	r2, [sp, #16]
   1de2a:	2301      	movs	r3, #1
   1de2c:	f88d 3014 	strb.w	r3, [sp, #20]
		.flash_addr = addr,
		.len = len,
		.enable_time_limit = 1 /* enable time limit */
	};

	struct flash_op_desc flash_op_desc = {
   1de30:	4b06      	ldr	r3, [pc, #24]	; (1de4c <write_synchronously+0x2c>)
   1de32:	9300      	str	r3, [sp, #0]
   1de34:	ab02      	add	r3, sp, #8
   1de36:	9301      	str	r3, [sp, #4]
		.handler = write_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1de38:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1de3c:	f002 f9da 	bl	201f4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1de40:	4668      	mov	r0, sp
   1de42:	f002 f9dd 	bl	20200 <nrf_flash_sync_exe>
}
   1de46:	b007      	add	sp, #28
   1de48:	f85d fb04 	ldr.w	pc, [sp], #4
   1de4c:	0002d9fb 	.word	0x0002d9fb

0001de50 <nrf_power_pofcon_set>:
    NRFX_ASSERT(thr == (thr & (POWER_POFCON_THRESHOLD_Msk >> POWER_POFCON_THRESHOLD_Pos)));
   1de50:	2a0f      	cmp	r2, #15
   1de52:	d80b      	bhi.n	1de6c <nrf_power_pofcon_set+0x1c>
    uint32_t pofcon = p_reg->POFCON;
   1de54:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1de58:	f023 031f 	bic.w	r3, r3, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1de5c:	0052      	lsls	r2, r2, #1
        :
   1de5e:	b191      	cbz	r1, 1de86 <nrf_power_pofcon_set+0x36>
   1de60:	2101      	movs	r1, #1
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1de62:	430a      	orrs	r2, r1
    pofcon |=
   1de64:	431a      	orrs	r2, r3
    p_reg->POFCON = pofcon;
   1de66:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
   1de6a:	4770      	bx	lr
{
   1de6c:	b510      	push	{r4, lr}
    NRFX_ASSERT(thr == (thr & (POWER_POFCON_THRESHOLD_Msk >> POWER_POFCON_THRESHOLD_Pos)));
   1de6e:	4c07      	ldr	r4, [pc, #28]	; (1de8c <nrf_power_pofcon_set+0x3c>)
   1de70:	f240 32e9 	movw	r2, #1001	; 0x3e9
   1de74:	4621      	mov	r1, r4
   1de76:	4806      	ldr	r0, [pc, #24]	; (1de90 <nrf_power_pofcon_set+0x40>)
   1de78:	f00a fec9 	bl	28c0e <assert_print>
   1de7c:	f240 31e9 	movw	r1, #1001	; 0x3e9
   1de80:	4620      	mov	r0, r4
   1de82:	f00a febd 	bl	28c00 <assert_post_action>
        :
   1de86:	2100      	movs	r1, #0
   1de88:	e7eb      	b.n	1de62 <nrf_power_pofcon_set+0x12>
   1de8a:	bf00      	nop
   1de8c:	000331c4 	.word	0x000331c4
   1de90:	00030128 	.word	0x00030128

0001de94 <suspend_pofwarn>:
 * Do not attempt to write or erase if EVENTS_POFWARN is already asserted.
 */
static bool pofcon_enabled;

static int suspend_pofwarn(void)
{
   1de94:	b538      	push	{r3, r4, r5, lr}
	if (!nrf52_errata_242()) {
   1de96:	f00f fd4c 	bl	2d932 <nrf52_errata_242>
   1de9a:	b318      	cbz	r0, 1dee4 <suspend_pofwarn+0x50>
    uint32_t pofcon = p_reg->POFCON;
   1de9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dea0:	f8d3 4510 	ldr.w	r4, [r3, #1296]	; 0x510
            == POWER_POFCON_POF_Enabled;
   1dea4:	f014 0301 	ands.w	r3, r4, #1
   1dea8:	b2dd      	uxtb	r5, r3
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   1deaa:	f3c4 0443 	ubfx	r4, r4, #1, #4
	bool enabled;
	nrf_power_pof_thr_t pof_thr;

	pof_thr = nrf_power_pofcon_get(NRF_POWER, &enabled);

	if (enabled) {
   1deae:	d101      	bne.n	1deb4 <suspend_pofwarn+0x20>
		}

		pofcon_enabled = enabled;
	}

	return 0;
   1deb0:	2000      	movs	r0, #0
}
   1deb2:	bd38      	pop	{r3, r4, r5, pc}
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
   1deb4:	4622      	mov	r2, r4
   1deb6:	2100      	movs	r1, #0
   1deb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1debc:	f7ff ffc8 	bl	1de50 <nrf_power_pofcon_set>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dec4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1dec8:	b91b      	cbnz	r3, 1ded2 <suspend_pofwarn+0x3e>
		pofcon_enabled = enabled;
   1deca:	4b07      	ldr	r3, [pc, #28]	; (1dee8 <suspend_pofwarn+0x54>)
   1decc:	701d      	strb	r5, [r3, #0]
	return 0;
   1dece:	2000      	movs	r0, #0
   1ded0:	e7ef      	b.n	1deb2 <suspend_pofwarn+0x1e>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1ded2:	4622      	mov	r2, r4
   1ded4:	2101      	movs	r1, #1
   1ded6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1deda:	f7ff ffb9 	bl	1de50 <nrf_power_pofcon_set>
			return -ECANCELED;
   1dede:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1dee2:	e7e6      	b.n	1deb2 <suspend_pofwarn+0x1e>
		return 0;
   1dee4:	2000      	movs	r0, #0
   1dee6:	e7e4      	b.n	1deb2 <suspend_pofwarn+0x1e>
   1dee8:	200045f6 	.word	0x200045f6

0001deec <restore_pofwarn>:

static void restore_pofwarn(void)
{
   1deec:	b508      	push	{r3, lr}
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
   1deee:	4b08      	ldr	r3, [pc, #32]	; (1df10 <restore_pofwarn+0x24>)
   1def0:	781b      	ldrb	r3, [r3, #0]
   1def2:	b903      	cbnz	r3, 1def6 <restore_pofwarn+0xa>
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
	}
}
   1def4:	bd08      	pop	{r3, pc}
    uint32_t pofcon = p_reg->POFCON;
   1def6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1defa:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1defe:	f3c2 0243 	ubfx	r2, r2, #1, #4
   1df02:	2101      	movs	r1, #1
   1df04:	f7ff ffa4 	bl	1de50 <nrf_power_pofcon_set>
		pofcon_enabled = false;
   1df08:	4b01      	ldr	r3, [pc, #4]	; (1df10 <restore_pofwarn+0x24>)
   1df0a:	2200      	movs	r2, #0
   1df0c:	701a      	strb	r2, [r3, #0]
}
   1df0e:	e7f1      	b.n	1def4 <restore_pofwarn+0x8>
   1df10:	200045f6 	.word	0x200045f6

0001df14 <flash_nrf_erase>:
{
   1df14:	b570      	push	{r4, r5, r6, lr}
   1df16:	460e      	mov	r6, r1
   1df18:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1df1a:	f010 ff65 	bl	2ede8 <nrfx_nvmc_flash_page_size_get>
   1df1e:	4604      	mov	r4, r0
	if (is_regular_addr_valid(addr, size)) {
   1df20:	4629      	mov	r1, r5
   1df22:	4630      	mov	r0, r6
   1df24:	f00f fd19 	bl	2d95a <is_regular_addr_valid>
   1df28:	b338      	cbz	r0, 1df7a <flash_nrf_erase+0x66>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1df2a:	fbb6 f3f4 	udiv	r3, r6, r4
   1df2e:	fb04 6313 	mls	r3, r4, r3, r6
   1df32:	b94b      	cbnz	r3, 1df48 <flash_nrf_erase+0x34>
   1df34:	fbb5 f3f4 	udiv	r3, r5, r4
   1df38:	fb04 5313 	mls	r3, r4, r3, r5
   1df3c:	b923      	cbnz	r3, 1df48 <flash_nrf_erase+0x34>
		if (!n_pages) {
   1df3e:	42a5      	cmp	r5, r4
   1df40:	d20b      	bcs.n	1df5a <flash_nrf_erase+0x46>
			return 0;
   1df42:	2400      	movs	r4, #0
}
   1df44:	4620      	mov	r0, r4
   1df46:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1df48:	462b      	mov	r3, r5
   1df4a:	4632      	mov	r2, r6
   1df4c:	2145      	movs	r1, #69	; 0x45
   1df4e:	4814      	ldr	r0, [pc, #80]	; (1dfa0 <flash_nrf_erase+0x8c>)
   1df50:	f00a fe7d 	bl	28c4e <z_log_minimal_printk>
			return -EINVAL;
   1df54:	f06f 0415 	mvn.w	r4, #21
   1df58:	e7f4      	b.n	1df44 <flash_nrf_erase+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1df5a:	f04f 32ff 	mov.w	r2, #4294967295
   1df5e:	f04f 33ff 	mov.w	r3, #4294967295
   1df62:	4810      	ldr	r0, [pc, #64]	; (1dfa4 <flash_nrf_erase+0x90>)
   1df64:	f004 fc20 	bl	227a8 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1df68:	f010 fd27 	bl	2e9ba <nrf_flash_sync_is_required>
   1df6c:	b970      	cbnz	r0, 1df8c <flash_nrf_erase+0x78>
		ret = erase(addr, size);
   1df6e:	4629      	mov	r1, r5
   1df70:	4630      	mov	r0, r6
   1df72:	f00f fd33 	bl	2d9dc <erase>
   1df76:	4604      	mov	r4, r0
   1df78:	e00d      	b.n	1df96 <flash_nrf_erase+0x82>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1df7a:	462b      	mov	r3, r5
   1df7c:	4632      	mov	r2, r6
   1df7e:	2145      	movs	r1, #69	; 0x45
   1df80:	4809      	ldr	r0, [pc, #36]	; (1dfa8 <flash_nrf_erase+0x94>)
   1df82:	f00a fe64 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1df86:	f06f 0415 	mvn.w	r4, #21
   1df8a:	e7db      	b.n	1df44 <flash_nrf_erase+0x30>
		ret = erase_synchronously(addr, size);
   1df8c:	4629      	mov	r1, r5
   1df8e:	4630      	mov	r0, r6
   1df90:	f7ff ff28 	bl	1dde4 <erase_synchronously>
   1df94:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1df96:	4803      	ldr	r0, [pc, #12]	; (1dfa4 <flash_nrf_erase+0x90>)
   1df98:	f004 fbc8 	bl	2272c <z_impl_k_sem_give>
	return ret;
   1df9c:	e7d2      	b.n	1df44 <flash_nrf_erase+0x30>
   1df9e:	bf00      	nop
   1dfa0:	000331f8 	.word	0x000331f8
   1dfa4:	20002c2c 	.word	0x20002c2c
   1dfa8:	0003321c 	.word	0x0003321c

0001dfac <flash_nrf_write>:
{
   1dfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dfae:	460c      	mov	r4, r1
   1dfb0:	4616      	mov	r6, r2
   1dfb2:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
   1dfb4:	4619      	mov	r1, r3
   1dfb6:	4620      	mov	r0, r4
   1dfb8:	f00f fccf 	bl	2d95a <is_regular_addr_valid>
   1dfbc:	b140      	cbz	r0, 1dfd0 <flash_nrf_write+0x24>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1dfbe:	f014 0703 	ands.w	r7, r4, #3
   1dfc2:	d10e      	bne.n	1dfe2 <flash_nrf_write+0x36>
   1dfc4:	f015 0f03 	tst.w	r5, #3
   1dfc8:	d10b      	bne.n	1dfe2 <flash_nrf_write+0x36>
	if (!len) {
   1dfca:	b99d      	cbnz	r5, 1dff4 <flash_nrf_write+0x48>
}
   1dfcc:	4638      	mov	r0, r7
   1dfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1dfd0:	462b      	mov	r3, r5
   1dfd2:	4622      	mov	r2, r4
   1dfd4:	2145      	movs	r1, #69	; 0x45
   1dfd6:	4815      	ldr	r0, [pc, #84]	; (1e02c <flash_nrf_write+0x80>)
   1dfd8:	f00a fe39 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1dfdc:	f06f 0715 	mvn.w	r7, #21
   1dfe0:	e7f4      	b.n	1dfcc <flash_nrf_write+0x20>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1dfe2:	462b      	mov	r3, r5
   1dfe4:	4622      	mov	r2, r4
   1dfe6:	2145      	movs	r1, #69	; 0x45
   1dfe8:	4811      	ldr	r0, [pc, #68]	; (1e030 <flash_nrf_write+0x84>)
   1dfea:	f00a fe30 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1dfee:	f06f 0715 	mvn.w	r7, #21
   1dff2:	e7eb      	b.n	1dfcc <flash_nrf_write+0x20>
	return z_impl_k_sem_take(sem, timeout);
   1dff4:	f04f 32ff 	mov.w	r2, #4294967295
   1dff8:	f04f 33ff 	mov.w	r3, #4294967295
   1dffc:	480d      	ldr	r0, [pc, #52]	; (1e034 <flash_nrf_write+0x88>)
   1dffe:	f004 fbd3 	bl	227a8 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e002:	f010 fcda 	bl	2e9ba <nrf_flash_sync_is_required>
   1e006:	b148      	cbz	r0, 1e01c <flash_nrf_write+0x70>
		ret = write_synchronously(addr, data, len);
   1e008:	462a      	mov	r2, r5
   1e00a:	4631      	mov	r1, r6
   1e00c:	4620      	mov	r0, r4
   1e00e:	f7ff ff07 	bl	1de20 <write_synchronously>
   1e012:	4607      	mov	r7, r0
	z_impl_k_sem_give(sem);
   1e014:	4807      	ldr	r0, [pc, #28]	; (1e034 <flash_nrf_write+0x88>)
   1e016:	f004 fb89 	bl	2272c <z_impl_k_sem_give>
	return ret;
   1e01a:	e7d7      	b.n	1dfcc <flash_nrf_write+0x20>
		ret = write(addr, data, len);
   1e01c:	462a      	mov	r2, r5
   1e01e:	4631      	mov	r1, r6
   1e020:	4620      	mov	r0, r4
   1e022:	f00f fd17 	bl	2da54 <write>
   1e026:	4607      	mov	r7, r0
   1e028:	e7f4      	b.n	1e014 <flash_nrf_write+0x68>
   1e02a:	bf00      	nop
   1e02c:	0003321c 	.word	0x0003321c
   1e030:	00033240 	.word	0x00033240
   1e034:	20002c2c 	.word	0x20002c2c

0001e038 <flash_nrf_read>:
{
   1e038:	b570      	push	{r4, r5, r6, lr}
   1e03a:	460d      	mov	r5, r1
   1e03c:	4616      	mov	r6, r2
   1e03e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e040:	4619      	mov	r1, r3
   1e042:	4628      	mov	r0, r5
   1e044:	f00f fc89 	bl	2d95a <is_regular_addr_valid>
   1e048:	b110      	cbz	r0, 1e050 <flash_nrf_read+0x18>
	if (!len) {
   1e04a:	b954      	cbnz	r4, 1e062 <flash_nrf_read+0x2a>
		return 0;
   1e04c:	2000      	movs	r0, #0
}
   1e04e:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e050:	4623      	mov	r3, r4
   1e052:	462a      	mov	r2, r5
   1e054:	2145      	movs	r1, #69	; 0x45
   1e056:	4806      	ldr	r0, [pc, #24]	; (1e070 <flash_nrf_read+0x38>)
   1e058:	f00a fdf9 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1e05c:	f06f 0015 	mvn.w	r0, #21
   1e060:	e7f5      	b.n	1e04e <flash_nrf_read+0x16>
	memcpy(data, (void *)addr, len);
   1e062:	4622      	mov	r2, r4
   1e064:	4629      	mov	r1, r5
   1e066:	4630      	mov	r0, r6
   1e068:	f00b fe90 	bl	29d8c <memcpy>
	return 0;
   1e06c:	2000      	movs	r0, #0
   1e06e:	e7ee      	b.n	1e04e <flash_nrf_read+0x16>
   1e070:	0003321c 	.word	0x0003321c

0001e074 <nrf_flash_init>:
{
   1e074:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e076:	2201      	movs	r2, #1
   1e078:	4611      	mov	r1, r2
   1e07a:	4807      	ldr	r0, [pc, #28]	; (1e098 <nrf_flash_init+0x24>)
   1e07c:	f011 f8d0 	bl	2f220 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1e080:	f002 f8ae 	bl	201e0 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e084:	f010 feb4 	bl	2edf0 <nrfx_nvmc_flash_page_count_get>
   1e088:	4c04      	ldr	r4, [pc, #16]	; (1e09c <nrf_flash_init+0x28>)
   1e08a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1e08c:	f010 feac 	bl	2ede8 <nrfx_nvmc_flash_page_size_get>
   1e090:	6060      	str	r0, [r4, #4]
}
   1e092:	2000      	movs	r0, #0
   1e094:	bd10      	pop	{r4, pc}
   1e096:	bf00      	nop
   1e098:	20002c2c 	.word	0x20002c2c
   1e09c:	20002c24 	.word	0x20002c24

0001e0a0 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   1e0a0:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   1e0a2:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   1e0a4:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   1e0a8:	d06f      	beq.n	1e18a <baudrate_set+0xea>
   1e0aa:	d83a      	bhi.n	1e122 <baudrate_set+0x82>
   1e0ac:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   1e0b0:	d06e      	beq.n	1e190 <baudrate_set+0xf0>
   1e0b2:	d90a      	bls.n	1e0ca <baudrate_set+0x2a>
   1e0b4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   1e0b8:	d075      	beq.n	1e1a6 <baudrate_set+0x106>
   1e0ba:	d924      	bls.n	1e106 <baudrate_set+0x66>
   1e0bc:	f647 2312 	movw	r3, #31250	; 0x7a12
   1e0c0:	4299      	cmp	r1, r3
   1e0c2:	d12b      	bne.n	1e11c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e0c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e0c8:	e013      	b.n	1e0f2 <baudrate_set+0x52>
	switch (baudrate) {
   1e0ca:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1e0ce:	d061      	beq.n	1e194 <baudrate_set+0xf4>
   1e0d0:	d907      	bls.n	1e0e2 <baudrate_set+0x42>
   1e0d2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   1e0d6:	d063      	beq.n	1e1a0 <baudrate_set+0x100>
   1e0d8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   1e0dc:	d110      	bne.n	1e100 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e0de:	4b3c      	ldr	r3, [pc, #240]	; (1e1d0 <baudrate_set+0x130>)
   1e0e0:	e007      	b.n	1e0f2 <baudrate_set+0x52>
	switch (baudrate) {
   1e0e2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   1e0e6:	d058      	beq.n	1e19a <baudrate_set+0xfa>
   1e0e8:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   1e0ec:	d105      	bne.n	1e0fa <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1e0ee:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e0f2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   1e0f6:	2000      	movs	r0, #0
   1e0f8:	4770      	bx	lr
	switch (baudrate) {
   1e0fa:	f06f 0015 	mvn.w	r0, #21
   1e0fe:	4770      	bx	lr
   1e100:	f06f 0015 	mvn.w	r0, #21
   1e104:	4770      	bx	lr
   1e106:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1e10a:	d04e      	beq.n	1e1aa <baudrate_set+0x10a>
   1e10c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   1e110:	d101      	bne.n	1e116 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e112:	4b30      	ldr	r3, [pc, #192]	; (1e1d4 <baudrate_set+0x134>)
   1e114:	e7ed      	b.n	1e0f2 <baudrate_set+0x52>
	switch (baudrate) {
   1e116:	f06f 0015 	mvn.w	r0, #21
   1e11a:	4770      	bx	lr
   1e11c:	f06f 0015 	mvn.w	r0, #21
   1e120:	4770      	bx	lr
   1e122:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   1e126:	d042      	beq.n	1e1ae <baudrate_set+0x10e>
   1e128:	d909      	bls.n	1e13e <baudrate_set+0x9e>
   1e12a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1e12e:	d046      	beq.n	1e1be <baudrate_set+0x11e>
   1e130:	d91f      	bls.n	1e172 <baudrate_set+0xd2>
   1e132:	4b29      	ldr	r3, [pc, #164]	; (1e1d8 <baudrate_set+0x138>)
   1e134:	4299      	cmp	r1, r3
   1e136:	d148      	bne.n	1e1ca <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e138:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e13c:	e7d9      	b.n	1e0f2 <baudrate_set+0x52>
	switch (baudrate) {
   1e13e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1e142:	d037      	beq.n	1e1b4 <baudrate_set+0x114>
   1e144:	d905      	bls.n	1e152 <baudrate_set+0xb2>
   1e146:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1e14a:	d10f      	bne.n	1e16c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e14c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e150:	e7cf      	b.n	1e0f2 <baudrate_set+0x52>
	switch (baudrate) {
   1e152:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1e156:	4299      	cmp	r1, r3
   1e158:	d02e      	beq.n	1e1b8 <baudrate_set+0x118>
   1e15a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1e15e:	d102      	bne.n	1e166 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e160:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e164:	e7c5      	b.n	1e0f2 <baudrate_set+0x52>
	switch (baudrate) {
   1e166:	f06f 0015 	mvn.w	r0, #21
   1e16a:	4770      	bx	lr
   1e16c:	f06f 0015 	mvn.w	r0, #21
   1e170:	4770      	bx	lr
   1e172:	4b1a      	ldr	r3, [pc, #104]	; (1e1dc <baudrate_set+0x13c>)
   1e174:	4299      	cmp	r1, r3
   1e176:	d025      	beq.n	1e1c4 <baudrate_set+0x124>
   1e178:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   1e17c:	d102      	bne.n	1e184 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e17e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e182:	e7b6      	b.n	1e0f2 <baudrate_set+0x52>
	switch (baudrate) {
   1e184:	f06f 0015 	mvn.w	r0, #21
   1e188:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e18a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e18e:	e7b0      	b.n	1e0f2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e190:	4b13      	ldr	r3, [pc, #76]	; (1e1e0 <baudrate_set+0x140>)
   1e192:	e7ae      	b.n	1e0f2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e194:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e198:	e7ab      	b.n	1e0f2 <baudrate_set+0x52>
	switch (baudrate) {
   1e19a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e19e:	e7a8      	b.n	1e0f2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e1a0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e1a4:	e7a5      	b.n	1e0f2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e1a6:	4b0f      	ldr	r3, [pc, #60]	; (1e1e4 <baudrate_set+0x144>)
   1e1a8:	e7a3      	b.n	1e0f2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e1aa:	4b0f      	ldr	r3, [pc, #60]	; (1e1e8 <baudrate_set+0x148>)
   1e1ac:	e7a1      	b.n	1e0f2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e1ae:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e1b2:	e79e      	b.n	1e0f2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e1b4:	4b0d      	ldr	r3, [pc, #52]	; (1e1ec <baudrate_set+0x14c>)
   1e1b6:	e79c      	b.n	1e0f2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e1b8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e1bc:	e799      	b.n	1e0f2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e1be:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e1c2:	e796      	b.n	1e0f2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e1c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e1c8:	e793      	b.n	1e0f2 <baudrate_set+0x52>
	switch (baudrate) {
   1e1ca:	f06f 0015 	mvn.w	r0, #21
}
   1e1ce:	4770      	bx	lr
   1e1d0:	0013b000 	.word	0x0013b000
   1e1d4:	004ea000 	.word	0x004ea000
   1e1d8:	000f4240 	.word	0x000f4240
   1e1dc:	0003d090 	.word	0x0003d090
   1e1e0:	00275000 	.word	0x00275000
   1e1e4:	0075c000 	.word	0x0075c000
   1e1e8:	003af000 	.word	0x003af000
   1e1ec:	013a9000 	.word	0x013a9000

0001e1f0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1f2:	4605      	mov	r5, r0
   1e1f4:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1e1f6:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e1f8:	f010 ff57 	bl	2f0aa <k_is_in_isr>
   1e1fc:	b910      	cbnz	r0, 1e204 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1e1fe:	4b12      	ldr	r3, [pc, #72]	; (1e248 <uarte_nrfx_poll_out+0x58>)
   1e200:	781b      	ldrb	r3, [r3, #0]
   1e202:	b983      	cbnz	r3, 1e226 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1e204:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e208:	f3ef 8411 	mrs	r4, BASEPRI
   1e20c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e210:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1e214:	4628      	mov	r0, r5
   1e216:	f00f fd36 	bl	2dc86 <is_tx_ready>
   1e21a:	b940      	cbnz	r0, 1e22e <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   1e21c:	f384 8811 	msr	BASEPRI, r4
   1e220:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1e224:	e7ee      	b.n	1e204 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   1e226:	4628      	mov	r0, r5
   1e228:	f00f fd92 	bl	2dd50 <wait_tx_ready>
   1e22c:	4604      	mov	r4, r0
	}

	*data->char_out = c;
   1e22e:	693b      	ldr	r3, [r7, #16]
   1e230:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1e232:	2201      	movs	r2, #1
   1e234:	6939      	ldr	r1, [r7, #16]
   1e236:	4628      	mov	r0, r5
   1e238:	f00f fd3f 	bl	2dcba <tx_start>
	__asm__ volatile(
   1e23c:	f384 8811 	msr	BASEPRI, r4
   1e240:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1e244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e246:	bf00      	nop
   1e248:	200045fc 	.word	0x200045fc

0001e24c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1e24c:	b538      	push	{r3, r4, r5, lr}
   1e24e:	4604      	mov	r4, r0
   1e250:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e252:	f101 0018 	add.w	r0, r1, #24
   1e256:	f002 fe93 	bl	20f80 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e25a:	4b0e      	ldr	r3, [pc, #56]	; (1e294 <endtx_stoptx_ppi_init+0x48>)
   1e25c:	4298      	cmp	r0, r3
   1e25e:	d111      	bne.n	1e284 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1e260:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e262:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1e266:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e268:	4a0b      	ldr	r2, [pc, #44]	; (1e298 <endtx_stoptx_ppi_init+0x4c>)
   1e26a:	33a2      	adds	r3, #162	; 0xa2
   1e26c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e270:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1e274:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e276:	7e29      	ldrb	r1, [r5, #24]
   1e278:	2301      	movs	r3, #1
   1e27a:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   1e27c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   1e280:	2000      	movs	r0, #0
}
   1e282:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   1e284:	2145      	movs	r1, #69	; 0x45
   1e286:	4805      	ldr	r0, [pc, #20]	; (1e29c <endtx_stoptx_ppi_init+0x50>)
   1e288:	f00a fce1 	bl	28c4e <z_log_minimal_printk>
		return -EIO;
   1e28c:	f06f 0004 	mvn.w	r0, #4
   1e290:	e7f7      	b.n	1e282 <endtx_stoptx_ppi_init+0x36>
   1e292:	bf00      	nop
   1e294:	0bad0000 	.word	0x0bad0000
   1e298:	4001f000 	.word	0x4001f000
   1e29c:	000332a8 	.word	0x000332a8

0001e2a0 <random_byte_get>:
	__asm__ volatile(
   1e2a0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e2a4:	f3ef 8311 	mrs	r3, BASEPRI
   1e2a8:	f382 8812 	msr	BASEPRI_MAX, r2
   1e2ac:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e2b0:	4a0a      	ldr	r2, [pc, #40]	; (1e2dc <random_byte_get+0x3c>)
   1e2b2:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e2b6:	b16a      	cbz	r2, 1e2d4 <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e2b8:	4a08      	ldr	r2, [pc, #32]	; (1e2dc <random_byte_get+0x3c>)
   1e2ba:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e2be:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e2c0:	2100      	movs	r1, #0
   1e2c2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   1e2c6:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
   1e2ca:	f383 8811 	msr	BASEPRI, r3
   1e2ce:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e2d2:	4770      	bx	lr
	int retval = -EAGAIN;
   1e2d4:	f06f 000a 	mvn.w	r0, #10
   1e2d8:	e7f7      	b.n	1e2ca <random_byte_get+0x2a>
   1e2da:	bf00      	nop
   1e2dc:	4000d000 	.word	0x4000d000

0001e2e0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e2e2:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   1e2e4:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e2e6:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   1e2e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e2ec:	f3ef 8011 	mrs	r0, BASEPRI
   1e2f0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e2f4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e2f8:	f89e 6000 	ldrb.w	r6, [lr]
   1e2fc:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e2fe:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
   1e302:	1bad      	subs	r5, r5, r6
   1e304:	4025      	ands	r5, r4
	if (available < len) {
   1e306:	42aa      	cmp	r2, r5
   1e308:	d900      	bls.n	1e30c <rng_pool_get+0x2c>
		len = available;
   1e30a:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e30c:	eb06 0c02 	add.w	ip, r6, r2
   1e310:	ea0c 0c04 	and.w	ip, ip, r4
   1e314:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
   1e318:	f380 8811 	msr	BASEPRI, r0
   1e31c:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1e320:	4608      	mov	r0, r1
}
   1e322:	e007      	b.n	1e334 <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1e324:	eb0e 0203 	add.w	r2, lr, r3
   1e328:	7952      	ldrb	r2, [r2, #5]
   1e32a:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   1e32e:	3301      	adds	r3, #1
   1e330:	4023      	ands	r3, r4
	while (likely(len--)) {
   1e332:	4662      	mov	r2, ip
   1e334:	f102 3cff 	add.w	ip, r2, #4294967295
   1e338:	fa1f fc8c 	uxth.w	ip, ip
   1e33c:	2a00      	cmp	r2, #0
   1e33e:	d1f1      	bne.n	1e324 <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e340:	42be      	cmp	r6, r7
   1e342:	d10f      	bne.n	1e364 <rng_pool_get+0x84>
	__asm__ volatile(
   1e344:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e348:	f3ef 8311 	mrs	r3, BASEPRI
   1e34c:	f382 8812 	msr	BASEPRI_MAX, r2
   1e350:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e354:	f89e 2000 	ldrb.w	r2, [lr]
   1e358:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   1e35c:	f383 8811 	msr	BASEPRI, r3
   1e360:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e364:	1a40      	subs	r0, r0, r1
   1e366:	b280      	uxth	r0, r0
	available = available - len;
   1e368:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   1e36a:	f89e 3004 	ldrb.w	r3, [lr, #4]
   1e36e:	42ab      	cmp	r3, r5
   1e370:	d302      	bcc.n	1e378 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e372:	4b02      	ldr	r3, [pc, #8]	; (1e37c <rng_pool_get+0x9c>)
   1e374:	2201      	movs	r2, #1
   1e376:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e378:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e37a:	bf00      	nop
   1e37c:	4000d000 	.word	0x4000d000

0001e380 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1e380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e382:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1e384:	6900      	ldr	r0, [r0, #16]
   1e386:	4a2d      	ldr	r2, [pc, #180]	; (1e43c <entropy_nrf5_get_entropy_isr+0xbc>)
   1e388:	4290      	cmp	r0, r2
   1e38a:	d108      	bne.n	1e39e <entropy_nrf5_get_entropy_isr+0x1e>
   1e38c:	460d      	mov	r5, r1

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e38e:	f013 0f01 	tst.w	r3, #1
   1e392:	d110      	bne.n	1e3b6 <entropy_nrf5_get_entropy_isr+0x36>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e394:	4622      	mov	r2, r4
   1e396:	482a      	ldr	r0, [pc, #168]	; (1e440 <entropy_nrf5_get_entropy_isr+0xc0>)
   1e398:	f7ff ffa2 	bl	1e2e0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1e39e:	4c29      	ldr	r4, [pc, #164]	; (1e444 <entropy_nrf5_get_entropy_isr+0xc4>)
   1e3a0:	f240 1207 	movw	r2, #263	; 0x107
   1e3a4:	4621      	mov	r1, r4
   1e3a6:	4828      	ldr	r0, [pc, #160]	; (1e448 <entropy_nrf5_get_entropy_isr+0xc8>)
   1e3a8:	f00a fc31 	bl	28c0e <assert_print>
   1e3ac:	f240 1107 	movw	r1, #263	; 0x107
   1e3b0:	4620      	mov	r0, r4
   1e3b2:	f00a fc25 	bl	28c00 <assert_post_action>
	if (len) {
   1e3b6:	b90c      	cbnz	r4, 1e3bc <entropy_nrf5_get_entropy_isr+0x3c>
	return cnt;
   1e3b8:	4620      	mov	r0, r4
   1e3ba:	e7ef      	b.n	1e39c <entropy_nrf5_get_entropy_isr+0x1c>
	__asm__ volatile(
   1e3bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e3c0:	f3ef 8611 	mrs	r6, BASEPRI
   1e3c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1e3c8:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e3cc:	200d      	movs	r0, #13
   1e3ce:	f7f4 fe75 	bl	130bc <arch_irq_is_enabled>
   1e3d2:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e3d4:	200d      	movs	r0, #13
   1e3d6:	f00b fb6e 	bl	29ab6 <arch_irq_disable>
	__asm__ volatile(
   1e3da:	f386 8811 	msr	BASEPRI, r6
   1e3de:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e3e2:	4b1a      	ldr	r3, [pc, #104]	; (1e44c <entropy_nrf5_get_entropy_isr+0xcc>)
   1e3e4:	2200      	movs	r2, #0
   1e3e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e3ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e3ee:	2201      	movs	r2, #1
   1e3f0:	601a      	str	r2, [r3, #0]
   1e3f2:	4b17      	ldr	r3, [pc, #92]	; (1e450 <entropy_nrf5_get_entropy_isr+0xd0>)
   1e3f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1e3f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e3fc:	4626      	mov	r6, r4
   1e3fe:	e004      	b.n	1e40a <entropy_nrf5_get_entropy_isr+0x8a>
   1e400:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e404:	bf20      	wfe
				__SEV();
   1e406:	bf40      	sev
				__WFE();
   1e408:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e40a:	4b10      	ldr	r3, [pc, #64]	; (1e44c <entropy_nrf5_get_entropy_isr+0xcc>)
   1e40c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1e410:	2b00      	cmp	r3, #0
   1e412:	d0f5      	beq.n	1e400 <entropy_nrf5_get_entropy_isr+0x80>
			byte = random_byte_get();
   1e414:	f7ff ff44 	bl	1e2a0 <random_byte_get>
   1e418:	4b0d      	ldr	r3, [pc, #52]	; (1e450 <entropy_nrf5_get_entropy_isr+0xd0>)
   1e41a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1e41e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1e422:	2800      	cmp	r0, #0
   1e424:	db02      	blt.n	1e42c <entropy_nrf5_get_entropy_isr+0xac>
			buf[--len] = byte;
   1e426:	3e01      	subs	r6, #1
   1e428:	b2b6      	uxth	r6, r6
   1e42a:	55a8      	strb	r0, [r5, r6]
		} while (len);
   1e42c:	2e00      	cmp	r6, #0
   1e42e:	d1ec      	bne.n	1e40a <entropy_nrf5_get_entropy_isr+0x8a>
		if (irq_enabled) {
   1e430:	2f00      	cmp	r7, #0
   1e432:	d0c1      	beq.n	1e3b8 <entropy_nrf5_get_entropy_isr+0x38>
			irq_enable(IRQN);
   1e434:	200d      	movs	r0, #13
   1e436:	f00b fb39 	bl	29aac <arch_irq_enable>
   1e43a:	e7bd      	b.n	1e3b8 <entropy_nrf5_get_entropy_isr+0x38>
   1e43c:	20002c44 	.word	0x20002c44
   1e440:	20002c74 	.word	0x20002c74
   1e444:	00033370 	.word	0x00033370
   1e448:	00030128 	.word	0x00030128
   1e44c:	4000d000 	.word	0x4000d000
   1e450:	e000e100 	.word	0xe000e100

0001e454 <isr>:
{
   1e454:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e456:	f7ff ff23 	bl	1e2a0 <random_byte_get>
	if (byte < 0) {
   1e45a:	2800      	cmp	r0, #0
   1e45c:	db06      	blt.n	1e46c <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e45e:	b2c4      	uxtb	r4, r0
   1e460:	4621      	mov	r1, r4
   1e462:	480a      	ldr	r0, [pc, #40]	; (1e48c <isr+0x38>)
   1e464:	f00f fd1a 	bl	2de9c <rng_pool_put>
	if (ret < 0) {
   1e468:	2800      	cmp	r0, #0
   1e46a:	db00      	blt.n	1e46e <isr+0x1a>
}
   1e46c:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1e46e:	4621      	mov	r1, r4
   1e470:	4807      	ldr	r0, [pc, #28]	; (1e490 <isr+0x3c>)
   1e472:	f00f fd13 	bl	2de9c <rng_pool_put>
		if (ret < 0) {
   1e476:	2800      	cmp	r0, #0
   1e478:	db03      	blt.n	1e482 <isr+0x2e>
	z_impl_k_sem_give(sem);
   1e47a:	4806      	ldr	r0, [pc, #24]	; (1e494 <isr+0x40>)
   1e47c:	f004 f956 	bl	2272c <z_impl_k_sem_give>
}
   1e480:	e7f4      	b.n	1e46c <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e482:	4b05      	ldr	r3, [pc, #20]	; (1e498 <isr+0x44>)
   1e484:	2201      	movs	r2, #1
   1e486:	605a      	str	r2, [r3, #4]
}
   1e488:	e7f7      	b.n	1e47a <isr+0x26>
   1e48a:	bf00      	nop
   1e48c:	20002c74 	.word	0x20002c74
   1e490:	20002c89 	.word	0x20002c89
   1e494:	20002c5c 	.word	0x20002c5c
   1e498:	4000d000 	.word	0x4000d000

0001e49c <entropy_nrf5_get_entropy>:
{
   1e49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e49e:	460f      	mov	r7, r1
   1e4a0:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1e4a2:	6902      	ldr	r2, [r0, #16]
   1e4a4:	4b17      	ldr	r3, [pc, #92]	; (1e504 <entropy_nrf5_get_entropy+0x68>)
   1e4a6:	429a      	cmp	r2, r3
   1e4a8:	d011      	beq.n	1e4ce <entropy_nrf5_get_entropy+0x32>
   1e4aa:	4c17      	ldr	r4, [pc, #92]	; (1e508 <entropy_nrf5_get_entropy+0x6c>)
   1e4ac:	22e9      	movs	r2, #233	; 0xe9
   1e4ae:	4621      	mov	r1, r4
   1e4b0:	4816      	ldr	r0, [pc, #88]	; (1e50c <entropy_nrf5_get_entropy+0x70>)
   1e4b2:	f00a fbac 	bl	28c0e <assert_print>
   1e4b6:	21e9      	movs	r1, #233	; 0xe9
   1e4b8:	4620      	mov	r0, r4
   1e4ba:	f00a fba1 	bl	28c00 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1e4be:	f04f 32ff 	mov.w	r2, #4294967295
   1e4c2:	f04f 33ff 	mov.w	r3, #4294967295
   1e4c6:	f106 0018 	add.w	r0, r6, #24
   1e4ca:	f004 f96d 	bl	227a8 <z_impl_k_sem_take>
	while (len) {
   1e4ce:	b1bc      	cbz	r4, 1e500 <entropy_nrf5_get_entropy+0x64>
   1e4d0:	4e0c      	ldr	r6, [pc, #48]	; (1e504 <entropy_nrf5_get_entropy+0x68>)
   1e4d2:	f04f 32ff 	mov.w	r2, #4294967295
   1e4d6:	f04f 33ff 	mov.w	r3, #4294967295
   1e4da:	4630      	mov	r0, r6
   1e4dc:	f004 f964 	bl	227a8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e4e0:	4622      	mov	r2, r4
   1e4e2:	4639      	mov	r1, r7
   1e4e4:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1e4e8:	f7ff fefa 	bl	1e2e0 <rng_pool_get>
   1e4ec:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1e4ee:	4630      	mov	r0, r6
   1e4f0:	f004 f91c 	bl	2272c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e4f4:	2d00      	cmp	r5, #0
   1e4f6:	d0e2      	beq.n	1e4be <entropy_nrf5_get_entropy+0x22>
		len -= bytes;
   1e4f8:	1b64      	subs	r4, r4, r5
   1e4fa:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e4fc:	442f      	add	r7, r5
   1e4fe:	e7e6      	b.n	1e4ce <entropy_nrf5_get_entropy+0x32>
}
   1e500:	2000      	movs	r0, #0
   1e502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e504:	20002c44 	.word	0x20002c44
   1e508:	00033370 	.word	0x00033370
   1e50c:	00030128 	.word	0x00030128

0001e510 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1e510:	b510      	push	{r4, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1e512:	6902      	ldr	r2, [r0, #16]
   1e514:	4b1f      	ldr	r3, [pc, #124]	; (1e594 <entropy_nrf5_init+0x84>)
   1e516:	429a      	cmp	r2, r3
   1e518:	d130      	bne.n	1e57c <entropy_nrf5_init+0x6c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e51a:	4c1e      	ldr	r4, [pc, #120]	; (1e594 <entropy_nrf5_init+0x84>)
   1e51c:	2201      	movs	r2, #1
   1e51e:	4611      	mov	r1, r2
   1e520:	4620      	mov	r0, r4
   1e522:	f010 fe7d 	bl	2f220 <z_impl_k_sem_init>
   1e526:	2201      	movs	r2, #1
   1e528:	2100      	movs	r1, #0
   1e52a:	f104 0018 	add.w	r0, r4, #24
   1e52e:	f010 fe77 	bl	2f220 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1e532:	2204      	movs	r2, #4
   1e534:	2108      	movs	r1, #8
   1e536:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1e53a:	f00f fcc2 	bl	2dec2 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1e53e:	220c      	movs	r2, #12
   1e540:	2110      	movs	r1, #16
   1e542:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1e546:	f00f fcbc 	bl	2dec2 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1e54a:	4b13      	ldr	r3, [pc, #76]	; (1e598 <entropy_nrf5_init+0x88>)
   1e54c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e550:	f022 0201 	bic.w	r2, r2, #1
   1e554:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e558:	2400      	movs	r4, #0
   1e55a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   1e55e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e562:	2101      	movs	r1, #1
   1e564:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e568:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e56a:	4622      	mov	r2, r4
   1e56c:	200d      	movs	r0, #13
   1e56e:	f7f4 fdb3 	bl	130d8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e572:	200d      	movs	r0, #13
   1e574:	f00b fa9a 	bl	29aac <arch_irq_enable>

	return 0;
}
   1e578:	4620      	mov	r0, r4
   1e57a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1e57c:	4c07      	ldr	r4, [pc, #28]	; (1e59c <entropy_nrf5_init+0x8c>)
   1e57e:	f44f 72ab 	mov.w	r2, #342	; 0x156
   1e582:	4621      	mov	r1, r4
   1e584:	4806      	ldr	r0, [pc, #24]	; (1e5a0 <entropy_nrf5_init+0x90>)
   1e586:	f00a fb42 	bl	28c0e <assert_print>
   1e58a:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1e58e:	4620      	mov	r0, r4
   1e590:	f00a fb36 	bl	28c00 <assert_post_action>
   1e594:	20002c44 	.word	0x20002c44
   1e598:	4000d000 	.word	0x4000d000
   1e59c:	00033370 	.word	0x00033370
   1e5a0:	00030128 	.word	0x00030128

0001e5a4 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1e5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5a6:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(dev != NULL);
   1e5a8:	b130      	cbz	r0, 1e5b8 <entropy_cc3xx_rng_get_entropy+0x14>
   1e5aa:	460f      	mov	r7, r1
   1e5ac:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
   1e5ae:	b169      	cbz	r1, 1e5cc <entropy_cc3xx_rng_get_entropy+0x28>

	return err;
#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   1e5b0:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   1e5b4:	2400      	movs	r4, #0
   1e5b6:	e01e      	b.n	1e5f6 <entropy_cc3xx_rng_get_entropy+0x52>
	__ASSERT_NO_MSG(dev != NULL);
   1e5b8:	4c19      	ldr	r4, [pc, #100]	; (1e620 <entropy_cc3xx_rng_get_entropy+0x7c>)
   1e5ba:	2220      	movs	r2, #32
   1e5bc:	4621      	mov	r1, r4
   1e5be:	4819      	ldr	r0, [pc, #100]	; (1e624 <entropy_cc3xx_rng_get_entropy+0x80>)
   1e5c0:	f00a fb25 	bl	28c0e <assert_print>
   1e5c4:	2120      	movs	r1, #32
   1e5c6:	4620      	mov	r0, r4
   1e5c8:	f00a fb1a 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1e5cc:	4c14      	ldr	r4, [pc, #80]	; (1e620 <entropy_cc3xx_rng_get_entropy+0x7c>)
   1e5ce:	2221      	movs	r2, #33	; 0x21
   1e5d0:	4621      	mov	r1, r4
   1e5d2:	4814      	ldr	r0, [pc, #80]	; (1e624 <entropy_cc3xx_rng_get_entropy+0x80>)
   1e5d4:	f00a fb1b 	bl	28c0e <assert_print>
   1e5d8:	2121      	movs	r1, #33	; 0x21
   1e5da:	4620      	mov	r0, r4
   1e5dc:	f00a fb10 	bl	28c00 <assert_post_action>
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   1e5e0:	ab01      	add	r3, sp, #4
   1e5e2:	462a      	mov	r2, r5
   1e5e4:	1939      	adds	r1, r7, r4
   1e5e6:	2000      	movs	r0, #0
   1e5e8:	f007 f9ee 	bl	259c8 <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   1e5ec:	b970      	cbnz	r0, 1e60c <entropy_cc3xx_rng_get_entropy+0x68>
			return -EINVAL;
		}
#endif /* defined(CONFIG_SPM) */
		if (olen != chunk_size) {
   1e5ee:	9b01      	ldr	r3, [sp, #4]
   1e5f0:	42ab      	cmp	r3, r5
   1e5f2:	d10f      	bne.n	1e614 <entropy_cc3xx_rng_get_entropy+0x70>
			return -EINVAL;
		}

		offset += chunk_size;
   1e5f4:	442c      	add	r4, r5
	while (offset < length) {
   1e5f6:	42a6      	cmp	r6, r4
   1e5f8:	d905      	bls.n	1e606 <entropy_cc3xx_rng_get_entropy+0x62>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1e5fa:	1b33      	subs	r3, r6, r4
   1e5fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e600:	d2ee      	bcs.n	1e5e0 <entropy_cc3xx_rng_get_entropy+0x3c>
			chunk_size = length - offset;
   1e602:	461d      	mov	r5, r3
   1e604:	e7ec      	b.n	1e5e0 <entropy_cc3xx_rng_get_entropy+0x3c>
	}

	if (offset == length) {
   1e606:	d008      	beq.n	1e61a <entropy_cc3xx_rng_get_entropy+0x76>
	int err = EINVAL;
   1e608:	2016      	movs	r0, #22
   1e60a:	e001      	b.n	1e610 <entropy_cc3xx_rng_get_entropy+0x6c>
			return -EINVAL;
   1e60c:	f06f 0015 	mvn.w	r0, #21
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1e610:	b003      	add	sp, #12
   1e612:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EINVAL;
   1e614:	f06f 0015 	mvn.w	r0, #21
   1e618:	e7fa      	b.n	1e610 <entropy_cc3xx_rng_get_entropy+0x6c>
		err = 0;
   1e61a:	2000      	movs	r0, #0
   1e61c:	e7f8      	b.n	1e610 <entropy_cc3xx_rng_get_entropy+0x6c>
   1e61e:	bf00      	nop
   1e620:	000333d4 	.word	0x000333d4
   1e624:	00030128 	.word	0x00030128

0001e628 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e628:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1e62c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e630:	4b01      	ldr	r3, [pc, #4]	; (1e638 <set_comparator+0x10>)
   1e632:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1e636:	4770      	bx	lr
   1e638:	40011000 	.word	0x40011000

0001e63c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1e63c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e640:	4b01      	ldr	r3, [pc, #4]	; (1e648 <get_comparator+0xc>)
   1e642:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   1e646:	4770      	bx	lr
   1e648:	40011000 	.word	0x40011000

0001e64c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e64c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e650:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e652:	4a02      	ldr	r2, [pc, #8]	; (1e65c <event_enable+0x10>)
   1e654:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   1e658:	4770      	bx	lr
   1e65a:	bf00      	nop
   1e65c:	40011000 	.word	0x40011000

0001e660 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e664:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1e666:	4a02      	ldr	r2, [pc, #8]	; (1e670 <event_disable+0x10>)
   1e668:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   1e66c:	4770      	bx	lr
   1e66e:	bf00      	nop
   1e670:	40011000 	.word	0x40011000

0001e674 <counter>:
     return p_reg->COUNTER;
   1e674:	4b01      	ldr	r3, [pc, #4]	; (1e67c <counter+0x8>)
   1e676:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   1e67a:	4770      	bx	lr
   1e67c:	40011000 	.word	0x40011000

0001e680 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   1e680:	b538      	push	{r3, r4, r5, lr}
   1e682:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   1e684:	f00f fc54 	bl	2df30 <full_int_lock>
   1e688:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1e68a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e68e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   1e690:	4a16      	ldr	r2, [pc, #88]	; (1e6ec <channel_processing_check_and_clear+0x6c>)
   1e692:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1e696:	4213      	tst	r3, r2
   1e698:	d105      	bne.n	1e6a6 <channel_processing_check_and_clear+0x26>
	bool result = false;
   1e69a:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   1e69c:	4628      	mov	r0, r5
   1e69e:	f00f fc4b 	bl	2df38 <full_int_unlock>

	return result;
}
   1e6a2:	4620      	mov	r0, r4
   1e6a4:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e6a6:	2301      	movs	r3, #1
   1e6a8:	40a3      	lsls	r3, r4
   1e6aa:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e6ac:	4a10      	ldr	r2, [pc, #64]	; (1e6f0 <channel_processing_check_and_clear+0x70>)
   1e6ae:	f3bf 8f5b 	dmb	ish
   1e6b2:	e852 1f00 	ldrex	r1, [r2]
   1e6b6:	ea01 0003 	and.w	r0, r1, r3
   1e6ba:	e842 0c00 	strex	ip, r0, [r2]
   1e6be:	f1bc 0f00 	cmp.w	ip, #0
   1e6c2:	d1f6      	bne.n	1e6b2 <channel_processing_check_and_clear+0x32>
   1e6c4:	f3bf 8f5b 	dmb	ish
   1e6c8:	b949      	cbnz	r1, 1e6de <channel_processing_check_and_clear+0x5e>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e6ca:	f104 0350 	add.w	r3, r4, #80	; 0x50
   1e6ce:	009b      	lsls	r3, r3, #2
   1e6d0:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e6d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e6d6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1e6da:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e6dc:	b123      	cbz	r3, 1e6e8 <channel_processing_check_and_clear+0x68>
			event_clear(chan);
   1e6de:	4620      	mov	r0, r4
   1e6e0:	f00f fc17 	bl	2df12 <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e6e4:	2401      	movs	r4, #1
   1e6e6:	e7d9      	b.n	1e69c <channel_processing_check_and_clear+0x1c>
   1e6e8:	2400      	movs	r4, #0
   1e6ea:	e7d7      	b.n	1e69c <channel_processing_check_and_clear+0x1c>
   1e6ec:	40011000 	.word	0x40011000
   1e6f0:	20002c98 	.word	0x20002c98

0001e6f4 <compare_int_lock>:
{
   1e6f4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e6f6:	2301      	movs	r3, #1
   1e6f8:	4083      	lsls	r3, r0
   1e6fa:	ea6f 0c03 	mvn.w	ip, r3
   1e6fe:	4a0e      	ldr	r2, [pc, #56]	; (1e738 <compare_int_lock+0x44>)
   1e700:	f3bf 8f5b 	dmb	ish
   1e704:	e852 1f00 	ldrex	r1, [r2]
   1e708:	ea01 0e0c 	and.w	lr, r1, ip
   1e70c:	e842 e400 	strex	r4, lr, [r2]
   1e710:	2c00      	cmp	r4, #0
   1e712:	d1f7      	bne.n	1e704 <compare_int_lock+0x10>
   1e714:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e718:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e71c:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   1e71e:	4807      	ldr	r0, [pc, #28]	; (1e73c <compare_int_lock+0x48>)
   1e720:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1e724:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e728:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   1e72c:	420b      	tst	r3, r1
}
   1e72e:	bf14      	ite	ne
   1e730:	2001      	movne	r0, #1
   1e732:	2000      	moveq	r0, #0
   1e734:	bd10      	pop	{r4, pc}
   1e736:	bf00      	nop
   1e738:	20002c9c 	.word	0x20002c9c
   1e73c:	40011000 	.word	0x40011000

0001e740 <sys_clock_timeout_handler>:
{
   1e740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e744:	4607      	mov	r7, r0
   1e746:	4614      	mov	r4, r2
   1e748:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   1e74a:	4610      	mov	r0, r2
   1e74c:	4619      	mov	r1, r3
   1e74e:	f00f fbec 	bl	2df2a <absolute_time_to_cc>
   1e752:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e754:	4b15      	ldr	r3, [pc, #84]	; (1e7ac <sys_clock_timeout_handler+0x6c>)
   1e756:	681a      	ldr	r2, [r3, #0]
   1e758:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   1e75a:	601c      	str	r4, [r3, #0]
   1e75c:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e75e:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1e762:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e766:	d309      	bcc.n	1e77c <sys_clock_timeout_handler+0x3c>
	return false;
   1e768:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e76a:	f006 f8ab 	bl	248c4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   1e76e:	4638      	mov	r0, r7
   1e770:	f7ff ff64 	bl	1e63c <get_comparator>
   1e774:	42a8      	cmp	r0, r5
   1e776:	d00e      	beq.n	1e796 <sys_clock_timeout_handler+0x56>
}
   1e778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e77c:	4b0c      	ldr	r3, [pc, #48]	; (1e7b0 <sys_clock_timeout_handler+0x70>)
   1e77e:	681b      	ldr	r3, [r3, #0]
   1e780:	0a1a      	lsrs	r2, r3, #8
   1e782:	061b      	lsls	r3, r3, #24
   1e784:	eb15 0803 	adds.w	r8, r5, r3
   1e788:	f142 0900 	adc.w	r9, r2, #0
   1e78c:	4b09      	ldr	r3, [pc, #36]	; (1e7b4 <sys_clock_timeout_handler+0x74>)
   1e78e:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
   1e792:	2401      	movs	r4, #1
   1e794:	e7e9      	b.n	1e76a <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
   1e796:	b11c      	cbz	r4, 1e7a0 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
   1e798:	4638      	mov	r0, r7
   1e79a:	f7ff ff57 	bl	1e64c <event_enable>
}
   1e79e:	e7eb      	b.n	1e778 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
   1e7a0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1e7a4:	4638      	mov	r0, r7
   1e7a6:	f7ff ff3f 	bl	1e628 <set_comparator>
   1e7aa:	e7f5      	b.n	1e798 <sys_clock_timeout_handler+0x58>
   1e7ac:	20001eb8 	.word	0x20001eb8
   1e7b0:	20002ca0 	.word	0x20002ca0
   1e7b4:	20001ec0 	.word	0x20001ec0

0001e7b8 <compare_int_unlock>:
	if (key) {
   1e7b8:	b901      	cbnz	r1, 1e7bc <compare_int_unlock+0x4>
}
   1e7ba:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   1e7bc:	2301      	movs	r3, #1
   1e7be:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e7c0:	4a11      	ldr	r2, [pc, #68]	; (1e808 <compare_int_unlock+0x50>)
   1e7c2:	f3bf 8f5b 	dmb	ish
   1e7c6:	e852 cf00 	ldrex	ip, [r2]
   1e7ca:	ea4c 0c03 	orr.w	ip, ip, r3
   1e7ce:	e842 c100 	strex	r1, ip, [r2]
   1e7d2:	2900      	cmp	r1, #0
   1e7d4:	d1f7      	bne.n	1e7c6 <compare_int_unlock+0xe>
   1e7d6:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e7da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e7de:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1e7e0:	4a0a      	ldr	r2, [pc, #40]	; (1e80c <compare_int_unlock+0x54>)
   1e7e2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e7e6:	f3bf 8f5b 	dmb	ish
   1e7ea:	4b09      	ldr	r3, [pc, #36]	; (1e810 <compare_int_unlock+0x58>)
   1e7ec:	681b      	ldr	r3, [r3, #0]
   1e7ee:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e7f2:	40c3      	lsrs	r3, r0
   1e7f4:	f013 0f01 	tst.w	r3, #1
   1e7f8:	d0df      	beq.n	1e7ba <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e7fa:	4b06      	ldr	r3, [pc, #24]	; (1e814 <compare_int_unlock+0x5c>)
   1e7fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1e800:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1e804:	e7d9      	b.n	1e7ba <compare_int_unlock+0x2>
   1e806:	bf00      	nop
   1e808:	20002c9c 	.word	0x20002c9c
   1e80c:	40011000 	.word	0x40011000
   1e810:	20002c98 	.word	0x20002c98
   1e814:	e000e100 	.word	0xe000e100

0001e818 <z_nrf_rtc_timer_read>:
{
   1e818:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e81a:	4b0d      	ldr	r3, [pc, #52]	; (1e850 <z_nrf_rtc_timer_read+0x38>)
   1e81c:	681c      	ldr	r4, [r3, #0]
   1e81e:	0a25      	lsrs	r5, r4, #8
   1e820:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e822:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1e826:	f7ff ff25 	bl	1e674 <counter>
   1e82a:	4603      	mov	r3, r0
	val += cntr;
   1e82c:	1900      	adds	r0, r0, r4
   1e82e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e836:	d20a      	bcs.n	1e84e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1e838:	4b06      	ldr	r3, [pc, #24]	; (1e854 <z_nrf_rtc_timer_read+0x3c>)
   1e83a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e83e:	4290      	cmp	r0, r2
   1e840:	eb71 0303 	sbcs.w	r3, r1, r3
   1e844:	d203      	bcs.n	1e84e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1e846:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e84a:	f141 0100 	adc.w	r1, r1, #0
}
   1e84e:	bd38      	pop	{r3, r4, r5, pc}
   1e850:	20002ca0 	.word	0x20002ca0
   1e854:	20001ec0 	.word	0x20001ec0

0001e858 <process_channel>:

static void process_channel(int32_t chan)
{
   1e858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e85c:	b082      	sub	sp, #8
   1e85e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   1e860:	f7ff ff0e 	bl	1e680 <channel_processing_check_and_clear>
   1e864:	b910      	cbnz	r0, 1e86c <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
   1e866:	b002      	add	sp, #8
   1e868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1e86c:	f7ff ffd4 	bl	1e818 <z_nrf_rtc_timer_read>
   1e870:	4682      	mov	sl, r0
   1e872:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   1e874:	f00f fb5c 	bl	2df30 <full_int_lock>
   1e878:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   1e87a:	4b13      	ldr	r3, [pc, #76]	; (1e8c8 <process_channel+0x70>)
   1e87c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1e880:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1e884:	45c2      	cmp	sl, r8
   1e886:	eb75 0509 	sbcs.w	r5, r5, r9
   1e88a:	d20b      	bcs.n	1e8a4 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1e88c:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   1e88e:	4630      	mov	r0, r6
   1e890:	f00f fb52 	bl	2df38 <full_int_unlock>
		if (handler) {
   1e894:	2d00      	cmp	r5, #0
   1e896:	d0e6      	beq.n	1e866 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   1e898:	9700      	str	r7, [sp, #0]
   1e89a:	4642      	mov	r2, r8
   1e89c:	464b      	mov	r3, r9
   1e89e:	4620      	mov	r0, r4
   1e8a0:	47a8      	blx	r5
}
   1e8a2:	e7e0      	b.n	1e866 <process_channel+0xe>
			handler = cc_data[chan].callback;
   1e8a4:	4a08      	ldr	r2, [pc, #32]	; (1e8c8 <process_channel+0x70>)
   1e8a6:	0123      	lsls	r3, r4, #4
   1e8a8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1e8ac:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   1e8ae:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   1e8b0:	2000      	movs	r0, #0
   1e8b2:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e8b4:	f04f 32ff 	mov.w	r2, #4294967295
   1e8b8:	f04f 33ff 	mov.w	r3, #4294967295
   1e8bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   1e8c0:	4620      	mov	r0, r4
   1e8c2:	f7ff fecd 	bl	1e660 <event_disable>
   1e8c6:	e7e2      	b.n	1e88e <process_channel+0x36>
   1e8c8:	20001ea8 	.word	0x20001ea8

0001e8cc <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1e8cc:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1e8ce:	4b0e      	ldr	r3, [pc, #56]	; (1e908 <rtc_nrf_isr+0x3c>)
   1e8d0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1e8d4:	f013 0f02 	tst.w	r3, #2
   1e8d8:	d00d      	beq.n	1e8f6 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e8da:	4b0b      	ldr	r3, [pc, #44]	; (1e908 <rtc_nrf_isr+0x3c>)
   1e8dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1e8e0:	b14b      	cbz	r3, 1e8f6 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e8e2:	4b09      	ldr	r3, [pc, #36]	; (1e908 <rtc_nrf_isr+0x3c>)
   1e8e4:	2200      	movs	r2, #0
   1e8e6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1e8ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1e8ee:	4a07      	ldr	r2, [pc, #28]	; (1e90c <rtc_nrf_isr+0x40>)
   1e8f0:	6813      	ldr	r3, [r2, #0]
   1e8f2:	3301      	adds	r3, #1
   1e8f4:	6013      	str	r3, [r2, #0]
{
   1e8f6:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e8f8:	2c00      	cmp	r4, #0
   1e8fa:	dd00      	ble.n	1e8fe <rtc_nrf_isr+0x32>
		process_channel(chan);
	}
}
   1e8fc:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1e8fe:	4620      	mov	r0, r4
   1e900:	f7ff ffaa 	bl	1e858 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e904:	3401      	adds	r4, #1
   1e906:	e7f7      	b.n	1e8f8 <rtc_nrf_isr+0x2c>
   1e908:	40011000 	.word	0x40011000
   1e90c:	20002ca0 	.word	0x20002ca0

0001e910 <compare_set_nolocks>:
{
   1e910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e912:	4606      	mov	r6, r0
   1e914:	4614      	mov	r4, r2
   1e916:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   1e918:	4610      	mov	r0, r2
   1e91a:	4619      	mov	r1, r3
   1e91c:	f00f fb05 	bl	2df2a <absolute_time_to_cc>
   1e920:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e922:	f7ff ff79 	bl	1e818 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e926:	42a0      	cmp	r0, r4
   1e928:	eb71 0305 	sbcs.w	r3, r1, r5
   1e92c:	d21d      	bcs.n	1e96a <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
   1e92e:	1a20      	subs	r0, r4, r0
   1e930:	eb65 0101 	sbc.w	r1, r5, r1
   1e934:	4b1b      	ldr	r3, [pc, #108]	; (1e9a4 <compare_set_nolocks+0x94>)
   1e936:	4298      	cmp	r0, r3
   1e938:	f171 0100 	sbcs.w	r1, r1, #0
   1e93c:	d22f      	bcs.n	1e99e <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
   1e93e:	4b1a      	ldr	r3, [pc, #104]	; (1e9a8 <compare_set_nolocks+0x98>)
   1e940:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1e944:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1e948:	42ab      	cmp	r3, r5
   1e94a:	bf08      	it	eq
   1e94c:	42a2      	cmpeq	r2, r4
   1e94e:	d01a      	beq.n	1e986 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   1e950:	4639      	mov	r1, r7
   1e952:	4630      	mov	r0, r6
   1e954:	f00f faf3 	bl	2df3e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   1e958:	4639      	mov	r1, r7
   1e95a:	f00f fad6 	bl	2df0a <counter_sub>
   1e95e:	1900      	adds	r0, r0, r4
   1e960:	f145 0300 	adc.w	r3, r5, #0
   1e964:	4604      	mov	r4, r0
   1e966:	461d      	mov	r5, r3
   1e968:	e00d      	b.n	1e986 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
   1e96a:	2301      	movs	r3, #1
   1e96c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e96e:	4a0f      	ldr	r2, [pc, #60]	; (1e9ac <compare_set_nolocks+0x9c>)
   1e970:	f3bf 8f5b 	dmb	ish
   1e974:	e852 0f00 	ldrex	r0, [r2]
   1e978:	4318      	orrs	r0, r3
   1e97a:	e842 0100 	strex	r1, r0, [r2]
   1e97e:	2900      	cmp	r1, #0
   1e980:	d1f8      	bne.n	1e974 <compare_set_nolocks+0x64>
   1e982:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1e986:	4b08      	ldr	r3, [pc, #32]	; (1e9a8 <compare_set_nolocks+0x98>)
   1e988:	0132      	lsls	r2, r6, #4
   1e98a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1e98e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1e992:	9906      	ldr	r1, [sp, #24]
   1e994:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1e996:	9b07      	ldr	r3, [sp, #28]
   1e998:	6073      	str	r3, [r6, #4]
	return ret;
   1e99a:	2000      	movs	r0, #0
}
   1e99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   1e99e:	f06f 0015 	mvn.w	r0, #21
   1e9a2:	e7fb      	b.n	1e99c <compare_set_nolocks+0x8c>
   1e9a4:	01000001 	.word	0x01000001
   1e9a8:	20001ea8 	.word	0x20001ea8
   1e9ac:	20002c98 	.word	0x20002c98

0001e9b0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1e9b0:	b530      	push	{r4, r5, lr}
   1e9b2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   1e9b4:	2300      	movs	r3, #0
   1e9b6:	4a1d      	ldr	r2, [pc, #116]	; (1ea2c <sys_clock_driver_init+0x7c>)
   1e9b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e9bc:	2b00      	cmp	r3, #0
   1e9be:	dd24      	ble.n	1ea0a <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   1e9c0:	4c1a      	ldr	r4, [pc, #104]	; (1ea2c <sys_clock_driver_init+0x7c>)
   1e9c2:	2502      	movs	r5, #2
   1e9c4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e9c8:	4b19      	ldr	r3, [pc, #100]	; (1ea30 <sys_clock_driver_init+0x80>)
   1e9ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1e9ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1e9d2:	2200      	movs	r2, #0
   1e9d4:	2101      	movs	r1, #1
   1e9d6:	2011      	movs	r0, #17
   1e9d8:	f7f4 fb7e 	bl	130d8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1e9dc:	2011      	movs	r0, #17
   1e9de:	f00b f865 	bl	29aac <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e9e2:	2301      	movs	r3, #1
   1e9e4:	60a3      	str	r3, [r4, #8]
   1e9e6:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1e9e8:	4a12      	ldr	r2, [pc, #72]	; (1ea34 <sys_clock_driver_init+0x84>)
   1e9ea:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e9ec:	2400      	movs	r4, #0
   1e9ee:	9401      	str	r4, [sp, #4]
   1e9f0:	4b11      	ldr	r3, [pc, #68]	; (1ea38 <sys_clock_driver_init+0x88>)
   1e9f2:	9300      	str	r3, [sp, #0]
   1e9f4:	4a11      	ldr	r2, [pc, #68]	; (1ea3c <sys_clock_driver_init+0x8c>)
   1e9f6:	2300      	movs	r3, #0
   1e9f8:	4620      	mov	r0, r4
   1e9fa:	f00f fadb 	bl	2dfb4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1e9fe:	4628      	mov	r0, r5
   1ea00:	f7fe fbfa 	bl	1d1f8 <z_nrf_clock_control_lf_on>

	return 0;
}
   1ea04:	4620      	mov	r0, r4
   1ea06:	b003      	add	sp, #12
   1ea08:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ea0a:	4a0d      	ldr	r2, [pc, #52]	; (1ea40 <sys_clock_driver_init+0x90>)
   1ea0c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1ea10:	f04f 30ff 	mov.w	r0, #4294967295
   1ea14:	f04f 31ff 	mov.w	r1, #4294967295
   1ea18:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ea1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ea20:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1ea22:	4902      	ldr	r1, [pc, #8]	; (1ea2c <sys_clock_driver_init+0x7c>)
   1ea24:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1ea28:	3301      	adds	r3, #1
   1ea2a:	e7c7      	b.n	1e9bc <sys_clock_driver_init+0xc>
   1ea2c:	40011000 	.word	0x40011000
   1ea30:	e000e100 	.word	0xe000e100
   1ea34:	20002c9c 	.word	0x20002c9c
   1ea38:	0001e741 	.word	0x0001e741
   1ea3c:	007fffff 	.word	0x007fffff
   1ea40:	20001ea8 	.word	0x20001ea8

0001ea44 <sys_clock_set_timeout>:
{
   1ea44:	b510      	push	{r4, lr}
   1ea46:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1ea48:	f1b0 3fff 	cmp.w	r0, #4294967295
   1ea4c:	d006      	beq.n	1ea5c <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1ea4e:	2801      	cmp	r0, #1
   1ea50:	dd06      	ble.n	1ea60 <sys_clock_set_timeout+0x1c>
   1ea52:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1ea56:	da05      	bge.n	1ea64 <sys_clock_set_timeout+0x20>
   1ea58:	1e44      	subs	r4, r0, #1
   1ea5a:	e004      	b.n	1ea66 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1ea5c:	480f      	ldr	r0, [pc, #60]	; (1ea9c <sys_clock_set_timeout+0x58>)
   1ea5e:	e7f8      	b.n	1ea52 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1ea60:	2400      	movs	r4, #0
   1ea62:	e000      	b.n	1ea66 <sys_clock_set_timeout+0x22>
   1ea64:	4c0d      	ldr	r4, [pc, #52]	; (1ea9c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1ea66:	f7ff fed7 	bl	1e818 <z_nrf_rtc_timer_read>
   1ea6a:	4b0d      	ldr	r3, [pc, #52]	; (1eaa0 <sys_clock_set_timeout+0x5c>)
   1ea6c:	681a      	ldr	r2, [r3, #0]
   1ea6e:	685b      	ldr	r3, [r3, #4]
   1ea70:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   1ea72:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1ea76:	d300      	bcc.n	1ea7a <sys_clock_set_timeout+0x36>
		ticks = 0;
   1ea78:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1ea7a:	4420      	add	r0, r4
   1ea7c:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
   1ea7e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1ea82:	d300      	bcc.n	1ea86 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   1ea84:	4905      	ldr	r1, [pc, #20]	; (1ea9c <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
   1ea86:	2000      	movs	r0, #0
   1ea88:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1ea8a:	9001      	str	r0, [sp, #4]
   1ea8c:	4905      	ldr	r1, [pc, #20]	; (1eaa4 <sys_clock_set_timeout+0x60>)
   1ea8e:	9100      	str	r1, [sp, #0]
   1ea90:	f143 0300 	adc.w	r3, r3, #0
   1ea94:	f00f fa8e 	bl	2dfb4 <compare_set>
}
   1ea98:	b002      	add	sp, #8
   1ea9a:	bd10      	pop	{r4, pc}
   1ea9c:	007fffff 	.word	0x007fffff
   1eaa0:	20001eb8 	.word	0x20001eb8
   1eaa4:	0001e741 	.word	0x0001e741

0001eaa8 <sys_clock_elapsed>:
{
   1eaa8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1eaaa:	f7ff feb5 	bl	1e818 <z_nrf_rtc_timer_read>
   1eaae:	4b02      	ldr	r3, [pc, #8]	; (1eab8 <sys_clock_elapsed+0x10>)
   1eab0:	681b      	ldr	r3, [r3, #0]
}
   1eab2:	1ac0      	subs	r0, r0, r3
   1eab4:	bd08      	pop	{r3, pc}
   1eab6:	bf00      	nop
   1eab8:	20001eb8 	.word	0x20001eb8

0001eabc <nrf_gpio_pin_port_decode>:
{
   1eabc:	b538      	push	{r3, r4, r5, lr}
   1eabe:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1eac0:	6804      	ldr	r4, [r0, #0]
   1eac2:	4620      	mov	r0, r4
   1eac4:	f00f faa9 	bl	2e01a <nrf_gpio_pin_present_check>
   1eac8:	b140      	cbz	r0, 1eadc <nrf_gpio_pin_port_decode+0x20>
    *p_pin = pin_number & 0x1F;
   1eaca:	f004 031f 	and.w	r3, r4, #31
   1eace:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ead0:	0964      	lsrs	r4, r4, #5
   1ead2:	d01b      	beq.n	1eb0c <nrf_gpio_pin_port_decode+0x50>
   1ead4:	2c01      	cmp	r4, #1
   1ead6:	d10d      	bne.n	1eaf4 <nrf_gpio_pin_port_decode+0x38>
        case 1: return NRF_P1;
   1ead8:	480e      	ldr	r0, [pc, #56]	; (1eb14 <nrf_gpio_pin_port_decode+0x58>)
}
   1eada:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1eadc:	4c0e      	ldr	r4, [pc, #56]	; (1eb18 <nrf_gpio_pin_port_decode+0x5c>)
   1eade:	f240 2247 	movw	r2, #583	; 0x247
   1eae2:	4621      	mov	r1, r4
   1eae4:	480d      	ldr	r0, [pc, #52]	; (1eb1c <nrf_gpio_pin_port_decode+0x60>)
   1eae6:	f00a f892 	bl	28c0e <assert_print>
   1eaea:	f240 2147 	movw	r1, #583	; 0x247
   1eaee:	4620      	mov	r0, r4
   1eaf0:	f00a f886 	bl	28c00 <assert_post_action>
            NRFX_ASSERT(0);
   1eaf4:	4c08      	ldr	r4, [pc, #32]	; (1eb18 <nrf_gpio_pin_port_decode+0x5c>)
   1eaf6:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1eafa:	4621      	mov	r1, r4
   1eafc:	4807      	ldr	r0, [pc, #28]	; (1eb1c <nrf_gpio_pin_port_decode+0x60>)
   1eafe:	f00a f886 	bl	28c0e <assert_print>
   1eb02:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1eb06:	4620      	mov	r0, r4
   1eb08:	f00a f87a 	bl	28c00 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1eb0c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1eb10:	e7e3      	b.n	1eada <nrf_gpio_pin_port_decode+0x1e>
   1eb12:	bf00      	nop
   1eb14:	50000300 	.word	0x50000300
   1eb18:	00032e50 	.word	0x00032e50
   1eb1c:	00030128 	.word	0x00030128

0001eb20 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1eb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb24:	b085      	sub	sp, #20
   1eb26:	4607      	mov	r7, r0
   1eb28:	468b      	mov	fp, r1
   1eb2a:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1eb2c:	2400      	movs	r4, #0
   1eb2e:	e022      	b.n	1eb76 <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   1eb30:	f04f 35ff 	mov.w	r5, #4294967295
   1eb34:	e02c      	b.n	1eb90 <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   1eb36:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1eb3a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1eb3c:	9603      	str	r6, [sp, #12]
			write = 1U;
   1eb3e:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   1eb40:	2d7f      	cmp	r5, #127	; 0x7f
   1eb42:	d016      	beq.n	1eb72 <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
   1eb44:	f1b1 3fff 	cmp.w	r1, #4294967295
   1eb48:	f040 810e 	bne.w	1ed68 <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1eb4c:	f857 300a 	ldr.w	r3, [r7, sl]
   1eb50:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1eb54:	d002      	beq.n	1eb5c <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1eb56:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   1eb58:	2200      	movs	r2, #0
   1eb5a:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1eb5c:	2200      	movs	r2, #0
   1eb5e:	9201      	str	r2, [sp, #4]
   1eb60:	f8cd 9000 	str.w	r9, [sp]
   1eb64:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   1eb68:	4632      	mov	r2, r6
   1eb6a:	9903      	ldr	r1, [sp, #12]
   1eb6c:	4628      	mov	r0, r5
   1eb6e:	f00f fa8a 	bl	2e086 <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1eb72:	3401      	adds	r4, #1
   1eb74:	b2e4      	uxtb	r4, r4
   1eb76:	455c      	cmp	r4, fp
   1eb78:	f080 80fa 	bcs.w	1ed70 <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1eb7c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   1eb80:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1eb84:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1eb88:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   1eb8c:	2d7f      	cmp	r5, #127	; 0x7f
   1eb8e:	d0cf      	beq.n	1eb30 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   1eb90:	0c1b      	lsrs	r3, r3, #16
   1eb92:	2b22      	cmp	r3, #34	; 0x22
   1eb94:	f200 80ee 	bhi.w	1ed74 <pinctrl_configure_pins+0x254>
   1eb98:	a201      	add	r2, pc, #4	; (adr r2, 1eba0 <pinctrl_configure_pins+0x80>)
   1eb9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1eb9e:	bf00      	nop
   1eba0:	0001eb37 	.word	0x0001eb37
   1eba4:	0001ec2d 	.word	0x0001ec2d
   1eba8:	0001ec3b 	.word	0x0001ec3b
   1ebac:	0001ec47 	.word	0x0001ec47
   1ebb0:	0001ec55 	.word	0x0001ec55
   1ebb4:	0001ec63 	.word	0x0001ec63
   1ebb8:	0001ec6f 	.word	0x0001ec6f
   1ebbc:	0001ed75 	.word	0x0001ed75
   1ebc0:	0001ed75 	.word	0x0001ed75
   1ebc4:	0001ed75 	.word	0x0001ed75
   1ebc8:	0001ed75 	.word	0x0001ed75
   1ebcc:	0001ec7d 	.word	0x0001ec7d
   1ebd0:	0001ec91 	.word	0x0001ec91
   1ebd4:	0001ed75 	.word	0x0001ed75
   1ebd8:	0001ed75 	.word	0x0001ed75
   1ebdc:	0001ed75 	.word	0x0001ed75
   1ebe0:	0001ed75 	.word	0x0001ed75
   1ebe4:	0001ed75 	.word	0x0001ed75
   1ebe8:	0001ed75 	.word	0x0001ed75
   1ebec:	0001ed75 	.word	0x0001ed75
   1ebf0:	0001ed75 	.word	0x0001ed75
   1ebf4:	0001ed75 	.word	0x0001ed75
   1ebf8:	0001eca5 	.word	0x0001eca5
   1ebfc:	0001ecb7 	.word	0x0001ecb7
   1ec00:	0001ecc9 	.word	0x0001ecc9
   1ec04:	0001ecdb 	.word	0x0001ecdb
   1ec08:	0001ed75 	.word	0x0001ed75
   1ec0c:	0001ed75 	.word	0x0001ed75
   1ec10:	0001ed75 	.word	0x0001ed75
   1ec14:	0001eced 	.word	0x0001eced
   1ec18:	0001ecfd 	.word	0x0001ecfd
   1ec1c:	0001ed09 	.word	0x0001ed09
   1ec20:	0001ed19 	.word	0x0001ed19
   1ec24:	0001ed29 	.word	0x0001ed29
   1ec28:	0001ed39 	.word	0x0001ed39
			NRF_PSEL_UART(reg, RXD) = pin;
   1ec2c:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1ec30:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ec32:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   1ec34:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1ec38:	e782      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
   1ec3a:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ec3e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1ec40:	9603      	str	r6, [sp, #12]
			write = 1U;
   1ec42:	4631      	mov	r1, r6
			break;
   1ec44:	e77c      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
   1ec46:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1ec4a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ec4c:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   1ec4e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1ec52:	e775      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1ec54:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1ec58:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1ec5a:	2301      	movs	r3, #1
   1ec5c:	9303      	str	r3, [sp, #12]
			write = 0U;
   1ec5e:	4631      	mov	r1, r6
			break;
   1ec60:	e76e      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1ec62:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ec66:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1ec68:	9603      	str	r6, [sp, #12]
			write = 0U;
   1ec6a:	2100      	movs	r1, #0
			break;
   1ec6c:	e768      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1ec6e:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1ec72:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ec74:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   1ec76:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1ec7a:	e761      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1ec7c:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1ec80:	f1b9 0f00 	cmp.w	r9, #0
   1ec84:	d060      	beq.n	1ed48 <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1ec86:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ec88:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   1ec8a:	f04f 31ff 	mov.w	r1, #4294967295
   1ec8e:	e757      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1ec90:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1ec94:	f1b9 0f00 	cmp.w	r9, #0
   1ec98:	d05e      	beq.n	1ed58 <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1ec9a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ec9c:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   1ec9e:	f04f 31ff 	mov.w	r1, #4294967295
   1eca2:	e74d      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1eca4:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1eca8:	f857 100a 	ldr.w	r1, [r7, sl]
   1ecac:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ecb0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1ecb2:	9603      	str	r6, [sp, #12]
			break;
   1ecb4:	e744      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1ecb6:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1ecba:	f857 100a 	ldr.w	r1, [r7, sl]
   1ecbe:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ecc2:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1ecc4:	9603      	str	r6, [sp, #12]
			break;
   1ecc6:	e73b      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1ecc8:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1eccc:	f857 100a 	ldr.w	r1, [r7, sl]
   1ecd0:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ecd4:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1ecd6:	9603      	str	r6, [sp, #12]
			break;
   1ecd8:	e732      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1ecda:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
   1ecde:	f857 100a 	ldr.w	r1, [r7, sl]
   1ece2:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ece6:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1ece8:	9603      	str	r6, [sp, #12]
			break;
   1ecea:	e729      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   1ecec:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ecf0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ecf2:	2300      	movs	r3, #0
   1ecf4:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   1ecf6:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1ecfa:	e721      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   1ecfc:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ed00:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1ed02:	9603      	str	r6, [sp, #12]
			write = 1U;
   1ed04:	4631      	mov	r1, r6
			break;
   1ed06:	e71b      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   1ed08:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ed0c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ed0e:	2300      	movs	r3, #0
   1ed10:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   1ed12:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1ed16:	e713      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   1ed18:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ed1c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ed1e:	2300      	movs	r3, #0
   1ed20:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   1ed22:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1ed26:	e70b      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   1ed28:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ed2c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ed2e:	2300      	movs	r3, #0
   1ed30:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   1ed32:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1ed36:	e703      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   1ed38:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ed3c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ed3e:	2300      	movs	r3, #0
   1ed40:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   1ed42:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1ed46:	e6fb      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1ed48:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ed4a:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
   1ed4e:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
   1ed52:	f04f 0906 	mov.w	r9, #6
   1ed56:	e6f3      	b.n	1eb40 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1ed58:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ed5a:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
   1ed5e:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
   1ed62:	f04f 0906 	mov.w	r9, #6
   1ed66:	e6eb      	b.n	1eb40 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
   1ed68:	4628      	mov	r0, r5
   1ed6a:	f00f f984 	bl	2e076 <nrf_gpio_pin_write>
   1ed6e:	e6ed      	b.n	1eb4c <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1ed70:	2000      	movs	r0, #0
   1ed72:	e001      	b.n	1ed78 <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
   1ed74:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1ed78:	b005      	add	sp, #20
   1ed7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed7e:	bf00      	nop

0001ed80 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   1ed80:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_api *api =
   1ed82:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
   1ed84:	6846      	ldr	r6, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   1ed86:	6904      	ldr	r4, [r0, #16]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1ed88:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
   1ed8c:	d132      	bne.n	1edf4 <z_impl_gpio_pin_configure+0x74>
   1ed8e:	4613      	mov	r3, r2
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1ed90:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1ed94:	2a30      	cmp	r2, #48	; 0x30
   1ed96:	d039      	beq.n	1ee0c <z_impl_gpio_pin_configure+0x8c>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   1ed98:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   1ed9c:	2a02      	cmp	r2, #2
   1ed9e:	d041      	beq.n	1ee24 <z_impl_gpio_pin_configure+0xa4>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1eda0:	f003 0206 	and.w	r2, r3, #6
   1eda4:	2a04      	cmp	r2, #4
   1eda6:	d049      	beq.n	1ee3c <z_impl_gpio_pin_configure+0xbc>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1eda8:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   1edac:	d002      	beq.n	1edb4 <z_impl_gpio_pin_configure+0x34>
   1edae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1edb2:	d04f      	beq.n	1ee54 <z_impl_gpio_pin_configure+0xd4>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1edb4:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   1edb8:	d058      	beq.n	1ee6c <z_impl_gpio_pin_configure+0xec>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1edba:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1edbe:	d005      	beq.n	1edcc <z_impl_gpio_pin_configure+0x4c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1edc0:	b122      	cbz	r2, 1edcc <z_impl_gpio_pin_configure+0x4c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1edc2:	f013 0f01 	tst.w	r3, #1
   1edc6:	d001      	beq.n	1edcc <z_impl_gpio_pin_configure+0x4c>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1edc8:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1edcc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1edd0:	6836      	ldr	r6, [r6, #0]
   1edd2:	f04f 0c01 	mov.w	ip, #1
   1edd6:	fa0c fc01 	lsl.w	ip, ip, r1
   1edda:	ea16 0f0c 	tst.w	r6, ip
   1edde:	d051      	beq.n	1ee84 <z_impl_gpio_pin_configure+0x104>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1ede0:	f013 0f01 	tst.w	r3, #1
   1ede4:	d05a      	beq.n	1ee9c <z_impl_gpio_pin_configure+0x11c>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ede6:	6823      	ldr	r3, [r4, #0]
   1ede8:	ea4c 0303 	orr.w	r3, ip, r3
   1edec:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
   1edee:	682b      	ldr	r3, [r5, #0]
   1edf0:	4798      	blx	r3
}
   1edf2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1edf4:	4c2c      	ldr	r4, [pc, #176]	; (1eea8 <z_impl_gpio_pin_configure+0x128>)
   1edf6:	f240 22be 	movw	r2, #702	; 0x2be
   1edfa:	4621      	mov	r1, r4
   1edfc:	482b      	ldr	r0, [pc, #172]	; (1eeac <z_impl_gpio_pin_configure+0x12c>)
   1edfe:	f009 ff06 	bl	28c0e <assert_print>
   1ee02:	f240 21be 	movw	r1, #702	; 0x2be
   1ee06:	4620      	mov	r0, r4
   1ee08:	f009 fefa 	bl	28c00 <assert_post_action>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1ee0c:	4c26      	ldr	r4, [pc, #152]	; (1eea8 <z_impl_gpio_pin_configure+0x128>)
   1ee0e:	f240 22c1 	movw	r2, #705	; 0x2c1
   1ee12:	4621      	mov	r1, r4
   1ee14:	4825      	ldr	r0, [pc, #148]	; (1eeac <z_impl_gpio_pin_configure+0x12c>)
   1ee16:	f009 fefa 	bl	28c0e <assert_print>
   1ee1a:	f240 21c1 	movw	r1, #705	; 0x2c1
   1ee1e:	4620      	mov	r0, r4
   1ee20:	f009 feee 	bl	28c00 <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   1ee24:	4c20      	ldr	r4, [pc, #128]	; (1eea8 <z_impl_gpio_pin_configure+0x128>)
   1ee26:	f240 22c5 	movw	r2, #709	; 0x2c5
   1ee2a:	4621      	mov	r1, r4
   1ee2c:	481f      	ldr	r0, [pc, #124]	; (1eeac <z_impl_gpio_pin_configure+0x12c>)
   1ee2e:	f009 feee 	bl	28c0e <assert_print>
   1ee32:	f240 21c5 	movw	r1, #709	; 0x2c5
   1ee36:	4620      	mov	r0, r4
   1ee38:	f009 fee2 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1ee3c:	4c1a      	ldr	r4, [pc, #104]	; (1eea8 <z_impl_gpio_pin_configure+0x128>)
   1ee3e:	f240 22c9 	movw	r2, #713	; 0x2c9
   1ee42:	4621      	mov	r1, r4
   1ee44:	4819      	ldr	r0, [pc, #100]	; (1eeac <z_impl_gpio_pin_configure+0x12c>)
   1ee46:	f009 fee2 	bl	28c0e <assert_print>
   1ee4a:	f240 21c9 	movw	r1, #713	; 0x2c9
   1ee4e:	4620      	mov	r0, r4
   1ee50:	f009 fed6 	bl	28c00 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1ee54:	4c14      	ldr	r4, [pc, #80]	; (1eea8 <z_impl_gpio_pin_configure+0x128>)
   1ee56:	f44f 7233 	mov.w	r2, #716	; 0x2cc
   1ee5a:	4621      	mov	r1, r4
   1ee5c:	4813      	ldr	r0, [pc, #76]	; (1eeac <z_impl_gpio_pin_configure+0x12c>)
   1ee5e:	f009 fed6 	bl	28c0e <assert_print>
   1ee62:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1ee66:	4620      	mov	r0, r4
   1ee68:	f009 feca 	bl	28c00 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1ee6c:	4c0e      	ldr	r4, [pc, #56]	; (1eea8 <z_impl_gpio_pin_configure+0x128>)
   1ee6e:	f44f 7234 	mov.w	r2, #720	; 0x2d0
   1ee72:	4621      	mov	r1, r4
   1ee74:	480d      	ldr	r0, [pc, #52]	; (1eeac <z_impl_gpio_pin_configure+0x12c>)
   1ee76:	f009 feca 	bl	28c0e <assert_print>
   1ee7a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   1ee7e:	4620      	mov	r0, r4
   1ee80:	f009 febe 	bl	28c00 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ee84:	4c08      	ldr	r4, [pc, #32]	; (1eea8 <z_impl_gpio_pin_configure+0x128>)
   1ee86:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   1ee8a:	4621      	mov	r1, r4
   1ee8c:	4807      	ldr	r0, [pc, #28]	; (1eeac <z_impl_gpio_pin_configure+0x12c>)
   1ee8e:	f009 febe 	bl	28c0e <assert_print>
   1ee92:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   1ee96:	4620      	mov	r0, r4
   1ee98:	f009 feb2 	bl	28c00 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ee9c:	6823      	ldr	r3, [r4, #0]
   1ee9e:	ea23 030c 	bic.w	r3, r3, ip
   1eea2:	6023      	str	r3, [r4, #0]
   1eea4:	e7a3      	b.n	1edee <z_impl_gpio_pin_configure+0x6e>
   1eea6:	bf00      	nop
   1eea8:	0003341c 	.word	0x0003341c
   1eeac:	00030128 	.word	0x00030128

0001eeb0 <z_impl_gpio_pin_interrupt_configure>:
{
   1eeb0:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_api *api =
   1eeb2:	6884      	ldr	r4, [r0, #8]
	__unused const struct gpio_driver_config *const cfg =
   1eeb4:	6845      	ldr	r5, [r0, #4]
	const struct gpio_driver_data *const data =
   1eeb6:	6906      	ldr	r6, [r0, #16]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1eeb8:	f402 03c0 	and.w	r3, r2, #6291456	; 0x600000
   1eebc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
   1eec0:	d01e      	beq.n	1ef00 <z_impl_gpio_pin_interrupt_configure+0x50>
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1eec2:	b34b      	cbz	r3, 1ef18 <z_impl_gpio_pin_interrupt_configure+0x68>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1eec4:	f002 63e8 	and.w	r3, r2, #121634816	; 0x7400000
   1eec8:	f1b3 6fc8 	cmp.w	r3, #104857600	; 0x6400000
   1eecc:	d030      	beq.n	1ef30 <z_impl_gpio_pin_interrupt_configure+0x80>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1eece:	f002 63c8 	and.w	r3, r2, #104857600	; 0x6400000
   1eed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1eed6:	d037      	beq.n	1ef48 <z_impl_gpio_pin_interrupt_configure+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1eed8:	682d      	ldr	r5, [r5, #0]
   1eeda:	2301      	movs	r3, #1
   1eedc:	408b      	lsls	r3, r1
   1eede:	421d      	tst	r5, r3
   1eee0:	d03e      	beq.n	1ef60 <z_impl_gpio_pin_interrupt_configure+0xb0>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1eee2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1eee6:	d004      	beq.n	1eef2 <z_impl_gpio_pin_interrupt_configure+0x42>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1eee8:	6835      	ldr	r5, [r6, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1eeea:	422b      	tst	r3, r5
   1eeec:	d001      	beq.n	1eef2 <z_impl_gpio_pin_interrupt_configure+0x42>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1eeee:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1eef2:	69a4      	ldr	r4, [r4, #24]
   1eef4:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1eef8:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   1eefc:	47a0      	blx	r4
}
   1eefe:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1ef00:	4c1d      	ldr	r4, [pc, #116]	; (1ef78 <z_impl_gpio_pin_interrupt_configure+0xc8>)
   1ef02:	f240 226b 	movw	r2, #619	; 0x26b
   1ef06:	4621      	mov	r1, r4
   1ef08:	481c      	ldr	r0, [pc, #112]	; (1ef7c <z_impl_gpio_pin_interrupt_configure+0xcc>)
   1ef0a:	f009 fe80 	bl	28c0e <assert_print>
   1ef0e:	f240 216b 	movw	r1, #619	; 0x26b
   1ef12:	4620      	mov	r0, r4
   1ef14:	f009 fe74 	bl	28c00 <assert_post_action>
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1ef18:	4c17      	ldr	r4, [pc, #92]	; (1ef78 <z_impl_gpio_pin_interrupt_configure+0xc8>)
   1ef1a:	f240 226f 	movw	r2, #623	; 0x26f
   1ef1e:	4621      	mov	r1, r4
   1ef20:	4816      	ldr	r0, [pc, #88]	; (1ef7c <z_impl_gpio_pin_interrupt_configure+0xcc>)
   1ef22:	f009 fe74 	bl	28c0e <assert_print>
   1ef26:	f240 216f 	movw	r1, #623	; 0x26f
   1ef2a:	4620      	mov	r0, r4
   1ef2c:	f009 fe68 	bl	28c00 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1ef30:	4c11      	ldr	r4, [pc, #68]	; (1ef78 <z_impl_gpio_pin_interrupt_configure+0xc8>)
   1ef32:	f240 2272 	movw	r2, #626	; 0x272
   1ef36:	4621      	mov	r1, r4
   1ef38:	4810      	ldr	r0, [pc, #64]	; (1ef7c <z_impl_gpio_pin_interrupt_configure+0xcc>)
   1ef3a:	f009 fe68 	bl	28c0e <assert_print>
   1ef3e:	f240 2172 	movw	r1, #626	; 0x272
   1ef42:	4620      	mov	r0, r4
   1ef44:	f009 fe5c 	bl	28c00 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1ef48:	4c0b      	ldr	r4, [pc, #44]	; (1ef78 <z_impl_gpio_pin_interrupt_configure+0xc8>)
   1ef4a:	f240 2279 	movw	r2, #633	; 0x279
   1ef4e:	4621      	mov	r1, r4
   1ef50:	480a      	ldr	r0, [pc, #40]	; (1ef7c <z_impl_gpio_pin_interrupt_configure+0xcc>)
   1ef52:	f009 fe5c 	bl	28c0e <assert_print>
   1ef56:	f240 2179 	movw	r1, #633	; 0x279
   1ef5a:	4620      	mov	r0, r4
   1ef5c:	f009 fe50 	bl	28c00 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ef60:	4c05      	ldr	r4, [pc, #20]	; (1ef78 <z_impl_gpio_pin_interrupt_configure+0xc8>)
   1ef62:	f240 227e 	movw	r2, #638	; 0x27e
   1ef66:	4621      	mov	r1, r4
   1ef68:	4804      	ldr	r0, [pc, #16]	; (1ef7c <z_impl_gpio_pin_interrupt_configure+0xcc>)
   1ef6a:	f009 fe50 	bl	28c0e <assert_print>
   1ef6e:	f240 217e 	movw	r1, #638	; 0x27e
   1ef72:	4620      	mov	r0, r4
   1ef74:	f009 fe44 	bl	28c00 <assert_post_action>
   1ef78:	0003341c 	.word	0x0003341c
   1ef7c:	00030128 	.word	0x00030128

0001ef80 <callback_ctrl>:
static struct k_spinlock lock;
static sys_slist_t button_handlers;
static struct k_mutex button_handler_mut;

static int callback_ctrl(bool enable)
{
   1ef80:	b538      	push	{r3, r4, r5, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   1ef82:	b120      	cbz	r0, 1ef8e <callback_ctrl+0xe>
   1ef84:	f04f 6598 	mov.w	r5, #79691776	; 0x4c00000
	int err = 0;

	/* This must be done with irqs disabled to avoid pin callback
	 * being fired before others are still not activated.
	 */
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1ef88:	2400      	movs	r4, #0
	int err = 0;
   1ef8a:	4620      	mov	r0, r4
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1ef8c:	e00c      	b.n	1efa8 <callback_ctrl+0x28>
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   1ef8e:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1ef92:	e7f9      	b.n	1ef88 <callback_ctrl+0x8>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1ef94:	4b07      	ldr	r3, [pc, #28]	; (1efb4 <callback_ctrl+0x34>)
   1ef96:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1ef9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ef9e:	7919      	ldrb	r1, [r3, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1efa0:	462a      	mov	r2, r5
   1efa2:	f7ff ff85 	bl	1eeb0 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1efa6:	3401      	adds	r4, #1
   1efa8:	2c03      	cmp	r4, #3
   1efaa:	d801      	bhi.n	1efb0 <callback_ctrl+0x30>
   1efac:	2800      	cmp	r0, #0
   1efae:	d0f1      	beq.n	1ef94 <callback_ctrl+0x14>
		err = gpio_pin_interrupt_configure_dt(&buttons[i], flags);
	}

	return err;
}
   1efb0:	bd38      	pop	{r3, r4, r5, pc}
   1efb2:	bf00      	nop
   1efb4:	000335c8 	.word	0x000335c8

0001efb8 <gpio_pin_get>:
 * @retval 0 If pin logical value is 0 / inactive.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_get(const struct device *port, gpio_pin_t pin)
{
   1efb8:	b510      	push	{r4, lr}
   1efba:	b082      	sub	sp, #8
	__unused const struct gpio_driver_config *const cfg =
   1efbc:	6843      	ldr	r3, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1efbe:	681b      	ldr	r3, [r3, #0]
   1efc0:	2401      	movs	r4, #1
   1efc2:	408c      	lsls	r4, r1
   1efc4:	4223      	tst	r3, r4
   1efc6:	d00a      	beq.n	1efde <gpio_pin_get+0x26>
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
   1efc8:	a901      	add	r1, sp, #4
   1efca:	f00f f878 	bl	2e0be <gpio_port_get>
	if (ret == 0) {
   1efce:	b920      	cbnz	r0, 1efda <gpio_pin_get+0x22>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1efd0:	9b01      	ldr	r3, [sp, #4]
   1efd2:	421c      	tst	r4, r3
   1efd4:	bf14      	ite	ne
   1efd6:	2001      	movne	r0, #1
   1efd8:	2000      	moveq	r0, #0
	}

	return ret;
}
   1efda:	b002      	add	sp, #8
   1efdc:	bd10      	pop	{r4, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1efde:	4c06      	ldr	r4, [pc, #24]	; (1eff8 <gpio_pin_get+0x40>)
   1efe0:	f240 42ce 	movw	r2, #1230	; 0x4ce
   1efe4:	4621      	mov	r1, r4
   1efe6:	4805      	ldr	r0, [pc, #20]	; (1effc <gpio_pin_get+0x44>)
   1efe8:	f009 fe11 	bl	28c0e <assert_print>
   1efec:	f240 41ce 	movw	r1, #1230	; 0x4ce
   1eff0:	4620      	mov	r0, r4
   1eff2:	f009 fe05 	bl	28c00 <assert_post_action>
   1eff6:	bf00      	nop
   1eff8:	0003341c 	.word	0x0003341c
   1effc:	00030128 	.word	0x00030128

0001f000 <get_buttons>:

static uint32_t get_buttons(void)
{
   1f000:	b538      	push	{r3, r4, r5, lr}
	uint32_t ret = 0;
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f002:	2400      	movs	r4, #0
	uint32_t ret = 0;
   1f004:	4625      	mov	r5, r4
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f006:	e007      	b.n	1f018 <get_buttons+0x18>
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   1f008:	2145      	movs	r1, #69	; 0x45
   1f00a:	480c      	ldr	r0, [pc, #48]	; (1f03c <get_buttons+0x3c>)
   1f00c:	f009 fe1f 	bl	28c4e <z_log_minimal_printk>
			return 0;
   1f010:	2500      	movs	r5, #0
			ret |= 1U << i;
		}
	}

	return ret;
}
   1f012:	4628      	mov	r0, r5
   1f014:	bd38      	pop	{r3, r4, r5, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f016:	3401      	adds	r4, #1
   1f018:	2c03      	cmp	r4, #3
   1f01a:	d8fa      	bhi.n	1f012 <get_buttons+0x12>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   1f01c:	4b08      	ldr	r3, [pc, #32]	; (1f040 <get_buttons+0x40>)
   1f01e:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   1f022:	7911      	ldrb	r1, [r2, #4]
   1f024:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1f028:	f7ff ffc6 	bl	1efb8 <gpio_pin_get>
		if (val < 0) {
   1f02c:	2800      	cmp	r0, #0
   1f02e:	dbeb      	blt.n	1f008 <get_buttons+0x8>
		if (val) {
   1f030:	2800      	cmp	r0, #0
   1f032:	d0f0      	beq.n	1f016 <get_buttons+0x16>
			ret |= 1U << i;
   1f034:	2301      	movs	r3, #1
   1f036:	40a3      	lsls	r3, r4
   1f038:	431d      	orrs	r5, r3
   1f03a:	e7ec      	b.n	1f016 <get_buttons+0x16>
   1f03c:	00033450 	.word	0x00033450
   1f040:	000335c8 	.word	0x000335c8

0001f044 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   1f044:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
   1f046:	6843      	ldr	r3, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f048:	681c      	ldr	r4, [r3, #0]
   1f04a:	2301      	movs	r3, #1
   1f04c:	fa03 f101 	lsl.w	r1, r3, r1
   1f050:	420c      	tst	r4, r1
   1f052:	d004      	beq.n	1f05e <gpio_pin_set_raw+0x1a>
		 "Unsupported pin");

	if (value != 0)	{
   1f054:	b17a      	cbz	r2, 1f076 <gpio_pin_set_raw+0x32>
	const struct gpio_driver_api *api =
   1f056:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1f058:	68db      	ldr	r3, [r3, #12]
   1f05a:	4798      	blx	r3
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   1f05c:	bd10      	pop	{r4, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f05e:	4c08      	ldr	r4, [pc, #32]	; (1f080 <gpio_pin_set_raw+0x3c>)
   1f060:	f240 42fe 	movw	r2, #1278	; 0x4fe
   1f064:	4621      	mov	r1, r4
   1f066:	4807      	ldr	r0, [pc, #28]	; (1f084 <gpio_pin_set_raw+0x40>)
   1f068:	f009 fdd1 	bl	28c0e <assert_print>
   1f06c:	f240 41fe 	movw	r1, #1278	; 0x4fe
   1f070:	4620      	mov	r0, r4
   1f072:	f009 fdc5 	bl	28c00 <assert_post_action>
	const struct gpio_driver_api *api =
   1f076:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1f078:	691b      	ldr	r3, [r3, #16]
   1f07a:	4798      	blx	r3
	return ret;
   1f07c:	e7ee      	b.n	1f05c <gpio_pin_set_raw+0x18>
   1f07e:	bf00      	nop
   1f080:	0003341c 	.word	0x0003341c
   1f084:	00030128 	.word	0x00030128

0001f088 <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   1f088:	b538      	push	{r3, r4, r5, lr}
	__unused const struct gpio_driver_config *const cfg =
   1f08a:	6843      	ldr	r3, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
   1f08c:	6905      	ldr	r5, [r0, #16]
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f08e:	681c      	ldr	r4, [r3, #0]
   1f090:	2301      	movs	r3, #1
   1f092:	408b      	lsls	r3, r1
   1f094:	421c      	tst	r4, r3
   1f096:	d008      	beq.n	1f0aa <gpio_pin_set+0x22>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1f098:	682c      	ldr	r4, [r5, #0]
   1f09a:	4223      	tst	r3, r4
   1f09c:	d002      	beq.n	1f0a4 <gpio_pin_set+0x1c>
		value = (value != 0) ? 0 : 1;
   1f09e:	fab2 f282 	clz	r2, r2
   1f0a2:	0952      	lsrs	r2, r2, #5
	}

	return gpio_pin_set_raw(port, pin, value);
   1f0a4:	f7ff ffce 	bl	1f044 <gpio_pin_set_raw>
}
   1f0a8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f0aa:	4c06      	ldr	r4, [pc, #24]	; (1f0c4 <gpio_pin_set+0x3c>)
   1f0ac:	f240 5227 	movw	r2, #1319	; 0x527
   1f0b0:	4621      	mov	r1, r4
   1f0b2:	4805      	ldr	r0, [pc, #20]	; (1f0c8 <gpio_pin_set+0x40>)
   1f0b4:	f009 fdab 	bl	28c0e <assert_print>
   1f0b8:	f240 5127 	movw	r1, #1319	; 0x527
   1f0bc:	4620      	mov	r0, r4
   1f0be:	f009 fd9f 	bl	28c00 <assert_post_action>
   1f0c2:	bf00      	nop
   1f0c4:	0003341c 	.word	0x0003341c
   1f0c8:	00030128 	.word	0x00030128

0001f0cc <button_handlers_call>:

static void button_handlers_call(uint32_t button_state, uint32_t has_changed)
{
   1f0cc:	b570      	push	{r4, r5, r6, lr}
   1f0ce:	4605      	mov	r5, r0
   1f0d0:	460e      	mov	r6, r1
	struct button_handler *handler;

	if (button_handler_cb != NULL) {
   1f0d2:	4b0f      	ldr	r3, [pc, #60]	; (1f110 <button_handlers_call+0x44>)
   1f0d4:	681b      	ldr	r3, [r3, #0]
   1f0d6:	b103      	cbz	r3, 1f0da <button_handlers_call+0xe>
		button_handler_cb(button_state, has_changed);
   1f0d8:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1f0da:	f04f 32ff 	mov.w	r2, #4294967295
   1f0de:	f04f 33ff 	mov.w	r3, #4294967295
   1f0e2:	480c      	ldr	r0, [pc, #48]	; (1f114 <button_handlers_call+0x48>)
   1f0e4:	f003 f884 	bl	221f0 <z_impl_k_mutex_lock>
	return list->head;
   1f0e8:	4b0b      	ldr	r3, [pc, #44]	; (1f118 <button_handlers_call+0x4c>)
   1f0ea:	681c      	ldr	r4, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_DK_LIBRARY_DYNAMIC_BUTTON_HANDLERS)) {
		k_mutex_lock(&button_handler_mut, K_FOREVER);
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1f0ec:	b114      	cbz	r4, 1f0f4 <button_handlers_call+0x28>
   1f0ee:	3c04      	subs	r4, #4
   1f0f0:	e000      	b.n	1f0f4 <button_handlers_call+0x28>
   1f0f2:	3c04      	subs	r4, #4
   1f0f4:	b13c      	cbz	r4, 1f106 <button_handlers_call+0x3a>
			handler->cb(button_state, has_changed);
   1f0f6:	6823      	ldr	r3, [r4, #0]
   1f0f8:	4631      	mov	r1, r6
   1f0fa:	4628      	mov	r0, r5
   1f0fc:	4798      	blx	r3
	return node->next;
   1f0fe:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1f100:	2c00      	cmp	r4, #0
   1f102:	d1f6      	bne.n	1f0f2 <button_handlers_call+0x26>
   1f104:	e7f6      	b.n	1f0f4 <button_handlers_call+0x28>
	return z_impl_k_mutex_unlock(mutex);
   1f106:	4803      	ldr	r0, [pc, #12]	; (1f114 <button_handlers_call+0x48>)
   1f108:	f003 f95c 	bl	223c4 <z_impl_k_mutex_unlock>
		}
		k_mutex_unlock(&button_handler_mut);
	}
}
   1f10c:	bd70      	pop	{r4, r5, r6, pc}
   1f10e:	bf00      	nop
   1f110:	20002cdc 	.word	0x20002cdc
   1f114:	20002cac 	.word	0x20002cac
   1f118:	20002cc0 	.word	0x20002cc0

0001f11c <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   1f11c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f11e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f122:	f3ef 8311 	mrs	r3, BASEPRI
   1f126:	f382 8812 	msr	BASEPRI_MAX, r2
   1f12a:	f3bf 8f6f 	isb	sy
   1f12e:	461c      	mov	r4, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f130:	4820      	ldr	r0, [pc, #128]	; (1f1b4 <button_pressed+0x98>)
   1f132:	f002 fe77 	bl	21e24 <z_spin_lock_valid>
   1f136:	b1d0      	cbz	r0, 1f16e <button_pressed+0x52>
	z_spin_lock_set_owner(l);
   1f138:	481e      	ldr	r0, [pc, #120]	; (1f1b4 <button_pressed+0x98>)
   1f13a:	f002 fe93 	bl	21e64 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   1f13e:	2000      	movs	r0, #0
   1f140:	f7ff ff1e 	bl	1ef80 <callback_ctrl>

	if (err) {
   1f144:	b9e8      	cbnz	r0, 1f182 <button_pressed+0x66>
		LOG_ERR("Cannot disable callbacks");
	}

	switch (state) {
   1f146:	4b1c      	ldr	r3, [pc, #112]	; (1f1b8 <button_pressed+0x9c>)
   1f148:	781b      	ldrb	r3, [r3, #0]
   1f14a:	bb4b      	cbnz	r3, 1f1a0 <button_pressed+0x84>
	case STATE_WAITING:
		state = STATE_SCANNING;
   1f14c:	4b1a      	ldr	r3, [pc, #104]	; (1f1b8 <button_pressed+0x9c>)
   1f14e:	2201      	movs	r2, #1
   1f150:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1f152:	2221      	movs	r2, #33	; 0x21
   1f154:	2300      	movs	r3, #0
   1f156:	4819      	ldr	r0, [pc, #100]	; (1f1bc <button_pressed+0xa0>)
   1f158:	f004 f800 	bl	2315c <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f15c:	4815      	ldr	r0, [pc, #84]	; (1f1b4 <button_pressed+0x98>)
   1f15e:	f002 fe71 	bl	21e44 <z_spin_unlock_valid>
   1f162:	b198      	cbz	r0, 1f18c <button_pressed+0x70>
	__asm__ volatile(
   1f164:	f384 8811 	msr	BASEPRI, r4
   1f168:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   1f16c:	bd10      	pop	{r4, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f16e:	4c14      	ldr	r4, [pc, #80]	; (1f1c0 <button_pressed+0xa4>)
   1f170:	2294      	movs	r2, #148	; 0x94
   1f172:	4621      	mov	r1, r4
   1f174:	4813      	ldr	r0, [pc, #76]	; (1f1c4 <button_pressed+0xa8>)
   1f176:	f009 fd4a 	bl	28c0e <assert_print>
   1f17a:	2194      	movs	r1, #148	; 0x94
   1f17c:	4620      	mov	r0, r4
   1f17e:	f009 fd3f 	bl	28c00 <assert_post_action>
		LOG_ERR("Cannot disable callbacks");
   1f182:	2145      	movs	r1, #69	; 0x45
   1f184:	4810      	ldr	r0, [pc, #64]	; (1f1c8 <button_pressed+0xac>)
   1f186:	f009 fd62 	bl	28c4e <z_log_minimal_printk>
   1f18a:	e7dc      	b.n	1f146 <button_pressed+0x2a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f18c:	4c0c      	ldr	r4, [pc, #48]	; (1f1c0 <button_pressed+0xa4>)
   1f18e:	22c2      	movs	r2, #194	; 0xc2
   1f190:	4621      	mov	r1, r4
   1f192:	480c      	ldr	r0, [pc, #48]	; (1f1c4 <button_pressed+0xa8>)
   1f194:	f009 fd3b 	bl	28c0e <assert_print>
   1f198:	21c2      	movs	r1, #194	; 0xc2
   1f19a:	4620      	mov	r0, r4
   1f19c:	f009 fd30 	bl	28c00 <assert_post_action>
		__ASSERT_NO_MSG(false);
   1f1a0:	4c0a      	ldr	r4, [pc, #40]	; (1f1cc <button_pressed+0xb0>)
   1f1a2:	22ba      	movs	r2, #186	; 0xba
   1f1a4:	4621      	mov	r1, r4
   1f1a6:	4807      	ldr	r0, [pc, #28]	; (1f1c4 <button_pressed+0xa8>)
   1f1a8:	f009 fd31 	bl	28c0e <assert_print>
   1f1ac:	21ba      	movs	r1, #186	; 0xba
   1f1ae:	4620      	mov	r0, r4
   1f1b0:	f009 fd26 	bl	28c00 <assert_post_action>
   1f1b4:	20002cc8 	.word	0x20002cc8
   1f1b8:	200045fb 	.word	0x200045fb
   1f1bc:	20001ec8 	.word	0x20001ec8
   1f1c0:	00030164 	.word	0x00030164
   1f1c4:	00030128 	.word	0x00030128
   1f1c8:	0003346c 	.word	0x0003346c
   1f1cc:	0003348c 	.word	0x0003348c

0001f1d0 <buttons_scan_fn>:
{
   1f1d0:	b538      	push	{r3, r4, r5, lr}
	button_scan = get_buttons();
   1f1d2:	f7ff ff15 	bl	1f000 <get_buttons>
   1f1d6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f1d8:	4b35      	ldr	r3, [pc, #212]	; (1f2b0 <buttons_scan_fn+0xe0>)
   1f1da:	f3bf 8f5b 	dmb	ish
   1f1de:	e853 2f00 	ldrex	r2, [r3]
   1f1e2:	e843 4100 	strex	r1, r4, [r3]
   1f1e6:	2900      	cmp	r1, #0
   1f1e8:	d1f9      	bne.n	1f1de <buttons_scan_fn+0xe>
   1f1ea:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   1f1ee:	4b31      	ldr	r3, [pc, #196]	; (1f2b4 <buttons_scan_fn+0xe4>)
   1f1f0:	781b      	ldrb	r3, [r3, #0]
   1f1f2:	b943      	cbnz	r3, 1f206 <buttons_scan_fn+0x36>
		if (button_scan != last_button_scan) {
   1f1f4:	4b30      	ldr	r3, [pc, #192]	; (1f2b8 <buttons_scan_fn+0xe8>)
   1f1f6:	6819      	ldr	r1, [r3, #0]
   1f1f8:	42a1      	cmp	r1, r4
   1f1fa:	d007      	beq.n	1f20c <buttons_scan_fn+0x3c>
			button_handlers_call(button_scan, has_changed);
   1f1fc:	4061      	eors	r1, r4
   1f1fe:	4620      	mov	r0, r4
   1f200:	f7ff ff64 	bl	1f0cc <button_handlers_call>
   1f204:	e002      	b.n	1f20c <buttons_scan_fn+0x3c>
		initial_run = false;
   1f206:	4b2b      	ldr	r3, [pc, #172]	; (1f2b4 <buttons_scan_fn+0xe4>)
   1f208:	2200      	movs	r2, #0
   1f20a:	701a      	strb	r2, [r3, #0]
	last_button_scan = button_scan;
   1f20c:	4b2a      	ldr	r3, [pc, #168]	; (1f2b8 <buttons_scan_fn+0xe8>)
   1f20e:	601c      	str	r4, [r3, #0]
	if (button_scan != 0) {
   1f210:	b134      	cbz	r4, 1f220 <buttons_scan_fn+0x50>
		k_work_reschedule(&buttons_scan,
   1f212:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1f216:	2300      	movs	r3, #0
   1f218:	4828      	ldr	r0, [pc, #160]	; (1f2bc <buttons_scan_fn+0xec>)
   1f21a:	f003 ff9f 	bl	2315c <k_work_reschedule>
}
   1f21e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1f220:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f224:	f3ef 8311 	mrs	r3, BASEPRI
   1f228:	f382 8812 	msr	BASEPRI_MAX, r2
   1f22c:	f3bf 8f6f 	isb	sy
   1f230:	461d      	mov	r5, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f232:	4823      	ldr	r0, [pc, #140]	; (1f2c0 <buttons_scan_fn+0xf0>)
   1f234:	f002 fdf6 	bl	21e24 <z_spin_lock_valid>
   1f238:	b1e0      	cbz	r0, 1f274 <buttons_scan_fn+0xa4>
	z_spin_lock_set_owner(l);
   1f23a:	4821      	ldr	r0, [pc, #132]	; (1f2c0 <buttons_scan_fn+0xf0>)
   1f23c:	f002 fe12 	bl	21e64 <z_spin_lock_set_owner>
		switch (state) {
   1f240:	4b20      	ldr	r3, [pc, #128]	; (1f2c4 <buttons_scan_fn+0xf4>)
   1f242:	781b      	ldrb	r3, [r3, #0]
   1f244:	2b01      	cmp	r3, #1
   1f246:	d129      	bne.n	1f29c <buttons_scan_fn+0xcc>
			state = STATE_WAITING;
   1f248:	4b1e      	ldr	r3, [pc, #120]	; (1f2c4 <buttons_scan_fn+0xf4>)
   1f24a:	2200      	movs	r2, #0
   1f24c:	701a      	strb	r2, [r3, #0]
			err = callback_ctrl(true);
   1f24e:	2001      	movs	r0, #1
   1f250:	f7ff fe96 	bl	1ef80 <callback_ctrl>
   1f254:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f256:	481a      	ldr	r0, [pc, #104]	; (1f2c0 <buttons_scan_fn+0xf0>)
   1f258:	f002 fdf4 	bl	21e44 <z_spin_unlock_valid>
   1f25c:	b1a0      	cbz	r0, 1f288 <buttons_scan_fn+0xb8>
	__asm__ volatile(
   1f25e:	f385 8811 	msr	BASEPRI, r5
   1f262:	f3bf 8f6f 	isb	sy
		if (err) {
   1f266:	2c00      	cmp	r4, #0
   1f268:	d0d9      	beq.n	1f21e <buttons_scan_fn+0x4e>
			LOG_ERR("Cannot enable callbacks");
   1f26a:	2145      	movs	r1, #69	; 0x45
   1f26c:	4816      	ldr	r0, [pc, #88]	; (1f2c8 <buttons_scan_fn+0xf8>)
   1f26e:	f009 fcee 	bl	28c4e <z_log_minimal_printk>
}
   1f272:	e7d4      	b.n	1f21e <buttons_scan_fn+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f274:	4c15      	ldr	r4, [pc, #84]	; (1f2cc <buttons_scan_fn+0xfc>)
   1f276:	2294      	movs	r2, #148	; 0x94
   1f278:	4621      	mov	r1, r4
   1f27a:	4815      	ldr	r0, [pc, #84]	; (1f2d0 <buttons_scan_fn+0x100>)
   1f27c:	f009 fcc7 	bl	28c0e <assert_print>
   1f280:	2194      	movs	r1, #148	; 0x94
   1f282:	4620      	mov	r0, r4
   1f284:	f009 fcbc 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f288:	4c10      	ldr	r4, [pc, #64]	; (1f2cc <buttons_scan_fn+0xfc>)
   1f28a:	22c2      	movs	r2, #194	; 0xc2
   1f28c:	4621      	mov	r1, r4
   1f28e:	4810      	ldr	r0, [pc, #64]	; (1f2d0 <buttons_scan_fn+0x100>)
   1f290:	f009 fcbd 	bl	28c0e <assert_print>
   1f294:	21c2      	movs	r1, #194	; 0xc2
   1f296:	4620      	mov	r0, r4
   1f298:	f009 fcb2 	bl	28c00 <assert_post_action>
			__ASSERT_NO_MSG(false);
   1f29c:	4c0d      	ldr	r4, [pc, #52]	; (1f2d4 <buttons_scan_fn+0x104>)
   1f29e:	228a      	movs	r2, #138	; 0x8a
   1f2a0:	4621      	mov	r1, r4
   1f2a2:	480b      	ldr	r0, [pc, #44]	; (1f2d0 <buttons_scan_fn+0x100>)
   1f2a4:	f009 fcb3 	bl	28c0e <assert_print>
   1f2a8:	218a      	movs	r1, #138	; 0x8a
   1f2aa:	4620      	mov	r0, r4
   1f2ac:	f009 fca8 	bl	28c00 <assert_post_action>
   1f2b0:	20002cd8 	.word	0x20002cd8
   1f2b4:	2000095e 	.word	0x2000095e
   1f2b8:	20002ca8 	.word	0x20002ca8
   1f2bc:	20001ec8 	.word	0x20001ec8
   1f2c0:	20002cc8 	.word	0x20002cc8
   1f2c4:	200045fb 	.word	0x200045fb
   1f2c8:	000334cc 	.word	0x000334cc
   1f2cc:	00030164 	.word	0x00030164
   1f2d0:	00030128 	.word	0x00030128
   1f2d4:	0003348c 	.word	0x0003348c

0001f2d8 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f2d8:	f3bf 8f5b 	dmb	ish
   1f2dc:	4b06      	ldr	r3, [pc, #24]	; (1f2f8 <dk_read_buttons+0x20>)
   1f2de:	681b      	ldr	r3, [r3, #0]
   1f2e0:	f3bf 8f5b 	dmb	ish
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   1f2e4:	b100      	cbz	r0, 1f2e8 <dk_read_buttons+0x10>
		*button_state = current_state;
   1f2e6:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   1f2e8:	b119      	cbz	r1, 1f2f2 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   1f2ea:	4a04      	ldr	r2, [pc, #16]	; (1f2fc <dk_read_buttons+0x24>)
   1f2ec:	6812      	ldr	r2, [r2, #0]
   1f2ee:	405a      	eors	r2, r3
   1f2f0:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   1f2f2:	4a02      	ldr	r2, [pc, #8]	; (1f2fc <dk_read_buttons+0x24>)
   1f2f4:	6013      	str	r3, [r2, #0]
}
   1f2f6:	4770      	bx	lr
   1f2f8:	20002cd8 	.word	0x20002cd8
   1f2fc:	20002ca4 	.word	0x20002ca4

0001f300 <dk_buttons_init>:
{
   1f300:	b570      	push	{r4, r5, r6, lr}
	button_handler_cb = button_handler;
   1f302:	4b3c      	ldr	r3, [pc, #240]	; (1f3f4 <dk_buttons_init+0xf4>)
   1f304:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1f306:	483c      	ldr	r0, [pc, #240]	; (1f3f8 <dk_buttons_init+0xf8>)
   1f308:	f00f ff02 	bl	2f110 <z_impl_k_mutex_init>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f30c:	2400      	movs	r4, #0
   1f30e:	e00a      	b.n	1f326 <dk_buttons_init+0x26>
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   1f310:	2120      	movs	r1, #32
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   1f312:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   1f316:	4839      	ldr	r0, [pc, #228]	; (1f3fc <dk_buttons_init+0xfc>)
   1f318:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1f31c:	f00e fee5 	bl	2e0ea <gpio_pin_configure_dt>
		if (err) {
   1f320:	4606      	mov	r6, r0
   1f322:	b958      	cbnz	r0, 1f33c <dk_buttons_init+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f324:	3401      	adds	r4, #1
   1f326:	2c03      	cmp	r4, #3
   1f328:	d80d      	bhi.n	1f346 <dk_buttons_init+0x46>
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
   1f32a:	4b34      	ldr	r3, [pc, #208]	; (1f3fc <dk_buttons_init+0xfc>)
   1f32c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f330:	88db      	ldrh	r3, [r3, #6]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   1f332:	f013 0f01 	tst.w	r3, #1
   1f336:	d0eb      	beq.n	1f310 <dk_buttons_init+0x10>
   1f338:	2110      	movs	r1, #16
   1f33a:	e7ea      	b.n	1f312 <dk_buttons_init+0x12>
			LOG_ERR("Cannot configure button gpio");
   1f33c:	2145      	movs	r1, #69	; 0x45
   1f33e:	4830      	ldr	r0, [pc, #192]	; (1f400 <dk_buttons_init+0x100>)
   1f340:	f009 fc85 	bl	28c4e <z_log_minimal_printk>
			return err;
   1f344:	e053      	b.n	1f3ee <dk_buttons_init+0xee>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f346:	2400      	movs	r4, #0
	uint32_t pin_mask = 0;
   1f348:	4625      	mov	r5, r4
   1f34a:	e007      	b.n	1f35c <dk_buttons_init+0x5c>
		pin_mask |= BIT(buttons[i].pin);
   1f34c:	4b2b      	ldr	r3, [pc, #172]	; (1f3fc <dk_buttons_init+0xfc>)
   1f34e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f352:	791a      	ldrb	r2, [r3, #4]
   1f354:	2301      	movs	r3, #1
   1f356:	4093      	lsls	r3, r2
   1f358:	431d      	orrs	r5, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f35a:	3401      	adds	r4, #1
   1f35c:	2c03      	cmp	r4, #3
   1f35e:	d811      	bhi.n	1f384 <dk_buttons_init+0x84>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1f360:	4b26      	ldr	r3, [pc, #152]	; (1f3fc <dk_buttons_init+0xfc>)
   1f362:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1f366:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f36a:	7919      	ldrb	r1, [r3, #4]
   1f36c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1f370:	f7ff fd9e 	bl	1eeb0 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1f374:	4606      	mov	r6, r0
   1f376:	2800      	cmp	r0, #0
   1f378:	d0e8      	beq.n	1f34c <dk_buttons_init+0x4c>
			LOG_ERR("Cannot disable callbacks()");
   1f37a:	2145      	movs	r1, #69	; 0x45
   1f37c:	4821      	ldr	r0, [pc, #132]	; (1f404 <dk_buttons_init+0x104>)
   1f37e:	f009 fc66 	bl	28c4e <z_log_minimal_printk>
			return err;
   1f382:	e034      	b.n	1f3ee <dk_buttons_init+0xee>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1f384:	4b20      	ldr	r3, [pc, #128]	; (1f408 <dk_buttons_init+0x108>)
   1f386:	4a21      	ldr	r2, [pc, #132]	; (1f40c <dk_buttons_init+0x10c>)
   1f388:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
   1f38a:	609d      	str	r5, [r3, #8]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f38c:	2400      	movs	r4, #0
   1f38e:	2c03      	cmp	r4, #3
   1f390:	d80e      	bhi.n	1f3b0 <dk_buttons_init+0xb0>
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   1f392:	491d      	ldr	r1, [pc, #116]	; (1f408 <dk_buttons_init+0x108>)
   1f394:	4b19      	ldr	r3, [pc, #100]	; (1f3fc <dk_buttons_init+0xfc>)
   1f396:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1f39a:	f00e fe9c 	bl	2e0d6 <gpio_add_callback>
		if (err) {
   1f39e:	4606      	mov	r6, r0
   1f3a0:	b908      	cbnz	r0, 1f3a6 <dk_buttons_init+0xa6>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f3a2:	3401      	adds	r4, #1
   1f3a4:	e7f3      	b.n	1f38e <dk_buttons_init+0x8e>
			LOG_ERR("Cannot add callback");
   1f3a6:	2145      	movs	r1, #69	; 0x45
   1f3a8:	4819      	ldr	r0, [pc, #100]	; (1f410 <dk_buttons_init+0x110>)
   1f3aa:	f009 fc50 	bl	28c4e <z_log_minimal_printk>
			return err;
   1f3ae:	e01e      	b.n	1f3ee <dk_buttons_init+0xee>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1f3b0:	4c18      	ldr	r4, [pc, #96]	; (1f414 <dk_buttons_init+0x114>)
   1f3b2:	4919      	ldr	r1, [pc, #100]	; (1f418 <dk_buttons_init+0x118>)
   1f3b4:	4620      	mov	r0, r4
   1f3b6:	f003 fdb9 	bl	22f2c <k_work_init_delayable>
	state = STATE_SCANNING;
   1f3ba:	4b18      	ldr	r3, [pc, #96]	; (1f41c <dk_buttons_init+0x11c>)
   1f3bc:	2201      	movs	r2, #1
   1f3be:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1f3c0:	2200      	movs	r2, #0
   1f3c2:	2300      	movs	r3, #0
   1f3c4:	4620      	mov	r0, r4
   1f3c6:	f003 fe6b 	bl	230a0 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1f3ca:	2100      	movs	r1, #0
   1f3cc:	4608      	mov	r0, r1
   1f3ce:	f7ff ff83 	bl	1f2d8 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1f3d2:	f7ff fe15 	bl	1f000 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f3d6:	4b12      	ldr	r3, [pc, #72]	; (1f420 <dk_buttons_init+0x120>)
   1f3d8:	f3bf 8f5b 	dmb	ish
   1f3dc:	e853 2f00 	ldrex	r2, [r3]
   1f3e0:	e843 0100 	strex	r1, r0, [r3]
   1f3e4:	2900      	cmp	r1, #0
   1f3e6:	d1f9      	bne.n	1f3dc <dk_buttons_init+0xdc>
   1f3e8:	f3bf 8f5b 	dmb	ish
	return 0;
   1f3ec:	2600      	movs	r6, #0
}
   1f3ee:	4630      	mov	r0, r6
   1f3f0:	bd70      	pop	{r4, r5, r6, pc}
   1f3f2:	bf00      	nop
   1f3f4:	20002cdc 	.word	0x20002cdc
   1f3f8:	20002cac 	.word	0x20002cac
   1f3fc:	000335c8 	.word	0x000335c8
   1f400:	000334ec 	.word	0x000334ec
   1f404:	00033510 	.word	0x00033510
   1f408:	20002ccc 	.word	0x20002ccc
   1f40c:	0001f11d 	.word	0x0001f11d
   1f410:	00033530 	.word	0x00033530
   1f414:	20001ec8 	.word	0x20001ec8
   1f418:	0001f1d1 	.word	0x0001f1d1
   1f41c:	200045fb 	.word	0x200045fb
   1f420:	20002cd8 	.word	0x20002cd8

0001f424 <dk_set_leds_state>:
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
{
   1f424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1f426:	280f      	cmp	r0, #15
   1f428:	d827      	bhi.n	1f47a <dk_set_leds_state+0x56>
   1f42a:	4605      	mov	r5, r0
   1f42c:	460e      	mov	r6, r1
   1f42e:	290f      	cmp	r1, #15
   1f430:	d826      	bhi.n	1f480 <dk_set_leds_state+0x5c>
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1f432:	2400      	movs	r4, #0
   1f434:	e00b      	b.n	1f44e <dk_set_leds_state+0x2a>
		int val, err;

		if (BIT(i) & leds_on_mask) {
			val = 1;
   1f436:	2201      	movs	r2, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1f438:	4b13      	ldr	r3, [pc, #76]	; (1f488 <dk_set_leds_state+0x64>)
   1f43a:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   1f43e:	7909      	ldrb	r1, [r1, #4]
   1f440:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1f444:	f7ff fe20 	bl	1f088 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1f448:	4607      	mov	r7, r0
   1f44a:	b970      	cbnz	r0, 1f46a <dk_set_leds_state+0x46>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1f44c:	3401      	adds	r4, #1
   1f44e:	2c03      	cmp	r4, #3
   1f450:	d810      	bhi.n	1f474 <dk_set_leds_state+0x50>
		if (BIT(i) & leds_on_mask) {
   1f452:	fa25 f304 	lsr.w	r3, r5, r4
   1f456:	f013 0f01 	tst.w	r3, #1
   1f45a:	d1ec      	bne.n	1f436 <dk_set_leds_state+0x12>
		} else if (BIT(i) & leds_off_mask) {
   1f45c:	fa26 f304 	lsr.w	r3, r6, r4
   1f460:	f013 0f01 	tst.w	r3, #1
   1f464:	d0f2      	beq.n	1f44c <dk_set_leds_state+0x28>
			val = 0;
   1f466:	2200      	movs	r2, #0
   1f468:	e7e6      	b.n	1f438 <dk_set_leds_state+0x14>
			LOG_ERR("Cannot write LED gpio");
   1f46a:	2145      	movs	r1, #69	; 0x45
   1f46c:	4807      	ldr	r0, [pc, #28]	; (1f48c <dk_set_leds_state+0x68>)
   1f46e:	f009 fbee 	bl	28c4e <z_log_minimal_printk>
			return err;
   1f472:	e000      	b.n	1f476 <dk_set_leds_state+0x52>
		}
	}

	return 0;
   1f474:	2700      	movs	r7, #0
}
   1f476:	4638      	mov	r0, r7
   1f478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1f47a:	f06f 0715 	mvn.w	r7, #21
   1f47e:	e7fa      	b.n	1f476 <dk_set_leds_state+0x52>
   1f480:	f06f 0715 	mvn.w	r7, #21
   1f484:	e7f7      	b.n	1f476 <dk_set_leds_state+0x52>
   1f486:	bf00      	nop
   1f488:	000335a8 	.word	0x000335a8
   1f48c:	0003354c 	.word	0x0003354c

0001f490 <dk_leds_init>:
{
   1f490:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1f492:	2400      	movs	r4, #0
   1f494:	2c03      	cmp	r4, #3
   1f496:	d80f      	bhi.n	1f4b8 <dk_leds_init+0x28>
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   1f498:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1f49c:	480a      	ldr	r0, [pc, #40]	; (1f4c8 <dk_leds_init+0x38>)
   1f49e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1f4a2:	f00e fe22 	bl	2e0ea <gpio_pin_configure_dt>
		if (err) {
   1f4a6:	4605      	mov	r5, r0
   1f4a8:	b908      	cbnz	r0, 1f4ae <dk_leds_init+0x1e>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1f4aa:	3401      	adds	r4, #1
   1f4ac:	e7f2      	b.n	1f494 <dk_leds_init+0x4>
			LOG_ERR("Cannot configure LED gpio");
   1f4ae:	2145      	movs	r1, #69	; 0x45
   1f4b0:	4806      	ldr	r0, [pc, #24]	; (1f4cc <dk_leds_init+0x3c>)
   1f4b2:	f009 fbcc 	bl	28c4e <z_log_minimal_printk>
			return err;
   1f4b6:	e004      	b.n	1f4c2 <dk_leds_init+0x32>
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
   1f4b8:	210f      	movs	r1, #15
   1f4ba:	2000      	movs	r0, #0
   1f4bc:	f7ff ffb2 	bl	1f424 <dk_set_leds_state>
   1f4c0:	4605      	mov	r5, r0
}
   1f4c2:	4628      	mov	r0, r5
   1f4c4:	bd38      	pop	{r3, r4, r5, pc}
   1f4c6:	bf00      	nop
   1f4c8:	000335a8 	.word	0x000335a8
   1f4cc:	00033568 	.word	0x00033568

0001f4d0 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1f4d0:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1f4d2:	2803      	cmp	r0, #3
   1f4d4:	d80c      	bhi.n	1f4f0 <dk_set_led+0x20>
   1f4d6:	460a      	mov	r2, r1
   1f4d8:	4b0b      	ldr	r3, [pc, #44]	; (1f508 <dk_set_led+0x38>)
   1f4da:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1f4de:	7909      	ldrb	r1, [r1, #4]
   1f4e0:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1f4e4:	f7ff fdd0 	bl	1f088 <gpio_pin_set>
		LOG_ERR("LED index out of the range");
		return -EINVAL;
	}
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
   1f4e8:	4604      	mov	r4, r0
   1f4ea:	b940      	cbnz	r0, 1f4fe <dk_set_led+0x2e>
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1f4ec:	4620      	mov	r0, r4
   1f4ee:	bd10      	pop	{r4, pc}
		LOG_ERR("LED index out of the range");
   1f4f0:	2145      	movs	r1, #69	; 0x45
   1f4f2:	4806      	ldr	r0, [pc, #24]	; (1f50c <dk_set_led+0x3c>)
   1f4f4:	f009 fbab 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1f4f8:	f06f 0415 	mvn.w	r4, #21
   1f4fc:	e7f6      	b.n	1f4ec <dk_set_led+0x1c>
		LOG_ERR("Cannot write LED gpio");
   1f4fe:	2145      	movs	r1, #69	; 0x45
   1f500:	4803      	ldr	r0, [pc, #12]	; (1f510 <dk_set_led+0x40>)
   1f502:	f009 fba4 	bl	28c4e <z_log_minimal_printk>
   1f506:	e7f1      	b.n	1f4ec <dk_set_led+0x1c>
   1f508:	000335a8 	.word	0x000335a8
   1f50c:	00033588 	.word	0x00033588
   1f510:	0003354c 	.word	0x0003354c

0001f514 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1f514:	b508      	push	{r3, lr}
   1f516:	4602      	mov	r2, r0
   1f518:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1f51a:	4802      	ldr	r0, [pc, #8]	; (1f524 <multithreading_lock_acquire+0x10>)
   1f51c:	f002 fe68 	bl	221f0 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   1f520:	bd08      	pop	{r3, pc}
   1f522:	bf00      	nop
   1f524:	200009e8 	.word	0x200009e8

0001f528 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   1f528:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1f52a:	4802      	ldr	r0, [pc, #8]	; (1f534 <multithreading_lock_release+0xc>)
   1f52c:	f002 ff4a 	bl	223c4 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   1f530:	bd08      	pop	{r3, pc}
   1f532:	bf00      	nop
   1f534:	200009e8 	.word	0x200009e8

0001f538 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1f538:	b508      	push	{r3, lr}
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1f53a:	2145      	movs	r1, #69	; 0x45
   1f53c:	4802      	ldr	r0, [pc, #8]	; (1f548 <k_sys_fatal_error_handler+0x10>)
   1f53e:	f009 fb86 	bl	28c4e <z_log_minimal_printk>
		sys_arch_reboot(0);
   1f542:	2000      	movs	r0, #0
   1f544:	f00a fc82 	bl	29e4c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1f548:	000335fc 	.word	0x000335fc

0001f54c <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1f54c:	b508      	push	{r3, lr}
   1f54e:	4602      	mov	r2, r0
   1f550:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1f552:	2145      	movs	r1, #69	; 0x45
   1f554:	4804      	ldr	r0, [pc, #16]	; (1f568 <sdc_assertion_handler+0x1c>)
   1f556:	f009 fb7a 	bl	28c4e <z_log_minimal_printk>
	k_oops();
   1f55a:	4040      	eors	r0, r0
   1f55c:	f380 8811 	msr	BASEPRI, r0
   1f560:	f04f 0003 	mov.w	r0, #3
   1f564:	df02      	svc	2
}
   1f566:	bd08      	pop	{r3, pc}
   1f568:	00033620 	.word	0x00033620

0001f56c <z_impl_entropy_get_entropy>:
				  uint16_t length);

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
   1f56c:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   1f56e:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1f570:	681b      	ldr	r3, [r3, #0]
   1f572:	b10b      	cbz	r3, 1f578 <z_impl_entropy_get_entropy+0xc>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1f574:	4798      	blx	r3
}
   1f576:	bd10      	pop	{r4, pc}
	__ASSERT(api->get_entropy != NULL,
   1f578:	4c04      	ldr	r4, [pc, #16]	; (1f58c <z_impl_entropy_get_entropy+0x20>)
   1f57a:	224d      	movs	r2, #77	; 0x4d
   1f57c:	4621      	mov	r1, r4
   1f57e:	4804      	ldr	r0, [pc, #16]	; (1f590 <z_impl_entropy_get_entropy+0x24>)
   1f580:	f009 fb45 	bl	28c0e <assert_print>
   1f584:	214d      	movs	r1, #77	; 0x4d
   1f586:	4620      	mov	r0, r4
   1f588:	f009 fb3a 	bl	28c00 <assert_post_action>
   1f58c:	0003364c 	.word	0x0003364c
   1f590:	00030128 	.word	0x00030128

0001f594 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1f594:	b510      	push	{r4, lr}
   1f596:	460a      	mov	r2, r1
		union { uintptr_t x; uint16_t val; } parm2 = { .val = length };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   1f598:	4601      	mov	r1, r0
   1f59a:	4808      	ldr	r0, [pc, #32]	; (1f5bc <rand_prio_low_vector_get_blocking+0x28>)
   1f59c:	f7ff ffe6 	bl	1f56c <z_impl_entropy_get_entropy>
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1f5a0:	b900      	cbnz	r0, 1f5a4 <rand_prio_low_vector_get_blocking+0x10>
	(void) err;
}
   1f5a2:	bd10      	pop	{r4, pc}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1f5a4:	4c06      	ldr	r4, [pc, #24]	; (1f5c0 <rand_prio_low_vector_get_blocking+0x2c>)
   1f5a6:	f240 12a9 	movw	r2, #425	; 0x1a9
   1f5aa:	4621      	mov	r1, r4
   1f5ac:	4805      	ldr	r0, [pc, #20]	; (1f5c4 <rand_prio_low_vector_get_blocking+0x30>)
   1f5ae:	f009 fb2e 	bl	28c0e <assert_print>
   1f5b2:	f240 11a9 	movw	r1, #425	; 0x1a9
   1f5b6:	4620      	mov	r0, r4
   1f5b8:	f009 fb22 	bl	28c00 <assert_post_action>
   1f5bc:	0002f734 	.word	0x0002f734
   1f5c0:	00033680 	.word	0x00033680
   1f5c4:	00030128 	.word	0x00030128

0001f5c8 <event_packet_process>:
{
   1f5c8:	b570      	push	{r4, r5, r6, lr}
   1f5ca:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   1f5cc:	f00e fda2 	bl	2e114 <event_packet_is_discardable>
   1f5d0:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   1f5d2:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f5d4:	461d      	mov	r5, r3
   1f5d6:	b183      	cbz	r3, 1f5fa <event_packet_process+0x32>
   1f5d8:	2200      	movs	r2, #0
   1f5da:	2300      	movs	r3, #0
   1f5dc:	4629      	mov	r1, r5
   1f5de:	f7f4 fdbb 	bl	14158 <bt_buf_get_evt>
	if (!evt_buf) {
   1f5e2:	4606      	mov	r6, r0
   1f5e4:	b170      	cbz	r0, 1f604 <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1f5e6:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1f5e8:	3202      	adds	r2, #2
   1f5ea:	4621      	mov	r1, r4
   1f5ec:	3008      	adds	r0, #8
   1f5ee:	f00d feec 	bl	2d3ca <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1f5f2:	4630      	mov	r0, r6
   1f5f4:	f7f6 f8c4 	bl	15780 <bt_recv>
}
   1f5f8:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f5fa:	f04f 32ff 	mov.w	r2, #4294967295
   1f5fe:	f04f 33ff 	mov.w	r3, #4294967295
   1f602:	e7eb      	b.n	1f5dc <event_packet_process+0x14>
		if (discardable) {
   1f604:	2d00      	cmp	r5, #0
   1f606:	d1f7      	bne.n	1f5f8 <event_packet_process+0x30>
		BT_ERR("No event buffer available");
   1f608:	2145      	movs	r1, #69	; 0x45
   1f60a:	4802      	ldr	r0, [pc, #8]	; (1f614 <event_packet_process+0x4c>)
   1f60c:	f009 fb1f 	bl	28c4e <z_log_minimal_printk>
		return;
   1f610:	e7f2      	b.n	1f5f8 <event_packet_process+0x30>
   1f612:	bf00      	nop
   1f614:	000336bc 	.word	0x000336bc

0001f618 <data_packet_process>:
{
   1f618:	b538      	push	{r3, r4, r5, lr}
   1f61a:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1f61c:	f04f 32ff 	mov.w	r2, #4294967295
   1f620:	f04f 33ff 	mov.w	r3, #4294967295
   1f624:	2003      	movs	r0, #3
   1f626:	f7f4 fd57 	bl	140d8 <bt_buf_get_rx>
	if (!data_buf) {
   1f62a:	b150      	cbz	r0, 1f642 <data_packet_process+0x2a>
   1f62c:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1f62e:	8862      	ldrh	r2, [r4, #2]
   1f630:	3204      	adds	r2, #4
   1f632:	4621      	mov	r1, r4
   1f634:	3008      	adds	r0, #8
   1f636:	f00d fec8 	bl	2d3ca <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1f63a:	4628      	mov	r0, r5
   1f63c:	f7f6 f8a0 	bl	15780 <bt_recv>
}
   1f640:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("No data buffer available");
   1f642:	2145      	movs	r1, #69	; 0x45
   1f644:	4801      	ldr	r0, [pc, #4]	; (1f64c <data_packet_process+0x34>)
   1f646:	f009 fb02 	bl	28c4e <z_log_minimal_printk>
		return;
   1f64a:	e7f9      	b.n	1f640 <data_packet_process+0x28>
   1f64c:	000336dc 	.word	0x000336dc

0001f650 <fetch_and_process_hci_msg>:
{
   1f650:	b530      	push	{r4, r5, lr}
   1f652:	b083      	sub	sp, #12
   1f654:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f656:	f04f 30ff 	mov.w	r0, #4294967295
   1f65a:	f04f 31ff 	mov.w	r1, #4294967295
   1f65e:	f7ff ff59 	bl	1f514 <multithreading_lock_acquire>
	if (!errcode) {
   1f662:	b110      	cbz	r0, 1f66a <fetch_and_process_hci_msg+0x1a>
		return false;
   1f664:	2000      	movs	r0, #0
}
   1f666:	b003      	add	sp, #12
   1f668:	bd30      	pop	{r4, r5, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1f66a:	f10d 0107 	add.w	r1, sp, #7
   1f66e:	4620      	mov	r0, r4
   1f670:	f000 fa68 	bl	1fb44 <hci_internal_msg_get>
   1f674:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1f676:	f7ff ff57 	bl	1f528 <multithreading_lock_release>
	if (errcode) {
   1f67a:	2d00      	cmp	r5, #0
   1f67c:	d1f2      	bne.n	1f664 <fetch_and_process_hci_msg+0x14>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1f67e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f682:	2b04      	cmp	r3, #4
   1f684:	d006      	beq.n	1f694 <fetch_and_process_hci_msg+0x44>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1f686:	2b02      	cmp	r3, #2
   1f688:	d109      	bne.n	1f69e <fetch_and_process_hci_msg+0x4e>
		data_packet_process(p_hci_buffer);
   1f68a:	4620      	mov	r0, r4
   1f68c:	f7ff ffc4 	bl	1f618 <data_packet_process>
	return true;
   1f690:	2001      	movs	r0, #1
   1f692:	e7e8      	b.n	1f666 <fetch_and_process_hci_msg+0x16>
		event_packet_process(p_hci_buffer);
   1f694:	4620      	mov	r0, r4
   1f696:	f7ff ff97 	bl	1f5c8 <event_packet_process>
	return true;
   1f69a:	2001      	movs	r0, #1
   1f69c:	e7e3      	b.n	1f666 <fetch_and_process_hci_msg+0x16>
		__ASSERT(false, "sdc_hci_msg_type_t has changed. This if-else needs a new branch");
   1f69e:	4c06      	ldr	r4, [pc, #24]	; (1f6b8 <fetch_and_process_hci_msg+0x68>)
   1f6a0:	f44f 72bb 	mov.w	r2, #374	; 0x176
   1f6a4:	4621      	mov	r1, r4
   1f6a6:	4805      	ldr	r0, [pc, #20]	; (1f6bc <fetch_and_process_hci_msg+0x6c>)
   1f6a8:	f009 fab1 	bl	28c0e <assert_print>
   1f6ac:	f44f 71bb 	mov.w	r1, #374	; 0x176
   1f6b0:	4620      	mov	r0, r4
   1f6b2:	f009 faa5 	bl	28c00 <assert_post_action>
   1f6b6:	bf00      	nop
   1f6b8:	00033680 	.word	0x00033680
   1f6bc:	00030128 	.word	0x00030128

0001f6c0 <receive_signal_raise>:
{
   1f6c0:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1f6c2:	4902      	ldr	r1, [pc, #8]	; (1f6cc <receive_signal_raise+0xc>)
   1f6c4:	4802      	ldr	r0, [pc, #8]	; (1f6d0 <receive_signal_raise+0x10>)
   1f6c6:	f00f fe3f 	bl	2f348 <k_work_submit_to_queue>
}
   1f6ca:	bd08      	pop	{r3, pc}
   1f6cc:	20002d2c 	.word	0x20002d2c
   1f6d0:	20001fb0 	.word	0x20001fb0

0001f6d4 <acl_handle>:
{
   1f6d4:	b538      	push	{r3, r4, r5, lr}
   1f6d6:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f6d8:	f04f 30ff 	mov.w	r0, #4294967295
   1f6dc:	f04f 31ff 	mov.w	r1, #4294967295
   1f6e0:	f7ff ff18 	bl	1f514 <multithreading_lock_acquire>
	if (!errcode) {
   1f6e4:	4605      	mov	r5, r0
   1f6e6:	b108      	cbz	r0, 1f6ec <acl_handle+0x18>
}
   1f6e8:	4628      	mov	r0, r5
   1f6ea:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   1f6ec:	68a0      	ldr	r0, [r4, #8]
   1f6ee:	f7ed fab9 	bl	cc64 <sdc_hci_data_put>
   1f6f2:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1f6f4:	f7ff ff18 	bl	1f528 <multithreading_lock_release>
		if (errcode) {
   1f6f8:	2d00      	cmp	r5, #0
   1f6fa:	d0f5      	beq.n	1f6e8 <acl_handle+0x14>
   1f6fc:	4902      	ldr	r1, [pc, #8]	; (1f708 <acl_handle+0x34>)
   1f6fe:	4803      	ldr	r0, [pc, #12]	; (1f70c <acl_handle+0x38>)
   1f700:	f00f fe22 	bl	2f348 <k_work_submit_to_queue>
}
   1f704:	e7f0      	b.n	1f6e8 <acl_handle+0x14>
   1f706:	bf00      	nop
   1f708:	20002d2c 	.word	0x20002d2c
   1f70c:	20001fb0 	.word	0x20001fb0

0001f710 <cmd_handle>:
{
   1f710:	b538      	push	{r3, r4, r5, lr}
   1f712:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f714:	f04f 30ff 	mov.w	r0, #4294967295
   1f718:	f04f 31ff 	mov.w	r1, #4294967295
   1f71c:	f7ff fefa 	bl	1f514 <multithreading_lock_acquire>
	if (!errcode) {
   1f720:	4604      	mov	r4, r0
   1f722:	b108      	cbz	r0, 1f728 <cmd_handle+0x18>
}
   1f724:	4620      	mov	r0, r4
   1f726:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   1f728:	68a8      	ldr	r0, [r5, #8]
   1f72a:	f000 f9f7 	bl	1fb1c <hci_internal_cmd_put>
   1f72e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f730:	f7ff fefa 	bl	1f528 <multithreading_lock_release>
	if (errcode) {
   1f734:	2c00      	cmp	r4, #0
   1f736:	d1f5      	bne.n	1f724 <cmd_handle+0x14>
   1f738:	4902      	ldr	r1, [pc, #8]	; (1f744 <cmd_handle+0x34>)
   1f73a:	4803      	ldr	r0, [pc, #12]	; (1f748 <cmd_handle+0x38>)
   1f73c:	f00f fe04 	bl	2f348 <k_work_submit_to_queue>
	return 0;
   1f740:	e7f0      	b.n	1f724 <cmd_handle+0x14>
   1f742:	bf00      	nop
   1f744:	20002d2c 	.word	0x20002d2c
   1f748:	20001fb0 	.word	0x20001fb0

0001f74c <rand_prio_high_vector_get>:
{
   1f74c:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1f74e:	4b0d      	ldr	r3, [pc, #52]	; (1f784 <rand_prio_high_vector_get+0x38>)
   1f750:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1f752:	685c      	ldr	r4, [r3, #4]
   1f754:	b154      	cbz	r4, 1f76c <rand_prio_high_vector_get+0x20>
   1f756:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1f758:	2300      	movs	r3, #0
   1f75a:	4601      	mov	r1, r0
   1f75c:	4809      	ldr	r0, [pc, #36]	; (1f784 <rand_prio_high_vector_get+0x38>)
   1f75e:	47a0      	blx	r4
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1f760:	2800      	cmp	r0, #0
   1f762:	db03      	blt.n	1f76c <rand_prio_high_vector_get+0x20>
	return ret >= 0 ? ret : 0;
   1f764:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1f768:	b2c0      	uxtb	r0, r0
   1f76a:	bd10      	pop	{r4, pc}
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1f76c:	4c06      	ldr	r4, [pc, #24]	; (1f788 <rand_prio_high_vector_get+0x3c>)
   1f76e:	f240 12a1 	movw	r2, #417	; 0x1a1
   1f772:	4621      	mov	r1, r4
   1f774:	4805      	ldr	r0, [pc, #20]	; (1f78c <rand_prio_high_vector_get+0x40>)
   1f776:	f009 fa4a 	bl	28c0e <assert_print>
   1f77a:	f240 11a1 	movw	r1, #417	; 0x1a1
   1f77e:	4620      	mov	r0, r4
   1f780:	f009 fa3e 	bl	28c00 <assert_post_action>
   1f784:	0002f734 	.word	0x0002f734
   1f788:	00033680 	.word	0x00033680
   1f78c:	00030128 	.word	0x00030128

0001f790 <rand_prio_low_vector_get>:
{
   1f790:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   1f792:	4b0d      	ldr	r3, [pc, #52]	; (1f7c8 <rand_prio_low_vector_get+0x38>)
   1f794:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   1f796:	685c      	ldr	r4, [r3, #4]
   1f798:	b154      	cbz	r4, 1f7b0 <rand_prio_low_vector_get+0x20>
   1f79a:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   1f79c:	2300      	movs	r3, #0
   1f79e:	4601      	mov	r1, r0
   1f7a0:	4809      	ldr	r0, [pc, #36]	; (1f7c8 <rand_prio_low_vector_get+0x38>)
   1f7a2:	47a0      	blx	r4
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1f7a4:	2800      	cmp	r0, #0
   1f7a6:	db03      	blt.n	1f7b0 <rand_prio_low_vector_get+0x20>
	return ret >= 0 ? ret : 0;
   1f7a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1f7ac:	b2c0      	uxtb	r0, r0
   1f7ae:	bd10      	pop	{r4, pc}
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1f7b0:	4c06      	ldr	r4, [pc, #24]	; (1f7cc <rand_prio_low_vector_get+0x3c>)
   1f7b2:	f240 1299 	movw	r2, #409	; 0x199
   1f7b6:	4621      	mov	r1, r4
   1f7b8:	4805      	ldr	r0, [pc, #20]	; (1f7d0 <rand_prio_low_vector_get+0x40>)
   1f7ba:	f009 fa28 	bl	28c0e <assert_print>
   1f7be:	f240 1199 	movw	r1, #409	; 0x199
   1f7c2:	4620      	mov	r0, r4
   1f7c4:	f009 fa1c 	bl	28c00 <assert_post_action>
   1f7c8:	0002f734 	.word	0x0002f734
   1f7cc:	00033680 	.word	0x00033680
   1f7d0:	00030128 	.word	0x00030128

0001f7d4 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   1f7d4:	b510      	push	{r4, lr}
   1f7d6:	b088      	sub	sp, #32
	BT_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   1f7d8:	4922      	ldr	r1, [pc, #136]	; (1f864 <hci_driver_open+0x90>)
   1f7da:	4823      	ldr	r0, [pc, #140]	; (1f868 <hci_driver_open+0x94>)
   1f7dc:	f003 faa6 	bl	22d2c <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   1f7e0:	f000 fb42 	bl	1fe68 <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   1f7e4:	a803      	add	r0, sp, #12
   1f7e6:	f7e4 fddd 	bl	43a4 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1f7ea:	4a20      	ldr	r2, [pc, #128]	; (1f86c <hci_driver_open+0x98>)
   1f7ec:	2149      	movs	r1, #73	; 0x49
   1f7ee:	4820      	ldr	r0, [pc, #128]	; (1f870 <hci_driver_open+0x9c>)
   1f7f0:	f009 fa2d 	bl	28c4e <z_log_minimal_printk>
   1f7f4:	2214      	movs	r2, #20
   1f7f6:	a903      	add	r1, sp, #12
   1f7f8:	2003      	movs	r0, #3
   1f7fa:	f7f2 fa81 	bl	11d00 <z_log_minimal_hexdump_print>
   1f7fe:	481d      	ldr	r0, [pc, #116]	; (1f874 <hci_driver_open+0xa0>)
   1f800:	f00f fbfa 	bl	2eff8 <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   1f804:	b1a0      	cbz	r0, 1f830 <hci_driver_open+0x5c>
		BT_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   1f806:	4a1c      	ldr	r2, [pc, #112]	; (1f878 <hci_driver_open+0xa4>)
   1f808:	466b      	mov	r3, sp
   1f80a:	ca07      	ldmia	r2, {r0, r1, r2}
   1f80c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   1f810:	4618      	mov	r0, r3
   1f812:	f7e4 ff75 	bl	4700 <sdc_rand_source_register>
	if (err) {
   1f816:	4602      	mov	r2, r0
   1f818:	b988      	cbnz	r0, 1f83e <hci_driver_open+0x6a>
		BT_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   1f81a:	f04f 30ff 	mov.w	r0, #4294967295
   1f81e:	f04f 31ff 	mov.w	r1, #4294967295
   1f822:	f7ff fe77 	bl	1f514 <multithreading_lock_acquire>
	if (err) {
   1f826:	4604      	mov	r4, r0
   1f828:	b180      	cbz	r0, 1f84c <hci_driver_open+0x78>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   1f82a:	4620      	mov	r0, r4
   1f82c:	b008      	add	sp, #32
   1f82e:	bd10      	pop	{r4, pc}
		BT_ERR("Entropy source device not ready");
   1f830:	2145      	movs	r1, #69	; 0x45
   1f832:	4812      	ldr	r0, [pc, #72]	; (1f87c <hci_driver_open+0xa8>)
   1f834:	f009 fa0b 	bl	28c4e <z_log_minimal_printk>
		return -ENODEV;
   1f838:	f06f 0412 	mvn.w	r4, #18
   1f83c:	e7f5      	b.n	1f82a <hci_driver_open+0x56>
		BT_ERR("Failed to register rand source (%d)", err);
   1f83e:	2145      	movs	r1, #69	; 0x45
   1f840:	480f      	ldr	r0, [pc, #60]	; (1f880 <hci_driver_open+0xac>)
   1f842:	f009 fa04 	bl	28c4e <z_log_minimal_printk>
		return -EINVAL;
   1f846:	f06f 0415 	mvn.w	r4, #21
   1f84a:	e7ee      	b.n	1f82a <hci_driver_open+0x56>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1f84c:	490d      	ldr	r1, [pc, #52]	; (1f884 <hci_driver_open+0xb0>)
   1f84e:	480e      	ldr	r0, [pc, #56]	; (1f888 <hci_driver_open+0xb4>)
   1f850:	f7e4 fe1a 	bl	4488 <sdc_enable>
	if (err) {
   1f854:	4604      	mov	r4, r0
   1f856:	b910      	cbnz	r0, 1f85e <hci_driver_open+0x8a>
	MULTITHREADING_LOCK_RELEASE();
   1f858:	f7ff fe66 	bl	1f528 <multithreading_lock_release>
	return 0;
   1f85c:	e7e5      	b.n	1f82a <hci_driver_open+0x56>
		MULTITHREADING_LOCK_RELEASE();
   1f85e:	f7ff fe63 	bl	1f528 <multithreading_lock_release>
		return err;
   1f862:	e7e2      	b.n	1f82a <hci_driver_open+0x56>
   1f864:	0002e1e3 	.word	0x0002e1e3
   1f868:	20002d2c 	.word	0x20002d2c
   1f86c:	000336fc 	.word	0x000336fc
   1f870:	00033724 	.word	0x00033724
   1f874:	0002f734 	.word	0x0002f734
   1f878:	0002fc64 	.word	0x0002fc64
   1f87c:	0003372c 	.word	0x0003372c
   1f880:	00033754 	.word	0x00033754
   1f884:	20002d3c 	.word	0x20002d3c
   1f888:	0001f6c1 	.word	0x0001f6c1

0001f88c <configure_memory_usage>:
{
   1f88c:	b500      	push	{lr}
   1f88e:	b083      	sub	sp, #12
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1f890:	2000      	movs	r0, #0
   1f892:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f896:	aa01      	add	r2, sp, #4
   1f898:	2101      	movs	r1, #1
   1f89a:	f7e4 fd91 	bl	43c0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f89e:	2800      	cmp	r0, #0
   1f8a0:	db3d      	blt.n	1f91e <configure_memory_usage+0x92>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1f8a2:	2301      	movs	r3, #1
   1f8a4:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f8a8:	aa01      	add	r2, sp, #4
   1f8aa:	2102      	movs	r1, #2
   1f8ac:	2000      	movs	r0, #0
   1f8ae:	f7e4 fd87 	bl	43c0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f8b2:	2800      	cmp	r0, #0
   1f8b4:	db33      	blt.n	1f91e <configure_memory_usage+0x92>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   1f8b6:	231b      	movs	r3, #27
   1f8b8:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1f8bc:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   1f8c0:	2302      	movs	r3, #2
   1f8c2:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   1f8c6:	2103      	movs	r1, #3
   1f8c8:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f8cc:	aa01      	add	r2, sp, #4
   1f8ce:	2000      	movs	r0, #0
   1f8d0:	f7e4 fd76 	bl	43c0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f8d4:	2800      	cmp	r0, #0
   1f8d6:	db22      	blt.n	1f91e <configure_memory_usage+0x92>
	cfg.event_length.event_length_us =
   1f8d8:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1f8dc:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f8de:	aa01      	add	r2, sp, #4
   1f8e0:	2104      	movs	r1, #4
   1f8e2:	2000      	movs	r0, #0
   1f8e4:	f7e4 fd6c 	bl	43c0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f8e8:	2800      	cmp	r0, #0
   1f8ea:	db18      	blt.n	1f91e <configure_memory_usage+0x92>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1f8ec:	2301      	movs	r3, #1
   1f8ee:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f8f2:	aa01      	add	r2, sp, #4
   1f8f4:	2105      	movs	r1, #5
   1f8f6:	2000      	movs	r0, #0
   1f8f8:	f7e4 fd62 	bl	43c0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f8fc:	2800      	cmp	r0, #0
   1f8fe:	db0e      	blt.n	1f91e <configure_memory_usage+0x92>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1f900:	231f      	movs	r3, #31
   1f902:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f906:	aa01      	add	r2, sp, #4
   1f908:	2107      	movs	r1, #7
   1f90a:	2000      	movs	r0, #0
   1f90c:	f7e4 fd58 	bl	43c0 <sdc_cfg_set>
		if (required_memory < 0) {
   1f910:	2800      	cmp	r0, #0
   1f912:	db04      	blt.n	1f91e <configure_memory_usage+0x92>
	if (required_memory > sizeof(sdc_mempool)) {
   1f914:	f240 734d 	movw	r3, #1869	; 0x74d
   1f918:	4298      	cmp	r0, r3
   1f91a:	d803      	bhi.n	1f924 <configure_memory_usage+0x98>
	return 0;
   1f91c:	2000      	movs	r0, #0
}
   1f91e:	b003      	add	sp, #12
   1f920:	f85d fb04 	ldr.w	pc, [sp], #4
		BT_ERR("Allocated memory too low: %u < %u",
   1f924:	4603      	mov	r3, r0
   1f926:	f240 724d 	movw	r2, #1869	; 0x74d
   1f92a:	2145      	movs	r1, #69	; 0x45
   1f92c:	4805      	ldr	r0, [pc, #20]	; (1f944 <configure_memory_usage+0xb8>)
   1f92e:	f009 f98e 	bl	28c4e <z_log_minimal_printk>
		k_panic();
   1f932:	4040      	eors	r0, r0
   1f934:	f380 8811 	msr	BASEPRI, r0
   1f938:	f04f 0004 	mov.w	r0, #4
   1f93c:	df02      	svc	2
		return -ENOMEM;
   1f93e:	f06f 000b 	mvn.w	r0, #11
   1f942:	e7ec      	b.n	1f91e <configure_memory_usage+0x92>
   1f944:	00033780 	.word	0x00033780

0001f948 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1f948:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1f94a:	4806      	ldr	r0, [pc, #24]	; (1f964 <hci_driver_init+0x1c>)
   1f94c:	f7f5 ff46 	bl	157dc <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1f950:	4805      	ldr	r0, [pc, #20]	; (1f968 <hci_driver_init+0x20>)
   1f952:	f7e4 fdc1 	bl	44d8 <sdc_init>

	err = configure_supported_features();
   1f956:	f00e fc24 	bl	2e1a2 <configure_supported_features>
	if (err) {
   1f95a:	b100      	cbz	r0, 1f95e <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
   1f95c:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
   1f95e:	f7ff ff95 	bl	1f88c <configure_memory_usage>
	if (err) {
   1f962:	e7fb      	b.n	1f95c <hci_driver_init+0x14>
   1f964:	000337d0 	.word	0x000337d0
   1f968:	0001f54d 	.word	0x0001f54d

0001f96c <hci_driver_receive_process>:
{
   1f96c:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
   1f96e:	4805      	ldr	r0, [pc, #20]	; (1f984 <hci_driver_receive_process+0x18>)
   1f970:	f7ff fe6e 	bl	1f650 <fetch_and_process_hci_msg>
   1f974:	b900      	cbnz	r0, 1f978 <hci_driver_receive_process+0xc>
}
   1f976:	bd08      	pop	{r3, pc}
   1f978:	4903      	ldr	r1, [pc, #12]	; (1f988 <hci_driver_receive_process+0x1c>)
   1f97a:	4804      	ldr	r0, [pc, #16]	; (1f98c <hci_driver_receive_process+0x20>)
   1f97c:	f00f fce4 	bl	2f348 <k_work_submit_to_queue>
   1f980:	e7f9      	b.n	1f976 <hci_driver_receive_process+0xa>
   1f982:	bf00      	nop
   1f984:	20002ce0 	.word	0x20002ce0
   1f988:	20002d2c 	.word	0x20002d2c
   1f98c:	20001fb0 	.word	0x20001fb0

0001f990 <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
   1f990:	f242 0326 	movw	r3, #8230	; 0x2026
   1f994:	4298      	cmp	r0, r3
   1f996:	d81c      	bhi.n	1f9d2 <command_generates_command_complete_event+0x42>
   1f998:	f242 030d 	movw	r3, #8205	; 0x200d
   1f99c:	4298      	cmp	r0, r3
   1f99e:	d20b      	bcs.n	1f9b8 <command_generates_command_complete_event+0x28>
   1f9a0:	f240 4306 	movw	r3, #1030	; 0x406
   1f9a4:	4298      	cmp	r0, r3
   1f9a6:	d032      	beq.n	1fa0e <command_generates_command_complete_event+0x7e>
   1f9a8:	f240 431d 	movw	r3, #1053	; 0x41d
   1f9ac:	4298      	cmp	r0, r3
   1f9ae:	d001      	beq.n	1f9b4 <command_generates_command_complete_event+0x24>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
   1f9b0:	2001      	movs	r0, #1
   1f9b2:	4770      	bx	lr
	switch (hci_opcode) {
   1f9b4:	2000      	movs	r0, #0
   1f9b6:	4770      	bx	lr
   1f9b8:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   1f9bc:	380d      	subs	r0, #13
   1f9be:	b280      	uxth	r0, r0
   1f9c0:	4b19      	ldr	r3, [pc, #100]	; (1fa28 <command_generates_command_complete_event+0x98>)
   1f9c2:	40c3      	lsrs	r3, r0
   1f9c4:	f013 0f01 	tst.w	r3, #1
   1f9c8:	d101      	bne.n	1f9ce <command_generates_command_complete_event+0x3e>
		return true;
   1f9ca:	2001      	movs	r0, #1
   1f9cc:	4770      	bx	lr
	switch (hci_opcode) {
   1f9ce:	2000      	movs	r0, #0
   1f9d0:	4770      	bx	lr
   1f9d2:	f242 0377 	movw	r3, #8311	; 0x2077
   1f9d6:	4298      	cmp	r0, r3
   1f9d8:	d01b      	beq.n	1fa12 <command_generates_command_complete_event+0x82>
   1f9da:	d909      	bls.n	1f9f0 <command_generates_command_complete_event+0x60>
   1f9dc:	f64f 5302 	movw	r3, #64770	; 0xfd02
   1f9e0:	4298      	cmp	r0, r3
   1f9e2:	d01e      	beq.n	1fa22 <command_generates_command_complete_event+0x92>
   1f9e4:	f64f 530a 	movw	r3, #64778	; 0xfd0a
   1f9e8:	4298      	cmp	r0, r3
   1f9ea:	d00e      	beq.n	1fa0a <command_generates_command_complete_event+0x7a>
		return true;
   1f9ec:	2001      	movs	r0, #1
	}
}
   1f9ee:	4770      	bx	lr
	switch (hci_opcode) {
   1f9f0:	f242 0332 	movw	r3, #8242	; 0x2032
   1f9f4:	4298      	cmp	r0, r3
   1f9f6:	d00e      	beq.n	1fa16 <command_generates_command_complete_event+0x86>
   1f9f8:	d30f      	bcc.n	1fa1a <command_generates_command_complete_event+0x8a>
   1f9fa:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   1f9fe:	3803      	subs	r0, #3
   1fa00:	b280      	uxth	r0, r0
   1fa02:	2801      	cmp	r0, #1
   1fa04:	d90b      	bls.n	1fa1e <command_generates_command_complete_event+0x8e>
		return true;
   1fa06:	2001      	movs	r0, #1
   1fa08:	4770      	bx	lr
	switch (hci_opcode) {
   1fa0a:	2000      	movs	r0, #0
   1fa0c:	4770      	bx	lr
   1fa0e:	2000      	movs	r0, #0
   1fa10:	4770      	bx	lr
   1fa12:	2000      	movs	r0, #0
   1fa14:	4770      	bx	lr
   1fa16:	2000      	movs	r0, #0
   1fa18:	4770      	bx	lr
		return true;
   1fa1a:	2001      	movs	r0, #1
   1fa1c:	4770      	bx	lr
	switch (hci_opcode) {
   1fa1e:	2000      	movs	r0, #0
   1fa20:	4770      	bx	lr
   1fa22:	2000      	movs	r0, #0
   1fa24:	4770      	bx	lr
   1fa26:	bf00      	nop
   1fa28:	03001241 	.word	0x03001241

0001fa2c <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
   1fa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa2e:	b083      	sub	sp, #12
   1fa30:	4607      	mov	r7, r0
   1fa32:	460e      	mov	r6, r1
	return ((uint16_t)src[1] << 8) | src[0];
   1fa34:	7843      	ldrb	r3, [r0, #1]
   1fa36:	7805      	ldrb	r5, [r0, #0]
   1fa38:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1fa3c:	2304      	movs	r3, #4
   1fa3e:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
   1fa42:	4b35      	ldr	r3, [pc, #212]	; (1fb18 <cmd_put+0xec>)
   1fa44:	681c      	ldr	r4, [r3, #0]
   1fa46:	b13c      	cbz	r4, 1fa58 <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
   1fa48:	f10d 0307 	add.w	r3, sp, #7
   1fa4c:	f10d 0206 	add.w	r2, sp, #6
   1fa50:	47a0      	blx	r4
   1fa52:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1fa54:	2801      	cmp	r0, #1
   1fa56:	d121      	bne.n	1fa9c <cmd_put+0x70>

		switch (BT_OGF(opcode)) {
   1fa58:	0aab      	lsrs	r3, r5, #10
   1fa5a:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1fa5e:	d20b      	bcs.n	1fa78 <cmd_put+0x4c>
   1fa60:	b21a      	sxth	r2, r3
   1fa62:	2a00      	cmp	r2, #0
   1fa64:	d04b      	beq.n	1fafe <cmd_put+0xd2>
   1fa66:	3b01      	subs	r3, #1
   1fa68:	2b07      	cmp	r3, #7
   1fa6a:	d84a      	bhi.n	1fb02 <cmd_put+0xd6>
   1fa6c:	e8df f003 	tbb	[pc, r3]
   1fa70:	2f274922 	.word	0x2f274922
   1fa74:	3f494937 	.word	0x3f494937
   1fa78:	2b3f      	cmp	r3, #63	; 0x3f
   1fa7a:	d107      	bne.n	1fa8c <cmd_put+0x60>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
   1fa7c:	f10d 0206 	add.w	r2, sp, #6
   1fa80:	4631      	mov	r1, r6
   1fa82:	4638      	mov	r0, r7
   1fa84:	f00e fe91 	bl	2e7aa <vs_cmd_put>
   1fa88:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
   1fa8a:	e000      	b.n	1fa8e <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   1fa8c:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
   1fa8e:	4628      	mov	r0, r5
   1fa90:	f7ff ff7e 	bl	1f990 <command_generates_command_complete_event>
   1fa94:	f080 0001 	eor.w	r0, r0, #1
   1fa98:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
   1fa9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1faa0:	b90b      	cbnz	r3, 1faa6 <cmd_put+0x7a>
   1faa2:	2c01      	cmp	r4, #1
   1faa4:	d12f      	bne.n	1fb06 <cmd_put+0xda>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
   1faa6:	4622      	mov	r2, r4
   1faa8:	4629      	mov	r1, r5
   1faaa:	4630      	mov	r0, r6
   1faac:	f00e fb9d 	bl	2e1ea <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
   1fab0:	b003      	add	sp, #12
   1fab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = link_control_cmd_put(cmd_in);
   1fab4:	4638      	mov	r0, r7
   1fab6:	f00e fbb3 	bl	2e220 <link_control_cmd_put>
   1faba:	4604      	mov	r4, r0
			break;
   1fabc:	e7e7      	b.n	1fa8e <cmd_put+0x62>
			status = controller_and_baseband_cmd_put(cmd_in,
   1fabe:	f10d 0206 	add.w	r2, sp, #6
   1fac2:	4631      	mov	r1, r6
   1fac4:	4638      	mov	r0, r7
   1fac6:	f00e fbc2 	bl	2e24e <controller_and_baseband_cmd_put>
   1faca:	4604      	mov	r4, r0
			break;
   1facc:	e7df      	b.n	1fa8e <cmd_put+0x62>
			status = info_param_cmd_put(cmd_in,
   1face:	f10d 0206 	add.w	r2, sp, #6
   1fad2:	4631      	mov	r1, r6
   1fad4:	4638      	mov	r0, r7
   1fad6:	f00e fcec 	bl	2e4b2 <info_param_cmd_put>
   1fada:	4604      	mov	r4, r0
			break;
   1fadc:	e7d7      	b.n	1fa8e <cmd_put+0x62>
			status = status_param_cmd_put(cmd_in,
   1fade:	f10d 0206 	add.w	r2, sp, #6
   1fae2:	4631      	mov	r1, r6
   1fae4:	4638      	mov	r0, r7
   1fae6:	f00e fb99 	bl	2e21c <status_param_cmd_put>
   1faea:	4604      	mov	r4, r0
			break;
   1faec:	e7cf      	b.n	1fa8e <cmd_put+0x62>
			status = le_controller_cmd_put(cmd_in,
   1faee:	f10d 0206 	add.w	r2, sp, #6
   1faf2:	4631      	mov	r1, r6
   1faf4:	4638      	mov	r0, r7
   1faf6:	f00e fd6e 	bl	2e5d6 <le_controller_cmd_put>
   1fafa:	4604      	mov	r4, r0
			break;
   1fafc:	e7c7      	b.n	1fa8e <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   1fafe:	2401      	movs	r4, #1
   1fb00:	e7c5      	b.n	1fa8e <cmd_put+0x62>
   1fb02:	2401      	movs	r4, #1
   1fb04:	e7c3      	b.n	1fa8e <cmd_put+0x62>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1fb06:	4623      	mov	r3, r4
   1fb08:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1fb0c:	4629      	mov	r1, r5
   1fb0e:	4630      	mov	r0, r6
   1fb10:	f00e fb74 	bl	2e1fc <encode_command_complete_header>
}
   1fb14:	e7cc      	b.n	1fab0 <cmd_put+0x84>
   1fb16:	bf00      	nop
   1fb18:	2000348c 	.word	0x2000348c

0001fb1c <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1fb1c:	4b07      	ldr	r3, [pc, #28]	; (1fb3c <hci_internal_cmd_put+0x20>)
   1fb1e:	781b      	ldrb	r3, [r3, #0]
   1fb20:	b94b      	cbnz	r3, 1fb36 <hci_internal_cmd_put+0x1a>
{
   1fb22:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   1fb24:	4c06      	ldr	r4, [pc, #24]	; (1fb40 <hci_internal_cmd_put+0x24>)
   1fb26:	4621      	mov	r1, r4
   1fb28:	f7ff ff80 	bl	1fa2c <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1fb2c:	2301      	movs	r3, #1
   1fb2e:	f804 3c01 	strb.w	r3, [r4, #-1]
	}

	return 0;
   1fb32:	2000      	movs	r0, #0
}
   1fb34:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   1fb36:	f04f 30ff 	mov.w	r0, #4294967295
}
   1fb3a:	4770      	bx	lr
   1fb3c:	20003490 	.word	0x20003490
   1fb40:	20003491 	.word	0x20003491

0001fb44 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1fb44:	b538      	push	{r3, r4, r5, lr}
   1fb46:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   1fb48:	4b08      	ldr	r3, [pc, #32]	; (1fb6c <hci_internal_msg_get+0x28>)
   1fb4a:	781b      	ldrb	r3, [r3, #0]
   1fb4c:	b913      	cbnz	r3, 1fb54 <hci_internal_msg_get+0x10>
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
   1fb4e:	f7ed f894 	bl	cc7a <sdc_hci_get>
}
   1fb52:	bd38      	pop	{r3, r4, r5, pc}
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1fb54:	4d05      	ldr	r5, [pc, #20]	; (1fb6c <hci_internal_msg_get+0x28>)
   1fb56:	78aa      	ldrb	r2, [r5, #2]
		memcpy(msg_out,
   1fb58:	3202      	adds	r2, #2
   1fb5a:	1c69      	adds	r1, r5, #1
   1fb5c:	f00a f916 	bl	29d8c <memcpy>
		cmd_complete_or_status.occurred = false;
   1fb60:	2000      	movs	r0, #0
   1fb62:	7028      	strb	r0, [r5, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1fb64:	2304      	movs	r3, #4
   1fb66:	7023      	strb	r3, [r4, #0]
		return 0;
   1fb68:	e7f3      	b.n	1fb52 <hci_internal_msg_get+0xe>
   1fb6a:	bf00      	nop
   1fb6c:	20003490 	.word	0x20003490

0001fb70 <z_impl_entropy_get_entropy>:
{
   1fb70:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   1fb72:	6883      	ldr	r3, [r0, #8]
	__ASSERT(api->get_entropy != NULL,
   1fb74:	681b      	ldr	r3, [r3, #0]
   1fb76:	b10b      	cbz	r3, 1fb7c <z_impl_entropy_get_entropy+0xc>
	return api->get_entropy(dev, buffer, length);
   1fb78:	4798      	blx	r3
}
   1fb7a:	bd10      	pop	{r4, pc}
	__ASSERT(api->get_entropy != NULL,
   1fb7c:	4c04      	ldr	r4, [pc, #16]	; (1fb90 <z_impl_entropy_get_entropy+0x20>)
   1fb7e:	224d      	movs	r2, #77	; 0x4d
   1fb80:	4621      	mov	r1, r4
   1fb82:	4804      	ldr	r0, [pc, #16]	; (1fb94 <z_impl_entropy_get_entropy+0x24>)
   1fb84:	f009 f843 	bl	28c0e <assert_print>
   1fb88:	214d      	movs	r1, #77	; 0x4d
   1fb8a:	4620      	mov	r0, r4
   1fb8c:	f009 f838 	bl	28c00 <assert_post_action>
   1fb90:	0003364c 	.word	0x0003364c
   1fb94:	00030128 	.word	0x00030128

0001fb98 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fb98:	4288      	cmp	r0, r1
   1fb9a:	d902      	bls.n	1fba2 <sys_memcpy_swap+0xa>
   1fb9c:	188b      	adds	r3, r1, r2
   1fb9e:	4283      	cmp	r3, r0
   1fba0:	d904      	bls.n	1fbac <sys_memcpy_swap+0x14>
   1fba2:	4288      	cmp	r0, r1
   1fba4:	d205      	bcs.n	1fbb2 <sys_memcpy_swap+0x1a>
   1fba6:	1883      	adds	r3, r0, r2
   1fba8:	428b      	cmp	r3, r1
   1fbaa:	d802      	bhi.n	1fbb2 <sys_memcpy_swap+0x1a>
	psrc += length - 1;
   1fbac:	1e53      	subs	r3, r2, #1
   1fbae:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1fbb0:	e011      	b.n	1fbd6 <sys_memcpy_swap+0x3e>
{
   1fbb2:	b510      	push	{r4, lr}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fbb4:	4c09      	ldr	r4, [pc, #36]	; (1fbdc <sys_memcpy_swap+0x44>)
   1fbb6:	f240 2215 	movw	r2, #533	; 0x215
   1fbba:	4621      	mov	r1, r4
   1fbbc:	4808      	ldr	r0, [pc, #32]	; (1fbe0 <sys_memcpy_swap+0x48>)
   1fbbe:	f009 f826 	bl	28c0e <assert_print>
   1fbc2:	f240 2115 	movw	r1, #533	; 0x215
   1fbc6:	4620      	mov	r0, r4
   1fbc8:	f009 f81a 	bl	28c00 <assert_post_action>
		*pdst++ = *psrc--;
   1fbcc:	f811 3901 	ldrb.w	r3, [r1], #-1
   1fbd0:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1fbd4:	3a01      	subs	r2, #1
   1fbd6:	2a00      	cmp	r2, #0
   1fbd8:	d1f8      	bne.n	1fbcc <sys_memcpy_swap+0x34>
   1fbda:	4770      	bx	lr
   1fbdc:	00032684 	.word	0x00032684
   1fbe0:	00030128 	.word	0x00030128

0001fbe4 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1fbe4:	b538      	push	{r3, r4, r5, lr}
   1fbe6:	4605      	mov	r5, r0
   1fbe8:	460c      	mov	r4, r1
   1fbea:	4808      	ldr	r0, [pc, #32]	; (1fc0c <bt_rand+0x28>)
   1fbec:	f00f fa04 	bl	2eff8 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1fbf0:	f080 0301 	eor.w	r3, r0, #1
   1fbf4:	f013 0fff 	tst.w	r3, #255	; 0xff
   1fbf8:	d105      	bne.n	1fc06 <bt_rand+0x22>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1fbfa:	b2a2      	uxth	r2, r4
   1fbfc:	4629      	mov	r1, r5
   1fbfe:	4803      	ldr	r0, [pc, #12]	; (1fc0c <bt_rand+0x28>)
   1fc00:	f7ff ffb6 	bl	1fb70 <z_impl_entropy_get_entropy>
}
   1fc04:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1fc06:	f06f 0012 	mvn.w	r0, #18
   1fc0a:	e7fb      	b.n	1fc04 <bt_rand+0x20>
   1fc0c:	0002f734 	.word	0x0002f734

0001fc10 <public_key>:

#if defined(CONFIG_BT_CTLR_ECDH_LIB_OBERON)
#include <ocrypto_ecdh_p256.h>

static uint8_t public_key(void)
{
   1fc10:	b508      	push	{r3, lr}
   1fc12:	e002      	b.n	1fc1a <public_key+0xa>
		if (err) {
			return BT_HCI_ERR_UNSPECIFIED;
		}

		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
			err = -1;
   1fc14:	f04f 30ff 	mov.w	r0, #4294967295
			continue;
		}

		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
						   ecdh.private_key_be);
	} while (err);
   1fc18:	b190      	cbz	r0, 1fc40 <public_key+0x30>
		err = bt_rand(ecdh.private_key_be, 32);
   1fc1a:	2120      	movs	r1, #32
   1fc1c:	4809      	ldr	r0, [pc, #36]	; (1fc44 <public_key+0x34>)
   1fc1e:	f7ff ffe1 	bl	1fbe4 <bt_rand>
		if (err) {
   1fc22:	b960      	cbnz	r0, 1fc3e <public_key+0x2e>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1fc24:	2220      	movs	r2, #32
   1fc26:	4908      	ldr	r1, [pc, #32]	; (1fc48 <public_key+0x38>)
   1fc28:	4806      	ldr	r0, [pc, #24]	; (1fc44 <public_key+0x34>)
   1fc2a:	f00a f88a 	bl	29d42 <memcmp>
   1fc2e:	2800      	cmp	r0, #0
   1fc30:	d0f0      	beq.n	1fc14 <public_key+0x4>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1fc32:	4904      	ldr	r1, [pc, #16]	; (1fc44 <public_key+0x34>)
   1fc34:	f101 0020 	add.w	r0, r1, #32
   1fc38:	f005 fad8 	bl	251ec <ocrypto_ecdh_p256_public_key>
   1fc3c:	e7ec      	b.n	1fc18 <public_key+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   1fc3e:	201f      	movs	r0, #31

	return 0;
}
   1fc40:	bd08      	pop	{r3, pc}
   1fc42:	bf00      	nop
   1fc44:	200034ec 	.word	0x200034ec
   1fc48:	00033858 	.word	0x00033858

0001fc4c <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fc4c:	4288      	cmp	r0, r1
   1fc4e:	d902      	bls.n	1fc56 <sys_memcpy_swap+0xa>
   1fc50:	188b      	adds	r3, r1, r2
   1fc52:	4283      	cmp	r3, r0
   1fc54:	d904      	bls.n	1fc60 <sys_memcpy_swap+0x14>
   1fc56:	4288      	cmp	r0, r1
   1fc58:	d205      	bcs.n	1fc66 <sys_memcpy_swap+0x1a>
   1fc5a:	1883      	adds	r3, r0, r2
   1fc5c:	428b      	cmp	r3, r1
   1fc5e:	d802      	bhi.n	1fc66 <sys_memcpy_swap+0x1a>
	psrc += length - 1;
   1fc60:	1e53      	subs	r3, r2, #1
   1fc62:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1fc64:	e011      	b.n	1fc8a <sys_memcpy_swap+0x3e>
{
   1fc66:	b510      	push	{r4, lr}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fc68:	4c09      	ldr	r4, [pc, #36]	; (1fc90 <sys_memcpy_swap+0x44>)
   1fc6a:	f240 2215 	movw	r2, #533	; 0x215
   1fc6e:	4621      	mov	r1, r4
   1fc70:	4808      	ldr	r0, [pc, #32]	; (1fc94 <sys_memcpy_swap+0x48>)
   1fc72:	f008 ffcc 	bl	28c0e <assert_print>
   1fc76:	f240 2115 	movw	r1, #533	; 0x215
   1fc7a:	4620      	mov	r0, r4
   1fc7c:	f008 ffc0 	bl	28c00 <assert_post_action>
		*pdst++ = *psrc--;
   1fc80:	f811 3901 	ldrb.w	r3, [r1], #-1
   1fc84:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1fc88:	3a01      	subs	r2, #1
   1fc8a:	2a00      	cmp	r2, #0
   1fc8c:	d1f8      	bne.n	1fc80 <sys_memcpy_swap+0x34>
   1fc8e:	4770      	bx	lr
   1fc90:	00032684 	.word	0x00032684
   1fc94:	00030128 	.word	0x00030128

0001fc98 <ecdh_p256_public_key>:
	return 0;
}
#endif /* defined(BT_CTLR_ECDH_LIB_TINYCRYPT) */

static struct net_buf *ecdh_p256_public_key(void)
{
   1fc98:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = public_key();
   1fc9a:	f7ff ffb9 	bl	1fc10 <public_key>
   1fc9e:	4606      	mov	r6, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1fca0:	f04f 32ff 	mov.w	r2, #4294967295
   1fca4:	f04f 33ff 	mov.w	r3, #4294967295
   1fca8:	2001      	movs	r0, #1
   1fcaa:	f7f4 fa15 	bl	140d8 <bt_buf_get_rx>
   1fcae:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   1fcb0:	f100 0408 	add.w	r4, r0, #8
   1fcb4:	2102      	movs	r1, #2
   1fcb6:	4620      	mov	r0, r4
   1fcb8:	f7fd f87a 	bl	1cdb0 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1fcbc:	233e      	movs	r3, #62	; 0x3e
   1fcbe:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1fcc0:	2342      	movs	r3, #66	; 0x42
   1fcc2:	7043      	strb	r3, [r0, #1]
   1fcc4:	2101      	movs	r1, #1
   1fcc6:	4620      	mov	r0, r4
   1fcc8:	f7fd f872 	bl	1cdb0 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1fccc:	2308      	movs	r3, #8
   1fcce:	7003      	strb	r3, [r0, #0]
   1fcd0:	2141      	movs	r1, #65	; 0x41
   1fcd2:	4620      	mov	r0, r4
   1fcd4:	f7fd f86c 	bl	1cdb0 <net_buf_simple_add>
   1fcd8:	4604      	mov	r4, r0

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1fcda:	7006      	strb	r6, [r0, #0]

	if (status) {
   1fcdc:	b136      	cbz	r6, 1fcec <ecdh_p256_public_key+0x54>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1fcde:	2240      	movs	r2, #64	; 0x40
   1fce0:	2100      	movs	r1, #0
   1fce2:	3001      	adds	r0, #1
   1fce4:	f00a f881 	bl	29dea <memset>
		/* Reverse Y */
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
	}

	return buf;
}
   1fce8:	4628      	mov	r0, r5
   1fcea:	bd70      	pop	{r4, r5, r6, pc}
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1fcec:	4e06      	ldr	r6, [pc, #24]	; (1fd08 <ecdh_p256_public_key+0x70>)
   1fcee:	2220      	movs	r2, #32
   1fcf0:	4631      	mov	r1, r6
   1fcf2:	3001      	adds	r0, #1
   1fcf4:	f7ff ffaa 	bl	1fc4c <sys_memcpy_swap>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1fcf8:	2220      	movs	r2, #32
   1fcfa:	18b1      	adds	r1, r6, r2
   1fcfc:	f104 0021 	add.w	r0, r4, #33	; 0x21
   1fd00:	f7ff ffa4 	bl	1fc4c <sys_memcpy_swap>
   1fd04:	e7f0      	b.n	1fce8 <ecdh_p256_public_key+0x50>
   1fd06:	bf00      	nop
   1fd08:	2000350c 	.word	0x2000350c

0001fd0c <common_secret>:
{
   1fd0c:	b508      	push	{r3, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1fd0e:	b140      	cbz	r0, 1fd22 <common_secret+0x16>
   1fd10:	4908      	ldr	r1, [pc, #32]	; (1fd34 <common_secret+0x28>)
   1fd12:	4809      	ldr	r0, [pc, #36]	; (1fd38 <common_secret+0x2c>)
   1fd14:	4602      	mov	r2, r0
   1fd16:	f005 fa7d 	bl	25214 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1fd1a:	4602      	mov	r2, r0
   1fd1c:	b918      	cbnz	r0, 1fd26 <common_secret+0x1a>
	return 0;
   1fd1e:	2000      	movs	r0, #0
}
   1fd20:	bd08      	pop	{r3, pc}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1fd22:	4906      	ldr	r1, [pc, #24]	; (1fd3c <common_secret+0x30>)
   1fd24:	e7f5      	b.n	1fd12 <common_secret+0x6>
		BT_ERR("public key is not valid (err %d)", err);
   1fd26:	2145      	movs	r1, #69	; 0x45
   1fd28:	4805      	ldr	r0, [pc, #20]	; (1fd40 <common_secret+0x34>)
   1fd2a:	f008 ff90 	bl	28c4e <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   1fd2e:	2012      	movs	r0, #18
   1fd30:	e7f6      	b.n	1fd20 <common_secret+0x14>
   1fd32:	bf00      	nop
   1fd34:	00033858 	.word	0x00033858
   1fd38:	2000350c 	.word	0x2000350c
   1fd3c:	200034ec 	.word	0x200034ec
   1fd40:	00033808 	.word	0x00033808

0001fd44 <ecdh_p256_common_secret>:

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1fd44:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);
   1fd46:	f7ff ffe1 	bl	1fd0c <common_secret>
   1fd4a:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1fd4c:	f04f 32ff 	mov.w	r2, #4294967295
   1fd50:	f04f 33ff 	mov.w	r3, #4294967295
   1fd54:	2001      	movs	r0, #1
   1fd56:	f7f4 f9bf 	bl	140d8 <bt_buf_get_rx>
   1fd5a:	4604      	mov	r4, r0
   1fd5c:	f100 0608 	add.w	r6, r0, #8
   1fd60:	2102      	movs	r1, #2
   1fd62:	4630      	mov	r0, r6
   1fd64:	f7fd f824 	bl	1cdb0 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1fd68:	233e      	movs	r3, #62	; 0x3e
   1fd6a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1fd6c:	2322      	movs	r3, #34	; 0x22
   1fd6e:	7043      	strb	r3, [r0, #1]
   1fd70:	2101      	movs	r1, #1
   1fd72:	4630      	mov	r0, r6
   1fd74:	f7fd f81c 	bl	1cdb0 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1fd78:	2309      	movs	r3, #9
   1fd7a:	7003      	strb	r3, [r0, #0]
   1fd7c:	2121      	movs	r1, #33	; 0x21
   1fd7e:	4630      	mov	r0, r6
   1fd80:	f7fd f816 	bl	1cdb0 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1fd84:	7005      	strb	r5, [r0, #0]

	if (status) {
   1fd86:	b135      	cbz	r5, 1fd96 <ecdh_p256_common_secret+0x52>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1fd88:	2220      	movs	r2, #32
   1fd8a:	21ff      	movs	r1, #255	; 0xff
   1fd8c:	3001      	adds	r0, #1
   1fd8e:	f00a f82c 	bl	29dea <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1fd92:	4620      	mov	r0, r4
   1fd94:	bd70      	pop	{r4, r5, r6, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1fd96:	2220      	movs	r2, #32
   1fd98:	4902      	ldr	r1, [pc, #8]	; (1fda4 <ecdh_p256_common_secret+0x60>)
   1fd9a:	3001      	adds	r0, #1
   1fd9c:	f7ff ff56 	bl	1fc4c <sys_memcpy_swap>
   1fda0:	e7f7      	b.n	1fd92 <ecdh_p256_common_secret+0x4e>
   1fda2:	bf00      	nop
   1fda4:	2000350c 	.word	0x2000350c

0001fda8 <work_submit>:

static struct k_thread ecdh_thread_data;
static K_KERNEL_STACK_DEFINE(ecdh_thread_stack, CONFIG_BT_CTLR_ECDH_STACK_SIZE);

static void work_submit(void)
{
   1fda8:	b508      	push	{r3, lr}
	return z_impl_k_poll_signal_raise(sig, result);
   1fdaa:	2100      	movs	r1, #0
   1fdac:	4801      	ldr	r0, [pc, #4]	; (1fdb4 <work_submit+0xc>)
   1fdae:	f005 f987 	bl	250c0 <z_impl_k_poll_signal_raise>
	k_poll_signal_raise(&ecdh_signal, 0);
}
   1fdb2:	bd08      	pop	{r3, pc}
   1fdb4:	200034d8 	.word	0x200034d8

0001fdb8 <ecdh_cmd_process>:
{
   1fdb8:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fdba:	f3bf 8f5b 	dmb	ish
   1fdbe:	4b15      	ldr	r3, [pc, #84]	; (1fe14 <ecdh_cmd_process+0x5c>)
   1fdc0:	681b      	ldr	r3, [r3, #0]
   1fdc2:	f3bf 8f5b 	dmb	ish
	switch (atomic_get(&cmd)) {
   1fdc6:	2b02      	cmp	r3, #2
   1fdc8:	d01c      	beq.n	1fe04 <ecdh_cmd_process+0x4c>
   1fdca:	2b04      	cmp	r3, #4
   1fdcc:	d01e      	beq.n	1fe0c <ecdh_cmd_process+0x54>
   1fdce:	2b01      	cmp	r3, #1
   1fdd0:	d005      	beq.n	1fdde <ecdh_cmd_process+0x26>
		BT_WARN("Unknown command");
   1fdd2:	2157      	movs	r1, #87	; 0x57
   1fdd4:	4810      	ldr	r0, [pc, #64]	; (1fe18 <ecdh_cmd_process+0x60>)
   1fdd6:	f008 ff3a 	bl	28c4e <z_log_minimal_printk>
		buf = NULL;
   1fdda:	2000      	movs	r0, #0
		break;
   1fddc:	e001      	b.n	1fde2 <ecdh_cmd_process+0x2a>
		buf = ecdh_p256_public_key();
   1fdde:	f7ff ff5b 	bl	1fc98 <ecdh_p256_public_key>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fde2:	4b0c      	ldr	r3, [pc, #48]	; (1fe14 <ecdh_cmd_process+0x5c>)
   1fde4:	2200      	movs	r2, #0
   1fde6:	f3bf 8f5b 	dmb	ish
   1fdea:	e853 1f00 	ldrex	r1, [r3]
   1fdee:	e843 2c00 	strex	ip, r2, [r3]
   1fdf2:	f1bc 0f00 	cmp.w	ip, #0
   1fdf6:	d1f8      	bne.n	1fdea <ecdh_cmd_process+0x32>
   1fdf8:	f3bf 8f5b 	dmb	ish
	if (buf) {
   1fdfc:	b108      	cbz	r0, 1fe02 <ecdh_cmd_process+0x4a>
		bt_recv(buf);
   1fdfe:	f7f5 fcbf 	bl	15780 <bt_recv>
}
   1fe02:	bd08      	pop	{r3, pc}
		buf = ecdh_p256_common_secret(false);
   1fe04:	2000      	movs	r0, #0
   1fe06:	f7ff ff9d 	bl	1fd44 <ecdh_p256_common_secret>
		break;
   1fe0a:	e7ea      	b.n	1fde2 <ecdh_cmd_process+0x2a>
		buf = ecdh_p256_common_secret(true);
   1fe0c:	2001      	movs	r0, #1
   1fe0e:	f7ff ff99 	bl	1fd44 <ecdh_p256_common_secret>
		break;
   1fe12:	e7e6      	b.n	1fde2 <ecdh_cmd_process+0x2a>
   1fe14:	200034e8 	.word	0x200034e8
   1fe18:	00033830 	.word	0x00033830

0001fe1c <ecdh_thread>:

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1fe1c:	b500      	push	{lr}
   1fe1e:	b087      	sub	sp, #28
	struct k_poll_event events[1] = {
   1fe20:	2300      	movs	r3, #0
   1fe22:	9301      	str	r3, [sp, #4]
   1fe24:	9302      	str	r3, [sp, #8]
   1fe26:	9303      	str	r3, [sp, #12]
   1fe28:	9304      	str	r3, [sp, #16]
   1fe2a:	9305      	str	r3, [sp, #20]
   1fe2c:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1fe30:	2201      	movs	r2, #1
   1fe32:	f362 0305 	bfi	r3, r2, #0, #6
   1fe36:	f88d 3011 	strb.w	r3, [sp, #17]
   1fe3a:	4b0a      	ldr	r3, [pc, #40]	; (1fe64 <ecdh_thread+0x48>)
   1fe3c:	9305      	str	r3, [sp, #20]
	return z_impl_k_poll(events, num_events, timeout);
   1fe3e:	f04f 32ff 	mov.w	r2, #4294967295
   1fe42:	f04f 33ff 	mov.w	r3, #4294967295
   1fe46:	2101      	movs	r1, #1
   1fe48:	a801      	add	r0, sp, #4
   1fe4a:	f005 f857 	bl	24efc <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1fe4e:	4805      	ldr	r0, [pc, #20]	; (1fe64 <ecdh_thread+0x48>)
   1fe50:	f00f fbd7 	bl	2f602 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1fe54:	9b04      	ldr	r3, [sp, #16]
   1fe56:	f36f 3394 	bfc	r3, #14, #7
   1fe5a:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1fe5c:	f7ff ffac 	bl	1fdb8 <ecdh_cmd_process>
	while (true) {
   1fe60:	e7ed      	b.n	1fe3e <ecdh_thread+0x22>
   1fe62:	bf00      	nop
   1fe64:	200034d8 	.word	0x200034d8

0001fe68 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1fe68:	b510      	push	{r4, lr}
   1fe6a:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1fe6c:	480d      	ldr	r0, [pc, #52]	; (1fea4 <hci_ecdh_init+0x3c>)
   1fe6e:	f00f fbc3 	bl	2f5f8 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fe72:	4c0d      	ldr	r4, [pc, #52]	; (1fea8 <hci_ecdh_init+0x40>)
   1fe74:	2200      	movs	r2, #0
   1fe76:	2300      	movs	r3, #0
   1fe78:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1fe7c:	2300      	movs	r3, #0
   1fe7e:	9304      	str	r3, [sp, #16]
   1fe80:	220a      	movs	r2, #10
   1fe82:	9203      	str	r2, [sp, #12]
   1fe84:	9302      	str	r3, [sp, #8]
   1fe86:	9301      	str	r3, [sp, #4]
   1fe88:	9300      	str	r3, [sp, #0]
   1fe8a:	4b08      	ldr	r3, [pc, #32]	; (1feac <hci_ecdh_init+0x44>)
   1fe8c:	f44f 7262 	mov.w	r2, #904	; 0x388
   1fe90:	4907      	ldr	r1, [pc, #28]	; (1feb0 <hci_ecdh_init+0x48>)
   1fe92:	4620      	mov	r0, r4
   1fe94:	f002 f8da 	bl	2204c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1fe98:	4906      	ldr	r1, [pc, #24]	; (1feb4 <hci_ecdh_init+0x4c>)
   1fe9a:	4620      	mov	r0, r4
   1fe9c:	f001 ffa2 	bl	21de4 <z_impl_k_thread_name_set>
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1fea0:	b008      	add	sp, #32
   1fea2:	bd10      	pop	{r4, pc}
   1fea4:	200034d8 	.word	0x200034d8
   1fea8:	20001ef8 	.word	0x20001ef8
   1feac:	0001fe1d 	.word	0x0001fe1d
   1feb0:	20005ac0 	.word	0x20005ac0
   1feb4:	00033848 	.word	0x00033848

0001feb8 <hci_ecdh_uninit>:

void hci_ecdh_uninit(void)
{
   1feb8:	b508      	push	{r3, lr}
	z_impl_k_thread_abort(thread);
   1feba:	4802      	ldr	r0, [pc, #8]	; (1fec4 <hci_ecdh_uninit+0xc>)
   1febc:	f7f3 fd6c 	bl	13998 <z_impl_k_thread_abort>
#if !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK)
	k_thread_abort(&ecdh_thread_data);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1fec0:	bd08      	pop	{r3, pc}
   1fec2:	bf00      	nop
   1fec4:	20001ef8 	.word	0x20001ef8

0001fec8 <hci_cmd_le_read_local_p256_public_key>:


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1fec8:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1feca:	4b0a      	ldr	r3, [pc, #40]	; (1fef4 <hci_cmd_le_read_local_p256_public_key+0x2c>)
   1fecc:	2201      	movs	r2, #1
   1fece:	f3bf 8f5b 	dmb	ish
   1fed2:	e853 1f00 	ldrex	r1, [r3]
   1fed6:	2900      	cmp	r1, #0
   1fed8:	d103      	bne.n	1fee2 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1feda:	e843 2000 	strex	r0, r2, [r3]
   1fede:	2800      	cmp	r0, #0
   1fee0:	d1f7      	bne.n	1fed2 <hci_cmd_le_read_local_p256_public_key+0xa>
   1fee2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1fee6:	d103      	bne.n	1fef0 <hci_cmd_le_read_local_p256_public_key+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();
   1fee8:	f7ff ff5e 	bl	1fda8 <work_submit>

	return 0;
   1feec:	2000      	movs	r0, #0
}
   1feee:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1fef0:	200c      	movs	r0, #12
   1fef2:	e7fc      	b.n	1feee <hci_cmd_le_read_local_p256_public_key+0x26>
   1fef4:	200034e8 	.word	0x200034e8

0001fef8 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1fef8:	b538      	push	{r3, r4, r5, lr}
   1fefa:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1fefc:	b1e9      	cbz	r1, 1ff3a <cmd_le_generate_dhkey+0x42>
   1fefe:	2204      	movs	r2, #4
   1ff00:	4b10      	ldr	r3, [pc, #64]	; (1ff44 <cmd_le_generate_dhkey+0x4c>)
   1ff02:	f3bf 8f5b 	dmb	ish
   1ff06:	e853 1f00 	ldrex	r1, [r3]
   1ff0a:	2900      	cmp	r1, #0
   1ff0c:	d103      	bne.n	1ff16 <cmd_le_generate_dhkey+0x1e>
   1ff0e:	e843 2000 	strex	r0, r2, [r3]
   1ff12:	2800      	cmp	r0, #0
   1ff14:	d1f7      	bne.n	1ff06 <cmd_le_generate_dhkey+0xe>
   1ff16:	f3bf 8f5b 	dmb	ish
   1ff1a:	d110      	bne.n	1ff3e <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1ff1c:	4d0a      	ldr	r5, [pc, #40]	; (1ff48 <cmd_le_generate_dhkey+0x50>)
   1ff1e:	2220      	movs	r2, #32
   1ff20:	4621      	mov	r1, r4
   1ff22:	4628      	mov	r0, r5
   1ff24:	f7ff fe92 	bl	1fc4c <sys_memcpy_swap>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1ff28:	2220      	movs	r2, #32
   1ff2a:	18a1      	adds	r1, r4, r2
   1ff2c:	18a8      	adds	r0, r5, r2
   1ff2e:	f7ff fe8d 	bl	1fc4c <sys_memcpy_swap>

	work_submit();
   1ff32:	f7ff ff39 	bl	1fda8 <work_submit>

	return 0;
   1ff36:	2000      	movs	r0, #0
}
   1ff38:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1ff3a:	2202      	movs	r2, #2
   1ff3c:	e7e0      	b.n	1ff00 <cmd_le_generate_dhkey+0x8>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ff3e:	200c      	movs	r0, #12
   1ff40:	e7fa      	b.n	1ff38 <cmd_le_generate_dhkey+0x40>
   1ff42:	bf00      	nop
   1ff44:	200034e8 	.word	0x200034e8
   1ff48:	2000350c 	.word	0x2000350c

0001ff4c <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
   1ff4c:	b500      	push	{lr}
   1ff4e:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   1ff50:	f00e fce5 	bl	2e91e <m_config_clock_source_get>
   1ff54:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1ff58:	2332      	movs	r3, #50	; 0x32
   1ff5a:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1ff5e:	2300      	movs	r3, #0
   1ff60:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   1ff64:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   1ff68:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ff6c:	4a06      	ldr	r2, [pc, #24]	; (1ff88 <mpsl_lib_init_internal+0x3c>)
   1ff6e:	2119      	movs	r1, #25
   1ff70:	4668      	mov	r0, sp
   1ff72:	f7e4 f841 	bl	3ff8 <mpsl_init>
	if (err) {
   1ff76:	b110      	cbz	r0, 1ff7e <mpsl_lib_init_internal+0x32>
		return err;
	}
#endif

	return 0;
}
   1ff78:	b003      	add	sp, #12
   1ff7a:	f85d fb04 	ldr.w	pc, [sp], #4
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1ff7e:	2101      	movs	r1, #1
   1ff80:	4802      	ldr	r0, [pc, #8]	; (1ff8c <mpsl_lib_init_internal+0x40>)
   1ff82:	f7ec f8f6 	bl	c172 <mpsl_timeslot_session_count_set>
	if (err) {
   1ff86:	e7f7      	b.n	1ff78 <mpsl_lib_init_internal+0x2c>
   1ff88:	0001ff91 	.word	0x0001ff91
   1ff8c:	2000354c 	.word	0x2000354c

0001ff90 <m_assert_handler>:
{
   1ff90:	b508      	push	{r3, lr}
   1ff92:	4602      	mov	r2, r0
   1ff94:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1ff96:	2145      	movs	r1, #69	; 0x45
   1ff98:	4804      	ldr	r0, [pc, #16]	; (1ffac <m_assert_handler+0x1c>)
   1ff9a:	f008 fe58 	bl	28c4e <z_log_minimal_printk>
	k_oops();
   1ff9e:	4040      	eors	r0, r0
   1ffa0:	f380 8811 	msr	BASEPRI, r0
   1ffa4:	f04f 0003 	mov.w	r0, #3
   1ffa8:	df02      	svc	2
}
   1ffaa:	bd08      	pop	{r3, pc}
   1ffac:	00033880 	.word	0x00033880

0001ffb0 <mpsl_low_prio_work_handler>:
{
   1ffb0:	b510      	push	{r4, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ffb2:	f04f 30ff 	mov.w	r0, #4294967295
   1ffb6:	f04f 31ff 	mov.w	r1, #4294967295
   1ffba:	f7ff faab 	bl	1f514 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1ffbe:	b920      	cbnz	r0, 1ffca <mpsl_low_prio_work_handler+0x1a>
	mpsl_low_priority_process();
   1ffc0:	f7ec f9f4 	bl	c3ac <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   1ffc4:	f7ff fab0 	bl	1f528 <multithreading_lock_release>
}
   1ffc8:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(errcode == 0);
   1ffca:	4c05      	ldr	r4, [pc, #20]	; (1ffe0 <mpsl_low_prio_work_handler+0x30>)
   1ffcc:	2247      	movs	r2, #71	; 0x47
   1ffce:	4621      	mov	r1, r4
   1ffd0:	4804      	ldr	r0, [pc, #16]	; (1ffe4 <mpsl_low_prio_work_handler+0x34>)
   1ffd2:	f008 fe1c 	bl	28c0e <assert_print>
   1ffd6:	2147      	movs	r1, #71	; 0x47
   1ffd8:	4620      	mov	r0, r4
   1ffda:	f008 fe11 	bl	28c00 <assert_post_action>
   1ffde:	bf00      	nop
   1ffe0:	0003389c 	.word	0x0003389c
   1ffe4:	00030128 	.word	0x00030128

0001ffe8 <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(const struct device *dev)
{
   1ffe8:	b530      	push	{r4, r5, lr}
   1ffea:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1ffec:	4d0d      	ldr	r5, [pc, #52]	; (20024 <mpsl_low_prio_init+0x3c>)
   1ffee:	2400      	movs	r4, #0
   1fff0:	9400      	str	r4, [sp, #0]
   1fff2:	f06f 0309 	mvn.w	r3, #9
   1fff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1fffa:	490b      	ldr	r1, [pc, #44]	; (20028 <mpsl_low_prio_init+0x40>)
   1fffc:	4628      	mov	r0, r5
   1fffe:	f002 ff25 	bl	22e4c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   20002:	490a      	ldr	r1, [pc, #40]	; (2002c <mpsl_low_prio_init+0x44>)
   20004:	4628      	mov	r0, r5
   20006:	f001 feed 	bl	21de4 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   2000a:	4909      	ldr	r1, [pc, #36]	; (20030 <mpsl_low_prio_init+0x48>)
   2000c:	4809      	ldr	r0, [pc, #36]	; (20034 <mpsl_low_prio_init+0x4c>)
   2000e:	f002 fe8d 	bl	22d2c <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   20012:	4622      	mov	r2, r4
   20014:	2104      	movs	r1, #4
   20016:	2019      	movs	r0, #25
   20018:	f7f3 f85e 	bl	130d8 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   2001c:	4620      	mov	r0, r4
   2001e:	b003      	add	sp, #12
   20020:	bd30      	pop	{r4, r5, pc}
   20022:	bf00      	nop
   20024:	20001fb0 	.word	0x20001fb0
   20028:	20005ec0 	.word	0x20005ec0
   2002c:	000338cc 	.word	0x000338cc
   20030:	0001ffb1 	.word	0x0001ffb1
   20034:	2000357c 	.word	0x2000357c

00020038 <mpsl_low_prio_irq_handler>:
{
   20038:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   2003a:	4902      	ldr	r1, [pc, #8]	; (20044 <mpsl_low_prio_irq_handler+0xc>)
   2003c:	4802      	ldr	r0, [pc, #8]	; (20048 <mpsl_low_prio_irq_handler+0x10>)
   2003e:	f00f f983 	bl	2f348 <k_work_submit_to_queue>
}
   20042:	bd08      	pop	{r3, pc}
   20044:	2000357c 	.word	0x2000357c
   20048:	20001fb0 	.word	0x20001fb0

0002004c <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   2004c:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2004e:	4b02      	ldr	r3, [pc, #8]	; (20058 <mpsl_hfclk_callback+0xc>)
   20050:	681b      	ldr	r3, [r3, #0]
   20052:	2000      	movs	r0, #0
   20054:	4798      	blx	r3
}
   20056:	bd08      	pop	{r3, pc}
   20058:	2000358c 	.word	0x2000358c

0002005c <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   2005c:	b510      	push	{r4, lr}
	switch (domain) {
   2005e:	b128      	cbz	r0, 2006c <nrfx_clock_start+0x10>
   20060:	2801      	cmp	r0, #1
   20062:	d108      	bne.n	20076 <nrfx_clock_start+0x1a>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   20064:	4809      	ldr	r0, [pc, #36]	; (2008c <nrfx_clock_start+0x30>)
   20066:	f7e3 fe3d 	bl	3ce4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   2006a:	bd10      	pop	{r4, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2006c:	4b08      	ldr	r3, [pc, #32]	; (20090 <nrfx_clock_start+0x34>)
   2006e:	681b      	ldr	r3, [r3, #0]
   20070:	2001      	movs	r0, #1
   20072:	4798      	blx	r3
		break;
   20074:	e7f9      	b.n	2006a <nrfx_clock_start+0xe>
		__ASSERT(0, "Not supported");
   20076:	4c07      	ldr	r4, [pc, #28]	; (20094 <nrfx_clock_start+0x38>)
   20078:	221c      	movs	r2, #28
   2007a:	4621      	mov	r1, r4
   2007c:	4806      	ldr	r0, [pc, #24]	; (20098 <nrfx_clock_start+0x3c>)
   2007e:	f008 fdc6 	bl	28c0e <assert_print>
   20082:	211c      	movs	r1, #28
   20084:	4620      	mov	r0, r4
   20086:	f008 fdbb 	bl	28c00 <assert_post_action>
   2008a:	bf00      	nop
   2008c:	0002004d 	.word	0x0002004d
   20090:	2000358c 	.word	0x2000358c
   20094:	000338e4 	.word	0x000338e4
   20098:	00030128 	.word	0x00030128

0002009c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
	switch (domain) {
   2009c:	b178      	cbz	r0, 200be <nrfx_clock_stop+0x22>
{
   2009e:	b510      	push	{r4, lr}
	switch (domain) {
   200a0:	2801      	cmp	r0, #1
   200a2:	d102      	bne.n	200aa <nrfx_clock_stop+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_release();
   200a4:	f7e3 fe10 	bl	3cc8 <mpsl_clock_hfclk_release>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   200a8:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Not supported");
   200aa:	4c05      	ldr	r4, [pc, #20]	; (200c0 <nrfx_clock_stop+0x24>)
   200ac:	222a      	movs	r2, #42	; 0x2a
   200ae:	4621      	mov	r1, r4
   200b0:	4804      	ldr	r0, [pc, #16]	; (200c4 <nrfx_clock_stop+0x28>)
   200b2:	f008 fdac 	bl	28c0e <assert_print>
   200b6:	212a      	movs	r1, #42	; 0x2a
   200b8:	4620      	mov	r0, r4
   200ba:	f008 fda1 	bl	28c00 <assert_post_action>
   200be:	4770      	bx	lr
   200c0:	000338e4 	.word	0x000338e4
   200c4:	00030128 	.word	0x00030128

000200c8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   200c8:	4b01      	ldr	r3, [pc, #4]	; (200d0 <nrfx_clock_init+0x8>)
   200ca:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   200cc:	4801      	ldr	r0, [pc, #4]	; (200d4 <nrfx_clock_init+0xc>)
   200ce:	4770      	bx	lr
   200d0:	2000358c 	.word	0x2000358c
   200d4:	0bad0000 	.word	0x0bad0000

000200d8 <get_timeslot_time_us>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   200d8:	4b02      	ldr	r3, [pc, #8]	; (200e4 <get_timeslot_time_us+0xc>)
   200da:	2201      	movs	r2, #1
   200dc:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   200de:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
 */
static uint32_t get_timeslot_time_us(void)
{
	nrf_timer_task_trigger(NRF_TIMER0, NRF_TIMER_TASK_CAPTURE0);
	return nrf_timer_cc_get(NRF_TIMER0, NRF_TIMER_CC_CHANNEL0);
}
   200e2:	4770      	bx	lr
   200e4:	40008000 	.word	0x40008000

000200e8 <reschedule_next_timeslot>:

static void reschedule_next_timeslot(void)
{
   200e8:	b510      	push	{r4, lr}
	_context.timeslot_request.params.earliest.priority =
   200ea:	4b0b      	ldr	r3, [pc, #44]	; (20118 <reschedule_next_timeslot+0x30>)
   200ec:	2200      	movs	r2, #0
   200ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		MPSL_TIMESLOT_PRIORITY_HIGH;
	_context.timeslot_request.params.earliest.timeout_us =
   200f2:	4a0a      	ldr	r2, [pc, #40]	; (2011c <reschedule_next_timeslot+0x34>)
   200f4:	631a      	str	r2, [r3, #48]	; 0x30
		MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   200f6:	f103 0124 	add.w	r1, r3, #36	; 0x24
   200fa:	7e18      	ldrb	r0, [r3, #24]
   200fc:	f7eb ffdd 	bl	c0ba <mpsl_timeslot_request>
					    &_context.timeslot_request);

	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   20100:	b900      	cbnz	r0, 20104 <reschedule_next_timeslot+0x1c>
		      "mpsl_timeslot_request failed: %d", ret);
}
   20102:	bd10      	pop	{r4, pc}
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   20104:	4c06      	ldr	r4, [pc, #24]	; (20120 <reschedule_next_timeslot+0x38>)
   20106:	2248      	movs	r2, #72	; 0x48
   20108:	4621      	mov	r1, r4
   2010a:	4806      	ldr	r0, [pc, #24]	; (20124 <reschedule_next_timeslot+0x3c>)
   2010c:	f008 fd7f 	bl	28c0e <assert_print>
   20110:	2148      	movs	r1, #72	; 0x48
   20112:	4620      	mov	r0, r4
   20114:	f008 fd74 	bl	28c00 <assert_post_action>
   20118:	20003590 	.word	0x20003590
   2011c:	0f423fff 	.word	0x0f423fff
   20120:	00033924 	.word	0x00033924
   20124:	00030128 	.word	0x00030128

00020128 <timeslot_callback>:

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   20128:	b510      	push	{r4, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   2012a:	4b29      	ldr	r3, [pc, #164]	; (201d0 <timeslot_callback+0xa8>)
   2012c:	7e1b      	ldrb	r3, [r3, #24]
   2012e:	4283      	cmp	r3, r0
   20130:	d110      	bne.n	20154 <timeslot_callback+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20132:	f3bf 8f5b 	dmb	ish
   20136:	4b27      	ldr	r3, [pc, #156]	; (201d4 <timeslot_callback+0xac>)
   20138:	681b      	ldr	r3, [r3, #0]
   2013a:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   2013e:	2b00      	cmp	r3, #0
   20140:	d142      	bne.n	201c8 <timeslot_callback+0xa0>
		return NULL;
	}

	switch (signal) {
   20142:	2909      	cmp	r1, #9
   20144:	d836      	bhi.n	201b4 <timeslot_callback+0x8c>
   20146:	e8df f001 	tbb	[pc, r1]
   2014a:	350f      	.short	0x350f
   2014c:	31353535 	.word	0x31353535
   20150:	41352c31 	.word	0x41352c31
	__ASSERT_NO_MSG(session_id == _context.session_id);
   20154:	4c20      	ldr	r4, [pc, #128]	; (201d8 <timeslot_callback+0xb0>)
   20156:	2250      	movs	r2, #80	; 0x50
   20158:	4621      	mov	r1, r4
   2015a:	4820      	ldr	r0, [pc, #128]	; (201dc <timeslot_callback+0xb4>)
   2015c:	f008 fd57 	bl	28c0e <assert_print>
   20160:	2150      	movs	r1, #80	; 0x50
   20162:	4620      	mov	r0, r4
   20164:	f008 fd4c 	bl	28c00 <assert_post_action>
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   20168:	4b19      	ldr	r3, [pc, #100]	; (201d0 <timeslot_callback+0xa8>)
   2016a:	6a1b      	ldr	r3, [r3, #32]
   2016c:	681a      	ldr	r2, [r3, #0]
   2016e:	6858      	ldr	r0, [r3, #4]
   20170:	4790      	blx	r2
   20172:	4603      	mov	r3, r0
		if (rc != FLASH_OP_ONGOING) {
   20174:	2801      	cmp	r0, #1
   20176:	d005      	beq.n	20184 <timeslot_callback+0x5c>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   20178:	4815      	ldr	r0, [pc, #84]	; (201d0 <timeslot_callback+0xa8>)
   2017a:	63c3      	str	r3, [r0, #60]	; 0x3c
			_context.return_param.callback_action =
   2017c:	2302      	movs	r3, #2
   2017e:	f800 3f34 	strb.w	r3, [r0, #52]!
   20182:	e012      	b.n	201aa <timeslot_callback+0x82>
				MPSL_TIMESLOT_SIGNAL_ACTION_END;
		} else {
			/* Reset the priority back to normal after a successful
			 * timeslot. */
			_context.timeslot_request.params.earliest.priority =
   20184:	4812      	ldr	r0, [pc, #72]	; (201d0 <timeslot_callback+0xa8>)
   20186:	2301      	movs	r3, #1
   20188:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
				MPSL_TIMESLOT_PRIORITY_NORMAL;
			_context.timeslot_request.params.earliest.timeout_us =
   2018c:	f247 5330 	movw	r3, #30000	; 0x7530
   20190:	6303      	str	r3, [r0, #48]	; 0x30
				TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;

			_context.return_param.callback_action =
   20192:	2303      	movs	r3, #3
   20194:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
				MPSL_TIMESLOT_SIGNAL_ACTION_REQUEST;
			_context.return_param.params.request.p_next =
   20198:	f100 0324 	add.w	r3, r0, #36	; 0x24
   2019c:	6383      	str	r3, [r0, #56]	; 0x38
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   2019e:	3034      	adds	r0, #52	; 0x34
   201a0:	e003      	b.n	201aa <timeslot_callback+0x82>
	z_impl_k_sem_give(sem);
   201a2:	480b      	ldr	r0, [pc, #44]	; (201d0 <timeslot_callback+0xa8>)
   201a4:	f002 fac2 	bl	2272c <z_impl_k_sem_give>
		return NULL;
   201a8:	2000      	movs	r0, #0
}
   201aa:	bd10      	pop	{r4, pc}
		reschedule_next_timeslot();
   201ac:	f7ff ff9c 	bl	200e8 <reschedule_next_timeslot>
		return NULL;
   201b0:	2000      	movs	r0, #0
   201b2:	e7fa      	b.n	201aa <timeslot_callback+0x82>
		__ASSERT(false, "unexpected signal: %u", signal);
   201b4:	4c08      	ldr	r4, [pc, #32]	; (201d8 <timeslot_callback+0xb0>)
   201b6:	227c      	movs	r2, #124	; 0x7c
   201b8:	4621      	mov	r1, r4
   201ba:	4808      	ldr	r0, [pc, #32]	; (201dc <timeslot_callback+0xb4>)
   201bc:	f008 fd27 	bl	28c0e <assert_print>
   201c0:	217c      	movs	r1, #124	; 0x7c
   201c2:	4620      	mov	r0, r4
   201c4:	f008 fd1c 	bl	28c00 <assert_post_action>
		return NULL;
   201c8:	2000      	movs	r0, #0
   201ca:	e7ee      	b.n	201aa <timeslot_callback+0x82>
	switch (signal) {
   201cc:	2000      	movs	r0, #0
   201ce:	e7ec      	b.n	201aa <timeslot_callback+0x82>
   201d0:	20003590 	.word	0x20003590
   201d4:	200035d0 	.word	0x200035d0
   201d8:	00033924 	.word	0x00033924
   201dc:	00030128 	.word	0x00030128

000201e0 <nrf_flash_sync_init>:

int nrf_flash_sync_init(void)
{
   201e0:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   201e2:	2201      	movs	r2, #1
   201e4:	2100      	movs	r1, #0
   201e6:	4802      	ldr	r0, [pc, #8]	; (201f0 <nrf_flash_sync_init+0x10>)
   201e8:	f00f f81a 	bl	2f220 <z_impl_k_sem_init>
	LOG_DBG("");
	return k_sem_init(&_context.timeout_sem, 0, 1);
}
   201ec:	bd08      	pop	{r3, pc}
   201ee:	bf00      	nop
   201f0:	20003590 	.word	0x20003590

000201f4 <nrf_flash_sync_set_context>:

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   201f4:	4b01      	ldr	r3, [pc, #4]	; (201fc <nrf_flash_sync_set_context+0x8>)
   201f6:	61d8      	str	r0, [r3, #28]
}
   201f8:	4770      	bx	lr
   201fa:	bf00      	nop
   201fc:	20003590 	.word	0x20003590

00020200 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   20200:	b538      	push	{r3, r4, r5, lr}
   20202:	4605      	mov	r5, r0
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20204:	f04f 30ff 	mov.w	r0, #4294967295
   20208:	f04f 31ff 	mov.w	r1, #4294967295
   2020c:	f7ff f982 	bl	1f514 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   20210:	2800      	cmp	r0, #0
   20212:	d16a      	bne.n	202ea <nrf_flash_sync_exe+0xea>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   20214:	4954      	ldr	r1, [pc, #336]	; (20368 <nrf_flash_sync_exe+0x168>)
   20216:	4855      	ldr	r0, [pc, #340]	; (2036c <nrf_flash_sync_exe+0x16c>)
   20218:	f7e0 fb7a 	bl	910 <mpsl_timeslot_session_open>
   2021c:	4604      	mov	r4, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   2021e:	f7ff f983 	bl	1f528 <multithreading_lock_release>

	if (ret < 0) {
   20222:	2c00      	cmp	r4, #0
   20224:	db6b      	blt.n	202fe <nrf_flash_sync_exe+0xfe>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
		return -ENOMEM;
	}

	mpsl_timeslot_request_t *req = &_context.timeslot_request;
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   20226:	4b52      	ldr	r3, [pc, #328]	; (20370 <nrf_flash_sync_exe+0x170>)
   20228:	2100      	movs	r1, #0
   2022a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   2022e:	2201      	movs	r2, #1
   20230:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	req->params.earliest.priority = MPSL_TIMESLOT_PRIORITY_NORMAL;
   20234:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	req->params.earliest.length_us =
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   20238:	69da      	ldr	r2, [r3, #28]
   2023a:	3264      	adds	r2, #100	; 0x64
	req->params.earliest.length_us =
   2023c:	62da      	str	r2, [r3, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   2023e:	f247 5230 	movw	r2, #30000	; 0x7530
   20242:	631a      	str	r2, [r3, #48]	; 0x30

	_context.op_desc = op_desc;
   20244:	621d      	str	r5, [r3, #32]
	_context.status = -ETIMEDOUT;
   20246:	f06f 0273 	mvn.w	r2, #115	; 0x73
   2024a:	63da      	str	r2, [r3, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2024c:	f103 0240 	add.w	r2, r3, #64	; 0x40
   20250:	f3bf 8f5b 	dmb	ish
   20254:	e852 0f00 	ldrex	r0, [r2]
   20258:	e842 1400 	strex	r4, r1, [r2]
   2025c:	2c00      	cmp	r4, #0
   2025e:	d1f9      	bne.n	20254 <nrf_flash_sync_exe+0x54>
   20260:	f3bf 8f5b 	dmb	ish
	return sem->count;
   20264:	689b      	ldr	r3, [r3, #8]
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   20266:	2b00      	cmp	r3, #0
   20268:	d151      	bne.n	2030e <nrf_flash_sync_exe+0x10e>

	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2026a:	f04f 30ff 	mov.w	r0, #4294967295
   2026e:	f04f 31ff 	mov.w	r1, #4294967295
   20272:	f7ff f94f 	bl	1f514 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   20276:	2800      	cmp	r0, #0
   20278:	d153      	bne.n	20322 <nrf_flash_sync_exe+0x122>
	ret = mpsl_timeslot_request(_context.session_id, req);
   2027a:	493e      	ldr	r1, [pc, #248]	; (20374 <nrf_flash_sync_exe+0x174>)
   2027c:	f811 0c0c 	ldrb.w	r0, [r1, #-12]
   20280:	f7eb ff1b 	bl	c0ba <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   20284:	2800      	cmp	r0, #0
   20286:	d156      	bne.n	20336 <nrf_flash_sync_exe+0x136>
		      "mpsl_timeslot_request failed: %d", ret);
	MULTITHREADING_LOCK_RELEASE();
   20288:	f7ff f94e 	bl	1f528 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   2028c:	4a3a      	ldr	r2, [pc, #232]	; (20378 <nrf_flash_sync_exe+0x178>)
   2028e:	2300      	movs	r3, #0
   20290:	4837      	ldr	r0, [pc, #220]	; (20370 <nrf_flash_sync_exe+0x170>)
   20292:	f002 fa89 	bl	227a8 <z_impl_k_sem_take>

	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   20296:	2800      	cmp	r0, #0
   20298:	da0f      	bge.n	202ba <nrf_flash_sync_exe+0xba>
		LOG_ERR("timeout");
   2029a:	2145      	movs	r1, #69	; 0x45
   2029c:	4837      	ldr	r0, [pc, #220]	; (2037c <nrf_flash_sync_exe+0x17c>)
   2029e:	f008 fcd6 	bl	28c4e <z_log_minimal_printk>
   202a2:	4b37      	ldr	r3, [pc, #220]	; (20380 <nrf_flash_sync_exe+0x180>)
   202a4:	2201      	movs	r2, #1
   202a6:	f3bf 8f5b 	dmb	ish
   202aa:	e853 1f00 	ldrex	r1, [r3]
   202ae:	e843 2000 	strex	r0, r2, [r3]
   202b2:	2800      	cmp	r0, #0
   202b4:	d1f9      	bne.n	202aa <nrf_flash_sync_exe+0xaa>
   202b6:	f3bf 8f5b 	dmb	ish
		atomic_set(&_context.timeout_occured, 1);
	}

	/* This will cancel the timeslot if it is still in progress. */
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   202ba:	f04f 30ff 	mov.w	r0, #4294967295
   202be:	f04f 31ff 	mov.w	r1, #4294967295
   202c2:	f7ff f927 	bl	1f514 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   202c6:	2800      	cmp	r0, #0
   202c8:	d13f      	bne.n	2034a <nrf_flash_sync_exe+0x14a>
	mpsl_timeslot_session_close(_context.session_id);
   202ca:	4c29      	ldr	r4, [pc, #164]	; (20370 <nrf_flash_sync_exe+0x170>)
   202cc:	7e20      	ldrb	r0, [r4, #24]
   202ce:	f7eb ff2f 	bl	c130 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   202d2:	f7ff f929 	bl	1f528 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   202d6:	f3bf 8f5b 	dmb	ish
   202da:	6c23      	ldr	r3, [r4, #64]	; 0x40
   202dc:	f3bf 8f5b 	dmb	ish

	/* Reset the semaphore after timeout, in case if the operation _did_
	 * complete before closing the session. */
	if (atomic_get(&_context.timeout_occured)) {
   202e0:	2b00      	cmp	r3, #0
   202e2:	d13c      	bne.n	2035e <nrf_flash_sync_exe+0x15e>
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
   202e4:	4b22      	ldr	r3, [pc, #136]	; (20370 <nrf_flash_sync_exe+0x170>)
   202e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}
   202e8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(errcode == 0);
   202ea:	4c26      	ldr	r4, [pc, #152]	; (20384 <nrf_flash_sync_exe+0x184>)
   202ec:	2299      	movs	r2, #153	; 0x99
   202ee:	4621      	mov	r1, r4
   202f0:	4825      	ldr	r0, [pc, #148]	; (20388 <nrf_flash_sync_exe+0x188>)
   202f2:	f008 fc8c 	bl	28c0e <assert_print>
   202f6:	2199      	movs	r1, #153	; 0x99
   202f8:	4620      	mov	r0, r4
   202fa:	f008 fc81 	bl	28c00 <assert_post_action>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   202fe:	4622      	mov	r2, r4
   20300:	2145      	movs	r1, #69	; 0x45
   20302:	4822      	ldr	r0, [pc, #136]	; (2038c <nrf_flash_sync_exe+0x18c>)
   20304:	f008 fca3 	bl	28c4e <z_log_minimal_printk>
		return -ENOMEM;
   20308:	f06f 000b 	mvn.w	r0, #11
   2030c:	e7ec      	b.n	202e8 <nrf_flash_sync_exe+0xe8>
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   2030e:	4c1d      	ldr	r4, [pc, #116]	; (20384 <nrf_flash_sync_exe+0x184>)
   20310:	22af      	movs	r2, #175	; 0xaf
   20312:	4621      	mov	r1, r4
   20314:	481c      	ldr	r0, [pc, #112]	; (20388 <nrf_flash_sync_exe+0x188>)
   20316:	f008 fc7a 	bl	28c0e <assert_print>
   2031a:	21af      	movs	r1, #175	; 0xaf
   2031c:	4620      	mov	r0, r4
   2031e:	f008 fc6f 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(errcode == 0);
   20322:	4c18      	ldr	r4, [pc, #96]	; (20384 <nrf_flash_sync_exe+0x184>)
   20324:	22b2      	movs	r2, #178	; 0xb2
   20326:	4621      	mov	r1, r4
   20328:	4817      	ldr	r0, [pc, #92]	; (20388 <nrf_flash_sync_exe+0x188>)
   2032a:	f008 fc70 	bl	28c0e <assert_print>
   2032e:	21b2      	movs	r1, #178	; 0xb2
   20330:	4620      	mov	r0, r4
   20332:	f008 fc65 	bl	28c00 <assert_post_action>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   20336:	4c13      	ldr	r4, [pc, #76]	; (20384 <nrf_flash_sync_exe+0x184>)
   20338:	22b4      	movs	r2, #180	; 0xb4
   2033a:	4621      	mov	r1, r4
   2033c:	4812      	ldr	r0, [pc, #72]	; (20388 <nrf_flash_sync_exe+0x188>)
   2033e:	f008 fc66 	bl	28c0e <assert_print>
   20342:	21b4      	movs	r1, #180	; 0xb4
   20344:	4620      	mov	r0, r4
   20346:	f008 fc5b 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(errcode == 0);
   2034a:	4c0e      	ldr	r4, [pc, #56]	; (20384 <nrf_flash_sync_exe+0x184>)
   2034c:	22bf      	movs	r2, #191	; 0xbf
   2034e:	4621      	mov	r1, r4
   20350:	480d      	ldr	r0, [pc, #52]	; (20388 <nrf_flash_sync_exe+0x188>)
   20352:	f008 fc5c 	bl	28c0e <assert_print>
   20356:	21bf      	movs	r1, #191	; 0xbf
   20358:	4620      	mov	r0, r4
   2035a:	f008 fc51 	bl	28c00 <assert_post_action>
	z_impl_k_sem_reset(sem);
   2035e:	4620      	mov	r0, r4
   20360:	f002 fa94 	bl	2288c <z_impl_k_sem_reset>
}
   20364:	e7be      	b.n	202e4 <nrf_flash_sync_exe+0xe4>
   20366:	bf00      	nop
   20368:	200035a8 	.word	0x200035a8
   2036c:	00020129 	.word	0x00020129
   20370:	20003590 	.word	0x20003590
   20374:	200035b4 	.word	0x200035b4
   20378:	000b7b44 	.word	0x000b7b44
   2037c:	0003398c 	.word	0x0003398c
   20380:	200035d0 	.word	0x200035d0
   20384:	00033924 	.word	0x00033924
   20388:	00030128 	.word	0x00030128
   2038c:	00033960 	.word	0x00033960

00020390 <nrf_flash_sync_check_time_limit>:
{
	/* Not needed for this driver. */
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   20390:	b510      	push	{r4, lr}
   20392:	4604      	mov	r4, r0
	uint32_t now_us = get_timeslot_time_us();
   20394:	f7ff fea0 	bl	200d8 <get_timeslot_time_us>
	uint32_t time_per_iteration_us = now_us / iteration;
   20398:	fbb0 f4f4 	udiv	r4, r0, r4
	return now_us + time_per_iteration_us >= _context.request_length_us;
   2039c:	4420      	add	r0, r4
   2039e:	4b03      	ldr	r3, [pc, #12]	; (203ac <nrf_flash_sync_check_time_limit+0x1c>)
   203a0:	69db      	ldr	r3, [r3, #28]
}
   203a2:	4298      	cmp	r0, r3
   203a4:	bf34      	ite	cc
   203a6:	2000      	movcc	r0, #0
   203a8:	2001      	movcs	r0, #1
   203aa:	bd10      	pop	{r4, pc}
   203ac:	20003590 	.word	0x20003590

000203b0 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   203b0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   203b4:	4905      	ldr	r1, [pc, #20]	; (203cc <__NVIC_SystemReset+0x1c>)
   203b6:	68ca      	ldr	r2, [r1, #12]
   203b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   203bc:	4b04      	ldr	r3, [pc, #16]	; (203d0 <__NVIC_SystemReset+0x20>)
   203be:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   203c0:	60cb      	str	r3, [r1, #12]
   203c2:	f3bf 8f4f 	dsb	sy
    __NOP();
   203c6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   203c8:	e7fd      	b.n	203c6 <__NVIC_SystemReset+0x16>
   203ca:	bf00      	nop
   203cc:	e000ed00 	.word	0xe000ed00
   203d0:	05fa0004 	.word	0x05fa0004

000203d4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   203d4:	4b02      	ldr	r3, [pc, #8]	; (203e0 <nvmc_wait+0xc>)
   203d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   203da:	2b00      	cmp	r3, #0
   203dc:	d0fa      	beq.n	203d4 <nvmc_wait>
}
   203de:	4770      	bx	lr
   203e0:	4001e000 	.word	0x4001e000

000203e4 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   203e4:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   203e6:	4b03      	ldr	r3, [pc, #12]	; (203f4 <nvmc_config+0x10>)
   203e8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   203ec:	f7ff fff2 	bl	203d4 <nvmc_wait>
}
   203f0:	bd08      	pop	{r3, pc}
   203f2:	bf00      	nop
   203f4:	4001e000 	.word	0x4001e000

000203f8 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   203f8:	4b01      	ldr	r3, [pc, #4]	; (20400 <SystemCoreClockUpdate+0x8>)
   203fa:	4a02      	ldr	r2, [pc, #8]	; (20404 <SystemCoreClockUpdate+0xc>)
   203fc:	601a      	str	r2, [r3, #0]
}
   203fe:	4770      	bx	lr
   20400:	20000858 	.word	0x20000858
   20404:	03d09000 	.word	0x03d09000

00020408 <SystemInit>:

void SystemInit(void)
{
   20408:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   2040a:	f00e fae9 	bl	2e9e0 <nrf52_errata_36>
   2040e:	b140      	cbz	r0, 20422 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   20410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20414:	2200      	movs	r2, #0
   20416:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2041a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2041e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   20422:	f00e fae7 	bl	2e9f4 <nrf52_errata_66>
   20426:	2800      	cmp	r0, #0
   20428:	d046      	beq.n	204b8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   2042a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2042e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   20432:	4b4f      	ldr	r3, [pc, #316]	; (20570 <SystemInit+0x168>)
   20434:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   20438:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   2043c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   20440:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   20444:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   20448:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   2044c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   20450:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   20454:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   20458:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   2045c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   20460:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   20464:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   20468:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   2046c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   20470:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   20474:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   20478:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   2047c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   20480:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   20484:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   20488:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   2048c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   20490:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   20494:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   20498:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   2049c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   204a0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   204a4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   204a8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   204ac:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   204b0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   204b4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   204b8:	f00e faa6 	bl	2ea08 <nrf52_errata_98>
   204bc:	b118      	cbz	r0, 204c6 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   204be:	4b2d      	ldr	r3, [pc, #180]	; (20574 <SystemInit+0x16c>)
   204c0:	4a2d      	ldr	r2, [pc, #180]	; (20578 <SystemInit+0x170>)
   204c2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   204c6:	f00e fab2 	bl	2ea2e <nrf52_errata_103>
   204ca:	b118      	cbz	r0, 204d4 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   204cc:	4b2b      	ldr	r3, [pc, #172]	; (2057c <SystemInit+0x174>)
   204ce:	22fb      	movs	r2, #251	; 0xfb
   204d0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   204d4:	f00e fabe 	bl	2ea54 <nrf52_errata_115>
   204d8:	b170      	cbz	r0, 204f8 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   204da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   204de:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
   204e2:	f023 030f 	bic.w	r3, r3, #15
   204e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   204ea:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
   204ee:	f002 020f 	and.w	r2, r2, #15
   204f2:	4313      	orrs	r3, r2
   204f4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   204f8:	f00e fabf 	bl	2ea7a <nrf52_errata_120>
   204fc:	b120      	cbz	r0, 20508 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   204fe:	4b20      	ldr	r3, [pc, #128]	; (20580 <SystemInit+0x178>)
   20500:	f44f 7200 	mov.w	r2, #512	; 0x200
   20504:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   20508:	f00e faca 	bl	2eaa0 <nrf52_errata_136>
   2050c:	b160      	cbz	r0, 20528 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2050e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20512:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   20516:	f013 0f01 	tst.w	r3, #1
   2051a:	d005      	beq.n	20528 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   2051c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20520:	f06f 0201 	mvn.w	r2, #1
   20524:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
   20528:	f00e fad4 	bl	2ead4 <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2052c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20530:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   20534:	2b00      	cmp	r3, #0
   20536:	db08      	blt.n	2054a <SystemInit+0x142>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   20538:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2053c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20540:	2b00      	cmp	r3, #0
   20542:	db02      	blt.n	2054a <SystemInit+0x142>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   20544:	f7ff ff58 	bl	203f8 <SystemCoreClockUpdate>
}
   20548:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   2054a:	2001      	movs	r0, #1
   2054c:	f7ff ff4a 	bl	203e4 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   20550:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   20554:	2512      	movs	r5, #18
   20556:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   2055a:	f7ff ff3b 	bl	203d4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2055e:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   20562:	f7ff ff37 	bl	203d4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   20566:	2000      	movs	r0, #0
   20568:	f7ff ff3c 	bl	203e4 <nvmc_config>
            NVIC_SystemReset();
   2056c:	f7ff ff20 	bl	203b0 <__NVIC_SystemReset>
   20570:	4000c000 	.word	0x4000c000
   20574:	40005000 	.word	0x40005000
   20578:	00038148 	.word	0x00038148
   2057c:	4000f000 	.word	0x4000f000
   20580:	40029000 	.word	0x40029000

00020584 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   20584:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   20586:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   20588:	fab4 f384 	clz	r3, r4
   2058c:	f1c3 031f 	rsb	r3, r3, #31
   20590:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   20594:	2b00      	cmp	r3, #0
   20596:	db16      	blt.n	205c6 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   20598:	2201      	movs	r2, #1
   2059a:	fa02 f303 	lsl.w	r3, r2, r3
   2059e:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   205a2:	f3bf 8f5b 	dmb	ish
   205a6:	e850 2f00 	ldrex	r2, [r0]
   205aa:	42a2      	cmp	r2, r4
   205ac:	d104      	bne.n	205b8 <nrfx_flag32_alloc+0x34>
   205ae:	e840 3e00 	strex	lr, r3, [r0]
   205b2:	f1be 0f00 	cmp.w	lr, #0
   205b6:	d1f6      	bne.n	205a6 <nrfx_flag32_alloc+0x22>
   205b8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   205bc:	d1e3      	bne.n	20586 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   205be:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   205c2:	4802      	ldr	r0, [pc, #8]	; (205cc <nrfx_flag32_alloc+0x48>)
}
   205c4:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   205c6:	4802      	ldr	r0, [pc, #8]	; (205d0 <nrfx_flag32_alloc+0x4c>)
   205c8:	e7fc      	b.n	205c4 <nrfx_flag32_alloc+0x40>
   205ca:	bf00      	nop
   205cc:	0bad0000 	.word	0x0bad0000
   205d0:	0bad0002 	.word	0x0bad0002

000205d4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   205d4:	6803      	ldr	r3, [r0, #0]
   205d6:	40cb      	lsrs	r3, r1
   205d8:	f013 0f01 	tst.w	r3, #1
   205dc:	d115      	bne.n	2060a <nrfx_flag32_free+0x36>
{
   205de:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   205e0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   205e2:	2301      	movs	r3, #1
   205e4:	408b      	lsls	r3, r1
   205e6:	4313      	orrs	r3, r2
   205e8:	f3bf 8f5b 	dmb	ish
   205ec:	e850 cf00 	ldrex	ip, [r0]
   205f0:	4594      	cmp	ip, r2
   205f2:	d104      	bne.n	205fe <nrfx_flag32_free+0x2a>
   205f4:	e840 3e00 	strex	lr, r3, [r0]
   205f8:	f1be 0f00 	cmp.w	lr, #0
   205fc:	d1f6      	bne.n	205ec <nrfx_flag32_free+0x18>
   205fe:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20602:	d1ed      	bne.n	205e0 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   20604:	4802      	ldr	r0, [pc, #8]	; (20610 <nrfx_flag32_free+0x3c>)
}
   20606:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   2060a:	4802      	ldr	r0, [pc, #8]	; (20614 <nrfx_flag32_free+0x40>)
}
   2060c:	4770      	bx	lr
   2060e:	bf00      	nop
   20610:	0bad0000 	.word	0x0bad0000
   20614:	0bad0004 	.word	0x0bad0004

00020618 <nrf_gpio_latches_read_and_clear>:
{
   20618:	b500      	push	{lr}
   2061a:	b083      	sub	sp, #12
   2061c:	4684      	mov	ip, r0
   2061e:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   20620:	4b0d      	ldr	r3, [pc, #52]	; (20658 <nrf_gpio_latches_read_and_clear+0x40>)
   20622:	e893 0003 	ldmia.w	r3, {r0, r1}
   20626:	ab02      	add	r3, sp, #8
   20628:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   2062c:	4663      	mov	r3, ip
   2062e:	e00b      	b.n	20648 <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   20630:	a902      	add	r1, sp, #8
   20632:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   20636:	f851 1c08 	ldr.w	r1, [r1, #-8]
   2063a:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
   2063e:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
   20642:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   20646:	3301      	adds	r3, #1
   20648:	eb0c 000e 	add.w	r0, ip, lr
   2064c:	4298      	cmp	r0, r3
   2064e:	d8ef      	bhi.n	20630 <nrf_gpio_latches_read_and_clear+0x18>
}
   20650:	b003      	add	sp, #12
   20652:	f85d fb04 	ldr.w	pc, [sp], #4
   20656:	bf00      	nop
   20658:	0002fc70 	.word	0x0002fc70

0002065c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2065c:	3008      	adds	r0, #8
   2065e:	4b03      	ldr	r3, [pc, #12]	; (2066c <pin_in_use+0x10>)
   20660:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20664:	f000 0001 	and.w	r0, r0, #1
   20668:	4770      	bx	lr
   2066a:	bf00      	nop
   2066c:	2000085c 	.word	0x2000085c

00020670 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   20670:	3008      	adds	r0, #8
   20672:	4b03      	ldr	r3, [pc, #12]	; (20680 <pin_in_use_by_te+0x10>)
   20674:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20678:	f3c0 1040 	ubfx	r0, r0, #5, #1
   2067c:	4770      	bx	lr
   2067e:	bf00      	nop
   20680:	2000085c 	.word	0x2000085c

00020684 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   20684:	3008      	adds	r0, #8
   20686:	4b04      	ldr	r3, [pc, #16]	; (20698 <pin_has_trigger+0x14>)
   20688:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2068c:	f010 001c 	ands.w	r0, r0, #28
   20690:	bf18      	it	ne
   20692:	2001      	movne	r0, #1
   20694:	4770      	bx	lr
   20696:	bf00      	nop
   20698:	2000085c 	.word	0x2000085c

0002069c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2069c:	3008      	adds	r0, #8
   2069e:	4b03      	ldr	r3, [pc, #12]	; (206ac <pin_is_output+0x10>)
   206a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   206a4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   206a8:	4770      	bx	lr
   206aa:	bf00      	nop
   206ac:	2000085c 	.word	0x2000085c

000206b0 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   206b0:	3008      	adds	r0, #8
   206b2:	4b02      	ldr	r3, [pc, #8]	; (206bc <pin_te_get+0xc>)
   206b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   206b8:	0b40      	lsrs	r0, r0, #13
   206ba:	4770      	bx	lr
   206bc:	2000085c 	.word	0x2000085c

000206c0 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   206c0:	2200      	movs	r2, #0
   206c2:	e004      	b.n	206ce <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   206c4:	f04f 33ff 	mov.w	r3, #4294967295
   206c8:	4283      	cmp	r3, r0
   206ca:	d00f      	beq.n	206ec <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   206cc:	3201      	adds	r2, #1
   206ce:	2a2f      	cmp	r2, #47	; 0x2f
   206d0:	d80a      	bhi.n	206e8 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   206d2:	f102 0308 	add.w	r3, r2, #8
   206d6:	4906      	ldr	r1, [pc, #24]	; (206f0 <handler_in_use+0x30>)
   206d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   206dc:	f413 7f80 	tst.w	r3, #256	; 0x100
   206e0:	d0f0      	beq.n	206c4 <handler_in_use+0x4>
   206e2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   206e6:	e7ef      	b.n	206c8 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   206e8:	2000      	movs	r0, #0
   206ea:	4770      	bx	lr
            return true;
   206ec:	2001      	movs	r0, #1
}
   206ee:	4770      	bx	lr
   206f0:	2000085c 	.word	0x2000085c

000206f4 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   206f4:	2300      	movs	r3, #0
   206f6:	b113      	cbz	r3, 206fe <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   206f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   206fc:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   206fe:	4a07      	ldr	r2, [pc, #28]	; (2071c <find_handler+0x28>)
   20700:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   20704:	4282      	cmp	r2, r0
   20706:	d001      	beq.n	2070c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   20708:	3301      	adds	r3, #1
   2070a:	e7f4      	b.n	206f6 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2070c:	4a03      	ldr	r2, [pc, #12]	; (2071c <find_handler+0x28>)
   2070e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   20712:	6852      	ldr	r2, [r2, #4]
   20714:	428a      	cmp	r2, r1
   20716:	d1f7      	bne.n	20708 <find_handler+0x14>
            return i;
   20718:	4618      	mov	r0, r3
   2071a:	4770      	bx	lr
   2071c:	2000085c 	.word	0x2000085c

00020720 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20720:	3008      	adds	r0, #8
   20722:	4b06      	ldr	r3, [pc, #24]	; (2073c <channel_handler_get+0x1c>)
   20724:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   20728:	f410 7f80 	tst.w	r0, #256	; 0x100
   2072c:	d004      	beq.n	20738 <channel_handler_get+0x18>
   2072e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   20732:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   20736:	4770      	bx	lr
        return NULL;
   20738:	2000      	movs	r0, #0
}
   2073a:	4770      	bx	lr
   2073c:	2000085c 	.word	0x2000085c

00020740 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   20740:	b570      	push	{r4, r5, r6, lr}
   20742:	4604      	mov	r4, r0
   20744:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   20746:	f7ff ffeb 	bl	20720 <channel_handler_get>

    if (handler)
   2074a:	b120      	cbz	r0, 20756 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   2074c:	6806      	ldr	r6, [r0, #0]
   2074e:	6842      	ldr	r2, [r0, #4]
   20750:	4629      	mov	r1, r5
   20752:	4620      	mov	r0, r4
   20754:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   20756:	4b04      	ldr	r3, [pc, #16]	; (20768 <call_handler+0x28>)
   20758:	689b      	ldr	r3, [r3, #8]
   2075a:	b123      	cbz	r3, 20766 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2075c:	4a02      	ldr	r2, [pc, #8]	; (20768 <call_handler+0x28>)
   2075e:	68d2      	ldr	r2, [r2, #12]
   20760:	4629      	mov	r1, r5
   20762:	4620      	mov	r0, r4
   20764:	4798      	blx	r3
    }
}
   20766:	bd70      	pop	{r4, r5, r6, pc}
   20768:	2000085c 	.word	0x2000085c

0002076c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2076c:	f100 0208 	add.w	r2, r0, #8
   20770:	4b15      	ldr	r3, [pc, #84]	; (207c8 <release_handler+0x5c>)
   20772:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   20776:	f413 7f80 	tst.w	r3, #256	; 0x100
   2077a:	d024      	beq.n	207c6 <release_handler+0x5a>
{
   2077c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2077e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   20782:	4610      	mov	r0, r2
   20784:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20788:	4a0f      	ldr	r2, [pc, #60]	; (207c8 <release_handler+0x5c>)
   2078a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   2078e:	4620      	mov	r0, r4
   20790:	f7ff ff96 	bl	206c0 <handler_in_use>
   20794:	b100      	cbz	r0, 20798 <release_handler+0x2c>
}
   20796:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   20798:	480b      	ldr	r0, [pc, #44]	; (207c8 <release_handler+0x5c>)
   2079a:	2300      	movs	r3, #0
   2079c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   207a0:	4621      	mov	r1, r4
   207a2:	3074      	adds	r0, #116	; 0x74
   207a4:	f7ff ff16 	bl	205d4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   207a8:	4b08      	ldr	r3, [pc, #32]	; (207cc <release_handler+0x60>)
   207aa:	4298      	cmp	r0, r3
   207ac:	d0f3      	beq.n	20796 <release_handler+0x2a>
   207ae:	4c08      	ldr	r4, [pc, #32]	; (207d0 <release_handler+0x64>)
   207b0:	f44f 7299 	mov.w	r2, #306	; 0x132
   207b4:	4621      	mov	r1, r4
   207b6:	4807      	ldr	r0, [pc, #28]	; (207d4 <release_handler+0x68>)
   207b8:	f008 fa29 	bl	28c0e <assert_print>
   207bc:	f44f 7199 	mov.w	r1, #306	; 0x132
   207c0:	4620      	mov	r0, r4
   207c2:	f008 fa1d 	bl	28c00 <assert_post_action>
   207c6:	4770      	bx	lr
   207c8:	2000085c 	.word	0x2000085c
   207cc:	0bad0000 	.word	0x0bad0000
   207d0:	000339ac 	.word	0x000339ac
   207d4:	00030128 	.word	0x00030128

000207d8 <pin_handler_trigger_uninit>:
{
   207d8:	b510      	push	{r4, lr}
   207da:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   207dc:	f7ff ff48 	bl	20670 <pin_in_use_by_te>
   207e0:	b140      	cbz	r0, 207f4 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   207e2:	4620      	mov	r0, r4
   207e4:	f7ff ff64 	bl	206b0 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   207e8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   207ec:	4b06      	ldr	r3, [pc, #24]	; (20808 <pin_handler_trigger_uninit+0x30>)
   207ee:	2200      	movs	r2, #0
   207f0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   207f4:	4620      	mov	r0, r4
   207f6:	f7ff ffb9 	bl	2076c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   207fa:	3408      	adds	r4, #8
   207fc:	4b03      	ldr	r3, [pc, #12]	; (2080c <pin_handler_trigger_uninit+0x34>)
   207fe:	2200      	movs	r2, #0
   20800:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   20804:	bd10      	pop	{r4, pc}
   20806:	bf00      	nop
   20808:	40006000 	.word	0x40006000
   2080c:	2000085c 	.word	0x2000085c

00020810 <nrf_gpio_pin_port_decode>:
{
   20810:	b538      	push	{r3, r4, r5, lr}
   20812:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20814:	6804      	ldr	r4, [r0, #0]
   20816:	4620      	mov	r0, r4
   20818:	f00e f9a8 	bl	2eb6c <nrf_gpio_pin_present_check>
   2081c:	b140      	cbz	r0, 20830 <nrf_gpio_pin_port_decode+0x20>
    *p_pin = pin_number & 0x1F;
   2081e:	f004 031f 	and.w	r3, r4, #31
   20822:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20824:	0964      	lsrs	r4, r4, #5
   20826:	d01b      	beq.n	20860 <nrf_gpio_pin_port_decode+0x50>
   20828:	2c01      	cmp	r4, #1
   2082a:	d10d      	bne.n	20848 <nrf_gpio_pin_port_decode+0x38>
        case 1: return NRF_P1;
   2082c:	480e      	ldr	r0, [pc, #56]	; (20868 <nrf_gpio_pin_port_decode+0x58>)
}
   2082e:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20830:	4c0e      	ldr	r4, [pc, #56]	; (2086c <nrf_gpio_pin_port_decode+0x5c>)
   20832:	f240 2247 	movw	r2, #583	; 0x247
   20836:	4621      	mov	r1, r4
   20838:	480d      	ldr	r0, [pc, #52]	; (20870 <nrf_gpio_pin_port_decode+0x60>)
   2083a:	f008 f9e8 	bl	28c0e <assert_print>
   2083e:	f240 2147 	movw	r1, #583	; 0x247
   20842:	4620      	mov	r0, r4
   20844:	f008 f9dc 	bl	28c00 <assert_post_action>
            NRFX_ASSERT(0);
   20848:	4c08      	ldr	r4, [pc, #32]	; (2086c <nrf_gpio_pin_port_decode+0x5c>)
   2084a:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2084e:	4621      	mov	r1, r4
   20850:	4807      	ldr	r0, [pc, #28]	; (20870 <nrf_gpio_pin_port_decode+0x60>)
   20852:	f008 f9dc 	bl	28c0e <assert_print>
   20856:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2085a:	4620      	mov	r0, r4
   2085c:	f008 f9d0 	bl	28c00 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20860:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   20864:	e7e3      	b.n	2082e <nrf_gpio_pin_port_decode+0x1e>
   20866:	bf00      	nop
   20868:	50000300 	.word	0x50000300
   2086c:	00032e50 	.word	0x00032e50
   20870:	00030128 	.word	0x00030128

00020874 <get_initial_sense>:
{
   20874:	b508      	push	{r3, lr}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20876:	f100 0208 	add.w	r2, r0, #8
   2087a:	4b0a      	ldr	r3, [pc, #40]	; (208a4 <get_initial_sense+0x30>)
   2087c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   20880:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   20884:	2b04      	cmp	r3, #4
   20886:	d008      	beq.n	2089a <get_initial_sense+0x26>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   20888:	2b05      	cmp	r3, #5
   2088a:	d101      	bne.n	20890 <get_initial_sense+0x1c>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2088c:	2002      	movs	r0, #2
   2088e:	e005      	b.n	2089c <get_initial_sense+0x28>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20890:	f00e fa29 	bl	2ece6 <nrf_gpio_pin_read>
   20894:	b118      	cbz	r0, 2089e <get_initial_sense+0x2a>
   20896:	2003      	movs	r0, #3
   20898:	e000      	b.n	2089c <get_initial_sense+0x28>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2089a:	2003      	movs	r0, #3
}
   2089c:	bd08      	pop	{r3, pc}
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2089e:	2002      	movs	r0, #2
   208a0:	e7fc      	b.n	2089c <get_initial_sense+0x28>
   208a2:	bf00      	nop
   208a4:	2000085c 	.word	0x2000085c

000208a8 <nrf_gpiote_in_event_get>:
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   208a8:	2807      	cmp	r0, #7
   208aa:	d803      	bhi.n	208b4 <nrf_gpiote_in_event_get+0xc>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   208ac:	0080      	lsls	r0, r0, #2
}
   208ae:	f500 7080 	add.w	r0, r0, #256	; 0x100
   208b2:	4770      	bx	lr
{
   208b4:	b510      	push	{r4, lr}
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   208b6:	4c06      	ldr	r4, [pc, #24]	; (208d0 <nrf_gpiote_in_event_get+0x28>)
   208b8:	f44f 7223 	mov.w	r2, #652	; 0x28c
   208bc:	4621      	mov	r1, r4
   208be:	4805      	ldr	r0, [pc, #20]	; (208d4 <nrf_gpiote_in_event_get+0x2c>)
   208c0:	f008 f9a5 	bl	28c0e <assert_print>
   208c4:	f44f 7123 	mov.w	r1, #652	; 0x28c
   208c8:	4620      	mov	r0, r4
   208ca:	f008 f999 	bl	28c00 <assert_post_action>
   208ce:	bf00      	nop
   208d0:	000339ec 	.word	0x000339ec
   208d4:	00030128 	.word	0x00030128

000208d8 <pin_handler_set>:
{
   208d8:	b570      	push	{r4, r5, r6, lr}
   208da:	b082      	sub	sp, #8
   208dc:	4605      	mov	r5, r0
   208de:	460e      	mov	r6, r1
   208e0:	4614      	mov	r4, r2
    release_handler(pin);
   208e2:	f7ff ff43 	bl	2076c <release_handler>
    if (!handler)
   208e6:	b326      	cbz	r6, 20932 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   208e8:	4621      	mov	r1, r4
   208ea:	4630      	mov	r0, r6
   208ec:	f7ff ff02 	bl	206f4 <find_handler>
    if (handler_id < 0)
   208f0:	1e03      	subs	r3, r0, #0
   208f2:	db13      	blt.n	2091c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   208f4:	4910      	ldr	r1, [pc, #64]	; (20938 <pin_handler_set+0x60>)
   208f6:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   208fa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   208fe:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20900:	f105 0008 	add.w	r0, r5, #8
   20904:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   20908:	025b      	lsls	r3, r3, #9
   2090a:	b29b      	uxth	r3, r3
   2090c:	4313      	orrs	r3, r2
   2090e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20912:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   20916:	4809      	ldr	r0, [pc, #36]	; (2093c <pin_handler_set+0x64>)
}
   20918:	b002      	add	sp, #8
   2091a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   2091c:	f10d 0107 	add.w	r1, sp, #7
   20920:	4807      	ldr	r0, [pc, #28]	; (20940 <pin_handler_set+0x68>)
   20922:	f7ff fe2f 	bl	20584 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   20926:	4b05      	ldr	r3, [pc, #20]	; (2093c <pin_handler_set+0x64>)
   20928:	4298      	cmp	r0, r3
   2092a:	d1f5      	bne.n	20918 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   2092c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20930:	e7e0      	b.n	208f4 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   20932:	4802      	ldr	r0, [pc, #8]	; (2093c <pin_handler_set+0x64>)
   20934:	e7f0      	b.n	20918 <pin_handler_set+0x40>
   20936:	bf00      	nop
   20938:	2000085c 	.word	0x2000085c
   2093c:	0bad0000 	.word	0x0bad0000
   20940:	200008d0 	.word	0x200008d0

00020944 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   20944:	b570      	push	{r4, r5, r6, lr}
   20946:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   20948:	466a      	mov	r2, sp
   2094a:	2102      	movs	r1, #2
   2094c:	2000      	movs	r0, #0
   2094e:	f7ff fe63 	bl	20618 <nrf_gpio_latches_read_and_clear>
   20952:	e037      	b.n	209c4 <port_event_handle+0x80>
    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
        {
            while (latch[i])
            {
                uint32_t pin = NRF_CTZ(latch[i]);
   20954:	fa94 f4a4 	rbit	r4, r4
   20958:	fab4 f484 	clz	r4, r4

                /* Convert to absolute value. */
                pin += 32 * i;
   2095c:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrf_gpio_pin_sense_t sense;
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20960:	f104 0208 	add.w	r2, r4, #8
   20964:	4b19      	ldr	r3, [pc, #100]	; (209cc <port_event_handle+0x88>)
   20966:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
   2096a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2096e:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   20970:	f004 0007 	and.w	r0, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   20974:	f81d 2001 	ldrb.w	r2, [sp, r1]
   20978:	2301      	movs	r3, #1
   2097a:	4083      	lsls	r3, r0
   2097c:	43db      	mvns	r3, r3
   2097e:	b25b      	sxtb	r3, r3
   20980:	4013      	ands	r3, r2
   20982:	f80d 3001 	strb.w	r3, [sp, r1]

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);
   20986:	4620      	mov	r0, r4
   20988:	f00e f9bc 	bl	2ed04 <nrf_gpio_pin_sense_get>
   2098c:	4602      	mov	r2, r0

                next_sense_cond_call_handler(pin, trigger, sense);
   2098e:	4631      	mov	r1, r6
   20990:	4620      	mov	r0, r4
   20992:	f00e f9c7 	bl	2ed24 <next_sense_cond_call_handler>
                /* Try to clear LATCH bit corresponding to currently processed pin.
                 * This may not succeed if the pin's state changed during the interrupt processing
                 * and now it matches the new sense configuration. In such case,
                 * the pin will be processed again in another iteration of the outer loop. */
                nrf_gpio_pin_latch_clear(pin);
   20996:	4620      	mov	r0, r4
   20998:	f00e f9f7 	bl	2ed8a <nrf_gpio_pin_latch_clear>
            while (latch[i])
   2099c:	ab02      	add	r3, sp, #8
   2099e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   209a2:	f853 4c08 	ldr.w	r4, [r3, #-8]
   209a6:	2c00      	cmp	r4, #0
   209a8:	d1d4      	bne.n	20954 <port_event_handle+0x10>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   209aa:	3501      	adds	r5, #1
   209ac:	2d01      	cmp	r5, #1
   209ae:	d9f5      	bls.n	2099c <port_event_handle+0x58>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   209b0:	4b07      	ldr	r3, [pc, #28]	; (209d0 <port_event_handle+0x8c>)
   209b2:	2200      	movs	r2, #0
   209b4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   209b8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   209bc:	4668      	mov	r0, sp
   209be:	f00e f904 	bl	2ebca <latch_pending_read_and_check>
   209c2:	b108      	cbz	r0, 209c8 <port_event_handle+0x84>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   209c4:	2500      	movs	r5, #0
   209c6:	e7f1      	b.n	209ac <port_event_handle+0x68>
}
   209c8:	b002      	add	sp, #8
   209ca:	bd70      	pop	{r4, r5, r6, pc}
   209cc:	2000085c 	.word	0x2000085c
   209d0:	40006000 	.word	0x40006000

000209d4 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   209d4:	b538      	push	{r3, r4, r5, lr}
   209d6:	4604      	mov	r4, r0
    while (mask)
   209d8:	e018      	b.n	20a0c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   209da:	fa94 f3a4 	rbit	r3, r4
   209de:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   209e2:	2201      	movs	r2, #1
   209e4:	409a      	lsls	r2, r3
   209e6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   209ea:	4a0a      	ldr	r2, [pc, #40]	; (20a14 <gpiote_evt_handle+0x40>)
   209ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   209f0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   209f4:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   209f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   209fc:	f3c0 4001 	ubfx	r0, r0, #16, #2
   20a00:	f00e f8dc 	bl	2ebbc <gpiote_polarity_to_trigger>
   20a04:	4601      	mov	r1, r0
   20a06:	4628      	mov	r0, r5
   20a08:	f7ff fe9a 	bl	20740 <call_handler>
    while (mask)
   20a0c:	2c00      	cmp	r4, #0
   20a0e:	d1e4      	bne.n	209da <gpiote_evt_handle+0x6>
    }
}
   20a10:	bd38      	pop	{r3, r4, r5, pc}
   20a12:	bf00      	nop
   20a14:	40006000 	.word	0x40006000

00020a18 <nrfx_gpiote_input_configure>:
{
   20a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a1c:	b084      	sub	sp, #16
   20a1e:	4604      	mov	r4, r0
   20a20:	4615      	mov	r5, r2
   20a22:	461e      	mov	r6, r3
    if (p_input_config)
   20a24:	b309      	cbz	r1, 20a6a <nrfx_gpiote_input_configure+0x52>
   20a26:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   20a28:	f00e f8b2 	bl	2eb90 <pin_is_task_output>
   20a2c:	2800      	cmp	r0, #0
   20a2e:	d13f      	bne.n	20ab0 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   20a30:	2300      	movs	r3, #0
   20a32:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   20a36:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   20a3a:	9301      	str	r3, [sp, #4]
   20a3c:	9300      	str	r3, [sp, #0]
   20a3e:	463b      	mov	r3, r7
   20a40:	f10d 020f 	add.w	r2, sp, #15
   20a44:	f10d 010e 	add.w	r1, sp, #14
   20a48:	4620      	mov	r0, r4
   20a4a:	f00e f8e0 	bl	2ec0e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   20a4e:	4a38      	ldr	r2, [pc, #224]	; (20b30 <nrfx_gpiote_input_configure+0x118>)
   20a50:	f104 0108 	add.w	r1, r4, #8
   20a54:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   20a58:	f023 0302 	bic.w	r3, r3, #2
   20a5c:	b29b      	uxth	r3, r3
   20a5e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   20a62:	f043 0301 	orr.w	r3, r3, #1
   20a66:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   20a6a:	b1bd      	cbz	r5, 20a9c <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   20a6c:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   20a6e:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   20a72:	4620      	mov	r0, r4
   20a74:	f7ff fe12 	bl	2069c <pin_is_output>
   20a78:	b1e0      	cbz	r0, 20ab4 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   20a7a:	f1b8 0f00 	cmp.w	r8, #0
   20a7e:	d151      	bne.n	20b24 <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   20a80:	4a2b      	ldr	r2, [pc, #172]	; (20b30 <nrfx_gpiote_input_configure+0x118>)
   20a82:	f104 0108 	add.w	r1, r4, #8
   20a86:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   20a8a:	f023 031c 	bic.w	r3, r3, #28
   20a8e:	b29b      	uxth	r3, r3
   20a90:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   20a94:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   20a98:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   20a9c:	2e00      	cmp	r6, #0
   20a9e:	d045      	beq.n	20b2c <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   20aa0:	6872      	ldr	r2, [r6, #4]
   20aa2:	6831      	ldr	r1, [r6, #0]
   20aa4:	4620      	mov	r0, r4
   20aa6:	f7ff ff17 	bl	208d8 <pin_handler_set>
}
   20aaa:	b004      	add	sp, #16
   20aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   20ab0:	4820      	ldr	r0, [pc, #128]	; (20b34 <nrfx_gpiote_input_configure+0x11c>)
   20ab2:	e7fa      	b.n	20aaa <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   20ab4:	4a1e      	ldr	r2, [pc, #120]	; (20b30 <nrfx_gpiote_input_configure+0x118>)
   20ab6:	f104 0108 	add.w	r1, r4, #8
   20aba:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   20abe:	f023 0320 	bic.w	r3, r3, #32
   20ac2:	04db      	lsls	r3, r3, #19
   20ac4:	0cdb      	lsrs	r3, r3, #19
   20ac6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   20aca:	f1b8 0f00 	cmp.w	r8, #0
   20ace:	d0d7      	beq.n	20a80 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   20ad0:	2f03      	cmp	r7, #3
   20ad2:	d829      	bhi.n	20b28 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
   20ad4:	686b      	ldr	r3, [r5, #4]
   20ad6:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   20ad8:	b937      	cbnz	r7, 20ae8 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
   20ada:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   20ade:	4b16      	ldr	r3, [pc, #88]	; (20b38 <nrfx_gpiote_input_configure+0x120>)
   20ae0:	2200      	movs	r2, #0
   20ae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
}
   20ae6:	e7cb      	b.n	20a80 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   20ae8:	4638      	mov	r0, r7
   20aea:	f00e f868 	bl	2ebbe <gpiote_trigger_to_polarity>
   20aee:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20af0:	4811      	ldr	r0, [pc, #68]	; (20b38 <nrfx_gpiote_input_configure+0x120>)
   20af2:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   20af6:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   20afa:	f022 0203 	bic.w	r2, r2, #3
   20afe:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   20b02:	4622      	mov	r2, r4
   20b04:	4629      	mov	r1, r5
   20b06:	f00d fff9 	bl	2eafc <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20b0a:	4a09      	ldr	r2, [pc, #36]	; (20b30 <nrfx_gpiote_input_configure+0x118>)
   20b0c:	f104 0108 	add.w	r1, r4, #8
   20b10:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   20b14:	036d      	lsls	r5, r5, #13
   20b16:	b2ad      	uxth	r5, r5
   20b18:	432b      	orrs	r3, r5
   20b1a:	f043 0320 	orr.w	r3, r3, #32
   20b1e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   20b22:	e7ad      	b.n	20a80 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   20b24:	4803      	ldr	r0, [pc, #12]	; (20b34 <nrfx_gpiote_input_configure+0x11c>)
   20b26:	e7c0      	b.n	20aaa <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   20b28:	4802      	ldr	r0, [pc, #8]	; (20b34 <nrfx_gpiote_input_configure+0x11c>)
   20b2a:	e7be      	b.n	20aaa <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   20b2c:	4803      	ldr	r0, [pc, #12]	; (20b3c <nrfx_gpiote_input_configure+0x124>)
   20b2e:	e7bc      	b.n	20aaa <nrfx_gpiote_input_configure+0x92>
   20b30:	2000085c 	.word	0x2000085c
   20b34:	0bad0004 	.word	0x0bad0004
   20b38:	40006000 	.word	0x40006000
   20b3c:	0bad0000 	.word	0x0bad0000

00020b40 <nrfx_gpiote_output_configure>:
{
   20b40:	b570      	push	{r4, r5, r6, lr}
   20b42:	b084      	sub	sp, #16
   20b44:	4604      	mov	r4, r0
   20b46:	4615      	mov	r5, r2
    if (p_config)
   20b48:	b329      	cbz	r1, 20b96 <nrfx_gpiote_output_configure+0x56>
   20b4a:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   20b4c:	f00e f82f 	bl	2ebae <pin_is_input>
   20b50:	b120      	cbz	r0, 20b5c <nrfx_gpiote_output_configure+0x1c>
   20b52:	4620      	mov	r0, r4
   20b54:	f7ff fd8c 	bl	20670 <pin_in_use_by_te>
   20b58:	2800      	cmp	r0, #0
   20b5a:	d138      	bne.n	20bce <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   20b5c:	4620      	mov	r0, r4
   20b5e:	f7ff fd91 	bl	20684 <pin_has_trigger>
   20b62:	b110      	cbz	r0, 20b6a <nrfx_gpiote_output_configure+0x2a>
   20b64:	7873      	ldrb	r3, [r6, #1]
   20b66:	2b01      	cmp	r3, #1
   20b68:	d031      	beq.n	20bce <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   20b6a:	2301      	movs	r3, #1
   20b6c:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   20b70:	2300      	movs	r3, #0
   20b72:	9301      	str	r3, [sp, #4]
   20b74:	9600      	str	r6, [sp, #0]
   20b76:	1cb3      	adds	r3, r6, #2
   20b78:	1c72      	adds	r2, r6, #1
   20b7a:	f10d 010f 	add.w	r1, sp, #15
   20b7e:	4620      	mov	r0, r4
   20b80:	f00e f845 	bl	2ec0e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   20b84:	4a1f      	ldr	r2, [pc, #124]	; (20c04 <nrfx_gpiote_output_configure+0xc4>)
   20b86:	f104 0108 	add.w	r1, r4, #8
   20b8a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   20b8e:	f043 0303 	orr.w	r3, r3, #3
   20b92:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   20b96:	b385      	cbz	r5, 20bfa <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
   20b98:	4620      	mov	r0, r4
   20b9a:	f00e f808 	bl	2ebae <pin_is_input>
   20b9e:	bb70      	cbnz	r0, 20bfe <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
   20ba0:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   20ba2:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   20ba6:	4b18      	ldr	r3, [pc, #96]	; (20c08 <nrfx_gpiote_output_configure+0xc8>)
   20ba8:	2100      	movs	r1, #0
   20baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   20bae:	4a15      	ldr	r2, [pc, #84]	; (20c04 <nrfx_gpiote_output_configure+0xc4>)
   20bb0:	f104 0108 	add.w	r1, r4, #8
   20bb4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   20bb8:	f023 0320 	bic.w	r3, r3, #32
   20bbc:	04db      	lsls	r3, r3, #19
   20bbe:	0cdb      	lsrs	r3, r3, #19
   20bc0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   20bc4:	786b      	ldrb	r3, [r5, #1]
   20bc6:	b923      	cbnz	r3, 20bd2 <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
   20bc8:	4810      	ldr	r0, [pc, #64]	; (20c0c <nrfx_gpiote_output_configure+0xcc>)
}
   20bca:	b004      	add	sp, #16
   20bcc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   20bce:	4810      	ldr	r0, [pc, #64]	; (20c10 <nrfx_gpiote_output_configure+0xd0>)
   20bd0:	e7fb      	b.n	20bca <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
   20bd2:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   20bd4:	9200      	str	r2, [sp, #0]
   20bd6:	4622      	mov	r2, r4
   20bd8:	4631      	mov	r1, r6
   20bda:	480b      	ldr	r0, [pc, #44]	; (20c08 <nrfx_gpiote_output_configure+0xc8>)
   20bdc:	f00d ffa7 	bl	2eb2e <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20be0:	4a08      	ldr	r2, [pc, #32]	; (20c04 <nrfx_gpiote_output_configure+0xc4>)
   20be2:	3408      	adds	r4, #8
   20be4:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   20be8:	0376      	lsls	r6, r6, #13
   20bea:	b2b6      	uxth	r6, r6
   20bec:	4333      	orrs	r3, r6
   20bee:	f043 0320 	orr.w	r3, r3, #32
   20bf2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   20bf6:	4805      	ldr	r0, [pc, #20]	; (20c0c <nrfx_gpiote_output_configure+0xcc>)
   20bf8:	e7e7      	b.n	20bca <nrfx_gpiote_output_configure+0x8a>
   20bfa:	4804      	ldr	r0, [pc, #16]	; (20c0c <nrfx_gpiote_output_configure+0xcc>)
   20bfc:	e7e5      	b.n	20bca <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
   20bfe:	4804      	ldr	r0, [pc, #16]	; (20c10 <nrfx_gpiote_output_configure+0xd0>)
   20c00:	e7e3      	b.n	20bca <nrfx_gpiote_output_configure+0x8a>
   20c02:	bf00      	nop
   20c04:	2000085c 	.word	0x2000085c
   20c08:	40006000 	.word	0x40006000
   20c0c:	0bad0000 	.word	0x0bad0000
   20c10:	0bad0004 	.word	0x0bad0004

00020c14 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   20c14:	4b01      	ldr	r3, [pc, #4]	; (20c1c <nrfx_gpiote_global_callback_set+0x8>)
   20c16:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   20c18:	60d9      	str	r1, [r3, #12]
}
   20c1a:	4770      	bx	lr
   20c1c:	2000085c 	.word	0x2000085c

00020c20 <nrfx_gpiote_channel_get>:
{
   20c20:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_channel);
   20c22:	b161      	cbz	r1, 20c3e <nrfx_gpiote_channel_get+0x1e>
   20c24:	4604      	mov	r4, r0
   20c26:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   20c28:	f7ff fd22 	bl	20670 <pin_in_use_by_te>
   20c2c:	b198      	cbz	r0, 20c56 <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20c2e:	3408      	adds	r4, #8
   20c30:	4b0a      	ldr	r3, [pc, #40]	; (20c5c <nrfx_gpiote_channel_get+0x3c>)
   20c32:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   20c36:	0b5b      	lsrs	r3, r3, #13
   20c38:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   20c3a:	4809      	ldr	r0, [pc, #36]	; (20c60 <nrfx_gpiote_channel_get+0x40>)
   20c3c:	e00c      	b.n	20c58 <nrfx_gpiote_channel_get+0x38>
    NRFX_ASSERT(p_channel);
   20c3e:	4c09      	ldr	r4, [pc, #36]	; (20c64 <nrfx_gpiote_channel_get+0x44>)
   20c40:	f240 2235 	movw	r2, #565	; 0x235
   20c44:	4621      	mov	r1, r4
   20c46:	4808      	ldr	r0, [pc, #32]	; (20c68 <nrfx_gpiote_channel_get+0x48>)
   20c48:	f007 ffe1 	bl	28c0e <assert_print>
   20c4c:	f240 2135 	movw	r1, #565	; 0x235
   20c50:	4620      	mov	r0, r4
   20c52:	f007 ffd5 	bl	28c00 <assert_post_action>
        return NRFX_ERROR_INVALID_PARAM;
   20c56:	4805      	ldr	r0, [pc, #20]	; (20c6c <nrfx_gpiote_channel_get+0x4c>)
}
   20c58:	bd38      	pop	{r3, r4, r5, pc}
   20c5a:	bf00      	nop
   20c5c:	2000085c 	.word	0x2000085c
   20c60:	0bad0000 	.word	0x0bad0000
   20c64:	000339ac 	.word	0x000339ac
   20c68:	00030128 	.word	0x00030128
   20c6c:	0bad0004 	.word	0x0bad0004

00020c70 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   20c70:	4b0f      	ldr	r3, [pc, #60]	; (20cb0 <nrfx_gpiote_init+0x40>)
   20c72:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   20c76:	b10b      	cbz	r3, 20c7c <nrfx_gpiote_init+0xc>
        return err_code;
   20c78:	480e      	ldr	r0, [pc, #56]	; (20cb4 <nrfx_gpiote_init+0x44>)
}
   20c7a:	4770      	bx	lr
{
   20c7c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   20c7e:	4c0e      	ldr	r4, [pc, #56]	; (20cb8 <nrfx_gpiote_init+0x48>)
   20c80:	2260      	movs	r2, #96	; 0x60
   20c82:	2100      	movs	r1, #0
   20c84:	4620      	mov	r0, r4
   20c86:	f009 f8b0 	bl	29dea <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   20c8a:	2006      	movs	r0, #6
   20c8c:	f008 ff0e 	bl	29aac <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20c90:	4b0a      	ldr	r3, [pc, #40]	; (20cbc <nrfx_gpiote_init+0x4c>)
   20c92:	2200      	movs	r2, #0
   20c94:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   20c98:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   20c9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   20ca0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   20ca4:	2301      	movs	r3, #1
   20ca6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   20caa:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
   20cac:	4804      	ldr	r0, [pc, #16]	; (20cc0 <nrfx_gpiote_init+0x50>)
}
   20cae:	bd10      	pop	{r4, pc}
   20cb0:	2000085c 	.word	0x2000085c
   20cb4:	0bad0005 	.word	0x0bad0005
   20cb8:	2000086c 	.word	0x2000086c
   20cbc:	40006000 	.word	0x40006000
   20cc0:	0bad0000 	.word	0x0bad0000

00020cc4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   20cc4:	4b03      	ldr	r3, [pc, #12]	; (20cd4 <nrfx_gpiote_is_init+0x10>)
   20cc6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   20cca:	3800      	subs	r0, #0
   20ccc:	bf18      	it	ne
   20cce:	2001      	movne	r0, #1
   20cd0:	4770      	bx	lr
   20cd2:	bf00      	nop
   20cd4:	2000085c 	.word	0x2000085c

00020cd8 <nrfx_gpiote_channel_free>:
{
   20cd8:	b508      	push	{r3, lr}
   20cda:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   20cdc:	4801      	ldr	r0, [pc, #4]	; (20ce4 <nrfx_gpiote_channel_free+0xc>)
   20cde:	f7ff fc79 	bl	205d4 <nrfx_flag32_free>
}
   20ce2:	bd08      	pop	{r3, pc}
   20ce4:	200008cc 	.word	0x200008cc

00020ce8 <nrfx_gpiote_channel_alloc>:
{
   20ce8:	b508      	push	{r3, lr}
   20cea:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   20cec:	4801      	ldr	r0, [pc, #4]	; (20cf4 <nrfx_gpiote_channel_alloc+0xc>)
   20cee:	f7ff fc49 	bl	20584 <nrfx_flag32_alloc>
}
   20cf2:	bd08      	pop	{r3, pc}
   20cf4:	200008cc 	.word	0x200008cc

00020cf8 <nrfx_gpiote_trigger_enable>:
{
   20cf8:	b538      	push	{r3, r4, r5, lr}
   20cfa:	4604      	mov	r4, r0
   20cfc:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   20cfe:	f7ff fcc1 	bl	20684 <pin_has_trigger>
   20d02:	b180      	cbz	r0, 20d26 <nrfx_gpiote_trigger_enable+0x2e>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20d04:	4620      	mov	r0, r4
   20d06:	f7ff fcb3 	bl	20670 <pin_in_use_by_te>
   20d0a:	b118      	cbz	r0, 20d14 <nrfx_gpiote_trigger_enable+0x1c>
   20d0c:	4620      	mov	r0, r4
   20d0e:	f00d ff4e 	bl	2ebae <pin_is_input>
   20d12:	b9a0      	cbnz	r0, 20d3e <nrfx_gpiote_trigger_enable+0x46>
        NRFX_ASSERT(int_enable);
   20d14:	b385      	cbz	r5, 20d78 <nrfx_gpiote_trigger_enable+0x80>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20d16:	4620      	mov	r0, r4
   20d18:	f7ff fdac 	bl	20874 <get_initial_sense>
   20d1c:	4601      	mov	r1, r0
   20d1e:	4620      	mov	r0, r4
   20d20:	f00d ffd1 	bl	2ecc6 <nrf_gpio_cfg_sense_set>
}
   20d24:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(pin_has_trigger(pin));
   20d26:	4c1a      	ldr	r4, [pc, #104]	; (20d90 <nrfx_gpiote_trigger_enable+0x98>)
   20d28:	f240 32df 	movw	r2, #991	; 0x3df
   20d2c:	4621      	mov	r1, r4
   20d2e:	4819      	ldr	r0, [pc, #100]	; (20d94 <nrfx_gpiote_trigger_enable+0x9c>)
   20d30:	f007 ff6d 	bl	28c0e <assert_print>
   20d34:	f240 31df 	movw	r1, #991	; 0x3df
   20d38:	4620      	mov	r0, r4
   20d3a:	f007 ff61 	bl	28c00 <assert_post_action>
        uint8_t ch = pin_te_get(pin);
   20d3e:	4620      	mov	r0, r4
   20d40:	f7ff fcb6 	bl	206b0 <pin_te_get>
   20d44:	4604      	mov	r4, r0
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   20d46:	f7ff fdaf 	bl	208a8 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   20d4a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   20d4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20d52:	2200      	movs	r2, #0
   20d54:	601a      	str	r2, [r3, #0]
   20d56:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   20d58:	4a0f      	ldr	r2, [pc, #60]	; (20d98 <nrfx_gpiote_trigger_enable+0xa0>)
   20d5a:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   20d5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   20d62:	f043 0301 	orr.w	r3, r3, #1
   20d66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   20d6a:	2d00      	cmp	r5, #0
   20d6c:	d0da      	beq.n	20d24 <nrfx_gpiote_trigger_enable+0x2c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   20d6e:	2301      	movs	r3, #1
   20d70:	40a3      	lsls	r3, r4
    p_reg->INTENSET = mask;
   20d72:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20d76:	e7d5      	b.n	20d24 <nrfx_gpiote_trigger_enable+0x2c>
        NRFX_ASSERT(int_enable);
   20d78:	4c05      	ldr	r4, [pc, #20]	; (20d90 <nrfx_gpiote_trigger_enable+0x98>)
   20d7a:	f240 32ee 	movw	r2, #1006	; 0x3ee
   20d7e:	4621      	mov	r1, r4
   20d80:	4804      	ldr	r0, [pc, #16]	; (20d94 <nrfx_gpiote_trigger_enable+0x9c>)
   20d82:	f007 ff44 	bl	28c0e <assert_print>
   20d86:	f240 31ee 	movw	r1, #1006	; 0x3ee
   20d8a:	4620      	mov	r0, r4
   20d8c:	f007 ff38 	bl	28c00 <assert_post_action>
   20d90:	000339ac 	.word	0x000339ac
   20d94:	00030128 	.word	0x00030128
   20d98:	40006000 	.word	0x40006000

00020d9c <nrfx_gpiote_trigger_disable>:
{
   20d9c:	b510      	push	{r4, lr}
   20d9e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20da0:	f7ff fc66 	bl	20670 <pin_in_use_by_te>
   20da4:	b1a0      	cbz	r0, 20dd0 <nrfx_gpiote_trigger_disable+0x34>
   20da6:	4620      	mov	r0, r4
   20da8:	f00d ff01 	bl	2ebae <pin_is_input>
   20dac:	b180      	cbz	r0, 20dd0 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   20dae:	4620      	mov	r0, r4
   20db0:	f7ff fc7e 	bl	206b0 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20db4:	2201      	movs	r2, #1
   20db6:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   20db8:	4b08      	ldr	r3, [pc, #32]	; (20ddc <nrfx_gpiote_trigger_disable+0x40>)
   20dba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20dbe:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   20dc2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   20dc6:	f022 0203 	bic.w	r2, r2, #3
   20dca:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   20dce:	e003      	b.n	20dd8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   20dd0:	2100      	movs	r1, #0
   20dd2:	4620      	mov	r0, r4
   20dd4:	f00d ff77 	bl	2ecc6 <nrf_gpio_cfg_sense_set>
}
   20dd8:	bd10      	pop	{r4, pc}
   20dda:	bf00      	nop
   20ddc:	40006000 	.word	0x40006000

00020de0 <nrfx_gpiote_pin_uninit>:
{
   20de0:	b510      	push	{r4, lr}
   20de2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   20de4:	f7ff fc3a 	bl	2065c <pin_in_use>
   20de8:	b908      	cbnz	r0, 20dee <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   20dea:	4806      	ldr	r0, [pc, #24]	; (20e04 <nrfx_gpiote_pin_uninit+0x24>)
}
   20dec:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   20dee:	4620      	mov	r0, r4
   20df0:	f7ff ffd4 	bl	20d9c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   20df4:	4620      	mov	r0, r4
   20df6:	f7ff fcef 	bl	207d8 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
   20dfa:	4620      	mov	r0, r4
   20dfc:	f00d fef8 	bl	2ebf0 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
   20e00:	4801      	ldr	r0, [pc, #4]	; (20e08 <nrfx_gpiote_pin_uninit+0x28>)
   20e02:	e7f3      	b.n	20dec <nrfx_gpiote_pin_uninit+0xc>
   20e04:	0bad0004 	.word	0x0bad0004
   20e08:	0bad0000 	.word	0x0bad0000

00020e0c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   20e0c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   20e0e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   20e10:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20e14:	2100      	movs	r1, #0
    uint32_t status = 0;
   20e16:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20e18:	e003      	b.n	20e22 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   20e1a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   20e1c:	3304      	adds	r3, #4
   20e1e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20e20:	3101      	adds	r1, #1
   20e22:	2907      	cmp	r1, #7
   20e24:	d814      	bhi.n	20e50 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20e26:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   20e2a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   20e2e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   20e30:	2a00      	cmp	r2, #0
   20e32:	d0f2      	beq.n	20e1a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   20e34:	4a0c      	ldr	r2, [pc, #48]	; (20e68 <nrfx_gpiote_irq_handler+0x5c>)
   20e36:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   20e3a:	4210      	tst	r0, r2
   20e3c:	d0ed      	beq.n	20e1a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   20e3e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   20e42:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20e46:	2500      	movs	r5, #0
   20e48:	6015      	str	r5, [r2, #0]
   20e4a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   20e4c:	4304      	orrs	r4, r0
   20e4e:	e7e4      	b.n	20e1a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20e50:	4b05      	ldr	r3, [pc, #20]	; (20e68 <nrfx_gpiote_irq_handler+0x5c>)
   20e52:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   20e56:	b91b      	cbnz	r3, 20e60 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   20e58:	4620      	mov	r0, r4
   20e5a:	f7ff fdbb 	bl	209d4 <gpiote_evt_handle>
}
   20e5e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   20e60:	f7ff fd70 	bl	20944 <port_event_handle>
   20e64:	e7f8      	b.n	20e58 <nrfx_gpiote_irq_handler+0x4c>
   20e66:	bf00      	nop
   20e68:	40006000 	.word	0x40006000

00020e6c <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   20e6c:	4b02      	ldr	r3, [pc, #8]	; (20e78 <nvmc_readonly_mode_set+0xc>)
   20e6e:	2200      	movs	r2, #0
   20e70:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
   20e74:	4770      	bx	lr
   20e76:	bf00      	nop
   20e78:	4001e000 	.word	0x4001e000

00020e7c <nvmc_write_mode_set>:
   20e7c:	4b02      	ldr	r3, [pc, #8]	; (20e88 <nvmc_write_mode_set+0xc>)
   20e7e:	2201      	movs	r2, #1
   20e80:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
   20e84:	4770      	bx	lr
   20e86:	bf00      	nop
   20e88:	4001e000 	.word	0x4001e000

00020e8c <nvmc_erase_mode_set>:
   20e8c:	4b02      	ldr	r3, [pc, #8]	; (20e98 <nvmc_erase_mode_set+0xc>)
   20e8e:	2202      	movs	r2, #2
   20e90:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
   20e94:	4770      	bx	lr
   20e96:	bf00      	nop
   20e98:	4001e000 	.word	0x4001e000

00020e9c <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20e9c:	4b04      	ldr	r3, [pc, #16]	; (20eb0 <nvmc_word_write+0x14>)
   20e9e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20ea2:	f013 0f01 	tst.w	r3, #1
   20ea6:	d0f9      	beq.n	20e9c <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   20ea8:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   20eaa:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   20eae:	4770      	bx	lr
   20eb0:	4001e000 	.word	0x4001e000

00020eb4 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   20eb4:	b510      	push	{r4, lr}
   20eb6:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   20eb8:	f00d ff7d 	bl	2edb6 <flash_total_size_get>
   20ebc:	4284      	cmp	r4, r0
   20ebe:	d30b      	bcc.n	20ed8 <nrfx_nvmc_page_erase+0x24>
    NRFX_ASSERT(is_valid_address(addr, false));
   20ec0:	4c10      	ldr	r4, [pc, #64]	; (20f04 <nrfx_nvmc_page_erase+0x50>)
   20ec2:	f44f 7283 	mov.w	r2, #262	; 0x106
   20ec6:	4621      	mov	r1, r4
   20ec8:	480f      	ldr	r0, [pc, #60]	; (20f08 <nrfx_nvmc_page_erase+0x54>)
   20eca:	f007 fea0 	bl	28c0e <assert_print>
   20ece:	f44f 7183 	mov.w	r1, #262	; 0x106
   20ed2:	4620      	mov	r0, r4
   20ed4:	f007 fe94 	bl	28c00 <assert_post_action>

    if (!is_page_aligned_check(addr))
   20ed8:	4620      	mov	r0, r4
   20eda:	f00d ff75 	bl	2edc8 <is_page_aligned_check>
   20ede:	b908      	cbnz	r0, 20ee4 <nrfx_nvmc_page_erase+0x30>
    {
        return NRFX_ERROR_INVALID_ADDR;
   20ee0:	480a      	ldr	r0, [pc, #40]	; (20f0c <nrfx_nvmc_page_erase+0x58>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
   20ee2:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
   20ee4:	f7ff ffd2 	bl	20e8c <nvmc_erase_mode_set>
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   20ee8:	4b09      	ldr	r3, [pc, #36]	; (20f10 <nrfx_nvmc_page_erase+0x5c>)
   20eea:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20eee:	4b08      	ldr	r3, [pc, #32]	; (20f10 <nrfx_nvmc_page_erase+0x5c>)
   20ef0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20ef4:	f013 0f01 	tst.w	r3, #1
   20ef8:	d0f9      	beq.n	20eee <nrfx_nvmc_page_erase+0x3a>
    nvmc_readonly_mode_set();
   20efa:	f7ff ffb7 	bl	20e6c <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
   20efe:	4805      	ldr	r0, [pc, #20]	; (20f14 <nrfx_nvmc_page_erase+0x60>)
   20f00:	e7ef      	b.n	20ee2 <nrfx_nvmc_page_erase+0x2e>
   20f02:	bf00      	nop
   20f04:	00033a24 	.word	0x00033a24
   20f08:	00030128 	.word	0x00030128
   20f0c:	0bad000a 	.word	0x0bad000a
   20f10:	4001e000 	.word	0x4001e000
   20f14:	0bad0000 	.word	0x0bad0000

00020f18 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   20f18:	b538      	push	{r3, r4, r5, lr}
   20f1a:	4604      	mov	r4, r0
   20f1c:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   20f1e:	f00d ff4a 	bl	2edb6 <flash_total_size_get>
   20f22:	4284      	cmp	r4, r0
   20f24:	d310      	bcc.n	20f48 <nrfx_nvmc_word_write+0x30>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   20f26:	f1a4 2310 	sub.w	r3, r4, #268439552	; 0x10001000
    if (uicr_allowed &&
   20f2a:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
   20f2e:	d30b      	bcc.n	20f48 <nrfx_nvmc_word_write+0x30>
    NRFX_ASSERT(is_valid_address(addr, true));
   20f30:	4c11      	ldr	r4, [pc, #68]	; (20f78 <nrfx_nvmc_word_write+0x60>)
   20f32:	f44f 72ca 	mov.w	r2, #404	; 0x194
   20f36:	4621      	mov	r1, r4
   20f38:	4810      	ldr	r0, [pc, #64]	; (20f7c <nrfx_nvmc_word_write+0x64>)
   20f3a:	f007 fe68 	bl	28c0e <assert_print>
   20f3e:	f44f 71ca 	mov.w	r1, #404	; 0x194
   20f42:	4620      	mov	r0, r4
   20f44:	f007 fe5c 	bl	28c00 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   20f48:	f014 0f03 	tst.w	r4, #3
   20f4c:	d108      	bne.n	20f60 <nrfx_nvmc_word_write+0x48>

    nvmc_write_mode_set();
   20f4e:	f7ff ff95 	bl	20e7c <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   20f52:	4629      	mov	r1, r5
   20f54:	4620      	mov	r0, r4
   20f56:	f7ff ffa1 	bl	20e9c <nvmc_word_write>

    nvmc_readonly_mode_set();
   20f5a:	f7ff ff87 	bl	20e6c <nvmc_readonly_mode_set>
}
   20f5e:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   20f60:	4c05      	ldr	r4, [pc, #20]	; (20f78 <nrfx_nvmc_word_write+0x60>)
   20f62:	f240 1295 	movw	r2, #405	; 0x195
   20f66:	4621      	mov	r1, r4
   20f68:	4804      	ldr	r0, [pc, #16]	; (20f7c <nrfx_nvmc_word_write+0x64>)
   20f6a:	f007 fe50 	bl	28c0e <assert_print>
   20f6e:	f240 1195 	movw	r1, #405	; 0x195
   20f72:	4620      	mov	r0, r4
   20f74:	f007 fe44 	bl	28c00 <assert_post_action>
   20f78:	00033a24 	.word	0x00033a24
   20f7c:	00030128 	.word	0x00030128

00020f80 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   20f80:	b508      	push	{r3, lr}
   20f82:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   20f84:	4801      	ldr	r0, [pc, #4]	; (20f8c <nrfx_ppi_channel_alloc+0xc>)
   20f86:	f7ff fafd 	bl	20584 <nrfx_flag32_alloc>
}
   20f8a:	bd08      	pop	{r3, pc}
   20f8c:	200008d8 	.word	0x200008d8

00020f90 <nrf_qspi_disable>:
{
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
}

NRF_STATIC_INLINE void nrf_qspi_disable(NRF_QSPI_Type * p_reg)
{
   20f90:	b510      	push	{r4, lr}
   20f92:	4604      	mov	r4, r0
    if (nrf52_errata_122())
   20f94:	f00d ff30 	bl	2edf8 <nrf52_errata_122>
   20f98:	b110      	cbz	r0, 20fa0 <nrf_qspi_disable+0x10>
    {
        // Workaround for anomaly 122: "QSPI: QSPI uses current after being disabled".
        *(volatile uint32_t *)0x40029054ul = 1ul;
   20f9a:	4b03      	ldr	r3, [pc, #12]	; (20fa8 <nrf_qspi_disable+0x18>)
   20f9c:	2201      	movs	r2, #1
   20f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   20fa0:	2300      	movs	r3, #0
   20fa2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
}
   20fa6:	bd10      	pop	{r4, pc}
   20fa8:	40029000 	.word	0x40029000

00020fac <qspi_event_xfer_handle>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   20fac:	4b0a      	ldr	r3, [pc, #40]	; (20fd8 <qspi_event_xfer_handle+0x2c>)
   20fae:	689a      	ldr	r2, [r3, #8]
   20fb0:	6002      	str	r2, [r0, #0]
    p_xfer->size     = m_cb.size_primary;
   20fb2:	691a      	ldr	r2, [r3, #16]
   20fb4:	6042      	str	r2, [r0, #4]
    p_xfer->addr     = m_cb.addr_primary;
   20fb6:	699a      	ldr	r2, [r3, #24]
   20fb8:	6082      	str	r2, [r0, #8]
    if (m_cb.p_buffer_secondary)
   20fba:	68da      	ldr	r2, [r3, #12]
   20fbc:	b13a      	cbz	r2, 20fce <qspi_event_xfer_handle+0x22>
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   20fbe:	609a      	str	r2, [r3, #8]
        m_cb.size_primary     = m_cb.size_secondary;
   20fc0:	695a      	ldr	r2, [r3, #20]
   20fc2:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   20fc4:	69da      	ldr	r2, [r3, #28]
   20fc6:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   20fc8:	2200      	movs	r2, #0
   20fca:	60da      	str	r2, [r3, #12]
   20fcc:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
   20fce:	4b02      	ldr	r3, [pc, #8]	; (20fd8 <qspi_event_xfer_handle+0x2c>)
   20fd0:	2200      	movs	r2, #0
   20fd2:	609a      	str	r2, [r3, #8]
    }
}
   20fd4:	4770      	bx	lr
   20fd6:	bf00      	nop
   20fd8:	200035d4 	.word	0x200035d4

00020fdc <qspi_event_erase_handle>:
    p_reg->ERASE.LEN = len;
}

NRF_STATIC_INLINE uint32_t nrf_qspi_erase_ptr_get(NRF_QSPI_Type const * p_reg)
{
    return p_reg->ERASE.PTR;
   20fdc:	4b03      	ldr	r3, [pc, #12]	; (20fec <qspi_event_erase_handle+0x10>)
   20fde:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c

static void qspi_event_erase_handle(nrfx_qspi_evt_ext_erase_t * p_erase)
{
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   20fe2:	6002      	str	r2, [r0, #0]
}

NRF_STATIC_INLINE nrf_qspi_erase_len_t nrf_qspi_erase_len_get(NRF_QSPI_Type const * p_reg)
{
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   20fe4:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    p_erase->len  = nrf_qspi_erase_len_get(NRF_QSPI);
   20fe8:	7103      	strb	r3, [r0, #4]
}
   20fea:	4770      	bx	lr
   20fec:	40029000 	.word	0x40029000

00020ff0 <qspi_extended_event_process>:

static void qspi_extended_event_process(nrfx_qspi_evt_ext_t * p_event)
{
   20ff0:	b508      	push	{r3, lr}
    switch (m_cb.state)
   20ff2:	4b0e      	ldr	r3, [pc, #56]	; (2102c <qspi_extended_event_process+0x3c>)
   20ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   20ff8:	2b03      	cmp	r3, #3
   20ffa:	d00a      	beq.n	21012 <qspi_extended_event_process+0x22>
   20ffc:	2b04      	cmp	r3, #4
   20ffe:	d00e      	beq.n	2101e <qspi_extended_event_process+0x2e>
   21000:	2b02      	cmp	r3, #2
   21002:	d000      	beq.n	21006 <qspi_extended_event_process+0x16>
            break;

        default:
            break;
    }
}
   21004:	bd08      	pop	{r3, pc}
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   21006:	2301      	movs	r3, #1
   21008:	f800 3b04 	strb.w	r3, [r0], #4
            qspi_event_xfer_handle(&p_event->data.xfer);
   2100c:	f7ff ffce 	bl	20fac <qspi_event_xfer_handle>
            break;
   21010:	e7f8      	b.n	21004 <qspi_extended_event_process+0x14>
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   21012:	2302      	movs	r3, #2
   21014:	f800 3b04 	strb.w	r3, [r0], #4
            qspi_event_xfer_handle(&p_event->data.xfer);
   21018:	f7ff ffc8 	bl	20fac <qspi_event_xfer_handle>
            break;
   2101c:	e7f2      	b.n	21004 <qspi_extended_event_process+0x14>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   2101e:	2303      	movs	r3, #3
   21020:	f800 3b04 	strb.w	r3, [r0], #4
            qspi_event_erase_handle(&p_event->data.erase);
   21024:	f7ff ffda 	bl	20fdc <qspi_event_erase_handle>
}
   21028:	e7ec      	b.n	21004 <qspi_extended_event_process+0x14>
   2102a:	bf00      	nop
   2102c:	200035d4 	.word	0x200035d4

00021030 <nrf_gpio_pin_port_decode>:
{
   21030:	b538      	push	{r3, r4, r5, lr}
   21032:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21034:	6804      	ldr	r4, [r0, #0]
   21036:	4620      	mov	r0, r4
   21038:	f00d ffa4 	bl	2ef84 <nrf_gpio_pin_present_check>
   2103c:	b140      	cbz	r0, 21050 <nrf_gpio_pin_port_decode+0x20>
    *p_pin = pin_number & 0x1F;
   2103e:	f004 031f 	and.w	r3, r4, #31
   21042:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21044:	0964      	lsrs	r4, r4, #5
   21046:	d01b      	beq.n	21080 <nrf_gpio_pin_port_decode+0x50>
   21048:	2c01      	cmp	r4, #1
   2104a:	d10d      	bne.n	21068 <nrf_gpio_pin_port_decode+0x38>
        case 1: return NRF_P1;
   2104c:	480e      	ldr	r0, [pc, #56]	; (21088 <nrf_gpio_pin_port_decode+0x58>)
}
   2104e:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21050:	4c0e      	ldr	r4, [pc, #56]	; (2108c <nrf_gpio_pin_port_decode+0x5c>)
   21052:	f240 2247 	movw	r2, #583	; 0x247
   21056:	4621      	mov	r1, r4
   21058:	480d      	ldr	r0, [pc, #52]	; (21090 <nrf_gpio_pin_port_decode+0x60>)
   2105a:	f007 fdd8 	bl	28c0e <assert_print>
   2105e:	f240 2147 	movw	r1, #583	; 0x247
   21062:	4620      	mov	r0, r4
   21064:	f007 fdcc 	bl	28c00 <assert_post_action>
            NRFX_ASSERT(0);
   21068:	4c08      	ldr	r4, [pc, #32]	; (2108c <nrf_gpio_pin_port_decode+0x5c>)
   2106a:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2106e:	4621      	mov	r1, r4
   21070:	4807      	ldr	r0, [pc, #28]	; (21090 <nrf_gpio_pin_port_decode+0x60>)
   21072:	f007 fdcc 	bl	28c0e <assert_print>
   21076:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2107a:	4620      	mov	r0, r4
   2107c:	f007 fdc0 	bl	28c00 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21080:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   21084:	e7e3      	b.n	2104e <nrf_gpio_pin_port_decode+0x1e>
   21086:	bf00      	nop
   21088:	50000300 	.word	0x50000300
   2108c:	00032e50 	.word	0x00032e50
   21090:	00030128 	.word	0x00030128

00021094 <qspi_pins_configure>:
{
   21094:	b530      	push	{r4, r5, lr}
   21096:	b083      	sub	sp, #12
   21098:	4604      	mov	r4, r0
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   2109a:	7cc3      	ldrb	r3, [r0, #19]
   2109c:	b10b      	cbz	r3, 210a2 <qspi_pins_configure+0xe>
   2109e:	7d00      	ldrb	r0, [r0, #20]
   210a0:	b978      	cbnz	r0, 210c2 <qspi_pins_configure+0x2e>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   210a2:	7922      	ldrb	r2, [r4, #4]
   210a4:	2aff      	cmp	r2, #255	; 0xff
   210a6:	d059      	beq.n	2115c <qspi_pins_configure+0xc8>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   210a8:	7961      	ldrb	r1, [r4, #5]
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   210aa:	29ff      	cmp	r1, #255	; 0xff
   210ac:	d058      	beq.n	21160 <qspi_pins_configure+0xcc>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   210ae:	79a1      	ldrb	r1, [r4, #6]
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   210b0:	29ff      	cmp	r1, #255	; 0xff
   210b2:	d057      	beq.n	21164 <qspi_pins_configure+0xd0>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   210b4:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   210b6:	29ff      	cmp	r1, #255	; 0xff
   210b8:	d056      	beq.n	21168 <qspi_pins_configure+0xd4>
    if (!p_config->skip_gpio_cfg)
   210ba:	b123      	cbz	r3, 210c6 <qspi_pins_configure+0x32>
    if (!p_config->skip_psel_cfg)
   210bc:	7d20      	ldrb	r0, [r4, #20]
   210be:	2800      	cmp	r0, #0
   210c0:	d046      	beq.n	21150 <qspi_pins_configure+0xbc>
}
   210c2:	b003      	add	sp, #12
   210c4:	bd30      	pop	{r4, r5, pc}
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   210c6:	9201      	str	r2, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   210c8:	a801      	add	r0, sp, #4
   210ca:	f7ff ffb1 	bl	21030 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   210ce:	9b01      	ldr	r3, [sp, #4]
   210d0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   210d4:	f240 3502 	movw	r5, #770	; 0x302
   210d8:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   210dc:	7963      	ldrb	r3, [r4, #5]
   210de:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   210e0:	a801      	add	r0, sp, #4
   210e2:	f7ff ffa5 	bl	21030 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   210e6:	9b01      	ldr	r3, [sp, #4]
   210e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   210ec:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   210f0:	79a3      	ldrb	r3, [r4, #6]
   210f2:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   210f4:	a801      	add	r0, sp, #4
   210f6:	f7ff ff9b 	bl	21030 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   210fa:	9b01      	ldr	r3, [sp, #4]
   210fc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21100:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   21104:	79e3      	ldrb	r3, [r4, #7]
   21106:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21108:	a801      	add	r0, sp, #4
   2110a:	f7ff ff91 	bl	21030 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2110e:	9b01      	ldr	r3, [sp, #4]
   21110:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21114:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   21118:	7a23      	ldrb	r3, [r4, #8]
   2111a:	2bff      	cmp	r3, #255	; 0xff
   2111c:	d10e      	bne.n	2113c <qspi_pins_configure+0xa8>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2111e:	7a63      	ldrb	r3, [r4, #9]
   21120:	2bff      	cmp	r3, #255	; 0xff
   21122:	d0cb      	beq.n	210bc <qspi_pins_configure+0x28>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   21124:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21126:	a801      	add	r0, sp, #4
   21128:	f7ff ff82 	bl	21030 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2112c:	9b01      	ldr	r3, [sp, #4]
   2112e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21132:	f240 3202 	movw	r2, #770	; 0x302
   21136:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   2113a:	e7bf      	b.n	210bc <qspi_pins_configure+0x28>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   2113c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2113e:	a801      	add	r0, sp, #4
   21140:	f7ff ff76 	bl	21030 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21144:	9b01      	ldr	r3, [sp, #4]
   21146:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2114a:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
   2114e:	e7e6      	b.n	2111e <qspi_pins_configure+0x8a>
        nrf_qspi_pins_set(NRF_QSPI, &p_config->pins);
   21150:	1d21      	adds	r1, r4, #4
   21152:	4806      	ldr	r0, [pc, #24]	; (2116c <qspi_pins_configure+0xd8>)
   21154:	f00d fe5a 	bl	2ee0c <nrf_qspi_pins_set>
    return true;
   21158:	2001      	movs	r0, #1
   2115a:	e7b2      	b.n	210c2 <qspi_pins_configure+0x2e>
        return false;
   2115c:	2000      	movs	r0, #0
   2115e:	e7b0      	b.n	210c2 <qspi_pins_configure+0x2e>
   21160:	2000      	movs	r0, #0
   21162:	e7ae      	b.n	210c2 <qspi_pins_configure+0x2e>
   21164:	2000      	movs	r0, #0
   21166:	e7ac      	b.n	210c2 <qspi_pins_configure+0x2e>
   21168:	2000      	movs	r0, #0
   2116a:	e7aa      	b.n	210c2 <qspi_pins_configure+0x2e>
   2116c:	40029000 	.word	0x40029000

00021170 <qspi_pins_deconfigure>:
{
   21170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21174:	b082      	sub	sp, #8
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   21176:	4b1e      	ldr	r3, [pc, #120]	; (211f0 <qspi_pins_deconfigure+0x80>)
   21178:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
   2117c:	b2c0      	uxtb	r0, r0
   2117e:	f88d 0000 	strb.w	r0, [sp]
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   21182:	f8d3 6528 	ldr.w	r6, [r3, #1320]	; 0x528
   21186:	b2f6      	uxtb	r6, r6
   21188:	f88d 6001 	strb.w	r6, [sp, #1]
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   2118c:	f8d3 5530 	ldr.w	r5, [r3, #1328]	; 0x530
   21190:	b2ed      	uxtb	r5, r5
   21192:	f88d 5002 	strb.w	r5, [sp, #2]
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   21196:	f8d3 4534 	ldr.w	r4, [r3, #1332]	; 0x534
   2119a:	b2e4      	uxtb	r4, r4
   2119c:	f88d 4003 	strb.w	r4, [sp, #3]
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   211a0:	f8d3 9538 	ldr.w	r9, [r3, #1336]	; 0x538
   211a4:	fa5f f889 	uxtb.w	r8, r9
   211a8:	f88d 8004 	strb.w	r8, [sp, #4]
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   211ac:	f8d3 a53c 	ldr.w	sl, [r3, #1340]	; 0x53c
   211b0:	fa5f f78a 	uxtb.w	r7, sl
   211b4:	f88d 7005 	strb.w	r7, [sp, #5]
    nrf_gpio_cfg_default(pins.sck_pin);
   211b8:	f00d fef6 	bl	2efa8 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   211bc:	4630      	mov	r0, r6
   211be:	f00d fef3 	bl	2efa8 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   211c2:	4628      	mov	r0, r5
   211c4:	f00d fef0 	bl	2efa8 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   211c8:	4620      	mov	r0, r4
   211ca:	f00d feed 	bl	2efa8 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   211ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   211d2:	d104      	bne.n	211de <qspi_pins_deconfigure+0x6e>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   211d4:	2fff      	cmp	r7, #255	; 0xff
   211d6:	d106      	bne.n	211e6 <qspi_pins_deconfigure+0x76>
}
   211d8:	b002      	add	sp, #8
   211da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nrf_gpio_cfg_default(pins.io2_pin);
   211de:	4640      	mov	r0, r8
   211e0:	f00d fee2 	bl	2efa8 <nrf_gpio_cfg_default>
   211e4:	e7f6      	b.n	211d4 <qspi_pins_deconfigure+0x64>
        nrf_gpio_cfg_default(pins.io3_pin);
   211e6:	fa5f f08a 	uxtb.w	r0, sl
   211ea:	f00d fedd 	bl	2efa8 <nrf_gpio_cfg_default>
}
   211ee:	e7f3      	b.n	211d8 <qspi_pins_deconfigure+0x68>
   211f0:	40029000 	.word	0x40029000

000211f4 <qspi_xfer>:
{
   211f4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   211f6:	4c3e      	ldr	r4, [pc, #248]	; (212f0 <qspi_xfer+0xfc>)
   211f8:	f894 4030 	ldrb.w	r4, [r4, #48]	; 0x30
   211fc:	2c00      	cmp	r4, #0
   211fe:	d036      	beq.n	2126e <qspi_xfer+0x7a>
    NRFX_ASSERT(p_buffer != NULL);
   21200:	2800      	cmp	r0, #0
   21202:	d03e      	beq.n	21282 <qspi_xfer+0x8e>
   21204:	f000 4c60 	and.w	ip, r0, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   21208:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
   2120c:	d167      	bne.n	212de <qspi_xfer+0xea>
   2120e:	f010 0f03 	tst.w	r0, #3
   21212:	d166      	bne.n	212e2 <qspi_xfer+0xee>
    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   21214:	2c01      	cmp	r4, #1
   21216:	d001      	beq.n	2121c <qspi_xfer+0x28>
   21218:	429c      	cmp	r4, r3
   2121a:	d164      	bne.n	212e6 <qspi_xfer+0xf2>
    if (m_cb.handler)
   2121c:	4c34      	ldr	r4, [pc, #208]	; (212f0 <qspi_xfer+0xfc>)
   2121e:	6824      	ldr	r4, [r4, #0]
   21220:	2c00      	cmp	r4, #0
   21222:	d040      	beq.n	212a6 <qspi_xfer+0xb2>
        if (m_cb.p_buffer_primary)
   21224:	4d32      	ldr	r5, [pc, #200]	; (212f0 <qspi_xfer+0xfc>)
   21226:	68ad      	ldr	r5, [r5, #8]
   21228:	2d00      	cmp	r5, #0
   2122a:	d034      	beq.n	21296 <qspi_xfer+0xa2>
            m_cb.p_buffer_secondary = p_buffer;
   2122c:	4d30      	ldr	r5, [pc, #192]	; (212f0 <qspi_xfer+0xfc>)
   2122e:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   21230:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   21232:	61ea      	str	r2, [r5, #28]
    bool is_first_buffer = false;
   21234:	2500      	movs	r5, #0
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   21236:	2b02      	cmp	r3, #2
   21238:	d037      	beq.n	212aa <qspi_xfer+0xb6>
    p_reg->READ.SRC = src_addr;
   2123a:	4b2e      	ldr	r3, [pc, #184]	; (212f4 <qspi_xfer+0x100>)
   2123c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   21240:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->READ.CNT = length;
   21244:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
        task = NRF_QSPI_TASK_READSTART;
   21248:	2304      	movs	r3, #4
    if (!m_cb.handler)
   2124a:	2c00      	cmp	r4, #0
   2124c:	d036      	beq.n	212bc <qspi_xfer+0xc8>
    else if (is_first_buffer)
   2124e:	2d00      	cmp	r5, #0
   21250:	d04b      	beq.n	212ea <qspi_xfer+0xf6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21252:	4928      	ldr	r1, [pc, #160]	; (212f4 <qspi_xfer+0x100>)
   21254:	2200      	movs	r2, #0
   21256:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   2125a:	2201      	movs	r2, #1
   2125c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21264:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
   21268:	601a      	str	r2, [r3, #0]
    return NRFX_SUCCESS;
   2126a:	4823      	ldr	r0, [pc, #140]	; (212f8 <qspi_xfer+0x104>)
}
   2126c:	e038      	b.n	212e0 <qspi_xfer+0xec>
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2126e:	4c23      	ldr	r4, [pc, #140]	; (212fc <qspi_xfer+0x108>)
   21270:	2268      	movs	r2, #104	; 0x68
   21272:	4621      	mov	r1, r4
   21274:	4822      	ldr	r0, [pc, #136]	; (21300 <qspi_xfer+0x10c>)
   21276:	f007 fcca 	bl	28c0e <assert_print>
   2127a:	2168      	movs	r1, #104	; 0x68
   2127c:	4620      	mov	r0, r4
   2127e:	f007 fcbf 	bl	28c00 <assert_post_action>
    NRFX_ASSERT(p_buffer != NULL);
   21282:	4c1e      	ldr	r4, [pc, #120]	; (212fc <qspi_xfer+0x108>)
   21284:	2269      	movs	r2, #105	; 0x69
   21286:	4621      	mov	r1, r4
   21288:	481d      	ldr	r0, [pc, #116]	; (21300 <qspi_xfer+0x10c>)
   2128a:	f007 fcc0 	bl	28c0e <assert_print>
   2128e:	2169      	movs	r1, #105	; 0x69
   21290:	4620      	mov	r0, r4
   21292:	f007 fcb5 	bl	28c00 <assert_post_action>
            m_cb.p_buffer_primary = p_buffer;
   21296:	4d16      	ldr	r5, [pc, #88]	; (212f0 <qspi_xfer+0xfc>)
   21298:	60a8      	str	r0, [r5, #8]
            m_cb.size_primary     = length;
   2129a:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   2129c:	61aa      	str	r2, [r5, #24]
            m_cb.state = desired_state;
   2129e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            is_first_buffer = true;
   212a2:	2501      	movs	r5, #1
   212a4:	e7c7      	b.n	21236 <qspi_xfer+0x42>
    bool is_first_buffer = false;
   212a6:	2500      	movs	r5, #0
   212a8:	e7c5      	b.n	21236 <qspi_xfer+0x42>
    p_reg->WRITE.DST = dest_addr;
   212aa:	4b12      	ldr	r3, [pc, #72]	; (212f4 <qspi_xfer+0x100>)
   212ac:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   212b0:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   212b4:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
        task = NRF_QSPI_TASK_WRITESTART;
   212b8:	2308      	movs	r3, #8
   212ba:	e7c6      	b.n	2124a <qspi_xfer+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212bc:	4a0d      	ldr	r2, [pc, #52]	; (212f4 <qspi_xfer+0x100>)
   212be:	2100      	movs	r1, #0
   212c0:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   212c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   212c8:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
   212cc:	2201      	movs	r2, #1
   212ce:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   212d0:	4b08      	ldr	r3, [pc, #32]	; (212f4 <qspi_xfer+0x100>)
   212d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   212d6:	2b00      	cmp	r3, #0
   212d8:	d0fa      	beq.n	212d0 <qspi_xfer+0xdc>
    return NRFX_SUCCESS;
   212da:	4807      	ldr	r0, [pc, #28]	; (212f8 <qspi_xfer+0x104>)
   212dc:	e000      	b.n	212e0 <qspi_xfer+0xec>
        return NRFX_ERROR_INVALID_ADDR;
   212de:	4809      	ldr	r0, [pc, #36]	; (21304 <qspi_xfer+0x110>)
}
   212e0:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_ADDR;
   212e2:	4808      	ldr	r0, [pc, #32]	; (21304 <qspi_xfer+0x110>)
   212e4:	e7fc      	b.n	212e0 <qspi_xfer+0xec>
        return NRFX_ERROR_BUSY;
   212e6:	4808      	ldr	r0, [pc, #32]	; (21308 <qspi_xfer+0x114>)
   212e8:	e7fa      	b.n	212e0 <qspi_xfer+0xec>
    return NRFX_SUCCESS;
   212ea:	4803      	ldr	r0, [pc, #12]	; (212f8 <qspi_xfer+0x104>)
   212ec:	e7f8      	b.n	212e0 <qspi_xfer+0xec>
   212ee:	bf00      	nop
   212f0:	200035d4 	.word	0x200035d4
   212f4:	40029000 	.word	0x40029000
   212f8:	0bad0000 	.word	0x0bad0000
   212fc:	00033a60 	.word	0x00033a60
   21300:	00030128 	.word	0x00030128
   21304:	0bad000a 	.word	0x0bad000a
   21308:	0bad000b 	.word	0x0bad000b

0002130c <qspi_ready_wait>:
{
   2130c:	b510      	push	{r4, lr}
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   2130e:	2464      	movs	r4, #100	; 0x64
   21310:	4b08      	ldr	r3, [pc, #32]	; (21334 <qspi_ready_wait+0x28>)
   21312:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   21316:	b933      	cbnz	r3, 21326 <qspi_ready_wait+0x1a>
   21318:	200a      	movs	r0, #10
   2131a:	f00d fbeb 	bl	2eaf4 <nrfx_busy_wait>
   2131e:	3c01      	subs	r4, #1
   21320:	d1f6      	bne.n	21310 <qspi_ready_wait+0x4>
   21322:	2300      	movs	r3, #0
   21324:	e000      	b.n	21328 <qspi_ready_wait+0x1c>
   21326:	2301      	movs	r3, #1
    if (!result)
   21328:	b10b      	cbz	r3, 2132e <qspi_ready_wait+0x22>
    return NRFX_SUCCESS;
   2132a:	4803      	ldr	r0, [pc, #12]	; (21338 <qspi_ready_wait+0x2c>)
}
   2132c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_TIMEOUT;
   2132e:	4803      	ldr	r0, [pc, #12]	; (2133c <qspi_ready_wait+0x30>)
   21330:	e7fc      	b.n	2132c <qspi_ready_wait+0x20>
   21332:	bf00      	nop
   21334:	40029000 	.word	0x40029000
   21338:	0bad0000 	.word	0x0bad0000
   2133c:	0bad0007 	.word	0x0bad0007

00021340 <nrfx_qspi_init>:
{
   21340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
   21342:	2800      	cmp	r0, #0
   21344:	d036      	beq.n	213b4 <nrfx_qspi_init+0x74>
   21346:	460f      	mov	r7, r1
   21348:	4616      	mov	r6, r2
   2134a:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   2134c:	4b21      	ldr	r3, [pc, #132]	; (213d4 <nrfx_qspi_init+0x94>)
   2134e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   21352:	2b00      	cmp	r3, #0
   21354:	d13a      	bne.n	213cc <nrfx_qspi_init+0x8c>
    if (!qspi_pins_configure(p_config))
   21356:	f7ff fe9d 	bl	21094 <qspi_pins_configure>
   2135a:	2800      	cmp	r0, #0
   2135c:	d038      	beq.n	213d0 <nrfx_qspi_init+0x90>
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   2135e:	4621      	mov	r1, r4
   21360:	f851 3b0a 	ldr.w	r3, [r1], #10
    p_reg->XIPOFFSET = xip_offset;
   21364:	4d1c      	ldr	r5, [pc, #112]	; (213d8 <nrfx_qspi_init+0x98>)
   21366:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    nrf_qspi_ifconfig0_set(NRF_QSPI, &p_config->prot_if);
   2136a:	4628      	mov	r0, r5
   2136c:	f00d fd7f 	bl	2ee6e <nrf_qspi_ifconfig0_set>
    nrf_qspi_ifconfig1_set(NRF_QSPI, &p_config->phy_if);
   21370:	f104 010e 	add.w	r1, r4, #14
   21374:	4628      	mov	r0, r5
   21376:	f00d fd8a 	bl	2ee8e <nrf_qspi_ifconfig1_set>
    m_cb.handler = handler;
   2137a:	4b16      	ldr	r3, [pc, #88]	; (213d4 <nrfx_qspi_init+0x94>)
   2137c:	601f      	str	r7, [r3, #0]
    m_cb.p_context = p_context;
   2137e:	605e      	str	r6, [r3, #4]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   21380:	7ce2      	ldrb	r2, [r4, #19]
   21382:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    p_reg->INTENCLR = mask;
   21386:	2301      	movs	r3, #1
   21388:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    if (handler)
   2138c:	b117      	cbz	r7, 21394 <nrfx_qspi_init+0x54>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   2138e:	2029      	movs	r0, #41	; 0x29
   21390:	f008 fb8c 	bl	29aac <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   21394:	4b0f      	ldr	r3, [pc, #60]	; (213d4 <nrfx_qspi_init+0x94>)
   21396:	2100      	movs	r1, #0
   21398:	6099      	str	r1, [r3, #8]
    m_cb.p_buffer_secondary = NULL;
   2139a:	60d9      	str	r1, [r3, #12]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   2139c:	2201      	movs	r2, #1
   2139e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   213a2:	4b0d      	ldr	r3, [pc, #52]	; (213d8 <nrfx_qspi_init+0x98>)
   213a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   213a8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   213ac:	601a      	str	r2, [r3, #0]
    return qspi_ready_wait();
   213ae:	f7ff ffad 	bl	2130c <qspi_ready_wait>
}
   213b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_ASSERT(p_config);
   213b4:	4c09      	ldr	r4, [pc, #36]	; (213dc <nrfx_qspi_init+0x9c>)
   213b6:	f44f 7288 	mov.w	r2, #272	; 0x110
   213ba:	4621      	mov	r1, r4
   213bc:	4808      	ldr	r0, [pc, #32]	; (213e0 <nrfx_qspi_init+0xa0>)
   213be:	f007 fc26 	bl	28c0e <assert_print>
   213c2:	f44f 7188 	mov.w	r1, #272	; 0x110
   213c6:	4620      	mov	r0, r4
   213c8:	f007 fc1a 	bl	28c00 <assert_post_action>
        return NRFX_ERROR_INVALID_STATE;
   213cc:	4805      	ldr	r0, [pc, #20]	; (213e4 <nrfx_qspi_init+0xa4>)
   213ce:	e7f0      	b.n	213b2 <nrfx_qspi_init+0x72>
        return NRFX_ERROR_INVALID_PARAM;
   213d0:	4805      	ldr	r0, [pc, #20]	; (213e8 <nrfx_qspi_init+0xa8>)
   213d2:	e7ee      	b.n	213b2 <nrfx_qspi_init+0x72>
   213d4:	200035d4 	.word	0x200035d4
   213d8:	40029000 	.word	0x40029000
   213dc:	00033a60 	.word	0x00033a60
   213e0:	00030128 	.word	0x00030128
   213e4:	0bad0005 	.word	0x0bad0005
   213e8:	0bad0004 	.word	0x0bad0004

000213ec <nrfx_qspi_cinstr_xfer>:
{
   213ec:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   213ee:	4b24      	ldr	r3, [pc, #144]	; (21480 <nrfx_qspi_cinstr_xfer+0x94>)
   213f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   213f4:	b32b      	cbz	r3, 21442 <nrfx_qspi_cinstr_xfer+0x56>
   213f6:	4604      	mov	r4, r0
   213f8:	4615      	mov	r5, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   213fa:	2b01      	cmp	r3, #1
   213fc:	d13b      	bne.n	21476 <nrfx_qspi_cinstr_xfer+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   213fe:	4b21      	ldr	r3, [pc, #132]	; (21484 <nrfx_qspi_cinstr_xfer+0x98>)
   21400:	2200      	movs	r2, #0
   21402:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (p_tx_buffer)
   21406:	b121      	cbz	r1, 21412 <nrfx_qspi_cinstr_xfer+0x26>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   21408:	460a      	mov	r2, r1
   2140a:	7841      	ldrb	r1, [r0, #1]
   2140c:	4618      	mov	r0, r3
   2140e:	f00d fd56 	bl	2eebe <nrf_qspi_cinstrdata_set>
    p_reg->INTENCLR = mask;
   21412:	481c      	ldr	r0, [pc, #112]	; (21484 <nrfx_qspi_cinstr_xfer+0x98>)
   21414:	2301      	movs	r3, #1
   21416:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    nrf_qspi_cinstr_transfer_start(NRF_QSPI, p_config);
   2141a:	4621      	mov	r1, r4
   2141c:	f00d fd9f 	bl	2ef5e <nrf_qspi_cinstr_transfer_start>
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   21420:	f7ff ff74 	bl	2130c <qspi_ready_wait>
   21424:	4b18      	ldr	r3, [pc, #96]	; (21488 <nrfx_qspi_cinstr_xfer+0x9c>)
   21426:	4298      	cmp	r0, r3
   21428:	d017      	beq.n	2145a <nrfx_qspi_cinstr_xfer+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2142a:	4b16      	ldr	r3, [pc, #88]	; (21484 <nrfx_qspi_cinstr_xfer+0x98>)
   2142c:	2200      	movs	r2, #0
   2142e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (p_rx_buffer)
   21432:	b315      	cbz	r5, 2147a <nrfx_qspi_cinstr_xfer+0x8e>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   21434:	462a      	mov	r2, r5
   21436:	7861      	ldrb	r1, [r4, #1]
   21438:	4618      	mov	r0, r3
   2143a:	f00d fd6e 	bl	2ef1a <nrf_qspi_cinstrdata_get>
    return NRFX_SUCCESS;
   2143e:	4813      	ldr	r0, [pc, #76]	; (2148c <nrfx_qspi_cinstr_xfer+0xa0>)
   21440:	e01a      	b.n	21478 <nrfx_qspi_cinstr_xfer+0x8c>
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   21442:	4c13      	ldr	r4, [pc, #76]	; (21490 <nrfx_qspi_cinstr_xfer+0xa4>)
   21444:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   21448:	4621      	mov	r1, r4
   2144a:	4812      	ldr	r0, [pc, #72]	; (21494 <nrfx_qspi_cinstr_xfer+0xa8>)
   2144c:	f007 fbdf 	bl	28c0e <assert_print>
   21450:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   21454:	4620      	mov	r0, r4
   21456:	f007 fbd3 	bl	28c00 <assert_post_action>
        NRFX_ASSERT(p_config->wipwait);
   2145a:	7923      	ldrb	r3, [r4, #4]
   2145c:	b963      	cbnz	r3, 21478 <nrfx_qspi_cinstr_xfer+0x8c>
   2145e:	4c0c      	ldr	r4, [pc, #48]	; (21490 <nrfx_qspi_cinstr_xfer+0xa4>)
   21460:	f240 126b 	movw	r2, #363	; 0x16b
   21464:	4621      	mov	r1, r4
   21466:	480b      	ldr	r0, [pc, #44]	; (21494 <nrfx_qspi_cinstr_xfer+0xa8>)
   21468:	f007 fbd1 	bl	28c0e <assert_print>
   2146c:	f240 116b 	movw	r1, #363	; 0x16b
   21470:	4620      	mov	r0, r4
   21472:	f007 fbc5 	bl	28c00 <assert_post_action>
        return NRFX_ERROR_BUSY;
   21476:	4808      	ldr	r0, [pc, #32]	; (21498 <nrfx_qspi_cinstr_xfer+0xac>)
}
   21478:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   2147a:	4804      	ldr	r0, [pc, #16]	; (2148c <nrfx_qspi_cinstr_xfer+0xa0>)
   2147c:	e7fc      	b.n	21478 <nrfx_qspi_cinstr_xfer+0x8c>
   2147e:	bf00      	nop
   21480:	200035d4 	.word	0x200035d4
   21484:	40029000 	.word	0x40029000
   21488:	0bad0007 	.word	0x0bad0007
   2148c:	0bad0000 	.word	0x0bad0000
   21490:	00033a60 	.word	0x00033a60
   21494:	00030128 	.word	0x00030128
   21498:	0bad000b 	.word	0x0bad000b

0002149c <nrfx_qspi_mem_busy_check>:
{
   2149c:	b500      	push	{lr}
   2149e:	b083      	sub	sp, #12
    uint8_t status_value = 0;
   214a0:	2300      	movs	r3, #0
   214a2:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   214a6:	9300      	str	r3, [sp, #0]
   214a8:	f8ad 3004 	strh.w	r3, [sp, #4]
   214ac:	2305      	movs	r3, #5
   214ae:	f88d 3000 	strb.w	r3, [sp]
   214b2:	2302      	movs	r3, #2
   214b4:	f88d 3001 	strb.w	r3, [sp, #1]
   214b8:	2301      	movs	r3, #1
   214ba:	f88d 3003 	strb.w	r3, [sp, #3]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   214be:	f10d 0207 	add.w	r2, sp, #7
   214c2:	4611      	mov	r1, r2
   214c4:	4668      	mov	r0, sp
   214c6:	f7ff ff91 	bl	213ec <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   214ca:	4b06      	ldr	r3, [pc, #24]	; (214e4 <nrfx_qspi_mem_busy_check+0x48>)
   214cc:	4298      	cmp	r0, r3
   214ce:	d104      	bne.n	214da <nrfx_qspi_mem_busy_check+0x3e>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   214d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   214d4:	f013 0f01 	tst.w	r3, #1
   214d8:	d102      	bne.n	214e0 <nrfx_qspi_mem_busy_check+0x44>
}
   214da:	b003      	add	sp, #12
   214dc:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_BUSY;
   214e0:	4801      	ldr	r0, [pc, #4]	; (214e8 <nrfx_qspi_mem_busy_check+0x4c>)
   214e2:	e7fa      	b.n	214da <nrfx_qspi_mem_busy_check+0x3e>
   214e4:	0bad0000 	.word	0x0bad0000
   214e8:	0bad000b 	.word	0x0bad000b

000214ec <nrfx_qspi_uninit>:
{
   214ec:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   214ee:	4b1b      	ldr	r3, [pc, #108]	; (2155c <nrfx_qspi_uninit+0x70>)
   214f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   214f4:	b1f3      	cbz	r3, 21534 <nrfx_qspi_uninit+0x48>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   214f6:	2029      	movs	r0, #41	; 0x29
   214f8:	f008 fadd 	bl	29ab6 <arch_irq_disable>
                         (QSPI_CINSTRCONF_LFEN_Msk));
}

NRF_STATIC_INLINE bool nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI_Type const * p_reg)
{
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   214fc:	4b18      	ldr	r3, [pc, #96]	; (21560 <nrfx_qspi_uninit+0x74>)
   214fe:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
   21502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   21506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2150a:	d01f      	beq.n	2154c <nrfx_qspi_uninit+0x60>
    p_reg->INTENCLR = mask;
   2150c:	4c14      	ldr	r4, [pc, #80]	; (21560 <nrfx_qspi_uninit+0x74>)
   2150e:	2301      	movs	r3, #1
   21510:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21514:	6123      	str	r3, [r4, #16]
    nrf_qspi_disable(NRF_QSPI);
   21516:	4620      	mov	r0, r4
   21518:	f7ff fd3a 	bl	20f90 <nrf_qspi_disable>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2151c:	2300      	movs	r3, #0
   2151e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   21522:	4b0e      	ldr	r3, [pc, #56]	; (2155c <nrfx_qspi_uninit+0x70>)
   21524:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   21528:	b1ab      	cbz	r3, 21556 <nrfx_qspi_uninit+0x6a>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   2152a:	4b0c      	ldr	r3, [pc, #48]	; (2155c <nrfx_qspi_uninit+0x70>)
   2152c:	2200      	movs	r2, #0
   2152e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
   21532:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   21534:	4c0b      	ldr	r4, [pc, #44]	; (21564 <nrfx_qspi_uninit+0x78>)
   21536:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   2153a:	4621      	mov	r1, r4
   2153c:	480a      	ldr	r0, [pc, #40]	; (21568 <nrfx_qspi_uninit+0x7c>)
   2153e:	f007 fb66 	bl	28c0e <assert_print>
   21542:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   21546:	4620      	mov	r0, r4
   21548:	f007 fb5a 	bl	28c00 <assert_post_action>
                                                              bool                  finalize)
{
    uint32_t mask = (((uint32_t)length << QSPI_CINSTRCONF_LENGTH_Pos) | (QSPI_CINSTRCONF_LFEN_Msk));
    mask |= (finalize ? QSPI_CINSTRCONF_LFSTOP_Msk : 0);

    p_reg->CINSTRCONF = mask;
   2154c:	4b04      	ldr	r3, [pc, #16]	; (21560 <nrfx_qspi_uninit+0x74>)
   2154e:	4a07      	ldr	r2, [pc, #28]	; (2156c <nrfx_qspi_uninit+0x80>)
   21550:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
}
   21554:	e7da      	b.n	2150c <nrfx_qspi_uninit+0x20>
        qspi_pins_deconfigure();
   21556:	f7ff fe0b 	bl	21170 <qspi_pins_deconfigure>
   2155a:	e7e6      	b.n	2152a <nrfx_qspi_uninit+0x3e>
   2155c:	200035d4 	.word	0x200035d4
   21560:	40029000 	.word	0x40029000
   21564:	00033a60 	.word	0x00033a60
   21568:	00030128 	.word	0x00030128
   2156c:	00030100 	.word	0x00030100

00021570 <nrfx_qspi_erase>:
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   21570:	4b1e      	ldr	r3, [pc, #120]	; (215ec <nrfx_qspi_erase+0x7c>)
   21572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   21576:	b1eb      	cbz	r3, 215b4 <nrfx_qspi_erase+0x44>
    if (!nrfx_is_word_aligned((void const *)start_address))
   21578:	f011 0f03 	tst.w	r1, #3
   2157c:	d132      	bne.n	215e4 <nrfx_qspi_erase+0x74>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   2157e:	4a1b      	ldr	r2, [pc, #108]	; (215ec <nrfx_qspi_erase+0x7c>)
   21580:	6812      	ldr	r2, [r2, #0]
   21582:	b10a      	cbz	r2, 21588 <nrfx_qspi_erase+0x18>
   21584:	2b01      	cmp	r3, #1
   21586:	d12f      	bne.n	215e8 <nrfx_qspi_erase+0x78>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   21588:	4a18      	ldr	r2, [pc, #96]	; (215ec <nrfx_qspi_erase+0x7c>)
   2158a:	2304      	movs	r3, #4
   2158c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   21590:	4b17      	ldr	r3, [pc, #92]	; (215f0 <nrfx_qspi_erase+0x80>)
   21592:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    p_reg->ERASE.LEN = len;
   21596:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2159a:	2100      	movs	r1, #0
   2159c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   215a0:	2101      	movs	r1, #1
   215a2:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   215a4:	6813      	ldr	r3, [r2, #0]
   215a6:	b193      	cbz	r3, 215ce <nrfx_qspi_erase+0x5e>
    p_reg->INTENSET = mask;
   215a8:	4b11      	ldr	r3, [pc, #68]	; (215f0 <nrfx_qspi_erase+0x80>)
   215aa:	2201      	movs	r2, #1
   215ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return NRFX_SUCCESS;
   215b0:	4810      	ldr	r0, [pc, #64]	; (215f4 <nrfx_qspi_erase+0x84>)
}
   215b2:	4770      	bx	lr
{
   215b4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   215b6:	4c10      	ldr	r4, [pc, #64]	; (215f8 <nrfx_qspi_erase+0x88>)
   215b8:	f44f 720a 	mov.w	r2, #552	; 0x228
   215bc:	4621      	mov	r1, r4
   215be:	480f      	ldr	r0, [pc, #60]	; (215fc <nrfx_qspi_erase+0x8c>)
   215c0:	f007 fb25 	bl	28c0e <assert_print>
   215c4:	f44f 710a 	mov.w	r1, #552	; 0x228
   215c8:	4620      	mov	r0, r4
   215ca:	f007 fb19 	bl	28c00 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   215ce:	4b08      	ldr	r3, [pc, #32]	; (215f0 <nrfx_qspi_erase+0x80>)
   215d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   215d4:	2b00      	cmp	r3, #0
   215d6:	d0fa      	beq.n	215ce <nrfx_qspi_erase+0x5e>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   215d8:	4b04      	ldr	r3, [pc, #16]	; (215ec <nrfx_qspi_erase+0x7c>)
   215da:	2201      	movs	r2, #1
   215dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return NRFX_SUCCESS;
   215e0:	4804      	ldr	r0, [pc, #16]	; (215f4 <nrfx_qspi_erase+0x84>)
   215e2:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   215e4:	4806      	ldr	r0, [pc, #24]	; (21600 <nrfx_qspi_erase+0x90>)
   215e6:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
   215e8:	4806      	ldr	r0, [pc, #24]	; (21604 <nrfx_qspi_erase+0x94>)
}
   215ea:	4770      	bx	lr
   215ec:	200035d4 	.word	0x200035d4
   215f0:	40029000 	.word	0x40029000
   215f4:	0bad0000 	.word	0x0bad0000
   215f8:	00033a60 	.word	0x00033a60
   215fc:	00030128 	.word	0x00030128
   21600:	0bad000a 	.word	0x0bad000a
   21604:	0bad000b 	.word	0x0bad000b

00021608 <nrfx_qspi_irq_handler>:
   21608:	4b0f      	ldr	r3, [pc, #60]	; (21648 <nrfx_qspi_irq_handler+0x40>)
   2160a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

void nrfx_qspi_irq_handler(void)
{
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   2160e:	b903      	cbnz	r3, 21612 <nrfx_qspi_irq_handler+0xa>
   21610:	4770      	bx	lr
{
   21612:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21614:	4b0c      	ldr	r3, [pc, #48]	; (21648 <nrfx_qspi_irq_handler+0x40>)
   21616:	2200      	movs	r2, #0
   21618:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
   2161c:	4c0b      	ldr	r4, [pc, #44]	; (2164c <nrfx_qspi_irq_handler+0x44>)
   2161e:	4620      	mov	r0, r4
   21620:	f7ff fce6 	bl	20ff0 <qspi_extended_event_process>
        if (!m_cb.p_buffer_primary)
   21624:	f854 3c18 	ldr.w	r3, [r4, #-24]
   21628:	b143      	cbz	r3, 2163c <nrfx_qspi_irq_handler+0x34>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   2162a:	4c09      	ldr	r4, [pc, #36]	; (21650 <nrfx_qspi_irq_handler+0x48>)
   2162c:	6823      	ldr	r3, [r4, #0]
   2162e:	6861      	ldr	r1, [r4, #4]
   21630:	2000      	movs	r0, #0
   21632:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   21634:	2300      	movs	r3, #0
   21636:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   2163a:	bd10      	pop	{r4, pc}
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   2163c:	f1a4 0320 	sub.w	r3, r4, #32
   21640:	2201      	movs	r2, #1
   21642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   21646:	e7f0      	b.n	2162a <nrfx_qspi_irq_handler+0x22>
   21648:	40029000 	.word	0x40029000
   2164c:	200035f4 	.word	0x200035f4
   21650:	200035d4 	.word	0x200035d4

00021654 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   21654:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   21656:	4c14      	ldr	r4, [pc, #80]	; (216a8 <_DoInit+0x54>)
   21658:	2303      	movs	r3, #3
   2165a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   2165c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   2165e:	4a13      	ldr	r2, [pc, #76]	; (216ac <_DoInit+0x58>)
   21660:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   21662:	4b13      	ldr	r3, [pc, #76]	; (216b0 <_DoInit+0x5c>)
   21664:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   21666:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2166a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   2166c:	2300      	movs	r3, #0
   2166e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   21670:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   21672:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   21674:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   21676:	4a0f      	ldr	r2, [pc, #60]	; (216b4 <_DoInit+0x60>)
   21678:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   2167a:	2210      	movs	r2, #16
   2167c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   2167e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   21680:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   21682:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   21684:	490c      	ldr	r1, [pc, #48]	; (216b8 <_DoInit+0x64>)
   21686:	1de0      	adds	r0, r4, #7
   21688:	f008 fb06 	bl	29c98 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   2168c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   21690:	490a      	ldr	r1, [pc, #40]	; (216bc <_DoInit+0x68>)
   21692:	4620      	mov	r0, r4
   21694:	f008 fb00 	bl	29c98 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   21698:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   2169c:	2320      	movs	r3, #32
   2169e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   216a0:	f3bf 8f5f 	dmb	sy
}
   216a4:	bd10      	pop	{r4, pc}
   216a6:	bf00      	nop
   216a8:	20003a18 	.word	0x20003a18
   216ac:	00033a9c 	.word	0x00033a9c
   216b0:	20003618 	.word	0x20003618
   216b4:	20003608 	.word	0x20003608
   216b8:	00033aa8 	.word	0x00033aa8
   216bc:	00033aac 	.word	0x00033aac

000216c0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   216c0:	4b03      	ldr	r3, [pc, #12]	; (216d0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   216c2:	e000      	b.n	216c6 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   216c4:	3318      	adds	r3, #24
	while (dev < __device_end) {
   216c6:	4a03      	ldr	r2, [pc, #12]	; (216d4 <z_device_state_init+0x14>)
   216c8:	4293      	cmp	r3, r2
   216ca:	d3fb      	bcc.n	216c4 <z_device_state_init+0x4>
	}
}
   216cc:	4770      	bx	lr
   216ce:	bf00      	nop
   216d0:	0002f6ec 	.word	0x0002f6ec
   216d4:	0002f7dc 	.word	0x0002f7dc

000216d8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   216d8:	4b01      	ldr	r3, [pc, #4]	; (216e0 <z_impl_z_errno+0x8>)
   216da:	6898      	ldr	r0, [r3, #8]
}
   216dc:	3098      	adds	r0, #152	; 0x98
   216de:	4770      	bx	lr
   216e0:	20003ac0 	.word	0x20003ac0

000216e4 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   216e4:	2804      	cmp	r0, #4
   216e6:	d80c      	bhi.n	21702 <reason_to_str+0x1e>
   216e8:	e8df f000 	tbb	[pc, r0]
   216ec:	07050d03 	.word	0x07050d03
   216f0:	09          	.byte	0x09
   216f1:	00          	.byte	0x00
   216f2:	4806      	ldr	r0, [pc, #24]	; (2170c <reason_to_str+0x28>)
   216f4:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   216f6:	4806      	ldr	r0, [pc, #24]	; (21710 <reason_to_str+0x2c>)
   216f8:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   216fa:	4806      	ldr	r0, [pc, #24]	; (21714 <reason_to_str+0x30>)
   216fc:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   216fe:	4806      	ldr	r0, [pc, #24]	; (21718 <reason_to_str+0x34>)
   21700:	4770      	bx	lr
	default:
		return "Unknown error";
   21702:	4806      	ldr	r0, [pc, #24]	; (2171c <reason_to_str+0x38>)
   21704:	4770      	bx	lr
		return "Unhandled interrupt";
   21706:	4806      	ldr	r0, [pc, #24]	; (21720 <reason_to_str+0x3c>)
	}
}
   21708:	4770      	bx	lr
   2170a:	bf00      	nop
   2170c:	00033ab8 	.word	0x00033ab8
   21710:	00033adc 	.word	0x00033adc
   21714:	00033aec 	.word	0x00033aec
   21718:	00033af8 	.word	0x00033af8
   2171c:	00033b08 	.word	0x00033b08
   21720:	00033ac8 	.word	0x00033ac8

00021724 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   21724:	b130      	cbz	r0, 21734 <thread_name_get+0x10>
{
   21726:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   21728:	f00d fcc5 	bl	2f0b6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2172c:	b120      	cbz	r0, 21738 <thread_name_get+0x14>
   2172e:	7803      	ldrb	r3, [r0, #0]
   21730:	b123      	cbz	r3, 2173c <thread_name_get+0x18>
}
   21732:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   21734:	4802      	ldr	r0, [pc, #8]	; (21740 <thread_name_get+0x1c>)
}
   21736:	4770      	bx	lr
		thread_name = "unknown";
   21738:	4801      	ldr	r0, [pc, #4]	; (21740 <thread_name_get+0x1c>)
   2173a:	e7fa      	b.n	21732 <thread_name_get+0xe>
   2173c:	4800      	ldr	r0, [pc, #0]	; (21740 <thread_name_get+0x1c>)
	return thread_name;
   2173e:	e7f8      	b.n	21732 <thread_name_get+0xe>
   21740:	00033b18 	.word	0x00033b18

00021744 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21744:	b5f0      	push	{r4, r5, r6, r7, lr}
   21746:	b083      	sub	sp, #12
   21748:	4604      	mov	r4, r0
   2174a:	460e      	mov	r6, r1
	__asm__ volatile(
   2174c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21750:	f3ef 8711 	mrs	r7, BASEPRI
   21754:	f383 8812 	msr	BASEPRI_MAX, r3
   21758:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2175c:	f002 fdb4 	bl	242c8 <z_impl_z_current_get>
   21760:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   21762:	4620      	mov	r0, r4
   21764:	f7ff ffbe 	bl	216e4 <reason_to_str>
   21768:	4603      	mov	r3, r0
   2176a:	2200      	movs	r2, #0
   2176c:	9200      	str	r2, [sp, #0]
   2176e:	4622      	mov	r2, r4
   21770:	2145      	movs	r1, #69	; 0x45
   21772:	4817      	ldr	r0, [pc, #92]	; (217d0 <z_fatal_error+0x8c>)
   21774:	f007 fa6b 	bl	28c4e <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   21778:	b11e      	cbz	r6, 21782 <z_fatal_error+0x3e>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2177a:	69f3      	ldr	r3, [r6, #28]
   2177c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   21780:	b9bb      	cbnz	r3, 217b2 <z_fatal_error+0x6e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   21782:	4628      	mov	r0, r5
   21784:	f7ff ffce 	bl	21724 <thread_name_get>
   21788:	4603      	mov	r3, r0
   2178a:	462a      	mov	r2, r5
   2178c:	2145      	movs	r1, #69	; 0x45
   2178e:	4811      	ldr	r0, [pc, #68]	; (217d4 <z_fatal_error+0x90>)
   21790:	f007 fa5d 	bl	28c4e <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   21794:	4631      	mov	r1, r6
   21796:	4620      	mov	r0, r4
   21798:	f7fd fece 	bl	1f538 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2179c:	2c04      	cmp	r4, #4
   2179e:	d00d      	beq.n	217bc <z_fatal_error+0x78>
	__asm__ volatile(
   217a0:	f387 8811 	msr	BASEPRI, r7
   217a4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   217a8:	4628      	mov	r0, r5
   217aa:	f7f2 f8f5 	bl	13998 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   217ae:	b003      	add	sp, #12
   217b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
   217b2:	2145      	movs	r1, #69	; 0x45
   217b4:	4808      	ldr	r0, [pc, #32]	; (217d8 <z_fatal_error+0x94>)
   217b6:	f007 fa4a 	bl	28c4e <z_log_minimal_printk>
   217ba:	e7e2      	b.n	21782 <z_fatal_error+0x3e>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   217bc:	4c07      	ldr	r4, [pc, #28]	; (217dc <z_fatal_error+0x98>)
   217be:	2293      	movs	r2, #147	; 0x93
   217c0:	4621      	mov	r1, r4
   217c2:	4807      	ldr	r0, [pc, #28]	; (217e0 <z_fatal_error+0x9c>)
   217c4:	f007 fa23 	bl	28c0e <assert_print>
   217c8:	2193      	movs	r1, #147	; 0x93
   217ca:	4620      	mov	r0, r4
   217cc:	f007 fa18 	bl	28c00 <assert_post_action>
   217d0:	00033b20 	.word	0x00033b20
   217d4:	00033b78 	.word	0x00033b78
   217d8:	00033b50 	.word	0x00033b50
   217dc:	00033b98 	.word	0x00033b98
   217e0:	00030128 	.word	0x00030128

000217e4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   217e4:	b570      	push	{r4, r5, r6, lr}
   217e6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   217e8:	4b11      	ldr	r3, [pc, #68]	; (21830 <z_sys_init_run_level+0x4c>)
   217ea:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   217ee:	e009      	b.n	21804 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   217f0:	4240      	negs	r0, r0
   217f2:	e017      	b.n	21824 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   217f4:	68eb      	ldr	r3, [r5, #12]
   217f6:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   217f8:	68ea      	ldr	r2, [r5, #12]
   217fa:	7853      	ldrb	r3, [r2, #1]
   217fc:	f043 0301 	orr.w	r3, r3, #1
   21800:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21802:	3408      	adds	r4, #8
   21804:	1c73      	adds	r3, r6, #1
   21806:	4a0a      	ldr	r2, [pc, #40]	; (21830 <z_sys_init_run_level+0x4c>)
   21808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2180c:	42a3      	cmp	r3, r4
   2180e:	d90d      	bls.n	2182c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   21810:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   21812:	6823      	ldr	r3, [r4, #0]
   21814:	4628      	mov	r0, r5
   21816:	4798      	blx	r3
		if (dev != NULL) {
   21818:	2d00      	cmp	r5, #0
   2181a:	d0f2      	beq.n	21802 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   2181c:	2800      	cmp	r0, #0
   2181e:	d0eb      	beq.n	217f8 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   21820:	2800      	cmp	r0, #0
   21822:	dbe5      	blt.n	217f0 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   21824:	28ff      	cmp	r0, #255	; 0xff
   21826:	dde5      	ble.n	217f4 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   21828:	20ff      	movs	r0, #255	; 0xff
   2182a:	e7e3      	b.n	217f4 <z_sys_init_run_level+0x10>
		}
	}
}
   2182c:	bd70      	pop	{r4, r5, r6, pc}
   2182e:	bf00      	nop
   21830:	00033bcc 	.word	0x00033bcc

00021834 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   21834:	b510      	push	{r4, lr}
   21836:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   21838:	23b8      	movs	r3, #184	; 0xb8
   2183a:	4c10      	ldr	r4, [pc, #64]	; (2187c <init_idle_thread+0x48>)
   2183c:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   21840:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21844:	4b0e      	ldr	r3, [pc, #56]	; (21880 <init_idle_thread+0x4c>)
   21846:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
   2184a:	4a0e      	ldr	r2, [pc, #56]	; (21884 <init_idle_thread+0x50>)
   2184c:	9205      	str	r2, [sp, #20]
   2184e:	2201      	movs	r2, #1
   21850:	9204      	str	r2, [sp, #16]
   21852:	220f      	movs	r2, #15
   21854:	9203      	str	r2, [sp, #12]
   21856:	2200      	movs	r2, #0
   21858:	9202      	str	r2, [sp, #8]
   2185a:	9201      	str	r2, [sp, #4]
   2185c:	9300      	str	r3, [sp, #0]
   2185e:	4b0a      	ldr	r3, [pc, #40]	; (21888 <init_idle_thread+0x54>)
   21860:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21864:	4909      	ldr	r1, [pc, #36]	; (2188c <init_idle_thread+0x58>)
   21866:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   2186a:	4620      	mov	r0, r4
   2186c:	f000 fb48 	bl	21f00 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21870:	7b63      	ldrb	r3, [r4, #13]
   21872:	f023 0304 	bic.w	r3, r3, #4
   21876:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   21878:	b006      	add	sp, #24
   2187a:	bd10      	pop	{r4, pc}
   2187c:	20002088 	.word	0x20002088
   21880:	20003ac0 	.word	0x20003ac0
   21884:	00033bbc 	.word	0x00033bbc
   21888:	00022191 	.word	0x00022191
   2188c:	20006b40 	.word	0x20006b40

00021890 <bg_thread_main>:
{
   21890:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   21892:	4b0a      	ldr	r3, [pc, #40]	; (218bc <bg_thread_main+0x2c>)
   21894:	2201      	movs	r2, #1
   21896:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   21898:	2003      	movs	r0, #3
   2189a:	f7ff ffa3 	bl	217e4 <z_sys_init_run_level>
	boot_banner();
   2189e:	f003 fc9d 	bl	251dc <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   218a2:	2004      	movs	r0, #4
   218a4:	f7ff ff9e 	bl	217e4 <z_sys_init_run_level>
	z_init_static_threads();
   218a8:	f000 fc06 	bl	220b8 <z_init_static_threads>
	main();
   218ac:	f7ef f8cc 	bl	10a48 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   218b0:	4a03      	ldr	r2, [pc, #12]	; (218c0 <bg_thread_main+0x30>)
   218b2:	7b13      	ldrb	r3, [r2, #12]
   218b4:	f023 0301 	bic.w	r3, r3, #1
   218b8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   218ba:	bd08      	pop	{r3, pc}
   218bc:	200045fc 	.word	0x200045fc
   218c0:	20002140 	.word	0x20002140

000218c4 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   218c4:	b508      	push	{r3, lr}
   218c6:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   218c8:	4a01      	ldr	r2, [pc, #4]	; (218d0 <switch_to_main_thread+0xc>)
   218ca:	4802      	ldr	r0, [pc, #8]	; (218d4 <switch_to_main_thread+0x10>)
   218cc:	f7f1 fcee 	bl	132ac <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   218d0:	00021891 	.word	0x00021891
   218d4:	20002140 	.word	0x20002140

000218d8 <z_bss_zero>:
{
   218d8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   218da:	4803      	ldr	r0, [pc, #12]	; (218e8 <z_bss_zero+0x10>)
   218dc:	4a03      	ldr	r2, [pc, #12]	; (218ec <z_bss_zero+0x14>)
   218de:	1a12      	subs	r2, r2, r0
   218e0:	2100      	movs	r1, #0
   218e2:	f00d fb99 	bl	2f018 <z_early_memset>
}
   218e6:	bd08      	pop	{r3, pc}
   218e8:	20000bd8 	.word	0x20000bd8
   218ec:	20004600 	.word	0x20004600

000218f0 <z_init_cpu>:
{
   218f0:	b510      	push	{r4, lr}
   218f2:	4604      	mov	r4, r0
	init_idle_thread(id);
   218f4:	f7ff ff9e 	bl	21834 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   218f8:	23b8      	movs	r3, #184	; 0xb8
   218fa:	490b      	ldr	r1, [pc, #44]	; (21928 <z_init_cpu+0x38>)
   218fc:	fb03 1104 	mla	r1, r3, r4, r1
   21900:	4a0a      	ldr	r2, [pc, #40]	; (2192c <z_init_cpu+0x3c>)
   21902:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   21906:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2190a:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   2190c:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2190e:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   21912:	4b07      	ldr	r3, [pc, #28]	; (21930 <z_init_cpu+0x40>)
   21914:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   21918:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   2191c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   21920:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   21924:	6053      	str	r3, [r2, #4]
}
   21926:	bd10      	pop	{r4, pc}
   21928:	20002088 	.word	0x20002088
   2192c:	20003ac0 	.word	0x20003ac0
   21930:	20006300 	.word	0x20006300

00021934 <prepare_multithreading>:
{
   21934:	b570      	push	{r4, r5, r6, lr}
   21936:	b086      	sub	sp, #24
	z_sched_init();
   21938:	f002 fb5a 	bl	23ff0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   2193c:	4d10      	ldr	r5, [pc, #64]	; (21980 <prepare_multithreading+0x4c>)
   2193e:	4b11      	ldr	r3, [pc, #68]	; (21984 <prepare_multithreading+0x50>)
   21940:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21942:	4b11      	ldr	r3, [pc, #68]	; (21988 <prepare_multithreading+0x54>)
   21944:	9305      	str	r3, [sp, #20]
   21946:	2301      	movs	r3, #1
   21948:	9304      	str	r3, [sp, #16]
   2194a:	2400      	movs	r4, #0
   2194c:	9403      	str	r4, [sp, #12]
   2194e:	9402      	str	r4, [sp, #8]
   21950:	9401      	str	r4, [sp, #4]
   21952:	9400      	str	r4, [sp, #0]
   21954:	4b0d      	ldr	r3, [pc, #52]	; (2198c <prepare_multithreading+0x58>)
   21956:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2195a:	490d      	ldr	r1, [pc, #52]	; (21990 <prepare_multithreading+0x5c>)
   2195c:	4628      	mov	r0, r5
   2195e:	f000 facf 	bl	21f00 <z_setup_new_thread>
   21962:	4606      	mov	r6, r0
   21964:	7b6b      	ldrb	r3, [r5, #13]
   21966:	f023 0304 	bic.w	r3, r3, #4
   2196a:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   2196c:	4628      	mov	r0, r5
   2196e:	f001 ffd7 	bl	23920 <z_ready_thread>
	z_init_cpu(0);
   21972:	4620      	mov	r0, r4
   21974:	f7ff ffbc 	bl	218f0 <z_init_cpu>
}
   21978:	4630      	mov	r0, r6
   2197a:	b006      	add	sp, #24
   2197c:	bd70      	pop	{r4, r5, r6, pc}
   2197e:	bf00      	nop
   21980:	20002140 	.word	0x20002140
   21984:	20003ac0 	.word	0x20003ac0
   21988:	00033bc4 	.word	0x00033bc4
   2198c:	00021891 	.word	0x00021891
   21990:	20006cc0 	.word	0x20006cc0

00021994 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   21994:	b500      	push	{lr}
   21996:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   21998:	2000      	movs	r0, #0
   2199a:	f7ff ff23 	bl	217e4 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2199e:	4b1e      	ldr	r3, [pc, #120]	; (21a18 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   219a0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   219a4:	4c1d      	ldr	r4, [pc, #116]	; (21a1c <z_cstart+0x88>)
   219a6:	6963      	ldr	r3, [r4, #20]
   219a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   219ac:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   219ae:	23e0      	movs	r3, #224	; 0xe0
   219b0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   219b4:	2320      	movs	r3, #32
   219b6:	77e3      	strb	r3, [r4, #31]
   219b8:	2500      	movs	r5, #0
   219ba:	7625      	strb	r5, [r4, #24]
   219bc:	7665      	strb	r5, [r4, #25]
   219be:	76a5      	strb	r5, [r4, #26]
   219c0:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   219c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   219c6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   219ca:	6263      	str	r3, [r4, #36]	; 0x24
   219cc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   219d0:	f7f1 ff48 	bl	13864 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   219d4:	f7f1 faf8 	bl	12fc8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   219d8:	f04f 33ff 	mov.w	r3, #4294967295
   219dc:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   219de:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   219e0:	f7f2 f8d4 	bl	13b8c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   219e4:	f7f1 fff2 	bl	139cc <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   219e8:	2401      	movs	r4, #1
   219ea:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   219ee:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   219f2:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   219f4:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   219f6:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   219f8:	4b09      	ldr	r3, [pc, #36]	; (21a20 <z_cstart+0x8c>)
   219fa:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   219fe:	f7ff fe5f 	bl	216c0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   21a02:	4620      	mov	r0, r4
   21a04:	f7ff feee 	bl	217e4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   21a08:	2002      	movs	r0, #2
   21a0a:	f7ff feeb 	bl	217e4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   21a0e:	f7ff ff91 	bl	21934 <prepare_multithreading>
   21a12:	f7ff ff57 	bl	218c4 <switch_to_main_thread>
   21a16:	bf00      	nop
   21a18:	20006b40 	.word	0x20006b40
   21a1c:	e000ed00 	.word	0xe000ed00
   21a20:	20003ac0 	.word	0x20003ac0

00021a24 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   21a24:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21a26:	4c0d      	ldr	r4, [pc, #52]	; (21a5c <statics_init+0x38>)
   21a28:	e005      	b.n	21a36 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   21a2a:	68a2      	ldr	r2, [r4, #8]
   21a2c:	6861      	ldr	r1, [r4, #4]
   21a2e:	4620      	mov	r0, r4
   21a30:	f00d fafa 	bl	2f028 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21a34:	3418      	adds	r4, #24
   21a36:	4b0a      	ldr	r3, [pc, #40]	; (21a60 <statics_init+0x3c>)
   21a38:	429c      	cmp	r4, r3
   21a3a:	d804      	bhi.n	21a46 <statics_init+0x22>
   21a3c:	4b08      	ldr	r3, [pc, #32]	; (21a60 <statics_init+0x3c>)
   21a3e:	429c      	cmp	r4, r3
   21a40:	d3f3      	bcc.n	21a2a <statics_init+0x6>
		}
	}
	return 0;
}
   21a42:	2000      	movs	r0, #0
   21a44:	bd10      	pop	{r4, pc}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21a46:	4c07      	ldr	r4, [pc, #28]	; (21a64 <statics_init+0x40>)
   21a48:	2218      	movs	r2, #24
   21a4a:	4621      	mov	r1, r4
   21a4c:	4806      	ldr	r0, [pc, #24]	; (21a68 <statics_init+0x44>)
   21a4e:	f007 f8de 	bl	28c0e <assert_print>
   21a52:	2118      	movs	r1, #24
   21a54:	4620      	mov	r0, r4
   21a56:	f007 f8d3 	bl	28c00 <assert_post_action>
   21a5a:	bf00      	nop
   21a5c:	200009d4 	.word	0x200009d4
   21a60:	200009d4 	.word	0x200009d4
   21a64:	00033be8 	.word	0x00033be8
   21a68:	00030128 	.word	0x00030128

00021a6c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   21a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a70:	b085      	sub	sp, #20
   21a72:	4680      	mov	r8, r0
   21a74:	9102      	str	r1, [sp, #8]
   21a76:	4693      	mov	fp, r2
   21a78:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   21a7c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21a7e:	4648      	mov	r0, r9
   21a80:	4621      	mov	r1, r4
   21a82:	f00d fcfc 	bl	2f47e <sys_clock_timeout_end_calc>
   21a86:	4607      	mov	r7, r0
   21a88:	468a      	mov	sl, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   21a8a:	f1b4 3fff 	cmp.w	r4, #4294967295
   21a8e:	bf08      	it	eq
   21a90:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   21a94:	d01b      	beq.n	21ace <k_heap_aligned_alloc+0x62>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21a96:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   21a9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a9e:	f3ef 8511 	mrs	r5, BASEPRI
   21aa2:	f383 8812 	msr	BASEPRI_MAX, r3
   21aa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21aaa:	4630      	mov	r0, r6
   21aac:	f000 f9ba 	bl	21e24 <z_spin_lock_valid>
   21ab0:	9003      	str	r0, [sp, #12]
   21ab2:	b188      	cbz	r0, 21ad8 <k_heap_aligned_alloc+0x6c>
	z_spin_lock_set_owner(l);
   21ab4:	4630      	mov	r0, r6
   21ab6:	f000 f9d5 	bl	21e64 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21aba:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   21abe:	b113      	cbz	r3, 21ac6 <k_heap_aligned_alloc+0x5a>
   21ac0:	ea54 0409 	orrs.w	r4, r4, r9
   21ac4:	d112      	bne.n	21aec <k_heap_aligned_alloc+0x80>

	bool blocked_alloc = false;
   21ac6:	f04f 0900 	mov.w	r9, #0
	void *ret = NULL;
   21aca:	464c      	mov	r4, r9

	while (ret == NULL) {
   21acc:	e02f      	b.n	21b2e <k_heap_aligned_alloc+0xc2>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   21ace:	f04f 37ff 	mov.w	r7, #4294967295
   21ad2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   21ad6:	e7de      	b.n	21a96 <k_heap_aligned_alloc+0x2a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ad8:	4c30      	ldr	r4, [pc, #192]	; (21b9c <k_heap_aligned_alloc+0x130>)
   21ada:	2294      	movs	r2, #148	; 0x94
   21adc:	4621      	mov	r1, r4
   21ade:	4830      	ldr	r0, [pc, #192]	; (21ba0 <k_heap_aligned_alloc+0x134>)
   21ae0:	f007 f895 	bl	28c0e <assert_print>
   21ae4:	2194      	movs	r1, #148	; 0x94
   21ae6:	4620      	mov	r0, r4
   21ae8:	f007 f88a 	bl	28c00 <assert_post_action>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   21aec:	4c2d      	ldr	r4, [pc, #180]	; (21ba4 <k_heap_aligned_alloc+0x138>)
   21aee:	224c      	movs	r2, #76	; 0x4c
   21af0:	4621      	mov	r1, r4
   21af2:	482b      	ldr	r0, [pc, #172]	; (21ba0 <k_heap_aligned_alloc+0x134>)
   21af4:	f007 f88b 	bl	28c0e <assert_print>
   21af8:	214c      	movs	r1, #76	; 0x4c
   21afa:	4620      	mov	r0, r4
   21afc:	f007 f880 	bl	28c00 <assert_post_action>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21b00:	9000      	str	r0, [sp, #0]
   21b02:	9101      	str	r1, [sp, #4]
   21b04:	f108 020c 	add.w	r2, r8, #12
   21b08:	4629      	mov	r1, r5
   21b0a:	4630      	mov	r0, r6
   21b0c:	f002 f83c 	bl	23b88 <z_pend_curr>
   21b10:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b14:	f3ef 8511 	mrs	r5, BASEPRI
   21b18:	f383 8812 	msr	BASEPRI_MAX, r3
   21b1c:	f3bf 8f6f 	isb	sy
   21b20:	4630      	mov	r0, r6
   21b22:	f000 f97f 	bl	21e24 <z_spin_lock_valid>
   21b26:	b1c8      	cbz	r0, 21b5c <k_heap_aligned_alloc+0xf0>
	z_spin_lock_set_owner(l);
   21b28:	4630      	mov	r0, r6
   21b2a:	f000 f99b 	bl	21e64 <z_spin_lock_set_owner>
	while (ret == NULL) {
   21b2e:	b9fc      	cbnz	r4, 21b70 <k_heap_aligned_alloc+0x104>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   21b30:	465a      	mov	r2, fp
   21b32:	9902      	ldr	r1, [sp, #8]
   21b34:	4640      	mov	r0, r8
   21b36:	f7ef f967 	bl	10e08 <sys_heap_aligned_alloc>
   21b3a:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   21b3c:	f002 ff6a 	bl	24a14 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   21b40:	b9b4      	cbnz	r4, 21b70 <k_heap_aligned_alloc+0x104>
		    (ret != NULL) || ((end - now) <= 0)) {
   21b42:	1a38      	subs	r0, r7, r0
   21b44:	eb6a 0101 	sbc.w	r1, sl, r1
   21b48:	2801      	cmp	r0, #1
   21b4a:	f171 0300 	sbcs.w	r3, r1, #0
   21b4e:	db0f      	blt.n	21b70 <k_heap_aligned_alloc+0x104>
		if (!blocked_alloc) {
   21b50:	f1b9 0f00 	cmp.w	r9, #0
   21b54:	d1d4      	bne.n	21b00 <k_heap_aligned_alloc+0x94>
			blocked_alloc = true;
   21b56:	f8dd 900c 	ldr.w	r9, [sp, #12]
   21b5a:	e7d1      	b.n	21b00 <k_heap_aligned_alloc+0x94>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b5c:	4c0f      	ldr	r4, [pc, #60]	; (21b9c <k_heap_aligned_alloc+0x130>)
   21b5e:	2294      	movs	r2, #148	; 0x94
   21b60:	4621      	mov	r1, r4
   21b62:	480f      	ldr	r0, [pc, #60]	; (21ba0 <k_heap_aligned_alloc+0x134>)
   21b64:	f007 f853 	bl	28c0e <assert_print>
   21b68:	2194      	movs	r1, #148	; 0x94
   21b6a:	4620      	mov	r0, r4
   21b6c:	f007 f848 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b70:	4630      	mov	r0, r6
   21b72:	f000 f967 	bl	21e44 <z_spin_unlock_valid>
   21b76:	b138      	cbz	r0, 21b88 <k_heap_aligned_alloc+0x11c>
	__asm__ volatile(
   21b78:	f385 8811 	msr	BASEPRI, r5
   21b7c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   21b80:	4620      	mov	r0, r4
   21b82:	b005      	add	sp, #20
   21b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b88:	4c04      	ldr	r4, [pc, #16]	; (21b9c <k_heap_aligned_alloc+0x130>)
   21b8a:	22c2      	movs	r2, #194	; 0xc2
   21b8c:	4621      	mov	r1, r4
   21b8e:	4804      	ldr	r0, [pc, #16]	; (21ba0 <k_heap_aligned_alloc+0x134>)
   21b90:	f007 f83d 	bl	28c0e <assert_print>
   21b94:	21c2      	movs	r1, #194	; 0xc2
   21b96:	4620      	mov	r0, r4
   21b98:	f007 f832 	bl	28c00 <assert_post_action>
   21b9c:	00030164 	.word	0x00030164
   21ba0:	00030128 	.word	0x00030128
   21ba4:	00033be8 	.word	0x00033be8

00021ba8 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   21ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21bac:	4604      	mov	r4, r0
   21bae:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21bb0:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   21bb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   21bb8:	f3ef 8711 	mrs	r7, BASEPRI
   21bbc:	f383 8812 	msr	BASEPRI_MAX, r3
   21bc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21bc4:	4630      	mov	r0, r6
   21bc6:	f000 f92d 	bl	21e24 <z_spin_lock_valid>
   21bca:	b188      	cbz	r0, 21bf0 <k_heap_free+0x48>
	z_spin_lock_set_owner(l);
   21bcc:	4630      	mov	r0, r6
   21bce:	f000 f949 	bl	21e64 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   21bd2:	4629      	mov	r1, r5
   21bd4:	4620      	mov	r0, r4
   21bd6:	f7ef f8df 	bl	10d98 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   21bda:	f104 000c 	add.w	r0, r4, #12
   21bde:	f00d fc19 	bl	2f414 <z_unpend_all>
   21be2:	b178      	cbz	r0, 21c04 <k_heap_free+0x5c>
		z_reschedule(&h->lock, key);
   21be4:	4639      	mov	r1, r7
   21be6:	4630      	mov	r0, r6
   21be8:	f001 fc6c 	bl	234c4 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   21bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21bf0:	4c0e      	ldr	r4, [pc, #56]	; (21c2c <k_heap_free+0x84>)
   21bf2:	2294      	movs	r2, #148	; 0x94
   21bf4:	4621      	mov	r1, r4
   21bf6:	480e      	ldr	r0, [pc, #56]	; (21c30 <k_heap_free+0x88>)
   21bf8:	f007 f809 	bl	28c0e <assert_print>
   21bfc:	2194      	movs	r1, #148	; 0x94
   21bfe:	4620      	mov	r0, r4
   21c00:	f006 fffe 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c04:	4630      	mov	r0, r6
   21c06:	f000 f91d 	bl	21e44 <z_spin_unlock_valid>
   21c0a:	b120      	cbz	r0, 21c16 <k_heap_free+0x6e>
	__asm__ volatile(
   21c0c:	f387 8811 	msr	BASEPRI, r7
   21c10:	f3bf 8f6f 	isb	sy
   21c14:	e7ea      	b.n	21bec <k_heap_free+0x44>
   21c16:	4c05      	ldr	r4, [pc, #20]	; (21c2c <k_heap_free+0x84>)
   21c18:	22c2      	movs	r2, #194	; 0xc2
   21c1a:	4621      	mov	r1, r4
   21c1c:	4804      	ldr	r0, [pc, #16]	; (21c30 <k_heap_free+0x88>)
   21c1e:	f006 fff6 	bl	28c0e <assert_print>
   21c22:	21c2      	movs	r1, #194	; 0xc2
   21c24:	4620      	mov	r0, r4
   21c26:	f006 ffeb 	bl	28c00 <assert_post_action>
   21c2a:	bf00      	nop
   21c2c:	00030164 	.word	0x00030164
   21c30:	00030128 	.word	0x00030128

00021c34 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   21c34:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21c36:	4c0d      	ldr	r4, [pc, #52]	; (21c6c <init_mem_slab_module+0x38>)
	int rc = 0;
   21c38:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21c3a:	4b0d      	ldr	r3, [pc, #52]	; (21c70 <init_mem_slab_module+0x3c>)
   21c3c:	429c      	cmp	r4, r3
   21c3e:	d809      	bhi.n	21c54 <init_mem_slab_module+0x20>
   21c40:	4b0b      	ldr	r3, [pc, #44]	; (21c70 <init_mem_slab_module+0x3c>)
   21c42:	429c      	cmp	r4, r3
   21c44:	d210      	bcs.n	21c68 <init_mem_slab_module+0x34>
		rc = create_free_list(slab);
   21c46:	4620      	mov	r0, r4
   21c48:	f00d f9f6 	bl	2f038 <create_free_list>
		if (rc < 0) {
   21c4c:	2800      	cmp	r0, #0
   21c4e:	db0b      	blt.n	21c68 <init_mem_slab_module+0x34>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21c50:	3420      	adds	r4, #32
   21c52:	e7f2      	b.n	21c3a <init_mem_slab_module+0x6>
   21c54:	4c07      	ldr	r4, [pc, #28]	; (21c74 <init_mem_slab_module+0x40>)
   21c56:	223d      	movs	r2, #61	; 0x3d
   21c58:	4621      	mov	r1, r4
   21c5a:	4807      	ldr	r0, [pc, #28]	; (21c78 <init_mem_slab_module+0x44>)
   21c5c:	f006 ffd7 	bl	28c0e <assert_print>
   21c60:	213d      	movs	r1, #61	; 0x3d
   21c62:	4620      	mov	r0, r4
   21c64:	f006 ffcc 	bl	28c00 <assert_post_action>
		z_object_init(slab);
	}

out:
	return rc;
}
   21c68:	bd10      	pop	{r4, pc}
   21c6a:	bf00      	nop
   21c6c:	20000974 	.word	0x20000974
   21c70:	200009d4 	.word	0x200009d4
   21c74:	00033c0c 	.word	0x00033c0c
   21c78:	00030128 	.word	0x00030128

00021c7c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   21c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21c80:	b082      	sub	sp, #8
   21c82:	4604      	mov	r4, r0
   21c84:	460e      	mov	r6, r1
   21c86:	4690      	mov	r8, r2
   21c88:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21c8a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   21c8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c92:	f3ef 8a11 	mrs	sl, BASEPRI
   21c96:	f383 8812 	msr	BASEPRI_MAX, r3
   21c9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c9e:	4628      	mov	r0, r5
   21ca0:	f000 f8c0 	bl	21e24 <z_spin_lock_valid>
   21ca4:	b1c0      	cbz	r0, 21cd8 <k_mem_slab_alloc+0x5c>
   21ca6:	46d1      	mov	r9, sl
	z_spin_lock_set_owner(l);
   21ca8:	4628      	mov	r0, r5
   21caa:	f000 f8db 	bl	21e64 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   21cae:	69a1      	ldr	r1, [r4, #24]
   21cb0:	b1e1      	cbz	r1, 21cec <k_mem_slab_alloc+0x70>
		/* take a free block */
		*mem = slab->free_list;
   21cb2:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   21cb4:	680b      	ldr	r3, [r1, #0]
   21cb6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   21cb8:	69e3      	ldr	r3, [r4, #28]
   21cba:	3301      	adds	r3, #1
   21cbc:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   21cbe:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21cc0:	4628      	mov	r0, r5
   21cc2:	f000 f8bf 	bl	21e44 <z_spin_unlock_valid>
   21cc6:	b348      	cbz	r0, 21d1c <k_mem_slab_alloc+0xa0>
	__asm__ volatile(
   21cc8:	f389 8811 	msr	BASEPRI, r9
   21ccc:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   21cd0:	4620      	mov	r0, r4
   21cd2:	b002      	add	sp, #8
   21cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21cd8:	4c15      	ldr	r4, [pc, #84]	; (21d30 <k_mem_slab_alloc+0xb4>)
   21cda:	2294      	movs	r2, #148	; 0x94
   21cdc:	4621      	mov	r1, r4
   21cde:	4815      	ldr	r0, [pc, #84]	; (21d34 <k_mem_slab_alloc+0xb8>)
   21ce0:	f006 ff95 	bl	28c0e <assert_print>
   21ce4:	2194      	movs	r1, #148	; 0x94
   21ce6:	4620      	mov	r0, r4
   21ce8:	f006 ff8a 	bl	28c00 <assert_post_action>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   21cec:	ea57 0308 	orrs.w	r3, r7, r8
   21cf0:	d104      	bne.n	21cfc <k_mem_slab_alloc+0x80>
		*mem = NULL;
   21cf2:	2300      	movs	r3, #0
   21cf4:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   21cf6:	f06f 040b 	mvn.w	r4, #11
   21cfa:	e7e1      	b.n	21cc0 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   21cfc:	f8cd 8000 	str.w	r8, [sp]
   21d00:	9701      	str	r7, [sp, #4]
   21d02:	4622      	mov	r2, r4
   21d04:	4651      	mov	r1, sl
   21d06:	4628      	mov	r0, r5
   21d08:	f001 ff3e 	bl	23b88 <z_pend_curr>
		if (result == 0) {
   21d0c:	4604      	mov	r4, r0
   21d0e:	2800      	cmp	r0, #0
   21d10:	d1de      	bne.n	21cd0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   21d12:	4b09      	ldr	r3, [pc, #36]	; (21d38 <k_mem_slab_alloc+0xbc>)
   21d14:	689b      	ldr	r3, [r3, #8]
   21d16:	695b      	ldr	r3, [r3, #20]
   21d18:	6033      	str	r3, [r6, #0]
		return result;
   21d1a:	e7d9      	b.n	21cd0 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d1c:	4c04      	ldr	r4, [pc, #16]	; (21d30 <k_mem_slab_alloc+0xb4>)
   21d1e:	22c2      	movs	r2, #194	; 0xc2
   21d20:	4621      	mov	r1, r4
   21d22:	4804      	ldr	r0, [pc, #16]	; (21d34 <k_mem_slab_alloc+0xb8>)
   21d24:	f006 ff73 	bl	28c0e <assert_print>
   21d28:	21c2      	movs	r1, #194	; 0xc2
   21d2a:	4620      	mov	r0, r4
   21d2c:	f006 ff68 	bl	28c00 <assert_post_action>
   21d30:	00030164 	.word	0x00030164
   21d34:	00030128 	.word	0x00030128
   21d38:	20003ac0 	.word	0x20003ac0

00021d3c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   21d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d40:	4604      	mov	r4, r0
   21d42:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21d44:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   21d48:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d4c:	f3ef 8611 	mrs	r6, BASEPRI
   21d50:	f383 8812 	msr	BASEPRI_MAX, r3
   21d54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d58:	4638      	mov	r0, r7
   21d5a:	f000 f863 	bl	21e24 <z_spin_lock_valid>
   21d5e:	b1b8      	cbz	r0, 21d90 <k_mem_slab_free+0x54>
   21d60:	46b0      	mov	r8, r6
	z_spin_lock_set_owner(l);
   21d62:	4638      	mov	r0, r7
   21d64:	f000 f87e 	bl	21e64 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   21d68:	69a3      	ldr	r3, [r4, #24]
   21d6a:	b1db      	cbz	r3, 21da4 <k_mem_slab_free+0x68>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   21d6c:	682b      	ldr	r3, [r5, #0]
   21d6e:	69a2      	ldr	r2, [r4, #24]
   21d70:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   21d72:	682b      	ldr	r3, [r5, #0]
   21d74:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   21d76:	69e3      	ldr	r3, [r4, #28]
   21d78:	3b01      	subs	r3, #1
   21d7a:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d7c:	4638      	mov	r0, r7
   21d7e:	f000 f861 	bl	21e44 <z_spin_unlock_valid>
   21d82:	b300      	cbz	r0, 21dc6 <k_mem_slab_free+0x8a>
	__asm__ volatile(
   21d84:	f388 8811 	msr	BASEPRI, r8
   21d88:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   21d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d90:	4c12      	ldr	r4, [pc, #72]	; (21ddc <k_mem_slab_free+0xa0>)
   21d92:	2294      	movs	r2, #148	; 0x94
   21d94:	4621      	mov	r1, r4
   21d96:	4812      	ldr	r0, [pc, #72]	; (21de0 <k_mem_slab_free+0xa4>)
   21d98:	f006 ff39 	bl	28c0e <assert_print>
   21d9c:	2194      	movs	r1, #148	; 0x94
   21d9e:	4620      	mov	r0, r4
   21da0:	f006 ff2e 	bl	28c00 <assert_post_action>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   21da4:	4620      	mov	r0, r4
   21da6:	f002 f8db 	bl	23f60 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   21daa:	2800      	cmp	r0, #0
   21dac:	d0de      	beq.n	21d6c <k_mem_slab_free+0x30>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   21dae:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   21db0:	2100      	movs	r1, #0
   21db2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   21db6:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   21db8:	f001 fdb2 	bl	23920 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   21dbc:	4631      	mov	r1, r6
   21dbe:	4638      	mov	r0, r7
   21dc0:	f001 fb80 	bl	234c4 <z_reschedule>
			return;
   21dc4:	e7e2      	b.n	21d8c <k_mem_slab_free+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dc6:	4c05      	ldr	r4, [pc, #20]	; (21ddc <k_mem_slab_free+0xa0>)
   21dc8:	22c2      	movs	r2, #194	; 0xc2
   21dca:	4621      	mov	r1, r4
   21dcc:	4804      	ldr	r0, [pc, #16]	; (21de0 <k_mem_slab_free+0xa4>)
   21dce:	f006 ff1e 	bl	28c0e <assert_print>
   21dd2:	21c2      	movs	r1, #194	; 0xc2
   21dd4:	4620      	mov	r0, r4
   21dd6:	f006 ff13 	bl	28c00 <assert_post_action>
   21dda:	bf00      	nop
   21ddc:	00030164 	.word	0x00030164
   21de0:	00030128 	.word	0x00030128

00021de4 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   21de4:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   21de6:	4604      	mov	r4, r0
   21de8:	b140      	cbz	r0, 21dfc <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   21dea:	221f      	movs	r2, #31
   21dec:	f104 0078 	add.w	r0, r4, #120	; 0x78
   21df0:	f007 ff5c 	bl	29cac <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   21df4:	2000      	movs	r0, #0
   21df6:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   21dfa:	bd10      	pop	{r4, pc}
		thread = _current;
   21dfc:	4b01      	ldr	r3, [pc, #4]	; (21e04 <z_impl_k_thread_name_set+0x20>)
   21dfe:	689c      	ldr	r4, [r3, #8]
   21e00:	e7f3      	b.n	21dea <z_impl_k_thread_name_set+0x6>
   21e02:	bf00      	nop
   21e04:	20003ac0 	.word	0x20003ac0

00021e08 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   21e08:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21e0a:	ea53 0102 	orrs.w	r1, r3, r2
   21e0e:	d102      	bne.n	21e16 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   21e10:	f00d f953 	bl	2f0ba <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   21e14:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21e16:	4902      	ldr	r1, [pc, #8]	; (21e20 <schedule_new_thread+0x18>)
   21e18:	3018      	adds	r0, #24
   21e1a:	f002 fbc1 	bl	245a0 <z_add_timeout>
   21e1e:	e7f9      	b.n	21e14 <schedule_new_thread+0xc>
   21e20:	00023a2d 	.word	0x00023a2d

00021e24 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   21e24:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
   21e26:	b13b      	cbz	r3, 21e38 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   21e28:	f003 0303 	and.w	r3, r3, #3
   21e2c:	4a04      	ldr	r2, [pc, #16]	; (21e40 <z_spin_lock_valid+0x1c>)
   21e2e:	7d12      	ldrb	r2, [r2, #20]
   21e30:	4293      	cmp	r3, r2
   21e32:	d003      	beq.n	21e3c <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
   21e34:	2001      	movs	r0, #1
   21e36:	4770      	bx	lr
   21e38:	2001      	movs	r0, #1
   21e3a:	4770      	bx	lr
			return false;
   21e3c:	2000      	movs	r0, #0
}
   21e3e:	4770      	bx	lr
   21e40:	20003ac0 	.word	0x20003ac0

00021e44 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   21e44:	6801      	ldr	r1, [r0, #0]
   21e46:	4a06      	ldr	r2, [pc, #24]	; (21e60 <z_spin_unlock_valid+0x1c>)
   21e48:	7d13      	ldrb	r3, [r2, #20]
   21e4a:	6892      	ldr	r2, [r2, #8]
   21e4c:	4313      	orrs	r3, r2
   21e4e:	4299      	cmp	r1, r3
   21e50:	d103      	bne.n	21e5a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
   21e52:	2300      	movs	r3, #0
   21e54:	6003      	str	r3, [r0, #0]
	return true;
   21e56:	2001      	movs	r0, #1
   21e58:	4770      	bx	lr
		return false;
   21e5a:	2000      	movs	r0, #0
}
   21e5c:	4770      	bx	lr
   21e5e:	bf00      	nop
   21e60:	20003ac0 	.word	0x20003ac0

00021e64 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   21e64:	4a02      	ldr	r2, [pc, #8]	; (21e70 <z_spin_lock_set_owner+0xc>)
   21e66:	7d13      	ldrb	r3, [r2, #20]
   21e68:	6892      	ldr	r2, [r2, #8]
   21e6a:	4313      	orrs	r3, r2
   21e6c:	6003      	str	r3, [r0, #0]
}
   21e6e:	4770      	bx	lr
   21e70:	20003ac0 	.word	0x20003ac0

00021e74 <z_thread_monitor_exit>:
{
   21e74:	b538      	push	{r3, r4, r5, lr}
   21e76:	4604      	mov	r4, r0
	__asm__ volatile(
   21e78:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e7c:	f3ef 8511 	mrs	r5, BASEPRI
   21e80:	f383 8812 	msr	BASEPRI_MAX, r3
   21e84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e88:	4819      	ldr	r0, [pc, #100]	; (21ef0 <z_thread_monitor_exit+0x7c>)
   21e8a:	f7ff ffcb 	bl	21e24 <z_spin_lock_valid>
   21e8e:	b150      	cbz	r0, 21ea6 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
   21e90:	4817      	ldr	r0, [pc, #92]	; (21ef0 <z_thread_monitor_exit+0x7c>)
   21e92:	f7ff ffe7 	bl	21e64 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
   21e96:	4b17      	ldr	r3, [pc, #92]	; (21ef4 <z_thread_monitor_exit+0x80>)
   21e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21e9a:	42a3      	cmp	r3, r4
   21e9c:	d10e      	bne.n	21ebc <z_thread_monitor_exit+0x48>
		_kernel.threads = _kernel.threads->next_thread;
   21e9e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   21ea0:	4b14      	ldr	r3, [pc, #80]	; (21ef4 <z_thread_monitor_exit+0x80>)
   21ea2:	629a      	str	r2, [r3, #40]	; 0x28
   21ea4:	e011      	b.n	21eca <z_thread_monitor_exit+0x56>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ea6:	4c14      	ldr	r4, [pc, #80]	; (21ef8 <z_thread_monitor_exit+0x84>)
   21ea8:	2294      	movs	r2, #148	; 0x94
   21eaa:	4621      	mov	r1, r4
   21eac:	4813      	ldr	r0, [pc, #76]	; (21efc <z_thread_monitor_exit+0x88>)
   21eae:	f006 feae 	bl	28c0e <assert_print>
   21eb2:	2194      	movs	r1, #148	; 0x94
   21eb4:	4620      	mov	r0, r4
   21eb6:	f006 fea3 	bl	28c00 <assert_post_action>
			prev_thread = prev_thread->next_thread;
   21eba:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   21ebc:	b113      	cbz	r3, 21ec4 <z_thread_monitor_exit+0x50>
			(thread != prev_thread->next_thread)) {
   21ebe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   21ec0:	42a2      	cmp	r2, r4
   21ec2:	d1fa      	bne.n	21eba <z_thread_monitor_exit+0x46>
		if (prev_thread != NULL) {
   21ec4:	b10b      	cbz	r3, 21eca <z_thread_monitor_exit+0x56>
			prev_thread->next_thread = thread->next_thread;
   21ec6:	6f62      	ldr	r2, [r4, #116]	; 0x74
   21ec8:	675a      	str	r2, [r3, #116]	; 0x74
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21eca:	4809      	ldr	r0, [pc, #36]	; (21ef0 <z_thread_monitor_exit+0x7c>)
   21ecc:	f7ff ffba 	bl	21e44 <z_spin_unlock_valid>
   21ed0:	b120      	cbz	r0, 21edc <z_thread_monitor_exit+0x68>
	__asm__ volatile(
   21ed2:	f385 8811 	msr	BASEPRI, r5
   21ed6:	f3bf 8f6f 	isb	sy
}
   21eda:	bd38      	pop	{r3, r4, r5, pc}
   21edc:	4c06      	ldr	r4, [pc, #24]	; (21ef8 <z_thread_monitor_exit+0x84>)
   21ede:	22c2      	movs	r2, #194	; 0xc2
   21ee0:	4621      	mov	r1, r4
   21ee2:	4806      	ldr	r0, [pc, #24]	; (21efc <z_thread_monitor_exit+0x88>)
   21ee4:	f006 fe93 	bl	28c0e <assert_print>
   21ee8:	21c2      	movs	r1, #194	; 0xc2
   21eea:	4620      	mov	r0, r4
   21eec:	f006 fe88 	bl	28c00 <assert_post_action>
   21ef0:	20003aec 	.word	0x20003aec
   21ef4:	20003ac0 	.word	0x20003ac0
   21ef8:	00030164 	.word	0x00030164
   21efc:	00030128 	.word	0x00030128

00021f00 <z_setup_new_thread>:
{
   21f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f04:	b085      	sub	sp, #20
   21f06:	4604      	mov	r4, r0
   21f08:	460e      	mov	r6, r1
   21f0a:	4617      	mov	r7, r2
   21f0c:	461d      	mov	r5, r3
   21f0e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   21f12:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   21f16:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   21f1a:	9911      	ldr	r1, [sp, #68]	; 0x44
   21f1c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	Z_ASSERT_VALID_PRIO(prio, entry);
   21f20:	290f      	cmp	r1, #15
   21f22:	d05b      	beq.n	21fdc <z_setup_new_thread+0xdc>
   21f24:	f101 0310 	add.w	r3, r1, #16
   21f28:	2b1e      	cmp	r3, #30
   21f2a:	d85b      	bhi.n	21fe4 <z_setup_new_thread+0xe4>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   21f2c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   21f30:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   21f32:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   21f34:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21f36:	2204      	movs	r2, #4
   21f38:	4620      	mov	r0, r4
   21f3a:	f00d f8c2 	bl	2f0c2 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   21f3e:	463a      	mov	r2, r7
   21f40:	4631      	mov	r1, r6
   21f42:	4620      	mov	r0, r4
   21f44:	f00d f89e 	bl	2f084 <setup_thread_stack>
   21f48:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21f4a:	f8cd 8008 	str.w	r8, [sp, #8]
   21f4e:	f8cd 9004 	str.w	r9, [sp, #4]
   21f52:	f8cd a000 	str.w	sl, [sp]
   21f56:	462b      	mov	r3, r5
   21f58:	4602      	mov	r2, r0
   21f5a:	4631      	mov	r1, r6
   21f5c:	4620      	mov	r0, r4
   21f5e:	f7f1 f95f 	bl	13220 <arch_new_thread>
	new_thread->init_data = NULL;
   21f62:	2300      	movs	r3, #0
   21f64:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
   21f66:	6665      	str	r5, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   21f68:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   21f6c:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   21f70:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   21f74:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f78:	f3ef 8511 	mrs	r5, BASEPRI
   21f7c:	f383 8812 	msr	BASEPRI_MAX, r3
   21f80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f84:	482b      	ldr	r0, [pc, #172]	; (22034 <z_setup_new_thread+0x134>)
   21f86:	f7ff ff4d 	bl	21e24 <z_spin_lock_valid>
   21f8a:	2800      	cmp	r0, #0
   21f8c:	d036      	beq.n	21ffc <z_setup_new_thread+0xfc>
	z_spin_lock_set_owner(l);
   21f8e:	4e29      	ldr	r6, [pc, #164]	; (22034 <z_setup_new_thread+0x134>)
   21f90:	4630      	mov	r0, r6
   21f92:	f7ff ff67 	bl	21e64 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
   21f96:	4b28      	ldr	r3, [pc, #160]	; (22038 <z_setup_new_thread+0x138>)
   21f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   21f9a:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   21f9c:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f9e:	4630      	mov	r0, r6
   21fa0:	f7ff ff50 	bl	21e44 <z_spin_unlock_valid>
   21fa4:	b3a0      	cbz	r0, 22010 <z_setup_new_thread+0x110>
	__asm__ volatile(
   21fa6:	f385 8811 	msr	BASEPRI, r5
   21faa:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   21fae:	f1bb 0f00 	cmp.w	fp, #0
   21fb2:	d037      	beq.n	22024 <z_setup_new_thread+0x124>
		strncpy(new_thread->name, name,
   21fb4:	221f      	movs	r2, #31
   21fb6:	4659      	mov	r1, fp
   21fb8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   21fbc:	f007 fe76 	bl	29cac <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   21fc0:	2300      	movs	r3, #0
   21fc2:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	if (!_current) {
   21fc6:	4b1c      	ldr	r3, [pc, #112]	; (22038 <z_setup_new_thread+0x138>)
   21fc8:	689b      	ldr	r3, [r3, #8]
   21fca:	b37b      	cbz	r3, 2202c <z_setup_new_thread+0x12c>
	new_thread->resource_pool = _current->resource_pool;
   21fcc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   21fd0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   21fd4:	4638      	mov	r0, r7
   21fd6:	b005      	add	sp, #20
   21fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   21fdc:	4b17      	ldr	r3, [pc, #92]	; (2203c <z_setup_new_thread+0x13c>)
   21fde:	429d      	cmp	r5, r3
   21fe0:	d1a0      	bne.n	21f24 <z_setup_new_thread+0x24>
   21fe2:	e7a3      	b.n	21f2c <z_setup_new_thread+0x2c>
   21fe4:	4c16      	ldr	r4, [pc, #88]	; (22040 <z_setup_new_thread+0x140>)
   21fe6:	f44f 7206 	mov.w	r2, #536	; 0x218
   21fea:	4621      	mov	r1, r4
   21fec:	4815      	ldr	r0, [pc, #84]	; (22044 <z_setup_new_thread+0x144>)
   21fee:	f006 fe0e 	bl	28c0e <assert_print>
   21ff2:	f44f 7106 	mov.w	r1, #536	; 0x218
   21ff6:	4620      	mov	r0, r4
   21ff8:	f006 fe02 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ffc:	4c12      	ldr	r4, [pc, #72]	; (22048 <z_setup_new_thread+0x148>)
   21ffe:	2294      	movs	r2, #148	; 0x94
   22000:	4621      	mov	r1, r4
   22002:	4810      	ldr	r0, [pc, #64]	; (22044 <z_setup_new_thread+0x144>)
   22004:	f006 fe03 	bl	28c0e <assert_print>
   22008:	2194      	movs	r1, #148	; 0x94
   2200a:	4620      	mov	r0, r4
   2200c:	f006 fdf8 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22010:	4c0d      	ldr	r4, [pc, #52]	; (22048 <z_setup_new_thread+0x148>)
   22012:	22c2      	movs	r2, #194	; 0xc2
   22014:	4621      	mov	r1, r4
   22016:	480b      	ldr	r0, [pc, #44]	; (22044 <z_setup_new_thread+0x144>)
   22018:	f006 fdf9 	bl	28c0e <assert_print>
   2201c:	21c2      	movs	r1, #194	; 0xc2
   2201e:	4620      	mov	r0, r4
   22020:	f006 fdee 	bl	28c00 <assert_post_action>
		new_thread->name[0] = '\0';
   22024:	2300      	movs	r3, #0
   22026:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   2202a:	e7cc      	b.n	21fc6 <z_setup_new_thread+0xc6>
		new_thread->resource_pool = NULL;
   2202c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   22030:	e7d0      	b.n	21fd4 <z_setup_new_thread+0xd4>
   22032:	bf00      	nop
   22034:	20003aec 	.word	0x20003aec
   22038:	20003ac0 	.word	0x20003ac0
   2203c:	00022191 	.word	0x00022191
   22040:	00033c34 	.word	0x00033c34
   22044:	00030128 	.word	0x00030128
   22048:	00030164 	.word	0x00030164

0002204c <z_impl_k_thread_create>:
{
   2204c:	b570      	push	{r4, r5, r6, lr}
   2204e:	b086      	sub	sp, #24
   22050:	4604      	mov	r4, r0
   22052:	9e10      	ldr	r6, [sp, #64]	; 0x40
   22054:	9d11      	ldr	r5, [sp, #68]	; 0x44
   22056:	f3ef 8005 	mrs	r0, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2205a:	b9b8      	cbnz	r0, 2208c <z_impl_k_thread_create+0x40>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2205c:	2000      	movs	r0, #0
   2205e:	9005      	str	r0, [sp, #20]
   22060:	980e      	ldr	r0, [sp, #56]	; 0x38
   22062:	9004      	str	r0, [sp, #16]
   22064:	980d      	ldr	r0, [sp, #52]	; 0x34
   22066:	9003      	str	r0, [sp, #12]
   22068:	980c      	ldr	r0, [sp, #48]	; 0x30
   2206a:	9002      	str	r0, [sp, #8]
   2206c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2206e:	9001      	str	r0, [sp, #4]
   22070:	980a      	ldr	r0, [sp, #40]	; 0x28
   22072:	9000      	str	r0, [sp, #0]
   22074:	4620      	mov	r0, r4
   22076:	f7ff ff43 	bl	21f00 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2207a:	f1b5 3fff 	cmp.w	r5, #4294967295
   2207e:	bf08      	it	eq
   22080:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   22084:	d10e      	bne.n	220a4 <z_impl_k_thread_create+0x58>
}
   22086:	4620      	mov	r0, r4
   22088:	b006      	add	sp, #24
   2208a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2208c:	4c08      	ldr	r4, [pc, #32]	; (220b0 <z_impl_k_thread_create+0x64>)
   2208e:	f240 2287 	movw	r2, #647	; 0x287
   22092:	4621      	mov	r1, r4
   22094:	4807      	ldr	r0, [pc, #28]	; (220b4 <z_impl_k_thread_create+0x68>)
   22096:	f006 fdba 	bl	28c0e <assert_print>
   2209a:	f240 2187 	movw	r1, #647	; 0x287
   2209e:	4620      	mov	r0, r4
   220a0:	f006 fdae 	bl	28c00 <assert_post_action>
		schedule_new_thread(new_thread, delay);
   220a4:	4632      	mov	r2, r6
   220a6:	462b      	mov	r3, r5
   220a8:	4620      	mov	r0, r4
   220aa:	f7ff fead 	bl	21e08 <schedule_new_thread>
   220ae:	e7ea      	b.n	22086 <z_impl_k_thread_create+0x3a>
   220b0:	00033c34 	.word	0x00033c34
   220b4:	00030128 	.word	0x00030128

000220b8 <z_init_static_threads>:
{
   220b8:	b530      	push	{r4, r5, lr}
   220ba:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   220bc:	4c30      	ldr	r4, [pc, #192]	; (22180 <z_init_static_threads+0xc8>)
   220be:	e014      	b.n	220ea <z_init_static_threads+0x32>
		z_setup_new_thread(
   220c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   220c2:	9305      	str	r3, [sp, #20]
   220c4:	6a23      	ldr	r3, [r4, #32]
   220c6:	9304      	str	r3, [sp, #16]
   220c8:	69e3      	ldr	r3, [r4, #28]
   220ca:	9303      	str	r3, [sp, #12]
   220cc:	69a3      	ldr	r3, [r4, #24]
   220ce:	9302      	str	r3, [sp, #8]
   220d0:	6963      	ldr	r3, [r4, #20]
   220d2:	9301      	str	r3, [sp, #4]
   220d4:	6923      	ldr	r3, [r4, #16]
   220d6:	9300      	str	r3, [sp, #0]
   220d8:	68e3      	ldr	r3, [r4, #12]
   220da:	68a2      	ldr	r2, [r4, #8]
   220dc:	6861      	ldr	r1, [r4, #4]
   220de:	6820      	ldr	r0, [r4, #0]
   220e0:	f7ff ff0e 	bl	21f00 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   220e4:	6823      	ldr	r3, [r4, #0]
   220e6:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   220e8:	3430      	adds	r4, #48	; 0x30
   220ea:	4b26      	ldr	r3, [pc, #152]	; (22184 <z_init_static_threads+0xcc>)
   220ec:	429c      	cmp	r4, r3
   220ee:	d806      	bhi.n	220fe <z_init_static_threads+0x46>
   220f0:	4b24      	ldr	r3, [pc, #144]	; (22184 <z_init_static_threads+0xcc>)
   220f2:	429c      	cmp	r4, r3
   220f4:	d3e4      	bcc.n	220c0 <z_init_static_threads+0x8>
	k_sched_lock();
   220f6:	f001 fa19 	bl	2352c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   220fa:	4c21      	ldr	r4, [pc, #132]	; (22180 <z_init_static_threads+0xc8>)
   220fc:	e00c      	b.n	22118 <z_init_static_threads+0x60>
	_FOREACH_STATIC_THREAD(thread_data) {
   220fe:	4c22      	ldr	r4, [pc, #136]	; (22188 <z_init_static_threads+0xd0>)
   22100:	f240 22ee 	movw	r2, #750	; 0x2ee
   22104:	4621      	mov	r1, r4
   22106:	4821      	ldr	r0, [pc, #132]	; (2218c <z_init_static_threads+0xd4>)
   22108:	f006 fd81 	bl	28c0e <assert_print>
   2210c:	f240 21ee 	movw	r1, #750	; 0x2ee
   22110:	4620      	mov	r0, r4
   22112:	f006 fd75 	bl	28c00 <assert_post_action>
	_FOREACH_STATIC_THREAD(thread_data) {
   22116:	3430      	adds	r4, #48	; 0x30
   22118:	4b1a      	ldr	r3, [pc, #104]	; (22184 <z_init_static_threads+0xcc>)
   2211a:	429c      	cmp	r4, r3
   2211c:	d81f      	bhi.n	2215e <z_init_static_threads+0xa6>
   2211e:	4b19      	ldr	r3, [pc, #100]	; (22184 <z_init_static_threads+0xcc>)
   22120:	429c      	cmp	r4, r3
   22122:	d228      	bcs.n	22176 <z_init_static_threads+0xbe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   22124:	6a60      	ldr	r0, [r4, #36]	; 0x24
   22126:	f1b0 3fff 	cmp.w	r0, #4294967295
   2212a:	d0f4      	beq.n	22116 <z_init_static_threads+0x5e>
			schedule_new_thread(thread_data->init_thread,
   2212c:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   2212e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   22132:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   22134:	03c9      	lsls	r1, r1, #15
   22136:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2213a:	03c0      	lsls	r0, r0, #15
   2213c:	f240 33e7 	movw	r3, #999	; 0x3e7
   22140:	18c0      	adds	r0, r0, r3
   22142:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22146:	f04f 0300 	mov.w	r3, #0
   2214a:	f141 0100 	adc.w	r1, r1, #0
   2214e:	f7dd ffd7 	bl	100 <__aeabi_uldivmod>
   22152:	4602      	mov	r2, r0
   22154:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   22156:	4628      	mov	r0, r5
   22158:	f7ff fe56 	bl	21e08 <schedule_new_thread>
   2215c:	e7db      	b.n	22116 <z_init_static_threads+0x5e>
	_FOREACH_STATIC_THREAD(thread_data) {
   2215e:	4c0a      	ldr	r4, [pc, #40]	; (22188 <z_init_static_threads+0xd0>)
   22160:	f240 320d 	movw	r2, #781	; 0x30d
   22164:	4621      	mov	r1, r4
   22166:	4809      	ldr	r0, [pc, #36]	; (2218c <z_init_static_threads+0xd4>)
   22168:	f006 fd51 	bl	28c0e <assert_print>
   2216c:	f240 310d 	movw	r1, #781	; 0x30d
   22170:	4620      	mov	r0, r4
   22172:	f006 fd45 	bl	28c00 <assert_post_action>
	k_sched_unlock();
   22176:	f001 fe5d 	bl	23e34 <k_sched_unlock>
}
   2217a:	b007      	add	sp, #28
   2217c:	bd30      	pop	{r4, r5, pc}
   2217e:	bf00      	nop
   22180:	0002f95c 	.word	0x0002f95c
   22184:	0002f95c 	.word	0x0002f95c
   22188:	00033c34 	.word	0x00033c34
   2218c:	00030128 	.word	0x00030128

00022190 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   22190:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   22192:	4b13      	ldr	r3, [pc, #76]	; (221e0 <idle+0x50>)
   22194:	689b      	ldr	r3, [r3, #8]
   22196:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2219a:	2b00      	cmp	r3, #0
   2219c:	da0b      	bge.n	221b6 <idle+0x26>
   2219e:	4c11      	ldr	r4, [pc, #68]	; (221e4 <idle+0x54>)
   221a0:	2227      	movs	r2, #39	; 0x27
   221a2:	4621      	mov	r1, r4
   221a4:	4810      	ldr	r0, [pc, #64]	; (221e8 <idle+0x58>)
   221a6:	f006 fd32 	bl	28c0e <assert_print>
   221aa:	2127      	movs	r1, #39	; 0x27
   221ac:	4620      	mov	r0, r4
   221ae:	f006 fd27 	bl	28c00 <assert_post_action>
	arch_cpu_idle();
   221b2:	f7f0 ff0f 	bl	12fd4 <arch_cpu_idle>
	__asm__ volatile(
   221b6:	f04f 0240 	mov.w	r2, #64	; 0x40
   221ba:	f3ef 8311 	mrs	r3, BASEPRI
   221be:	f382 8812 	msr	BASEPRI_MAX, r2
   221c2:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   221c6:	f002 faed 	bl	247a4 <z_get_next_timeout_expiry>
   221ca:	4b05      	ldr	r3, [pc, #20]	; (221e0 <idle+0x50>)
   221cc:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   221ce:	4b07      	ldr	r3, [pc, #28]	; (221ec <idle+0x5c>)
   221d0:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   221d2:	2b00      	cmp	r3, #0
   221d4:	d0ed      	beq.n	221b2 <idle+0x22>
   221d6:	f7f0 fbbb 	bl	12950 <pm_system_suspend>
   221da:	2800      	cmp	r0, #0
   221dc:	d1eb      	bne.n	221b6 <idle+0x26>
   221de:	e7e8      	b.n	221b2 <idle+0x22>
   221e0:	20003ac0 	.word	0x20003ac0
   221e4:	00033c58 	.word	0x00033c58
   221e8:	00030128 	.word	0x00030128
   221ec:	200045fc 	.word	0x200045fc

000221f0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   221f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221f4:	b082      	sub	sp, #8
   221f6:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   221fa:	2900      	cmp	r1, #0
   221fc:	d12d      	bne.n	2225a <z_impl_k_mutex_lock+0x6a>
   221fe:	4604      	mov	r4, r0
   22200:	4617      	mov	r7, r2
   22202:	461e      	mov	r6, r3
   22204:	f04f 0340 	mov.w	r3, #64	; 0x40
   22208:	f3ef 8511 	mrs	r5, BASEPRI
   2220c:	f383 8812 	msr	BASEPRI_MAX, r3
   22210:	f3bf 8f6f 	isb	sy
   22214:	46a8      	mov	r8, r5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22216:	4866      	ldr	r0, [pc, #408]	; (223b0 <z_impl_k_mutex_lock+0x1c0>)
   22218:	f7ff fe04 	bl	21e24 <z_spin_lock_valid>
   2221c:	b338      	cbz	r0, 2226e <z_impl_k_mutex_lock+0x7e>
	z_spin_lock_set_owner(l);
   2221e:	4864      	ldr	r0, [pc, #400]	; (223b0 <z_impl_k_mutex_lock+0x1c0>)
   22220:	f7ff fe20 	bl	21e64 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   22224:	68e1      	ldr	r1, [r4, #12]
   22226:	bb61      	cbnz	r1, 22282 <z_impl_k_mutex_lock+0x92>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   22228:	2900      	cmp	r1, #0
   2222a:	d179      	bne.n	22320 <z_impl_k_mutex_lock+0x130>
   2222c:	4b61      	ldr	r3, [pc, #388]	; (223b4 <z_impl_k_mutex_lock+0x1c4>)
   2222e:	689b      	ldr	r3, [r3, #8]
   22230:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   22234:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   22236:	3101      	adds	r1, #1
   22238:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   2223a:	4b5e      	ldr	r3, [pc, #376]	; (223b4 <z_impl_k_mutex_lock+0x1c4>)
   2223c:	689b      	ldr	r3, [r3, #8]
   2223e:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22240:	485b      	ldr	r0, [pc, #364]	; (223b0 <z_impl_k_mutex_lock+0x1c0>)
   22242:	f7ff fdff 	bl	21e44 <z_spin_unlock_valid>
   22246:	2800      	cmp	r0, #0
   22248:	d06c      	beq.n	22324 <z_impl_k_mutex_lock+0x134>
	__asm__ volatile(
   2224a:	f388 8811 	msr	BASEPRI, r8
   2224e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   22252:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   22254:	b002      	add	sp, #8
   22256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2225a:	4c57      	ldr	r4, [pc, #348]	; (223b8 <z_impl_k_mutex_lock+0x1c8>)
   2225c:	2265      	movs	r2, #101	; 0x65
   2225e:	4621      	mov	r1, r4
   22260:	4856      	ldr	r0, [pc, #344]	; (223bc <z_impl_k_mutex_lock+0x1cc>)
   22262:	f006 fcd4 	bl	28c0e <assert_print>
   22266:	2165      	movs	r1, #101	; 0x65
   22268:	4620      	mov	r0, r4
   2226a:	f006 fcc9 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2226e:	4c54      	ldr	r4, [pc, #336]	; (223c0 <z_impl_k_mutex_lock+0x1d0>)
   22270:	2294      	movs	r2, #148	; 0x94
   22272:	4621      	mov	r1, r4
   22274:	4851      	ldr	r0, [pc, #324]	; (223bc <z_impl_k_mutex_lock+0x1cc>)
   22276:	f006 fcca 	bl	28c0e <assert_print>
   2227a:	2194      	movs	r1, #148	; 0x94
   2227c:	4620      	mov	r0, r4
   2227e:	f006 fcbf 	bl	28c00 <assert_post_action>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   22282:	68a2      	ldr	r2, [r4, #8]
   22284:	4b4b      	ldr	r3, [pc, #300]	; (223b4 <z_impl_k_mutex_lock+0x1c4>)
   22286:	689b      	ldr	r3, [r3, #8]
   22288:	429a      	cmp	r2, r3
   2228a:	d0cd      	beq.n	22228 <z_impl_k_mutex_lock+0x38>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2228c:	ea56 0107 	orrs.w	r1, r6, r7
   22290:	d052      	beq.n	22338 <z_impl_k_mutex_lock+0x148>
					    mutex->owner->base.prio);
   22292:	f992 800e 	ldrsb.w	r8, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   22296:	4641      	mov	r1, r8
   22298:	f993 000e 	ldrsb.w	r0, [r3, #14]
   2229c:	f00c ff22 	bl	2f0e4 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   222a0:	4580      	cmp	r8, r0
   222a2:	dc5e      	bgt.n	22362 <z_impl_k_mutex_lock+0x172>
	bool resched = false;
   222a4:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   222a8:	9700      	str	r7, [sp, #0]
   222aa:	9601      	str	r6, [sp, #4]
   222ac:	4622      	mov	r2, r4
   222ae:	4629      	mov	r1, r5
   222b0:	483f      	ldr	r0, [pc, #252]	; (223b0 <z_impl_k_mutex_lock+0x1c0>)
   222b2:	f001 fc69 	bl	23b88 <z_pend_curr>
	if (got_mutex == 0) {
   222b6:	2800      	cmp	r0, #0
   222b8:	d0cc      	beq.n	22254 <z_impl_k_mutex_lock+0x64>
	__asm__ volatile(
   222ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   222be:	f3ef 8511 	mrs	r5, BASEPRI
   222c2:	f383 8812 	msr	BASEPRI_MAX, r3
   222c6:	f3bf 8f6f 	isb	sy
   222ca:	462e      	mov	r6, r5
   222cc:	4838      	ldr	r0, [pc, #224]	; (223b0 <z_impl_k_mutex_lock+0x1c0>)
   222ce:	f7ff fda9 	bl	21e24 <z_spin_lock_valid>
   222d2:	2800      	cmp	r0, #0
   222d4:	d04b      	beq.n	2236e <z_impl_k_mutex_lock+0x17e>
	z_spin_lock_set_owner(l);
   222d6:	4836      	ldr	r0, [pc, #216]	; (223b0 <z_impl_k_mutex_lock+0x1c0>)
   222d8:	f7ff fdc4 	bl	21e64 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   222dc:	68a3      	ldr	r3, [r4, #8]
   222de:	2b00      	cmp	r3, #0
   222e0:	d051      	beq.n	22386 <z_impl_k_mutex_lock+0x196>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   222e2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   222e4:	429c      	cmp	r4, r3
   222e6:	d04c      	beq.n	22382 <z_impl_k_mutex_lock+0x192>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   222e8:	2b00      	cmp	r3, #0
   222ea:	d04a      	beq.n	22382 <z_impl_k_mutex_lock+0x192>
   222ec:	6921      	ldr	r1, [r4, #16]
   222ee:	f993 000e 	ldrsb.w	r0, [r3, #14]
   222f2:	f00c fef7 	bl	2f0e4 <new_prio_for_inheritance>
   222f6:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   222f8:	4620      	mov	r0, r4
   222fa:	f00c fefe 	bl	2f0fa <adjust_owner_prio>
   222fe:	2800      	cmp	r0, #0
   22300:	d144      	bne.n	2238c <z_impl_k_mutex_lock+0x19c>
   22302:	f1b8 0f00 	cmp.w	r8, #0
   22306:	d141      	bne.n	2238c <z_impl_k_mutex_lock+0x19c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22308:	4829      	ldr	r0, [pc, #164]	; (223b0 <z_impl_k_mutex_lock+0x1c0>)
   2230a:	f7ff fd9b 	bl	21e44 <z_spin_unlock_valid>
   2230e:	2800      	cmp	r0, #0
   22310:	d043      	beq.n	2239a <z_impl_k_mutex_lock+0x1aa>
	__asm__ volatile(
   22312:	f386 8811 	msr	BASEPRI, r6
   22316:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   2231a:	f06f 000a 	mvn.w	r0, #10
   2231e:	e799      	b.n	22254 <z_impl_k_mutex_lock+0x64>
					_current->base.prio :
   22320:	6923      	ldr	r3, [r4, #16]
   22322:	e787      	b.n	22234 <z_impl_k_mutex_lock+0x44>
   22324:	4c26      	ldr	r4, [pc, #152]	; (223c0 <z_impl_k_mutex_lock+0x1d0>)
   22326:	22c2      	movs	r2, #194	; 0xc2
   22328:	4621      	mov	r1, r4
   2232a:	4824      	ldr	r0, [pc, #144]	; (223bc <z_impl_k_mutex_lock+0x1cc>)
   2232c:	f006 fc6f 	bl	28c0e <assert_print>
   22330:	21c2      	movs	r1, #194	; 0xc2
   22332:	4620      	mov	r0, r4
   22334:	f006 fc64 	bl	28c00 <assert_post_action>
   22338:	481d      	ldr	r0, [pc, #116]	; (223b0 <z_impl_k_mutex_lock+0x1c0>)
   2233a:	f7ff fd83 	bl	21e44 <z_spin_unlock_valid>
   2233e:	b130      	cbz	r0, 2234e <z_impl_k_mutex_lock+0x15e>
   22340:	f385 8811 	msr	BASEPRI, r5
   22344:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   22348:	f06f 000f 	mvn.w	r0, #15
   2234c:	e782      	b.n	22254 <z_impl_k_mutex_lock+0x64>
   2234e:	4c1c      	ldr	r4, [pc, #112]	; (223c0 <z_impl_k_mutex_lock+0x1d0>)
   22350:	22c2      	movs	r2, #194	; 0xc2
   22352:	4621      	mov	r1, r4
   22354:	4819      	ldr	r0, [pc, #100]	; (223bc <z_impl_k_mutex_lock+0x1cc>)
   22356:	f006 fc5a 	bl	28c0e <assert_print>
   2235a:	21c2      	movs	r1, #194	; 0xc2
   2235c:	4620      	mov	r0, r4
   2235e:	f006 fc4f 	bl	28c00 <assert_post_action>
		resched = adjust_owner_prio(mutex, new_prio);
   22362:	4601      	mov	r1, r0
   22364:	4620      	mov	r0, r4
   22366:	f00c fec8 	bl	2f0fa <adjust_owner_prio>
   2236a:	4680      	mov	r8, r0
   2236c:	e79c      	b.n	222a8 <z_impl_k_mutex_lock+0xb8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2236e:	4c14      	ldr	r4, [pc, #80]	; (223c0 <z_impl_k_mutex_lock+0x1d0>)
   22370:	2294      	movs	r2, #148	; 0x94
   22372:	4621      	mov	r1, r4
   22374:	4811      	ldr	r0, [pc, #68]	; (223bc <z_impl_k_mutex_lock+0x1cc>)
   22376:	f006 fc4a 	bl	28c0e <assert_print>
   2237a:	2194      	movs	r1, #148	; 0x94
   2237c:	4620      	mov	r0, r4
   2237e:	f006 fc3f 	bl	28c00 <assert_post_action>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22382:	6921      	ldr	r1, [r4, #16]
   22384:	e7b8      	b.n	222f8 <z_impl_k_mutex_lock+0x108>
	if (resched) {
   22386:	f1b8 0f00 	cmp.w	r8, #0
   2238a:	d0bd      	beq.n	22308 <z_impl_k_mutex_lock+0x118>
		z_reschedule(&lock, key);
   2238c:	4629      	mov	r1, r5
   2238e:	4808      	ldr	r0, [pc, #32]	; (223b0 <z_impl_k_mutex_lock+0x1c0>)
   22390:	f001 f898 	bl	234c4 <z_reschedule>
	return -EAGAIN;
   22394:	f06f 000a 	mvn.w	r0, #10
   22398:	e75c      	b.n	22254 <z_impl_k_mutex_lock+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2239a:	4c09      	ldr	r4, [pc, #36]	; (223c0 <z_impl_k_mutex_lock+0x1d0>)
   2239c:	22c2      	movs	r2, #194	; 0xc2
   2239e:	4621      	mov	r1, r4
   223a0:	4806      	ldr	r0, [pc, #24]	; (223bc <z_impl_k_mutex_lock+0x1cc>)
   223a2:	f006 fc34 	bl	28c0e <assert_print>
   223a6:	21c2      	movs	r1, #194	; 0xc2
   223a8:	4620      	mov	r0, r4
   223aa:	f006 fc29 	bl	28c00 <assert_post_action>
   223ae:	bf00      	nop
   223b0:	20003af0 	.word	0x20003af0
   223b4:	20003ac0 	.word	0x20003ac0
   223b8:	00033c7c 	.word	0x00033c7c
   223bc:	00030128 	.word	0x00030128
   223c0:	00030164 	.word	0x00030164

000223c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   223c4:	b570      	push	{r4, r5, r6, lr}
   223c6:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   223ca:	b97b      	cbnz	r3, 223ec <z_impl_k_mutex_unlock+0x28>
   223cc:	4604      	mov	r4, r0

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   223ce:	6883      	ldr	r3, [r0, #8]
   223d0:	2b00      	cmp	r3, #0
   223d2:	d065      	beq.n	224a0 <z_impl_k_mutex_unlock+0xdc>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   223d4:	4a35      	ldr	r2, [pc, #212]	; (224ac <z_impl_k_mutex_unlock+0xe8>)
   223d6:	6892      	ldr	r2, [r2, #8]
   223d8:	4293      	cmp	r3, r2
   223da:	d164      	bne.n	224a6 <z_impl_k_mutex_unlock+0xe2>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   223dc:	68c3      	ldr	r3, [r0, #12]
   223de:	b17b      	cbz	r3, 22400 <z_impl_k_mutex_unlock+0x3c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   223e0:	2b01      	cmp	r3, #1
   223e2:	d917      	bls.n	22414 <z_impl_k_mutex_unlock+0x50>
		mutex->lock_count--;
   223e4:	3b01      	subs	r3, #1
   223e6:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   223e8:	2000      	movs	r0, #0
}
   223ea:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   223ec:	4c30      	ldr	r4, [pc, #192]	; (224b0 <z_impl_k_mutex_unlock+0xec>)
   223ee:	22cd      	movs	r2, #205	; 0xcd
   223f0:	4621      	mov	r1, r4
   223f2:	4830      	ldr	r0, [pc, #192]	; (224b4 <z_impl_k_mutex_unlock+0xf0>)
   223f4:	f006 fc0b 	bl	28c0e <assert_print>
   223f8:	21cd      	movs	r1, #205	; 0xcd
   223fa:	4620      	mov	r0, r4
   223fc:	f006 fc00 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   22400:	4c2b      	ldr	r4, [pc, #172]	; (224b0 <z_impl_k_mutex_unlock+0xec>)
   22402:	22e5      	movs	r2, #229	; 0xe5
   22404:	4621      	mov	r1, r4
   22406:	482b      	ldr	r0, [pc, #172]	; (224b4 <z_impl_k_mutex_unlock+0xf0>)
   22408:	f006 fc01 	bl	28c0e <assert_print>
   2240c:	21e5      	movs	r1, #229	; 0xe5
   2240e:	4620      	mov	r0, r4
   22410:	f006 fbf6 	bl	28c00 <assert_post_action>
	__asm__ volatile(
   22414:	f04f 0340 	mov.w	r3, #64	; 0x40
   22418:	f3ef 8511 	mrs	r5, BASEPRI
   2241c:	f383 8812 	msr	BASEPRI_MAX, r3
   22420:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22424:	4824      	ldr	r0, [pc, #144]	; (224b8 <z_impl_k_mutex_unlock+0xf4>)
   22426:	f7ff fcfd 	bl	21e24 <z_spin_lock_valid>
   2242a:	b1c8      	cbz	r0, 22460 <z_impl_k_mutex_unlock+0x9c>
	z_spin_lock_set_owner(l);
   2242c:	4822      	ldr	r0, [pc, #136]	; (224b8 <z_impl_k_mutex_unlock+0xf4>)
   2242e:	f7ff fd19 	bl	21e64 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   22432:	6921      	ldr	r1, [r4, #16]
   22434:	4620      	mov	r0, r4
   22436:	f00c fe60 	bl	2f0fa <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2243a:	4620      	mov	r0, r4
   2243c:	f001 fd90 	bl	23f60 <z_unpend_first_thread>
	mutex->owner = new_owner;
   22440:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   22442:	b1b8      	cbz	r0, 22474 <z_impl_k_mutex_unlock+0xb0>
		mutex->owner_orig_prio = new_owner->base.prio;
   22444:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22448:	6123      	str	r3, [r4, #16]
   2244a:	2400      	movs	r4, #0
   2244c:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   22450:	f001 fa66 	bl	23920 <z_ready_thread>
		z_reschedule(&lock, key);
   22454:	4629      	mov	r1, r5
   22456:	4818      	ldr	r0, [pc, #96]	; (224b8 <z_impl_k_mutex_unlock+0xf4>)
   22458:	f001 f834 	bl	234c4 <z_reschedule>
	return 0;
   2245c:	4620      	mov	r0, r4
   2245e:	e7c4      	b.n	223ea <z_impl_k_mutex_unlock+0x26>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22460:	4c16      	ldr	r4, [pc, #88]	; (224bc <z_impl_k_mutex_unlock+0xf8>)
   22462:	2294      	movs	r2, #148	; 0x94
   22464:	4621      	mov	r1, r4
   22466:	4813      	ldr	r0, [pc, #76]	; (224b4 <z_impl_k_mutex_unlock+0xf0>)
   22468:	f006 fbd1 	bl	28c0e <assert_print>
   2246c:	2194      	movs	r1, #148	; 0x94
   2246e:	4620      	mov	r0, r4
   22470:	f006 fbc6 	bl	28c00 <assert_post_action>
		mutex->lock_count = 0U;
   22474:	2300      	movs	r3, #0
   22476:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22478:	480f      	ldr	r0, [pc, #60]	; (224b8 <z_impl_k_mutex_unlock+0xf4>)
   2247a:	f7ff fce3 	bl	21e44 <z_spin_unlock_valid>
   2247e:	b128      	cbz	r0, 2248c <z_impl_k_mutex_unlock+0xc8>
	__asm__ volatile(
   22480:	f385 8811 	msr	BASEPRI, r5
   22484:	f3bf 8f6f 	isb	sy
	return 0;
   22488:	2000      	movs	r0, #0
   2248a:	e7ae      	b.n	223ea <z_impl_k_mutex_unlock+0x26>
   2248c:	4c0b      	ldr	r4, [pc, #44]	; (224bc <z_impl_k_mutex_unlock+0xf8>)
   2248e:	22c2      	movs	r2, #194	; 0xc2
   22490:	4621      	mov	r1, r4
   22492:	4808      	ldr	r0, [pc, #32]	; (224b4 <z_impl_k_mutex_unlock+0xf0>)
   22494:	f006 fbbb 	bl	28c0e <assert_print>
   22498:	21c2      	movs	r1, #194	; 0xc2
   2249a:	4620      	mov	r0, r4
   2249c:	f006 fbb0 	bl	28c00 <assert_post_action>
		return -EINVAL;
   224a0:	f06f 0015 	mvn.w	r0, #21
   224a4:	e7a1      	b.n	223ea <z_impl_k_mutex_unlock+0x26>
		return -EPERM;
   224a6:	f04f 30ff 	mov.w	r0, #4294967295
   224aa:	e79e      	b.n	223ea <z_impl_k_mutex_unlock+0x26>
   224ac:	20003ac0 	.word	0x20003ac0
   224b0:	00033c7c 	.word	0x00033c7c
   224b4:	00030128 	.word	0x00030128
   224b8:	20003af0 	.word	0x20003af0
   224bc:	00030164 	.word	0x00030164

000224c0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   224c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224c4:	4604      	mov	r4, r0
   224c6:	460e      	mov	r6, r1
   224c8:	4615      	mov	r5, r2
   224ca:	4698      	mov	r8, r3
   224cc:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   224d0:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   224d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   224d8:	f3ef 8911 	mrs	r9, BASEPRI
   224dc:	f383 8812 	msr	BASEPRI_MAX, r3
   224e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   224e4:	4638      	mov	r0, r7
   224e6:	f7ff fc9d 	bl	21e24 <z_spin_lock_valid>
   224ea:	b310      	cbz	r0, 22532 <queue_insert+0x72>
   224ec:	46ca      	mov	sl, r9
	z_spin_lock_set_owner(l);
   224ee:	4638      	mov	r0, r7
   224f0:	f7ff fcb8 	bl	21e64 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   224f4:	f1bb 0f00 	cmp.w	fp, #0
   224f8:	d000      	beq.n	224fc <queue_insert+0x3c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   224fa:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   224fc:	f104 000c 	add.w	r0, r4, #12
   22500:	f001 fd2e 	bl	23f60 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   22504:	b9f8      	cbnz	r0, 22546 <queue_insert+0x86>

		return 0;
	}

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   22506:	f1b8 0f00 	cmp.w	r8, #0
   2250a:	d125      	bne.n	22558 <queue_insert+0x98>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2250c:	2300      	movs	r3, #0
   2250e:	602b      	str	r3, [r5, #0]
		sys_sfnode_init(data, 0x0);
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
   22510:	462a      	mov	r2, r5
   22512:	4631      	mov	r1, r6
   22514:	4620      	mov	r0, r4
   22516:	f00c fe23 	bl	2f160 <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2251a:	2104      	movs	r1, #4
   2251c:	f104 0014 	add.w	r0, r4, #20
   22520:	f00d f85b 	bl	2f5da <z_handle_obj_poll_events>
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   22524:	4649      	mov	r1, r9
   22526:	4638      	mov	r0, r7
   22528:	f000 ffcc 	bl	234c4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   2252c:	2000      	movs	r0, #0
}
   2252e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22532:	4c19      	ldr	r4, [pc, #100]	; (22598 <queue_insert+0xd8>)
   22534:	2294      	movs	r2, #148	; 0x94
   22536:	4621      	mov	r1, r4
   22538:	4818      	ldr	r0, [pc, #96]	; (2259c <queue_insert+0xdc>)
   2253a:	f006 fb68 	bl	28c0e <assert_print>
   2253e:	2194      	movs	r1, #148	; 0x94
   22540:	4620      	mov	r0, r4
   22542:	f006 fb5d 	bl	28c00 <assert_post_action>
		prepare_thread_to_run(first_pending_thread, data);
   22546:	4629      	mov	r1, r5
   22548:	f00c fe2f 	bl	2f1aa <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   2254c:	4649      	mov	r1, r9
   2254e:	4638      	mov	r0, r7
   22550:	f000 ffb8 	bl	234c4 <z_reschedule>
		return 0;
   22554:	2000      	movs	r0, #0
   22556:	e7ea      	b.n	2252e <queue_insert+0x6e>
	return z_thread_aligned_alloc(0, size);
   22558:	2108      	movs	r1, #8
   2255a:	2000      	movs	r0, #0
   2255c:	f002 fe2a 	bl	251b4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   22560:	b120      	cbz	r0, 2256c <queue_insert+0xac>
		anode->data = data;
   22562:	6045      	str	r5, [r0, #4]
   22564:	2201      	movs	r2, #1
   22566:	6002      	str	r2, [r0, #0]
		data = anode;
   22568:	4605      	mov	r5, r0
   2256a:	e7d1      	b.n	22510 <queue_insert+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2256c:	4638      	mov	r0, r7
   2256e:	f7ff fc69 	bl	21e44 <z_spin_unlock_valid>
   22572:	b130      	cbz	r0, 22582 <queue_insert+0xc2>
	__asm__ volatile(
   22574:	f38a 8811 	msr	BASEPRI, sl
   22578:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2257c:	f06f 000b 	mvn.w	r0, #11
   22580:	e7d5      	b.n	2252e <queue_insert+0x6e>
   22582:	4c05      	ldr	r4, [pc, #20]	; (22598 <queue_insert+0xd8>)
   22584:	22c2      	movs	r2, #194	; 0xc2
   22586:	4621      	mov	r1, r4
   22588:	4804      	ldr	r0, [pc, #16]	; (2259c <queue_insert+0xdc>)
   2258a:	f006 fb40 	bl	28c0e <assert_print>
   2258e:	21c2      	movs	r1, #194	; 0xc2
   22590:	4620      	mov	r0, r4
   22592:	f006 fb35 	bl	28c00 <assert_post_action>
   22596:	bf00      	nop
   22598:	00030164 	.word	0x00030164
   2259c:	00030128 	.word	0x00030128

000225a0 <k_queue_append_list>:
int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   225a0:	2900      	cmp	r1, #0
   225a2:	d043      	beq.n	2262c <k_queue_append_list+0x8c>
{
   225a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   225a8:	4606      	mov	r6, r0
   225aa:	4617      	mov	r7, r2
   225ac:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   225ae:	2a00      	cmp	r2, #0
   225b0:	d03f      	beq.n	22632 <k_queue_append_list+0x92>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   225b2:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   225b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   225ba:	f3ef 8911 	mrs	r9, BASEPRI
   225be:	f383 8812 	msr	BASEPRI_MAX, r3
   225c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225c6:	4640      	mov	r0, r8
   225c8:	f7ff fc2c 	bl	21e24 <z_spin_lock_valid>
   225cc:	b140      	cbz	r0, 225e0 <k_queue_append_list+0x40>
	z_spin_lock_set_owner(l);
   225ce:	4640      	mov	r0, r8
   225d0:	f7ff fc48 	bl	21e64 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   225d4:	f106 050c 	add.w	r5, r6, #12
   225d8:	4628      	mov	r0, r5
   225da:	f001 fcc1 	bl	23f60 <z_unpend_first_thread>
   225de:	e010      	b.n	22602 <k_queue_append_list+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225e0:	4c15      	ldr	r4, [pc, #84]	; (22638 <k_queue_append_list+0x98>)
   225e2:	2294      	movs	r2, #148	; 0x94
   225e4:	4621      	mov	r1, r4
   225e6:	4815      	ldr	r0, [pc, #84]	; (2263c <k_queue_append_list+0x9c>)
   225e8:	f006 fb11 	bl	28c0e <assert_print>
   225ec:	2194      	movs	r1, #148	; 0x94
   225ee:	4620      	mov	r0, r4
   225f0:	f006 fb06 	bl	28c00 <assert_post_action>
	}

	while ((head != NULL) && (thread != NULL)) {
		prepare_thread_to_run(thread, head);
   225f4:	4621      	mov	r1, r4
   225f6:	f00c fdd8 	bl	2f1aa <prepare_thread_to_run>
		head = *(void **)head;
   225fa:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   225fc:	4628      	mov	r0, r5
   225fe:	f001 fcaf 	bl	23f60 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   22602:	b10c      	cbz	r4, 22608 <k_queue_append_list+0x68>
   22604:	2800      	cmp	r0, #0
   22606:	d1f5      	bne.n	225f4 <k_queue_append_list+0x54>
	}

	if (head != NULL) {
   22608:	b124      	cbz	r4, 22614 <k_queue_append_list+0x74>
		sys_sflist_append_list(&queue->data_q, head, tail);
   2260a:	463a      	mov	r2, r7
   2260c:	4621      	mov	r1, r4
   2260e:	4630      	mov	r0, r6
   22610:	f00c fd95 	bl	2f13e <sys_sflist_append_list>
	z_handle_obj_poll_events(&queue->poll_events, state);
   22614:	2104      	movs	r1, #4
   22616:	f106 0014 	add.w	r0, r6, #20
   2261a:	f00c ffde 	bl	2f5da <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2261e:	4649      	mov	r1, r9
   22620:	4640      	mov	r0, r8
   22622:	f000 ff4f 	bl	234c4 <z_reschedule>
	return 0;
   22626:	2000      	movs	r0, #0
}
   22628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   2262c:	f06f 0015 	mvn.w	r0, #21
}
   22630:	4770      	bx	lr
		return -EINVAL;
   22632:	f06f 0015 	mvn.w	r0, #21
   22636:	e7f7      	b.n	22628 <k_queue_append_list+0x88>
   22638:	00030164 	.word	0x00030164
   2263c:	00030128 	.word	0x00030128

00022640 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   22640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22644:	b083      	sub	sp, #12
   22646:	4604      	mov	r4, r0
   22648:	4690      	mov	r8, r2
   2264a:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2264c:	f100 0508 	add.w	r5, r0, #8
   22650:	f04f 0340 	mov.w	r3, #64	; 0x40
   22654:	f3ef 8711 	mrs	r7, BASEPRI
   22658:	f383 8812 	msr	BASEPRI_MAX, r3
   2265c:	f3bf 8f6f 	isb	sy
   22660:	4628      	mov	r0, r5
   22662:	f7ff fbdf 	bl	21e24 <z_spin_lock_valid>
   22666:	b1e0      	cbz	r0, 226a2 <z_impl_k_queue_get+0x62>
   22668:	463e      	mov	r6, r7
	z_spin_lock_set_owner(l);
   2266a:	4628      	mov	r0, r5
   2266c:	f7ff fbfa 	bl	21e64 <z_spin_lock_set_owner>
	return list->head;
   22670:	6820      	ldr	r0, [r4, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   22672:	b360      	cbz	r0, 226ce <z_impl_k_queue_get+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22674:	6803      	ldr	r3, [r0, #0]
   22676:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   2267a:	6023      	str	r3, [r4, #0]
	return list->tail;
   2267c:	6862      	ldr	r2, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2267e:	4290      	cmp	r0, r2
   22680:	d019      	beq.n	226b6 <z_impl_k_queue_get+0x76>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   22682:	2101      	movs	r1, #1
   22684:	f00c fd99 	bl	2f1ba <z_queue_node_peek>
   22688:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2268a:	4628      	mov	r0, r5
   2268c:	f7ff fbda 	bl	21e44 <z_spin_unlock_valid>
   22690:	b198      	cbz	r0, 226ba <z_impl_k_queue_get+0x7a>
	__asm__ volatile(
   22692:	f386 8811 	msr	BASEPRI, r6
   22696:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2269a:	4620      	mov	r0, r4
   2269c:	b003      	add	sp, #12
   2269e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226a2:	4c1f      	ldr	r4, [pc, #124]	; (22720 <z_impl_k_queue_get+0xe0>)
   226a4:	2294      	movs	r2, #148	; 0x94
   226a6:	4621      	mov	r1, r4
   226a8:	481e      	ldr	r0, [pc, #120]	; (22724 <z_impl_k_queue_get+0xe4>)
   226aa:	f006 fab0 	bl	28c0e <assert_print>
   226ae:	2194      	movs	r1, #148	; 0x94
   226b0:	4620      	mov	r0, r4
   226b2:	f006 faa5 	bl	28c00 <assert_post_action>
	list->tail = node;
   226b6:	6063      	str	r3, [r4, #4]
}
   226b8:	e7e3      	b.n	22682 <z_impl_k_queue_get+0x42>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   226ba:	4c19      	ldr	r4, [pc, #100]	; (22720 <z_impl_k_queue_get+0xe0>)
   226bc:	22c2      	movs	r2, #194	; 0xc2
   226be:	4621      	mov	r1, r4
   226c0:	4818      	ldr	r0, [pc, #96]	; (22724 <z_impl_k_queue_get+0xe4>)
   226c2:	f006 faa4 	bl	28c0e <assert_print>
   226c6:	21c2      	movs	r1, #194	; 0xc2
   226c8:	4620      	mov	r0, r4
   226ca:	f006 fa99 	bl	28c00 <assert_post_action>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   226ce:	ea59 0308 	orrs.w	r3, r9, r8
   226d2:	d113      	bne.n	226fc <z_impl_k_queue_get+0xbc>
   226d4:	4628      	mov	r0, r5
   226d6:	f7ff fbb5 	bl	21e44 <z_spin_unlock_valid>
   226da:	b128      	cbz	r0, 226e8 <z_impl_k_queue_get+0xa8>
   226dc:	f387 8811 	msr	BASEPRI, r7
   226e0:	f3bf 8f6f 	isb	sy
		return NULL;
   226e4:	2400      	movs	r4, #0
   226e6:	e7d8      	b.n	2269a <z_impl_k_queue_get+0x5a>
   226e8:	4c0d      	ldr	r4, [pc, #52]	; (22720 <z_impl_k_queue_get+0xe0>)
   226ea:	22c2      	movs	r2, #194	; 0xc2
   226ec:	4621      	mov	r1, r4
   226ee:	480d      	ldr	r0, [pc, #52]	; (22724 <z_impl_k_queue_get+0xe4>)
   226f0:	f006 fa8d 	bl	28c0e <assert_print>
   226f4:	21c2      	movs	r1, #194	; 0xc2
   226f6:	4620      	mov	r0, r4
   226f8:	f006 fa82 	bl	28c00 <assert_post_action>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   226fc:	f8cd 8000 	str.w	r8, [sp]
   22700:	f8cd 9004 	str.w	r9, [sp, #4]
   22704:	f104 020c 	add.w	r2, r4, #12
   22708:	4639      	mov	r1, r7
   2270a:	4628      	mov	r0, r5
   2270c:	f001 fa3c 	bl	23b88 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   22710:	b918      	cbnz	r0, 2271a <z_impl_k_queue_get+0xda>
   22712:	4b05      	ldr	r3, [pc, #20]	; (22728 <z_impl_k_queue_get+0xe8>)
   22714:	689b      	ldr	r3, [r3, #8]
   22716:	695c      	ldr	r4, [r3, #20]
   22718:	e7bf      	b.n	2269a <z_impl_k_queue_get+0x5a>
   2271a:	2400      	movs	r4, #0
   2271c:	e7bd      	b.n	2269a <z_impl_k_queue_get+0x5a>
   2271e:	bf00      	nop
   22720:	00030164 	.word	0x00030164
   22724:	00030128 	.word	0x00030128
   22728:	20003ac0 	.word	0x20003ac0

0002272c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2272c:	b538      	push	{r3, r4, r5, lr}
   2272e:	4604      	mov	r4, r0
	__asm__ volatile(
   22730:	f04f 0340 	mov.w	r3, #64	; 0x40
   22734:	f3ef 8511 	mrs	r5, BASEPRI
   22738:	f383 8812 	msr	BASEPRI_MAX, r3
   2273c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22740:	4816      	ldr	r0, [pc, #88]	; (2279c <z_impl_k_sem_give+0x70>)
   22742:	f7ff fb6f 	bl	21e24 <z_spin_lock_valid>
   22746:	b180      	cbz	r0, 2276a <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
   22748:	4814      	ldr	r0, [pc, #80]	; (2279c <z_impl_k_sem_give+0x70>)
   2274a:	f7ff fb8b 	bl	21e64 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2274e:	4620      	mov	r0, r4
   22750:	f001 fc06 	bl	23f60 <z_unpend_first_thread>

	if (thread != NULL) {
   22754:	b198      	cbz	r0, 2277e <z_impl_k_sem_give+0x52>
   22756:	2200      	movs	r2, #0
   22758:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2275c:	f001 f8e0 	bl	23920 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   22760:	4629      	mov	r1, r5
   22762:	480e      	ldr	r0, [pc, #56]	; (2279c <z_impl_k_sem_give+0x70>)
   22764:	f000 feae 	bl	234c4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   22768:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2276a:	4c0d      	ldr	r4, [pc, #52]	; (227a0 <z_impl_k_sem_give+0x74>)
   2276c:	2294      	movs	r2, #148	; 0x94
   2276e:	4621      	mov	r1, r4
   22770:	480c      	ldr	r0, [pc, #48]	; (227a4 <z_impl_k_sem_give+0x78>)
   22772:	f006 fa4c 	bl	28c0e <assert_print>
   22776:	2194      	movs	r1, #148	; 0x94
   22778:	4620      	mov	r0, r4
   2277a:	f006 fa41 	bl	28c00 <assert_post_action>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2277e:	68a3      	ldr	r3, [r4, #8]
   22780:	68e2      	ldr	r2, [r4, #12]
   22782:	4293      	cmp	r3, r2
   22784:	d008      	beq.n	22798 <z_impl_k_sem_give+0x6c>
   22786:	2201      	movs	r2, #1
   22788:	4413      	add	r3, r2
   2278a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2278c:	2102      	movs	r1, #2
   2278e:	f104 0010 	add.w	r0, r4, #16
   22792:	f00c ff22 	bl	2f5da <z_handle_obj_poll_events>
}
   22796:	e7e3      	b.n	22760 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22798:	2200      	movs	r2, #0
   2279a:	e7f5      	b.n	22788 <z_impl_k_sem_give+0x5c>
   2279c:	20003af4 	.word	0x20003af4
   227a0:	00030164 	.word	0x00030164
   227a4:	00030128 	.word	0x00030128

000227a8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   227a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   227ac:	b082      	sub	sp, #8
   227ae:	4604      	mov	r4, r0
   227b0:	4617      	mov	r7, r2
   227b2:	461e      	mov	r6, r3
   227b4:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   227b8:	b111      	cbz	r1, 227c0 <z_impl_k_sem_take+0x18>
   227ba:	ea56 0302 	orrs.w	r3, r6, r2
   227be:	d11e      	bne.n	227fe <z_impl_k_sem_take+0x56>
   227c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   227c4:	f3ef 8511 	mrs	r5, BASEPRI
   227c8:	f383 8812 	msr	BASEPRI_MAX, r3
   227cc:	f3bf 8f6f 	isb	sy
   227d0:	482a      	ldr	r0, [pc, #168]	; (2287c <z_impl_k_sem_take+0xd4>)
   227d2:	f7ff fb27 	bl	21e24 <z_spin_lock_valid>
   227d6:	b1e0      	cbz	r0, 22812 <z_impl_k_sem_take+0x6a>
	z_spin_lock_set_owner(l);
   227d8:	4828      	ldr	r0, [pc, #160]	; (2287c <z_impl_k_sem_take+0xd4>)
   227da:	f7ff fb43 	bl	21e64 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   227de:	68a1      	ldr	r1, [r4, #8]
   227e0:	b359      	cbz	r1, 2283a <z_impl_k_sem_take+0x92>
		sem->count--;
   227e2:	3901      	subs	r1, #1
   227e4:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227e6:	4825      	ldr	r0, [pc, #148]	; (2287c <z_impl_k_sem_take+0xd4>)
   227e8:	f7ff fb2c 	bl	21e44 <z_spin_unlock_valid>
   227ec:	b1d8      	cbz	r0, 22826 <z_impl_k_sem_take+0x7e>
	__asm__ volatile(
   227ee:	f385 8811 	msr	BASEPRI, r5
   227f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   227f6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   227f8:	b002      	add	sp, #8
   227fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
   227fe:	4c20      	ldr	r4, [pc, #128]	; (22880 <z_impl_k_sem_take+0xd8>)
   22800:	2279      	movs	r2, #121	; 0x79
   22802:	4621      	mov	r1, r4
   22804:	481f      	ldr	r0, [pc, #124]	; (22884 <z_impl_k_sem_take+0xdc>)
   22806:	f006 fa02 	bl	28c0e <assert_print>
   2280a:	2179      	movs	r1, #121	; 0x79
   2280c:	4620      	mov	r0, r4
   2280e:	f006 f9f7 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22812:	4c1d      	ldr	r4, [pc, #116]	; (22888 <z_impl_k_sem_take+0xe0>)
   22814:	2294      	movs	r2, #148	; 0x94
   22816:	4621      	mov	r1, r4
   22818:	481a      	ldr	r0, [pc, #104]	; (22884 <z_impl_k_sem_take+0xdc>)
   2281a:	f006 f9f8 	bl	28c0e <assert_print>
   2281e:	2194      	movs	r1, #148	; 0x94
   22820:	4620      	mov	r0, r4
   22822:	f006 f9ed 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22826:	4c18      	ldr	r4, [pc, #96]	; (22888 <z_impl_k_sem_take+0xe0>)
   22828:	22c2      	movs	r2, #194	; 0xc2
   2282a:	4621      	mov	r1, r4
   2282c:	4815      	ldr	r0, [pc, #84]	; (22884 <z_impl_k_sem_take+0xdc>)
   2282e:	f006 f9ee 	bl	28c0e <assert_print>
   22832:	21c2      	movs	r1, #194	; 0xc2
   22834:	4620      	mov	r0, r4
   22836:	f006 f9e3 	bl	28c00 <assert_post_action>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2283a:	ea56 0307 	orrs.w	r3, r6, r7
   2283e:	d114      	bne.n	2286a <z_impl_k_sem_take+0xc2>
   22840:	480e      	ldr	r0, [pc, #56]	; (2287c <z_impl_k_sem_take+0xd4>)
   22842:	f7ff faff 	bl	21e44 <z_spin_unlock_valid>
   22846:	b130      	cbz	r0, 22856 <z_impl_k_sem_take+0xae>
   22848:	f385 8811 	msr	BASEPRI, r5
   2284c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   22850:	f06f 000f 	mvn.w	r0, #15
   22854:	e7d0      	b.n	227f8 <z_impl_k_sem_take+0x50>
   22856:	4c0c      	ldr	r4, [pc, #48]	; (22888 <z_impl_k_sem_take+0xe0>)
   22858:	22c2      	movs	r2, #194	; 0xc2
   2285a:	4621      	mov	r1, r4
   2285c:	4809      	ldr	r0, [pc, #36]	; (22884 <z_impl_k_sem_take+0xdc>)
   2285e:	f006 f9d6 	bl	28c0e <assert_print>
   22862:	21c2      	movs	r1, #194	; 0xc2
   22864:	4620      	mov	r0, r4
   22866:	f006 f9cb 	bl	28c00 <assert_post_action>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2286a:	9700      	str	r7, [sp, #0]
   2286c:	9601      	str	r6, [sp, #4]
   2286e:	4622      	mov	r2, r4
   22870:	4629      	mov	r1, r5
   22872:	4802      	ldr	r0, [pc, #8]	; (2287c <z_impl_k_sem_take+0xd4>)
   22874:	f001 f988 	bl	23b88 <z_pend_curr>
	return ret;
   22878:	e7be      	b.n	227f8 <z_impl_k_sem_take+0x50>
   2287a:	bf00      	nop
   2287c:	20003af4 	.word	0x20003af4
   22880:	00033ca0 	.word	0x00033ca0
   22884:	00030128 	.word	0x00030128
   22888:	00030164 	.word	0x00030164

0002288c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   2288c:	b538      	push	{r3, r4, r5, lr}
   2288e:	4604      	mov	r4, r0
	__asm__ volatile(
   22890:	f04f 0340 	mov.w	r3, #64	; 0x40
   22894:	f3ef 8511 	mrs	r5, BASEPRI
   22898:	f383 8812 	msr	BASEPRI_MAX, r3
   2289c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228a0:	4814      	ldr	r0, [pc, #80]	; (228f4 <z_impl_k_sem_reset+0x68>)
   228a2:	f7ff fabf 	bl	21e24 <z_spin_lock_valid>
   228a6:	b118      	cbz	r0, 228b0 <z_impl_k_sem_reset+0x24>
	z_spin_lock_set_owner(l);
   228a8:	4812      	ldr	r0, [pc, #72]	; (228f4 <z_impl_k_sem_reset+0x68>)
   228aa:	f7ff fadb 	bl	21e64 <z_spin_lock_set_owner>
	return k;
   228ae:	e00f      	b.n	228d0 <z_impl_k_sem_reset+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228b0:	4c11      	ldr	r4, [pc, #68]	; (228f8 <z_impl_k_sem_reset+0x6c>)
   228b2:	2294      	movs	r2, #148	; 0x94
   228b4:	4621      	mov	r1, r4
   228b6:	4811      	ldr	r0, [pc, #68]	; (228fc <z_impl_k_sem_reset+0x70>)
   228b8:	f006 f9a9 	bl	28c0e <assert_print>
   228bc:	2194      	movs	r1, #148	; 0x94
   228be:	4620      	mov	r0, r4
   228c0:	f006 f99e 	bl	28c00 <assert_post_action>
   228c4:	f06f 020a 	mvn.w	r2, #10
   228c8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   228cc:	f001 f828 	bl	23920 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   228d0:	4620      	mov	r0, r4
   228d2:	f001 fb45 	bl	23f60 <z_unpend_first_thread>
		if (thread == NULL) {
   228d6:	2800      	cmp	r0, #0
   228d8:	d1f4      	bne.n	228c4 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   228da:	2300      	movs	r3, #0
   228dc:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   228de:	2102      	movs	r1, #2
   228e0:	f104 0010 	add.w	r0, r4, #16
   228e4:	f00c fe79 	bl	2f5da <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   228e8:	4629      	mov	r1, r5
   228ea:	4802      	ldr	r0, [pc, #8]	; (228f4 <z_impl_k_sem_reset+0x68>)
   228ec:	f000 fdea 	bl	234c4 <z_reschedule>
}
   228f0:	bd38      	pop	{r3, r4, r5, pc}
   228f2:	bf00      	nop
   228f4:	20003af4 	.word	0x20003af4
   228f8:	00030164 	.word	0x00030164
   228fc:	00030128 	.word	0x00030128

00022900 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   22900:	b510      	push	{r4, lr}
   22902:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   22904:	4b08      	ldr	r3, [pc, #32]	; (22928 <k_sys_work_q_init+0x28>)
   22906:	9302      	str	r3, [sp, #8]
   22908:	2400      	movs	r4, #0
   2290a:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2290e:	ab02      	add	r3, sp, #8
   22910:	9300      	str	r3, [sp, #0]
   22912:	f04f 33ff 	mov.w	r3, #4294967295
   22916:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2291a:	4904      	ldr	r1, [pc, #16]	; (2292c <k_sys_work_q_init+0x2c>)
   2291c:	4804      	ldr	r0, [pc, #16]	; (22930 <k_sys_work_q_init+0x30>)
   2291e:	f000 fa95 	bl	22e4c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   22922:	4620      	mov	r0, r4
   22924:	b004      	add	sp, #16
   22926:	bd10      	pop	{r4, pc}
   22928:	00033cc0 	.word	0x00033cc0
   2292c:	20007500 	.word	0x20007500
   22930:	200021f8 	.word	0x200021f8

00022934 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   22934:	b370      	cbz	r0, 22994 <queue_submit_locked+0x60>
{
   22936:	b538      	push	{r3, r4, r5, lr}
   22938:	460d      	mov	r5, r1
   2293a:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2293c:	4b1b      	ldr	r3, [pc, #108]	; (229ac <queue_submit_locked+0x78>)
   2293e:	689b      	ldr	r3, [r3, #8]
   22940:	4283      	cmp	r3, r0
   22942:	d01b      	beq.n	2297c <queue_submit_locked+0x48>
   22944:	2300      	movs	r3, #0
   22946:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   22948:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   2294c:	f3c3 0180 	ubfx	r1, r3, #2, #1
   22950:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   22954:	f013 0f01 	tst.w	r3, #1
   22958:	d01f      	beq.n	2299a <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   2295a:	b101      	cbz	r1, 2295e <queue_submit_locked+0x2a>
   2295c:	b302      	cbz	r2, 229a0 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   2295e:	b100      	cbz	r0, 22962 <queue_submit_locked+0x2e>
   22960:	b309      	cbz	r1, 229a6 <queue_submit_locked+0x72>
	parent->next = child;
   22962:	2300      	movs	r3, #0
   22964:	602b      	str	r3, [r5, #0]
	return list->tail;
   22966:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   2296a:	b173      	cbz	r3, 2298a <queue_submit_locked+0x56>
	parent->next = child;
   2296c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2296e:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   22972:	4620      	mov	r0, r4
   22974:	f00c fcac 	bl	2f2d0 <notify_queue_locked>
		ret = 1;
   22978:	2001      	movs	r0, #1
	}

	return ret;
}
   2297a:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2297c:	f00c fb95 	bl	2f0aa <k_is_in_isr>
   22980:	b908      	cbnz	r0, 22986 <queue_submit_locked+0x52>
   22982:	2301      	movs	r3, #1
   22984:	e7df      	b.n	22946 <queue_submit_locked+0x12>
   22986:	2300      	movs	r3, #0
   22988:	e7dd      	b.n	22946 <queue_submit_locked+0x12>
   2298a:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   2298e:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   22992:	e7ee      	b.n	22972 <queue_submit_locked+0x3e>
		return -EINVAL;
   22994:	f06f 0015 	mvn.w	r0, #21
}
   22998:	4770      	bx	lr
		ret = -ENODEV;
   2299a:	f06f 0012 	mvn.w	r0, #18
   2299e:	e7ec      	b.n	2297a <queue_submit_locked+0x46>
		ret = -EBUSY;
   229a0:	f06f 000f 	mvn.w	r0, #15
   229a4:	e7e9      	b.n	2297a <queue_submit_locked+0x46>
		ret = -EBUSY;
   229a6:	f06f 000f 	mvn.w	r0, #15
   229aa:	e7e6      	b.n	2297a <queue_submit_locked+0x46>
   229ac:	20003ac0 	.word	0x20003ac0

000229b0 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   229b0:	b570      	push	{r4, r5, r6, lr}
   229b2:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   229b4:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   229b6:	f013 0f02 	tst.w	r3, #2
   229ba:	d12f      	bne.n	22a1c <submit_to_queue_locked+0x6c>
   229bc:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   229be:	f013 0f04 	tst.w	r3, #4
   229c2:	d130      	bne.n	22a26 <submit_to_queue_locked+0x76>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   229c4:	680b      	ldr	r3, [r1, #0]
   229c6:	b1b3      	cbz	r3, 229f6 <submit_to_queue_locked+0x46>
	return (*flagp & BIT(bit)) != 0U;
   229c8:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   229ca:	f013 0f01 	tst.w	r3, #1
   229ce:	d021      	beq.n	22a14 <submit_to_queue_locked+0x64>
			__ASSERT_NO_MSG(work->queue != NULL);
   229d0:	68a3      	ldr	r3, [r4, #8]
   229d2:	b19b      	cbz	r3, 229fc <submit_to_queue_locked+0x4c>
			*queuep = work->queue;
   229d4:	602b      	str	r3, [r5, #0]
			ret = 2;
   229d6:	2602      	movs	r6, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   229d8:	4621      	mov	r1, r4
   229da:	6828      	ldr	r0, [r5, #0]
   229dc:	f7ff ffaa 	bl	22934 <queue_submit_locked>

		if (rc < 0) {
   229e0:	2800      	cmp	r0, #0
   229e2:	db1d      	blt.n	22a20 <submit_to_queue_locked+0x70>
	*flagp |= BIT(bit);
   229e4:	68e3      	ldr	r3, [r4, #12]
   229e6:	f043 0304 	orr.w	r3, r3, #4
   229ea:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   229ec:	682b      	ldr	r3, [r5, #0]
   229ee:	60a3      	str	r3, [r4, #8]
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   229f0:	b196      	cbz	r6, 22a18 <submit_to_queue_locked+0x68>
   229f2:	4630      	mov	r0, r6
		*queuep = NULL;
	}

	return ret;
   229f4:	e016      	b.n	22a24 <submit_to_queue_locked+0x74>
			*queuep = work->queue;
   229f6:	6883      	ldr	r3, [r0, #8]
   229f8:	600b      	str	r3, [r1, #0]
   229fa:	e7e5      	b.n	229c8 <submit_to_queue_locked+0x18>
			__ASSERT_NO_MSG(work->queue != NULL);
   229fc:	4c0b      	ldr	r4, [pc, #44]	; (22a2c <submit_to_queue_locked+0x7c>)
   229fe:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   22a02:	4621      	mov	r1, r4
   22a04:	480a      	ldr	r0, [pc, #40]	; (22a30 <submit_to_queue_locked+0x80>)
   22a06:	f006 f902 	bl	28c0e <assert_print>
   22a0a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   22a0e:	4620      	mov	r0, r4
   22a10:	f006 f8f6 	bl	28c00 <assert_post_action>
		ret = 1;
   22a14:	2601      	movs	r6, #1
   22a16:	e7df      	b.n	229d8 <submit_to_queue_locked+0x28>
   22a18:	4630      	mov	r0, r6
   22a1a:	e001      	b.n	22a20 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   22a1c:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   22a20:	2300      	movs	r3, #0
   22a22:	602b      	str	r3, [r5, #0]
}
   22a24:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   22a26:	2000      	movs	r0, #0
   22a28:	e7fa      	b.n	22a20 <submit_to_queue_locked+0x70>
   22a2a:	bf00      	nop
   22a2c:	00033ccc 	.word	0x00033ccc
   22a30:	00030128 	.word	0x00030128

00022a34 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   22a34:	b570      	push	{r4, r5, r6, lr}
   22a36:	b082      	sub	sp, #8
   22a38:	4604      	mov	r4, r0
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
   22a3a:	f1a0 0610 	sub.w	r6, r0, #16
   22a3e:	f04f 0240 	mov.w	r2, #64	; 0x40
   22a42:	f3ef 8311 	mrs	r3, BASEPRI
   22a46:	f382 8812 	msr	BASEPRI_MAX, r2
   22a4a:	f3bf 8f6f 	isb	sy
   22a4e:	461d      	mov	r5, r3
   22a50:	481b      	ldr	r0, [pc, #108]	; (22ac0 <work_timeout+0x8c>)
   22a52:	f7ff f9e7 	bl	21e24 <z_spin_lock_valid>
   22a56:	b1b8      	cbz	r0, 22a88 <work_timeout+0x54>
	z_spin_lock_set_owner(l);
   22a58:	4819      	ldr	r0, [pc, #100]	; (22ac0 <work_timeout+0x8c>)
   22a5a:	f7ff fa03 	bl	21e64 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   22a5e:	2300      	movs	r3, #0
   22a60:	9301      	str	r3, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   22a62:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   22a66:	f023 0208 	bic.w	r2, r3, #8
   22a6a:	f844 2c04 	str.w	r2, [r4, #-4]
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22a6e:	f013 0f08 	tst.w	r3, #8
   22a72:	d113      	bne.n	22a9c <work_timeout+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a74:	4812      	ldr	r0, [pc, #72]	; (22ac0 <work_timeout+0x8c>)
   22a76:	f7ff f9e5 	bl	21e44 <z_spin_unlock_valid>
   22a7a:	b1b0      	cbz	r0, 22aaa <work_timeout+0x76>
	__asm__ volatile(
   22a7c:	f385 8811 	msr	BASEPRI, r5
   22a80:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
   22a84:	b002      	add	sp, #8
   22a86:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a88:	4c0e      	ldr	r4, [pc, #56]	; (22ac4 <work_timeout+0x90>)
   22a8a:	2294      	movs	r2, #148	; 0x94
   22a8c:	4621      	mov	r1, r4
   22a8e:	480e      	ldr	r0, [pc, #56]	; (22ac8 <work_timeout+0x94>)
   22a90:	f006 f8bd 	bl	28c0e <assert_print>
   22a94:	2194      	movs	r1, #148	; 0x94
   22a96:	4620      	mov	r0, r4
   22a98:	f006 f8b2 	bl	28c00 <assert_post_action>
		queue = dw->queue;
   22a9c:	69a3      	ldr	r3, [r4, #24]
   22a9e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   22aa0:	a901      	add	r1, sp, #4
   22aa2:	4630      	mov	r0, r6
   22aa4:	f7ff ff84 	bl	229b0 <submit_to_queue_locked>
   22aa8:	e7e4      	b.n	22a74 <work_timeout+0x40>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22aaa:	4c06      	ldr	r4, [pc, #24]	; (22ac4 <work_timeout+0x90>)
   22aac:	22c2      	movs	r2, #194	; 0xc2
   22aae:	4621      	mov	r1, r4
   22ab0:	4805      	ldr	r0, [pc, #20]	; (22ac8 <work_timeout+0x94>)
   22ab2:	f006 f8ac 	bl	28c0e <assert_print>
   22ab6:	21c2      	movs	r1, #194	; 0xc2
   22ab8:	4620      	mov	r0, r4
   22aba:	f006 f8a1 	bl	28c00 <assert_post_action>
   22abe:	bf00      	nop
   22ac0:	20003b00 	.word	0x20003b00
   22ac4:	00030164 	.word	0x00030164
   22ac8:	00030128 	.word	0x00030128

00022acc <finalize_cancel_locked>:
{
   22acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ace:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   22ad0:	68c3      	ldr	r3, [r0, #12]
   22ad2:	f023 0302 	bic.w	r3, r3, #2
   22ad6:	60c3      	str	r3, [r0, #12]
	return list->head;
   22ad8:	4b13      	ldr	r3, [pc, #76]	; (22b28 <finalize_cancel_locked+0x5c>)
   22ada:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22adc:	b185      	cbz	r5, 22b00 <finalize_cancel_locked+0x34>
	return node->next;
   22ade:	682c      	ldr	r4, [r5, #0]
   22ae0:	b104      	cbz	r4, 22ae4 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22ae2:	b10d      	cbz	r5, 22ae8 <finalize_cancel_locked+0x1c>
   22ae4:	2700      	movs	r7, #0
   22ae6:	e010      	b.n	22b0a <finalize_cancel_locked+0x3e>
   22ae8:	462c      	mov	r4, r5
   22aea:	e7fb      	b.n	22ae4 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   22aec:	462a      	mov	r2, r5
   22aee:	4639      	mov	r1, r7
   22af0:	480d      	ldr	r0, [pc, #52]	; (22b28 <finalize_cancel_locked+0x5c>)
   22af2:	f00c fba8 	bl	2f246 <sys_slist_remove>
			k_sem_give(&wc->sem);
   22af6:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   22afa:	f7ff fe17 	bl	2272c <z_impl_k_sem_give>
}
   22afe:	e009      	b.n	22b14 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22b00:	462c      	mov	r4, r5
   22b02:	e7ef      	b.n	22ae4 <finalize_cancel_locked+0x18>
   22b04:	4623      	mov	r3, r4
   22b06:	4625      	mov	r5, r4
   22b08:	461c      	mov	r4, r3
   22b0a:	b165      	cbz	r5, 22b26 <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   22b0c:	686b      	ldr	r3, [r5, #4]
   22b0e:	42b3      	cmp	r3, r6
   22b10:	d0ec      	beq.n	22aec <finalize_cancel_locked+0x20>
			prev = &wc->node;
   22b12:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22b14:	2c00      	cmp	r4, #0
   22b16:	d0f5      	beq.n	22b04 <finalize_cancel_locked+0x38>
	return node->next;
   22b18:	6823      	ldr	r3, [r4, #0]
   22b1a:	2b00      	cmp	r3, #0
   22b1c:	d0f3      	beq.n	22b06 <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22b1e:	2c00      	cmp	r4, #0
   22b20:	d1f1      	bne.n	22b06 <finalize_cancel_locked+0x3a>
   22b22:	4623      	mov	r3, r4
   22b24:	e7ef      	b.n	22b06 <finalize_cancel_locked+0x3a>
}
   22b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22b28:	20003af8 	.word	0x20003af8

00022b2c <init_work_cancel>:
{
   22b2c:	b538      	push	{r3, r4, r5, lr}
   22b2e:	4604      	mov	r4, r0
   22b30:	460d      	mov	r5, r1
	k_sem_init(&canceler->sem, 0, 1);
   22b32:	3008      	adds	r0, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   22b34:	2201      	movs	r2, #1
   22b36:	2100      	movs	r1, #0
   22b38:	f00c fb72 	bl	2f220 <z_impl_k_sem_init>
	canceler->work = work;
   22b3c:	6065      	str	r5, [r4, #4]
	parent->next = child;
   22b3e:	2300      	movs	r3, #0
   22b40:	6023      	str	r3, [r4, #0]
	return list->tail;
   22b42:	4b05      	ldr	r3, [pc, #20]	; (22b58 <init_work_cancel+0x2c>)
   22b44:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   22b46:	b11b      	cbz	r3, 22b50 <init_work_cancel+0x24>
	parent->next = child;
   22b48:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22b4a:	4b03      	ldr	r3, [pc, #12]	; (22b58 <init_work_cancel+0x2c>)
   22b4c:	605c      	str	r4, [r3, #4]
}
   22b4e:	bd38      	pop	{r3, r4, r5, pc}
   22b50:	4b01      	ldr	r3, [pc, #4]	; (22b58 <init_work_cancel+0x2c>)
   22b52:	605c      	str	r4, [r3, #4]
	list->head = node;
   22b54:	601c      	str	r4, [r3, #0]
}
   22b56:	e7fa      	b.n	22b4e <init_work_cancel+0x22>
   22b58:	20003af8 	.word	0x20003af8

00022b5c <work_queue_main>:
{
   22b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b5e:	b085      	sub	sp, #20
   22b60:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   22b62:	e020      	b.n	22ba6 <work_queue_main+0x4a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b64:	4c60      	ldr	r4, [pc, #384]	; (22ce8 <work_queue_main+0x18c>)
   22b66:	2294      	movs	r2, #148	; 0x94
   22b68:	4621      	mov	r1, r4
   22b6a:	4860      	ldr	r0, [pc, #384]	; (22cec <work_queue_main+0x190>)
   22b6c:	f006 f84f 	bl	28c0e <assert_print>
   22b70:	2194      	movs	r1, #148	; 0x94
   22b72:	4620      	mov	r0, r4
   22b74:	f006 f844 	bl	28c00 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   22b78:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   22b7c:	f023 0204 	bic.w	r2, r3, #4
   22b80:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   22b84:	f013 0f04 	tst.w	r3, #4
   22b88:	d176      	bne.n	22c78 <work_queue_main+0x11c>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   22b8a:	2300      	movs	r3, #0
   22b8c:	9302      	str	r3, [sp, #8]
   22b8e:	f04f 32ff 	mov.w	r2, #4294967295
   22b92:	f04f 33ff 	mov.w	r3, #4294967295
   22b96:	e9cd 2300 	strd	r2, r3, [sp]
   22b9a:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   22b9e:	4639      	mov	r1, r7
   22ba0:	4853      	ldr	r0, [pc, #332]	; (22cf0 <work_queue_main+0x194>)
   22ba2:	f001 fc87 	bl	244b4 <z_sched_wait>
	__asm__ volatile(
   22ba6:	f04f 0340 	mov.w	r3, #64	; 0x40
   22baa:	f3ef 8711 	mrs	r7, BASEPRI
   22bae:	f383 8812 	msr	BASEPRI_MAX, r3
   22bb2:	f3bf 8f6f 	isb	sy
   22bb6:	463e      	mov	r6, r7
   22bb8:	484d      	ldr	r0, [pc, #308]	; (22cf0 <work_queue_main+0x194>)
   22bba:	f7ff f933 	bl	21e24 <z_spin_lock_valid>
   22bbe:	2800      	cmp	r0, #0
   22bc0:	d0d0      	beq.n	22b64 <work_queue_main+0x8>
	z_spin_lock_set_owner(l);
   22bc2:	484b      	ldr	r0, [pc, #300]	; (22cf0 <work_queue_main+0x194>)
   22bc4:	f7ff f94e 	bl	21e64 <z_spin_lock_set_owner>
	return list->head;
   22bc8:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   22bcc:	2c00      	cmp	r4, #0
   22bce:	d0d3      	beq.n	22b78 <work_queue_main+0x1c>
	return node->next;
   22bd0:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   22bd2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   22bd6:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22bda:	4294      	cmp	r4, r2
   22bdc:	d049      	beq.n	22c72 <work_queue_main+0x116>
	*flagp |= BIT(bit);
   22bde:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   22be2:	f043 0302 	orr.w	r3, r3, #2
   22be6:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   22bea:	68e3      	ldr	r3, [r4, #12]
   22bec:	f043 0201 	orr.w	r2, r3, #1
   22bf0:	60e2      	str	r2, [r4, #12]
	*flagp &= ~BIT(bit);
   22bf2:	f023 0304 	bic.w	r3, r3, #4
   22bf6:	f043 0301 	orr.w	r3, r3, #1
   22bfa:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   22bfc:	6867      	ldr	r7, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bfe:	483c      	ldr	r0, [pc, #240]	; (22cf0 <work_queue_main+0x194>)
   22c00:	f7ff f920 	bl	21e44 <z_spin_unlock_valid>
   22c04:	2800      	cmp	r0, #0
   22c06:	d041      	beq.n	22c8c <work_queue_main+0x130>
	__asm__ volatile(
   22c08:	f386 8811 	msr	BASEPRI, r6
   22c0c:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(handler != NULL);
   22c10:	2f00      	cmp	r7, #0
   22c12:	d045      	beq.n	22ca0 <work_queue_main+0x144>
		handler(work);
   22c14:	4620      	mov	r0, r4
   22c16:	47b8      	blx	r7
	__asm__ volatile(
   22c18:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c1c:	f3ef 8611 	mrs	r6, BASEPRI
   22c20:	f383 8812 	msr	BASEPRI_MAX, r3
   22c24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c28:	4831      	ldr	r0, [pc, #196]	; (22cf0 <work_queue_main+0x194>)
   22c2a:	f7ff f8fb 	bl	21e24 <z_spin_lock_valid>
   22c2e:	2800      	cmp	r0, #0
   22c30:	d042      	beq.n	22cb8 <work_queue_main+0x15c>
	z_spin_lock_set_owner(l);
   22c32:	482f      	ldr	r0, [pc, #188]	; (22cf0 <work_queue_main+0x194>)
   22c34:	f7ff f916 	bl	21e64 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   22c38:	68e3      	ldr	r3, [r4, #12]
   22c3a:	f023 0301 	bic.w	r3, r3, #1
   22c3e:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22c40:	f013 0f02 	tst.w	r3, #2
   22c44:	d142      	bne.n	22ccc <work_queue_main+0x170>
	*flagp &= ~BIT(bit);
   22c46:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   22c4a:	f023 0302 	bic.w	r3, r3, #2
   22c4e:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   22c52:	f3c3 2400 	ubfx	r4, r3, #8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c56:	4826      	ldr	r0, [pc, #152]	; (22cf0 <work_queue_main+0x194>)
   22c58:	f7ff f8f4 	bl	21e44 <z_spin_unlock_valid>
   22c5c:	2800      	cmp	r0, #0
   22c5e:	d039      	beq.n	22cd4 <work_queue_main+0x178>
	__asm__ volatile(
   22c60:	f386 8811 	msr	BASEPRI, r6
   22c64:	f3bf 8f6f 	isb	sy
		if (yield) {
   22c68:	2c00      	cmp	r4, #0
   22c6a:	d19c      	bne.n	22ba6 <work_queue_main+0x4a>
	z_impl_k_yield();
   22c6c:	f001 f9cc 	bl	24008 <z_impl_k_yield>
}
   22c70:	e799      	b.n	22ba6 <work_queue_main+0x4a>
	list->tail = node;
   22c72:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   22c76:	e7b2      	b.n	22bde <work_queue_main+0x82>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   22c78:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   22c7c:	2200      	movs	r2, #0
   22c7e:	2101      	movs	r1, #1
   22c80:	4620      	mov	r0, r4
   22c82:	f001 fbc1 	bl	24408 <z_sched_wake>
   22c86:	2800      	cmp	r0, #0
   22c88:	d1f8      	bne.n	22c7c <work_queue_main+0x120>
   22c8a:	e77e      	b.n	22b8a <work_queue_main+0x2e>
   22c8c:	4c16      	ldr	r4, [pc, #88]	; (22ce8 <work_queue_main+0x18c>)
   22c8e:	22c2      	movs	r2, #194	; 0xc2
   22c90:	4621      	mov	r1, r4
   22c92:	4816      	ldr	r0, [pc, #88]	; (22cec <work_queue_main+0x190>)
   22c94:	f005 ffbb 	bl	28c0e <assert_print>
   22c98:	21c2      	movs	r1, #194	; 0xc2
   22c9a:	4620      	mov	r0, r4
   22c9c:	f005 ffb0 	bl	28c00 <assert_post_action>
		__ASSERT_NO_MSG(handler != NULL);
   22ca0:	4c14      	ldr	r4, [pc, #80]	; (22cf4 <work_queue_main+0x198>)
   22ca2:	f240 229b 	movw	r2, #667	; 0x29b
   22ca6:	4621      	mov	r1, r4
   22ca8:	4810      	ldr	r0, [pc, #64]	; (22cec <work_queue_main+0x190>)
   22caa:	f005 ffb0 	bl	28c0e <assert_print>
   22cae:	f240 219b 	movw	r1, #667	; 0x29b
   22cb2:	4620      	mov	r0, r4
   22cb4:	f005 ffa4 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cb8:	4c0b      	ldr	r4, [pc, #44]	; (22ce8 <work_queue_main+0x18c>)
   22cba:	2294      	movs	r2, #148	; 0x94
   22cbc:	4621      	mov	r1, r4
   22cbe:	480b      	ldr	r0, [pc, #44]	; (22cec <work_queue_main+0x190>)
   22cc0:	f005 ffa5 	bl	28c0e <assert_print>
   22cc4:	2194      	movs	r1, #148	; 0x94
   22cc6:	4620      	mov	r0, r4
   22cc8:	f005 ff9a 	bl	28c00 <assert_post_action>
			finalize_cancel_locked(work);
   22ccc:	4620      	mov	r0, r4
   22cce:	f7ff fefd 	bl	22acc <finalize_cancel_locked>
   22cd2:	e7b8      	b.n	22c46 <work_queue_main+0xea>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cd4:	4c04      	ldr	r4, [pc, #16]	; (22ce8 <work_queue_main+0x18c>)
   22cd6:	22c2      	movs	r2, #194	; 0xc2
   22cd8:	4621      	mov	r1, r4
   22cda:	4804      	ldr	r0, [pc, #16]	; (22cec <work_queue_main+0x190>)
   22cdc:	f005 ff97 	bl	28c0e <assert_print>
   22ce0:	21c2      	movs	r1, #194	; 0xc2
   22ce2:	4620      	mov	r0, r4
   22ce4:	f005 ff8c 	bl	28c00 <assert_post_action>
   22ce8:	00030164 	.word	0x00030164
   22cec:	00030128 	.word	0x00030128
   22cf0:	20003b00 	.word	0x20003b00
   22cf4:	00033ccc 	.word	0x00033ccc

00022cf8 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   22cf8:	b508      	push	{r3, lr}
   22cfa:	4684      	mov	ip, r0
   22cfc:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22cfe:	ea53 0102 	orrs.w	r1, r3, r2
   22d02:	d00c      	beq.n	22d1e <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   22d04:	68c1      	ldr	r1, [r0, #12]
   22d06:	f041 0108 	orr.w	r1, r1, #8
   22d0a:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   22d0c:	f8dc 1000 	ldr.w	r1, [ip]
   22d10:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22d12:	4905      	ldr	r1, [pc, #20]	; (22d28 <schedule_for_queue_locked+0x30>)
   22d14:	3010      	adds	r0, #16
   22d16:	f001 fc43 	bl	245a0 <z_add_timeout>

	return ret;
   22d1a:	2001      	movs	r0, #1
}
   22d1c:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   22d1e:	4661      	mov	r1, ip
   22d20:	f7ff fe46 	bl	229b0 <submit_to_queue_locked>
   22d24:	e7fa      	b.n	22d1c <schedule_for_queue_locked+0x24>
   22d26:	bf00      	nop
   22d28:	00022a35 	.word	0x00022a35

00022d2c <k_work_init>:
{
   22d2c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(work != NULL);
   22d2e:	b138      	cbz	r0, 22d40 <k_work_init+0x14>
	__ASSERT_NO_MSG(handler != NULL);
   22d30:	b181      	cbz	r1, 22d54 <k_work_init+0x28>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22d32:	2200      	movs	r2, #0
   22d34:	6002      	str	r2, [r0, #0]
   22d36:	6042      	str	r2, [r0, #4]
   22d38:	6082      	str	r2, [r0, #8]
   22d3a:	60c2      	str	r2, [r0, #12]
   22d3c:	6041      	str	r1, [r0, #4]
}
   22d3e:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(work != NULL);
   22d40:	4c09      	ldr	r4, [pc, #36]	; (22d68 <k_work_init+0x3c>)
   22d42:	2289      	movs	r2, #137	; 0x89
   22d44:	4621      	mov	r1, r4
   22d46:	4809      	ldr	r0, [pc, #36]	; (22d6c <k_work_init+0x40>)
   22d48:	f005 ff61 	bl	28c0e <assert_print>
   22d4c:	2189      	movs	r1, #137	; 0x89
   22d4e:	4620      	mov	r0, r4
   22d50:	f005 ff56 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   22d54:	4c04      	ldr	r4, [pc, #16]	; (22d68 <k_work_init+0x3c>)
   22d56:	228a      	movs	r2, #138	; 0x8a
   22d58:	4621      	mov	r1, r4
   22d5a:	4804      	ldr	r0, [pc, #16]	; (22d6c <k_work_init+0x40>)
   22d5c:	f005 ff57 	bl	28c0e <assert_print>
   22d60:	218a      	movs	r1, #138	; 0x8a
   22d62:	4620      	mov	r0, r4
   22d64:	f005 ff4c 	bl	28c00 <assert_post_action>
   22d68:	00033ccc 	.word	0x00033ccc
   22d6c:	00030128 	.word	0x00030128

00022d70 <z_work_submit_to_queue>:
{
   22d70:	b570      	push	{r4, r5, r6, lr}
   22d72:	b082      	sub	sp, #8
   22d74:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   22d76:	b309      	cbz	r1, 22dbc <z_work_submit_to_queue+0x4c>
   22d78:	460c      	mov	r4, r1
	__asm__ volatile(
   22d7a:	f04f 0240 	mov.w	r2, #64	; 0x40
   22d7e:	f3ef 8311 	mrs	r3, BASEPRI
   22d82:	f382 8812 	msr	BASEPRI_MAX, r2
   22d86:	f3bf 8f6f 	isb	sy
   22d8a:	461d      	mov	r5, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d8c:	481b      	ldr	r0, [pc, #108]	; (22dfc <z_work_submit_to_queue+0x8c>)
   22d8e:	f7ff f849 	bl	21e24 <z_spin_lock_valid>
   22d92:	b1f8      	cbz	r0, 22dd4 <z_work_submit_to_queue+0x64>
	z_spin_lock_set_owner(l);
   22d94:	4e19      	ldr	r6, [pc, #100]	; (22dfc <z_work_submit_to_queue+0x8c>)
   22d96:	4630      	mov	r0, r6
   22d98:	f7ff f864 	bl	21e64 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   22d9c:	a901      	add	r1, sp, #4
   22d9e:	4620      	mov	r0, r4
   22da0:	f7ff fe06 	bl	229b0 <submit_to_queue_locked>
   22da4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22da6:	4630      	mov	r0, r6
   22da8:	f7ff f84c 	bl	21e44 <z_spin_unlock_valid>
   22dac:	b1e0      	cbz	r0, 22de8 <z_work_submit_to_queue+0x78>
	__asm__ volatile(
   22dae:	f385 8811 	msr	BASEPRI, r5
   22db2:	f3bf 8f6f 	isb	sy
}
   22db6:	4620      	mov	r0, r4
   22db8:	b002      	add	sp, #8
   22dba:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   22dbc:	4c10      	ldr	r4, [pc, #64]	; (22e00 <z_work_submit_to_queue+0x90>)
   22dbe:	f44f 72ba 	mov.w	r2, #372	; 0x174
   22dc2:	4621      	mov	r1, r4
   22dc4:	480f      	ldr	r0, [pc, #60]	; (22e04 <z_work_submit_to_queue+0x94>)
   22dc6:	f005 ff22 	bl	28c0e <assert_print>
   22dca:	f44f 71ba 	mov.w	r1, #372	; 0x174
   22dce:	4620      	mov	r0, r4
   22dd0:	f005 ff16 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22dd4:	4c0c      	ldr	r4, [pc, #48]	; (22e08 <z_work_submit_to_queue+0x98>)
   22dd6:	2294      	movs	r2, #148	; 0x94
   22dd8:	4621      	mov	r1, r4
   22dda:	480a      	ldr	r0, [pc, #40]	; (22e04 <z_work_submit_to_queue+0x94>)
   22ddc:	f005 ff17 	bl	28c0e <assert_print>
   22de0:	2194      	movs	r1, #148	; 0x94
   22de2:	4620      	mov	r0, r4
   22de4:	f005 ff0c 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22de8:	4c07      	ldr	r4, [pc, #28]	; (22e08 <z_work_submit_to_queue+0x98>)
   22dea:	22c2      	movs	r2, #194	; 0xc2
   22dec:	4621      	mov	r1, r4
   22dee:	4805      	ldr	r0, [pc, #20]	; (22e04 <z_work_submit_to_queue+0x94>)
   22df0:	f005 ff0d 	bl	28c0e <assert_print>
   22df4:	21c2      	movs	r1, #194	; 0xc2
   22df6:	4620      	mov	r0, r4
   22df8:	f005 ff02 	bl	28c00 <assert_post_action>
   22dfc:	20003b00 	.word	0x20003b00
   22e00:	00033ccc 	.word	0x00033ccc
   22e04:	00030128 	.word	0x00030128
   22e08:	00030164 	.word	0x00030164

00022e0c <k_work_submit>:
{
   22e0c:	b508      	push	{r3, lr}
   22e0e:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   22e10:	4801      	ldr	r0, [pc, #4]	; (22e18 <k_work_submit+0xc>)
   22e12:	f00c fa99 	bl	2f348 <k_work_submit_to_queue>
}
   22e16:	bd08      	pop	{r3, pc}
   22e18:	200021f8 	.word	0x200021f8

00022e1c <k_work_queue_init>:
{
   22e1c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(queue != NULL);
   22e1e:	b120      	cbz	r0, 22e2a <k_work_queue_init+0xe>
	*queue = (struct k_work_q) {
   22e20:	22d8      	movs	r2, #216	; 0xd8
   22e22:	2100      	movs	r1, #0
   22e24:	f006 ffe1 	bl	29dea <memset>
}
   22e28:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(queue != NULL);
   22e2a:	4c06      	ldr	r4, [pc, #24]	; (22e44 <k_work_queue_init+0x28>)
   22e2c:	f240 22b9 	movw	r2, #697	; 0x2b9
   22e30:	4621      	mov	r1, r4
   22e32:	4805      	ldr	r0, [pc, #20]	; (22e48 <k_work_queue_init+0x2c>)
   22e34:	f005 feeb 	bl	28c0e <assert_print>
   22e38:	f240 21b9 	movw	r1, #697	; 0x2b9
   22e3c:	4620      	mov	r0, r4
   22e3e:	f005 fedf 	bl	28c00 <assert_post_action>
   22e42:	bf00      	nop
   22e44:	00033ccc 	.word	0x00033ccc
   22e48:	00030128 	.word	0x00030128

00022e4c <k_work_queue_start>:
{
   22e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   22e4e:	b089      	sub	sp, #36	; 0x24
   22e50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   22e52:	2800      	cmp	r0, #0
   22e54:	d03b      	beq.n	22ece <k_work_queue_start+0x82>
   22e56:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(stack);
   22e58:	2900      	cmp	r1, #0
   22e5a:	d044      	beq.n	22ee6 <k_work_queue_start+0x9a>
	return (*flagp & BIT(bit)) != 0U;
   22e5c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   22e60:	f010 0f01 	tst.w	r0, #1
   22e64:	d14b      	bne.n	22efe <k_work_queue_start+0xb2>
	list->head = NULL;
   22e66:	2000      	movs	r0, #0
   22e68:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   22e6c:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   22e70:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   22e74:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   22e78:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   22e7c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   22e80:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   22e84:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   22e88:	2d00      	cmp	r5, #0
   22e8a:	d044      	beq.n	22f16 <k_work_queue_start+0xca>
   22e8c:	7928      	ldrb	r0, [r5, #4]
   22e8e:	2800      	cmp	r0, #0
   22e90:	d143      	bne.n	22f1a <k_work_queue_start+0xce>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22e92:	2001      	movs	r0, #1
	*flagp = flags;
   22e94:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22e98:	f04f 36ff 	mov.w	r6, #4294967295
   22e9c:	f04f 37ff 	mov.w	r7, #4294967295
   22ea0:	e9cd 6706 	strd	r6, r7, [sp, #24]
   22ea4:	2000      	movs	r0, #0
   22ea6:	9004      	str	r0, [sp, #16]
   22ea8:	9303      	str	r3, [sp, #12]
   22eaa:	9002      	str	r0, [sp, #8]
   22eac:	9001      	str	r0, [sp, #4]
   22eae:	9400      	str	r4, [sp, #0]
   22eb0:	4b1b      	ldr	r3, [pc, #108]	; (22f20 <k_work_queue_start+0xd4>)
   22eb2:	4620      	mov	r0, r4
   22eb4:	f7ff f8ca 	bl	2204c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   22eb8:	b125      	cbz	r5, 22ec4 <k_work_queue_start+0x78>
   22eba:	6829      	ldr	r1, [r5, #0]
   22ebc:	b111      	cbz	r1, 22ec4 <k_work_queue_start+0x78>
	return z_impl_k_thread_name_set(thread, str);
   22ebe:	4620      	mov	r0, r4
   22ec0:	f7fe ff90 	bl	21de4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   22ec4:	4620      	mov	r0, r4
   22ec6:	f00c f8f8 	bl	2f0ba <z_impl_k_thread_start>
}
   22eca:	b009      	add	sp, #36	; 0x24
   22ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(queue);
   22ece:	4c15      	ldr	r4, [pc, #84]	; (22f24 <k_work_queue_start+0xd8>)
   22ed0:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   22ed4:	4621      	mov	r1, r4
   22ed6:	4814      	ldr	r0, [pc, #80]	; (22f28 <k_work_queue_start+0xdc>)
   22ed8:	f005 fe99 	bl	28c0e <assert_print>
   22edc:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   22ee0:	4620      	mov	r0, r4
   22ee2:	f005 fe8d 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   22ee6:	4c0f      	ldr	r4, [pc, #60]	; (22f24 <k_work_queue_start+0xd8>)
   22ee8:	f240 22c9 	movw	r2, #713	; 0x2c9
   22eec:	4621      	mov	r1, r4
   22eee:	480e      	ldr	r0, [pc, #56]	; (22f28 <k_work_queue_start+0xdc>)
   22ef0:	f005 fe8d 	bl	28c0e <assert_print>
   22ef4:	f240 21c9 	movw	r1, #713	; 0x2c9
   22ef8:	4620      	mov	r0, r4
   22efa:	f005 fe81 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   22efe:	4c09      	ldr	r4, [pc, #36]	; (22f24 <k_work_queue_start+0xd8>)
   22f00:	f240 22ca 	movw	r2, #714	; 0x2ca
   22f04:	4621      	mov	r1, r4
   22f06:	4808      	ldr	r0, [pc, #32]	; (22f28 <k_work_queue_start+0xdc>)
   22f08:	f005 fe81 	bl	28c0e <assert_print>
   22f0c:	f240 21ca 	movw	r1, #714	; 0x2ca
   22f10:	4620      	mov	r0, r4
   22f12:	f005 fe75 	bl	28c00 <assert_post_action>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22f16:	2001      	movs	r0, #1
   22f18:	e7bc      	b.n	22e94 <k_work_queue_start+0x48>
		flags |= K_WORK_QUEUE_NO_YIELD;
   22f1a:	f240 1001 	movw	r0, #257	; 0x101
   22f1e:	e7b9      	b.n	22e94 <k_work_queue_start+0x48>
   22f20:	00022b5d 	.word	0x00022b5d
   22f24:	00033ccc 	.word	0x00033ccc
   22f28:	00030128 	.word	0x00030128

00022f2c <k_work_init_delayable>:
{
   22f2c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   22f2e:	b158      	cbz	r0, 22f48 <k_work_init_delayable+0x1c>
   22f30:	460c      	mov	r4, r1
   22f32:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(handler != NULL);
   22f34:	b1a1      	cbz	r1, 22f60 <k_work_init_delayable+0x34>
	*dwork = (struct k_work_delayable){
   22f36:	2230      	movs	r2, #48	; 0x30
   22f38:	2100      	movs	r1, #0
   22f3a:	f006 ff56 	bl	29dea <memset>
   22f3e:	606c      	str	r4, [r5, #4]
   22f40:	f44f 7380 	mov.w	r3, #256	; 0x100
   22f44:	60eb      	str	r3, [r5, #12]
}
   22f46:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   22f48:	4c0b      	ldr	r4, [pc, #44]	; (22f78 <k_work_init_delayable+0x4c>)
   22f4a:	f44f 7250 	mov.w	r2, #832	; 0x340
   22f4e:	4621      	mov	r1, r4
   22f50:	480a      	ldr	r0, [pc, #40]	; (22f7c <k_work_init_delayable+0x50>)
   22f52:	f005 fe5c 	bl	28c0e <assert_print>
   22f56:	f44f 7150 	mov.w	r1, #832	; 0x340
   22f5a:	4620      	mov	r0, r4
   22f5c:	f005 fe50 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   22f60:	4c05      	ldr	r4, [pc, #20]	; (22f78 <k_work_init_delayable+0x4c>)
   22f62:	f240 3241 	movw	r2, #833	; 0x341
   22f66:	4621      	mov	r1, r4
   22f68:	4804      	ldr	r0, [pc, #16]	; (22f7c <k_work_init_delayable+0x50>)
   22f6a:	f005 fe50 	bl	28c0e <assert_print>
   22f6e:	f240 3141 	movw	r1, #833	; 0x341
   22f72:	4620      	mov	r0, r4
   22f74:	f005 fe44 	bl	28c00 <assert_post_action>
   22f78:	00033ccc 	.word	0x00033ccc
   22f7c:	00030128 	.word	0x00030128

00022f80 <k_work_delayable_busy_get>:
{
   22f80:	b570      	push	{r4, r5, r6, lr}
   22f82:	4605      	mov	r5, r0
	__asm__ volatile(
   22f84:	f04f 0240 	mov.w	r2, #64	; 0x40
   22f88:	f3ef 8311 	mrs	r3, BASEPRI
   22f8c:	f382 8812 	msr	BASEPRI_MAX, r2
   22f90:	f3bf 8f6f 	isb	sy
   22f94:	461c      	mov	r4, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f96:	4814      	ldr	r0, [pc, #80]	; (22fe8 <k_work_delayable_busy_get+0x68>)
   22f98:	f7fe ff44 	bl	21e24 <z_spin_lock_valid>
   22f9c:	b180      	cbz	r0, 22fc0 <k_work_delayable_busy_get+0x40>
	z_spin_lock_set_owner(l);
   22f9e:	4e12      	ldr	r6, [pc, #72]	; (22fe8 <k_work_delayable_busy_get+0x68>)
   22fa0:	4630      	mov	r0, r6
   22fa2:	f7fe ff5f 	bl	21e64 <z_spin_lock_set_owner>
	return *flagp;
   22fa6:	68ed      	ldr	r5, [r5, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   22fa8:	f005 050f 	and.w	r5, r5, #15
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fac:	4630      	mov	r0, r6
   22fae:	f7fe ff49 	bl	21e44 <z_spin_unlock_valid>
   22fb2:	b178      	cbz	r0, 22fd4 <k_work_delayable_busy_get+0x54>
	__asm__ volatile(
   22fb4:	f384 8811 	msr	BASEPRI, r4
   22fb8:	f3bf 8f6f 	isb	sy
}
   22fbc:	4628      	mov	r0, r5
   22fbe:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22fc0:	4c0a      	ldr	r4, [pc, #40]	; (22fec <k_work_delayable_busy_get+0x6c>)
   22fc2:	2294      	movs	r2, #148	; 0x94
   22fc4:	4621      	mov	r1, r4
   22fc6:	480a      	ldr	r0, [pc, #40]	; (22ff0 <k_work_delayable_busy_get+0x70>)
   22fc8:	f005 fe21 	bl	28c0e <assert_print>
   22fcc:	2194      	movs	r1, #148	; 0x94
   22fce:	4620      	mov	r0, r4
   22fd0:	f005 fe16 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fd4:	4c05      	ldr	r4, [pc, #20]	; (22fec <k_work_delayable_busy_get+0x6c>)
   22fd6:	22c2      	movs	r2, #194	; 0xc2
   22fd8:	4621      	mov	r1, r4
   22fda:	4805      	ldr	r0, [pc, #20]	; (22ff0 <k_work_delayable_busy_get+0x70>)
   22fdc:	f005 fe17 	bl	28c0e <assert_print>
   22fe0:	21c2      	movs	r1, #194	; 0xc2
   22fe2:	4620      	mov	r0, r4
   22fe4:	f005 fe0c 	bl	28c00 <assert_post_action>
   22fe8:	20003b00 	.word	0x20003b00
   22fec:	00030164 	.word	0x00030164
   22ff0:	00030128 	.word	0x00030128

00022ff4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   22ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22ff6:	b083      	sub	sp, #12
   22ff8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   22ffa:	b309      	cbz	r1, 23040 <k_work_schedule_for_queue+0x4c>
   22ffc:	4617      	mov	r7, r2
   22ffe:	461e      	mov	r6, r3
   23000:	460d      	mov	r5, r1
	__asm__ volatile(
   23002:	f04f 0340 	mov.w	r3, #64	; 0x40
   23006:	f3ef 8411 	mrs	r4, BASEPRI
   2300a:	f383 8812 	msr	BASEPRI_MAX, r3
   2300e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23012:	481f      	ldr	r0, [pc, #124]	; (23090 <k_work_schedule_for_queue+0x9c>)
   23014:	f7fe ff06 	bl	21e24 <z_spin_lock_valid>
   23018:	b1f0      	cbz	r0, 23058 <k_work_schedule_for_queue+0x64>
	z_spin_lock_set_owner(l);
   2301a:	481d      	ldr	r0, [pc, #116]	; (23090 <k_work_schedule_for_queue+0x9c>)
   2301c:	f7fe ff22 	bl	21e64 <z_spin_lock_set_owner>
	return *flagp;
   23020:	68eb      	ldr	r3, [r5, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   23022:	f013 0f0e 	tst.w	r3, #14
   23026:	d021      	beq.n	2306c <k_work_schedule_for_queue+0x78>
	int ret = 0;
   23028:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2302a:	4819      	ldr	r0, [pc, #100]	; (23090 <k_work_schedule_for_queue+0x9c>)
   2302c:	f7fe ff0a 	bl	21e44 <z_spin_unlock_valid>
   23030:	b320      	cbz	r0, 2307c <k_work_schedule_for_queue+0x88>
	__asm__ volatile(
   23032:	f384 8811 	msr	BASEPRI, r4
   23036:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2303a:	4628      	mov	r0, r5
   2303c:	b003      	add	sp, #12
   2303e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   23040:	4c14      	ldr	r4, [pc, #80]	; (23094 <k_work_schedule_for_queue+0xa0>)
   23042:	f240 32b7 	movw	r2, #951	; 0x3b7
   23046:	4621      	mov	r1, r4
   23048:	4813      	ldr	r0, [pc, #76]	; (23098 <k_work_schedule_for_queue+0xa4>)
   2304a:	f005 fde0 	bl	28c0e <assert_print>
   2304e:	f240 31b7 	movw	r1, #951	; 0x3b7
   23052:	4620      	mov	r0, r4
   23054:	f005 fdd4 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23058:	4c10      	ldr	r4, [pc, #64]	; (2309c <k_work_schedule_for_queue+0xa8>)
   2305a:	2294      	movs	r2, #148	; 0x94
   2305c:	4621      	mov	r1, r4
   2305e:	480e      	ldr	r0, [pc, #56]	; (23098 <k_work_schedule_for_queue+0xa4>)
   23060:	f005 fdd5 	bl	28c0e <assert_print>
   23064:	2194      	movs	r1, #148	; 0x94
   23066:	4620      	mov	r0, r4
   23068:	f005 fdca 	bl	28c00 <assert_post_action>
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   2306c:	463a      	mov	r2, r7
   2306e:	4633      	mov	r3, r6
   23070:	4629      	mov	r1, r5
   23072:	a801      	add	r0, sp, #4
   23074:	f7ff fe40 	bl	22cf8 <schedule_for_queue_locked>
   23078:	4605      	mov	r5, r0
   2307a:	e7d6      	b.n	2302a <k_work_schedule_for_queue+0x36>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2307c:	4c07      	ldr	r4, [pc, #28]	; (2309c <k_work_schedule_for_queue+0xa8>)
   2307e:	22c2      	movs	r2, #194	; 0xc2
   23080:	4621      	mov	r1, r4
   23082:	4805      	ldr	r0, [pc, #20]	; (23098 <k_work_schedule_for_queue+0xa4>)
   23084:	f005 fdc3 	bl	28c0e <assert_print>
   23088:	21c2      	movs	r1, #194	; 0xc2
   2308a:	4620      	mov	r0, r4
   2308c:	f005 fdb8 	bl	28c00 <assert_post_action>
   23090:	20003b00 	.word	0x20003b00
   23094:	00033ccc 	.word	0x00033ccc
   23098:	00030128 	.word	0x00030128
   2309c:	00030164 	.word	0x00030164

000230a0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   230a0:	b508      	push	{r3, lr}
   230a2:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   230a4:	4801      	ldr	r0, [pc, #4]	; (230ac <k_work_schedule+0xc>)
   230a6:	f7ff ffa5 	bl	22ff4 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   230aa:	bd08      	pop	{r3, pc}
   230ac:	200021f8 	.word	0x200021f8

000230b0 <k_work_reschedule_for_queue>:

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   230b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   230b4:	b082      	sub	sp, #8
   230b6:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   230b8:	b341      	cbz	r1, 2310c <k_work_reschedule_for_queue+0x5c>
   230ba:	4617      	mov	r7, r2
   230bc:	461e      	mov	r6, r3
   230be:	460c      	mov	r4, r1
	__asm__ volatile(
   230c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   230c4:	f3ef 8811 	mrs	r8, BASEPRI
   230c8:	f383 8812 	msr	BASEPRI_MAX, r3
   230cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   230d0:	481e      	ldr	r0, [pc, #120]	; (2314c <k_work_reschedule_for_queue+0x9c>)
   230d2:	f7fe fea7 	bl	21e24 <z_spin_lock_valid>
   230d6:	b328      	cbz	r0, 23124 <k_work_reschedule_for_queue+0x74>
	z_spin_lock_set_owner(l);
   230d8:	4d1c      	ldr	r5, [pc, #112]	; (2314c <k_work_reschedule_for_queue+0x9c>)
   230da:	4628      	mov	r0, r5
   230dc:	f7fe fec2 	bl	21e64 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   230e0:	4620      	mov	r0, r4
   230e2:	f00c f91a 	bl	2f31a <unschedule_locked>

	/* Schedule the work item with the new parameters. */
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   230e6:	463a      	mov	r2, r7
   230e8:	4633      	mov	r3, r6
   230ea:	4621      	mov	r1, r4
   230ec:	a801      	add	r0, sp, #4
   230ee:	f7ff fe03 	bl	22cf8 <schedule_for_queue_locked>
   230f2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230f4:	4628      	mov	r0, r5
   230f6:	f7fe fea5 	bl	21e44 <z_spin_unlock_valid>
   230fa:	b1e8      	cbz	r0, 23138 <k_work_reschedule_for_queue+0x88>
	__asm__ volatile(
   230fc:	f388 8811 	msr	BASEPRI, r8
   23100:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23104:	4620      	mov	r0, r4
   23106:	b002      	add	sp, #8
   23108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   2310c:	4c10      	ldr	r4, [pc, #64]	; (23150 <k_work_reschedule_for_queue+0xa0>)
   2310e:	f240 32db 	movw	r2, #987	; 0x3db
   23112:	4621      	mov	r1, r4
   23114:	480f      	ldr	r0, [pc, #60]	; (23154 <k_work_reschedule_for_queue+0xa4>)
   23116:	f005 fd7a 	bl	28c0e <assert_print>
   2311a:	f240 31db 	movw	r1, #987	; 0x3db
   2311e:	4620      	mov	r0, r4
   23120:	f005 fd6e 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23124:	4c0c      	ldr	r4, [pc, #48]	; (23158 <k_work_reschedule_for_queue+0xa8>)
   23126:	2294      	movs	r2, #148	; 0x94
   23128:	4621      	mov	r1, r4
   2312a:	480a      	ldr	r0, [pc, #40]	; (23154 <k_work_reschedule_for_queue+0xa4>)
   2312c:	f005 fd6f 	bl	28c0e <assert_print>
   23130:	2194      	movs	r1, #148	; 0x94
   23132:	4620      	mov	r0, r4
   23134:	f005 fd64 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23138:	4c07      	ldr	r4, [pc, #28]	; (23158 <k_work_reschedule_for_queue+0xa8>)
   2313a:	22c2      	movs	r2, #194	; 0xc2
   2313c:	4621      	mov	r1, r4
   2313e:	4805      	ldr	r0, [pc, #20]	; (23154 <k_work_reschedule_for_queue+0xa4>)
   23140:	f005 fd65 	bl	28c0e <assert_print>
   23144:	21c2      	movs	r1, #194	; 0xc2
   23146:	4620      	mov	r0, r4
   23148:	f005 fd5a 	bl	28c00 <assert_post_action>
   2314c:	20003b00 	.word	0x20003b00
   23150:	00033ccc 	.word	0x00033ccc
   23154:	00030128 	.word	0x00030128
   23158:	00030164 	.word	0x00030164

0002315c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   2315c:	b508      	push	{r3, lr}
   2315e:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   23160:	4801      	ldr	r0, [pc, #4]	; (23168 <k_work_reschedule+0xc>)
   23162:	f7ff ffa5 	bl	230b0 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   23166:	bd08      	pop	{r3, pc}
   23168:	200021f8 	.word	0x200021f8

0002316c <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2316c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   2316e:	b1f8      	cbz	r0, 231b0 <k_work_cancel_delayable+0x44>
   23170:	4604      	mov	r4, r0
	__asm__ volatile(
   23172:	f04f 0240 	mov.w	r2, #64	; 0x40
   23176:	f3ef 8311 	mrs	r3, BASEPRI
   2317a:	f382 8812 	msr	BASEPRI_MAX, r2
   2317e:	f3bf 8f6f 	isb	sy
   23182:	461d      	mov	r5, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23184:	481a      	ldr	r0, [pc, #104]	; (231f0 <k_work_cancel_delayable+0x84>)
   23186:	f7fe fe4d 	bl	21e24 <z_spin_lock_valid>
   2318a:	b1e8      	cbz	r0, 231c8 <k_work_cancel_delayable+0x5c>
	z_spin_lock_set_owner(l);
   2318c:	4e18      	ldr	r6, [pc, #96]	; (231f0 <k_work_cancel_delayable+0x84>)
   2318e:	4630      	mov	r0, r6
   23190:	f7fe fe68 	bl	21e64 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   23194:	4620      	mov	r0, r4
   23196:	f00c f8cf 	bl	2f338 <cancel_delayable_async_locked>
   2319a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2319c:	4630      	mov	r0, r6
   2319e:	f7fe fe51 	bl	21e44 <z_spin_unlock_valid>
   231a2:	b1d8      	cbz	r0, 231dc <k_work_cancel_delayable+0x70>
	__asm__ volatile(
   231a4:	f385 8811 	msr	BASEPRI, r5
   231a8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   231ac:	4620      	mov	r0, r4
   231ae:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   231b0:	4c10      	ldr	r4, [pc, #64]	; (231f4 <k_work_cancel_delayable+0x88>)
   231b2:	f240 32fd 	movw	r2, #1021	; 0x3fd
   231b6:	4621      	mov	r1, r4
   231b8:	480f      	ldr	r0, [pc, #60]	; (231f8 <k_work_cancel_delayable+0x8c>)
   231ba:	f005 fd28 	bl	28c0e <assert_print>
   231be:	f240 31fd 	movw	r1, #1021	; 0x3fd
   231c2:	4620      	mov	r0, r4
   231c4:	f005 fd1c 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   231c8:	4c0c      	ldr	r4, [pc, #48]	; (231fc <k_work_cancel_delayable+0x90>)
   231ca:	2294      	movs	r2, #148	; 0x94
   231cc:	4621      	mov	r1, r4
   231ce:	480a      	ldr	r0, [pc, #40]	; (231f8 <k_work_cancel_delayable+0x8c>)
   231d0:	f005 fd1d 	bl	28c0e <assert_print>
   231d4:	2194      	movs	r1, #148	; 0x94
   231d6:	4620      	mov	r0, r4
   231d8:	f005 fd12 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231dc:	4c07      	ldr	r4, [pc, #28]	; (231fc <k_work_cancel_delayable+0x90>)
   231de:	22c2      	movs	r2, #194	; 0xc2
   231e0:	4621      	mov	r1, r4
   231e2:	4805      	ldr	r0, [pc, #20]	; (231f8 <k_work_cancel_delayable+0x8c>)
   231e4:	f005 fd13 	bl	28c0e <assert_print>
   231e8:	21c2      	movs	r1, #194	; 0xc2
   231ea:	4620      	mov	r0, r4
   231ec:	f005 fd08 	bl	28c00 <assert_post_action>
   231f0:	20003b00 	.word	0x20003b00
   231f4:	00033ccc 	.word	0x00033ccc
   231f8:	00030128 	.word	0x00030128
   231fc:	00030164 	.word	0x00030164

00023200 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   23200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   23204:	2800      	cmp	r0, #0
   23206:	d030      	beq.n	2326a <k_work_cancel_delayable_sync+0x6a>
   23208:	460c      	mov	r4, r1
   2320a:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(sync != NULL);
   2320c:	2900      	cmp	r1, #0
   2320e:	d038      	beq.n	23282 <k_work_cancel_delayable_sync+0x82>
	__ASSERT_NO_MSG(!k_is_in_isr());
   23210:	f00b ff4b 	bl	2f0aa <k_is_in_isr>
   23214:	4606      	mov	r6, r0
   23216:	2800      	cmp	r0, #0
   23218:	d13f      	bne.n	2329a <k_work_cancel_delayable_sync+0x9a>
	__asm__ volatile(
   2321a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2321e:	f3ef 8511 	mrs	r5, BASEPRI
   23222:	f383 8812 	msr	BASEPRI_MAX, r3
   23226:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2322a:	4835      	ldr	r0, [pc, #212]	; (23300 <k_work_cancel_delayable_sync+0x100>)
   2322c:	f7fe fdfa 	bl	21e24 <z_spin_lock_valid>
   23230:	2800      	cmp	r0, #0
   23232:	d03e      	beq.n	232b2 <k_work_cancel_delayable_sync+0xb2>
	z_spin_lock_set_owner(l);
   23234:	4832      	ldr	r0, [pc, #200]	; (23300 <k_work_cancel_delayable_sync+0x100>)
   23236:	f7fe fe15 	bl	21e64 <z_spin_lock_set_owner>
	return *flagp;
   2323a:	68fb      	ldr	r3, [r7, #12]
   2323c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   23240:	2b00      	cmp	r3, #0
   23242:	bf14      	ite	ne
   23244:	f04f 0801 	movne.w	r8, #1
   23248:	f04f 0800 	moveq.w	r8, #0
	bool need_wait = false;

	if (pending) {
   2324c:	d13b      	bne.n	232c6 <k_work_cancel_delayable_sync+0xc6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2324e:	482c      	ldr	r0, [pc, #176]	; (23300 <k_work_cancel_delayable_sync+0x100>)
   23250:	f7fe fdf8 	bl	21e44 <z_spin_unlock_valid>
   23254:	2800      	cmp	r0, #0
   23256:	d03f      	beq.n	232d8 <k_work_cancel_delayable_sync+0xd8>
	__asm__ volatile(
   23258:	f385 8811 	msr	BASEPRI, r5
   2325c:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   23260:	2e00      	cmp	r6, #0
   23262:	d143      	bne.n	232ec <k_work_cancel_delayable_sync+0xec>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   23264:	4640      	mov	r0, r8
   23266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   2326a:	4c26      	ldr	r4, [pc, #152]	; (23304 <k_work_cancel_delayable_sync+0x104>)
   2326c:	f240 420e 	movw	r2, #1038	; 0x40e
   23270:	4621      	mov	r1, r4
   23272:	4825      	ldr	r0, [pc, #148]	; (23308 <k_work_cancel_delayable_sync+0x108>)
   23274:	f005 fccb 	bl	28c0e <assert_print>
   23278:	f240 410e 	movw	r1, #1038	; 0x40e
   2327c:	4620      	mov	r0, r4
   2327e:	f005 fcbf 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   23282:	4c20      	ldr	r4, [pc, #128]	; (23304 <k_work_cancel_delayable_sync+0x104>)
   23284:	f240 420f 	movw	r2, #1039	; 0x40f
   23288:	4621      	mov	r1, r4
   2328a:	481f      	ldr	r0, [pc, #124]	; (23308 <k_work_cancel_delayable_sync+0x108>)
   2328c:	f005 fcbf 	bl	28c0e <assert_print>
   23290:	f240 410f 	movw	r1, #1039	; 0x40f
   23294:	4620      	mov	r0, r4
   23296:	f005 fcb3 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   2329a:	4c1a      	ldr	r4, [pc, #104]	; (23304 <k_work_cancel_delayable_sync+0x104>)
   2329c:	f44f 6282 	mov.w	r2, #1040	; 0x410
   232a0:	4621      	mov	r1, r4
   232a2:	4819      	ldr	r0, [pc, #100]	; (23308 <k_work_cancel_delayable_sync+0x108>)
   232a4:	f005 fcb3 	bl	28c0e <assert_print>
   232a8:	f44f 6182 	mov.w	r1, #1040	; 0x410
   232ac:	4620      	mov	r0, r4
   232ae:	f005 fca7 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   232b2:	4c16      	ldr	r4, [pc, #88]	; (2330c <k_work_cancel_delayable_sync+0x10c>)
   232b4:	2294      	movs	r2, #148	; 0x94
   232b6:	4621      	mov	r1, r4
   232b8:	4813      	ldr	r0, [pc, #76]	; (23308 <k_work_cancel_delayable_sync+0x108>)
   232ba:	f005 fca8 	bl	28c0e <assert_print>
   232be:	2194      	movs	r1, #148	; 0x94
   232c0:	4620      	mov	r0, r4
   232c2:	f005 fc9d 	bl	28c00 <assert_post_action>
		(void)cancel_delayable_async_locked(dwork);
   232c6:	4638      	mov	r0, r7
   232c8:	f00c f836 	bl	2f338 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   232cc:	4621      	mov	r1, r4
   232ce:	4638      	mov	r0, r7
   232d0:	f00c f814 	bl	2f2fc <cancel_sync_locked>
   232d4:	4606      	mov	r6, r0
   232d6:	e7ba      	b.n	2324e <k_work_cancel_delayable_sync+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   232d8:	4c0c      	ldr	r4, [pc, #48]	; (2330c <k_work_cancel_delayable_sync+0x10c>)
   232da:	22c2      	movs	r2, #194	; 0xc2
   232dc:	4621      	mov	r1, r4
   232de:	480a      	ldr	r0, [pc, #40]	; (23308 <k_work_cancel_delayable_sync+0x108>)
   232e0:	f005 fc95 	bl	28c0e <assert_print>
   232e4:	21c2      	movs	r1, #194	; 0xc2
   232e6:	4620      	mov	r0, r4
   232e8:	f005 fc8a 	bl	28c00 <assert_post_action>
		k_sem_take(&canceller->sem, K_FOREVER);
   232ec:	f104 0008 	add.w	r0, r4, #8
	return z_impl_k_sem_take(sem, timeout);
   232f0:	f04f 32ff 	mov.w	r2, #4294967295
   232f4:	f04f 33ff 	mov.w	r3, #4294967295
   232f8:	f7ff fa56 	bl	227a8 <z_impl_k_sem_take>
   232fc:	e7b2      	b.n	23264 <k_work_cancel_delayable_sync+0x64>
   232fe:	bf00      	nop
   23300:	20003b00 	.word	0x20003b00
   23304:	00033ccc 	.word	0x00033ccc
   23308:	00030128 	.word	0x00030128
   2330c:	00030164 	.word	0x00030164

00023310 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   23310:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
   23312:	2b7f      	cmp	r3, #127	; 0x7f
   23314:	d80e      	bhi.n	23334 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
   23316:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   23318:	f013 0f1f 	tst.w	r3, #31
   2331c:	d10c      	bne.n	23338 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2331e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23322:	4b08      	ldr	r3, [pc, #32]	; (23344 <sliceable+0x34>)
   23324:	681b      	ldr	r3, [r3, #0]
   23326:	429a      	cmp	r2, r3
   23328:	db08      	blt.n	2333c <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   2332a:	4b07      	ldr	r3, [pc, #28]	; (23348 <sliceable+0x38>)
   2332c:	4298      	cmp	r0, r3
   2332e:	d007      	beq.n	23340 <sliceable+0x30>
   23330:	2001      	movs	r0, #1
   23332:	4770      	bx	lr
   23334:	2000      	movs	r0, #0
   23336:	4770      	bx	lr
   23338:	2000      	movs	r0, #0
   2333a:	4770      	bx	lr
   2333c:	2000      	movs	r0, #0
   2333e:	4770      	bx	lr
   23340:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   23342:	4770      	bx	lr
   23344:	20003b08 	.word	0x20003b08
   23348:	20002088 	.word	0x20002088

0002334c <pended_on_thread>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   2334c:	6880      	ldr	r0, [r0, #8]
   2334e:	b100      	cbz	r0, 23352 <pended_on_thread+0x6>

	return thread->base.pended_on;
}
   23350:	4770      	bx	lr
{
   23352:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(thread->base.pended_on);
   23354:	4c05      	ldr	r4, [pc, #20]	; (2336c <pended_on_thread+0x20>)
   23356:	f240 22d6 	movw	r2, #726	; 0x2d6
   2335a:	4621      	mov	r1, r4
   2335c:	4804      	ldr	r0, [pc, #16]	; (23370 <pended_on_thread+0x24>)
   2335e:	f005 fc56 	bl	28c0e <assert_print>
   23362:	f240 21d6 	movw	r1, #726	; 0x2d6
   23366:	4620      	mov	r0, r4
   23368:	f005 fc4a 	bl	28c00 <assert_post_action>
   2336c:	00033cf0 	.word	0x00033cf0
   23370:	00030128 	.word	0x00030128

00023374 <z_sched_lock>:
{
   23374:	b510      	push	{r4, lr}
   23376:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2337a:	b93b      	cbnz	r3, 2338c <z_sched_lock+0x18>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2337c:	4b0d      	ldr	r3, [pc, #52]	; (233b4 <z_sched_lock+0x40>)
   2337e:	689a      	ldr	r2, [r3, #8]
   23380:	7bd3      	ldrb	r3, [r2, #15]
   23382:	2b01      	cmp	r3, #1
   23384:	d00c      	beq.n	233a0 <z_sched_lock+0x2c>
	--_current->base.sched_locked;
   23386:	3b01      	subs	r3, #1
   23388:	73d3      	strb	r3, [r2, #15]
}
   2338a:	bd10      	pop	{r4, pc}
	__ASSERT(!arch_is_in_isr(), "");
   2338c:	4c0a      	ldr	r4, [pc, #40]	; (233b8 <z_sched_lock+0x44>)
   2338e:	22fd      	movs	r2, #253	; 0xfd
   23390:	4621      	mov	r1, r4
   23392:	480a      	ldr	r0, [pc, #40]	; (233bc <z_sched_lock+0x48>)
   23394:	f005 fc3b 	bl	28c0e <assert_print>
   23398:	21fd      	movs	r1, #253	; 0xfd
   2339a:	4620      	mov	r0, r4
   2339c:	f005 fc30 	bl	28c00 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   233a0:	4c05      	ldr	r4, [pc, #20]	; (233b8 <z_sched_lock+0x44>)
   233a2:	22fe      	movs	r2, #254	; 0xfe
   233a4:	4621      	mov	r1, r4
   233a6:	4805      	ldr	r0, [pc, #20]	; (233bc <z_sched_lock+0x48>)
   233a8:	f005 fc31 	bl	28c0e <assert_print>
   233ac:	21fe      	movs	r1, #254	; 0xfe
   233ae:	4620      	mov	r0, r4
   233b0:	f005 fc26 	bl	28c00 <assert_post_action>
   233b4:	20003ac0 	.word	0x20003ac0
   233b8:	00033d14 	.word	0x00033d14
   233bc:	00030128 	.word	0x00030128

000233c0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   233c0:	f1b3 3fff 	cmp.w	r3, #4294967295
   233c4:	bf08      	it	eq
   233c6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   233ca:	d100      	bne.n	233ce <add_thread_timeout+0xe>
   233cc:	4770      	bx	lr
{
   233ce:	b508      	push	{r3, lr}
   233d0:	4902      	ldr	r1, [pc, #8]	; (233dc <add_thread_timeout+0x1c>)
   233d2:	3018      	adds	r0, #24
   233d4:	f001 f8e4 	bl	245a0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   233d8:	bd08      	pop	{r3, pc}
   233da:	bf00      	nop
   233dc:	00023a2d 	.word	0x00023a2d

000233e0 <z_reset_time_slice>:
{
   233e0:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   233e2:	4b07      	ldr	r3, [pc, #28]	; (23400 <z_reset_time_slice+0x20>)
   233e4:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   233e6:	b904      	cbnz	r4, 233ea <z_reset_time_slice+0xa>
}
   233e8:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   233ea:	f7fb fb5d 	bl	1eaa8 <sys_clock_elapsed>
   233ee:	4404      	add	r4, r0
   233f0:	4b04      	ldr	r3, [pc, #16]	; (23404 <z_reset_time_slice+0x24>)
   233f2:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   233f4:	2100      	movs	r1, #0
   233f6:	4b02      	ldr	r3, [pc, #8]	; (23400 <z_reset_time_slice+0x20>)
   233f8:	6818      	ldr	r0, [r3, #0]
   233fa:	f001 fa11 	bl	24820 <z_set_timeout_expiry>
}
   233fe:	e7f3      	b.n	233e8 <z_reset_time_slice+0x8>
   23400:	20003b0c 	.word	0x20003b0c
   23404:	20003ac0 	.word	0x20003ac0

00023408 <k_sched_time_slice_set>:
{
   23408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2340a:	4604      	mov	r4, r0
   2340c:	460d      	mov	r5, r1
	__asm__ volatile(
   2340e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23412:	f3ef 8611 	mrs	r6, BASEPRI
   23416:	f383 8812 	msr	BASEPRI_MAX, r3
   2341a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2341e:	4823      	ldr	r0, [pc, #140]	; (234ac <k_sched_time_slice_set+0xa4>)
   23420:	f7fe fd00 	bl	21e24 <z_spin_lock_valid>
   23424:	b120      	cbz	r0, 23430 <k_sched_time_slice_set+0x28>
   23426:	2700      	movs	r7, #0
	z_spin_lock_set_owner(l);
   23428:	4820      	ldr	r0, [pc, #128]	; (234ac <k_sched_time_slice_set+0xa4>)
   2342a:	f7fe fd1b 	bl	21e64 <z_spin_lock_set_owner>
	return k;
   2342e:	e01c      	b.n	2346a <k_sched_time_slice_set+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23430:	4c1f      	ldr	r4, [pc, #124]	; (234b0 <k_sched_time_slice_set+0xa8>)
   23432:	2294      	movs	r2, #148	; 0x94
   23434:	4621      	mov	r1, r4
   23436:	481f      	ldr	r0, [pc, #124]	; (234b4 <k_sched_time_slice_set+0xac>)
   23438:	f005 fbe9 	bl	28c0e <assert_print>
   2343c:	2194      	movs	r1, #148	; 0x94
   2343e:	4620      	mov	r0, r4
   23440:	f005 fbde 	bl	28c00 <assert_post_action>
			slice_ticks = MAX(2, slice_ticks);
   23444:	2802      	cmp	r0, #2
   23446:	bfb8      	it	lt
   23448:	2002      	movlt	r0, #2
   2344a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   2344c:	4b1a      	ldr	r3, [pc, #104]	; (234b8 <k_sched_time_slice_set+0xb0>)
   2344e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   23450:	4b1a      	ldr	r3, [pc, #104]	; (234bc <k_sched_time_slice_set+0xb4>)
   23452:	6898      	ldr	r0, [r3, #8]
   23454:	f7ff ffc4 	bl	233e0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23458:	4814      	ldr	r0, [pc, #80]	; (234ac <k_sched_time_slice_set+0xa4>)
   2345a:	f7fe fcf3 	bl	21e44 <z_spin_unlock_valid>
   2345e:	b1d0      	cbz	r0, 23496 <k_sched_time_slice_set+0x8e>
	__asm__ volatile(
   23460:	f386 8811 	msr	BASEPRI, r6
   23464:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23468:	2701      	movs	r7, #1
   2346a:	b9f7      	cbnz	r7, 234aa <k_sched_time_slice_set+0xa2>
		_current_cpu->slice_ticks = 0;
   2346c:	4b13      	ldr	r3, [pc, #76]	; (234bc <k_sched_time_slice_set+0xb4>)
   2346e:	2200      	movs	r2, #0
   23470:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   23472:	0c61      	lsrs	r1, r4, #17
   23474:	03e0      	lsls	r0, r4, #15
   23476:	f240 33e7 	movw	r3, #999	; 0x3e7
   2347a:	18c0      	adds	r0, r0, r3
   2347c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23480:	f04f 0300 	mov.w	r3, #0
   23484:	f141 0100 	adc.w	r1, r1, #0
   23488:	f7dc fe3a 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2348c:	4b0c      	ldr	r3, [pc, #48]	; (234c0 <k_sched_time_slice_set+0xb8>)
   2348e:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   23490:	2c00      	cmp	r4, #0
   23492:	dcd7      	bgt.n	23444 <k_sched_time_slice_set+0x3c>
   23494:	e7da      	b.n	2344c <k_sched_time_slice_set+0x44>
   23496:	4c06      	ldr	r4, [pc, #24]	; (234b0 <k_sched_time_slice_set+0xa8>)
   23498:	22c2      	movs	r2, #194	; 0xc2
   2349a:	4621      	mov	r1, r4
   2349c:	4805      	ldr	r0, [pc, #20]	; (234b4 <k_sched_time_slice_set+0xac>)
   2349e:	f005 fbb6 	bl	28c0e <assert_print>
   234a2:	21c2      	movs	r1, #194	; 0xc2
   234a4:	4620      	mov	r0, r4
   234a6:	f005 fbab 	bl	28c00 <assert_post_action>
}
   234aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   234ac:	20003b10 	.word	0x20003b10
   234b0:	00030164 	.word	0x00030164
   234b4:	00030128 	.word	0x00030128
   234b8:	20003b08 	.word	0x20003b08
   234bc:	20003ac0 	.word	0x20003ac0
   234c0:	20003b0c 	.word	0x20003b0c

000234c4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   234c4:	b538      	push	{r3, r4, r5, lr}
	if (resched(key.key) && need_swap()) {
   234c6:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   234c8:	b9c1      	cbnz	r1, 234fc <z_reschedule+0x38>
   234ca:	f3ef 8305 	mrs	r3, IPSR
   234ce:	b9ab      	cbnz	r3, 234fc <z_reschedule+0x38>
	new_thread = _kernel.ready_q.cache;
   234d0:	4b13      	ldr	r3, [pc, #76]	; (23520 <z_reschedule+0x5c>)
   234d2:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   234d4:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   234d6:	429a      	cmp	r2, r3
   234d8:	d010      	beq.n	234fc <z_reschedule+0x38>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   234da:	f7fe fcb3 	bl	21e44 <z_spin_unlock_valid>
   234de:	b118      	cbz	r0, 234e8 <z_reschedule+0x24>
	ret = arch_swap(key);
   234e0:	4628      	mov	r0, r5
   234e2:	f7ef fe45 	bl	13170 <arch_swap>
		z_swap(lock, key);
   234e6:	e010      	b.n	2350a <z_reschedule+0x46>
   234e8:	4c0e      	ldr	r4, [pc, #56]	; (23524 <z_reschedule+0x60>)
   234ea:	22e1      	movs	r2, #225	; 0xe1
   234ec:	4621      	mov	r1, r4
   234ee:	480e      	ldr	r0, [pc, #56]	; (23528 <z_reschedule+0x64>)
   234f0:	f005 fb8d 	bl	28c0e <assert_print>
   234f4:	21e1      	movs	r1, #225	; 0xe1
   234f6:	4620      	mov	r0, r4
   234f8:	f005 fb82 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   234fc:	f7fe fca2 	bl	21e44 <z_spin_unlock_valid>
   23500:	b120      	cbz	r0, 2350c <z_reschedule+0x48>
   23502:	f385 8811 	msr	BASEPRI, r5
   23506:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   2350a:	bd38      	pop	{r3, r4, r5, pc}
   2350c:	4c05      	ldr	r4, [pc, #20]	; (23524 <z_reschedule+0x60>)
   2350e:	22c2      	movs	r2, #194	; 0xc2
   23510:	4621      	mov	r1, r4
   23512:	4805      	ldr	r0, [pc, #20]	; (23528 <z_reschedule+0x64>)
   23514:	f005 fb7b 	bl	28c0e <assert_print>
   23518:	21c2      	movs	r1, #194	; 0xc2
   2351a:	4620      	mov	r0, r4
   2351c:	f005 fb70 	bl	28c00 <assert_post_action>
   23520:	20003ac0 	.word	0x20003ac0
   23524:	00030164 	.word	0x00030164
   23528:	00030128 	.word	0x00030128

0002352c <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   2352c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2352e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23532:	f3ef 8511 	mrs	r5, BASEPRI
   23536:	f383 8812 	msr	BASEPRI_MAX, r3
   2353a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2353e:	4815      	ldr	r0, [pc, #84]	; (23594 <k_sched_lock+0x68>)
   23540:	f7fe fc70 	bl	21e24 <z_spin_lock_valid>
   23544:	b180      	cbz	r0, 23568 <k_sched_lock+0x3c>
   23546:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   23548:	4812      	ldr	r0, [pc, #72]	; (23594 <k_sched_lock+0x68>)
   2354a:	f7fe fc8b 	bl	21e64 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
   2354e:	b9fc      	cbnz	r4, 23590 <k_sched_lock+0x64>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
   23550:	f7ff ff10 	bl	23374 <z_sched_lock>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23554:	480f      	ldr	r0, [pc, #60]	; (23594 <k_sched_lock+0x68>)
   23556:	f7fe fc75 	bl	21e44 <z_spin_unlock_valid>
   2355a:	b178      	cbz	r0, 2357c <k_sched_lock+0x50>
	__asm__ volatile(
   2355c:	f385 8811 	msr	BASEPRI, r5
   23560:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23564:	2401      	movs	r4, #1
   23566:	e7f2      	b.n	2354e <k_sched_lock+0x22>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23568:	4c0b      	ldr	r4, [pc, #44]	; (23598 <k_sched_lock+0x6c>)
   2356a:	2294      	movs	r2, #148	; 0x94
   2356c:	4621      	mov	r1, r4
   2356e:	480b      	ldr	r0, [pc, #44]	; (2359c <k_sched_lock+0x70>)
   23570:	f005 fb4d 	bl	28c0e <assert_print>
   23574:	2194      	movs	r1, #148	; 0x94
   23576:	4620      	mov	r0, r4
   23578:	f005 fb42 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2357c:	4c06      	ldr	r4, [pc, #24]	; (23598 <k_sched_lock+0x6c>)
   2357e:	22c2      	movs	r2, #194	; 0xc2
   23580:	4621      	mov	r1, r4
   23582:	4806      	ldr	r0, [pc, #24]	; (2359c <k_sched_lock+0x70>)
   23584:	f005 fb43 	bl	28c0e <assert_print>
   23588:	21c2      	movs	r1, #194	; 0xc2
   2358a:	4620      	mov	r0, r4
   2358c:	f005 fb38 	bl	28c00 <assert_post_action>
	}
}
   23590:	bd38      	pop	{r3, r4, r5, pc}
   23592:	bf00      	nop
   23594:	20003b10 	.word	0x20003b10
   23598:	00030164 	.word	0x00030164
   2359c:	00030128 	.word	0x00030128

000235a0 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   235a0:	4b0b      	ldr	r3, [pc, #44]	; (235d0 <z_priq_dumb_remove+0x30>)
   235a2:	4299      	cmp	r1, r3
   235a4:	d007      	beq.n	235b6 <z_priq_dumb_remove+0x16>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   235a6:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   235a8:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   235aa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   235ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   235ae:	2300      	movs	r3, #0
   235b0:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   235b2:	604b      	str	r3, [r1, #4]
   235b4:	4770      	bx	lr
{
   235b6:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   235b8:	4c06      	ldr	r4, [pc, #24]	; (235d4 <z_priq_dumb_remove+0x34>)
   235ba:	f240 4273 	movw	r2, #1139	; 0x473
   235be:	4621      	mov	r1, r4
   235c0:	4805      	ldr	r0, [pc, #20]	; (235d8 <z_priq_dumb_remove+0x38>)
   235c2:	f005 fb24 	bl	28c0e <assert_print>
   235c6:	f240 4173 	movw	r1, #1139	; 0x473
   235ca:	4620      	mov	r0, r4
   235cc:	f005 fb18 	bl	28c00 <assert_post_action>
   235d0:	20002088 	.word	0x20002088
   235d4:	00033cf0 	.word	0x00033cf0
   235d8:	00030128 	.word	0x00030128

000235dc <z_unpend_thread>:
{
   235dc:	b570      	push	{r4, r5, r6, lr}
   235de:	4605      	mov	r5, r0
	__asm__ volatile(
   235e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   235e4:	f3ef 8611 	mrs	r6, BASEPRI
   235e8:	f383 8812 	msr	BASEPRI_MAX, r3
   235ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   235f0:	4817      	ldr	r0, [pc, #92]	; (23650 <z_unpend_thread+0x74>)
   235f2:	f7fe fc17 	bl	21e24 <z_spin_lock_valid>
   235f6:	b188      	cbz	r0, 2361c <z_unpend_thread+0x40>
   235f8:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   235fa:	4815      	ldr	r0, [pc, #84]	; (23650 <z_unpend_thread+0x74>)
   235fc:	f7fe fc32 	bl	21e64 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
   23600:	bb04      	cbnz	r4, 23644 <z_unpend_thread+0x68>
		unpend_thread_no_timeout(thread);
   23602:	4628      	mov	r0, r5
   23604:	f00b fed0 	bl	2f3a8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23608:	4811      	ldr	r0, [pc, #68]	; (23650 <z_unpend_thread+0x74>)
   2360a:	f7fe fc1b 	bl	21e44 <z_spin_unlock_valid>
   2360e:	b178      	cbz	r0, 23630 <z_unpend_thread+0x54>
	__asm__ volatile(
   23610:	f386 8811 	msr	BASEPRI, r6
   23614:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23618:	2401      	movs	r4, #1
   2361a:	e7f1      	b.n	23600 <z_unpend_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2361c:	4c0d      	ldr	r4, [pc, #52]	; (23654 <z_unpend_thread+0x78>)
   2361e:	2294      	movs	r2, #148	; 0x94
   23620:	4621      	mov	r1, r4
   23622:	480d      	ldr	r0, [pc, #52]	; (23658 <z_unpend_thread+0x7c>)
   23624:	f005 faf3 	bl	28c0e <assert_print>
   23628:	2194      	movs	r1, #148	; 0x94
   2362a:	4620      	mov	r0, r4
   2362c:	f005 fae8 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23630:	4c08      	ldr	r4, [pc, #32]	; (23654 <z_unpend_thread+0x78>)
   23632:	22c2      	movs	r2, #194	; 0xc2
   23634:	4621      	mov	r1, r4
   23636:	4808      	ldr	r0, [pc, #32]	; (23658 <z_unpend_thread+0x7c>)
   23638:	f005 fae9 	bl	28c0e <assert_print>
   2363c:	21c2      	movs	r1, #194	; 0xc2
   2363e:	4620      	mov	r0, r4
   23640:	f005 fade 	bl	28c00 <assert_post_action>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   23644:	f105 0018 	add.w	r0, r5, #24
   23648:	f001 f866 	bl	24718 <z_abort_timeout>
}
   2364c:	bd70      	pop	{r4, r5, r6, pc}
   2364e:	bf00      	nop
   23650:	20003b10 	.word	0x20003b10
   23654:	00030164 	.word	0x00030164
   23658:	00030128 	.word	0x00030128

0002365c <update_cache>:
{
   2365c:	b538      	push	{r3, r4, r5, lr}
   2365e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   23660:	4815      	ldr	r0, [pc, #84]	; (236b8 <update_cache+0x5c>)
   23662:	f00b feaf 	bl	2f3c4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   23666:	4605      	mov	r5, r0
   23668:	b178      	cbz	r0, 2368a <update_cache+0x2e>
	if (preempt_ok != 0) {
   2366a:	b9dc      	cbnz	r4, 236a4 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   2366c:	4b13      	ldr	r3, [pc, #76]	; (236bc <update_cache+0x60>)
   2366e:	689b      	ldr	r3, [r3, #8]
   23670:	b173      	cbz	r3, 23690 <update_cache+0x34>
	uint8_t state = thread->base.thread_state;
   23672:	7b5a      	ldrb	r2, [r3, #13]
	if (z_is_thread_prevented_from_running(_current)) {
   23674:	f012 0f1f 	tst.w	r2, #31
   23678:	d114      	bne.n	236a4 <update_cache+0x48>
	return node->next != NULL;
   2367a:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2367c:	b992      	cbnz	r2, 236a4 <update_cache+0x48>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2367e:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   23680:	2a7f      	cmp	r2, #127	; 0x7f
   23682:	d90f      	bls.n	236a4 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   23684:	4a0d      	ldr	r2, [pc, #52]	; (236bc <update_cache+0x60>)
   23686:	61d3      	str	r3, [r2, #28]
   23688:	e015      	b.n	236b6 <update_cache+0x5a>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2368a:	4b0c      	ldr	r3, [pc, #48]	; (236bc <update_cache+0x60>)
   2368c:	68dd      	ldr	r5, [r3, #12]
   2368e:	e7ec      	b.n	2366a <update_cache+0xe>
	__ASSERT(_current != NULL, "");
   23690:	4c0b      	ldr	r4, [pc, #44]	; (236c0 <update_cache+0x64>)
   23692:	2289      	movs	r2, #137	; 0x89
   23694:	4621      	mov	r1, r4
   23696:	480b      	ldr	r0, [pc, #44]	; (236c4 <update_cache+0x68>)
   23698:	f005 fab9 	bl	28c0e <assert_print>
   2369c:	2189      	movs	r1, #137	; 0x89
   2369e:	4620      	mov	r0, r4
   236a0:	f005 faae 	bl	28c00 <assert_post_action>
		if (thread != _current) {
   236a4:	4b05      	ldr	r3, [pc, #20]	; (236bc <update_cache+0x60>)
   236a6:	689b      	ldr	r3, [r3, #8]
   236a8:	42ab      	cmp	r3, r5
   236aa:	d002      	beq.n	236b2 <update_cache+0x56>
			z_reset_time_slice(thread);
   236ac:	4628      	mov	r0, r5
   236ae:	f7ff fe97 	bl	233e0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   236b2:	4b02      	ldr	r3, [pc, #8]	; (236bc <update_cache+0x60>)
   236b4:	61dd      	str	r5, [r3, #28]
}
   236b6:	bd38      	pop	{r3, r4, r5, pc}
   236b8:	20003ae0 	.word	0x20003ae0
   236bc:	20003ac0 	.word	0x20003ac0
   236c0:	00033cf0 	.word	0x00033cf0
   236c4:	00030128 	.word	0x00030128

000236c8 <move_thread_to_end_of_prio_q>:
{
   236c8:	b538      	push	{r3, r4, r5, lr}
   236ca:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   236cc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   236ce:	f990 300d 	ldrsb.w	r3, [r0, #13]
   236d2:	2b00      	cmp	r3, #0
   236d4:	db0d      	blt.n	236f2 <move_thread_to_end_of_prio_q+0x2a>
	thread->base.thread_state |= _THREAD_QUEUED;
   236d6:	7b6b      	ldrb	r3, [r5, #13]
   236d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   236dc:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   236de:	4b21      	ldr	r3, [pc, #132]	; (23764 <move_thread_to_end_of_prio_q+0x9c>)
   236e0:	429d      	cmp	r5, r3
   236e2:	d00e      	beq.n	23702 <move_thread_to_end_of_prio_q+0x3a>
	return list->head == list;
   236e4:	4b20      	ldr	r3, [pc, #128]	; (23768 <move_thread_to_end_of_prio_q+0xa0>)
   236e6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   236ea:	429c      	cmp	r4, r3
   236ec:	d11a      	bne.n	23724 <move_thread_to_end_of_prio_q+0x5c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   236ee:	2400      	movs	r4, #0
   236f0:	e018      	b.n	23724 <move_thread_to_end_of_prio_q+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   236f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   236f6:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   236f8:	4601      	mov	r1, r0
   236fa:	481c      	ldr	r0, [pc, #112]	; (2376c <move_thread_to_end_of_prio_q+0xa4>)
   236fc:	f7ff ff50 	bl	235a0 <z_priq_dumb_remove>
}
   23700:	e7e9      	b.n	236d6 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23702:	4c1b      	ldr	r4, [pc, #108]	; (23770 <move_thread_to_end_of_prio_q+0xa8>)
   23704:	22ba      	movs	r2, #186	; 0xba
   23706:	4621      	mov	r1, r4
   23708:	481a      	ldr	r0, [pc, #104]	; (23774 <move_thread_to_end_of_prio_q+0xac>)
   2370a:	f005 fa80 	bl	28c0e <assert_print>
   2370e:	21ba      	movs	r1, #186	; 0xba
   23710:	4620      	mov	r0, r4
   23712:	f005 fa75 	bl	28c00 <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   23716:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   23718:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2371a:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2371c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2371e:	6065      	str	r5, [r4, #4]
}
   23720:	e017      	b.n	23752 <move_thread_to_end_of_prio_q+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23722:	2400      	movs	r4, #0
   23724:	b16c      	cbz	r4, 23742 <move_thread_to_end_of_prio_q+0x7a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23726:	4621      	mov	r1, r4
   23728:	4628      	mov	r0, r5
   2372a:	f00b fe19 	bl	2f360 <z_sched_prio_cmp>
   2372e:	2800      	cmp	r0, #0
   23730:	dcf1      	bgt.n	23716 <move_thread_to_end_of_prio_q+0x4e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23732:	2c00      	cmp	r4, #0
   23734:	d0f6      	beq.n	23724 <move_thread_to_end_of_prio_q+0x5c>
	return (node == list->tail) ? NULL : node->next;
   23736:	4b0c      	ldr	r3, [pc, #48]	; (23768 <move_thread_to_end_of_prio_q+0xa0>)
   23738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2373a:	429c      	cmp	r4, r3
   2373c:	d0f1      	beq.n	23722 <move_thread_to_end_of_prio_q+0x5a>
   2373e:	6824      	ldr	r4, [r4, #0]
   23740:	e7f0      	b.n	23724 <move_thread_to_end_of_prio_q+0x5c>
	sys_dnode_t *const tail = list->tail;
   23742:	4b09      	ldr	r3, [pc, #36]	; (23768 <move_thread_to_end_of_prio_q+0xa0>)
   23744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   23746:	f103 0120 	add.w	r1, r3, #32
   2374a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   2374c:	606a      	str	r2, [r5, #4]
	tail->next = node;
   2374e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   23750:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   23752:	4b05      	ldr	r3, [pc, #20]	; (23768 <move_thread_to_end_of_prio_q+0xa0>)
   23754:	6898      	ldr	r0, [r3, #8]
   23756:	42a8      	cmp	r0, r5
   23758:	bf14      	ite	ne
   2375a:	2000      	movne	r0, #0
   2375c:	2001      	moveq	r0, #1
   2375e:	f7ff ff7d 	bl	2365c <update_cache>
}
   23762:	bd38      	pop	{r3, r4, r5, pc}
   23764:	20002088 	.word	0x20002088
   23768:	20003ac0 	.word	0x20003ac0
   2376c:	20003ae0 	.word	0x20003ae0
   23770:	00033cf0 	.word	0x00033cf0
   23774:	00030128 	.word	0x00030128

00023778 <slice_expired_locked>:
{
   23778:	b538      	push	{r3, r4, r5, lr}
   2377a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   2377c:	4b07      	ldr	r3, [pc, #28]	; (2379c <slice_expired_locked+0x24>)
   2377e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   23780:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   23782:	f013 0f1f 	tst.w	r3, #31
   23786:	d004      	beq.n	23792 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   23788:	4628      	mov	r0, r5
   2378a:	f7ff fe29 	bl	233e0 <z_reset_time_slice>
}
   2378e:	4620      	mov	r0, r4
   23790:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   23792:	4628      	mov	r0, r5
   23794:	f7ff ff98 	bl	236c8 <move_thread_to_end_of_prio_q>
   23798:	e7f6      	b.n	23788 <slice_expired_locked+0x10>
   2379a:	bf00      	nop
   2379c:	20003ac0 	.word	0x20003ac0

000237a0 <z_time_slice>:
{
   237a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   237a2:	4605      	mov	r5, r0
	__asm__ volatile(
   237a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   237a8:	f3ef 8611 	mrs	r6, BASEPRI
   237ac:	f383 8812 	msr	BASEPRI_MAX, r3
   237b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   237b4:	482c      	ldr	r0, [pc, #176]	; (23868 <z_time_slice+0xc8>)
   237b6:	f7fe fb35 	bl	21e24 <z_spin_lock_valid>
   237ba:	b1d0      	cbz	r0, 237f2 <z_time_slice+0x52>
	z_spin_lock_set_owner(l);
   237bc:	482a      	ldr	r0, [pc, #168]	; (23868 <z_time_slice+0xc8>)
   237be:	f7fe fb51 	bl	21e64 <z_spin_lock_set_owner>
	return k;
   237c2:	4634      	mov	r4, r6
	if (pending_current == _current) {
   237c4:	4b29      	ldr	r3, [pc, #164]	; (2386c <z_time_slice+0xcc>)
   237c6:	6898      	ldr	r0, [r3, #8]
   237c8:	4b29      	ldr	r3, [pc, #164]	; (23870 <z_time_slice+0xd0>)
   237ca:	681b      	ldr	r3, [r3, #0]
   237cc:	4298      	cmp	r0, r3
   237ce:	d01a      	beq.n	23806 <z_time_slice+0x66>
	pending_current = NULL;
   237d0:	4b27      	ldr	r3, [pc, #156]	; (23870 <z_time_slice+0xd0>)
   237d2:	2200      	movs	r2, #0
   237d4:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
   237d6:	4b27      	ldr	r3, [pc, #156]	; (23874 <z_time_slice+0xd4>)
   237d8:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
   237da:	b373      	cbz	r3, 2383a <z_time_slice+0x9a>
   237dc:	f7ff fd98 	bl	23310 <sliceable>
   237e0:	b358      	cbz	r0, 2383a <z_time_slice+0x9a>
		if (ticks >= _current_cpu->slice_ticks) {
   237e2:	4b22      	ldr	r3, [pc, #136]	; (2386c <z_time_slice+0xcc>)
   237e4:	691b      	ldr	r3, [r3, #16]
   237e6:	42ab      	cmp	r3, r5
   237e8:	dd22      	ble.n	23830 <z_time_slice+0x90>
			_current_cpu->slice_ticks -= ticks;
   237ea:	1b5b      	subs	r3, r3, r5
   237ec:	4a1f      	ldr	r2, [pc, #124]	; (2386c <z_time_slice+0xcc>)
   237ee:	6113      	str	r3, [r2, #16]
   237f0:	e026      	b.n	23840 <z_time_slice+0xa0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   237f2:	4c21      	ldr	r4, [pc, #132]	; (23878 <z_time_slice+0xd8>)
   237f4:	2294      	movs	r2, #148	; 0x94
   237f6:	4621      	mov	r1, r4
   237f8:	4820      	ldr	r0, [pc, #128]	; (2387c <z_time_slice+0xdc>)
   237fa:	f005 fa08 	bl	28c0e <assert_print>
   237fe:	2194      	movs	r1, #148	; 0x94
   23800:	4620      	mov	r0, r4
   23802:	f005 f9fd 	bl	28c00 <assert_post_action>
		z_reset_time_slice(_current);
   23806:	f7ff fdeb 	bl	233e0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2380a:	4817      	ldr	r0, [pc, #92]	; (23868 <z_time_slice+0xc8>)
   2380c:	f7fe fb1a 	bl	21e44 <z_spin_unlock_valid>
   23810:	b120      	cbz	r0, 2381c <z_time_slice+0x7c>
	__asm__ volatile(
   23812:	f386 8811 	msr	BASEPRI, r6
   23816:	f3bf 8f6f 	isb	sy
		return;
   2381a:	e019      	b.n	23850 <z_time_slice+0xb0>
   2381c:	4c16      	ldr	r4, [pc, #88]	; (23878 <z_time_slice+0xd8>)
   2381e:	22c2      	movs	r2, #194	; 0xc2
   23820:	4621      	mov	r1, r4
   23822:	4816      	ldr	r0, [pc, #88]	; (2387c <z_time_slice+0xdc>)
   23824:	f005 f9f3 	bl	28c0e <assert_print>
   23828:	21c2      	movs	r1, #194	; 0xc2
   2382a:	4620      	mov	r0, r4
   2382c:	f005 f9e8 	bl	28c00 <assert_post_action>
			key = slice_expired_locked(key);
   23830:	4630      	mov	r0, r6
   23832:	f7ff ffa1 	bl	23778 <slice_expired_locked>
   23836:	4604      	mov	r4, r0
   23838:	e002      	b.n	23840 <z_time_slice+0xa0>
		_current_cpu->slice_ticks = 0;
   2383a:	4b0c      	ldr	r3, [pc, #48]	; (2386c <z_time_slice+0xcc>)
   2383c:	2200      	movs	r2, #0
   2383e:	611a      	str	r2, [r3, #16]
   23840:	4809      	ldr	r0, [pc, #36]	; (23868 <z_time_slice+0xc8>)
   23842:	f7fe faff 	bl	21e44 <z_spin_unlock_valid>
   23846:	b120      	cbz	r0, 23852 <z_time_slice+0xb2>
   23848:	f384 8811 	msr	BASEPRI, r4
   2384c:	f3bf 8f6f 	isb	sy
}
   23850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23852:	4c09      	ldr	r4, [pc, #36]	; (23878 <z_time_slice+0xd8>)
   23854:	22c2      	movs	r2, #194	; 0xc2
   23856:	4621      	mov	r1, r4
   23858:	4808      	ldr	r0, [pc, #32]	; (2387c <z_time_slice+0xdc>)
   2385a:	f005 f9d8 	bl	28c0e <assert_print>
   2385e:	21c2      	movs	r1, #194	; 0xc2
   23860:	4620      	mov	r0, r4
   23862:	f005 f9cd 	bl	28c00 <assert_post_action>
   23866:	bf00      	nop
   23868:	20003b10 	.word	0x20003b10
   2386c:	20003ac0 	.word	0x20003ac0
   23870:	20003b04 	.word	0x20003b04
   23874:	20003b0c 	.word	0x20003b0c
   23878:	00030164 	.word	0x00030164
   2387c:	00030128 	.word	0x00030128

00023880 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   23880:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   23882:	f990 300d 	ldrsb.w	r3, [r0, #13]
   23886:	2b00      	cmp	r3, #0
   23888:	db40      	blt.n	2390c <ready_thread+0x8c>
{
   2388a:	b570      	push	{r4, r5, r6, lr}
   2388c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2388e:	f012 0f1f 	tst.w	r2, #31
   23892:	d101      	bne.n	23898 <ready_thread+0x18>
	return node->next != NULL;
   23894:	6986      	ldr	r6, [r0, #24]
   23896:	b106      	cbz	r6, 2389a <ready_thread+0x1a>
}
   23898:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   2389a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2389e:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   238a0:	4b1b      	ldr	r3, [pc, #108]	; (23910 <ready_thread+0x90>)
   238a2:	4298      	cmp	r0, r3
   238a4:	d006      	beq.n	238b4 <ready_thread+0x34>
	return list->head == list;
   238a6:	4b1b      	ldr	r3, [pc, #108]	; (23914 <ready_thread+0x94>)
   238a8:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   238ac:	429d      	cmp	r5, r3
   238ae:	d112      	bne.n	238d6 <ready_thread+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   238b0:	4635      	mov	r5, r6
   238b2:	e010      	b.n	238d6 <ready_thread+0x56>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   238b4:	4c18      	ldr	r4, [pc, #96]	; (23918 <ready_thread+0x98>)
   238b6:	22ba      	movs	r2, #186	; 0xba
   238b8:	4621      	mov	r1, r4
   238ba:	4818      	ldr	r0, [pc, #96]	; (2391c <ready_thread+0x9c>)
   238bc:	f005 f9a7 	bl	28c0e <assert_print>
   238c0:	21ba      	movs	r1, #186	; 0xba
   238c2:	4620      	mov	r0, r4
   238c4:	f005 f99c 	bl	28c00 <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   238c8:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   238ca:	6063      	str	r3, [r4, #4]
	node->next = successor;
   238cc:	6025      	str	r5, [r4, #0]
	prev->next = node;
   238ce:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   238d0:	606c      	str	r4, [r5, #4]
}
   238d2:	e017      	b.n	23904 <ready_thread+0x84>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   238d4:	4635      	mov	r5, r6
   238d6:	b16d      	cbz	r5, 238f4 <ready_thread+0x74>
		if (z_sched_prio_cmp(thread, t) > 0) {
   238d8:	4629      	mov	r1, r5
   238da:	4620      	mov	r0, r4
   238dc:	f00b fd40 	bl	2f360 <z_sched_prio_cmp>
   238e0:	2800      	cmp	r0, #0
   238e2:	dcf1      	bgt.n	238c8 <ready_thread+0x48>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   238e4:	2d00      	cmp	r5, #0
   238e6:	d0f6      	beq.n	238d6 <ready_thread+0x56>
	return (node == list->tail) ? NULL : node->next;
   238e8:	4b0a      	ldr	r3, [pc, #40]	; (23914 <ready_thread+0x94>)
   238ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   238ec:	429d      	cmp	r5, r3
   238ee:	d0f1      	beq.n	238d4 <ready_thread+0x54>
   238f0:	682d      	ldr	r5, [r5, #0]
   238f2:	e7f0      	b.n	238d6 <ready_thread+0x56>
	sys_dnode_t *const tail = list->tail;
   238f4:	4b07      	ldr	r3, [pc, #28]	; (23914 <ready_thread+0x94>)
   238f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   238f8:	f103 0120 	add.w	r1, r3, #32
   238fc:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   238fe:	6062      	str	r2, [r4, #4]
	tail->next = node;
   23900:	6014      	str	r4, [r2, #0]
	list->tail = node;
   23902:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   23904:	2000      	movs	r0, #0
   23906:	f7ff fea9 	bl	2365c <update_cache>
}
   2390a:	e7c5      	b.n	23898 <ready_thread+0x18>
   2390c:	4770      	bx	lr
   2390e:	bf00      	nop
   23910:	20002088 	.word	0x20002088
   23914:	20003ac0 	.word	0x20003ac0
   23918:	00033cf0 	.word	0x00033cf0
   2391c:	00030128 	.word	0x00030128

00023920 <z_ready_thread>:
{
   23920:	b570      	push	{r4, r5, r6, lr}
   23922:	4605      	mov	r5, r0
	__asm__ volatile(
   23924:	f04f 0340 	mov.w	r3, #64	; 0x40
   23928:	f3ef 8611 	mrs	r6, BASEPRI
   2392c:	f383 8812 	msr	BASEPRI_MAX, r3
   23930:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23934:	4818      	ldr	r0, [pc, #96]	; (23998 <z_ready_thread+0x78>)
   23936:	f7fe fa75 	bl	21e24 <z_spin_lock_valid>
   2393a:	b120      	cbz	r0, 23946 <z_ready_thread+0x26>
   2393c:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   2393e:	4816      	ldr	r0, [pc, #88]	; (23998 <z_ready_thread+0x78>)
   23940:	f7fe fa90 	bl	21e64 <z_spin_lock_set_owner>
	return k;
   23944:	e012      	b.n	2396c <z_ready_thread+0x4c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23946:	4c15      	ldr	r4, [pc, #84]	; (2399c <z_ready_thread+0x7c>)
   23948:	2294      	movs	r2, #148	; 0x94
   2394a:	4621      	mov	r1, r4
   2394c:	4814      	ldr	r0, [pc, #80]	; (239a0 <z_ready_thread+0x80>)
   2394e:	f005 f95e 	bl	28c0e <assert_print>
   23952:	2194      	movs	r1, #148	; 0x94
   23954:	4620      	mov	r0, r4
   23956:	f005 f953 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2395a:	480f      	ldr	r0, [pc, #60]	; (23998 <z_ready_thread+0x78>)
   2395c:	f7fe fa72 	bl	21e44 <z_spin_unlock_valid>
   23960:	b170      	cbz	r0, 23980 <z_ready_thread+0x60>
	__asm__ volatile(
   23962:	f386 8811 	msr	BASEPRI, r6
   23966:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2396a:	2401      	movs	r4, #1
   2396c:	b994      	cbnz	r4, 23994 <z_ready_thread+0x74>
		if (!thread_active_elsewhere(thread)) {
   2396e:	4628      	mov	r0, r5
   23970:	f00b fcf4 	bl	2f35c <thread_active_elsewhere>
   23974:	2800      	cmp	r0, #0
   23976:	d1f0      	bne.n	2395a <z_ready_thread+0x3a>
			ready_thread(thread);
   23978:	4628      	mov	r0, r5
   2397a:	f7ff ff81 	bl	23880 <ready_thread>
   2397e:	e7ec      	b.n	2395a <z_ready_thread+0x3a>
   23980:	4c06      	ldr	r4, [pc, #24]	; (2399c <z_ready_thread+0x7c>)
   23982:	22c2      	movs	r2, #194	; 0xc2
   23984:	4621      	mov	r1, r4
   23986:	4806      	ldr	r0, [pc, #24]	; (239a0 <z_ready_thread+0x80>)
   23988:	f005 f941 	bl	28c0e <assert_print>
   2398c:	21c2      	movs	r1, #194	; 0xc2
   2398e:	4620      	mov	r0, r4
   23990:	f005 f936 	bl	28c00 <assert_post_action>
}
   23994:	bd70      	pop	{r4, r5, r6, pc}
   23996:	bf00      	nop
   23998:	20003b10 	.word	0x20003b10
   2399c:	00030164 	.word	0x00030164
   239a0:	00030128 	.word	0x00030128

000239a4 <z_sched_start>:
{
   239a4:	b570      	push	{r4, r5, r6, lr}
   239a6:	4604      	mov	r4, r0
	__asm__ volatile(
   239a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   239ac:	f3ef 8511 	mrs	r5, BASEPRI
   239b0:	f383 8812 	msr	BASEPRI_MAX, r3
   239b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   239b8:	4819      	ldr	r0, [pc, #100]	; (23a20 <z_sched_start+0x7c>)
   239ba:	f7fe fa33 	bl	21e24 <z_spin_lock_valid>
   239be:	b178      	cbz	r0, 239e0 <z_sched_start+0x3c>
	z_spin_lock_set_owner(l);
   239c0:	4817      	ldr	r0, [pc, #92]	; (23a20 <z_sched_start+0x7c>)
   239c2:	f7fe fa4f 	bl	21e64 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   239c6:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   239c8:	f013 0f04 	tst.w	r3, #4
   239cc:	d11c      	bne.n	23a08 <z_sched_start+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239ce:	4814      	ldr	r0, [pc, #80]	; (23a20 <z_sched_start+0x7c>)
   239d0:	f7fe fa38 	bl	21e44 <z_spin_unlock_valid>
   239d4:	b170      	cbz	r0, 239f4 <z_sched_start+0x50>
	__asm__ volatile(
   239d6:	f385 8811 	msr	BASEPRI, r5
   239da:	f3bf 8f6f 	isb	sy
		return;
   239de:	e01d      	b.n	23a1c <z_sched_start+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   239e0:	4c10      	ldr	r4, [pc, #64]	; (23a24 <z_sched_start+0x80>)
   239e2:	2294      	movs	r2, #148	; 0x94
   239e4:	4621      	mov	r1, r4
   239e6:	4810      	ldr	r0, [pc, #64]	; (23a28 <z_sched_start+0x84>)
   239e8:	f005 f911 	bl	28c0e <assert_print>
   239ec:	2194      	movs	r1, #148	; 0x94
   239ee:	4620      	mov	r0, r4
   239f0:	f005 f906 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239f4:	4c0b      	ldr	r4, [pc, #44]	; (23a24 <z_sched_start+0x80>)
   239f6:	22c2      	movs	r2, #194	; 0xc2
   239f8:	4621      	mov	r1, r4
   239fa:	480b      	ldr	r0, [pc, #44]	; (23a28 <z_sched_start+0x84>)
   239fc:	f005 f907 	bl	28c0e <assert_print>
   23a00:	21c2      	movs	r1, #194	; 0xc2
   23a02:	4620      	mov	r0, r4
   23a04:	f005 f8fc 	bl	28c00 <assert_post_action>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23a08:	f023 0304 	bic.w	r3, r3, #4
   23a0c:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
   23a0e:	4620      	mov	r0, r4
   23a10:	f7ff ff36 	bl	23880 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   23a14:	4629      	mov	r1, r5
   23a16:	4802      	ldr	r0, [pc, #8]	; (23a20 <z_sched_start+0x7c>)
   23a18:	f7ff fd54 	bl	234c4 <z_reschedule>
}
   23a1c:	bd70      	pop	{r4, r5, r6, pc}
   23a1e:	bf00      	nop
   23a20:	20003b10 	.word	0x20003b10
   23a24:	00030164 	.word	0x00030164
   23a28:	00030128 	.word	0x00030128

00023a2c <z_thread_timeout>:
{
   23a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a2e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   23a30:	f1a0 0718 	sub.w	r7, r0, #24
	__asm__ volatile(
   23a34:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a38:	f3ef 8611 	mrs	r6, BASEPRI
   23a3c:	f383 8812 	msr	BASEPRI_MAX, r3
   23a40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a44:	4820      	ldr	r0, [pc, #128]	; (23ac8 <z_thread_timeout+0x9c>)
   23a46:	f7fe f9ed 	bl	21e24 <z_spin_lock_valid>
   23a4a:	b120      	cbz	r0, 23a56 <z_thread_timeout+0x2a>
   23a4c:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   23a4e:	481e      	ldr	r0, [pc, #120]	; (23ac8 <z_thread_timeout+0x9c>)
   23a50:	f7fe fa08 	bl	21e64 <z_spin_lock_set_owner>
	return k;
   23a54:	e01f      	b.n	23a96 <z_thread_timeout+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a56:	4c1d      	ldr	r4, [pc, #116]	; (23acc <z_thread_timeout+0xa0>)
   23a58:	2294      	movs	r2, #148	; 0x94
   23a5a:	4621      	mov	r1, r4
   23a5c:	481c      	ldr	r0, [pc, #112]	; (23ad0 <z_thread_timeout+0xa4>)
   23a5e:	f005 f8d6 	bl	28c0e <assert_print>
   23a62:	2194      	movs	r1, #148	; 0x94
   23a64:	4620      	mov	r0, r4
   23a66:	f005 f8cb 	bl	28c00 <assert_post_action>
   23a6a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   23a6e:	f023 0204 	bic.w	r2, r3, #4
   23a72:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23a76:	f023 0314 	bic.w	r3, r3, #20
   23a7a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   23a7e:	4638      	mov	r0, r7
   23a80:	f7ff fefe 	bl	23880 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23a84:	4810      	ldr	r0, [pc, #64]	; (23ac8 <z_thread_timeout+0x9c>)
   23a86:	f7fe f9dd 	bl	21e44 <z_spin_unlock_valid>
   23a8a:	b190      	cbz	r0, 23ab2 <z_thread_timeout+0x86>
	__asm__ volatile(
   23a8c:	f386 8811 	msr	BASEPRI, r6
   23a90:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23a94:	2501      	movs	r5, #1
   23a96:	b9b5      	cbnz	r5, 23ac6 <z_thread_timeout+0x9a>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   23a98:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   23a9c:	f013 0f28 	tst.w	r3, #40	; 0x28
   23aa0:	d1f0      	bne.n	23a84 <z_thread_timeout+0x58>
			if (thread->base.pended_on != NULL) {
   23aa2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23aa6:	2b00      	cmp	r3, #0
   23aa8:	d0df      	beq.n	23a6a <z_thread_timeout+0x3e>
				unpend_thread_no_timeout(thread);
   23aaa:	4638      	mov	r0, r7
   23aac:	f00b fc7c 	bl	2f3a8 <unpend_thread_no_timeout>
   23ab0:	e7db      	b.n	23a6a <z_thread_timeout+0x3e>
   23ab2:	4c06      	ldr	r4, [pc, #24]	; (23acc <z_thread_timeout+0xa0>)
   23ab4:	22c2      	movs	r2, #194	; 0xc2
   23ab6:	4621      	mov	r1, r4
   23ab8:	4805      	ldr	r0, [pc, #20]	; (23ad0 <z_thread_timeout+0xa4>)
   23aba:	f005 f8a8 	bl	28c0e <assert_print>
   23abe:	21c2      	movs	r1, #194	; 0xc2
   23ac0:	4620      	mov	r0, r4
   23ac2:	f005 f89d 	bl	28c00 <assert_post_action>
}
   23ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23ac8:	20003b10 	.word	0x20003b10
   23acc:	00030164 	.word	0x00030164
   23ad0:	00030128 	.word	0x00030128

00023ad4 <unready_thread>:
{
   23ad4:	b510      	push	{r4, lr}
   23ad6:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   23ad8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   23ada:	f990 300d 	ldrsb.w	r3, [r0, #13]
   23ade:	2b00      	cmp	r3, #0
   23ae0:	db08      	blt.n	23af4 <unready_thread+0x20>
	update_cache(thread == _current);
   23ae2:	4b08      	ldr	r3, [pc, #32]	; (23b04 <unready_thread+0x30>)
   23ae4:	6898      	ldr	r0, [r3, #8]
   23ae6:	42a0      	cmp	r0, r4
   23ae8:	bf14      	ite	ne
   23aea:	2000      	movne	r0, #0
   23aec:	2001      	moveq	r0, #1
   23aee:	f7ff fdb5 	bl	2365c <update_cache>
}
   23af2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23af4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23af8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23afa:	4601      	mov	r1, r0
   23afc:	4802      	ldr	r0, [pc, #8]	; (23b08 <unready_thread+0x34>)
   23afe:	f7ff fd4f 	bl	235a0 <z_priq_dumb_remove>
}
   23b02:	e7ee      	b.n	23ae2 <unready_thread+0xe>
   23b04:	20003ac0 	.word	0x20003ac0
   23b08:	20003ae0 	.word	0x20003ae0

00023b0c <add_to_waitq_locked>:
{
   23b0c:	b570      	push	{r4, r5, r6, lr}
   23b0e:	4605      	mov	r5, r0
   23b10:	460e      	mov	r6, r1
	unready_thread(thread);
   23b12:	f7ff ffdf 	bl	23ad4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   23b16:	7b6b      	ldrb	r3, [r5, #13]
   23b18:	f043 0302 	orr.w	r3, r3, #2
   23b1c:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   23b1e:	b366      	cbz	r6, 23b7a <add_to_waitq_locked+0x6e>
		thread->base.pended_on = wait_q;
   23b20:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23b22:	4b16      	ldr	r3, [pc, #88]	; (23b7c <add_to_waitq_locked+0x70>)
   23b24:	429d      	cmp	r5, r3
   23b26:	d004      	beq.n	23b32 <add_to_waitq_locked+0x26>
	return list->head == list;
   23b28:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23b2a:	42a6      	cmp	r6, r4
   23b2c:	d112      	bne.n	23b54 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23b2e:	2400      	movs	r4, #0
   23b30:	e010      	b.n	23b54 <add_to_waitq_locked+0x48>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23b32:	4c13      	ldr	r4, [pc, #76]	; (23b80 <add_to_waitq_locked+0x74>)
   23b34:	22ba      	movs	r2, #186	; 0xba
   23b36:	4621      	mov	r1, r4
   23b38:	4812      	ldr	r0, [pc, #72]	; (23b84 <add_to_waitq_locked+0x78>)
   23b3a:	f005 f868 	bl	28c0e <assert_print>
   23b3e:	21ba      	movs	r1, #186	; 0xba
   23b40:	4620      	mov	r0, r4
   23b42:	f005 f85d 	bl	28c00 <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   23b46:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   23b48:	606b      	str	r3, [r5, #4]
	node->next = successor;
   23b4a:	602c      	str	r4, [r5, #0]
	prev->next = node;
   23b4c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23b4e:	6065      	str	r5, [r4, #4]
}
   23b50:	e013      	b.n	23b7a <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23b52:	2400      	movs	r4, #0
   23b54:	b164      	cbz	r4, 23b70 <add_to_waitq_locked+0x64>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23b56:	4621      	mov	r1, r4
   23b58:	4628      	mov	r0, r5
   23b5a:	f00b fc01 	bl	2f360 <z_sched_prio_cmp>
   23b5e:	2800      	cmp	r0, #0
   23b60:	dcf1      	bgt.n	23b46 <add_to_waitq_locked+0x3a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23b62:	2c00      	cmp	r4, #0
   23b64:	d0f6      	beq.n	23b54 <add_to_waitq_locked+0x48>
	return (node == list->tail) ? NULL : node->next;
   23b66:	6873      	ldr	r3, [r6, #4]
   23b68:	429c      	cmp	r4, r3
   23b6a:	d0f2      	beq.n	23b52 <add_to_waitq_locked+0x46>
   23b6c:	6824      	ldr	r4, [r4, #0]
   23b6e:	e7f1      	b.n	23b54 <add_to_waitq_locked+0x48>
	sys_dnode_t *const tail = list->tail;
   23b70:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   23b72:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   23b74:	606b      	str	r3, [r5, #4]
	tail->next = node;
   23b76:	601d      	str	r5, [r3, #0]
	list->tail = node;
   23b78:	6075      	str	r5, [r6, #4]
}
   23b7a:	bd70      	pop	{r4, r5, r6, pc}
   23b7c:	20002088 	.word	0x20002088
   23b80:	00033cf0 	.word	0x00033cf0
   23b84:	00030128 	.word	0x00030128

00023b88 <z_pend_curr>:
{
   23b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pending_current = _current;
   23b8a:	4b2b      	ldr	r3, [pc, #172]	; (23c38 <z_pend_curr+0xb0>)
   23b8c:	689d      	ldr	r5, [r3, #8]
   23b8e:	4b2b      	ldr	r3, [pc, #172]	; (23c3c <z_pend_curr+0xb4>)
   23b90:	601d      	str	r5, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   23b92:	4b2b      	ldr	r3, [pc, #172]	; (23c40 <z_pend_curr+0xb8>)
   23b94:	4298      	cmp	r0, r3
   23b96:	d024      	beq.n	23be2 <z_pend_curr+0x5a>
   23b98:	4604      	mov	r4, r0
   23b9a:	460f      	mov	r7, r1
   23b9c:	4616      	mov	r6, r2
	__asm__ volatile(
   23b9e:	f04f 0240 	mov.w	r2, #64	; 0x40
   23ba2:	f3ef 8311 	mrs	r3, BASEPRI
   23ba6:	f382 8812 	msr	BASEPRI_MAX, r2
   23baa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bae:	4824      	ldr	r0, [pc, #144]	; (23c40 <z_pend_curr+0xb8>)
   23bb0:	f7fe f938 	bl	21e24 <z_spin_lock_valid>
   23bb4:	b308      	cbz	r0, 23bfa <z_pend_curr+0x72>
	z_spin_lock_set_owner(l);
   23bb6:	4822      	ldr	r0, [pc, #136]	; (23c40 <z_pend_curr+0xb8>)
   23bb8:	f7fe f954 	bl	21e64 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   23bbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   23bc0:	4631      	mov	r1, r6
   23bc2:	481d      	ldr	r0, [pc, #116]	; (23c38 <z_pend_curr+0xb0>)
   23bc4:	6880      	ldr	r0, [r0, #8]
   23bc6:	f00b fc19 	bl	2f3fc <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23bca:	4620      	mov	r0, r4
   23bcc:	f7fe f93a 	bl	21e44 <z_spin_unlock_valid>
   23bd0:	b1e8      	cbz	r0, 23c0e <z_pend_curr+0x86>
   23bd2:	481b      	ldr	r0, [pc, #108]	; (23c40 <z_pend_curr+0xb8>)
   23bd4:	f7fe f936 	bl	21e44 <z_spin_unlock_valid>
   23bd8:	b318      	cbz	r0, 23c22 <z_pend_curr+0x9a>
   23bda:	4638      	mov	r0, r7
   23bdc:	f7ef fac8 	bl	13170 <arch_swap>
}
   23be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   23be2:	4c18      	ldr	r4, [pc, #96]	; (23c44 <z_pend_curr+0xbc>)
   23be4:	f240 324e 	movw	r2, #846	; 0x34e
   23be8:	4621      	mov	r1, r4
   23bea:	4817      	ldr	r0, [pc, #92]	; (23c48 <z_pend_curr+0xc0>)
   23bec:	f005 f80f 	bl	28c0e <assert_print>
   23bf0:	f240 314e 	movw	r1, #846	; 0x34e
   23bf4:	4620      	mov	r0, r4
   23bf6:	f005 f803 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bfa:	4c14      	ldr	r4, [pc, #80]	; (23c4c <z_pend_curr+0xc4>)
   23bfc:	2294      	movs	r2, #148	; 0x94
   23bfe:	4621      	mov	r1, r4
   23c00:	4811      	ldr	r0, [pc, #68]	; (23c48 <z_pend_curr+0xc0>)
   23c02:	f005 f804 	bl	28c0e <assert_print>
   23c06:	2194      	movs	r1, #148	; 0x94
   23c08:	4620      	mov	r0, r4
   23c0a:	f004 fff9 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c0e:	4c0f      	ldr	r4, [pc, #60]	; (23c4c <z_pend_curr+0xc4>)
   23c10:	22e1      	movs	r2, #225	; 0xe1
   23c12:	4621      	mov	r1, r4
   23c14:	480c      	ldr	r0, [pc, #48]	; (23c48 <z_pend_curr+0xc0>)
   23c16:	f004 fffa 	bl	28c0e <assert_print>
   23c1a:	21e1      	movs	r1, #225	; 0xe1
   23c1c:	4620      	mov	r0, r4
   23c1e:	f004 ffef 	bl	28c00 <assert_post_action>
   23c22:	4c0a      	ldr	r4, [pc, #40]	; (23c4c <z_pend_curr+0xc4>)
   23c24:	22e1      	movs	r2, #225	; 0xe1
   23c26:	4621      	mov	r1, r4
   23c28:	4807      	ldr	r0, [pc, #28]	; (23c48 <z_pend_curr+0xc0>)
   23c2a:	f004 fff0 	bl	28c0e <assert_print>
   23c2e:	21e1      	movs	r1, #225	; 0xe1
   23c30:	4620      	mov	r0, r4
   23c32:	f004 ffe5 	bl	28c00 <assert_post_action>
   23c36:	bf00      	nop
   23c38:	20003ac0 	.word	0x20003ac0
   23c3c:	20003b04 	.word	0x20003b04
   23c40:	20003b10 	.word	0x20003b10
   23c44:	00033cf0 	.word	0x00033cf0
   23c48:	00030128 	.word	0x00030128
   23c4c:	00030164 	.word	0x00030164

00023c50 <z_set_prio>:
{
   23c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23c54:	4605      	mov	r5, r0
   23c56:	460f      	mov	r7, r1
   23c58:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c5c:	f3ef 8811 	mrs	r8, BASEPRI
   23c60:	f383 8812 	msr	BASEPRI_MAX, r3
   23c64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c68:	483b      	ldr	r0, [pc, #236]	; (23d58 <z_set_prio+0x108>)
   23c6a:	f7fe f8db 	bl	21e24 <z_spin_lock_valid>
   23c6e:	b130      	cbz	r0, 23c7e <z_set_prio+0x2e>
   23c70:	2400      	movs	r4, #0
   23c72:	4681      	mov	r9, r0
	z_spin_lock_set_owner(l);
   23c74:	4838      	ldr	r0, [pc, #224]	; (23d58 <z_set_prio+0x108>)
   23c76:	f7fe f8f5 	bl	21e64 <z_spin_lock_set_owner>
	bool need_sched = 0;
   23c7a:	2600      	movs	r6, #0
	return k;
   23c7c:	e041      	b.n	23d02 <z_set_prio+0xb2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c7e:	4c37      	ldr	r4, [pc, #220]	; (23d5c <z_set_prio+0x10c>)
   23c80:	2294      	movs	r2, #148	; 0x94
   23c82:	4621      	mov	r1, r4
   23c84:	4836      	ldr	r0, [pc, #216]	; (23d60 <z_set_prio+0x110>)
   23c86:	f004 ffc2 	bl	28c0e <assert_print>
   23c8a:	2194      	movs	r1, #148	; 0x94
   23c8c:	4620      	mov	r0, r4
   23c8e:	f004 ffb7 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23c92:	4c34      	ldr	r4, [pc, #208]	; (23d64 <z_set_prio+0x114>)
   23c94:	22ba      	movs	r2, #186	; 0xba
   23c96:	4621      	mov	r1, r4
   23c98:	4831      	ldr	r0, [pc, #196]	; (23d60 <z_set_prio+0x110>)
   23c9a:	f004 ffb8 	bl	28c0e <assert_print>
   23c9e:	21ba      	movs	r1, #186	; 0xba
   23ca0:	4620      	mov	r0, r4
   23ca2:	f004 ffad 	bl	28c00 <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   23ca6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   23ca8:	606b      	str	r3, [r5, #4]
	node->next = successor;
   23caa:	602c      	str	r4, [r5, #0]
	prev->next = node;
   23cac:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23cae:	6065      	str	r5, [r4, #4]
}
   23cb0:	e017      	b.n	23ce2 <z_set_prio+0x92>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23cb2:	4634      	mov	r4, r6
   23cb4:	b16c      	cbz	r4, 23cd2 <z_set_prio+0x82>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23cb6:	4621      	mov	r1, r4
   23cb8:	4628      	mov	r0, r5
   23cba:	f00b fb51 	bl	2f360 <z_sched_prio_cmp>
   23cbe:	2800      	cmp	r0, #0
   23cc0:	dcf1      	bgt.n	23ca6 <z_set_prio+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23cc2:	2c00      	cmp	r4, #0
   23cc4:	d0f6      	beq.n	23cb4 <z_set_prio+0x64>
	return (node == list->tail) ? NULL : node->next;
   23cc6:	4b28      	ldr	r3, [pc, #160]	; (23d68 <z_set_prio+0x118>)
   23cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23cca:	429c      	cmp	r4, r3
   23ccc:	d0f1      	beq.n	23cb2 <z_set_prio+0x62>
   23cce:	6824      	ldr	r4, [r4, #0]
   23cd0:	e7f0      	b.n	23cb4 <z_set_prio+0x64>
	sys_dnode_t *const tail = list->tail;
   23cd2:	4b25      	ldr	r3, [pc, #148]	; (23d68 <z_set_prio+0x118>)
   23cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   23cd6:	f103 0120 	add.w	r1, r3, #32
   23cda:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   23cdc:	606a      	str	r2, [r5, #4]
	tail->next = node;
   23cde:	6015      	str	r5, [r2, #0]
	list->tail = node;
   23ce0:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
   23ce2:	2001      	movs	r0, #1
   23ce4:	f7ff fcba 	bl	2365c <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23ce8:	464e      	mov	r6, r9
   23cea:	e001      	b.n	23cf0 <z_set_prio+0xa0>
			thread->base.prio = prio;
   23cec:	73af      	strb	r7, [r5, #14]
   23cee:	2600      	movs	r6, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cf0:	4819      	ldr	r0, [pc, #100]	; (23d58 <z_set_prio+0x108>)
   23cf2:	f7fe f8a7 	bl	21e44 <z_spin_unlock_valid>
   23cf6:	b310      	cbz	r0, 23d3e <z_set_prio+0xee>
	__asm__ volatile(
   23cf8:	f388 8811 	msr	BASEPRI, r8
   23cfc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23d00:	2401      	movs	r4, #1
   23d02:	bb34      	cbnz	r4, 23d52 <z_set_prio+0x102>
	uint8_t state = thread->base.thread_state;
   23d04:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23d06:	f013 0f1f 	tst.w	r3, #31
   23d0a:	d1ef      	bne.n	23cec <z_set_prio+0x9c>
	return node->next != NULL;
   23d0c:	69ae      	ldr	r6, [r5, #24]
   23d0e:	2e00      	cmp	r6, #0
   23d10:	d1ec      	bne.n	23cec <z_set_prio+0x9c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23d16:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23d18:	4629      	mov	r1, r5
   23d1a:	4814      	ldr	r0, [pc, #80]	; (23d6c <z_set_prio+0x11c>)
   23d1c:	f7ff fc40 	bl	235a0 <z_priq_dumb_remove>
				thread->base.prio = prio;
   23d20:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   23d22:	7b6b      	ldrb	r3, [r5, #13]
   23d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23d28:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23d2a:	4b11      	ldr	r3, [pc, #68]	; (23d70 <z_set_prio+0x120>)
   23d2c:	429d      	cmp	r5, r3
   23d2e:	d0b0      	beq.n	23c92 <z_set_prio+0x42>
	return list->head == list;
   23d30:	4b0d      	ldr	r3, [pc, #52]	; (23d68 <z_set_prio+0x118>)
   23d32:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23d36:	429c      	cmp	r4, r3
   23d38:	d1bc      	bne.n	23cb4 <z_set_prio+0x64>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23d3a:	4634      	mov	r4, r6
   23d3c:	e7ba      	b.n	23cb4 <z_set_prio+0x64>
   23d3e:	4c07      	ldr	r4, [pc, #28]	; (23d5c <z_set_prio+0x10c>)
   23d40:	22c2      	movs	r2, #194	; 0xc2
   23d42:	4621      	mov	r1, r4
   23d44:	4806      	ldr	r0, [pc, #24]	; (23d60 <z_set_prio+0x110>)
   23d46:	f004 ff62 	bl	28c0e <assert_print>
   23d4a:	21c2      	movs	r1, #194	; 0xc2
   23d4c:	4620      	mov	r0, r4
   23d4e:	f004 ff57 	bl	28c00 <assert_post_action>
}
   23d52:	4630      	mov	r0, r6
   23d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23d58:	20003b10 	.word	0x20003b10
   23d5c:	00030164 	.word	0x00030164
   23d60:	00030128 	.word	0x00030128
   23d64:	00033cf0 	.word	0x00033cf0
   23d68:	20003ac0 	.word	0x20003ac0
   23d6c:	20003ae0 	.word	0x20003ae0
   23d70:	20002088 	.word	0x20002088

00023d74 <z_impl_k_thread_suspend>:
{
   23d74:	b570      	push	{r4, r5, r6, lr}
   23d76:	4604      	mov	r4, r0
   23d78:	3018      	adds	r0, #24
   23d7a:	f000 fccd 	bl	24718 <z_abort_timeout>
	__asm__ volatile(
   23d7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d82:	f3ef 8611 	mrs	r6, BASEPRI
   23d86:	f383 8812 	msr	BASEPRI_MAX, r3
   23d8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d8e:	4824      	ldr	r0, [pc, #144]	; (23e20 <z_impl_k_thread_suspend+0xac>)
   23d90:	f7fe f848 	bl	21e24 <z_spin_lock_valid>
   23d94:	b120      	cbz	r0, 23da0 <z_impl_k_thread_suspend+0x2c>
   23d96:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   23d98:	4821      	ldr	r0, [pc, #132]	; (23e20 <z_impl_k_thread_suspend+0xac>)
   23d9a:	f7fe f863 	bl	21e64 <z_spin_lock_set_owner>
	return k;
   23d9e:	e01e      	b.n	23dde <z_impl_k_thread_suspend+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23da0:	4c20      	ldr	r4, [pc, #128]	; (23e24 <z_impl_k_thread_suspend+0xb0>)
   23da2:	2294      	movs	r2, #148	; 0x94
   23da4:	4621      	mov	r1, r4
   23da6:	4820      	ldr	r0, [pc, #128]	; (23e28 <z_impl_k_thread_suspend+0xb4>)
   23da8:	f004 ff31 	bl	28c0e <assert_print>
   23dac:	2194      	movs	r1, #148	; 0x94
   23dae:	4620      	mov	r0, r4
   23db0:	f004 ff26 	bl	28c00 <assert_post_action>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23db4:	7b63      	ldrb	r3, [r4, #13]
   23db6:	f043 0310 	orr.w	r3, r3, #16
   23dba:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   23dbc:	4b1b      	ldr	r3, [pc, #108]	; (23e2c <z_impl_k_thread_suspend+0xb8>)
   23dbe:	6898      	ldr	r0, [r3, #8]
   23dc0:	42a0      	cmp	r0, r4
   23dc2:	bf14      	ite	ne
   23dc4:	2000      	movne	r0, #0
   23dc6:	2001      	moveq	r0, #1
   23dc8:	f7ff fc48 	bl	2365c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23dcc:	4814      	ldr	r0, [pc, #80]	; (23e20 <z_impl_k_thread_suspend+0xac>)
   23dce:	f7fe f839 	bl	21e44 <z_spin_unlock_valid>
   23dd2:	b190      	cbz	r0, 23dfa <z_impl_k_thread_suspend+0x86>
	__asm__ volatile(
   23dd4:	f386 8811 	msr	BASEPRI, r6
   23dd8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23ddc:	2501      	movs	r5, #1
   23dde:	b9b5      	cbnz	r5, 23e0e <z_impl_k_thread_suspend+0x9a>
	return (thread->base.thread_state & state) != 0U;
   23de0:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   23de2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   23de6:	2b00      	cmp	r3, #0
   23de8:	dae4      	bge.n	23db4 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23dea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23dee:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23df0:	4621      	mov	r1, r4
   23df2:	480f      	ldr	r0, [pc, #60]	; (23e30 <z_impl_k_thread_suspend+0xbc>)
   23df4:	f7ff fbd4 	bl	235a0 <z_priq_dumb_remove>
}
   23df8:	e7dc      	b.n	23db4 <z_impl_k_thread_suspend+0x40>
   23dfa:	4c0a      	ldr	r4, [pc, #40]	; (23e24 <z_impl_k_thread_suspend+0xb0>)
   23dfc:	22c2      	movs	r2, #194	; 0xc2
   23dfe:	4621      	mov	r1, r4
   23e00:	4809      	ldr	r0, [pc, #36]	; (23e28 <z_impl_k_thread_suspend+0xb4>)
   23e02:	f004 ff04 	bl	28c0e <assert_print>
   23e06:	21c2      	movs	r1, #194	; 0xc2
   23e08:	4620      	mov	r0, r4
   23e0a:	f004 fef9 	bl	28c00 <assert_post_action>
	if (thread == _current) {
   23e0e:	4b07      	ldr	r3, [pc, #28]	; (23e2c <z_impl_k_thread_suspend+0xb8>)
   23e10:	689b      	ldr	r3, [r3, #8]
   23e12:	42a3      	cmp	r3, r4
   23e14:	d000      	beq.n	23e18 <z_impl_k_thread_suspend+0xa4>
}
   23e16:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule_unlocked();
   23e18:	f00b faba 	bl	2f390 <z_reschedule_unlocked>
}
   23e1c:	e7fb      	b.n	23e16 <z_impl_k_thread_suspend+0xa2>
   23e1e:	bf00      	nop
   23e20:	20003b10 	.word	0x20003b10
   23e24:	00030164 	.word	0x00030164
   23e28:	00030128 	.word	0x00030128
   23e2c:	20003ac0 	.word	0x20003ac0
   23e30:	20003ae0 	.word	0x20003ae0

00023e34 <k_sched_unlock>:
{
   23e34:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23e36:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e3a:	f3ef 8511 	mrs	r5, BASEPRI
   23e3e:	f383 8812 	msr	BASEPRI_MAX, r3
   23e42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e46:	4828      	ldr	r0, [pc, #160]	; (23ee8 <k_sched_unlock+0xb4>)
   23e48:	f7fd ffec 	bl	21e24 <z_spin_lock_valid>
   23e4c:	b120      	cbz	r0, 23e58 <k_sched_unlock+0x24>
   23e4e:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   23e50:	4825      	ldr	r0, [pc, #148]	; (23ee8 <k_sched_unlock+0xb4>)
   23e52:	f7fe f807 	bl	21e64 <z_spin_lock_set_owner>
	return k;
   23e56:	e026      	b.n	23ea6 <k_sched_unlock+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e58:	4c24      	ldr	r4, [pc, #144]	; (23eec <k_sched_unlock+0xb8>)
   23e5a:	2294      	movs	r2, #148	; 0x94
   23e5c:	4621      	mov	r1, r4
   23e5e:	4824      	ldr	r0, [pc, #144]	; (23ef0 <k_sched_unlock+0xbc>)
   23e60:	f004 fed5 	bl	28c0e <assert_print>
   23e64:	2194      	movs	r1, #148	; 0x94
   23e66:	4620      	mov	r0, r4
   23e68:	f004 feca 	bl	28c00 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   23e6c:	4c21      	ldr	r4, [pc, #132]	; (23ef4 <k_sched_unlock+0xc0>)
   23e6e:	f240 32e7 	movw	r2, #999	; 0x3e7
   23e72:	4621      	mov	r1, r4
   23e74:	481e      	ldr	r0, [pc, #120]	; (23ef0 <k_sched_unlock+0xbc>)
   23e76:	f004 feca 	bl	28c0e <assert_print>
   23e7a:	f240 31e7 	movw	r1, #999	; 0x3e7
   23e7e:	4620      	mov	r0, r4
   23e80:	f004 febe 	bl	28c00 <assert_post_action>
		__ASSERT(!arch_is_in_isr(), "");
   23e84:	4c1b      	ldr	r4, [pc, #108]	; (23ef4 <k_sched_unlock+0xc0>)
   23e86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23e8a:	4621      	mov	r1, r4
   23e8c:	4818      	ldr	r0, [pc, #96]	; (23ef0 <k_sched_unlock+0xbc>)
   23e8e:	f004 febe 	bl	28c0e <assert_print>
   23e92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   23e96:	4620      	mov	r0, r4
   23e98:	f004 feb2 	bl	28c00 <assert_post_action>
	__asm__ volatile(
   23e9c:	f385 8811 	msr	BASEPRI, r5
   23ea0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23ea4:	2401      	movs	r4, #1
   23ea6:	b9e4      	cbnz	r4, 23ee2 <k_sched_unlock+0xae>
		__ASSERT(_current->base.sched_locked != 0U, "");
   23ea8:	4b13      	ldr	r3, [pc, #76]	; (23ef8 <k_sched_unlock+0xc4>)
   23eaa:	689a      	ldr	r2, [r3, #8]
   23eac:	7bd3      	ldrb	r3, [r2, #15]
   23eae:	2b00      	cmp	r3, #0
   23eb0:	d0dc      	beq.n	23e6c <k_sched_unlock+0x38>
   23eb2:	f3ef 8105 	mrs	r1, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   23eb6:	2900      	cmp	r1, #0
   23eb8:	d1e4      	bne.n	23e84 <k_sched_unlock+0x50>
		++_current->base.sched_locked;
   23eba:	3301      	adds	r3, #1
   23ebc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   23ebe:	2000      	movs	r0, #0
   23ec0:	f7ff fbcc 	bl	2365c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ec4:	4808      	ldr	r0, [pc, #32]	; (23ee8 <k_sched_unlock+0xb4>)
   23ec6:	f7fd ffbd 	bl	21e44 <z_spin_unlock_valid>
   23eca:	2800      	cmp	r0, #0
   23ecc:	d1e6      	bne.n	23e9c <k_sched_unlock+0x68>
   23ece:	4c07      	ldr	r4, [pc, #28]	; (23eec <k_sched_unlock+0xb8>)
   23ed0:	22c2      	movs	r2, #194	; 0xc2
   23ed2:	4621      	mov	r1, r4
   23ed4:	4806      	ldr	r0, [pc, #24]	; (23ef0 <k_sched_unlock+0xbc>)
   23ed6:	f004 fe9a 	bl	28c0e <assert_print>
   23eda:	21c2      	movs	r1, #194	; 0xc2
   23edc:	4620      	mov	r0, r4
   23ede:	f004 fe8f 	bl	28c00 <assert_post_action>
	z_reschedule_unlocked();
   23ee2:	f00b fa55 	bl	2f390 <z_reschedule_unlocked>
}
   23ee6:	bd38      	pop	{r3, r4, r5, pc}
   23ee8:	20003b10 	.word	0x20003b10
   23eec:	00030164 	.word	0x00030164
   23ef0:	00030128 	.word	0x00030128
   23ef4:	00033cf0 	.word	0x00033cf0
   23ef8:	20003ac0 	.word	0x20003ac0

00023efc <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   23efc:	7b43      	ldrb	r3, [r0, #13]
   23efe:	f013 0f08 	tst.w	r3, #8
   23f02:	d12a      	bne.n	23f5a <end_thread+0x5e>
{
   23f04:	b510      	push	{r4, lr}
   23f06:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   23f08:	f043 0208 	orr.w	r2, r3, #8
   23f0c:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23f0e:	f023 0220 	bic.w	r2, r3, #32
   23f12:	f042 0208 	orr.w	r2, r2, #8
   23f16:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   23f18:	f012 0f80 	tst.w	r2, #128	; 0x80
   23f1c:	d113      	bne.n	23f46 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   23f1e:	68a3      	ldr	r3, [r4, #8]
   23f20:	b113      	cbz	r3, 23f28 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   23f22:	4620      	mov	r0, r4
   23f24:	f00b fa40 	bl	2f3a8 <unpend_thread_no_timeout>
   23f28:	f104 0018 	add.w	r0, r4, #24
   23f2c:	f000 fbf4 	bl	24718 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   23f30:	f104 0058 	add.w	r0, r4, #88	; 0x58
   23f34:	f00b fa4d 	bl	2f3d2 <unpend_all>
		update_cache(1);
   23f38:	2001      	movs	r0, #1
   23f3a:	f7ff fb8f 	bl	2365c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   23f3e:	4620      	mov	r0, r4
   23f40:	f7fd ff98 	bl	21e74 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   23f44:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23f46:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   23f4a:	f043 0308 	orr.w	r3, r3, #8
   23f4e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23f50:	4601      	mov	r1, r0
   23f52:	4802      	ldr	r0, [pc, #8]	; (23f5c <end_thread+0x60>)
   23f54:	f7ff fb24 	bl	235a0 <z_priq_dumb_remove>
}
   23f58:	e7e1      	b.n	23f1e <end_thread+0x22>
   23f5a:	4770      	bx	lr
   23f5c:	20003ae0 	.word	0x20003ae0

00023f60 <z_unpend_first_thread>:
{
   23f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f62:	4606      	mov	r6, r0
	__asm__ volatile(
   23f64:	f04f 0340 	mov.w	r3, #64	; 0x40
   23f68:	f3ef 8711 	mrs	r7, BASEPRI
   23f6c:	f383 8812 	msr	BASEPRI_MAX, r3
   23f70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23f74:	481b      	ldr	r0, [pc, #108]	; (23fe4 <z_unpend_first_thread+0x84>)
   23f76:	f7fd ff55 	bl	21e24 <z_spin_lock_valid>
   23f7a:	b128      	cbz	r0, 23f88 <z_unpend_first_thread+0x28>
   23f7c:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   23f7e:	4819      	ldr	r0, [pc, #100]	; (23fe4 <z_unpend_first_thread+0x84>)
   23f80:	f7fd ff70 	bl	21e64 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   23f84:	2400      	movs	r4, #0
	return k;
   23f86:	e018      	b.n	23fba <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23f88:	4c17      	ldr	r4, [pc, #92]	; (23fe8 <z_unpend_first_thread+0x88>)
   23f8a:	2294      	movs	r2, #148	; 0x94
   23f8c:	4621      	mov	r1, r4
   23f8e:	4817      	ldr	r0, [pc, #92]	; (23fec <z_unpend_first_thread+0x8c>)
   23f90:	f004 fe3d 	bl	28c0e <assert_print>
   23f94:	2194      	movs	r1, #148	; 0x94
   23f96:	4620      	mov	r0, r4
   23f98:	f004 fe32 	bl	28c00 <assert_post_action>
			unpend_thread_no_timeout(thread);
   23f9c:	f00b fa04 	bl	2f3a8 <unpend_thread_no_timeout>
   23fa0:	f104 0018 	add.w	r0, r4, #24
   23fa4:	f000 fbb8 	bl	24718 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23fa8:	480e      	ldr	r0, [pc, #56]	; (23fe4 <z_unpend_first_thread+0x84>)
   23faa:	f7fd ff4b 	bl	21e44 <z_spin_unlock_valid>
   23fae:	b160      	cbz	r0, 23fca <z_unpend_first_thread+0x6a>
	__asm__ volatile(
   23fb0:	f387 8811 	msr	BASEPRI, r7
   23fb4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23fb8:	2501      	movs	r5, #1
   23fba:	b985      	cbnz	r5, 23fde <z_unpend_first_thread+0x7e>
		thread = _priq_wait_best(&wait_q->waitq);
   23fbc:	4630      	mov	r0, r6
   23fbe:	f00b fa01 	bl	2f3c4 <z_priq_dumb_best>
		if (thread != NULL) {
   23fc2:	4604      	mov	r4, r0
   23fc4:	2800      	cmp	r0, #0
   23fc6:	d1e9      	bne.n	23f9c <z_unpend_first_thread+0x3c>
   23fc8:	e7ee      	b.n	23fa8 <z_unpend_first_thread+0x48>
   23fca:	4c07      	ldr	r4, [pc, #28]	; (23fe8 <z_unpend_first_thread+0x88>)
   23fcc:	22c2      	movs	r2, #194	; 0xc2
   23fce:	4621      	mov	r1, r4
   23fd0:	4806      	ldr	r0, [pc, #24]	; (23fec <z_unpend_first_thread+0x8c>)
   23fd2:	f004 fe1c 	bl	28c0e <assert_print>
   23fd6:	21c2      	movs	r1, #194	; 0xc2
   23fd8:	4620      	mov	r0, r4
   23fda:	f004 fe11 	bl	28c00 <assert_post_action>
}
   23fde:	4620      	mov	r0, r4
   23fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23fe2:	bf00      	nop
   23fe4:	20003b10 	.word	0x20003b10
   23fe8:	00030164 	.word	0x00030164
   23fec:	00030128 	.word	0x00030128

00023ff0 <z_sched_init>:
{
   23ff0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   23ff2:	4804      	ldr	r0, [pc, #16]	; (24004 <z_sched_init+0x14>)
   23ff4:	f00b fa1e 	bl	2f434 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   23ff8:	2100      	movs	r1, #0
   23ffa:	4608      	mov	r0, r1
   23ffc:	f7ff fa04 	bl	23408 <k_sched_time_slice_set>
}
   24000:	bd08      	pop	{r3, pc}
   24002:	bf00      	nop
   24004:	20003adc 	.word	0x20003adc

00024008 <z_impl_k_yield>:
{
   24008:	b570      	push	{r4, r5, r6, lr}
   2400a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2400e:	bb3b      	cbnz	r3, 24060 <z_impl_k_yield+0x58>
	__asm__ volatile(
   24010:	f04f 0340 	mov.w	r3, #64	; 0x40
   24014:	f3ef 8611 	mrs	r6, BASEPRI
   24018:	f383 8812 	msr	BASEPRI_MAX, r3
   2401c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24020:	4839      	ldr	r0, [pc, #228]	; (24108 <z_impl_k_yield+0x100>)
   24022:	f7fd feff 	bl	21e24 <z_spin_lock_valid>
   24026:	b338      	cbz	r0, 24078 <z_impl_k_yield+0x70>
	z_spin_lock_set_owner(l);
   24028:	4837      	ldr	r0, [pc, #220]	; (24108 <z_impl_k_yield+0x100>)
   2402a:	f7fd ff1b 	bl	21e64 <z_spin_lock_set_owner>
		dequeue_thread(_current);
   2402e:	4c37      	ldr	r4, [pc, #220]	; (2410c <z_impl_k_yield+0x104>)
   24030:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24032:	7b4b      	ldrb	r3, [r1, #13]
   24034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24038:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2403a:	f104 0020 	add.w	r0, r4, #32
   2403e:	f7ff faaf 	bl	235a0 <z_priq_dumb_remove>
	queue_thread(_current);
   24042:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   24044:	7b6b      	ldrb	r3, [r5, #13]
   24046:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2404a:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2404c:	4b30      	ldr	r3, [pc, #192]	; (24110 <z_impl_k_yield+0x108>)
   2404e:	429d      	cmp	r5, r3
   24050:	d01c      	beq.n	2408c <z_impl_k_yield+0x84>
	return list->head == list;
   24052:	4b2e      	ldr	r3, [pc, #184]	; (2410c <z_impl_k_yield+0x104>)
   24054:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24058:	429c      	cmp	r4, r3
   2405a:	d128      	bne.n	240ae <z_impl_k_yield+0xa6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2405c:	2400      	movs	r4, #0
   2405e:	e026      	b.n	240ae <z_impl_k_yield+0xa6>
	__ASSERT(!arch_is_in_isr(), "");
   24060:	4c2c      	ldr	r4, [pc, #176]	; (24114 <z_impl_k_yield+0x10c>)
   24062:	f44f 62ae 	mov.w	r2, #1392	; 0x570
   24066:	4621      	mov	r1, r4
   24068:	482b      	ldr	r0, [pc, #172]	; (24118 <z_impl_k_yield+0x110>)
   2406a:	f004 fdd0 	bl	28c0e <assert_print>
   2406e:	f44f 61ae 	mov.w	r1, #1392	; 0x570
   24072:	4620      	mov	r0, r4
   24074:	f004 fdc4 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24078:	4c28      	ldr	r4, [pc, #160]	; (2411c <z_impl_k_yield+0x114>)
   2407a:	2294      	movs	r2, #148	; 0x94
   2407c:	4621      	mov	r1, r4
   2407e:	4826      	ldr	r0, [pc, #152]	; (24118 <z_impl_k_yield+0x110>)
   24080:	f004 fdc5 	bl	28c0e <assert_print>
   24084:	2194      	movs	r1, #148	; 0x94
   24086:	4620      	mov	r0, r4
   24088:	f004 fdba 	bl	28c00 <assert_post_action>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2408c:	4c21      	ldr	r4, [pc, #132]	; (24114 <z_impl_k_yield+0x10c>)
   2408e:	22ba      	movs	r2, #186	; 0xba
   24090:	4621      	mov	r1, r4
   24092:	4821      	ldr	r0, [pc, #132]	; (24118 <z_impl_k_yield+0x110>)
   24094:	f004 fdbb 	bl	28c0e <assert_print>
   24098:	21ba      	movs	r1, #186	; 0xba
   2409a:	4620      	mov	r0, r4
   2409c:	f004 fdb0 	bl	28c00 <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   240a0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   240a2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   240a4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   240a6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   240a8:	6065      	str	r5, [r4, #4]
}
   240aa:	e017      	b.n	240dc <z_impl_k_yield+0xd4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   240ac:	2400      	movs	r4, #0
   240ae:	b16c      	cbz	r4, 240cc <z_impl_k_yield+0xc4>
		if (z_sched_prio_cmp(thread, t) > 0) {
   240b0:	4621      	mov	r1, r4
   240b2:	4628      	mov	r0, r5
   240b4:	f00b f954 	bl	2f360 <z_sched_prio_cmp>
   240b8:	2800      	cmp	r0, #0
   240ba:	dcf1      	bgt.n	240a0 <z_impl_k_yield+0x98>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   240bc:	2c00      	cmp	r4, #0
   240be:	d0f6      	beq.n	240ae <z_impl_k_yield+0xa6>
	return (node == list->tail) ? NULL : node->next;
   240c0:	4b12      	ldr	r3, [pc, #72]	; (2410c <z_impl_k_yield+0x104>)
   240c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   240c4:	429c      	cmp	r4, r3
   240c6:	d0f1      	beq.n	240ac <z_impl_k_yield+0xa4>
   240c8:	6824      	ldr	r4, [r4, #0]
   240ca:	e7f0      	b.n	240ae <z_impl_k_yield+0xa6>
	sys_dnode_t *const tail = list->tail;
   240cc:	4b0f      	ldr	r3, [pc, #60]	; (2410c <z_impl_k_yield+0x104>)
   240ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   240d0:	f103 0120 	add.w	r1, r3, #32
   240d4:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   240d6:	606a      	str	r2, [r5, #4]
	tail->next = node;
   240d8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   240da:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   240dc:	2001      	movs	r0, #1
   240de:	f7ff fabd 	bl	2365c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   240e2:	4809      	ldr	r0, [pc, #36]	; (24108 <z_impl_k_yield+0x100>)
   240e4:	f7fd feae 	bl	21e44 <z_spin_unlock_valid>
   240e8:	b118      	cbz	r0, 240f2 <z_impl_k_yield+0xea>
   240ea:	4630      	mov	r0, r6
   240ec:	f7ef f840 	bl	13170 <arch_swap>
}
   240f0:	bd70      	pop	{r4, r5, r6, pc}
   240f2:	4c0a      	ldr	r4, [pc, #40]	; (2411c <z_impl_k_yield+0x114>)
   240f4:	22e1      	movs	r2, #225	; 0xe1
   240f6:	4621      	mov	r1, r4
   240f8:	4807      	ldr	r0, [pc, #28]	; (24118 <z_impl_k_yield+0x110>)
   240fa:	f004 fd88 	bl	28c0e <assert_print>
   240fe:	21e1      	movs	r1, #225	; 0xe1
   24100:	4620      	mov	r0, r4
   24102:	f004 fd7d 	bl	28c00 <assert_post_action>
   24106:	bf00      	nop
   24108:	20003b10 	.word	0x20003b10
   2410c:	20003ac0 	.word	0x20003ac0
   24110:	20002088 	.word	0x20002088
   24114:	00033cf0 	.word	0x00033cf0
   24118:	00030128 	.word	0x00030128
   2411c:	00030164 	.word	0x00030164

00024120 <z_tick_sleep>:
{
   24120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24124:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   24128:	2b00      	cmp	r3, #0
   2412a:	d14f      	bne.n	241cc <z_tick_sleep+0xac>
   2412c:	4604      	mov	r4, r0
   2412e:	460e      	mov	r6, r1
	if (ticks == 0) {
   24130:	ea50 0301 	orrs.w	r3, r0, r1
   24134:	d056      	beq.n	241e4 <z_tick_sleep+0xc4>
	if (Z_TICK_ABS(ticks) <= 0) {
   24136:	f06f 0301 	mvn.w	r3, #1
   2413a:	1a1b      	subs	r3, r3, r0
   2413c:	f04f 32ff 	mov.w	r2, #4294967295
   24140:	eb62 0201 	sbc.w	r2, r2, r1
   24144:	2b01      	cmp	r3, #1
   24146:	f172 0200 	sbcs.w	r2, r2, #0
   2414a:	db4f      	blt.n	241ec <z_tick_sleep+0xcc>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   2414c:	f06f 0501 	mvn.w	r5, #1
   24150:	1a2d      	subs	r5, r5, r0
   24152:	f04f 0340 	mov.w	r3, #64	; 0x40
   24156:	f3ef 8911 	mrs	r9, BASEPRI
   2415a:	f383 8812 	msr	BASEPRI_MAX, r3
   2415e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24162:	4834      	ldr	r0, [pc, #208]	; (24234 <z_tick_sleep+0x114>)
   24164:	f7fd fe5e 	bl	21e24 <z_spin_lock_valid>
   24168:	2800      	cmp	r0, #0
   2416a:	d043      	beq.n	241f4 <z_tick_sleep+0xd4>
	z_spin_lock_set_owner(l);
   2416c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 24234 <z_tick_sleep+0x114>
   24170:	4640      	mov	r0, r8
   24172:	f7fd fe77 	bl	21e64 <z_spin_lock_set_owner>
	pending_current = _current;
   24176:	4f30      	ldr	r7, [pc, #192]	; (24238 <z_tick_sleep+0x118>)
   24178:	68b8      	ldr	r0, [r7, #8]
   2417a:	4b30      	ldr	r3, [pc, #192]	; (2423c <z_tick_sleep+0x11c>)
   2417c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2417e:	f7ff fca9 	bl	23ad4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   24182:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24184:	4622      	mov	r2, r4
   24186:	4633      	mov	r3, r6
   24188:	492d      	ldr	r1, [pc, #180]	; (24240 <z_tick_sleep+0x120>)
   2418a:	3018      	adds	r0, #24
   2418c:	f000 fa08 	bl	245a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   24190:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   24192:	7b53      	ldrb	r3, [r2, #13]
   24194:	f043 0310 	orr.w	r3, r3, #16
   24198:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2419a:	4640      	mov	r0, r8
   2419c:	f7fd fe52 	bl	21e44 <z_spin_unlock_valid>
   241a0:	b390      	cbz	r0, 24208 <z_tick_sleep+0xe8>
   241a2:	4648      	mov	r0, r9
   241a4:	f7ee ffe4 	bl	13170 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   241a8:	4b23      	ldr	r3, [pc, #140]	; (24238 <z_tick_sleep+0x118>)
   241aa:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
   241ac:	7b5b      	ldrb	r3, [r3, #13]
   241ae:	f013 0f10 	tst.w	r3, #16
   241b2:	d133      	bne.n	2421c <z_tick_sleep+0xfc>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   241b4:	f00b f959 	bl	2f46a <sys_clock_tick_get_32>
   241b8:	1a28      	subs	r0, r5, r0
   241ba:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   241be:	2801      	cmp	r0, #1
   241c0:	f173 0300 	sbcs.w	r3, r3, #0
   241c4:	da00      	bge.n	241c8 <z_tick_sleep+0xa8>
	return 0;
   241c6:	2000      	movs	r0, #0
}
   241c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
   241cc:	4c1d      	ldr	r4, [pc, #116]	; (24244 <z_tick_sleep+0x124>)
   241ce:	f240 528c 	movw	r2, #1420	; 0x58c
   241d2:	4621      	mov	r1, r4
   241d4:	481c      	ldr	r0, [pc, #112]	; (24248 <z_tick_sleep+0x128>)
   241d6:	f004 fd1a 	bl	28c0e <assert_print>
   241da:	f240 518c 	movw	r1, #1420	; 0x58c
   241de:	4620      	mov	r0, r4
   241e0:	f004 fd0e 	bl	28c00 <assert_post_action>
	z_impl_k_yield();
   241e4:	f7ff ff10 	bl	24008 <z_impl_k_yield>
		return 0;
   241e8:	2000      	movs	r0, #0
   241ea:	e7ed      	b.n	241c8 <z_tick_sleep+0xa8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   241ec:	f00b f93d 	bl	2f46a <sys_clock_tick_get_32>
   241f0:	1905      	adds	r5, r0, r4
   241f2:	e7ae      	b.n	24152 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   241f4:	4c15      	ldr	r4, [pc, #84]	; (2424c <z_tick_sleep+0x12c>)
   241f6:	2294      	movs	r2, #148	; 0x94
   241f8:	4621      	mov	r1, r4
   241fa:	4813      	ldr	r0, [pc, #76]	; (24248 <z_tick_sleep+0x128>)
   241fc:	f004 fd07 	bl	28c0e <assert_print>
   24200:	2194      	movs	r1, #148	; 0x94
   24202:	4620      	mov	r0, r4
   24204:	f004 fcfc 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24208:	4c10      	ldr	r4, [pc, #64]	; (2424c <z_tick_sleep+0x12c>)
   2420a:	22e1      	movs	r2, #225	; 0xe1
   2420c:	4621      	mov	r1, r4
   2420e:	480e      	ldr	r0, [pc, #56]	; (24248 <z_tick_sleep+0x128>)
   24210:	f004 fcfd 	bl	28c0e <assert_print>
   24214:	21e1      	movs	r1, #225	; 0xe1
   24216:	4620      	mov	r0, r4
   24218:	f004 fcf2 	bl	28c00 <assert_post_action>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2421c:	4c09      	ldr	r4, [pc, #36]	; (24244 <z_tick_sleep+0x124>)
   2421e:	f240 52ad 	movw	r2, #1453	; 0x5ad
   24222:	4621      	mov	r1, r4
   24224:	4808      	ldr	r0, [pc, #32]	; (24248 <z_tick_sleep+0x128>)
   24226:	f004 fcf2 	bl	28c0e <assert_print>
   2422a:	f240 51ad 	movw	r1, #1453	; 0x5ad
   2422e:	4620      	mov	r0, r4
   24230:	f004 fce6 	bl	28c00 <assert_post_action>
   24234:	20003b10 	.word	0x20003b10
   24238:	20003ac0 	.word	0x20003ac0
   2423c:	20003b04 	.word	0x20003b04
   24240:	00023a2d 	.word	0x00023a2d
   24244:	00033cf0 	.word	0x00033cf0
   24248:	00030128 	.word	0x00030128
   2424c:	00030164 	.word	0x00030164

00024250 <z_impl_k_sleep>:
{
   24250:	b510      	push	{r4, lr}
   24252:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   24256:	b9f3      	cbnz	r3, 24296 <z_impl_k_sleep+0x46>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24258:	f1b1 3fff 	cmp.w	r1, #4294967295
   2425c:	bf08      	it	eq
   2425e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   24262:	d024      	beq.n	242ae <z_impl_k_sleep+0x5e>
	ticks = z_tick_sleep(ticks);
   24264:	f7ff ff5c 	bl	24120 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   24268:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   2426a:	0151      	lsls	r1, r2, #5
   2426c:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   24270:	0143      	lsls	r3, r0, #5
   24272:	1a1b      	subs	r3, r3, r0
   24274:	eb61 0102 	sbc.w	r1, r1, r2
   24278:	0089      	lsls	r1, r1, #2
   2427a:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   2427e:	009b      	lsls	r3, r3, #2
   24280:	181b      	adds	r3, r3, r0
   24282:	eb42 0201 	adc.w	r2, r2, r1
   24286:	00d2      	lsls	r2, r2, #3
   24288:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   2428c:	f3c3 3310 	ubfx	r3, r3, #12, #17
   24290:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   24294:	bd10      	pop	{r4, pc}
	__ASSERT(!arch_is_in_isr(), "");
   24296:	4c09      	ldr	r4, [pc, #36]	; (242bc <z_impl_k_sleep+0x6c>)
   24298:	f240 52bc 	movw	r2, #1468	; 0x5bc
   2429c:	4621      	mov	r1, r4
   2429e:	4808      	ldr	r0, [pc, #32]	; (242c0 <z_impl_k_sleep+0x70>)
   242a0:	f004 fcb5 	bl	28c0e <assert_print>
   242a4:	f240 51bc 	movw	r1, #1468	; 0x5bc
   242a8:	4620      	mov	r0, r4
   242aa:	f004 fca9 	bl	28c00 <assert_post_action>
		k_thread_suspend(_current);
   242ae:	4b05      	ldr	r3, [pc, #20]	; (242c4 <z_impl_k_sleep+0x74>)
   242b0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   242b2:	f7ff fd5f 	bl	23d74 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   242b6:	f04f 30ff 	mov.w	r0, #4294967295
   242ba:	e7eb      	b.n	24294 <z_impl_k_sleep+0x44>
   242bc:	00033cf0 	.word	0x00033cf0
   242c0:	00030128 	.word	0x00030128
   242c4:	20003ac0 	.word	0x20003ac0

000242c8 <z_impl_z_current_get>:
}
   242c8:	4b01      	ldr	r3, [pc, #4]	; (242d0 <z_impl_z_current_get+0x8>)
   242ca:	6898      	ldr	r0, [r3, #8]
   242cc:	4770      	bx	lr
   242ce:	bf00      	nop
   242d0:	20003ac0 	.word	0x20003ac0

000242d4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   242d4:	b570      	push	{r4, r5, r6, lr}
   242d6:	4604      	mov	r4, r0
   242d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   242dc:	f3ef 8511 	mrs	r5, BASEPRI
   242e0:	f383 8812 	msr	BASEPRI_MAX, r3
   242e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   242e8:	4842      	ldr	r0, [pc, #264]	; (243f4 <z_thread_abort+0x120>)
   242ea:	f7fd fd9b 	bl	21e24 <z_spin_lock_valid>
   242ee:	b1a0      	cbz	r0, 2431a <z_thread_abort+0x46>
   242f0:	462e      	mov	r6, r5
	z_spin_lock_set_owner(l);
   242f2:	4840      	ldr	r0, [pc, #256]	; (243f4 <z_thread_abort+0x120>)
   242f4:	f7fd fdb6 	bl	21e64 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   242f8:	7b23      	ldrb	r3, [r4, #12]
   242fa:	f013 0f01 	tst.w	r3, #1
   242fe:	d116      	bne.n	2432e <z_thread_abort+0x5a>
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   24300:	7b63      	ldrb	r3, [r4, #13]
   24302:	f013 0f08 	tst.w	r3, #8
   24306:	d03a      	beq.n	2437e <z_thread_abort+0xaa>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24308:	483a      	ldr	r0, [pc, #232]	; (243f4 <z_thread_abort+0x120>)
   2430a:	f7fd fd9b 	bl	21e44 <z_spin_unlock_valid>
   2430e:	b360      	cbz	r0, 2436a <z_thread_abort+0x96>
	__asm__ volatile(
   24310:	f385 8811 	msr	BASEPRI, r5
   24314:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   24318:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2431a:	4c37      	ldr	r4, [pc, #220]	; (243f8 <z_thread_abort+0x124>)
   2431c:	2294      	movs	r2, #148	; 0x94
   2431e:	4621      	mov	r1, r4
   24320:	4836      	ldr	r0, [pc, #216]	; (243fc <z_thread_abort+0x128>)
   24322:	f004 fc74 	bl	28c0e <assert_print>
   24326:	2194      	movs	r1, #148	; 0x94
   24328:	4620      	mov	r0, r4
   2432a:	f004 fc69 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2432e:	4831      	ldr	r0, [pc, #196]	; (243f4 <z_thread_abort+0x120>)
   24330:	f7fd fd88 	bl	21e44 <z_spin_unlock_valid>
   24334:	b178      	cbz	r0, 24356 <z_thread_abort+0x82>
   24336:	f385 8811 	msr	BASEPRI, r5
   2433a:	f3bf 8f6f 	isb	sy
		__ASSERT(false, "aborting essential thread %p", thread);
   2433e:	4c30      	ldr	r4, [pc, #192]	; (24400 <z_thread_abort+0x12c>)
   24340:	f44f 62d9 	mov.w	r2, #1736	; 0x6c8
   24344:	4621      	mov	r1, r4
   24346:	482d      	ldr	r0, [pc, #180]	; (243fc <z_thread_abort+0x128>)
   24348:	f004 fc61 	bl	28c0e <assert_print>
   2434c:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
   24350:	4620      	mov	r0, r4
   24352:	f004 fc55 	bl	28c00 <assert_post_action>
   24356:	4c28      	ldr	r4, [pc, #160]	; (243f8 <z_thread_abort+0x124>)
   24358:	22c2      	movs	r2, #194	; 0xc2
   2435a:	4621      	mov	r1, r4
   2435c:	4827      	ldr	r0, [pc, #156]	; (243fc <z_thread_abort+0x128>)
   2435e:	f004 fc56 	bl	28c0e <assert_print>
   24362:	21c2      	movs	r1, #194	; 0xc2
   24364:	4620      	mov	r0, r4
   24366:	f004 fc4b 	bl	28c00 <assert_post_action>
   2436a:	4c23      	ldr	r4, [pc, #140]	; (243f8 <z_thread_abort+0x124>)
   2436c:	22c2      	movs	r2, #194	; 0xc2
   2436e:	4621      	mov	r1, r4
   24370:	4822      	ldr	r0, [pc, #136]	; (243fc <z_thread_abort+0x128>)
   24372:	f004 fc4c 	bl	28c0e <assert_print>
   24376:	21c2      	movs	r1, #194	; 0xc2
   24378:	4620      	mov	r0, r4
   2437a:	f004 fc41 	bl	28c00 <assert_post_action>
	end_thread(thread);
   2437e:	4620      	mov	r0, r4
   24380:	f7ff fdbc 	bl	23efc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   24384:	4b1f      	ldr	r3, [pc, #124]	; (24404 <z_thread_abort+0x130>)
   24386:	689b      	ldr	r3, [r3, #8]
   24388:	42a3      	cmp	r3, r4
   2438a:	d008      	beq.n	2439e <z_thread_abort+0xca>
   2438c:	4819      	ldr	r0, [pc, #100]	; (243f4 <z_thread_abort+0x120>)
   2438e:	f7fd fd59 	bl	21e44 <z_spin_unlock_valid>
   24392:	b328      	cbz	r0, 243e0 <z_thread_abort+0x10c>
   24394:	f386 8811 	msr	BASEPRI, r6
   24398:	f3bf 8f6f 	isb	sy
   2439c:	e7bc      	b.n	24318 <z_thread_abort+0x44>
   2439e:	f3ef 8305 	mrs	r3, IPSR
   243a2:	2b00      	cmp	r3, #0
   243a4:	d1f2      	bne.n	2438c <z_thread_abort+0xb8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   243a6:	4813      	ldr	r0, [pc, #76]	; (243f4 <z_thread_abort+0x120>)
   243a8:	f7fd fd4c 	bl	21e44 <z_spin_unlock_valid>
   243ac:	b170      	cbz	r0, 243cc <z_thread_abort+0xf8>
   243ae:	4628      	mov	r0, r5
   243b0:	f7ee fede 	bl	13170 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   243b4:	4c12      	ldr	r4, [pc, #72]	; (24400 <z_thread_abort+0x12c>)
   243b6:	f240 62f7 	movw	r2, #1783	; 0x6f7
   243ba:	4621      	mov	r1, r4
   243bc:	480f      	ldr	r0, [pc, #60]	; (243fc <z_thread_abort+0x128>)
   243be:	f004 fc26 	bl	28c0e <assert_print>
   243c2:	f240 61f7 	movw	r1, #1783	; 0x6f7
   243c6:	4620      	mov	r0, r4
   243c8:	f004 fc1a 	bl	28c00 <assert_post_action>
   243cc:	4c0a      	ldr	r4, [pc, #40]	; (243f8 <z_thread_abort+0x124>)
   243ce:	22e1      	movs	r2, #225	; 0xe1
   243d0:	4621      	mov	r1, r4
   243d2:	480a      	ldr	r0, [pc, #40]	; (243fc <z_thread_abort+0x128>)
   243d4:	f004 fc1b 	bl	28c0e <assert_print>
   243d8:	21e1      	movs	r1, #225	; 0xe1
   243da:	4620      	mov	r0, r4
   243dc:	f004 fc10 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   243e0:	4c05      	ldr	r4, [pc, #20]	; (243f8 <z_thread_abort+0x124>)
   243e2:	22c2      	movs	r2, #194	; 0xc2
   243e4:	4621      	mov	r1, r4
   243e6:	4805      	ldr	r0, [pc, #20]	; (243fc <z_thread_abort+0x128>)
   243e8:	f004 fc11 	bl	28c0e <assert_print>
   243ec:	21c2      	movs	r1, #194	; 0xc2
   243ee:	4620      	mov	r0, r4
   243f0:	f004 fc06 	bl	28c00 <assert_post_action>
   243f4:	20003b10 	.word	0x20003b10
   243f8:	00030164 	.word	0x00030164
   243fc:	00030128 	.word	0x00030128
   24400:	00033cf0 	.word	0x00033cf0
   24404:	20003ac0 	.word	0x20003ac0

00024408 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   24408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2440c:	4605      	mov	r5, r0
   2440e:	460f      	mov	r7, r1
   24410:	4690      	mov	r8, r2
	__asm__ volatile(
   24412:	f04f 0340 	mov.w	r3, #64	; 0x40
   24416:	f3ef 8611 	mrs	r6, BASEPRI
   2441a:	f383 8812 	msr	BASEPRI_MAX, r3
   2441e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24422:	4821      	ldr	r0, [pc, #132]	; (244a8 <z_sched_wake+0xa0>)
   24424:	f7fd fcfe 	bl	21e24 <z_spin_lock_valid>
   24428:	b138      	cbz	r0, 2443a <z_sched_wake+0x32>
   2442a:	2400      	movs	r4, #0
   2442c:	4682      	mov	sl, r0
	z_spin_lock_set_owner(l);
   2442e:	481e      	ldr	r0, [pc, #120]	; (244a8 <z_sched_wake+0xa0>)
   24430:	f7fd fd18 	bl	21e64 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;
   24434:	f04f 0900 	mov.w	r9, #0
	return k;
   24438:	e020      	b.n	2447c <z_sched_wake+0x74>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2443a:	4c1c      	ldr	r4, [pc, #112]	; (244ac <z_sched_wake+0xa4>)
   2443c:	2294      	movs	r2, #148	; 0x94
   2443e:	4621      	mov	r1, r4
   24440:	481b      	ldr	r0, [pc, #108]	; (244b0 <z_sched_wake+0xa8>)
   24442:	f004 fbe4 	bl	28c0e <assert_print>
   24446:	2194      	movs	r1, #148	; 0x94
   24448:	4620      	mov	r0, r4
   2444a:	f004 fbd9 	bl	28c00 <assert_post_action>
   2444e:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   24452:	f8c0 8014 	str.w	r8, [r0, #20]

		if (thread != NULL) {
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   24456:	f00a ffa7 	bl	2f3a8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2445a:	f104 0018 	add.w	r0, r4, #24
   2445e:	f000 f95b 	bl	24718 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   24462:	4620      	mov	r0, r4
   24464:	f7ff fa0c 	bl	23880 <ready_thread>
			ret = true;
   24468:	46d1      	mov	r9, sl
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2446a:	480f      	ldr	r0, [pc, #60]	; (244a8 <z_sched_wake+0xa0>)
   2446c:	f7fd fcea 	bl	21e44 <z_spin_unlock_valid>
   24470:	b160      	cbz	r0, 2448c <z_sched_wake+0x84>
	__asm__ volatile(
   24472:	f386 8811 	msr	BASEPRI, r6
   24476:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2447a:	2401      	movs	r4, #1
   2447c:	b984      	cbnz	r4, 244a0 <z_sched_wake+0x98>
		thread = _priq_wait_best(&wait_q->waitq);
   2447e:	4628      	mov	r0, r5
   24480:	f00a ffa0 	bl	2f3c4 <z_priq_dumb_best>
		if (thread != NULL) {
   24484:	4604      	mov	r4, r0
   24486:	2800      	cmp	r0, #0
   24488:	d1e1      	bne.n	2444e <z_sched_wake+0x46>
   2448a:	e7ee      	b.n	2446a <z_sched_wake+0x62>
   2448c:	4c07      	ldr	r4, [pc, #28]	; (244ac <z_sched_wake+0xa4>)
   2448e:	22c2      	movs	r2, #194	; 0xc2
   24490:	4621      	mov	r1, r4
   24492:	4807      	ldr	r0, [pc, #28]	; (244b0 <z_sched_wake+0xa8>)
   24494:	f004 fbbb 	bl	28c0e <assert_print>
   24498:	21c2      	movs	r1, #194	; 0xc2
   2449a:	4620      	mov	r0, r4
   2449c:	f004 fbb0 	bl	28c00 <assert_post_action>
		}
	}

	return ret;
}
   244a0:	4648      	mov	r0, r9
   244a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   244a6:	bf00      	nop
   244a8:	20003b10 	.word	0x20003b10
   244ac:	00030164 	.word	0x00030164
   244b0:	00030128 	.word	0x00030128

000244b4 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   244b4:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   244b8:	b083      	sub	sp, #12
   244ba:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   244bc:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   244c0:	e9cd bc00 	strd	fp, ip, [sp]
   244c4:	f7ff fb60 	bl	23b88 <z_pend_curr>

	if (data != NULL) {
   244c8:	b11c      	cbz	r4, 244d2 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   244ca:	4b03      	ldr	r3, [pc, #12]	; (244d8 <z_sched_wait+0x24>)
   244cc:	689b      	ldr	r3, [r3, #8]
   244ce:	695b      	ldr	r3, [r3, #20]
   244d0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   244d2:	b003      	add	sp, #12
   244d4:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   244d8:	20003ac0 	.word	0x20003ac0

000244dc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   244dc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   244de:	4806      	ldr	r0, [pc, #24]	; (244f8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   244e0:	4a06      	ldr	r2, [pc, #24]	; (244fc <z_data_copy+0x20>)
   244e2:	1a12      	subs	r2, r2, r0
   244e4:	4906      	ldr	r1, [pc, #24]	; (24500 <z_data_copy+0x24>)
   244e6:	f00a fd9b 	bl	2f020 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   244ea:	4a06      	ldr	r2, [pc, #24]	; (24504 <z_data_copy+0x28>)
   244ec:	4906      	ldr	r1, [pc, #24]	; (24508 <z_data_copy+0x2c>)
   244ee:	4807      	ldr	r0, [pc, #28]	; (2450c <z_data_copy+0x30>)
   244f0:	f00a fd96 	bl	2f020 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   244f4:	bd08      	pop	{r3, pc}
   244f6:	bf00      	nop
   244f8:	20000000 	.word	0x20000000
   244fc:	20000bd4 	.word	0x20000bd4
   24500:	00034064 	.word	0x00034064
   24504:	00000000 	.word	0x00000000
   24508:	00034064 	.word	0x00034064
   2450c:	20000000 	.word	0x20000000

00024510 <first>:
	return list->head == list;
   24510:	4b03      	ldr	r3, [pc, #12]	; (24520 <first+0x10>)
   24512:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24514:	4298      	cmp	r0, r3
   24516:	d000      	beq.n	2451a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   24518:	4770      	bx	lr
   2451a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   2451c:	e7fc      	b.n	24518 <first+0x8>
   2451e:	bf00      	nop
   24520:	200008dc 	.word	0x200008dc

00024524 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24524:	b130      	cbz	r0, 24534 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   24526:	4a04      	ldr	r2, [pc, #16]	; (24538 <next+0x14>)
   24528:	6852      	ldr	r2, [r2, #4]
   2452a:	4290      	cmp	r0, r2
   2452c:	d001      	beq.n	24532 <next+0xe>
   2452e:	6800      	ldr	r0, [r0, #0]
   24530:	4770      	bx	lr
   24532:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   24534:	4770      	bx	lr
   24536:	bf00      	nop
   24538:	200008dc 	.word	0x200008dc

0002453c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   2453c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2453e:	4b04      	ldr	r3, [pc, #16]	; (24550 <elapsed+0x14>)
   24540:	681b      	ldr	r3, [r3, #0]
   24542:	b10b      	cbz	r3, 24548 <elapsed+0xc>
   24544:	2000      	movs	r0, #0
}
   24546:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   24548:	f7fa faae 	bl	1eaa8 <sys_clock_elapsed>
   2454c:	e7fb      	b.n	24546 <elapsed+0xa>
   2454e:	bf00      	nop
   24550:	20003b14 	.word	0x20003b14

00024554 <next_timeout>:

static int32_t next_timeout(void)
{
   24554:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   24556:	f7ff ffdb 	bl	24510 <first>
   2455a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   2455c:	f7ff ffee 	bl	2453c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   24560:	b17c      	cbz	r4, 24582 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   24562:	6923      	ldr	r3, [r4, #16]
   24564:	6962      	ldr	r2, [r4, #20]
   24566:	1a1b      	subs	r3, r3, r0
   24568:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2456c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   24570:	f172 0100 	sbcs.w	r1, r2, #0
   24574:	da08      	bge.n	24588 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   24576:	2a00      	cmp	r2, #0
   24578:	db01      	blt.n	2457e <next_timeout+0x2a>
   2457a:	4618      	mov	r0, r3
   2457c:	e006      	b.n	2458c <next_timeout+0x38>
   2457e:	2300      	movs	r3, #0
   24580:	e7fb      	b.n	2457a <next_timeout+0x26>
		ret = MAX_WAIT;
   24582:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24586:	e001      	b.n	2458c <next_timeout+0x38>
   24588:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2458c:	4b03      	ldr	r3, [pc, #12]	; (2459c <next_timeout+0x48>)
   2458e:	691b      	ldr	r3, [r3, #16]
   24590:	b113      	cbz	r3, 24598 <next_timeout+0x44>
   24592:	4283      	cmp	r3, r0
   24594:	da00      	bge.n	24598 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   24596:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   24598:	bd10      	pop	{r4, pc}
   2459a:	bf00      	nop
   2459c:	20003ac0 	.word	0x20003ac0

000245a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   245a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   245a4:	bf08      	it	eq
   245a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   245aa:	f000 80a6 	beq.w	246fa <z_add_timeout+0x15a>
{
   245ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   245b2:	4604      	mov	r4, r0
   245b4:	4616      	mov	r6, r2
   245b6:	461d      	mov	r5, r3
	return node->next != NULL;
   245b8:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   245ba:	b98b      	cbnz	r3, 245e0 <z_add_timeout+0x40>
	to->fn = fn;
   245bc:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   245be:	2700      	movs	r7, #0
	__asm__ volatile(
   245c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   245c4:	f3ef 8a11 	mrs	sl, BASEPRI
   245c8:	f383 8812 	msr	BASEPRI_MAX, r3
   245cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245d0:	484a      	ldr	r0, [pc, #296]	; (246fc <z_add_timeout+0x15c>)
   245d2:	f7fd fc27 	bl	21e24 <z_spin_lock_valid>
   245d6:	b168      	cbz	r0, 245f4 <z_add_timeout+0x54>
	z_spin_lock_set_owner(l);
   245d8:	4848      	ldr	r0, [pc, #288]	; (246fc <z_add_timeout+0x15c>)
   245da:	f7fd fc43 	bl	21e64 <z_spin_lock_set_owner>
	return k;
   245de:	e03f      	b.n	24660 <z_add_timeout+0xc0>
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   245e0:	4c47      	ldr	r4, [pc, #284]	; (24700 <z_add_timeout+0x160>)
   245e2:	2263      	movs	r2, #99	; 0x63
   245e4:	4621      	mov	r1, r4
   245e6:	4847      	ldr	r0, [pc, #284]	; (24704 <z_add_timeout+0x164>)
   245e8:	f004 fb11 	bl	28c0e <assert_print>
   245ec:	2163      	movs	r1, #99	; 0x63
   245ee:	4620      	mov	r0, r4
   245f0:	f004 fb06 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245f4:	4c44      	ldr	r4, [pc, #272]	; (24708 <z_add_timeout+0x168>)
   245f6:	2294      	movs	r2, #148	; 0x94
   245f8:	4621      	mov	r1, r4
   245fa:	4842      	ldr	r0, [pc, #264]	; (24704 <z_add_timeout+0x164>)
   245fc:	f004 fb07 	bl	28c0e <assert_print>
   24600:	2194      	movs	r1, #148	; 0x94
   24602:	4620      	mov	r0, r4
   24604:	f004 fafc 	bl	28c00 <assert_post_action>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   24608:	f116 0801 	adds.w	r8, r6, #1
   2460c:	f145 0900 	adc.w	r9, r5, #0
   24610:	f7ff ff94 	bl	2453c <elapsed>
   24614:	eb18 0300 	adds.w	r3, r8, r0
   24618:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   2461c:	6123      	str	r3, [r4, #16]
   2461e:	6160      	str	r0, [r4, #20]
   24620:	e03e      	b.n	246a0 <z_add_timeout+0x100>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   24622:	1a52      	subs	r2, r2, r1
   24624:	eb67 0303 	sbc.w	r3, r7, r3
   24628:	6102      	str	r2, [r0, #16]
   2462a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   2462c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   2462e:	6063      	str	r3, [r4, #4]
	node->next = successor;
   24630:	6020      	str	r0, [r4, #0]
	prev->next = node;
   24632:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   24634:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   24636:	e005      	b.n	24644 <z_add_timeout+0xa4>
	sys_dnode_t *const tail = list->tail;
   24638:	4b34      	ldr	r3, [pc, #208]	; (2470c <z_add_timeout+0x16c>)
   2463a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   2463c:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   2463e:	6062      	str	r2, [r4, #4]
	tail->next = node;
   24640:	6014      	str	r4, [r2, #0]
	list->tail = node;
   24642:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   24644:	f7ff ff64 	bl	24510 <first>
   24648:	4284      	cmp	r4, r0
   2464a:	d03d      	beq.n	246c8 <z_add_timeout+0x128>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2464c:	482b      	ldr	r0, [pc, #172]	; (246fc <z_add_timeout+0x15c>)
   2464e:	f7fd fbf9 	bl	21e44 <z_spin_unlock_valid>
   24652:	2800      	cmp	r0, #0
   24654:	d045      	beq.n	246e2 <z_add_timeout+0x142>
	__asm__ volatile(
   24656:	f38a 8811 	msr	BASEPRI, sl
   2465a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2465e:	2701      	movs	r7, #1
   24660:	2f00      	cmp	r7, #0
   24662:	d148      	bne.n	246f6 <z_add_timeout+0x156>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   24664:	f06f 0101 	mvn.w	r1, #1
   24668:	1b89      	subs	r1, r1, r6
   2466a:	f04f 30ff 	mov.w	r0, #4294967295
   2466e:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   24672:	2a00      	cmp	r2, #0
   24674:	dbc8      	blt.n	24608 <z_add_timeout+0x68>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   24676:	4a26      	ldr	r2, [pc, #152]	; (24710 <z_add_timeout+0x170>)
   24678:	6811      	ldr	r1, [r2, #0]
   2467a:	6852      	ldr	r2, [r2, #4]
   2467c:	1873      	adds	r3, r6, r1
   2467e:	eb42 0205 	adc.w	r2, r2, r5
   24682:	f06f 0101 	mvn.w	r1, #1
   24686:	1ac9      	subs	r1, r1, r3
   24688:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   2468c:	4608      	mov	r0, r1
   2468e:	461a      	mov	r2, r3
   24690:	2901      	cmp	r1, #1
   24692:	f173 0300 	sbcs.w	r3, r3, #0
   24696:	da01      	bge.n	2469c <z_add_timeout+0xfc>
   24698:	2001      	movs	r0, #1
   2469a:	2200      	movs	r2, #0
   2469c:	6120      	str	r0, [r4, #16]
   2469e:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   246a0:	f7ff ff36 	bl	24510 <first>
   246a4:	2800      	cmp	r0, #0
   246a6:	d0c7      	beq.n	24638 <z_add_timeout+0x98>
			if (t->dticks > to->dticks) {
   246a8:	6902      	ldr	r2, [r0, #16]
   246aa:	6947      	ldr	r7, [r0, #20]
   246ac:	6921      	ldr	r1, [r4, #16]
   246ae:	6963      	ldr	r3, [r4, #20]
   246b0:	4291      	cmp	r1, r2
   246b2:	eb73 0e07 	sbcs.w	lr, r3, r7
   246b6:	dbb4      	blt.n	24622 <z_add_timeout+0x82>
			to->dticks -= t->dticks;
   246b8:	1a89      	subs	r1, r1, r2
   246ba:	eb63 0307 	sbc.w	r3, r3, r7
   246be:	6121      	str	r1, [r4, #16]
   246c0:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   246c2:	f7ff ff2f 	bl	24524 <next>
   246c6:	e7ed      	b.n	246a4 <z_add_timeout+0x104>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   246c8:	f7ff ff44 	bl	24554 <next_timeout>

			if (next_time == 0 ||
   246cc:	4603      	mov	r3, r0
   246ce:	b118      	cbz	r0, 246d8 <z_add_timeout+0x138>
			    _current_cpu->slice_ticks != next_time) {
   246d0:	4a10      	ldr	r2, [pc, #64]	; (24714 <z_add_timeout+0x174>)
   246d2:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   246d4:	4282      	cmp	r2, r0
   246d6:	d0b9      	beq.n	2464c <z_add_timeout+0xac>
				sys_clock_set_timeout(next_time, false);
   246d8:	2100      	movs	r1, #0
   246da:	4618      	mov	r0, r3
   246dc:	f7fa f9b2 	bl	1ea44 <sys_clock_set_timeout>
   246e0:	e7b4      	b.n	2464c <z_add_timeout+0xac>
   246e2:	4c09      	ldr	r4, [pc, #36]	; (24708 <z_add_timeout+0x168>)
   246e4:	22c2      	movs	r2, #194	; 0xc2
   246e6:	4621      	mov	r1, r4
   246e8:	4806      	ldr	r0, [pc, #24]	; (24704 <z_add_timeout+0x164>)
   246ea:	f004 fa90 	bl	28c0e <assert_print>
   246ee:	21c2      	movs	r1, #194	; 0xc2
   246f0:	4620      	mov	r0, r4
   246f2:	f004 fa85 	bl	28c00 <assert_post_action>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   246f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   246fa:	4770      	bx	lr
   246fc:	20003b18 	.word	0x20003b18
   24700:	00033d40 	.word	0x00033d40
   24704:	00030128 	.word	0x00030128
   24708:	00030164 	.word	0x00030164
   2470c:	200008dc 	.word	0x200008dc
   24710:	200022d0 	.word	0x200022d0
   24714:	20003ac0 	.word	0x20003ac0

00024718 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   24718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2471c:	4605      	mov	r5, r0
	__asm__ volatile(
   2471e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24722:	f3ef 8711 	mrs	r7, BASEPRI
   24726:	f383 8812 	msr	BASEPRI_MAX, r3
   2472a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2472e:	481a      	ldr	r0, [pc, #104]	; (24798 <z_abort_timeout+0x80>)
   24730:	f7fd fb78 	bl	21e24 <z_spin_lock_valid>
   24734:	b130      	cbz	r0, 24744 <z_abort_timeout+0x2c>
   24736:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   24738:	4817      	ldr	r0, [pc, #92]	; (24798 <z_abort_timeout+0x80>)
   2473a:	f7fd fb93 	bl	21e64 <z_spin_lock_set_owner>
	int ret = -EINVAL;
   2473e:	f06f 0815 	mvn.w	r8, #21
	return k;
   24742:	e016      	b.n	24772 <z_abort_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24744:	4c15      	ldr	r4, [pc, #84]	; (2479c <z_abort_timeout+0x84>)
   24746:	2294      	movs	r2, #148	; 0x94
   24748:	4621      	mov	r1, r4
   2474a:	4815      	ldr	r0, [pc, #84]	; (247a0 <z_abort_timeout+0x88>)
   2474c:	f004 fa5f 	bl	28c0e <assert_print>
   24750:	2194      	movs	r1, #148	; 0x94
   24752:	4620      	mov	r0, r4
   24754:	f004 fa54 	bl	28c00 <assert_post_action>

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
   24758:	4628      	mov	r0, r5
   2475a:	f00a fe6f 	bl	2f43c <remove_timeout>
			ret = 0;
   2475e:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24760:	480d      	ldr	r0, [pc, #52]	; (24798 <z_abort_timeout+0x80>)
   24762:	f7fd fb6f 	bl	21e44 <z_spin_unlock_valid>
   24766:	b150      	cbz	r0, 2477e <z_abort_timeout+0x66>
	__asm__ volatile(
   24768:	f387 8811 	msr	BASEPRI, r7
   2476c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24770:	2401      	movs	r4, #1
   24772:	4626      	mov	r6, r4
   24774:	b96c      	cbnz	r4, 24792 <z_abort_timeout+0x7a>
	return node->next != NULL;
   24776:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
   24778:	2b00      	cmp	r3, #0
   2477a:	d1ed      	bne.n	24758 <z_abort_timeout+0x40>
   2477c:	e7f0      	b.n	24760 <z_abort_timeout+0x48>
   2477e:	4c07      	ldr	r4, [pc, #28]	; (2479c <z_abort_timeout+0x84>)
   24780:	22c2      	movs	r2, #194	; 0xc2
   24782:	4621      	mov	r1, r4
   24784:	4806      	ldr	r0, [pc, #24]	; (247a0 <z_abort_timeout+0x88>)
   24786:	f004 fa42 	bl	28c0e <assert_print>
   2478a:	21c2      	movs	r1, #194	; 0xc2
   2478c:	4620      	mov	r0, r4
   2478e:	f004 fa37 	bl	28c00 <assert_post_action>
		}
	}

	return ret;
}
   24792:	4640      	mov	r0, r8
   24794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24798:	20003b18 	.word	0x20003b18
   2479c:	00030164 	.word	0x00030164
   247a0:	00030128 	.word	0x00030128

000247a4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   247a4:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   247a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   247aa:	f3ef 8611 	mrs	r6, BASEPRI
   247ae:	f383 8812 	msr	BASEPRI_MAX, r3
   247b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247b6:	4817      	ldr	r0, [pc, #92]	; (24814 <z_get_next_timeout_expiry+0x70>)
   247b8:	f7fd fb34 	bl	21e24 <z_spin_lock_valid>
   247bc:	b198      	cbz	r0, 247e6 <z_get_next_timeout_expiry+0x42>
   247be:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   247c0:	4814      	ldr	r0, [pc, #80]	; (24814 <z_get_next_timeout_expiry+0x70>)
   247c2:	f7fd fb4f 	bl	21e64 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   247c6:	f04f 34ff 	mov.w	r4, #4294967295

	LOCKED(&timeout_lock) {
   247ca:	bb05      	cbnz	r5, 2480e <z_get_next_timeout_expiry+0x6a>
		ret = next_timeout();
   247cc:	f7ff fec2 	bl	24554 <next_timeout>
   247d0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247d2:	4810      	ldr	r0, [pc, #64]	; (24814 <z_get_next_timeout_expiry+0x70>)
   247d4:	f7fd fb36 	bl	21e44 <z_spin_unlock_valid>
   247d8:	b178      	cbz	r0, 247fa <z_get_next_timeout_expiry+0x56>
	__asm__ volatile(
   247da:	f386 8811 	msr	BASEPRI, r6
   247de:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   247e2:	2501      	movs	r5, #1
   247e4:	e7f1      	b.n	247ca <z_get_next_timeout_expiry+0x26>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247e6:	4c0c      	ldr	r4, [pc, #48]	; (24818 <z_get_next_timeout_expiry+0x74>)
   247e8:	2294      	movs	r2, #148	; 0x94
   247ea:	4621      	mov	r1, r4
   247ec:	480b      	ldr	r0, [pc, #44]	; (2481c <z_get_next_timeout_expiry+0x78>)
   247ee:	f004 fa0e 	bl	28c0e <assert_print>
   247f2:	2194      	movs	r1, #148	; 0x94
   247f4:	4620      	mov	r0, r4
   247f6:	f004 fa03 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247fa:	4c07      	ldr	r4, [pc, #28]	; (24818 <z_get_next_timeout_expiry+0x74>)
   247fc:	22c2      	movs	r2, #194	; 0xc2
   247fe:	4621      	mov	r1, r4
   24800:	4806      	ldr	r0, [pc, #24]	; (2481c <z_get_next_timeout_expiry+0x78>)
   24802:	f004 fa04 	bl	28c0e <assert_print>
   24806:	21c2      	movs	r1, #194	; 0xc2
   24808:	4620      	mov	r0, r4
   2480a:	f004 f9f9 	bl	28c00 <assert_post_action>
	}
	return ret;
}
   2480e:	4620      	mov	r0, r4
   24810:	bd70      	pop	{r4, r5, r6, pc}
   24812:	bf00      	nop
   24814:	20003b18 	.word	0x20003b18
   24818:	00030164 	.word	0x00030164
   2481c:	00030128 	.word	0x00030128

00024820 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   24820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24824:	4607      	mov	r7, r0
   24826:	4688      	mov	r8, r1
	__asm__ volatile(
   24828:	f04f 0340 	mov.w	r3, #64	; 0x40
   2482c:	f3ef 8611 	mrs	r6, BASEPRI
   24830:	f383 8812 	msr	BASEPRI_MAX, r3
   24834:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24838:	481f      	ldr	r0, [pc, #124]	; (248b8 <z_set_timeout_expiry+0x98>)
   2483a:	f7fd faf3 	bl	21e24 <z_spin_lock_valid>
   2483e:	b120      	cbz	r0, 2484a <z_set_timeout_expiry+0x2a>
   24840:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   24842:	481d      	ldr	r0, [pc, #116]	; (248b8 <z_set_timeout_expiry+0x98>)
   24844:	f7fd fb0e 	bl	21e64 <z_spin_lock_set_owner>
	return k;
   24848:	e018      	b.n	2487c <z_set_timeout_expiry+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2484a:	4c1c      	ldr	r4, [pc, #112]	; (248bc <z_set_timeout_expiry+0x9c>)
   2484c:	2294      	movs	r2, #148	; 0x94
   2484e:	4621      	mov	r1, r4
   24850:	481b      	ldr	r0, [pc, #108]	; (248c0 <z_set_timeout_expiry+0xa0>)
   24852:	f004 f9dc 	bl	28c0e <assert_print>
   24856:	2194      	movs	r1, #148	; 0x94
   24858:	4620      	mov	r0, r4
   2485a:	f004 f9d1 	bl	28c00 <assert_post_action>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   2485e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   24860:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   24864:	2801      	cmp	r0, #1
   24866:	dd00      	ble.n	2486a <z_set_timeout_expiry+0x4a>
   24868:	b99c      	cbnz	r4, 24892 <z_set_timeout_expiry+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2486a:	4813      	ldr	r0, [pc, #76]	; (248b8 <z_set_timeout_expiry+0x98>)
   2486c:	f7fd faea 	bl	21e44 <z_spin_unlock_valid>
   24870:	b1b0      	cbz	r0, 248a0 <z_set_timeout_expiry+0x80>
	__asm__ volatile(
   24872:	f386 8811 	msr	BASEPRI, r6
   24876:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2487a:	2501      	movs	r5, #1
   2487c:	462c      	mov	r4, r5
   2487e:	b9cd      	cbnz	r5, 248b4 <z_set_timeout_expiry+0x94>
		int next_to = next_timeout();
   24880:	f7ff fe68 	bl	24554 <next_timeout>
			      || (ticks <= next_to);
   24884:	f1b0 3fff 	cmp.w	r0, #4294967295
   24888:	d0e9      	beq.n	2485e <z_set_timeout_expiry+0x3e>
   2488a:	42b8      	cmp	r0, r7
   2488c:	dbe8      	blt.n	24860 <z_set_timeout_expiry+0x40>
   2488e:	2401      	movs	r4, #1
   24890:	e7e6      	b.n	24860 <z_set_timeout_expiry+0x40>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   24892:	4641      	mov	r1, r8
   24894:	42b8      	cmp	r0, r7
   24896:	bfa8      	it	ge
   24898:	4638      	movge	r0, r7
   2489a:	f7fa f8d3 	bl	1ea44 <sys_clock_set_timeout>
   2489e:	e7e4      	b.n	2486a <z_set_timeout_expiry+0x4a>
   248a0:	4c06      	ldr	r4, [pc, #24]	; (248bc <z_set_timeout_expiry+0x9c>)
   248a2:	22c2      	movs	r2, #194	; 0xc2
   248a4:	4621      	mov	r1, r4
   248a6:	4806      	ldr	r0, [pc, #24]	; (248c0 <z_set_timeout_expiry+0xa0>)
   248a8:	f004 f9b1 	bl	28c0e <assert_print>
   248ac:	21c2      	movs	r1, #194	; 0xc2
   248ae:	4620      	mov	r0, r4
   248b0:	f004 f9a6 	bl	28c00 <assert_post_action>
		}
	}
}
   248b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   248b8:	20003b18 	.word	0x20003b18
   248bc:	00030164 	.word	0x00030164
   248c0:	00030128 	.word	0x00030128

000248c4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   248c4:	b570      	push	{r4, r5, r6, lr}
   248c6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   248c8:	f7fe ff6a 	bl	237a0 <z_time_slice>
	__asm__ volatile(
   248cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   248d0:	f3ef 8511 	mrs	r5, BASEPRI
   248d4:	f383 8812 	msr	BASEPRI_MAX, r3
   248d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   248dc:	4848      	ldr	r0, [pc, #288]	; (24a00 <sys_clock_announce+0x13c>)
   248de:	f7fd faa1 	bl	21e24 <z_spin_lock_valid>
   248e2:	2800      	cmp	r0, #0
   248e4:	d03f      	beq.n	24966 <sys_clock_announce+0xa2>
	z_spin_lock_set_owner(l);
   248e6:	4846      	ldr	r0, [pc, #280]	; (24a00 <sys_clock_announce+0x13c>)
   248e8:	f7fd fabc 	bl	21e64 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   248ec:	4b45      	ldr	r3, [pc, #276]	; (24a04 <sys_clock_announce+0x140>)
   248ee:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   248f0:	f7ff fe0e 	bl	24510 <first>
   248f4:	4604      	mov	r4, r0
   248f6:	2800      	cmp	r0, #0
   248f8:	d053      	beq.n	249a2 <sys_clock_announce+0xde>
   248fa:	6906      	ldr	r6, [r0, #16]
   248fc:	6941      	ldr	r1, [r0, #20]
   248fe:	4b41      	ldr	r3, [pc, #260]	; (24a04 <sys_clock_announce+0x140>)
   24900:	681a      	ldr	r2, [r3, #0]
   24902:	17d3      	asrs	r3, r2, #31
   24904:	42b2      	cmp	r2, r6
   24906:	418b      	sbcs	r3, r1
   24908:	db4b      	blt.n	249a2 <sys_clock_announce+0xde>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2490a:	4a3f      	ldr	r2, [pc, #252]	; (24a08 <sys_clock_announce+0x144>)
   2490c:	6813      	ldr	r3, [r2, #0]
   2490e:	6851      	ldr	r1, [r2, #4]
   24910:	199b      	adds	r3, r3, r6
   24912:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   24916:	6013      	str	r3, [r2, #0]
   24918:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   2491a:	2200      	movs	r2, #0
   2491c:	2300      	movs	r3, #0
   2491e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   24922:	4620      	mov	r0, r4
   24924:	f00a fd8a 	bl	2f43c <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24928:	4835      	ldr	r0, [pc, #212]	; (24a00 <sys_clock_announce+0x13c>)
   2492a:	f7fd fa8b 	bl	21e44 <z_spin_unlock_valid>
   2492e:	b320      	cbz	r0, 2497a <sys_clock_announce+0xb6>
	__asm__ volatile(
   24930:	f385 8811 	msr	BASEPRI, r5
   24934:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   24938:	68a3      	ldr	r3, [r4, #8]
   2493a:	4620      	mov	r0, r4
   2493c:	4798      	blx	r3
	__asm__ volatile(
   2493e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24942:	f3ef 8511 	mrs	r5, BASEPRI
   24946:	f383 8812 	msr	BASEPRI_MAX, r3
   2494a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2494e:	482c      	ldr	r0, [pc, #176]	; (24a00 <sys_clock_announce+0x13c>)
   24950:	f7fd fa68 	bl	21e24 <z_spin_lock_valid>
   24954:	b1d8      	cbz	r0, 2498e <sys_clock_announce+0xca>
	z_spin_lock_set_owner(l);
   24956:	482a      	ldr	r0, [pc, #168]	; (24a00 <sys_clock_announce+0x13c>)
   24958:	f7fd fa84 	bl	21e64 <z_spin_lock_set_owner>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   2495c:	4a29      	ldr	r2, [pc, #164]	; (24a04 <sys_clock_announce+0x140>)
   2495e:	6813      	ldr	r3, [r2, #0]
   24960:	1b9b      	subs	r3, r3, r6
   24962:	6013      	str	r3, [r2, #0]
   24964:	e7c4      	b.n	248f0 <sys_clock_announce+0x2c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24966:	4c29      	ldr	r4, [pc, #164]	; (24a0c <sys_clock_announce+0x148>)
   24968:	2294      	movs	r2, #148	; 0x94
   2496a:	4621      	mov	r1, r4
   2496c:	4828      	ldr	r0, [pc, #160]	; (24a10 <sys_clock_announce+0x14c>)
   2496e:	f004 f94e 	bl	28c0e <assert_print>
   24972:	2194      	movs	r1, #148	; 0x94
   24974:	4620      	mov	r0, r4
   24976:	f004 f943 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2497a:	4c24      	ldr	r4, [pc, #144]	; (24a0c <sys_clock_announce+0x148>)
   2497c:	22c2      	movs	r2, #194	; 0xc2
   2497e:	4621      	mov	r1, r4
   24980:	4823      	ldr	r0, [pc, #140]	; (24a10 <sys_clock_announce+0x14c>)
   24982:	f004 f944 	bl	28c0e <assert_print>
   24986:	21c2      	movs	r1, #194	; 0xc2
   24988:	4620      	mov	r0, r4
   2498a:	f004 f939 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2498e:	4c1f      	ldr	r4, [pc, #124]	; (24a0c <sys_clock_announce+0x148>)
   24990:	2294      	movs	r2, #148	; 0x94
   24992:	4621      	mov	r1, r4
   24994:	481e      	ldr	r0, [pc, #120]	; (24a10 <sys_clock_announce+0x14c>)
   24996:	f004 f93a 	bl	28c0e <assert_print>
   2499a:	2194      	movs	r1, #148	; 0x94
   2499c:	4620      	mov	r0, r4
   2499e:	f004 f92f 	bl	28c00 <assert_post_action>
	}

	if (first() != NULL) {
   249a2:	b144      	cbz	r4, 249b6 <sys_clock_announce+0xf2>
		first()->dticks -= announce_remaining;
   249a4:	6923      	ldr	r3, [r4, #16]
   249a6:	6962      	ldr	r2, [r4, #20]
   249a8:	4916      	ldr	r1, [pc, #88]	; (24a04 <sys_clock_announce+0x140>)
   249aa:	6809      	ldr	r1, [r1, #0]
   249ac:	1a5b      	subs	r3, r3, r1
   249ae:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   249b2:	6123      	str	r3, [r4, #16]
   249b4:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   249b6:	4a14      	ldr	r2, [pc, #80]	; (24a08 <sys_clock_announce+0x144>)
   249b8:	4e12      	ldr	r6, [pc, #72]	; (24a04 <sys_clock_announce+0x140>)
   249ba:	6830      	ldr	r0, [r6, #0]
   249bc:	6813      	ldr	r3, [r2, #0]
   249be:	6851      	ldr	r1, [r2, #4]
   249c0:	181b      	adds	r3, r3, r0
   249c2:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   249c6:	6013      	str	r3, [r2, #0]
   249c8:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   249ca:	2400      	movs	r4, #0
   249cc:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   249ce:	f7ff fdc1 	bl	24554 <next_timeout>
   249d2:	4621      	mov	r1, r4
   249d4:	f7fa f836 	bl	1ea44 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   249d8:	4809      	ldr	r0, [pc, #36]	; (24a00 <sys_clock_announce+0x13c>)
   249da:	f7fd fa33 	bl	21e44 <z_spin_unlock_valid>
   249de:	b120      	cbz	r0, 249ea <sys_clock_announce+0x126>
	__asm__ volatile(
   249e0:	f385 8811 	msr	BASEPRI, r5
   249e4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   249e8:	bd70      	pop	{r4, r5, r6, pc}
   249ea:	4c08      	ldr	r4, [pc, #32]	; (24a0c <sys_clock_announce+0x148>)
   249ec:	22c2      	movs	r2, #194	; 0xc2
   249ee:	4621      	mov	r1, r4
   249f0:	4807      	ldr	r0, [pc, #28]	; (24a10 <sys_clock_announce+0x14c>)
   249f2:	f004 f90c 	bl	28c0e <assert_print>
   249f6:	21c2      	movs	r1, #194	; 0xc2
   249f8:	4620      	mov	r0, r4
   249fa:	f004 f901 	bl	28c00 <assert_post_action>
   249fe:	bf00      	nop
   24a00:	20003b18 	.word	0x20003b18
   24a04:	20003b14 	.word	0x20003b14
   24a08:	200022d0 	.word	0x200022d0
   24a0c:	00030164 	.word	0x00030164
   24a10:	00030128 	.word	0x00030128

00024a14 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   24a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   24a16:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a1a:	f3ef 8611 	mrs	r6, BASEPRI
   24a1e:	f383 8812 	msr	BASEPRI_MAX, r3
   24a22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a26:	481a      	ldr	r0, [pc, #104]	; (24a90 <sys_clock_tick_get+0x7c>)
   24a28:	f7fd f9fc 	bl	21e24 <z_spin_lock_valid>
   24a2c:	b1c0      	cbz	r0, 24a60 <sys_clock_tick_get+0x4c>
   24a2e:	2700      	movs	r7, #0
	z_spin_lock_set_owner(l);
   24a30:	4817      	ldr	r0, [pc, #92]	; (24a90 <sys_clock_tick_get+0x7c>)
   24a32:	f7fd fa17 	bl	21e64 <z_spin_lock_set_owner>
	uint64_t t = 0U;
   24a36:	2400      	movs	r4, #0
   24a38:	4625      	mov	r5, r4

	LOCKED(&timeout_lock) {
   24a3a:	bb2f      	cbnz	r7, 24a88 <sys_clock_tick_get+0x74>
		t = curr_tick + elapsed();
   24a3c:	f7ff fd7e 	bl	2453c <elapsed>
   24a40:	4a14      	ldr	r2, [pc, #80]	; (24a94 <sys_clock_tick_get+0x80>)
   24a42:	6814      	ldr	r4, [r2, #0]
   24a44:	6855      	ldr	r5, [r2, #4]
   24a46:	1904      	adds	r4, r0, r4
   24a48:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a4c:	4810      	ldr	r0, [pc, #64]	; (24a90 <sys_clock_tick_get+0x7c>)
   24a4e:	f7fd f9f9 	bl	21e44 <z_spin_unlock_valid>
   24a52:	b178      	cbz	r0, 24a74 <sys_clock_tick_get+0x60>
	__asm__ volatile(
   24a54:	f386 8811 	msr	BASEPRI, r6
   24a58:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24a5c:	2701      	movs	r7, #1
   24a5e:	e7ec      	b.n	24a3a <sys_clock_tick_get+0x26>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a60:	4c0d      	ldr	r4, [pc, #52]	; (24a98 <sys_clock_tick_get+0x84>)
   24a62:	2294      	movs	r2, #148	; 0x94
   24a64:	4621      	mov	r1, r4
   24a66:	480d      	ldr	r0, [pc, #52]	; (24a9c <sys_clock_tick_get+0x88>)
   24a68:	f004 f8d1 	bl	28c0e <assert_print>
   24a6c:	2194      	movs	r1, #148	; 0x94
   24a6e:	4620      	mov	r0, r4
   24a70:	f004 f8c6 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a74:	4c08      	ldr	r4, [pc, #32]	; (24a98 <sys_clock_tick_get+0x84>)
   24a76:	22c2      	movs	r2, #194	; 0xc2
   24a78:	4621      	mov	r1, r4
   24a7a:	4808      	ldr	r0, [pc, #32]	; (24a9c <sys_clock_tick_get+0x88>)
   24a7c:	f004 f8c7 	bl	28c0e <assert_print>
   24a80:	21c2      	movs	r1, #194	; 0xc2
   24a82:	4620      	mov	r0, r4
   24a84:	f004 f8bc 	bl	28c00 <assert_post_action>
	}
	return t;
}
   24a88:	4620      	mov	r0, r4
   24a8a:	4629      	mov	r1, r5
   24a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24a8e:	bf00      	nop
   24a90:	20003b18 	.word	0x20003b18
   24a94:	200022d0 	.word	0x200022d0
   24a98:	00030164 	.word	0x00030164
   24a9c:	00030128 	.word	0x00030128

00024aa0 <is_condition_met>:
}

/* must be called with interrupts locked */
static inline bool is_condition_met(struct k_poll_event *event, uint32_t *state)
{
	switch (event->type) {
   24aa0:	7b43      	ldrb	r3, [r0, #13]
   24aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24aa6:	2b08      	cmp	r3, #8
   24aa8:	d827      	bhi.n	24afa <is_condition_met+0x5a>
   24aaa:	e8df f003 	tbb	[pc, r3]
   24aae:	1531      	.short	0x1531
   24ab0:	260e2605 	.word	0x260e2605
   24ab4:	2626      	.short	0x2626
   24ab6:	1d          	.byte	0x1d
   24ab7:	00          	.byte	0x00
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0U) {
   24ab8:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   24aba:	689b      	ldr	r3, [r3, #8]
   24abc:	b90b      	cbnz	r3, 24ac2 <is_condition_met+0x22>
	default:
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
		break;
	}

	return false;
   24abe:	2000      	movs	r0, #0
   24ac0:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   24ac2:	2302      	movs	r3, #2
   24ac4:	600b      	str	r3, [r1, #0]
			return true;
   24ac6:	2001      	movs	r0, #1
   24ac8:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   24aca:	6903      	ldr	r3, [r0, #16]
	return list->head;
   24acc:	681b      	ldr	r3, [r3, #0]
   24ace:	b30b      	cbz	r3, 24b14 <is_condition_met+0x74>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   24ad0:	2304      	movs	r3, #4
   24ad2:	600b      	str	r3, [r1, #0]
			return true;
   24ad4:	2001      	movs	r0, #1
   24ad6:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   24ad8:	6903      	ldr	r3, [r0, #16]
   24ada:	689b      	ldr	r3, [r3, #8]
   24adc:	b90b      	cbnz	r3, 24ae2 <is_condition_met+0x42>
	return false;
   24ade:	2000      	movs	r0, #0
   24ae0:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   24ae2:	2001      	movs	r0, #1
   24ae4:	6008      	str	r0, [r1, #0]
			return true;
   24ae6:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   24ae8:	6903      	ldr	r3, [r0, #16]
   24aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24aec:	b90b      	cbnz	r3, 24af2 <is_condition_met+0x52>
	return false;
   24aee:	2000      	movs	r0, #0
}
   24af0:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   24af2:	2310      	movs	r3, #16
   24af4:	600b      	str	r3, [r1, #0]
			return true;
   24af6:	2001      	movs	r0, #1
   24af8:	4770      	bx	lr
{
   24afa:	b510      	push	{r4, lr}
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   24afc:	4c06      	ldr	r4, [pc, #24]	; (24b18 <is_condition_met+0x78>)
   24afe:	2263      	movs	r2, #99	; 0x63
   24b00:	4621      	mov	r1, r4
   24b02:	4806      	ldr	r0, [pc, #24]	; (24b1c <is_condition_met+0x7c>)
   24b04:	f004 f883 	bl	28c0e <assert_print>
   24b08:	2163      	movs	r1, #99	; 0x63
   24b0a:	4620      	mov	r0, r4
   24b0c:	f004 f878 	bl	28c00 <assert_post_action>
	switch (event->type) {
   24b10:	2000      	movs	r0, #0
   24b12:	4770      	bx	lr
	return false;
   24b14:	2000      	movs	r0, #0
   24b16:	4770      	bx	lr
   24b18:	00033d64 	.word	0x00033d64
   24b1c:	00030128 	.word	0x00030128

00024b20 <clear_event_registration>:
	event->poller = poller;
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
   24b20:	b510      	push	{r4, lr}
	bool remove_event = false;

	event->poller = NULL;
   24b22:	2300      	movs	r3, #0
   24b24:	6083      	str	r3, [r0, #8]

	switch (event->type) {
   24b26:	7b43      	ldrb	r3, [r0, #13]
   24b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24b2c:	2b08      	cmp	r3, #8
   24b2e:	d842      	bhi.n	24bb6 <clear_event_registration+0x96>
   24b30:	e8df f003 	tbb	[pc, r3]
   24b34:	4105270f 	.word	0x4105270f
   24b38:	4141411a 	.word	0x4141411a
   24b3c:	34          	.byte	0x34
   24b3d:	00          	.byte	0x00
	case K_POLL_TYPE_SEM_AVAILABLE:
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   24b3e:	6903      	ldr	r3, [r0, #16]
   24b40:	b143      	cbz	r3, 24b54 <clear_event_registration+0x34>
   24b42:	6803      	ldr	r3, [r0, #0]
		break;
	default:
		__ASSERT(false, "invalid event type\n");
		break;
	}
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   24b44:	b12b      	cbz	r3, 24b52 <clear_event_registration+0x32>
	sys_dnode_t *const prev = node->prev;
   24b46:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   24b48:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24b4a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24b4c:	2300      	movs	r3, #0
   24b4e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   24b50:	6043      	str	r3, [r0, #4]
		sys_dlist_remove(&event->_node);
	}
}
   24b52:	bd10      	pop	{r4, pc}
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   24b54:	4c1d      	ldr	r4, [pc, #116]	; (24bcc <clear_event_registration+0xac>)
   24b56:	22b6      	movs	r2, #182	; 0xb6
   24b58:	4621      	mov	r1, r4
   24b5a:	481d      	ldr	r0, [pc, #116]	; (24bd0 <clear_event_registration+0xb0>)
   24b5c:	f004 f857 	bl	28c0e <assert_print>
   24b60:	21b6      	movs	r1, #182	; 0xb6
   24b62:	4620      	mov	r0, r4
   24b64:	f004 f84c 	bl	28c00 <assert_post_action>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24b68:	6903      	ldr	r3, [r0, #16]
   24b6a:	2b00      	cmp	r3, #0
   24b6c:	d1e9      	bne.n	24b42 <clear_event_registration+0x22>
   24b6e:	4c17      	ldr	r4, [pc, #92]	; (24bcc <clear_event_registration+0xac>)
   24b70:	22ba      	movs	r2, #186	; 0xba
   24b72:	4621      	mov	r1, r4
   24b74:	4816      	ldr	r0, [pc, #88]	; (24bd0 <clear_event_registration+0xb0>)
   24b76:	f004 f84a 	bl	28c0e <assert_print>
   24b7a:	21ba      	movs	r1, #186	; 0xba
   24b7c:	4620      	mov	r0, r4
   24b7e:	f004 f83f 	bl	28c00 <assert_post_action>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24b82:	6903      	ldr	r3, [r0, #16]
   24b84:	2b00      	cmp	r3, #0
   24b86:	d1dc      	bne.n	24b42 <clear_event_registration+0x22>
   24b88:	4c10      	ldr	r4, [pc, #64]	; (24bcc <clear_event_registration+0xac>)
   24b8a:	22be      	movs	r2, #190	; 0xbe
   24b8c:	4621      	mov	r1, r4
   24b8e:	4810      	ldr	r0, [pc, #64]	; (24bd0 <clear_event_registration+0xb0>)
   24b90:	f004 f83d 	bl	28c0e <assert_print>
   24b94:	21be      	movs	r1, #190	; 0xbe
   24b96:	4620      	mov	r0, r4
   24b98:	f004 f832 	bl	28c00 <assert_post_action>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24b9c:	6903      	ldr	r3, [r0, #16]
   24b9e:	2b00      	cmp	r3, #0
   24ba0:	d1cf      	bne.n	24b42 <clear_event_registration+0x22>
   24ba2:	4c0a      	ldr	r4, [pc, #40]	; (24bcc <clear_event_registration+0xac>)
   24ba4:	22c2      	movs	r2, #194	; 0xc2
   24ba6:	4621      	mov	r1, r4
   24ba8:	4809      	ldr	r0, [pc, #36]	; (24bd0 <clear_event_registration+0xb0>)
   24baa:	f004 f830 	bl	28c0e <assert_print>
   24bae:	21c2      	movs	r1, #194	; 0xc2
   24bb0:	4620      	mov	r0, r4
   24bb2:	f004 f825 	bl	28c00 <assert_post_action>
		__ASSERT(false, "invalid event type\n");
   24bb6:	4c05      	ldr	r4, [pc, #20]	; (24bcc <clear_event_registration+0xac>)
   24bb8:	22cf      	movs	r2, #207	; 0xcf
   24bba:	4621      	mov	r1, r4
   24bbc:	4804      	ldr	r0, [pc, #16]	; (24bd0 <clear_event_registration+0xb0>)
   24bbe:	f004 f826 	bl	28c0e <assert_print>
   24bc2:	21cf      	movs	r1, #207	; 0xcf
   24bc4:	4620      	mov	r0, r4
   24bc6:	f004 f81b 	bl	28c00 <assert_post_action>
   24bca:	bf00      	nop
   24bcc:	00033d64 	.word	0x00033d64
   24bd0:	00030128 	.word	0x00030128

00024bd4 <register_event>:
{
   24bd4:	b538      	push	{r3, r4, r5, lr}
   24bd6:	4604      	mov	r4, r0
   24bd8:	460d      	mov	r5, r1
	switch (event->type) {
   24bda:	7b43      	ldrb	r3, [r0, #13]
   24bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24be0:	2b08      	cmp	r3, #8
   24be2:	d84e      	bhi.n	24c82 <register_event+0xae>
   24be4:	e8df f003 	tbb	[pc, r3]
   24be8:	4d052a0c 	.word	0x4d052a0c
   24bec:	4d4d4d18 	.word	0x4d4d4d18
   24bf0:	3b          	.byte	0x3b
   24bf1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   24bf2:	6900      	ldr	r0, [r0, #16]
   24bf4:	b130      	cbz	r0, 24c04 <register_event+0x30>
		add_event(&event->sem->poll_events, event, poller);
   24bf6:	460a      	mov	r2, r1
   24bf8:	4621      	mov	r1, r4
   24bfa:	3010      	adds	r0, #16
   24bfc:	f00a fc70 	bl	2f4e0 <add_event>
	event->poller = poller;
   24c00:	60a5      	str	r5, [r4, #8]
}
   24c02:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   24c04:	4c24      	ldr	r4, [pc, #144]	; (24c98 <register_event+0xc4>)
   24c06:	228d      	movs	r2, #141	; 0x8d
   24c08:	4621      	mov	r1, r4
   24c0a:	4824      	ldr	r0, [pc, #144]	; (24c9c <register_event+0xc8>)
   24c0c:	f003 ffff 	bl	28c0e <assert_print>
   24c10:	218d      	movs	r1, #141	; 0x8d
   24c12:	4620      	mov	r0, r4
   24c14:	f003 fff4 	bl	28c00 <assert_post_action>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24c18:	6900      	ldr	r0, [r0, #16]
   24c1a:	b128      	cbz	r0, 24c28 <register_event+0x54>
		add_event(&event->queue->poll_events, event, poller);
   24c1c:	460a      	mov	r2, r1
   24c1e:	4621      	mov	r1, r4
   24c20:	3014      	adds	r0, #20
   24c22:	f00a fc5d 	bl	2f4e0 <add_event>
		break;
   24c26:	e7eb      	b.n	24c00 <register_event+0x2c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24c28:	4c1b      	ldr	r4, [pc, #108]	; (24c98 <register_event+0xc4>)
   24c2a:	2291      	movs	r2, #145	; 0x91
   24c2c:	4621      	mov	r1, r4
   24c2e:	481b      	ldr	r0, [pc, #108]	; (24c9c <register_event+0xc8>)
   24c30:	f003 ffed 	bl	28c0e <assert_print>
   24c34:	2191      	movs	r1, #145	; 0x91
   24c36:	4620      	mov	r0, r4
   24c38:	f003 ffe2 	bl	28c00 <assert_post_action>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24c3c:	6900      	ldr	r0, [r0, #16]
   24c3e:	b120      	cbz	r0, 24c4a <register_event+0x76>
		add_event(&event->signal->poll_events, event, poller);
   24c40:	460a      	mov	r2, r1
   24c42:	4621      	mov	r1, r4
   24c44:	f00a fc4c 	bl	2f4e0 <add_event>
		break;
   24c48:	e7da      	b.n	24c00 <register_event+0x2c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24c4a:	4c13      	ldr	r4, [pc, #76]	; (24c98 <register_event+0xc4>)
   24c4c:	2295      	movs	r2, #149	; 0x95
   24c4e:	4621      	mov	r1, r4
   24c50:	4812      	ldr	r0, [pc, #72]	; (24c9c <register_event+0xc8>)
   24c52:	f003 ffdc 	bl	28c0e <assert_print>
   24c56:	2195      	movs	r1, #149	; 0x95
   24c58:	4620      	mov	r0, r4
   24c5a:	f003 ffd1 	bl	28c00 <assert_post_action>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24c5e:	6900      	ldr	r0, [r0, #16]
   24c60:	b128      	cbz	r0, 24c6e <register_event+0x9a>
		add_event(&event->msgq->poll_events, event, poller);
   24c62:	460a      	mov	r2, r1
   24c64:	4621      	mov	r1, r4
   24c66:	3028      	adds	r0, #40	; 0x28
   24c68:	f00a fc3a 	bl	2f4e0 <add_event>
		break;
   24c6c:	e7c8      	b.n	24c00 <register_event+0x2c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24c6e:	4c0a      	ldr	r4, [pc, #40]	; (24c98 <register_event+0xc4>)
   24c70:	2299      	movs	r2, #153	; 0x99
   24c72:	4621      	mov	r1, r4
   24c74:	4809      	ldr	r0, [pc, #36]	; (24c9c <register_event+0xc8>)
   24c76:	f003 ffca 	bl	28c0e <assert_print>
   24c7a:	2199      	movs	r1, #153	; 0x99
   24c7c:	4620      	mov	r0, r4
   24c7e:	f003 ffbf 	bl	28c00 <assert_post_action>
		__ASSERT(false, "invalid event type\n");
   24c82:	4c05      	ldr	r4, [pc, #20]	; (24c98 <register_event+0xc4>)
   24c84:	22a6      	movs	r2, #166	; 0xa6
   24c86:	4621      	mov	r1, r4
   24c88:	4804      	ldr	r0, [pc, #16]	; (24c9c <register_event+0xc8>)
   24c8a:	f003 ffc0 	bl	28c0e <assert_print>
   24c8e:	21a6      	movs	r1, #166	; 0xa6
   24c90:	4620      	mov	r0, r4
   24c92:	f003 ffb5 	bl	28c00 <assert_post_action>
   24c96:	bf00      	nop
   24c98:	00033d64 	.word	0x00033d64
   24c9c:	00030128 	.word	0x00030128

00024ca0 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   24ca0:	b570      	push	{r4, r5, r6, lr}
   24ca2:	4606      	mov	r6, r0
   24ca4:	4614      	mov	r4, r2
	while (num_events--) {
   24ca6:	1e4d      	subs	r5, r1, #1
   24ca8:	b391      	cbz	r1, 24d10 <clear_event_registrations+0x70>
		clear_event_registration(&events[num_events]);
   24caa:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   24cae:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   24cb2:	f7ff ff35 	bl	24b20 <clear_event_registration>
   24cb6:	4817      	ldr	r0, [pc, #92]	; (24d14 <clear_event_registrations+0x74>)
   24cb8:	f7fd f8c4 	bl	21e44 <z_spin_unlock_valid>
   24cbc:	b1a0      	cbz	r0, 24ce8 <clear_event_registrations+0x48>
   24cbe:	f384 8811 	msr	BASEPRI, r4
   24cc2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   24cc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   24cca:	f3ef 8411 	mrs	r4, BASEPRI
   24cce:	f383 8812 	msr	BASEPRI_MAX, r3
   24cd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24cd6:	480f      	ldr	r0, [pc, #60]	; (24d14 <clear_event_registrations+0x74>)
   24cd8:	f7fd f8a4 	bl	21e24 <z_spin_lock_valid>
   24cdc:	b170      	cbz	r0, 24cfc <clear_event_registrations+0x5c>
	z_spin_lock_set_owner(l);
   24cde:	480d      	ldr	r0, [pc, #52]	; (24d14 <clear_event_registrations+0x74>)
   24ce0:	f7fd f8c0 	bl	21e64 <z_spin_lock_set_owner>
	while (num_events--) {
   24ce4:	4629      	mov	r1, r5
	return k;
   24ce6:	e7de      	b.n	24ca6 <clear_event_registrations+0x6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ce8:	4c0b      	ldr	r4, [pc, #44]	; (24d18 <clear_event_registrations+0x78>)
   24cea:	22c2      	movs	r2, #194	; 0xc2
   24cec:	4621      	mov	r1, r4
   24cee:	480b      	ldr	r0, [pc, #44]	; (24d1c <clear_event_registrations+0x7c>)
   24cf0:	f003 ff8d 	bl	28c0e <assert_print>
   24cf4:	21c2      	movs	r1, #194	; 0xc2
   24cf6:	4620      	mov	r0, r4
   24cf8:	f003 ff82 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24cfc:	4c06      	ldr	r4, [pc, #24]	; (24d18 <clear_event_registrations+0x78>)
   24cfe:	2294      	movs	r2, #148	; 0x94
   24d00:	4621      	mov	r1, r4
   24d02:	4806      	ldr	r0, [pc, #24]	; (24d1c <clear_event_registrations+0x7c>)
   24d04:	f003 ff83 	bl	28c0e <assert_print>
   24d08:	2194      	movs	r1, #148	; 0x94
   24d0a:	4620      	mov	r0, r4
   24d0c:	f003 ff78 	bl	28c00 <assert_post_action>
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   24d10:	bd70      	pop	{r4, r5, r6, pc}
   24d12:	bf00      	nop
   24d14:	20003b1c 	.word	0x20003b1c
   24d18:	00030164 	.word	0x00030164
   24d1c:	00030128 	.word	0x00030128

00024d20 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   24d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d24:	b083      	sub	sp, #12
   24d26:	4680      	mov	r8, r0
   24d28:	460f      	mov	r7, r1
   24d2a:	4691      	mov	r9, r2
   24d2c:	469a      	mov	sl, r3
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   24d2e:	2500      	movs	r5, #0
	int events_registered = 0;
   24d30:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   24d32:	e01a      	b.n	24d6a <register_events+0x4a>
   24d34:	4c2c      	ldr	r4, [pc, #176]	; (24de8 <register_events+0xc8>)
   24d36:	2294      	movs	r2, #148	; 0x94
   24d38:	4621      	mov	r1, r4
   24d3a:	482c      	ldr	r0, [pc, #176]	; (24dec <register_events+0xcc>)
   24d3c:	f003 ff67 	bl	28c0e <assert_print>
   24d40:	2194      	movs	r1, #148	; 0x94
   24d42:	4620      	mov	r0, r4
   24d44:	f003 ff5c 	bl	28c00 <assert_post_action>

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
		} else if (!just_check && poller->is_polling) {
   24d48:	f1ba 0f00 	cmp.w	sl, #0
   24d4c:	d103      	bne.n	24d56 <register_events+0x36>
   24d4e:	f899 3000 	ldrb.w	r3, [r9]
   24d52:	2b00      	cmp	r3, #0
   24d54:	d132      	bne.n	24dbc <register_events+0x9c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d56:	4826      	ldr	r0, [pc, #152]	; (24df0 <register_events+0xd0>)
   24d58:	f7fd f874 	bl	21e44 <z_spin_unlock_valid>
   24d5c:	2800      	cmp	r0, #0
   24d5e:	d034      	beq.n	24dca <register_events+0xaa>
	__asm__ volatile(
   24d60:	f386 8811 	msr	BASEPRI, r6
   24d64:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   24d68:	3501      	adds	r5, #1
   24d6a:	42bd      	cmp	r5, r7
   24d6c:	da37      	bge.n	24dde <register_events+0xbe>
	__asm__ volatile(
   24d6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d72:	f3ef 8611 	mrs	r6, BASEPRI
   24d76:	f383 8812 	msr	BASEPRI_MAX, r3
   24d7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d7e:	481c      	ldr	r0, [pc, #112]	; (24df0 <register_events+0xd0>)
   24d80:	f7fd f850 	bl	21e24 <z_spin_lock_valid>
   24d84:	2800      	cmp	r0, #0
   24d86:	d0d5      	beq.n	24d34 <register_events+0x14>
	z_spin_lock_set_owner(l);
   24d88:	4819      	ldr	r0, [pc, #100]	; (24df0 <register_events+0xd0>)
   24d8a:	f7fd f86b 	bl	21e64 <z_spin_lock_set_owner>
		if (is_condition_met(&events[ii], &state)) {
   24d8e:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   24d92:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   24d96:	a901      	add	r1, sp, #4
   24d98:	4620      	mov	r0, r4
   24d9a:	f7ff fe81 	bl	24aa0 <is_condition_met>
   24d9e:	2800      	cmp	r0, #0
   24da0:	d0d2      	beq.n	24d48 <register_events+0x28>
	event->poller = NULL;
   24da2:	2100      	movs	r1, #0
   24da4:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   24da6:	68e3      	ldr	r3, [r4, #12]
   24da8:	f3c3 3286 	ubfx	r2, r3, #14, #7
   24dac:	9801      	ldr	r0, [sp, #4]
   24dae:	4302      	orrs	r2, r0
   24db0:	f362 3394 	bfi	r3, r2, #14, #7
   24db4:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   24db6:	f889 1000 	strb.w	r1, [r9]
   24dba:	e7cc      	b.n	24d56 <register_events+0x36>
			register_event(&events[ii], poller);
   24dbc:	4649      	mov	r1, r9
   24dbe:	4620      	mov	r0, r4
   24dc0:	f7ff ff08 	bl	24bd4 <register_event>
			events_registered += 1;
   24dc4:	f10b 0b01 	add.w	fp, fp, #1
   24dc8:	e7c5      	b.n	24d56 <register_events+0x36>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24dca:	4c07      	ldr	r4, [pc, #28]	; (24de8 <register_events+0xc8>)
   24dcc:	22c2      	movs	r2, #194	; 0xc2
   24dce:	4621      	mov	r1, r4
   24dd0:	4806      	ldr	r0, [pc, #24]	; (24dec <register_events+0xcc>)
   24dd2:	f003 ff1c 	bl	28c0e <assert_print>
   24dd6:	21c2      	movs	r1, #194	; 0xc2
   24dd8:	4620      	mov	r0, r4
   24dda:	f003 ff11 	bl	28c00 <assert_post_action>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   24dde:	4658      	mov	r0, fp
   24de0:	b003      	add	sp, #12
   24de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24de6:	bf00      	nop
   24de8:	00030164 	.word	0x00030164
   24dec:	00030128 	.word	0x00030128
   24df0:	20003b1c 	.word	0x20003b1c

00024df4 <signal_poller>:

static int signal_poller(struct k_poll_event *event, uint32_t state)
{
   24df4:	b538      	push	{r3, r4, r5, lr}
   24df6:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   24df8:	6880      	ldr	r0, [r0, #8]
   24dfa:	f00a fb6d 	bl	2f4d8 <poller_thread>

	__ASSERT(thread != NULL, "poller should have a thread\n");
   24dfe:	b1d8      	cbz	r0, 24e38 <signal_poller+0x44>
   24e00:	4604      	mov	r4, r0
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   24e02:	7b43      	ldrb	r3, [r0, #13]

	if (!z_is_thread_pending(thread)) {
   24e04:	f013 0f02 	tst.w	r3, #2
   24e08:	d030      	beq.n	24e6c <signal_poller+0x78>
	return thread->base.timeout.dticks == _EXPIRED;
   24e0a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   24e0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   24e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
   24e12:	bf08      	it	eq
   24e14:	f112 0f02 	cmneq.w	r2, #2
   24e18:	d02a      	beq.n	24e70 <signal_poller+0x7c>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   24e1a:	f7fe fbdf 	bl	235dc <z_unpend_thread>
	arch_thread_return_value_set(thread,
   24e1e:	2d08      	cmp	r5, #8
   24e20:	d016      	beq.n	24e50 <signal_poller+0x5c>
   24e22:	2300      	movs	r3, #0
   24e24:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   24e28:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24e2a:	f013 0f1f 	tst.w	r3, #31
   24e2e:	d114      	bne.n	24e5a <signal_poller+0x66>
	return node->next != NULL;
   24e30:	69a3      	ldr	r3, [r4, #24]
   24e32:	b183      	cbz	r3, 24e56 <signal_poller+0x62>
   24e34:	2300      	movs	r3, #0
   24e36:	e011      	b.n	24e5c <signal_poller+0x68>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   24e38:	4c0f      	ldr	r4, [pc, #60]	; (24e78 <signal_poller+0x84>)
   24e3a:	f44f 7286 	mov.w	r2, #268	; 0x10c
   24e3e:	4621      	mov	r1, r4
   24e40:	480e      	ldr	r0, [pc, #56]	; (24e7c <signal_poller+0x88>)
   24e42:	f003 fee4 	bl	28c0e <assert_print>
   24e46:	f44f 7186 	mov.w	r1, #268	; 0x10c
   24e4a:	4620      	mov	r0, r4
   24e4c:	f003 fed8 	bl	28c00 <assert_post_action>
	arch_thread_return_value_set(thread,
   24e50:	f06f 0303 	mvn.w	r3, #3
   24e54:	e7e6      	b.n	24e24 <signal_poller+0x30>
   24e56:	2301      	movs	r3, #1
   24e58:	e000      	b.n	24e5c <signal_poller+0x68>
   24e5a:	2300      	movs	r3, #0
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
   24e5c:	b90b      	cbnz	r3, 24e62 <signal_poller+0x6e>
		return 0;
   24e5e:	2000      	movs	r0, #0
   24e60:	e005      	b.n	24e6e <signal_poller+0x7a>
	}

	z_ready_thread(thread);
   24e62:	4620      	mov	r0, r4
   24e64:	f7fe fd5c 	bl	23920 <z_ready_thread>

	return 0;
   24e68:	2000      	movs	r0, #0
   24e6a:	e000      	b.n	24e6e <signal_poller+0x7a>
		return 0;
   24e6c:	2000      	movs	r0, #0
}
   24e6e:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   24e70:	f06f 000a 	mvn.w	r0, #10
   24e74:	e7fb      	b.n	24e6e <signal_poller+0x7a>
   24e76:	bf00      	nop
   24e78:	00033d64 	.word	0x00033d64
   24e7c:	00030128 	.word	0x00030128

00024e80 <k_poll_event_init>:
{
   24e80:	b510      	push	{r4, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   24e82:	b9ca      	cbnz	r2, 24eb8 <k_poll_event_init+0x38>
   24e84:	4696      	mov	lr, r2
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   24e86:	293f      	cmp	r1, #63	; 0x3f
   24e88:	d820      	bhi.n	24ecc <k_poll_event_init+0x4c>
	__ASSERT(obj != NULL, "must provide an object\n");
   24e8a:	b34b      	cbz	r3, 24ee0 <k_poll_event_init+0x60>
	event->poller = NULL;
   24e8c:	2200      	movs	r2, #0
   24e8e:	6082      	str	r2, [r0, #8]
	event->type = type;
   24e90:	f890 c00d 	ldrb.w	ip, [r0, #13]
   24e94:	f361 0c05 	bfi	ip, r1, #0, #6
   24e98:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   24e9c:	68c1      	ldr	r1, [r0, #12]
   24e9e:	f362 3194 	bfi	r1, r2, #14, #7
   24ea2:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   24ea4:	7b81      	ldrb	r1, [r0, #14]
   24ea6:	f36e 1145 	bfi	r1, lr, #5, #1
   24eaa:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   24eac:	89c1      	ldrh	r1, [r0, #14]
   24eae:	f362 118f 	bfi	r1, r2, #6, #10
   24eb2:	81c1      	strh	r1, [r0, #14]
	event->obj = obj;
   24eb4:	6103      	str	r3, [r0, #16]
}
   24eb6:	bd10      	pop	{r4, pc}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   24eb8:	4c0e      	ldr	r4, [pc, #56]	; (24ef4 <k_poll_event_init+0x74>)
   24eba:	222d      	movs	r2, #45	; 0x2d
   24ebc:	4621      	mov	r1, r4
   24ebe:	480e      	ldr	r0, [pc, #56]	; (24ef8 <k_poll_event_init+0x78>)
   24ec0:	f003 fea5 	bl	28c0e <assert_print>
   24ec4:	212d      	movs	r1, #45	; 0x2d
   24ec6:	4620      	mov	r0, r4
   24ec8:	f003 fe9a 	bl	28c00 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   24ecc:	4c09      	ldr	r4, [pc, #36]	; (24ef4 <k_poll_event_init+0x74>)
   24ece:	222f      	movs	r2, #47	; 0x2f
   24ed0:	4621      	mov	r1, r4
   24ed2:	4809      	ldr	r0, [pc, #36]	; (24ef8 <k_poll_event_init+0x78>)
   24ed4:	f003 fe9b 	bl	28c0e <assert_print>
   24ed8:	212f      	movs	r1, #47	; 0x2f
   24eda:	4620      	mov	r0, r4
   24edc:	f003 fe90 	bl	28c00 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   24ee0:	4c04      	ldr	r4, [pc, #16]	; (24ef4 <k_poll_event_init+0x74>)
   24ee2:	2230      	movs	r2, #48	; 0x30
   24ee4:	4621      	mov	r1, r4
   24ee6:	4804      	ldr	r0, [pc, #16]	; (24ef8 <k_poll_event_init+0x78>)
   24ee8:	f003 fe91 	bl	28c0e <assert_print>
   24eec:	2130      	movs	r1, #48	; 0x30
   24eee:	4620      	mov	r0, r4
   24ef0:	f003 fe86 	bl	28c00 <assert_post_action>
   24ef4:	00033d64 	.word	0x00033d64
   24ef8:	00030128 	.word	0x00030128

00024efc <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   24efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24f00:	b082      	sub	sp, #8
   24f02:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   24f04:	4b68      	ldr	r3, [pc, #416]	; (250a8 <z_impl_k_poll+0x1ac>)
   24f06:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   24f08:	2301      	movs	r3, #1
   24f0a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   24f0e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
   24f12:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   24f16:	2b00      	cmp	r3, #0
   24f18:	d138      	bne.n	24f8c <z_impl_k_poll+0x90>
   24f1a:	4605      	mov	r5, r0
   24f1c:	4617      	mov	r7, r2
   24f1e:	f104 0260 	add.w	r2, r4, #96	; 0x60
	__ASSERT(events != NULL, "NULL events\n");
   24f22:	2800      	cmp	r0, #0
   24f24:	d03e      	beq.n	24fa4 <z_impl_k_poll+0xa8>
	__ASSERT(num_events >= 0, "<0 events\n");
   24f26:	2900      	cmp	r1, #0
   24f28:	db48      	blt.n	24fbc <z_impl_k_poll+0xc0>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   24f2a:	ea56 0307 	orrs.w	r3, r6, r7
   24f2e:	bf0c      	ite	eq
   24f30:	2301      	moveq	r3, #1
   24f32:	2300      	movne	r3, #0
   24f34:	f7ff fef4 	bl	24d20 <register_events>
   24f38:	4680      	mov	r8, r0
   24f3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24f3e:	f3ef 8911 	mrs	r9, BASEPRI
   24f42:	f383 8812 	msr	BASEPRI_MAX, r3
   24f46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24f4a:	4858      	ldr	r0, [pc, #352]	; (250ac <z_impl_k_poll+0x1b0>)
   24f4c:	f7fc ff6a 	bl	21e24 <z_spin_lock_valid>
   24f50:	2800      	cmp	r0, #0
   24f52:	d03f      	beq.n	24fd4 <z_impl_k_poll+0xd8>
	z_spin_lock_set_owner(l);
   24f54:	4855      	ldr	r0, [pc, #340]	; (250ac <z_impl_k_poll+0x1b0>)
   24f56:	f7fc ff85 	bl	21e64 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   24f5a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   24f5e:	2b00      	cmp	r3, #0
   24f60:	d042      	beq.n	24fe8 <z_impl_k_poll+0xec>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   24f62:	2300      	movs	r3, #0
   24f64:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24f68:	ea56 0307 	orrs.w	r3, r6, r7
   24f6c:	d15f      	bne.n	2502e <z_impl_k_poll+0x132>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f6e:	484f      	ldr	r0, [pc, #316]	; (250ac <z_impl_k_poll+0x1b0>)
   24f70:	f7fc ff68 	bl	21e44 <z_spin_unlock_valid>
   24f74:	2800      	cmp	r0, #0
   24f76:	d050      	beq.n	2501a <z_impl_k_poll+0x11e>
	__asm__ volatile(
   24f78:	f389 8811 	msr	BASEPRI, r9
   24f7c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, -EAGAIN);

		return -EAGAIN;
   24f80:	f06f 040a 	mvn.w	r4, #10
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   24f84:	4620      	mov	r0, r4
   24f86:	b002      	add	sp, #8
   24f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "");
   24f8c:	4c48      	ldr	r4, [pc, #288]	; (250b0 <z_impl_k_poll+0x1b4>)
   24f8e:	f240 122d 	movw	r2, #301	; 0x12d
   24f92:	4621      	mov	r1, r4
   24f94:	4847      	ldr	r0, [pc, #284]	; (250b4 <z_impl_k_poll+0x1b8>)
   24f96:	f003 fe3a 	bl	28c0e <assert_print>
   24f9a:	f240 112d 	movw	r1, #301	; 0x12d
   24f9e:	4620      	mov	r0, r4
   24fa0:	f003 fe2e 	bl	28c00 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   24fa4:	4c42      	ldr	r4, [pc, #264]	; (250b0 <z_impl_k_poll+0x1b4>)
   24fa6:	f44f 7297 	mov.w	r2, #302	; 0x12e
   24faa:	4621      	mov	r1, r4
   24fac:	4841      	ldr	r0, [pc, #260]	; (250b4 <z_impl_k_poll+0x1b8>)
   24fae:	f003 fe2e 	bl	28c0e <assert_print>
   24fb2:	f44f 7197 	mov.w	r1, #302	; 0x12e
   24fb6:	4620      	mov	r0, r4
   24fb8:	f003 fe22 	bl	28c00 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   24fbc:	4c3c      	ldr	r4, [pc, #240]	; (250b0 <z_impl_k_poll+0x1b4>)
   24fbe:	f240 122f 	movw	r2, #303	; 0x12f
   24fc2:	4621      	mov	r1, r4
   24fc4:	483b      	ldr	r0, [pc, #236]	; (250b4 <z_impl_k_poll+0x1b8>)
   24fc6:	f003 fe22 	bl	28c0e <assert_print>
   24fca:	f240 112f 	movw	r1, #303	; 0x12f
   24fce:	4620      	mov	r0, r4
   24fd0:	f003 fe16 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24fd4:	4c38      	ldr	r4, [pc, #224]	; (250b8 <z_impl_k_poll+0x1bc>)
   24fd6:	2294      	movs	r2, #148	; 0x94
   24fd8:	4621      	mov	r1, r4
   24fda:	4836      	ldr	r0, [pc, #216]	; (250b4 <z_impl_k_poll+0x1b8>)
   24fdc:	f003 fe17 	bl	28c0e <assert_print>
   24fe0:	2194      	movs	r1, #148	; 0x94
   24fe2:	4620      	mov	r0, r4
   24fe4:	f003 fe0c 	bl	28c00 <assert_post_action>
		clear_event_registrations(events, events_registered, key);
   24fe8:	464a      	mov	r2, r9
   24fea:	4641      	mov	r1, r8
   24fec:	4628      	mov	r0, r5
   24fee:	f7ff fe57 	bl	24ca0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ff2:	482e      	ldr	r0, [pc, #184]	; (250ac <z_impl_k_poll+0x1b0>)
   24ff4:	f7fc ff26 	bl	21e44 <z_spin_unlock_valid>
   24ff8:	b128      	cbz	r0, 25006 <z_impl_k_poll+0x10a>
   24ffa:	f389 8811 	msr	BASEPRI, r9
   24ffe:	f3bf 8f6f 	isb	sy
		return 0;
   25002:	2400      	movs	r4, #0
   25004:	e7be      	b.n	24f84 <z_impl_k_poll+0x88>
   25006:	4c2c      	ldr	r4, [pc, #176]	; (250b8 <z_impl_k_poll+0x1bc>)
   25008:	22c2      	movs	r2, #194	; 0xc2
   2500a:	4621      	mov	r1, r4
   2500c:	4829      	ldr	r0, [pc, #164]	; (250b4 <z_impl_k_poll+0x1b8>)
   2500e:	f003 fdfe 	bl	28c0e <assert_print>
   25012:	21c2      	movs	r1, #194	; 0xc2
   25014:	4620      	mov	r0, r4
   25016:	f003 fdf3 	bl	28c00 <assert_post_action>
   2501a:	4c27      	ldr	r4, [pc, #156]	; (250b8 <z_impl_k_poll+0x1bc>)
   2501c:	22c2      	movs	r2, #194	; 0xc2
   2501e:	4621      	mov	r1, r4
   25020:	4824      	ldr	r0, [pc, #144]	; (250b4 <z_impl_k_poll+0x1b8>)
   25022:	f003 fdf4 	bl	28c0e <assert_print>
   25026:	21c2      	movs	r1, #194	; 0xc2
   25028:	4620      	mov	r0, r4
   2502a:	f003 fde9 	bl	28c00 <assert_post_action>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2502e:	f8df a07c 	ldr.w	sl, [pc, #124]	; 250ac <z_impl_k_poll+0x1b0>
   25032:	9700      	str	r7, [sp, #0]
   25034:	9601      	str	r6, [sp, #4]
   25036:	4a21      	ldr	r2, [pc, #132]	; (250bc <z_impl_k_poll+0x1c0>)
   25038:	4649      	mov	r1, r9
   2503a:	4650      	mov	r0, sl
   2503c:	f7fe fda4 	bl	23b88 <z_pend_curr>
   25040:	4604      	mov	r4, r0
	__asm__ volatile(
   25042:	f04f 0340 	mov.w	r3, #64	; 0x40
   25046:	f3ef 8711 	mrs	r7, BASEPRI
   2504a:	f383 8812 	msr	BASEPRI_MAX, r3
   2504e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25052:	4650      	mov	r0, sl
   25054:	f7fc fee6 	bl	21e24 <z_spin_lock_valid>
   25058:	b188      	cbz	r0, 2507e <z_impl_k_poll+0x182>
	z_spin_lock_set_owner(l);
   2505a:	4e14      	ldr	r6, [pc, #80]	; (250ac <z_impl_k_poll+0x1b0>)
   2505c:	4630      	mov	r0, r6
   2505e:	f7fc ff01 	bl	21e64 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   25062:	463a      	mov	r2, r7
   25064:	4641      	mov	r1, r8
   25066:	4628      	mov	r0, r5
   25068:	f7ff fe1a 	bl	24ca0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2506c:	4630      	mov	r0, r6
   2506e:	f7fc fee9 	bl	21e44 <z_spin_unlock_valid>
   25072:	b170      	cbz	r0, 25092 <z_impl_k_poll+0x196>
	__asm__ volatile(
   25074:	f387 8811 	msr	BASEPRI, r7
   25078:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2507c:	e782      	b.n	24f84 <z_impl_k_poll+0x88>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2507e:	4c0e      	ldr	r4, [pc, #56]	; (250b8 <z_impl_k_poll+0x1bc>)
   25080:	2294      	movs	r2, #148	; 0x94
   25082:	4621      	mov	r1, r4
   25084:	480b      	ldr	r0, [pc, #44]	; (250b4 <z_impl_k_poll+0x1b8>)
   25086:	f003 fdc2 	bl	28c0e <assert_print>
   2508a:	2194      	movs	r1, #148	; 0x94
   2508c:	4620      	mov	r0, r4
   2508e:	f003 fdb7 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25092:	4c09      	ldr	r4, [pc, #36]	; (250b8 <z_impl_k_poll+0x1bc>)
   25094:	22c2      	movs	r2, #194	; 0xc2
   25096:	4621      	mov	r1, r4
   25098:	4806      	ldr	r0, [pc, #24]	; (250b4 <z_impl_k_poll+0x1b8>)
   2509a:	f003 fdb8 	bl	28c0e <assert_print>
   2509e:	21c2      	movs	r1, #194	; 0xc2
   250a0:	4620      	mov	r0, r4
   250a2:	f003 fdad 	bl	28c00 <assert_post_action>
   250a6:	bf00      	nop
   250a8:	20003ac0 	.word	0x20003ac0
   250ac:	20003b1c 	.word	0x20003b1c
   250b0:	00033d64 	.word	0x00033d64
   250b4:	00030128 	.word	0x00030128
   250b8:	00030164 	.word	0x00030164
   250bc:	200008e4 	.word	0x200008e4

000250c0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   250c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   250c2:	4604      	mov	r4, r0
   250c4:	460d      	mov	r5, r1
	__asm__ volatile(
   250c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   250ca:	f3ef 8611 	mrs	r6, BASEPRI
   250ce:	f383 8812 	msr	BASEPRI_MAX, r3
   250d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   250d6:	481e      	ldr	r0, [pc, #120]	; (25150 <z_impl_k_poll_signal_raise+0x90>)
   250d8:	f7fc fea4 	bl	21e24 <z_spin_lock_valid>
   250dc:	b1c8      	cbz	r0, 25112 <z_impl_k_poll_signal_raise+0x52>
	z_spin_lock_set_owner(l);
   250de:	481c      	ldr	r0, [pc, #112]	; (25150 <z_impl_k_poll_signal_raise+0x90>)
   250e0:	f7fc fec0 	bl	21e64 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   250e4:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   250e6:	2301      	movs	r3, #1
   250e8:	60a3      	str	r3, [r4, #8]
	return list->head == list;
   250ea:	6820      	ldr	r0, [r4, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   250ec:	4284      	cmp	r4, r0
   250ee:	d01a      	beq.n	25126 <z_impl_k_poll_signal_raise+0x66>
	sys_dnode_t *const prev = node->prev;
   250f0:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   250f2:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   250f4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   250f6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   250f8:	2300      	movs	r3, #0
   250fa:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   250fc:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   250fe:	2101      	movs	r1, #1
   25100:	f00a fa49 	bl	2f596 <signal_poll_event>
   25104:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   25106:	4631      	mov	r1, r6
   25108:	4811      	ldr	r0, [pc, #68]	; (25150 <z_impl_k_poll_signal_raise+0x90>)
   2510a:	f7fe f9db 	bl	234c4 <z_reschedule>
	return rc;
}
   2510e:	4620      	mov	r0, r4
   25110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25112:	4c10      	ldr	r4, [pc, #64]	; (25154 <z_impl_k_poll_signal_raise+0x94>)
   25114:	2294      	movs	r2, #148	; 0x94
   25116:	4621      	mov	r1, r4
   25118:	480f      	ldr	r0, [pc, #60]	; (25158 <z_impl_k_poll_signal_raise+0x98>)
   2511a:	f003 fd78 	bl	28c0e <assert_print>
   2511e:	2194      	movs	r1, #148	; 0x94
   25120:	4620      	mov	r0, r4
   25122:	f003 fd6d 	bl	28c00 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25126:	480a      	ldr	r0, [pc, #40]	; (25150 <z_impl_k_poll_signal_raise+0x90>)
   25128:	f7fc fe8c 	bl	21e44 <z_spin_unlock_valid>
   2512c:	b128      	cbz	r0, 2513a <z_impl_k_poll_signal_raise+0x7a>
	__asm__ volatile(
   2512e:	f386 8811 	msr	BASEPRI, r6
   25132:	f3bf 8f6f 	isb	sy
		return 0;
   25136:	2400      	movs	r4, #0
   25138:	e7e9      	b.n	2510e <z_impl_k_poll_signal_raise+0x4e>
   2513a:	4c06      	ldr	r4, [pc, #24]	; (25154 <z_impl_k_poll_signal_raise+0x94>)
   2513c:	22c2      	movs	r2, #194	; 0xc2
   2513e:	4621      	mov	r1, r4
   25140:	4805      	ldr	r0, [pc, #20]	; (25158 <z_impl_k_poll_signal_raise+0x98>)
   25142:	f003 fd64 	bl	28c0e <assert_print>
   25146:	21c2      	movs	r1, #194	; 0xc2
   25148:	4620      	mov	r0, r4
   2514a:	f003 fd59 	bl	28c00 <assert_post_action>
   2514e:	bf00      	nop
   25150:	20003b1c 	.word	0x20003b1c
   25154:	00030164 	.word	0x00030164
   25158:	00030128 	.word	0x00030128

0002515c <z_heap_aligned_alloc>:
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2515c:	b530      	push	{r4, r5, lr}
   2515e:	b083      	sub	sp, #12
   25160:	4605      	mov	r5, r0
   25162:	460c      	mov	r4, r1
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   25164:	2300      	movs	r3, #0
   25166:	3204      	adds	r2, #4
   25168:	d212      	bcs.n	25190 <z_heap_aligned_alloc+0x34>
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   2516a:	b9eb      	cbnz	r3, 251a8 <z_heap_aligned_alloc+0x4c>
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2516c:	2000      	movs	r0, #0
   2516e:	2100      	movs	r1, #0
   25170:	e9cd 0100 	strd	r0, r1, [sp]
   25174:	f044 0104 	orr.w	r1, r4, #4
   25178:	4628      	mov	r0, r5
   2517a:	f7fc fc77 	bl	21a6c <k_heap_aligned_alloc>
	if (mem == NULL) {
   2517e:	b128      	cbz	r0, 2518c <z_heap_aligned_alloc+0x30>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   25180:	f840 5b04 	str.w	r5, [r0], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   25184:	b114      	cbz	r4, 2518c <z_heap_aligned_alloc+0x30>
   25186:	3c01      	subs	r4, #1
   25188:	4220      	tst	r0, r4
   2518a:	d103      	bne.n	25194 <z_heap_aligned_alloc+0x38>
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   2518c:	b003      	add	sp, #12
   2518e:	bd30      	pop	{r4, r5, pc}
   25190:	2301      	movs	r3, #1
   25192:	e7ea      	b.n	2516a <z_heap_aligned_alloc+0xe>
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   25194:	4c05      	ldr	r4, [pc, #20]	; (251ac <z_heap_aligned_alloc+0x50>)
   25196:	2225      	movs	r2, #37	; 0x25
   25198:	4621      	mov	r1, r4
   2519a:	4805      	ldr	r0, [pc, #20]	; (251b0 <z_heap_aligned_alloc+0x54>)
   2519c:	f003 fd37 	bl	28c0e <assert_print>
   251a0:	2125      	movs	r1, #37	; 0x25
   251a2:	4620      	mov	r0, r4
   251a4:	f003 fd2c 	bl	28c00 <assert_post_action>
		return NULL;
   251a8:	2000      	movs	r0, #0
   251aa:	e7ef      	b.n	2518c <z_heap_aligned_alloc+0x30>
   251ac:	00033d88 	.word	0x00033d88
   251b0:	00030128 	.word	0x00030128

000251b4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   251b4:	b538      	push	{r3, r4, r5, lr}
   251b6:	4604      	mov	r4, r0
   251b8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   251ba:	f009 ff76 	bl	2f0aa <k_is_in_isr>
   251be:	b948      	cbnz	r0, 251d4 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   251c0:	4b05      	ldr	r3, [pc, #20]	; (251d8 <z_thread_aligned_alloc+0x24>)
   251c2:	689b      	ldr	r3, [r3, #8]
   251c4:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   251c8:	b118      	cbz	r0, 251d2 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   251ca:	462a      	mov	r2, r5
   251cc:	4621      	mov	r1, r4
   251ce:	f7ff ffc5 	bl	2515c <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   251d2:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   251d4:	2000      	movs	r0, #0
	return ret;
   251d6:	e7fc      	b.n	251d2 <z_thread_aligned_alloc+0x1e>
   251d8:	20003ac0 	.word	0x20003ac0

000251dc <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   251dc:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   251de:	4802      	ldr	r0, [pc, #8]	; (251e8 <boot_banner+0xc>)
   251e0:	f003 f8c4 	bl	2836c <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   251e4:	bd08      	pop	{r3, pc}
   251e6:	bf00      	nop
   251e8:	00033dac 	.word	0x00033dac

000251ec <ocrypto_ecdh_p256_public_key>:
   251ec:	b530      	push	{r4, r5, lr}
   251ee:	b099      	sub	sp, #100	; 0x64
   251f0:	4605      	mov	r5, r0
   251f2:	4668      	mov	r0, sp
   251f4:	f000 f828 	bl	25248 <ocrypto_sc_p256_from32bytes>
   251f8:	4669      	mov	r1, sp
   251fa:	4604      	mov	r4, r0
   251fc:	a808      	add	r0, sp, #32
   251fe:	f000 fa53 	bl	256a8 <ocrypto_curve_p256_scalarmult_base>
   25202:	a908      	add	r1, sp, #32
   25204:	4304      	orrs	r4, r0
   25206:	4628      	mov	r0, r5
   25208:	f000 f98a 	bl	25520 <ocrypto_curve_p256_to64bytes>
   2520c:	4620      	mov	r0, r4
   2520e:	b019      	add	sp, #100	; 0x64
   25210:	bd30      	pop	{r4, r5, pc}
   25212:	bf00      	nop

00025214 <ocrypto_ecdh_p256_common_secret>:
   25214:	b570      	push	{r4, r5, r6, lr}
   25216:	b098      	sub	sp, #96	; 0x60
   25218:	4605      	mov	r5, r0
   2521a:	4668      	mov	r0, sp
   2521c:	4616      	mov	r6, r2
   2521e:	f000 f813 	bl	25248 <ocrypto_sc_p256_from32bytes>
   25222:	4631      	mov	r1, r6
   25224:	4604      	mov	r4, r0
   25226:	a808      	add	r0, sp, #32
   25228:	f000 f946 	bl	254b8 <ocrypto_curve_p256_from64bytes>
   2522c:	a908      	add	r1, sp, #32
   2522e:	466a      	mov	r2, sp
   25230:	4304      	orrs	r4, r0
   25232:	4608      	mov	r0, r1
   25234:	f000 f982 	bl	2553c <ocrypto_curve_p256_scalarmult>
   25238:	a908      	add	r1, sp, #32
   2523a:	4304      	orrs	r4, r0
   2523c:	4628      	mov	r0, r5
   2523e:	f000 f96d 	bl	2551c <ocrypto_curve_p256_to32bytes>
   25242:	4620      	mov	r0, r4
   25244:	b018      	add	sp, #96	; 0x60
   25246:	bd70      	pop	{r4, r5, r6, pc}

00025248 <ocrypto_sc_p256_from32bytes>:
   25248:	b570      	push	{r4, r5, r6, lr}
   2524a:	680b      	ldr	r3, [r1, #0]
   2524c:	4e12      	ldr	r6, [pc, #72]	; (25298 <ocrypto_sc_p256_from32bytes+0x50>)
   2524e:	ba1b      	rev	r3, r3
   25250:	61c3      	str	r3, [r0, #28]
   25252:	684b      	ldr	r3, [r1, #4]
   25254:	ba1b      	rev	r3, r3
   25256:	6183      	str	r3, [r0, #24]
   25258:	688b      	ldr	r3, [r1, #8]
   2525a:	ba1b      	rev	r3, r3
   2525c:	6143      	str	r3, [r0, #20]
   2525e:	68cb      	ldr	r3, [r1, #12]
   25260:	ba1b      	rev	r3, r3
   25262:	6103      	str	r3, [r0, #16]
   25264:	690b      	ldr	r3, [r1, #16]
   25266:	ba1b      	rev	r3, r3
   25268:	60c3      	str	r3, [r0, #12]
   2526a:	694b      	ldr	r3, [r1, #20]
   2526c:	ba1b      	rev	r3, r3
   2526e:	6083      	str	r3, [r0, #8]
   25270:	698b      	ldr	r3, [r1, #24]
   25272:	ba1b      	rev	r3, r3
   25274:	6043      	str	r3, [r0, #4]
   25276:	69cb      	ldr	r3, [r1, #28]
   25278:	ba1b      	rev	r3, r3
   2527a:	4632      	mov	r2, r6
   2527c:	6003      	str	r3, [r0, #0]
   2527e:	4601      	mov	r1, r0
   25280:	4604      	mov	r4, r0
   25282:	f7da ff77 	bl	174 <ocrypto_bigint_sub256>
   25286:	4631      	mov	r1, r6
   25288:	4605      	mov	r5, r0
   2528a:	4602      	mov	r2, r0
   2528c:	4620      	mov	r0, r4
   2528e:	f7da ff91 	bl	1b4 <ocrypto_bigint_cadd256>
   25292:	1e68      	subs	r0, r5, #1
   25294:	bd70      	pop	{r4, r5, r6, pc}
   25296:	bf00      	nop
   25298:	00033ddc 	.word	0x00033ddc

0002529c <p256_zdblu>:
   2529c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252a0:	b088      	sub	sp, #32
   252a2:	460c      	mov	r4, r1
   252a4:	4606      	mov	r6, r0
   252a6:	f102 0120 	add.w	r1, r2, #32
   252aa:	4668      	mov	r0, sp
   252ac:	f106 0720 	add.w	r7, r6, #32
   252b0:	4690      	mov	r8, r2
   252b2:	f7db fa69 	bl	788 <ocrypto_mod_p256_sqr>
   252b6:	466a      	mov	r2, sp
   252b8:	4669      	mov	r1, sp
   252ba:	4668      	mov	r0, sp
   252bc:	f7db f976 	bl	5ac <ocrypto_mod_p256_add>
   252c0:	4669      	mov	r1, sp
   252c2:	4638      	mov	r0, r7
   252c4:	f7db fa60 	bl	788 <ocrypto_mod_p256_sqr>
   252c8:	463a      	mov	r2, r7
   252ca:	4639      	mov	r1, r7
   252cc:	4638      	mov	r0, r7
   252ce:	f104 0520 	add.w	r5, r4, #32
   252d2:	f7db f96b 	bl	5ac <ocrypto_mod_p256_add>
   252d6:	466a      	mov	r2, sp
   252d8:	4669      	mov	r1, sp
   252da:	4668      	mov	r0, sp
   252dc:	f7db f966 	bl	5ac <ocrypto_mod_p256_add>
   252e0:	4641      	mov	r1, r8
   252e2:	4628      	mov	r0, r5
   252e4:	f7db fa50 	bl	788 <ocrypto_mod_p256_sqr>
   252e8:	466a      	mov	r2, sp
   252ea:	4641      	mov	r1, r8
   252ec:	4630      	mov	r0, r6
   252ee:	f7db fa33 	bl	758 <ocrypto_mod_p256_mul>
   252f2:	462a      	mov	r2, r5
   252f4:	4629      	mov	r1, r5
   252f6:	4668      	mov	r0, sp
   252f8:	f7db f958 	bl	5ac <ocrypto_mod_p256_add>
   252fc:	462a      	mov	r2, r5
   252fe:	4669      	mov	r1, sp
   25300:	4668      	mov	r0, sp
   25302:	f7db f953 	bl	5ac <ocrypto_mod_p256_add>
   25306:	4a12      	ldr	r2, [pc, #72]	; (25350 <p256_zdblu+0xb4>)
   25308:	4669      	mov	r1, sp
   2530a:	4668      	mov	r0, sp
   2530c:	f7db f94e 	bl	5ac <ocrypto_mod_p256_add>
   25310:	4669      	mov	r1, sp
   25312:	4620      	mov	r0, r4
   25314:	f7db fa38 	bl	788 <ocrypto_mod_p256_sqr>
   25318:	4632      	mov	r2, r6
   2531a:	4621      	mov	r1, r4
   2531c:	4620      	mov	r0, r4
   2531e:	f7db f983 	bl	628 <ocrypto_mod_p256_sub>
   25322:	4632      	mov	r2, r6
   25324:	4621      	mov	r1, r4
   25326:	4620      	mov	r0, r4
   25328:	f7db f97e 	bl	628 <ocrypto_mod_p256_sub>
   2532c:	4622      	mov	r2, r4
   2532e:	4631      	mov	r1, r6
   25330:	4628      	mov	r0, r5
   25332:	f7db f979 	bl	628 <ocrypto_mod_p256_sub>
   25336:	466a      	mov	r2, sp
   25338:	4629      	mov	r1, r5
   2533a:	4628      	mov	r0, r5
   2533c:	f7db fa0c 	bl	758 <ocrypto_mod_p256_mul>
   25340:	463a      	mov	r2, r7
   25342:	4629      	mov	r1, r5
   25344:	4628      	mov	r0, r5
   25346:	f7db f96f 	bl	628 <ocrypto_mod_p256_sub>
   2534a:	b008      	add	sp, #32
   2534c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25350:	00033e7c 	.word	0x00033e7c

00025354 <p256_zaddc>:
   25354:	b5f0      	push	{r4, r5, r6, r7, lr}
   25356:	b099      	sub	sp, #100	; 0x64
   25358:	4604      	mov	r4, r0
   2535a:	460d      	mov	r5, r1
   2535c:	460a      	mov	r2, r1
   2535e:	4601      	mov	r1, r0
   25360:	4668      	mov	r0, sp
   25362:	f7db f961 	bl	628 <ocrypto_mod_p256_sub>
   25366:	4669      	mov	r1, sp
   25368:	4668      	mov	r0, sp
   2536a:	f7db fa0d 	bl	788 <ocrypto_mod_p256_sqr>
   2536e:	466a      	mov	r2, sp
   25370:	4621      	mov	r1, r4
   25372:	a808      	add	r0, sp, #32
   25374:	f105 0620 	add.w	r6, r5, #32
   25378:	f104 0720 	add.w	r7, r4, #32
   2537c:	f7db f9ec 	bl	758 <ocrypto_mod_p256_mul>
   25380:	466a      	mov	r2, sp
   25382:	4629      	mov	r1, r5
   25384:	4668      	mov	r0, sp
   25386:	f7db f9e7 	bl	758 <ocrypto_mod_p256_mul>
   2538a:	4632      	mov	r2, r6
   2538c:	4639      	mov	r1, r7
   2538e:	a810      	add	r0, sp, #64	; 0x40
   25390:	f7db f90c 	bl	5ac <ocrypto_mod_p256_add>
   25394:	4632      	mov	r2, r6
   25396:	4639      	mov	r1, r7
   25398:	4630      	mov	r0, r6
   2539a:	f7db f945 	bl	628 <ocrypto_mod_p256_sub>
   2539e:	4631      	mov	r1, r6
   253a0:	4628      	mov	r0, r5
   253a2:	f7db f9f1 	bl	788 <ocrypto_mod_p256_sqr>
   253a6:	466a      	mov	r2, sp
   253a8:	a908      	add	r1, sp, #32
   253aa:	4620      	mov	r0, r4
   253ac:	f7db f8fe 	bl	5ac <ocrypto_mod_p256_add>
   253b0:	4622      	mov	r2, r4
   253b2:	4629      	mov	r1, r5
   253b4:	4628      	mov	r0, r5
   253b6:	f7db f937 	bl	628 <ocrypto_mod_p256_sub>
   253ba:	466a      	mov	r2, sp
   253bc:	a908      	add	r1, sp, #32
   253be:	4668      	mov	r0, sp
   253c0:	f7db f932 	bl	628 <ocrypto_mod_p256_sub>
   253c4:	466a      	mov	r2, sp
   253c6:	4639      	mov	r1, r7
   253c8:	4638      	mov	r0, r7
   253ca:	f7db f9c5 	bl	758 <ocrypto_mod_p256_mul>
   253ce:	462a      	mov	r2, r5
   253d0:	a908      	add	r1, sp, #32
   253d2:	4668      	mov	r0, sp
   253d4:	f7db f928 	bl	628 <ocrypto_mod_p256_sub>
   253d8:	466a      	mov	r2, sp
   253da:	4631      	mov	r1, r6
   253dc:	4630      	mov	r0, r6
   253de:	f7db f9bb 	bl	758 <ocrypto_mod_p256_mul>
   253e2:	463a      	mov	r2, r7
   253e4:	4631      	mov	r1, r6
   253e6:	4630      	mov	r0, r6
   253e8:	f7db f91e 	bl	628 <ocrypto_mod_p256_sub>
   253ec:	a910      	add	r1, sp, #64	; 0x40
   253ee:	4668      	mov	r0, sp
   253f0:	f7db f9ca 	bl	788 <ocrypto_mod_p256_sqr>
   253f4:	4622      	mov	r2, r4
   253f6:	4669      	mov	r1, sp
   253f8:	4620      	mov	r0, r4
   253fa:	f7db f915 	bl	628 <ocrypto_mod_p256_sub>
   253fe:	a908      	add	r1, sp, #32
   25400:	4622      	mov	r2, r4
   25402:	4608      	mov	r0, r1
   25404:	f7db f910 	bl	628 <ocrypto_mod_p256_sub>
   25408:	a910      	add	r1, sp, #64	; 0x40
   2540a:	aa08      	add	r2, sp, #32
   2540c:	4608      	mov	r0, r1
   2540e:	f7db f9a3 	bl	758 <ocrypto_mod_p256_mul>
   25412:	463a      	mov	r2, r7
   25414:	a910      	add	r1, sp, #64	; 0x40
   25416:	4638      	mov	r0, r7
   25418:	f7db f906 	bl	628 <ocrypto_mod_p256_sub>
   2541c:	b019      	add	sp, #100	; 0x64
   2541e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025420 <p256_zaddu>:
   25420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25424:	b088      	sub	sp, #32
   25426:	460c      	mov	r4, r1
   25428:	4605      	mov	r5, r0
   2542a:	4690      	mov	r8, r2
   2542c:	460a      	mov	r2, r1
   2542e:	4601      	mov	r1, r0
   25430:	4668      	mov	r0, sp
   25432:	f7db f8f9 	bl	628 <ocrypto_mod_p256_sub>
   25436:	4669      	mov	r1, sp
   25438:	4668      	mov	r0, sp
   2543a:	f7db f9a5 	bl	788 <ocrypto_mod_p256_sqr>
   2543e:	466a      	mov	r2, sp
   25440:	4629      	mov	r1, r5
   25442:	4628      	mov	r0, r5
   25444:	f104 0620 	add.w	r6, r4, #32
   25448:	f7db f986 	bl	758 <ocrypto_mod_p256_mul>
   2544c:	f105 0720 	add.w	r7, r5, #32
   25450:	466a      	mov	r2, sp
   25452:	4621      	mov	r1, r4
   25454:	4668      	mov	r0, sp
   25456:	f7db f97f 	bl	758 <ocrypto_mod_p256_mul>
   2545a:	4632      	mov	r2, r6
   2545c:	4639      	mov	r1, r7
   2545e:	4630      	mov	r0, r6
   25460:	f7db f8e2 	bl	628 <ocrypto_mod_p256_sub>
   25464:	4631      	mov	r1, r6
   25466:	4620      	mov	r0, r4
   25468:	f7db f98e 	bl	788 <ocrypto_mod_p256_sqr>
   2546c:	462a      	mov	r2, r5
   2546e:	4621      	mov	r1, r4
   25470:	4620      	mov	r0, r4
   25472:	f7db f8d9 	bl	628 <ocrypto_mod_p256_sub>
   25476:	466a      	mov	r2, sp
   25478:	4621      	mov	r1, r4
   2547a:	4620      	mov	r0, r4
   2547c:	f7db f8d4 	bl	628 <ocrypto_mod_p256_sub>
   25480:	466a      	mov	r2, sp
   25482:	4629      	mov	r1, r5
   25484:	4640      	mov	r0, r8
   25486:	f7db f8cf 	bl	628 <ocrypto_mod_p256_sub>
   2548a:	4642      	mov	r2, r8
   2548c:	4639      	mov	r1, r7
   2548e:	4638      	mov	r0, r7
   25490:	f7db f962 	bl	758 <ocrypto_mod_p256_mul>
   25494:	4622      	mov	r2, r4
   25496:	4629      	mov	r1, r5
   25498:	4668      	mov	r0, sp
   2549a:	f7db f8c5 	bl	628 <ocrypto_mod_p256_sub>
   2549e:	466a      	mov	r2, sp
   254a0:	4631      	mov	r1, r6
   254a2:	4630      	mov	r0, r6
   254a4:	f7db f958 	bl	758 <ocrypto_mod_p256_mul>
   254a8:	463a      	mov	r2, r7
   254aa:	4631      	mov	r1, r6
   254ac:	4630      	mov	r0, r6
   254ae:	f7db f8bb 	bl	628 <ocrypto_mod_p256_sub>
   254b2:	b008      	add	sp, #32
   254b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000254b8 <ocrypto_curve_p256_from64bytes>:
   254b8:	b570      	push	{r4, r5, r6, lr}
   254ba:	f100 0620 	add.w	r6, r0, #32
   254be:	b090      	sub	sp, #64	; 0x40
   254c0:	460d      	mov	r5, r1
   254c2:	4604      	mov	r4, r0
   254c4:	f000 f914 	bl	256f0 <ocrypto_mod_p256_from_bytes>
   254c8:	f105 0120 	add.w	r1, r5, #32
   254cc:	4630      	mov	r0, r6
   254ce:	f000 f90f 	bl	256f0 <ocrypto_mod_p256_from_bytes>
   254d2:	4621      	mov	r1, r4
   254d4:	a808      	add	r0, sp, #32
   254d6:	f7db f957 	bl	788 <ocrypto_mod_p256_sqr>
   254da:	a908      	add	r1, sp, #32
   254dc:	4608      	mov	r0, r1
   254de:	4a0d      	ldr	r2, [pc, #52]	; (25514 <ocrypto_curve_p256_from64bytes+0x5c>)
   254e0:	f7db f864 	bl	5ac <ocrypto_mod_p256_add>
   254e4:	a908      	add	r1, sp, #32
   254e6:	4622      	mov	r2, r4
   254e8:	4608      	mov	r0, r1
   254ea:	f7db f935 	bl	758 <ocrypto_mod_p256_mul>
   254ee:	a908      	add	r1, sp, #32
   254f0:	4a09      	ldr	r2, [pc, #36]	; (25518 <ocrypto_curve_p256_from64bytes+0x60>)
   254f2:	4608      	mov	r0, r1
   254f4:	f7db f85a 	bl	5ac <ocrypto_mod_p256_add>
   254f8:	4631      	mov	r1, r6
   254fa:	4668      	mov	r0, sp
   254fc:	f7db f944 	bl	788 <ocrypto_mod_p256_sqr>
   25500:	2220      	movs	r2, #32
   25502:	4669      	mov	r1, sp
   25504:	eb0d 0002 	add.w	r0, sp, r2
   25508:	f7db f822 	bl	550 <ocrypto_constant_time_equal>
   2550c:	3801      	subs	r0, #1
   2550e:	b010      	add	sp, #64	; 0x40
   25510:	bd70      	pop	{r4, r5, r6, pc}
   25512:	bf00      	nop
   25514:	00033e7c 	.word	0x00033e7c
   25518:	00033e9c 	.word	0x00033e9c

0002551c <ocrypto_curve_p256_to32bytes>:
   2551c:	f000 b902 	b.w	25724 <ocrypto_mod_p256_to_bytes>

00025520 <ocrypto_curve_p256_to64bytes>:
   25520:	b538      	push	{r3, r4, r5, lr}
   25522:	4604      	mov	r4, r0
   25524:	460d      	mov	r5, r1
   25526:	f000 f8fd 	bl	25724 <ocrypto_mod_p256_to_bytes>
   2552a:	f105 0120 	add.w	r1, r5, #32
   2552e:	f104 0020 	add.w	r0, r4, #32
   25532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25536:	f000 b8f5 	b.w	25724 <ocrypto_mod_p256_to_bytes>
   2553a:	bf00      	nop

0002553c <ocrypto_curve_p256_scalarmult>:
   2553c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25540:	4613      	mov	r3, r2
   25542:	b0b8      	sub	sp, #224	; 0xe0
   25544:	4a54      	ldr	r2, [pc, #336]	; (25698 <ocrypto_curve_p256_scalarmult+0x15c>)
   25546:	4689      	mov	r9, r1
   25548:	4680      	mov	r8, r0
   2554a:	4619      	mov	r1, r3
   2554c:	a810      	add	r0, sp, #64	; 0x40
   2554e:	f7da fe11 	bl	174 <ocrypto_bigint_sub256>
   25552:	4952      	ldr	r1, [pc, #328]	; (2569c <ocrypto_curve_p256_scalarmult+0x160>)
   25554:	4602      	mov	r2, r0
   25556:	a810      	add	r0, sp, #64	; 0x40
   25558:	f7da fe2c 	bl	1b4 <ocrypto_bigint_cadd256>
   2555c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   2555e:	494e      	ldr	r1, [pc, #312]	; (25698 <ocrypto_curve_p256_scalarmult+0x15c>)
   25560:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   25564:	4607      	mov	r7, r0
   25566:	f1c6 0201 	rsb	r2, r6, #1
   2556a:	a810      	add	r0, sp, #64	; 0x40
   2556c:	f7da fe22 	bl	1b4 <ocrypto_bigint_cadd256>
   25570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   25572:	464a      	mov	r2, r9
   25574:	ea6f 0a03 	mvn.w	sl, r3
   25578:	a928      	add	r1, sp, #160	; 0xa0
   2557a:	a818      	add	r0, sp, #96	; 0x60
   2557c:	f7ff fe8e 	bl	2529c <p256_zdblu>
   25580:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   25584:	a920      	add	r1, sp, #128	; 0x80
   25586:	f1ca 0201 	rsb	r2, sl, #1
   2558a:	4608      	mov	r0, r1
   2558c:	f000 f892 	bl	256b4 <ocrypto_mod_p256_cneg>
   25590:	f1c7 0701 	rsb	r7, r7, #1
   25594:	24fe      	movs	r4, #254	; 0xfe
   25596:	466a      	mov	r2, sp
   25598:	a918      	add	r1, sp, #96	; 0x60
   2559a:	a828      	add	r0, sp, #160	; 0xa0
   2559c:	f7ff ff40 	bl	25420 <p256_zaddu>
   255a0:	1162      	asrs	r2, r4, #5
   255a2:	ab38      	add	r3, sp, #224	; 0xe0
   255a4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   255a8:	f004 011f 	and.w	r1, r4, #31
   255ac:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   255b0:	40cb      	lsrs	r3, r1
   255b2:	4655      	mov	r5, sl
   255b4:	f003 0a01 	and.w	sl, r3, #1
   255b8:	ea8a 0505 	eor.w	r5, sl, r5
   255bc:	462a      	mov	r2, r5
   255be:	a928      	add	r1, sp, #160	; 0xa0
   255c0:	a818      	add	r0, sp, #96	; 0x60
   255c2:	f7da fe53 	bl	26c <ocrypto_bigint_cswap256>
   255c6:	462a      	mov	r2, r5
   255c8:	a930      	add	r1, sp, #192	; 0xc0
   255ca:	a820      	add	r0, sp, #128	; 0x80
   255cc:	f7da fe4e 	bl	26c <ocrypto_bigint_cswap256>
   255d0:	3c01      	subs	r4, #1
   255d2:	a928      	add	r1, sp, #160	; 0xa0
   255d4:	a818      	add	r0, sp, #96	; 0x60
   255d6:	f7ff febd 	bl	25354 <p256_zaddc>
   255da:	1c63      	adds	r3, r4, #1
   255dc:	d1db      	bne.n	25596 <ocrypto_curve_p256_scalarmult+0x5a>
   255de:	f1ca 0201 	rsb	r2, sl, #1
   255e2:	a920      	add	r1, sp, #128	; 0x80
   255e4:	a808      	add	r0, sp, #32
   255e6:	f000 f865 	bl	256b4 <ocrypto_mod_p256_cneg>
   255ea:	ea86 060a 	eor.w	r6, r6, sl
   255ee:	466a      	mov	r2, sp
   255f0:	a918      	add	r1, sp, #96	; 0x60
   255f2:	a828      	add	r0, sp, #160	; 0xa0
   255f4:	f7ff ff14 	bl	25420 <p256_zaddu>
   255f8:	a928      	add	r1, sp, #160	; 0xa0
   255fa:	4632      	mov	r2, r6
   255fc:	a818      	add	r0, sp, #96	; 0x60
   255fe:	f7da fe35 	bl	26c <ocrypto_bigint_cswap256>
   25602:	4632      	mov	r2, r6
   25604:	a930      	add	r1, sp, #192	; 0xc0
   25606:	a820      	add	r0, sp, #128	; 0x80
   25608:	f7da fe30 	bl	26c <ocrypto_bigint_cswap256>
   2560c:	a908      	add	r1, sp, #32
   2560e:	466a      	mov	r2, sp
   25610:	4608      	mov	r0, r1
   25612:	f7db f8a1 	bl	758 <ocrypto_mod_p256_mul>
   25616:	a908      	add	r1, sp, #32
   25618:	4608      	mov	r0, r1
   2561a:	f000 f89d 	bl	25758 <ocrypto_mod_p256_inv>
   2561e:	a908      	add	r1, sp, #32
   25620:	f108 0420 	add.w	r4, r8, #32
   25624:	f109 0220 	add.w	r2, r9, #32
   25628:	4608      	mov	r0, r1
   2562a:	f7db f895 	bl	758 <ocrypto_mod_p256_mul>
   2562e:	a920      	add	r1, sp, #128	; 0x80
   25630:	aa08      	add	r2, sp, #32
   25632:	4620      	mov	r0, r4
   25634:	f7db f890 	bl	758 <ocrypto_mod_p256_mul>
   25638:	aa08      	add	r2, sp, #32
   2563a:	a918      	add	r1, sp, #96	; 0x60
   2563c:	4668      	mov	r0, sp
   2563e:	f7db f88b 	bl	758 <ocrypto_mod_p256_mul>
   25642:	4669      	mov	r1, sp
   25644:	4668      	mov	r0, sp
   25646:	f7db f89f 	bl	788 <ocrypto_mod_p256_sqr>
   2564a:	aa18      	add	r2, sp, #96	; 0x60
   2564c:	4669      	mov	r1, sp
   2564e:	a808      	add	r0, sp, #32
   25650:	f7db f882 	bl	758 <ocrypto_mod_p256_mul>
   25654:	4621      	mov	r1, r4
   25656:	4668      	mov	r0, sp
   25658:	f7db f896 	bl	788 <ocrypto_mod_p256_sqr>
   2565c:	aa08      	add	r2, sp, #32
   2565e:	4669      	mov	r1, sp
   25660:	4610      	mov	r0, r2
   25662:	f7da ffe1 	bl	628 <ocrypto_mod_p256_sub>
   25666:	4a0e      	ldr	r2, [pc, #56]	; (256a0 <ocrypto_curve_p256_scalarmult+0x164>)
   25668:	a908      	add	r1, sp, #32
   2566a:	4668      	mov	r0, sp
   2566c:	f7da ffdc 	bl	628 <ocrypto_mod_p256_sub>
   25670:	4620      	mov	r0, r4
   25672:	2120      	movs	r1, #32
   25674:	f7da ff80 	bl	578 <ocrypto_constant_time_is_zero>
   25678:	a908      	add	r1, sp, #32
   2567a:	4243      	negs	r3, r0
   2567c:	4602      	mov	r2, r0
   2567e:	4668      	mov	r0, sp
   25680:	431f      	orrs	r7, r3
   25682:	f7da fdf3 	bl	26c <ocrypto_bigint_cswap256>
   25686:	4640      	mov	r0, r8
   25688:	4a06      	ldr	r2, [pc, #24]	; (256a4 <ocrypto_curve_p256_scalarmult+0x168>)
   2568a:	4669      	mov	r1, sp
   2568c:	f7db f864 	bl	758 <ocrypto_mod_p256_mul>
   25690:	4638      	mov	r0, r7
   25692:	b038      	add	sp, #224	; 0xe0
   25694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25698:	00033ebc 	.word	0x00033ebc
   2569c:	00033e3c 	.word	0x00033e3c
   256a0:	00033e9c 	.word	0x00033e9c
   256a4:	00033e5c 	.word	0x00033e5c

000256a8 <ocrypto_curve_p256_scalarmult_base>:
   256a8:	460a      	mov	r2, r1
   256aa:	4901      	ldr	r1, [pc, #4]	; (256b0 <ocrypto_curve_p256_scalarmult_base+0x8>)
   256ac:	f7ff bf46 	b.w	2553c <ocrypto_curve_p256_scalarmult>
   256b0:	00033dfc 	.word	0x00033dfc

000256b4 <ocrypto_mod_p256_cneg>:
   256b4:	b570      	push	{r4, r5, r6, lr}
   256b6:	b088      	sub	sp, #32
   256b8:	4604      	mov	r4, r0
   256ba:	460d      	mov	r5, r1
   256bc:	4616      	mov	r6, r2
   256be:	2100      	movs	r1, #0
   256c0:	2220      	movs	r2, #32
   256c2:	4668      	mov	r0, sp
   256c4:	f004 fb91 	bl	29dea <memset>
   256c8:	2300      	movs	r3, #0
   256ca:	4629      	mov	r1, r5
   256cc:	2220      	movs	r2, #32
   256ce:	4620      	mov	r0, r4
   256d0:	9300      	str	r3, [sp, #0]
   256d2:	f004 fb5b 	bl	29d8c <memcpy>
   256d6:	462a      	mov	r2, r5
   256d8:	4669      	mov	r1, sp
   256da:	4668      	mov	r0, sp
   256dc:	f7da ffa4 	bl	628 <ocrypto_mod_p256_sub>
   256e0:	4632      	mov	r2, r6
   256e2:	4669      	mov	r1, sp
   256e4:	4620      	mov	r0, r4
   256e6:	f7da fdc1 	bl	26c <ocrypto_bigint_cswap256>
   256ea:	b008      	add	sp, #32
   256ec:	bd70      	pop	{r4, r5, r6, pc}
   256ee:	bf00      	nop

000256f0 <ocrypto_mod_p256_from_bytes>:
   256f0:	680b      	ldr	r3, [r1, #0]
   256f2:	ba1b      	rev	r3, r3
   256f4:	61c3      	str	r3, [r0, #28]
   256f6:	684b      	ldr	r3, [r1, #4]
   256f8:	ba1b      	rev	r3, r3
   256fa:	6183      	str	r3, [r0, #24]
   256fc:	688b      	ldr	r3, [r1, #8]
   256fe:	ba1b      	rev	r3, r3
   25700:	6143      	str	r3, [r0, #20]
   25702:	68cb      	ldr	r3, [r1, #12]
   25704:	ba1b      	rev	r3, r3
   25706:	6103      	str	r3, [r0, #16]
   25708:	690b      	ldr	r3, [r1, #16]
   2570a:	ba1b      	rev	r3, r3
   2570c:	60c3      	str	r3, [r0, #12]
   2570e:	694b      	ldr	r3, [r1, #20]
   25710:	ba1b      	rev	r3, r3
   25712:	6083      	str	r3, [r0, #8]
   25714:	698b      	ldr	r3, [r1, #24]
   25716:	ba1b      	rev	r3, r3
   25718:	6043      	str	r3, [r0, #4]
   2571a:	69cb      	ldr	r3, [r1, #28]
   2571c:	ba1b      	rev	r3, r3
   2571e:	6003      	str	r3, [r0, #0]
   25720:	4770      	bx	lr
   25722:	bf00      	nop

00025724 <ocrypto_mod_p256_to_bytes>:
   25724:	69cb      	ldr	r3, [r1, #28]
   25726:	ba1b      	rev	r3, r3
   25728:	6003      	str	r3, [r0, #0]
   2572a:	698b      	ldr	r3, [r1, #24]
   2572c:	ba1b      	rev	r3, r3
   2572e:	6043      	str	r3, [r0, #4]
   25730:	694b      	ldr	r3, [r1, #20]
   25732:	ba1b      	rev	r3, r3
   25734:	6083      	str	r3, [r0, #8]
   25736:	690b      	ldr	r3, [r1, #16]
   25738:	ba1b      	rev	r3, r3
   2573a:	60c3      	str	r3, [r0, #12]
   2573c:	68cb      	ldr	r3, [r1, #12]
   2573e:	ba1b      	rev	r3, r3
   25740:	6103      	str	r3, [r0, #16]
   25742:	688b      	ldr	r3, [r1, #8]
   25744:	ba1b      	rev	r3, r3
   25746:	6143      	str	r3, [r0, #20]
   25748:	684b      	ldr	r3, [r1, #4]
   2574a:	ba1b      	rev	r3, r3
   2574c:	6183      	str	r3, [r0, #24]
   2574e:	680b      	ldr	r3, [r1, #0]
   25750:	ba1b      	rev	r3, r3
   25752:	61c3      	str	r3, [r0, #28]
   25754:	4770      	bx	lr
   25756:	bf00      	nop

00025758 <ocrypto_mod_p256_inv>:
   25758:	b570      	push	{r4, r5, r6, lr}
   2575a:	b098      	sub	sp, #96	; 0x60
   2575c:	460d      	mov	r5, r1
   2575e:	4606      	mov	r6, r0
   25760:	a810      	add	r0, sp, #64	; 0x40
   25762:	f7db f811 	bl	788 <ocrypto_mod_p256_sqr>
   25766:	462a      	mov	r2, r5
   25768:	a910      	add	r1, sp, #64	; 0x40
   2576a:	4668      	mov	r0, sp
   2576c:	f7da fff4 	bl	758 <ocrypto_mod_p256_mul>
   25770:	4669      	mov	r1, sp
   25772:	a810      	add	r0, sp, #64	; 0x40
   25774:	f7db f808 	bl	788 <ocrypto_mod_p256_sqr>
   25778:	a910      	add	r1, sp, #64	; 0x40
   2577a:	4608      	mov	r0, r1
   2577c:	f7db f804 	bl	788 <ocrypto_mod_p256_sqr>
   25780:	466a      	mov	r2, sp
   25782:	a910      	add	r1, sp, #64	; 0x40
   25784:	a808      	add	r0, sp, #32
   25786:	f7da ffe7 	bl	758 <ocrypto_mod_p256_mul>
   2578a:	a908      	add	r1, sp, #32
   2578c:	a810      	add	r0, sp, #64	; 0x40
   2578e:	f7da fffb 	bl	788 <ocrypto_mod_p256_sqr>
   25792:	a910      	add	r1, sp, #64	; 0x40
   25794:	4608      	mov	r0, r1
   25796:	f7da fff7 	bl	788 <ocrypto_mod_p256_sqr>
   2579a:	a910      	add	r1, sp, #64	; 0x40
   2579c:	4608      	mov	r0, r1
   2579e:	f7da fff3 	bl	788 <ocrypto_mod_p256_sqr>
   257a2:	a910      	add	r1, sp, #64	; 0x40
   257a4:	4608      	mov	r0, r1
   257a6:	f7da ffef 	bl	788 <ocrypto_mod_p256_sqr>
   257aa:	a910      	add	r1, sp, #64	; 0x40
   257ac:	aa08      	add	r2, sp, #32
   257ae:	4608      	mov	r0, r1
   257b0:	f7da ffd2 	bl	758 <ocrypto_mod_p256_mul>
   257b4:	a910      	add	r1, sp, #64	; 0x40
   257b6:	4608      	mov	r0, r1
   257b8:	f7da ffe6 	bl	788 <ocrypto_mod_p256_sqr>
   257bc:	a910      	add	r1, sp, #64	; 0x40
   257be:	4608      	mov	r0, r1
   257c0:	f7da ffe2 	bl	788 <ocrypto_mod_p256_sqr>
   257c4:	a910      	add	r1, sp, #64	; 0x40
   257c6:	466a      	mov	r2, sp
   257c8:	a808      	add	r0, sp, #32
   257ca:	f7da ffc5 	bl	758 <ocrypto_mod_p256_mul>
   257ce:	2405      	movs	r4, #5
   257d0:	a908      	add	r1, sp, #32
   257d2:	a810      	add	r0, sp, #64	; 0x40
   257d4:	f7da ffd8 	bl	788 <ocrypto_mod_p256_sqr>
   257d8:	a910      	add	r1, sp, #64	; 0x40
   257da:	4608      	mov	r0, r1
   257dc:	f7da ffd4 	bl	788 <ocrypto_mod_p256_sqr>
   257e0:	3c01      	subs	r4, #1
   257e2:	a910      	add	r1, sp, #64	; 0x40
   257e4:	d1f5      	bne.n	257d2 <ocrypto_mod_p256_inv+0x7a>
   257e6:	aa08      	add	r2, sp, #32
   257e8:	4608      	mov	r0, r1
   257ea:	f7da ffb5 	bl	758 <ocrypto_mod_p256_mul>
   257ee:	2405      	movs	r4, #5
   257f0:	a910      	add	r1, sp, #64	; 0x40
   257f2:	4608      	mov	r0, r1
   257f4:	f7da ffc8 	bl	788 <ocrypto_mod_p256_sqr>
   257f8:	a910      	add	r1, sp, #64	; 0x40
   257fa:	4608      	mov	r0, r1
   257fc:	f7da ffc4 	bl	788 <ocrypto_mod_p256_sqr>
   25800:	3c01      	subs	r4, #1
   25802:	d1f5      	bne.n	257f0 <ocrypto_mod_p256_inv+0x98>
   25804:	a910      	add	r1, sp, #64	; 0x40
   25806:	aa08      	add	r2, sp, #32
   25808:	4608      	mov	r0, r1
   2580a:	f7da ffa5 	bl	758 <ocrypto_mod_p256_mul>
   2580e:	a910      	add	r1, sp, #64	; 0x40
   25810:	a808      	add	r0, sp, #32
   25812:	f7da ffb9 	bl	788 <ocrypto_mod_p256_sqr>
   25816:	a908      	add	r1, sp, #32
   25818:	4608      	mov	r0, r1
   2581a:	f7da ffb5 	bl	788 <ocrypto_mod_p256_sqr>
   2581e:	a908      	add	r1, sp, #32
   25820:	466a      	mov	r2, sp
   25822:	4668      	mov	r0, sp
   25824:	f7da ff98 	bl	758 <ocrypto_mod_p256_mul>
   25828:	2410      	movs	r4, #16
   2582a:	4669      	mov	r1, sp
   2582c:	a810      	add	r0, sp, #64	; 0x40
   2582e:	f7da ffab 	bl	788 <ocrypto_mod_p256_sqr>
   25832:	a910      	add	r1, sp, #64	; 0x40
   25834:	4608      	mov	r0, r1
   25836:	f7da ffa7 	bl	788 <ocrypto_mod_p256_sqr>
   2583a:	3c01      	subs	r4, #1
   2583c:	a910      	add	r1, sp, #64	; 0x40
   2583e:	d1f5      	bne.n	2582c <ocrypto_mod_p256_inv+0xd4>
   25840:	462a      	mov	r2, r5
   25842:	4608      	mov	r0, r1
   25844:	f7da ff88 	bl	758 <ocrypto_mod_p256_mul>
   25848:	2440      	movs	r4, #64	; 0x40
   2584a:	a910      	add	r1, sp, #64	; 0x40
   2584c:	4608      	mov	r0, r1
   2584e:	f7da ff9b 	bl	788 <ocrypto_mod_p256_sqr>
   25852:	a910      	add	r1, sp, #64	; 0x40
   25854:	4608      	mov	r0, r1
   25856:	f7da ff97 	bl	788 <ocrypto_mod_p256_sqr>
   2585a:	3c01      	subs	r4, #1
   2585c:	d1f5      	bne.n	2584a <ocrypto_mod_p256_inv+0xf2>
   2585e:	a910      	add	r1, sp, #64	; 0x40
   25860:	466a      	mov	r2, sp
   25862:	4608      	mov	r0, r1
   25864:	f7da ff78 	bl	758 <ocrypto_mod_p256_mul>
   25868:	2410      	movs	r4, #16
   2586a:	a910      	add	r1, sp, #64	; 0x40
   2586c:	4608      	mov	r0, r1
   2586e:	f7da ff8b 	bl	788 <ocrypto_mod_p256_sqr>
   25872:	a910      	add	r1, sp, #64	; 0x40
   25874:	4608      	mov	r0, r1
   25876:	f7da ff87 	bl	788 <ocrypto_mod_p256_sqr>
   2587a:	3c01      	subs	r4, #1
   2587c:	d1f5      	bne.n	2586a <ocrypto_mod_p256_inv+0x112>
   2587e:	a910      	add	r1, sp, #64	; 0x40
   25880:	466a      	mov	r2, sp
   25882:	4608      	mov	r0, r1
   25884:	f7da ff68 	bl	758 <ocrypto_mod_p256_mul>
   25888:	2410      	movs	r4, #16
   2588a:	a910      	add	r1, sp, #64	; 0x40
   2588c:	4608      	mov	r0, r1
   2588e:	f7da ff7b 	bl	788 <ocrypto_mod_p256_sqr>
   25892:	a910      	add	r1, sp, #64	; 0x40
   25894:	4608      	mov	r0, r1
   25896:	f7da ff77 	bl	788 <ocrypto_mod_p256_sqr>
   2589a:	3c01      	subs	r4, #1
   2589c:	d1f5      	bne.n	2588a <ocrypto_mod_p256_inv+0x132>
   2589e:	a910      	add	r1, sp, #64	; 0x40
   258a0:	aa08      	add	r2, sp, #32
   258a2:	4608      	mov	r0, r1
   258a4:	f7da ff58 	bl	758 <ocrypto_mod_p256_mul>
   258a8:	462a      	mov	r2, r5
   258aa:	a910      	add	r1, sp, #64	; 0x40
   258ac:	4630      	mov	r0, r6
   258ae:	f7da ff53 	bl	758 <ocrypto_mod_p256_mul>
   258b2:	b018      	add	sp, #96	; 0x60
   258b4:	bd70      	pop	{r4, r5, r6, pc}
   258b6:	bf00      	nop

000258b8 <nrf_cc3xx_platform_init>:
   258b8:	b510      	push	{r4, lr}
   258ba:	4c0c      	ldr	r4, [pc, #48]	; (258ec <nrf_cc3xx_platform_init+0x34>)
   258bc:	6823      	ldr	r3, [r4, #0]
   258be:	b113      	cbz	r3, 258c6 <nrf_cc3xx_platform_init+0xe>
   258c0:	4b0b      	ldr	r3, [pc, #44]	; (258f0 <nrf_cc3xx_platform_init+0x38>)
   258c2:	681b      	ldr	r3, [r3, #0]
   258c4:	b92b      	cbnz	r3, 258d2 <nrf_cc3xx_platform_init+0x1a>
   258c6:	f000 fe99 	bl	265fc <CC_LibInit>
   258ca:	b930      	cbnz	r0, 258da <nrf_cc3xx_platform_init+0x22>
   258cc:	4b08      	ldr	r3, [pc, #32]	; (258f0 <nrf_cc3xx_platform_init+0x38>)
   258ce:	2201      	movs	r2, #1
   258d0:	601a      	str	r2, [r3, #0]
   258d2:	2301      	movs	r3, #1
   258d4:	6023      	str	r3, [r4, #0]
   258d6:	2000      	movs	r0, #0
   258d8:	bd10      	pop	{r4, pc}
   258da:	3801      	subs	r0, #1
   258dc:	2806      	cmp	r0, #6
   258de:	d901      	bls.n	258e4 <nrf_cc3xx_platform_init+0x2c>
   258e0:	4804      	ldr	r0, [pc, #16]	; (258f4 <nrf_cc3xx_platform_init+0x3c>)
   258e2:	bd10      	pop	{r4, pc}
   258e4:	4b04      	ldr	r3, [pc, #16]	; (258f8 <nrf_cc3xx_platform_init+0x40>)
   258e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   258ea:	bd10      	pop	{r4, pc}
   258ec:	20003b20 	.word	0x20003b20
   258f0:	20003b24 	.word	0x20003b24
   258f4:	ffff8ffe 	.word	0xffff8ffe
   258f8:	00033edc 	.word	0x00033edc

000258fc <nrf_cc3xx_platform_abort>:
   258fc:	f3bf 8f4f 	dsb	sy
   25900:	4905      	ldr	r1, [pc, #20]	; (25918 <nrf_cc3xx_platform_abort+0x1c>)
   25902:	4b06      	ldr	r3, [pc, #24]	; (2591c <nrf_cc3xx_platform_abort+0x20>)
   25904:	68ca      	ldr	r2, [r1, #12]
   25906:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2590a:	4313      	orrs	r3, r2
   2590c:	60cb      	str	r3, [r1, #12]
   2590e:	f3bf 8f4f 	dsb	sy
   25912:	bf00      	nop
   25914:	e7fd      	b.n	25912 <nrf_cc3xx_platform_abort+0x16>
   25916:	bf00      	nop
   25918:	e000ed00 	.word	0xe000ed00
   2591c:	05fa0004 	.word	0x05fa0004

00025920 <CC_PalAbort>:
   25920:	b410      	push	{r4}
   25922:	4b09      	ldr	r3, [pc, #36]	; (25948 <CC_PalAbort+0x28>)
   25924:	4909      	ldr	r1, [pc, #36]	; (2594c <CC_PalAbort+0x2c>)
   25926:	4c0a      	ldr	r4, [pc, #40]	; (25950 <CC_PalAbort+0x30>)
   25928:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   2592c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   25930:	6849      	ldr	r1, [r1, #4]
   25932:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   25936:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2593a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2593e:	2300      	movs	r3, #0
   25940:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   25944:	bc10      	pop	{r4}
   25946:	4708      	bx	r1
   25948:	5002b000 	.word	0x5002b000
   2594c:	200008ec 	.word	0x200008ec
   25950:	5002a000 	.word	0x5002a000

00025954 <nrf_cc3xx_platform_set_abort>:
   25954:	e9d0 1200 	ldrd	r1, r2, [r0]
   25958:	4b01      	ldr	r3, [pc, #4]	; (25960 <nrf_cc3xx_platform_set_abort+0xc>)
   2595a:	e9c3 1200 	strd	r1, r2, [r3]
   2595e:	4770      	bx	lr
   25960:	200008ec 	.word	0x200008ec

00025964 <nrf_cc3xx_platform_ctr_drbg_init>:
   25964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25968:	4c14      	ldr	r4, [pc, #80]	; (259bc <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   2596a:	4e15      	ldr	r6, [pc, #84]	; (259c0 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   2596c:	2800      	cmp	r0, #0
   2596e:	bf18      	it	ne
   25970:	4604      	movne	r4, r0
   25972:	b083      	sub	sp, #12
   25974:	6823      	ldr	r3, [r4, #0]
   25976:	42b3      	cmp	r3, r6
   25978:	d01c      	beq.n	259b4 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   2597a:	460d      	mov	r5, r1
   2597c:	4620      	mov	r0, r4
   2597e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   25982:	f104 0904 	add.w	r9, r4, #4
   25986:	4617      	mov	r7, r2
   25988:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   2598c:	f000 f8e8 	bl	25b60 <mbedtls_platform_zeroize>
   25990:	4648      	mov	r0, r9
   25992:	f000 fd1d 	bl	263d0 <cc_mbedtls_entropy_init>
   25996:	4640      	mov	r0, r8
   25998:	f000 fb4a 	bl	26030 <cc_mbedtls_ctr_drbg_init>
   2599c:	4909      	ldr	r1, [pc, #36]	; (259c4 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   2599e:	9700      	str	r7, [sp, #0]
   259a0:	462b      	mov	r3, r5
   259a2:	464a      	mov	r2, r9
   259a4:	4640      	mov	r0, r8
   259a6:	f000 fb59 	bl	2605c <cc_mbedtls_ctr_drbg_seed>
   259aa:	b900      	cbnz	r0, 259ae <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   259ac:	6026      	str	r6, [r4, #0]
   259ae:	b003      	add	sp, #12
   259b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   259b4:	2000      	movs	r0, #0
   259b6:	b003      	add	sp, #12
   259b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   259bc:	20003b28 	.word	0x20003b28
   259c0:	5ac9bca5 	.word	0x5ac9bca5
   259c4:	00026459 	.word	0x00026459

000259c8 <nrf_cc3xx_platform_ctr_drbg_get>:
   259c8:	b570      	push	{r4, r5, r6, lr}
   259ca:	4d0d      	ldr	r5, [pc, #52]	; (25a00 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   259cc:	2800      	cmp	r0, #0
   259ce:	bf18      	it	ne
   259d0:	4605      	movne	r5, r0
   259d2:	461e      	mov	r6, r3
   259d4:	6828      	ldr	r0, [r5, #0]
   259d6:	4b0b      	ldr	r3, [pc, #44]	; (25a04 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   259d8:	4298      	cmp	r0, r3
   259da:	b082      	sub	sp, #8
   259dc:	d10d      	bne.n	259fa <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   259de:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   259e2:	2500      	movs	r5, #0
   259e4:	9500      	str	r5, [sp, #0]
   259e6:	462b      	mov	r3, r5
   259e8:	4614      	mov	r4, r2
   259ea:	f000 fb85 	bl	260f8 <cc_mbedtls_ctr_drbg_random_with_add>
   259ee:	2800      	cmp	r0, #0
   259f0:	bf18      	it	ne
   259f2:	462c      	movne	r4, r5
   259f4:	6034      	str	r4, [r6, #0]
   259f6:	b002      	add	sp, #8
   259f8:	bd70      	pop	{r4, r5, r6, pc}
   259fa:	4803      	ldr	r0, [pc, #12]	; (25a08 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   259fc:	e7fb      	b.n	259f6 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   259fe:	bf00      	nop
   25a00:	20003b28 	.word	0x20003b28
   25a04:	5ac9bca5 	.word	0x5ac9bca5
   25a08:	ffff8fe8 	.word	0xffff8fe8

00025a0c <mutex_free>:
   25a0c:	b510      	push	{r4, lr}
   25a0e:	4604      	mov	r4, r0
   25a10:	b150      	cbz	r0, 25a28 <mutex_free+0x1c>
   25a12:	6863      	ldr	r3, [r4, #4]
   25a14:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   25a18:	d005      	beq.n	25a26 <mutex_free+0x1a>
   25a1a:	4a06      	ldr	r2, [pc, #24]	; (25a34 <mutex_free+0x28>)
   25a1c:	4293      	cmp	r3, r2
   25a1e:	d002      	beq.n	25a26 <mutex_free+0x1a>
   25a20:	2300      	movs	r3, #0
   25a22:	6023      	str	r3, [r4, #0]
   25a24:	6062      	str	r2, [r4, #4]
   25a26:	bd10      	pop	{r4, pc}
   25a28:	4b03      	ldr	r3, [pc, #12]	; (25a38 <mutex_free+0x2c>)
   25a2a:	4804      	ldr	r0, [pc, #16]	; (25a3c <mutex_free+0x30>)
   25a2c:	685b      	ldr	r3, [r3, #4]
   25a2e:	4798      	blx	r3
   25a30:	e7ef      	b.n	25a12 <mutex_free+0x6>
   25a32:	bf00      	nop
   25a34:	a95c5f2c 	.word	0xa95c5f2c
   25a38:	200008ec 	.word	0x200008ec
   25a3c:	00033ef8 	.word	0x00033ef8

00025a40 <mutex_lock>:
   25a40:	b1c8      	cbz	r0, 25a76 <mutex_lock+0x36>
   25a42:	6843      	ldr	r3, [r0, #4]
   25a44:	4a0d      	ldr	r2, [pc, #52]	; (25a7c <mutex_lock+0x3c>)
   25a46:	4293      	cmp	r3, r2
   25a48:	d013      	beq.n	25a72 <mutex_lock+0x32>
   25a4a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   25a4e:	d00e      	beq.n	25a6e <mutex_lock+0x2e>
   25a50:	2301      	movs	r3, #1
   25a52:	e850 2f00 	ldrex	r2, [r0]
   25a56:	4619      	mov	r1, r3
   25a58:	e840 1c00 	strex	ip, r1, [r0]
   25a5c:	f09c 0f00 	teq	ip, #0
   25a60:	d1f7      	bne.n	25a52 <mutex_lock+0x12>
   25a62:	2a01      	cmp	r2, #1
   25a64:	d0f5      	beq.n	25a52 <mutex_lock+0x12>
   25a66:	f3bf 8f5f 	dmb	sy
   25a6a:	2000      	movs	r0, #0
   25a6c:	4770      	bx	lr
   25a6e:	4804      	ldr	r0, [pc, #16]	; (25a80 <mutex_lock+0x40>)
   25a70:	4770      	bx	lr
   25a72:	4804      	ldr	r0, [pc, #16]	; (25a84 <mutex_lock+0x44>)
   25a74:	4770      	bx	lr
   25a76:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25a7a:	4770      	bx	lr
   25a7c:	a95c5f2c 	.word	0xa95c5f2c
   25a80:	ffff8fe9 	.word	0xffff8fe9
   25a84:	ffff8fea 	.word	0xffff8fea

00025a88 <mutex_unlock>:
   25a88:	b180      	cbz	r0, 25aac <mutex_unlock+0x24>
   25a8a:	6843      	ldr	r3, [r0, #4]
   25a8c:	4a09      	ldr	r2, [pc, #36]	; (25ab4 <mutex_unlock+0x2c>)
   25a8e:	4293      	cmp	r3, r2
   25a90:	d00a      	beq.n	25aa8 <mutex_unlock+0x20>
   25a92:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   25a96:	d005      	beq.n	25aa4 <mutex_unlock+0x1c>
   25a98:	f3bf 8f5f 	dmb	sy
   25a9c:	2300      	movs	r3, #0
   25a9e:	6003      	str	r3, [r0, #0]
   25aa0:	4618      	mov	r0, r3
   25aa2:	4770      	bx	lr
   25aa4:	4804      	ldr	r0, [pc, #16]	; (25ab8 <mutex_unlock+0x30>)
   25aa6:	4770      	bx	lr
   25aa8:	4804      	ldr	r0, [pc, #16]	; (25abc <mutex_unlock+0x34>)
   25aaa:	4770      	bx	lr
   25aac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25ab0:	4770      	bx	lr
   25ab2:	bf00      	nop
   25ab4:	a95c5f2c 	.word	0xa95c5f2c
   25ab8:	ffff8fe9 	.word	0xffff8fe9
   25abc:	ffff8fea 	.word	0xffff8fea

00025ac0 <mutex_init>:
   25ac0:	b510      	push	{r4, lr}
   25ac2:	4604      	mov	r4, r0
   25ac4:	b120      	cbz	r0, 25ad0 <mutex_init+0x10>
   25ac6:	4b04      	ldr	r3, [pc, #16]	; (25ad8 <mutex_init+0x18>)
   25ac8:	6063      	str	r3, [r4, #4]
   25aca:	2200      	movs	r2, #0
   25acc:	6022      	str	r2, [r4, #0]
   25ace:	bd10      	pop	{r4, pc}
   25ad0:	4802      	ldr	r0, [pc, #8]	; (25adc <mutex_init+0x1c>)
   25ad2:	f7ff ff25 	bl	25920 <CC_PalAbort>
   25ad6:	e7f6      	b.n	25ac6 <mutex_init+0x6>
   25ad8:	3a00003a 	.word	0x3a00003a
   25adc:	00033f20 	.word	0x00033f20

00025ae0 <nrf_cc3xx_platform_set_mutexes>:
   25ae0:	b570      	push	{r4, r5, r6, lr}
   25ae2:	e9d0 2300 	ldrd	r2, r3, [r0]
   25ae6:	4c15      	ldr	r4, [pc, #84]	; (25b3c <nrf_cc3xx_platform_set_mutexes+0x5c>)
   25ae8:	4d15      	ldr	r5, [pc, #84]	; (25b40 <nrf_cc3xx_platform_set_mutexes+0x60>)
   25aea:	6063      	str	r3, [r4, #4]
   25aec:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   25af0:	e9c4 3002 	strd	r3, r0, [r4, #8]
   25af4:	6022      	str	r2, [r4, #0]
   25af6:	4b13      	ldr	r3, [pc, #76]	; (25b44 <nrf_cc3xx_platform_set_mutexes+0x64>)
   25af8:	6808      	ldr	r0, [r1, #0]
   25afa:	6018      	str	r0, [r3, #0]
   25afc:	6848      	ldr	r0, [r1, #4]
   25afe:	6058      	str	r0, [r3, #4]
   25b00:	6888      	ldr	r0, [r1, #8]
   25b02:	6098      	str	r0, [r3, #8]
   25b04:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   25b08:	60d8      	str	r0, [r3, #12]
   25b0a:	6119      	str	r1, [r3, #16]
   25b0c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   25b10:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   25b14:	d010      	beq.n	25b38 <nrf_cc3xx_platform_set_mutexes+0x58>
   25b16:	490c      	ldr	r1, [pc, #48]	; (25b48 <nrf_cc3xx_platform_set_mutexes+0x68>)
   25b18:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   25b1c:	2300      	movs	r3, #0
   25b1e:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   25b22:	f505 708a 	add.w	r0, r5, #276	; 0x114
   25b26:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   25b2a:	4790      	blx	r2
   25b2c:	6823      	ldr	r3, [r4, #0]
   25b2e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   25b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25b36:	4718      	bx	r3
   25b38:	bd70      	pop	{r4, r5, r6, pc}
   25b3a:	bf00      	nop
   25b3c:	200008fc 	.word	0x200008fc
   25b40:	20003b28 	.word	0x20003b28
   25b44:	2000090c 	.word	0x2000090c
   25b48:	a95c5f2c 	.word	0xa95c5f2c

00025b4c <mbedtls_zeroize_internal>:
   25b4c:	b138      	cbz	r0, 25b5e <mbedtls_zeroize_internal+0x12>
   25b4e:	b131      	cbz	r1, 25b5e <mbedtls_zeroize_internal+0x12>
   25b50:	4401      	add	r1, r0
   25b52:	2200      	movs	r2, #0
   25b54:	4603      	mov	r3, r0
   25b56:	3001      	adds	r0, #1
   25b58:	4281      	cmp	r1, r0
   25b5a:	701a      	strb	r2, [r3, #0]
   25b5c:	d1fa      	bne.n	25b54 <mbedtls_zeroize_internal+0x8>
   25b5e:	4770      	bx	lr

00025b60 <mbedtls_platform_zeroize>:
   25b60:	b138      	cbz	r0, 25b72 <mbedtls_platform_zeroize+0x12>
   25b62:	b131      	cbz	r1, 25b72 <mbedtls_platform_zeroize+0x12>
   25b64:	4401      	add	r1, r0
   25b66:	2200      	movs	r2, #0
   25b68:	4603      	mov	r3, r0
   25b6a:	3001      	adds	r0, #1
   25b6c:	4288      	cmp	r0, r1
   25b6e:	701a      	strb	r2, [r3, #0]
   25b70:	d1fa      	bne.n	25b68 <mbedtls_platform_zeroize+0x8>
   25b72:	4770      	bx	lr

00025b74 <block_cipher_df>:
   25b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b78:	b0b7      	sub	sp, #220	; 0xdc
   25b7a:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   25b7e:	9005      	str	r0, [sp, #20]
   25b80:	f200 8147 	bhi.w	25e12 <block_cipher_df+0x29e>
   25b84:	4614      	mov	r4, r2
   25b86:	460d      	mov	r5, r1
   25b88:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   25b8c:	2100      	movs	r1, #0
   25b8e:	48a2      	ldr	r0, [pc, #648]	; (25e18 <block_cipher_df+0x2a4>)
   25b90:	f004 f92b 	bl	29dea <memset>
   25b94:	a819      	add	r0, sp, #100	; 0x64
   25b96:	f001 f9cf 	bl	26f38 <cc_mbedtls_aes_init>
   25b9a:	489f      	ldr	r0, [pc, #636]	; (25e18 <block_cipher_df+0x2a4>)
   25b9c:	2300      	movs	r3, #0
   25b9e:	8203      	strh	r3, [r0, #16]
   25ba0:	ba63      	rev16	r3, r4
   25ba2:	8243      	strh	r3, [r0, #18]
   25ba4:	2320      	movs	r3, #32
   25ba6:	4629      	mov	r1, r5
   25ba8:	75c3      	strb	r3, [r0, #23]
   25baa:	4605      	mov	r5, r0
   25bac:	4622      	mov	r2, r4
   25bae:	3018      	adds	r0, #24
   25bb0:	f004 f8ec 	bl	29d8c <memcpy>
   25bb4:	462b      	mov	r3, r5
   25bb6:	4423      	add	r3, r4
   25bb8:	2280      	movs	r2, #128	; 0x80
   25bba:	761a      	strb	r2, [r3, #24]
   25bbc:	4b97      	ldr	r3, [pc, #604]	; (25e1c <block_cipher_df+0x2a8>)
   25bbe:	930d      	str	r3, [sp, #52]	; 0x34
   25bc0:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   25bc4:	930e      	str	r3, [sp, #56]	; 0x38
   25bc6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   25bca:	930f      	str	r3, [sp, #60]	; 0x3c
   25bcc:	a90d      	add	r1, sp, #52	; 0x34
   25bce:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   25bd2:	a819      	add	r0, sp, #100	; 0x64
   25bd4:	9310      	str	r3, [sp, #64]	; 0x40
   25bd6:	f001 f9c5 	bl	26f64 <cc_mbedtls_aes_setkey_enc>
   25bda:	4605      	mov	r5, r0
   25bdc:	2800      	cmp	r0, #0
   25bde:	f040 80f4 	bne.w	25dca <block_cipher_df+0x256>
   25be2:	f104 0319 	add.w	r3, r4, #25
   25be6:	9306      	str	r3, [sp, #24]
   25be8:	f10d 0820 	add.w	r8, sp, #32
   25bec:	ab11      	add	r3, sp, #68	; 0x44
   25bee:	9304      	str	r3, [sp, #16]
   25bf0:	9307      	str	r3, [sp, #28]
   25bf2:	46c1      	mov	r9, r8
   25bf4:	2210      	movs	r2, #16
   25bf6:	2100      	movs	r1, #0
   25bf8:	4648      	mov	r0, r9
   25bfa:	f004 f8f6 	bl	29dea <memset>
   25bfe:	f8df a220 	ldr.w	sl, [pc, #544]	; 25e20 <block_cipher_df+0x2ac>
   25c02:	9b06      	ldr	r3, [sp, #24]
   25c04:	9300      	str	r3, [sp, #0]
   25c06:	f8cd 900c 	str.w	r9, [sp, #12]
   25c0a:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   25c0e:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   25c12:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   25c16:	f89d 5020 	ldrb.w	r5, [sp, #32]
   25c1a:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   25c1e:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   25c22:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   25c26:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   25c2a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   25c2e:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   25c32:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   25c36:	406a      	eors	r2, r5
   25c38:	ea8e 0e00 	eor.w	lr, lr, r0
   25c3c:	9d00      	ldr	r5, [sp, #0]
   25c3e:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   25c42:	9202      	str	r2, [sp, #8]
   25c44:	ea8c 0c03 	eor.w	ip, ip, r3
   25c48:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   25c4c:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   25c50:	2d10      	cmp	r5, #16
   25c52:	ea80 0003 	eor.w	r0, r0, r3
   25c56:	462b      	mov	r3, r5
   25c58:	bf8c      	ite	hi
   25c5a:	3b10      	subhi	r3, #16
   25c5c:	1b6b      	subls	r3, r5, r5
   25c5e:	9300      	str	r3, [sp, #0]
   25c60:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   25c64:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   25c68:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   25c6c:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   25c70:	4061      	eors	r1, r4
   25c72:	405f      	eors	r7, r3
   25c74:	2400      	movs	r4, #0
   25c76:	406a      	eors	r2, r5
   25c78:	ea8b 0b06 	eor.w	fp, fp, r6
   25c7c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   25c80:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   25c84:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   25c88:	9601      	str	r6, [sp, #4]
   25c8a:	4626      	mov	r6, r4
   25c8c:	406b      	eors	r3, r5
   25c8e:	f36b 0607 	bfi	r6, fp, #0, #8
   25c92:	4625      	mov	r5, r4
   25c94:	f367 260f 	bfi	r6, r7, #8, #8
   25c98:	462f      	mov	r7, r5
   25c9a:	f361 0707 	bfi	r7, r1, #0, #8
   25c9e:	9902      	ldr	r1, [sp, #8]
   25ca0:	f361 0507 	bfi	r5, r1, #0, #8
   25ca4:	f362 250f 	bfi	r5, r2, #8, #8
   25ca8:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   25cac:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   25cb0:	f363 270f 	bfi	r7, r3, #8, #8
   25cb4:	ea82 0909 	eor.w	r9, r2, r9
   25cb8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   25cbc:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   25cc0:	ea83 0808 	eor.w	r8, r3, r8
   25cc4:	404a      	eors	r2, r1
   25cc6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   25cca:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   25cce:	f36e 0407 	bfi	r4, lr, #0, #8
   25cd2:	404b      	eors	r3, r1
   25cd4:	f368 4717 	bfi	r7, r8, #16, #8
   25cd8:	f36c 240f 	bfi	r4, ip, #8, #8
   25cdc:	f363 671f 	bfi	r7, r3, #24, #8
   25ce0:	9b03      	ldr	r3, [sp, #12]
   25ce2:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   25ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
   25cea:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   25cee:	ea8c 0c0e 	eor.w	ip, ip, lr
   25cf2:	f36c 4617 	bfi	r6, ip, #16, #8
   25cf6:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   25cfa:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   25cfe:	ea8c 0c08 	eor.w	ip, ip, r8
   25d02:	f36c 661f 	bfi	r6, ip, #24, #8
   25d06:	f369 4517 	bfi	r5, r9, #16, #8
   25d0a:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   25d0e:	960b      	str	r6, [sp, #44]	; 0x2c
   25d10:	f362 651f 	bfi	r5, r2, #24, #8
   25d14:	f360 4417 	bfi	r4, r0, #16, #8
   25d18:	9508      	str	r5, [sp, #32]
   25d1a:	ea8c 050e 	eor.w	r5, ip, lr
   25d1e:	f365 641f 	bfi	r4, r5, #24, #8
   25d22:	461a      	mov	r2, r3
   25d24:	2101      	movs	r1, #1
   25d26:	a819      	add	r0, sp, #100	; 0x64
   25d28:	f10a 0a10 	add.w	sl, sl, #16
   25d2c:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   25d30:	f001 f932 	bl	26f98 <cc_mbedtls_aes_crypt_ecb>
   25d34:	2800      	cmp	r0, #0
   25d36:	d168      	bne.n	25e0a <block_cipher_df+0x296>
   25d38:	9b00      	ldr	r3, [sp, #0]
   25d3a:	2b00      	cmp	r3, #0
   25d3c:	f47f af65 	bne.w	25c0a <block_cipher_df+0x96>
   25d40:	9c07      	ldr	r4, [sp, #28]
   25d42:	f8dd 900c 	ldr.w	r9, [sp, #12]
   25d46:	4620      	mov	r0, r4
   25d48:	2210      	movs	r2, #16
   25d4a:	3410      	adds	r4, #16
   25d4c:	4649      	mov	r1, r9
   25d4e:	9407      	str	r4, [sp, #28]
   25d50:	f004 f81c 	bl	29d8c <memcpy>
   25d54:	4a30      	ldr	r2, [pc, #192]	; (25e18 <block_cipher_df+0x2a4>)
   25d56:	78d3      	ldrb	r3, [r2, #3]
   25d58:	3301      	adds	r3, #1
   25d5a:	70d3      	strb	r3, [r2, #3]
   25d5c:	ab19      	add	r3, sp, #100	; 0x64
   25d5e:	429c      	cmp	r4, r3
   25d60:	f47f af48 	bne.w	25bf4 <block_cipher_df+0x80>
   25d64:	9904      	ldr	r1, [sp, #16]
   25d66:	2280      	movs	r2, #128	; 0x80
   25d68:	4618      	mov	r0, r3
   25d6a:	f001 f8fb 	bl	26f64 <cc_mbedtls_aes_setkey_enc>
   25d6e:	46c8      	mov	r8, r9
   25d70:	4605      	mov	r5, r0
   25d72:	bb70      	cbnz	r0, 25dd2 <block_cipher_df+0x25e>
   25d74:	9c05      	ldr	r4, [sp, #20]
   25d76:	f104 0620 	add.w	r6, r4, #32
   25d7a:	ab15      	add	r3, sp, #84	; 0x54
   25d7c:	461a      	mov	r2, r3
   25d7e:	2101      	movs	r1, #1
   25d80:	a819      	add	r0, sp, #100	; 0x64
   25d82:	f001 f909 	bl	26f98 <cc_mbedtls_aes_crypt_ecb>
   25d86:	2210      	movs	r2, #16
   25d88:	4605      	mov	r5, r0
   25d8a:	bb10      	cbnz	r0, 25dd2 <block_cipher_df+0x25e>
   25d8c:	4620      	mov	r0, r4
   25d8e:	a915      	add	r1, sp, #84	; 0x54
   25d90:	3410      	adds	r4, #16
   25d92:	f003 fffb 	bl	29d8c <memcpy>
   25d96:	42b4      	cmp	r4, r6
   25d98:	d1ef      	bne.n	25d7a <block_cipher_df+0x206>
   25d9a:	a819      	add	r0, sp, #100	; 0x64
   25d9c:	f001 f8dc 	bl	26f58 <cc_mbedtls_aes_free>
   25da0:	481d      	ldr	r0, [pc, #116]	; (25e18 <block_cipher_df+0x2a4>)
   25da2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   25da6:	f7ff fedb 	bl	25b60 <mbedtls_platform_zeroize>
   25daa:	9804      	ldr	r0, [sp, #16]
   25dac:	2120      	movs	r1, #32
   25dae:	f7ff fed7 	bl	25b60 <mbedtls_platform_zeroize>
   25db2:	a80d      	add	r0, sp, #52	; 0x34
   25db4:	2110      	movs	r1, #16
   25db6:	f7ff fed3 	bl	25b60 <mbedtls_platform_zeroize>
   25dba:	4640      	mov	r0, r8
   25dbc:	2110      	movs	r1, #16
   25dbe:	f7ff fecf 	bl	25b60 <mbedtls_platform_zeroize>
   25dc2:	4628      	mov	r0, r5
   25dc4:	b037      	add	sp, #220	; 0xdc
   25dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25dca:	ab11      	add	r3, sp, #68	; 0x44
   25dcc:	9304      	str	r3, [sp, #16]
   25dce:	f10d 0820 	add.w	r8, sp, #32
   25dd2:	a819      	add	r0, sp, #100	; 0x64
   25dd4:	f001 f8c0 	bl	26f58 <cc_mbedtls_aes_free>
   25dd8:	480f      	ldr	r0, [pc, #60]	; (25e18 <block_cipher_df+0x2a4>)
   25dda:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   25dde:	f7ff febf 	bl	25b60 <mbedtls_platform_zeroize>
   25de2:	9804      	ldr	r0, [sp, #16]
   25de4:	2120      	movs	r1, #32
   25de6:	f7ff febb 	bl	25b60 <mbedtls_platform_zeroize>
   25dea:	a80d      	add	r0, sp, #52	; 0x34
   25dec:	2110      	movs	r1, #16
   25dee:	f7ff feb7 	bl	25b60 <mbedtls_platform_zeroize>
   25df2:	4640      	mov	r0, r8
   25df4:	2110      	movs	r1, #16
   25df6:	f7ff feb3 	bl	25b60 <mbedtls_platform_zeroize>
   25dfa:	9805      	ldr	r0, [sp, #20]
   25dfc:	2120      	movs	r1, #32
   25dfe:	f7ff feaf 	bl	25b60 <mbedtls_platform_zeroize>
   25e02:	4628      	mov	r0, r5
   25e04:	b037      	add	sp, #220	; 0xdc
   25e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e0a:	f8dd 800c 	ldr.w	r8, [sp, #12]
   25e0e:	4605      	mov	r5, r0
   25e10:	e7df      	b.n	25dd2 <block_cipher_df+0x25e>
   25e12:	f06f 0537 	mvn.w	r5, #55	; 0x37
   25e16:	e7f4      	b.n	25e02 <block_cipher_df+0x28e>
   25e18:	20003cf8 	.word	0x20003cf8
   25e1c:	03020100 	.word	0x03020100
   25e20:	20003d08 	.word	0x20003d08

00025e24 <ctr_drbg_update_internal>:
   25e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e28:	b088      	sub	sp, #32
   25e2a:	4604      	mov	r4, r0
   25e2c:	460d      	mov	r5, r1
   25e2e:	2220      	movs	r2, #32
   25e30:	2100      	movs	r1, #0
   25e32:	4668      	mov	r0, sp
   25e34:	f003 ffd9 	bl	29dea <memset>
   25e38:	f104 0620 	add.w	r6, r4, #32
   25e3c:	466f      	mov	r7, sp
   25e3e:	7be2      	ldrb	r2, [r4, #15]
   25e40:	3201      	adds	r2, #1
   25e42:	b2d2      	uxtb	r2, r2
   25e44:	73e2      	strb	r2, [r4, #15]
   25e46:	2a00      	cmp	r2, #0
   25e48:	d14d      	bne.n	25ee6 <ctr_drbg_update_internal+0xc2>
   25e4a:	7ba2      	ldrb	r2, [r4, #14]
   25e4c:	3201      	adds	r2, #1
   25e4e:	b2d2      	uxtb	r2, r2
   25e50:	73a2      	strb	r2, [r4, #14]
   25e52:	2a00      	cmp	r2, #0
   25e54:	d147      	bne.n	25ee6 <ctr_drbg_update_internal+0xc2>
   25e56:	7b63      	ldrb	r3, [r4, #13]
   25e58:	3301      	adds	r3, #1
   25e5a:	b2db      	uxtb	r3, r3
   25e5c:	7363      	strb	r3, [r4, #13]
   25e5e:	2b00      	cmp	r3, #0
   25e60:	d141      	bne.n	25ee6 <ctr_drbg_update_internal+0xc2>
   25e62:	7b23      	ldrb	r3, [r4, #12]
   25e64:	3301      	adds	r3, #1
   25e66:	b2db      	uxtb	r3, r3
   25e68:	7323      	strb	r3, [r4, #12]
   25e6a:	2b00      	cmp	r3, #0
   25e6c:	d13b      	bne.n	25ee6 <ctr_drbg_update_internal+0xc2>
   25e6e:	7ae3      	ldrb	r3, [r4, #11]
   25e70:	3301      	adds	r3, #1
   25e72:	b2db      	uxtb	r3, r3
   25e74:	72e3      	strb	r3, [r4, #11]
   25e76:	2b00      	cmp	r3, #0
   25e78:	d135      	bne.n	25ee6 <ctr_drbg_update_internal+0xc2>
   25e7a:	7aa3      	ldrb	r3, [r4, #10]
   25e7c:	3301      	adds	r3, #1
   25e7e:	b2db      	uxtb	r3, r3
   25e80:	72a3      	strb	r3, [r4, #10]
   25e82:	2b00      	cmp	r3, #0
   25e84:	d12f      	bne.n	25ee6 <ctr_drbg_update_internal+0xc2>
   25e86:	7a63      	ldrb	r3, [r4, #9]
   25e88:	3301      	adds	r3, #1
   25e8a:	b2db      	uxtb	r3, r3
   25e8c:	7263      	strb	r3, [r4, #9]
   25e8e:	bb53      	cbnz	r3, 25ee6 <ctr_drbg_update_internal+0xc2>
   25e90:	7a23      	ldrb	r3, [r4, #8]
   25e92:	3301      	adds	r3, #1
   25e94:	b2db      	uxtb	r3, r3
   25e96:	7223      	strb	r3, [r4, #8]
   25e98:	bb2b      	cbnz	r3, 25ee6 <ctr_drbg_update_internal+0xc2>
   25e9a:	79e3      	ldrb	r3, [r4, #7]
   25e9c:	3301      	adds	r3, #1
   25e9e:	b2db      	uxtb	r3, r3
   25ea0:	71e3      	strb	r3, [r4, #7]
   25ea2:	bb03      	cbnz	r3, 25ee6 <ctr_drbg_update_internal+0xc2>
   25ea4:	79a3      	ldrb	r3, [r4, #6]
   25ea6:	3301      	adds	r3, #1
   25ea8:	b2db      	uxtb	r3, r3
   25eaa:	71a3      	strb	r3, [r4, #6]
   25eac:	b9db      	cbnz	r3, 25ee6 <ctr_drbg_update_internal+0xc2>
   25eae:	7963      	ldrb	r3, [r4, #5]
   25eb0:	3301      	adds	r3, #1
   25eb2:	b2db      	uxtb	r3, r3
   25eb4:	7163      	strb	r3, [r4, #5]
   25eb6:	b9b3      	cbnz	r3, 25ee6 <ctr_drbg_update_internal+0xc2>
   25eb8:	7923      	ldrb	r3, [r4, #4]
   25eba:	3301      	adds	r3, #1
   25ebc:	b2db      	uxtb	r3, r3
   25ebe:	7123      	strb	r3, [r4, #4]
   25ec0:	b98b      	cbnz	r3, 25ee6 <ctr_drbg_update_internal+0xc2>
   25ec2:	78e3      	ldrb	r3, [r4, #3]
   25ec4:	3301      	adds	r3, #1
   25ec6:	b2db      	uxtb	r3, r3
   25ec8:	70e3      	strb	r3, [r4, #3]
   25eca:	b963      	cbnz	r3, 25ee6 <ctr_drbg_update_internal+0xc2>
   25ecc:	78a3      	ldrb	r3, [r4, #2]
   25ece:	3301      	adds	r3, #1
   25ed0:	b2db      	uxtb	r3, r3
   25ed2:	70a3      	strb	r3, [r4, #2]
   25ed4:	b93b      	cbnz	r3, 25ee6 <ctr_drbg_update_internal+0xc2>
   25ed6:	7863      	ldrb	r3, [r4, #1]
   25ed8:	3301      	adds	r3, #1
   25eda:	b2db      	uxtb	r3, r3
   25edc:	7063      	strb	r3, [r4, #1]
   25ede:	b913      	cbnz	r3, 25ee6 <ctr_drbg_update_internal+0xc2>
   25ee0:	7823      	ldrb	r3, [r4, #0]
   25ee2:	3301      	adds	r3, #1
   25ee4:	7023      	strb	r3, [r4, #0]
   25ee6:	463b      	mov	r3, r7
   25ee8:	4622      	mov	r2, r4
   25eea:	2101      	movs	r1, #1
   25eec:	4630      	mov	r0, r6
   25eee:	f001 f853 	bl	26f98 <cc_mbedtls_aes_crypt_ecb>
   25ef2:	4680      	mov	r8, r0
   25ef4:	bb50      	cbnz	r0, 25f4c <ctr_drbg_update_internal+0x128>
   25ef6:	3710      	adds	r7, #16
   25ef8:	ab08      	add	r3, sp, #32
   25efa:	429f      	cmp	r7, r3
   25efc:	d19f      	bne.n	25e3e <ctr_drbg_update_internal+0x1a>
   25efe:	9a00      	ldr	r2, [sp, #0]
   25f00:	682b      	ldr	r3, [r5, #0]
   25f02:	9906      	ldr	r1, [sp, #24]
   25f04:	4053      	eors	r3, r2
   25f06:	9300      	str	r3, [sp, #0]
   25f08:	9a01      	ldr	r2, [sp, #4]
   25f0a:	686b      	ldr	r3, [r5, #4]
   25f0c:	4053      	eors	r3, r2
   25f0e:	9301      	str	r3, [sp, #4]
   25f10:	9a02      	ldr	r2, [sp, #8]
   25f12:	68ab      	ldr	r3, [r5, #8]
   25f14:	4053      	eors	r3, r2
   25f16:	9302      	str	r3, [sp, #8]
   25f18:	9a03      	ldr	r2, [sp, #12]
   25f1a:	68eb      	ldr	r3, [r5, #12]
   25f1c:	4053      	eors	r3, r2
   25f1e:	9303      	str	r3, [sp, #12]
   25f20:	9a04      	ldr	r2, [sp, #16]
   25f22:	692b      	ldr	r3, [r5, #16]
   25f24:	4053      	eors	r3, r2
   25f26:	9304      	str	r3, [sp, #16]
   25f28:	9a05      	ldr	r2, [sp, #20]
   25f2a:	696b      	ldr	r3, [r5, #20]
   25f2c:	4053      	eors	r3, r2
   25f2e:	69aa      	ldr	r2, [r5, #24]
   25f30:	9305      	str	r3, [sp, #20]
   25f32:	404a      	eors	r2, r1
   25f34:	69eb      	ldr	r3, [r5, #28]
   25f36:	9206      	str	r2, [sp, #24]
   25f38:	9a07      	ldr	r2, [sp, #28]
   25f3a:	4630      	mov	r0, r6
   25f3c:	4053      	eors	r3, r2
   25f3e:	4669      	mov	r1, sp
   25f40:	2280      	movs	r2, #128	; 0x80
   25f42:	9307      	str	r3, [sp, #28]
   25f44:	f001 f80e 	bl	26f64 <cc_mbedtls_aes_setkey_enc>
   25f48:	4680      	mov	r8, r0
   25f4a:	b138      	cbz	r0, 25f5c <ctr_drbg_update_internal+0x138>
   25f4c:	4668      	mov	r0, sp
   25f4e:	2120      	movs	r1, #32
   25f50:	f7ff fe06 	bl	25b60 <mbedtls_platform_zeroize>
   25f54:	4640      	mov	r0, r8
   25f56:	b008      	add	sp, #32
   25f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25f5c:	2210      	movs	r2, #16
   25f5e:	eb0d 0102 	add.w	r1, sp, r2
   25f62:	4620      	mov	r0, r4
   25f64:	f003 ff12 	bl	29d8c <memcpy>
   25f68:	e7f0      	b.n	25f4c <ctr_drbg_update_internal+0x128>
   25f6a:	bf00      	nop

00025f6c <mbedtls_ctr_drbg_reseed_internal>:
   25f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25f70:	4604      	mov	r4, r0
   25f72:	6980      	ldr	r0, [r0, #24]
   25f74:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   25f78:	d852      	bhi.n	26020 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   25f7a:	461d      	mov	r5, r3
   25f7c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   25f80:	42ab      	cmp	r3, r5
   25f82:	d34d      	bcc.n	26020 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   25f84:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   25f88:	1a18      	subs	r0, r3, r0
   25f8a:	4290      	cmp	r0, r2
   25f8c:	4616      	mov	r6, r2
   25f8e:	d347      	bcc.n	26020 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   25f90:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2602c <mbedtls_ctr_drbg_reseed_internal+0xc0>
   25f94:	f44f 72c0 	mov.w	r2, #384	; 0x180
   25f98:	460f      	mov	r7, r1
   25f9a:	4648      	mov	r0, r9
   25f9c:	2100      	movs	r1, #0
   25f9e:	f003 ff24 	bl	29dea <memset>
   25fa2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   25fa6:	69a2      	ldr	r2, [r4, #24]
   25fa8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   25fac:	4649      	mov	r1, r9
   25fae:	4798      	blx	r3
   25fb0:	2800      	cmp	r0, #0
   25fb2:	d138      	bne.n	26026 <mbedtls_ctr_drbg_reseed_internal+0xba>
   25fb4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   25fb8:	b13d      	cbz	r5, 25fca <mbedtls_ctr_drbg_reseed_internal+0x5e>
   25fba:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   25fbe:	462a      	mov	r2, r5
   25fc0:	eb09 0108 	add.w	r1, r9, r8
   25fc4:	4798      	blx	r3
   25fc6:	bb70      	cbnz	r0, 26026 <mbedtls_ctr_drbg_reseed_internal+0xba>
   25fc8:	44a8      	add	r8, r5
   25fca:	b107      	cbz	r7, 25fce <mbedtls_ctr_drbg_reseed_internal+0x62>
   25fcc:	b9c6      	cbnz	r6, 26000 <mbedtls_ctr_drbg_reseed_internal+0x94>
   25fce:	4917      	ldr	r1, [pc, #92]	; (2602c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   25fd0:	4642      	mov	r2, r8
   25fd2:	4608      	mov	r0, r1
   25fd4:	f7ff fdce 	bl	25b74 <block_cipher_df>
   25fd8:	4605      	mov	r5, r0
   25fda:	b138      	cbz	r0, 25fec <mbedtls_ctr_drbg_reseed_internal+0x80>
   25fdc:	4813      	ldr	r0, [pc, #76]	; (2602c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   25fde:	f44f 71c0 	mov.w	r1, #384	; 0x180
   25fe2:	f7ff fdbd 	bl	25b60 <mbedtls_platform_zeroize>
   25fe6:	4628      	mov	r0, r5
   25fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25fec:	490f      	ldr	r1, [pc, #60]	; (2602c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   25fee:	4620      	mov	r0, r4
   25ff0:	f7ff ff18 	bl	25e24 <ctr_drbg_update_internal>
   25ff4:	4605      	mov	r5, r0
   25ff6:	2800      	cmp	r0, #0
   25ff8:	d1f0      	bne.n	25fdc <mbedtls_ctr_drbg_reseed_internal+0x70>
   25ffa:	2301      	movs	r3, #1
   25ffc:	6123      	str	r3, [r4, #16]
   25ffe:	e7ed      	b.n	25fdc <mbedtls_ctr_drbg_reseed_internal+0x70>
   26000:	eb09 0008 	add.w	r0, r9, r8
   26004:	4639      	mov	r1, r7
   26006:	4632      	mov	r2, r6
   26008:	f003 fec0 	bl	29d8c <memcpy>
   2600c:	4907      	ldr	r1, [pc, #28]	; (2602c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2600e:	44b0      	add	r8, r6
   26010:	4642      	mov	r2, r8
   26012:	4608      	mov	r0, r1
   26014:	f7ff fdae 	bl	25b74 <block_cipher_df>
   26018:	4605      	mov	r5, r0
   2601a:	2800      	cmp	r0, #0
   2601c:	d1de      	bne.n	25fdc <mbedtls_ctr_drbg_reseed_internal+0x70>
   2601e:	e7e5      	b.n	25fec <mbedtls_ctr_drbg_reseed_internal+0x80>
   26020:	f06f 0537 	mvn.w	r5, #55	; 0x37
   26024:	e7df      	b.n	25fe6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   26026:	f06f 0533 	mvn.w	r5, #51	; 0x33
   2602a:	e7dc      	b.n	25fe6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   2602c:	20003e98 	.word	0x20003e98

00026030 <cc_mbedtls_ctr_drbg_init>:
   26030:	b510      	push	{r4, lr}
   26032:	22a4      	movs	r2, #164	; 0xa4
   26034:	4604      	mov	r4, r0
   26036:	2100      	movs	r1, #0
   26038:	f003 fed7 	bl	29dea <memset>
   2603c:	4b06      	ldr	r3, [pc, #24]	; (26058 <cc_mbedtls_ctr_drbg_init+0x28>)
   2603e:	f04f 31ff 	mov.w	r1, #4294967295
   26042:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   26046:	6121      	str	r1, [r4, #16]
   26048:	61e2      	str	r2, [r4, #28]
   2604a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   2604e:	681b      	ldr	r3, [r3, #0]
   26050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26054:	4718      	bx	r3
   26056:	bf00      	nop
   26058:	20000950 	.word	0x20000950

0002605c <cc_mbedtls_ctr_drbg_seed>:
   2605c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26060:	b085      	sub	sp, #20
   26062:	4605      	mov	r5, r0
   26064:	460f      	mov	r7, r1
   26066:	4616      	mov	r6, r2
   26068:	2100      	movs	r1, #0
   2606a:	2210      	movs	r2, #16
   2606c:	4668      	mov	r0, sp
   2606e:	4699      	mov	r9, r3
   26070:	f003 febb 	bl	29dea <memset>
   26074:	4b1e      	ldr	r3, [pc, #120]	; (260f0 <cc_mbedtls_ctr_drbg_seed+0x94>)
   26076:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   2607a:	681b      	ldr	r3, [r3, #0]
   2607c:	4640      	mov	r0, r8
   2607e:	4798      	blx	r3
   26080:	b120      	cbz	r0, 2608c <cc_mbedtls_ctr_drbg_seed+0x30>
   26082:	4604      	mov	r4, r0
   26084:	4620      	mov	r0, r4
   26086:	b005      	add	sp, #20
   26088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2608c:	f105 0420 	add.w	r4, r5, #32
   26090:	4620      	mov	r0, r4
   26092:	f000 ff51 	bl	26f38 <cc_mbedtls_aes_init>
   26096:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   2609a:	69ae      	ldr	r6, [r5, #24]
   2609c:	692b      	ldr	r3, [r5, #16]
   2609e:	b9ee      	cbnz	r6, 260dc <cc_mbedtls_ctr_drbg_seed+0x80>
   260a0:	2220      	movs	r2, #32
   260a2:	2b00      	cmp	r3, #0
   260a4:	61aa      	str	r2, [r5, #24]
   260a6:	db20      	blt.n	260ea <cc_mbedtls_ctr_drbg_seed+0x8e>
   260a8:	461e      	mov	r6, r3
   260aa:	4620      	mov	r0, r4
   260ac:	4669      	mov	r1, sp
   260ae:	2280      	movs	r2, #128	; 0x80
   260b0:	f000 ff58 	bl	26f64 <cc_mbedtls_aes_setkey_enc>
   260b4:	4604      	mov	r4, r0
   260b6:	b930      	cbnz	r0, 260c6 <cc_mbedtls_ctr_drbg_seed+0x6a>
   260b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   260ba:	4633      	mov	r3, r6
   260bc:	4649      	mov	r1, r9
   260be:	4628      	mov	r0, r5
   260c0:	f7ff ff54 	bl	25f6c <mbedtls_ctr_drbg_reseed_internal>
   260c4:	4604      	mov	r4, r0
   260c6:	4b0b      	ldr	r3, [pc, #44]	; (260f4 <cc_mbedtls_ctr_drbg_seed+0x98>)
   260c8:	4640      	mov	r0, r8
   260ca:	681b      	ldr	r3, [r3, #0]
   260cc:	4798      	blx	r3
   260ce:	2800      	cmp	r0, #0
   260d0:	bf18      	it	ne
   260d2:	4604      	movne	r4, r0
   260d4:	4620      	mov	r0, r4
   260d6:	b005      	add	sp, #20
   260d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   260dc:	2b00      	cmp	r3, #0
   260de:	dae3      	bge.n	260a8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   260e0:	2e17      	cmp	r6, #23
   260e2:	d802      	bhi.n	260ea <cc_mbedtls_ctr_drbg_seed+0x8e>
   260e4:	3601      	adds	r6, #1
   260e6:	0876      	lsrs	r6, r6, #1
   260e8:	e7df      	b.n	260aa <cc_mbedtls_ctr_drbg_seed+0x4e>
   260ea:	2600      	movs	r6, #0
   260ec:	e7dd      	b.n	260aa <cc_mbedtls_ctr_drbg_seed+0x4e>
   260ee:	bf00      	nop
   260f0:	20000954 	.word	0x20000954
   260f4:	20000958 	.word	0x20000958

000260f8 <cc_mbedtls_ctr_drbg_random_with_add>:
   260f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   260fc:	b08d      	sub	sp, #52	; 0x34
   260fe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   26102:	9f16      	ldr	r7, [sp, #88]	; 0x58
   26104:	f200 80e3 	bhi.w	262ce <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   26108:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   2610c:	f200 80dc 	bhi.w	262c8 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   26110:	4604      	mov	r4, r0
   26112:	4615      	mov	r5, r2
   26114:	460e      	mov	r6, r1
   26116:	2220      	movs	r2, #32
   26118:	2100      	movs	r1, #0
   2611a:	a804      	add	r0, sp, #16
   2611c:	4698      	mov	r8, r3
   2611e:	f003 fe64 	bl	29dea <memset>
   26122:	4b6c      	ldr	r3, [pc, #432]	; (262d4 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   26124:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   26128:	681b      	ldr	r3, [r3, #0]
   2612a:	4648      	mov	r0, r9
   2612c:	4798      	blx	r3
   2612e:	4683      	mov	fp, r0
   26130:	2800      	cmp	r0, #0
   26132:	f040 8092 	bne.w	2625a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   26136:	6922      	ldr	r2, [r4, #16]
   26138:	69e3      	ldr	r3, [r4, #28]
   2613a:	429a      	cmp	r2, r3
   2613c:	f300 8091 	bgt.w	26262 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   26140:	6963      	ldr	r3, [r4, #20]
   26142:	2b00      	cmp	r3, #0
   26144:	f040 808d 	bne.w	26262 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   26148:	2f00      	cmp	r7, #0
   2614a:	f040 80a9 	bne.w	262a0 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   2614e:	f8df a188 	ldr.w	sl, [pc, #392]	; 262d8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   26152:	466f      	mov	r7, sp
   26154:	2d00      	cmp	r5, #0
   26156:	f000 8098 	beq.w	2628a <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   2615a:	f104 0820 	add.w	r8, r4, #32
   2615e:	466f      	mov	r7, sp
   26160:	e00e      	b.n	26180 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   26162:	2d10      	cmp	r5, #16
   26164:	46ab      	mov	fp, r5
   26166:	bf28      	it	cs
   26168:	f04f 0b10 	movcs.w	fp, #16
   2616c:	4630      	mov	r0, r6
   2616e:	465a      	mov	r2, fp
   26170:	4639      	mov	r1, r7
   26172:	f003 fe0b 	bl	29d8c <memcpy>
   26176:	ebb5 050b 	subs.w	r5, r5, fp
   2617a:	445e      	add	r6, fp
   2617c:	f000 8085 	beq.w	2628a <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   26180:	7be3      	ldrb	r3, [r4, #15]
   26182:	3301      	adds	r3, #1
   26184:	b2db      	uxtb	r3, r3
   26186:	73e3      	strb	r3, [r4, #15]
   26188:	2b00      	cmp	r3, #0
   2618a:	d14d      	bne.n	26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2618c:	7ba3      	ldrb	r3, [r4, #14]
   2618e:	3301      	adds	r3, #1
   26190:	b2db      	uxtb	r3, r3
   26192:	73a3      	strb	r3, [r4, #14]
   26194:	2b00      	cmp	r3, #0
   26196:	d147      	bne.n	26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26198:	7b63      	ldrb	r3, [r4, #13]
   2619a:	3301      	adds	r3, #1
   2619c:	b2db      	uxtb	r3, r3
   2619e:	7363      	strb	r3, [r4, #13]
   261a0:	2b00      	cmp	r3, #0
   261a2:	d141      	bne.n	26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   261a4:	7b23      	ldrb	r3, [r4, #12]
   261a6:	3301      	adds	r3, #1
   261a8:	b2db      	uxtb	r3, r3
   261aa:	7323      	strb	r3, [r4, #12]
   261ac:	2b00      	cmp	r3, #0
   261ae:	d13b      	bne.n	26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   261b0:	7ae3      	ldrb	r3, [r4, #11]
   261b2:	3301      	adds	r3, #1
   261b4:	b2db      	uxtb	r3, r3
   261b6:	72e3      	strb	r3, [r4, #11]
   261b8:	2b00      	cmp	r3, #0
   261ba:	d135      	bne.n	26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   261bc:	7aa3      	ldrb	r3, [r4, #10]
   261be:	3301      	adds	r3, #1
   261c0:	b2db      	uxtb	r3, r3
   261c2:	72a3      	strb	r3, [r4, #10]
   261c4:	2b00      	cmp	r3, #0
   261c6:	d12f      	bne.n	26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   261c8:	7a63      	ldrb	r3, [r4, #9]
   261ca:	3301      	adds	r3, #1
   261cc:	b2db      	uxtb	r3, r3
   261ce:	7263      	strb	r3, [r4, #9]
   261d0:	bb53      	cbnz	r3, 26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   261d2:	7a23      	ldrb	r3, [r4, #8]
   261d4:	3301      	adds	r3, #1
   261d6:	b2db      	uxtb	r3, r3
   261d8:	7223      	strb	r3, [r4, #8]
   261da:	bb2b      	cbnz	r3, 26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   261dc:	79e3      	ldrb	r3, [r4, #7]
   261de:	3301      	adds	r3, #1
   261e0:	b2db      	uxtb	r3, r3
   261e2:	71e3      	strb	r3, [r4, #7]
   261e4:	bb03      	cbnz	r3, 26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   261e6:	79a3      	ldrb	r3, [r4, #6]
   261e8:	3301      	adds	r3, #1
   261ea:	b2db      	uxtb	r3, r3
   261ec:	71a3      	strb	r3, [r4, #6]
   261ee:	b9db      	cbnz	r3, 26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   261f0:	7963      	ldrb	r3, [r4, #5]
   261f2:	3301      	adds	r3, #1
   261f4:	b2db      	uxtb	r3, r3
   261f6:	7163      	strb	r3, [r4, #5]
   261f8:	b9b3      	cbnz	r3, 26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   261fa:	7923      	ldrb	r3, [r4, #4]
   261fc:	3301      	adds	r3, #1
   261fe:	b2db      	uxtb	r3, r3
   26200:	7123      	strb	r3, [r4, #4]
   26202:	b98b      	cbnz	r3, 26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26204:	78e3      	ldrb	r3, [r4, #3]
   26206:	3301      	adds	r3, #1
   26208:	b2db      	uxtb	r3, r3
   2620a:	70e3      	strb	r3, [r4, #3]
   2620c:	b963      	cbnz	r3, 26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2620e:	78a3      	ldrb	r3, [r4, #2]
   26210:	3301      	adds	r3, #1
   26212:	b2db      	uxtb	r3, r3
   26214:	70a3      	strb	r3, [r4, #2]
   26216:	b93b      	cbnz	r3, 26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26218:	7863      	ldrb	r3, [r4, #1]
   2621a:	3301      	adds	r3, #1
   2621c:	b2db      	uxtb	r3, r3
   2621e:	7063      	strb	r3, [r4, #1]
   26220:	b913      	cbnz	r3, 26228 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26222:	7823      	ldrb	r3, [r4, #0]
   26224:	3301      	adds	r3, #1
   26226:	7023      	strb	r3, [r4, #0]
   26228:	463b      	mov	r3, r7
   2622a:	4622      	mov	r2, r4
   2622c:	2101      	movs	r1, #1
   2622e:	4640      	mov	r0, r8
   26230:	f000 feb2 	bl	26f98 <cc_mbedtls_aes_crypt_ecb>
   26234:	4683      	mov	fp, r0
   26236:	2800      	cmp	r0, #0
   26238:	d093      	beq.n	26162 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   2623a:	f8da 3000 	ldr.w	r3, [sl]
   2623e:	4648      	mov	r0, r9
   26240:	4798      	blx	r3
   26242:	2120      	movs	r1, #32
   26244:	4603      	mov	r3, r0
   26246:	a804      	add	r0, sp, #16
   26248:	2b00      	cmp	r3, #0
   2624a:	bf18      	it	ne
   2624c:	469b      	movne	fp, r3
   2624e:	f7ff fc87 	bl	25b60 <mbedtls_platform_zeroize>
   26252:	2110      	movs	r1, #16
   26254:	4638      	mov	r0, r7
   26256:	f7ff fc83 	bl	25b60 <mbedtls_platform_zeroize>
   2625a:	4658      	mov	r0, fp
   2625c:	b00d      	add	sp, #52	; 0x34
   2625e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26262:	463a      	mov	r2, r7
   26264:	4641      	mov	r1, r8
   26266:	2300      	movs	r3, #0
   26268:	4620      	mov	r0, r4
   2626a:	f7ff fe7f 	bl	25f6c <mbedtls_ctr_drbg_reseed_internal>
   2626e:	f8df a068 	ldr.w	sl, [pc, #104]	; 262d8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   26272:	2800      	cmp	r0, #0
   26274:	f43f af6d 	beq.w	26152 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   26278:	f8da 3000 	ldr.w	r3, [sl]
   2627c:	4648      	mov	r0, r9
   2627e:	4798      	blx	r3
   26280:	4683      	mov	fp, r0
   26282:	2800      	cmp	r0, #0
   26284:	f43f af65 	beq.w	26152 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   26288:	e7e7      	b.n	2625a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2628a:	a904      	add	r1, sp, #16
   2628c:	4620      	mov	r0, r4
   2628e:	f7ff fdc9 	bl	25e24 <ctr_drbg_update_internal>
   26292:	4683      	mov	fp, r0
   26294:	2800      	cmp	r0, #0
   26296:	d1d0      	bne.n	2623a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   26298:	6923      	ldr	r3, [r4, #16]
   2629a:	3301      	adds	r3, #1
   2629c:	6123      	str	r3, [r4, #16]
   2629e:	e7cc      	b.n	2623a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   262a0:	463a      	mov	r2, r7
   262a2:	4641      	mov	r1, r8
   262a4:	a804      	add	r0, sp, #16
   262a6:	f7ff fc65 	bl	25b74 <block_cipher_df>
   262aa:	4683      	mov	fp, r0
   262ac:	b118      	cbz	r0, 262b6 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   262ae:	f8df a028 	ldr.w	sl, [pc, #40]	; 262d8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   262b2:	466f      	mov	r7, sp
   262b4:	e7c1      	b.n	2623a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   262b6:	a904      	add	r1, sp, #16
   262b8:	4620      	mov	r0, r4
   262ba:	f7ff fdb3 	bl	25e24 <ctr_drbg_update_internal>
   262be:	4683      	mov	fp, r0
   262c0:	2800      	cmp	r0, #0
   262c2:	f43f af44 	beq.w	2614e <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   262c6:	e7f2      	b.n	262ae <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   262c8:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   262cc:	e7c5      	b.n	2625a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   262ce:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   262d2:	e7c2      	b.n	2625a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   262d4:	20000954 	.word	0x20000954
   262d8:	20000958 	.word	0x20000958

000262dc <entropy_update>:
   262dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   262e0:	2b20      	cmp	r3, #32
   262e2:	b08b      	sub	sp, #44	; 0x2c
   262e4:	461d      	mov	r5, r3
   262e6:	4606      	mov	r6, r0
   262e8:	4688      	mov	r8, r1
   262ea:	4691      	mov	r9, r2
   262ec:	d826      	bhi.n	2633c <entropy_update+0x60>
   262ee:	b2db      	uxtb	r3, r3
   262f0:	af02      	add	r7, sp, #8
   262f2:	f88d 8004 	strb.w	r8, [sp, #4]
   262f6:	46b0      	mov	r8, r6
   262f8:	f88d 3005 	strb.w	r3, [sp, #5]
   262fc:	f858 1b04 	ldr.w	r1, [r8], #4
   26300:	b921      	cbnz	r1, 2630c <entropy_update+0x30>
   26302:	4640      	mov	r0, r8
   26304:	f000 fe8c 	bl	27020 <cc_mbedtls_sha256_starts>
   26308:	4604      	mov	r4, r0
   2630a:	b940      	cbnz	r0, 2631e <entropy_update+0x42>
   2630c:	2301      	movs	r3, #1
   2630e:	6033      	str	r3, [r6, #0]
   26310:	2202      	movs	r2, #2
   26312:	a901      	add	r1, sp, #4
   26314:	4640      	mov	r0, r8
   26316:	f000 fe97 	bl	27048 <cc_mbedtls_sha256_update>
   2631a:	4604      	mov	r4, r0
   2631c:	b138      	cbz	r0, 2632e <entropy_update+0x52>
   2631e:	4638      	mov	r0, r7
   26320:	2120      	movs	r1, #32
   26322:	f7ff fc1d 	bl	25b60 <mbedtls_platform_zeroize>
   26326:	4620      	mov	r0, r4
   26328:	b00b      	add	sp, #44	; 0x2c
   2632a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2632e:	462a      	mov	r2, r5
   26330:	4649      	mov	r1, r9
   26332:	4640      	mov	r0, r8
   26334:	f000 fe88 	bl	27048 <cc_mbedtls_sha256_update>
   26338:	4604      	mov	r4, r0
   2633a:	e7f0      	b.n	2631e <entropy_update+0x42>
   2633c:	af02      	add	r7, sp, #8
   2633e:	4619      	mov	r1, r3
   26340:	4610      	mov	r0, r2
   26342:	2300      	movs	r3, #0
   26344:	463a      	mov	r2, r7
   26346:	f001 f807 	bl	27358 <cc_mbedtls_sha256>
   2634a:	4604      	mov	r4, r0
   2634c:	2800      	cmp	r0, #0
   2634e:	d1e6      	bne.n	2631e <entropy_update+0x42>
   26350:	2320      	movs	r3, #32
   26352:	46b9      	mov	r9, r7
   26354:	461d      	mov	r5, r3
   26356:	e7cc      	b.n	262f2 <entropy_update+0x16>

00026358 <entropy_gather_internal.part.0>:
   26358:	b5f0      	push	{r4, r5, r6, r7, lr}
   2635a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   2635e:	b0a7      	sub	sp, #156	; 0x9c
   26360:	2b00      	cmp	r3, #0
   26362:	bfd8      	it	le
   26364:	ae02      	addle	r6, sp, #8
   26366:	dd2c      	ble.n	263c2 <entropy_gather_internal.part.0+0x6a>
   26368:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   2636c:	4605      	mov	r5, r0
   2636e:	2300      	movs	r3, #0
   26370:	ae02      	add	r6, sp, #8
   26372:	9301      	str	r3, [sp, #4]
   26374:	f1a4 0701 	sub.w	r7, r4, #1
   26378:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   2637c:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   26380:	ab01      	add	r3, sp, #4
   26382:	2290      	movs	r2, #144	; 0x90
   26384:	4631      	mov	r1, r6
   26386:	47a0      	blx	r4
   26388:	fab7 f787 	clz	r7, r7
   2638c:	097f      	lsrs	r7, r7, #5
   2638e:	4604      	mov	r4, r0
   26390:	b910      	cbnz	r0, 26398 <entropy_gather_internal.part.0+0x40>
   26392:	9b01      	ldr	r3, [sp, #4]
   26394:	b93b      	cbnz	r3, 263a6 <entropy_gather_internal.part.0+0x4e>
   26396:	b1a7      	cbz	r7, 263c2 <entropy_gather_internal.part.0+0x6a>
   26398:	4630      	mov	r0, r6
   2639a:	2190      	movs	r1, #144	; 0x90
   2639c:	f7ff fbe0 	bl	25b60 <mbedtls_platform_zeroize>
   263a0:	4620      	mov	r0, r4
   263a2:	b027      	add	sp, #156	; 0x9c
   263a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   263a6:	4601      	mov	r1, r0
   263a8:	4632      	mov	r2, r6
   263aa:	4628      	mov	r0, r5
   263ac:	f7ff ff96 	bl	262dc <entropy_update>
   263b0:	b950      	cbnz	r0, 263c8 <entropy_gather_internal.part.0+0x70>
   263b2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   263b6:	9a01      	ldr	r2, [sp, #4]
   263b8:	4413      	add	r3, r2
   263ba:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   263be:	2f00      	cmp	r7, #0
   263c0:	d1ea      	bne.n	26398 <entropy_gather_internal.part.0+0x40>
   263c2:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   263c6:	e7e7      	b.n	26398 <entropy_gather_internal.part.0+0x40>
   263c8:	4604      	mov	r4, r0
   263ca:	4620      	mov	r0, r4
   263cc:	b027      	add	sp, #156	; 0x9c
   263ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000263d0 <cc_mbedtls_entropy_init>:
   263d0:	b570      	push	{r4, r5, r6, lr}
   263d2:	2500      	movs	r5, #0
   263d4:	4604      	mov	r4, r0
   263d6:	f504 7688 	add.w	r6, r4, #272	; 0x110
   263da:	2214      	movs	r2, #20
   263dc:	4629      	mov	r1, r5
   263de:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   263e2:	30fc      	adds	r0, #252	; 0xfc
   263e4:	f003 fd01 	bl	29dea <memset>
   263e8:	2208      	movs	r2, #8
   263ea:	4629      	mov	r1, r5
   263ec:	4630      	mov	r0, r6
   263ee:	f003 fcfc 	bl	29dea <memset>
   263f2:	4b15      	ldr	r3, [pc, #84]	; (26448 <cc_mbedtls_entropy_init+0x78>)
   263f4:	4630      	mov	r0, r6
   263f6:	681b      	ldr	r3, [r3, #0]
   263f8:	4798      	blx	r3
   263fa:	4620      	mov	r0, r4
   263fc:	f840 5b04 	str.w	r5, [r0], #4
   26400:	f000 fdf4 	bl	26fec <cc_mbedtls_sha256_init>
   26404:	4b11      	ldr	r3, [pc, #68]	; (2644c <cc_mbedtls_entropy_init+0x7c>)
   26406:	4630      	mov	r0, r6
   26408:	681b      	ldr	r3, [r3, #0]
   2640a:	4798      	blx	r3
   2640c:	b9d8      	cbnz	r0, 26446 <cc_mbedtls_entropy_init+0x76>
   2640e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   26412:	42ab      	cmp	r3, r5
   26414:	dc11      	bgt.n	2643a <cc_mbedtls_entropy_init+0x6a>
   26416:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2641a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   2641e:	2120      	movs	r1, #32
   26420:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   26424:	2101      	movs	r1, #1
   26426:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   2642a:	3301      	adds	r3, #1
   2642c:	4908      	ldr	r1, [pc, #32]	; (26450 <cc_mbedtls_entropy_init+0x80>)
   2642e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   26432:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   26436:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   2643a:	4b06      	ldr	r3, [pc, #24]	; (26454 <cc_mbedtls_entropy_init+0x84>)
   2643c:	4630      	mov	r0, r6
   2643e:	681b      	ldr	r3, [r3, #0]
   26440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26444:	4718      	bx	r3
   26446:	bd70      	pop	{r4, r5, r6, pc}
   26448:	20000950 	.word	0x20000950
   2644c:	20000954 	.word	0x20000954
   26450:	00026e3d 	.word	0x00026e3d
   26454:	20000958 	.word	0x20000958

00026458 <cc_mbedtls_entropy_func>:
   26458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2645c:	2a20      	cmp	r2, #32
   2645e:	b088      	sub	sp, #32
   26460:	d876      	bhi.n	26550 <cc_mbedtls_entropy_func+0xf8>
   26462:	4b3d      	ldr	r3, [pc, #244]	; (26558 <cc_mbedtls_entropy_func+0x100>)
   26464:	f500 7988 	add.w	r9, r0, #272	; 0x110
   26468:	681b      	ldr	r3, [r3, #0]
   2646a:	4604      	mov	r4, r0
   2646c:	4648      	mov	r0, r9
   2646e:	4617      	mov	r7, r2
   26470:	4688      	mov	r8, r1
   26472:	4798      	blx	r3
   26474:	4605      	mov	r5, r0
   26476:	bba0      	cbnz	r0, 264e2 <cc_mbedtls_entropy_func+0x8a>
   26478:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2647c:	f240 1601 	movw	r6, #257	; 0x101
   26480:	e001      	b.n	26486 <cc_mbedtls_entropy_func+0x2e>
   26482:	3e01      	subs	r6, #1
   26484:	d060      	beq.n	26548 <cc_mbedtls_entropy_func+0xf0>
   26486:	4620      	mov	r0, r4
   26488:	b37b      	cbz	r3, 264ea <cc_mbedtls_entropy_func+0x92>
   2648a:	f7ff ff65 	bl	26358 <entropy_gather_internal.part.0>
   2648e:	4605      	mov	r5, r0
   26490:	bb68      	cbnz	r0, 264ee <cc_mbedtls_entropy_func+0x96>
   26492:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   26496:	2b00      	cmp	r3, #0
   26498:	ddf3      	ble.n	26482 <cc_mbedtls_entropy_func+0x2a>
   2649a:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   2649e:	4290      	cmp	r0, r2
   264a0:	d3ef      	bcc.n	26482 <cc_mbedtls_entropy_func+0x2a>
   264a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   264a6:	2a01      	cmp	r2, #1
   264a8:	d1eb      	bne.n	26482 <cc_mbedtls_entropy_func+0x2a>
   264aa:	281f      	cmp	r0, #31
   264ac:	d9e9      	bls.n	26482 <cc_mbedtls_entropy_func+0x2a>
   264ae:	466e      	mov	r6, sp
   264b0:	4629      	mov	r1, r5
   264b2:	2220      	movs	r2, #32
   264b4:	4630      	mov	r0, r6
   264b6:	f104 0a04 	add.w	sl, r4, #4
   264ba:	f003 fc96 	bl	29dea <memset>
   264be:	4631      	mov	r1, r6
   264c0:	4650      	mov	r0, sl
   264c2:	f000 fdeb 	bl	2709c <cc_mbedtls_sha256_finish>
   264c6:	4605      	mov	r5, r0
   264c8:	b198      	cbz	r0, 264f2 <cc_mbedtls_entropy_func+0x9a>
   264ca:	2120      	movs	r1, #32
   264cc:	4630      	mov	r0, r6
   264ce:	f7ff fb47 	bl	25b60 <mbedtls_platform_zeroize>
   264d2:	4b22      	ldr	r3, [pc, #136]	; (2655c <cc_mbedtls_entropy_func+0x104>)
   264d4:	4648      	mov	r0, r9
   264d6:	681b      	ldr	r3, [r3, #0]
   264d8:	4798      	blx	r3
   264da:	2800      	cmp	r0, #0
   264dc:	bf18      	it	ne
   264de:	f06f 051d 	mvnne.w	r5, #29
   264e2:	4628      	mov	r0, r5
   264e4:	b008      	add	sp, #32
   264e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   264ea:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   264ee:	466e      	mov	r6, sp
   264f0:	e7eb      	b.n	264ca <cc_mbedtls_entropy_func+0x72>
   264f2:	4650      	mov	r0, sl
   264f4:	f000 fd8e 	bl	27014 <cc_mbedtls_sha256_free>
   264f8:	4650      	mov	r0, sl
   264fa:	f000 fd77 	bl	26fec <cc_mbedtls_sha256_init>
   264fe:	4629      	mov	r1, r5
   26500:	4650      	mov	r0, sl
   26502:	f000 fd8d 	bl	27020 <cc_mbedtls_sha256_starts>
   26506:	4605      	mov	r5, r0
   26508:	2800      	cmp	r0, #0
   2650a:	d1de      	bne.n	264ca <cc_mbedtls_entropy_func+0x72>
   2650c:	4650      	mov	r0, sl
   2650e:	2220      	movs	r2, #32
   26510:	4631      	mov	r1, r6
   26512:	f000 fd99 	bl	27048 <cc_mbedtls_sha256_update>
   26516:	4605      	mov	r5, r0
   26518:	2800      	cmp	r0, #0
   2651a:	d1d6      	bne.n	264ca <cc_mbedtls_entropy_func+0x72>
   2651c:	4603      	mov	r3, r0
   2651e:	4632      	mov	r2, r6
   26520:	2120      	movs	r1, #32
   26522:	4630      	mov	r0, r6
   26524:	f000 ff18 	bl	27358 <cc_mbedtls_sha256>
   26528:	4605      	mov	r5, r0
   2652a:	2800      	cmp	r0, #0
   2652c:	d1cd      	bne.n	264ca <cc_mbedtls_entropy_func+0x72>
   2652e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   26532:	2b00      	cmp	r3, #0
   26534:	bfc4      	itt	gt
   26536:	2300      	movgt	r3, #0
   26538:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   2653c:	463a      	mov	r2, r7
   2653e:	4640      	mov	r0, r8
   26540:	4631      	mov	r1, r6
   26542:	f003 fc23 	bl	29d8c <memcpy>
   26546:	e7c0      	b.n	264ca <cc_mbedtls_entropy_func+0x72>
   26548:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   2654c:	466e      	mov	r6, sp
   2654e:	e7bc      	b.n	264ca <cc_mbedtls_entropy_func+0x72>
   26550:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   26554:	e7c5      	b.n	264e2 <cc_mbedtls_entropy_func+0x8a>
   26556:	bf00      	nop
   26558:	20000954 	.word	0x20000954
   2655c:	20000958 	.word	0x20000958

00026560 <RndStartupTest.constprop.0>:
   26560:	b530      	push	{r4, r5, lr}
   26562:	b08d      	sub	sp, #52	; 0x34
   26564:	2100      	movs	r1, #0
   26566:	2228      	movs	r2, #40	; 0x28
   26568:	a802      	add	r0, sp, #8
   2656a:	9101      	str	r1, [sp, #4]
   2656c:	f003 fc3d 	bl	29dea <memset>
   26570:	a802      	add	r0, sp, #8
   26572:	f000 ff19 	bl	273a8 <RNG_PLAT_SetUserRngParameters>
   26576:	4604      	mov	r4, r0
   26578:	b110      	cbz	r0, 26580 <RndStartupTest.constprop.0+0x20>
   2657a:	4620      	mov	r0, r4
   2657c:	b00d      	add	sp, #52	; 0x34
   2657e:	bd30      	pop	{r4, r5, pc}
   26580:	4d18      	ldr	r5, [pc, #96]	; (265e4 <RndStartupTest.constprop.0+0x84>)
   26582:	f04f 31ff 	mov.w	r1, #4294967295
   26586:	6828      	ldr	r0, [r5, #0]
   26588:	f000 f946 	bl	26818 <CC_PalMutexLock>
   2658c:	4604      	mov	r4, r0
   2658e:	b9c0      	cbnz	r0, 265c2 <RndStartupTest.constprop.0+0x62>
   26590:	2000      	movs	r0, #0
   26592:	f000 f971 	bl	26878 <CC_PalPowerSaveModeSelect>
   26596:	bb00      	cbnz	r0, 265da <RndStartupTest.constprop.0+0x7a>
   26598:	4a13      	ldr	r2, [pc, #76]	; (265e8 <RndStartupTest.constprop.0+0x88>)
   2659a:	a902      	add	r1, sp, #8
   2659c:	a801      	add	r0, sp, #4
   2659e:	f000 fc3f 	bl	26e20 <LLF_RND_RunTrngStartupTest>
   265a2:	4604      	mov	r4, r0
   265a4:	2001      	movs	r0, #1
   265a6:	f000 f967 	bl	26878 <CC_PalPowerSaveModeSelect>
   265aa:	b990      	cbnz	r0, 265d2 <RndStartupTest.constprop.0+0x72>
   265ac:	6828      	ldr	r0, [r5, #0]
   265ae:	f000 f93b 	bl	26828 <CC_PalMutexUnlock>
   265b2:	2800      	cmp	r0, #0
   265b4:	d0e1      	beq.n	2657a <RndStartupTest.constprop.0+0x1a>
   265b6:	480d      	ldr	r0, [pc, #52]	; (265ec <RndStartupTest.constprop.0+0x8c>)
   265b8:	f7ff f9b2 	bl	25920 <CC_PalAbort>
   265bc:	4620      	mov	r0, r4
   265be:	b00d      	add	sp, #52	; 0x34
   265c0:	bd30      	pop	{r4, r5, pc}
   265c2:	480b      	ldr	r0, [pc, #44]	; (265f0 <RndStartupTest.constprop.0+0x90>)
   265c4:	f7ff f9ac 	bl	25920 <CC_PalAbort>
   265c8:	2c01      	cmp	r4, #1
   265ca:	bf08      	it	eq
   265cc:	2405      	moveq	r4, #5
   265ce:	d0ed      	beq.n	265ac <RndStartupTest.constprop.0+0x4c>
   265d0:	e7de      	b.n	26590 <RndStartupTest.constprop.0+0x30>
   265d2:	4808      	ldr	r0, [pc, #32]	; (265f4 <RndStartupTest.constprop.0+0x94>)
   265d4:	f7ff f9a4 	bl	25920 <CC_PalAbort>
   265d8:	e7e8      	b.n	265ac <RndStartupTest.constprop.0+0x4c>
   265da:	4807      	ldr	r0, [pc, #28]	; (265f8 <RndStartupTest.constprop.0+0x98>)
   265dc:	f7ff f9a0 	bl	25920 <CC_PalAbort>
   265e0:	e7da      	b.n	26598 <RndStartupTest.constprop.0+0x38>
   265e2:	bf00      	nop
   265e4:	2000094c 	.word	0x2000094c
   265e8:	20004084 	.word	0x20004084
   265ec:	00033f9c 	.word	0x00033f9c
   265f0:	00033f44 	.word	0x00033f44
   265f4:	00033f7c 	.word	0x00033f7c
   265f8:	00033f5c 	.word	0x00033f5c

000265fc <CC_LibInit>:
   265fc:	b530      	push	{r4, r5, lr}
   265fe:	b083      	sub	sp, #12
   26600:	f000 f85c 	bl	266bc <CC_HalInit>
   26604:	b128      	cbz	r0, 26612 <CC_LibInit+0x16>
   26606:	f000 f8ab 	bl	26760 <CC_PalTerminate>
   2660a:	2403      	movs	r4, #3
   2660c:	4620      	mov	r0, r4
   2660e:	b003      	add	sp, #12
   26610:	bd30      	pop	{r4, r5, pc}
   26612:	f000 f877 	bl	26704 <CC_PalInit>
   26616:	b9d8      	cbnz	r0, 26650 <CC_LibInit+0x54>
   26618:	f000 f92e 	bl	26878 <CC_PalPowerSaveModeSelect>
   2661c:	b9e0      	cbnz	r0, 26658 <CC_LibInit+0x5c>
   2661e:	4c22      	ldr	r4, [pc, #136]	; (266a8 <CC_LibInit+0xac>)
   26620:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   26624:	0e1b      	lsrs	r3, r3, #24
   26626:	2bf0      	cmp	r3, #240	; 0xf0
   26628:	d10a      	bne.n	26640 <CC_LibInit+0x44>
   2662a:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   2662e:	4b1f      	ldr	r3, [pc, #124]	; (266ac <CC_LibInit+0xb0>)
   26630:	429a      	cmp	r2, r3
   26632:	d031      	beq.n	26698 <CC_LibInit+0x9c>
   26634:	f000 f844 	bl	266c0 <CC_HalTerminate>
   26638:	2407      	movs	r4, #7
   2663a:	f000 f891 	bl	26760 <CC_PalTerminate>
   2663e:	e7e5      	b.n	2660c <CC_LibInit+0x10>
   26640:	f000 f83e 	bl	266c0 <CC_HalTerminate>
   26644:	f000 f88c 	bl	26760 <CC_PalTerminate>
   26648:	2406      	movs	r4, #6
   2664a:	4620      	mov	r0, r4
   2664c:	b003      	add	sp, #12
   2664e:	bd30      	pop	{r4, r5, pc}
   26650:	2404      	movs	r4, #4
   26652:	4620      	mov	r0, r4
   26654:	b003      	add	sp, #12
   26656:	bd30      	pop	{r4, r5, pc}
   26658:	f000 f832 	bl	266c0 <CC_HalTerminate>
   2665c:	f000 f880 	bl	26760 <CC_PalTerminate>
   26660:	f7ff ff7e 	bl	26560 <RndStartupTest.constprop.0>
   26664:	4604      	mov	r4, r0
   26666:	b998      	cbnz	r0, 26690 <CC_LibInit+0x94>
   26668:	4d11      	ldr	r5, [pc, #68]	; (266b0 <CC_LibInit+0xb4>)
   2666a:	682b      	ldr	r3, [r5, #0]
   2666c:	2b00      	cmp	r3, #0
   2666e:	d1cd      	bne.n	2660c <CC_LibInit+0x10>
   26670:	4602      	mov	r2, r0
   26672:	4601      	mov	r1, r0
   26674:	f7ff f976 	bl	25964 <nrf_cc3xx_platform_ctr_drbg_init>
   26678:	b950      	cbnz	r0, 26690 <CC_LibInit+0x94>
   2667a:	490e      	ldr	r1, [pc, #56]	; (266b4 <CC_LibInit+0xb8>)
   2667c:	ab01      	add	r3, sp, #4
   2667e:	2268      	movs	r2, #104	; 0x68
   26680:	f7ff f9a2 	bl	259c8 <nrf_cc3xx_platform_ctr_drbg_get>
   26684:	b920      	cbnz	r0, 26690 <CC_LibInit+0x94>
   26686:	4b0c      	ldr	r3, [pc, #48]	; (266b8 <CC_LibInit+0xbc>)
   26688:	602b      	str	r3, [r5, #0]
   2668a:	4620      	mov	r0, r4
   2668c:	b003      	add	sp, #12
   2668e:	bd30      	pop	{r4, r5, pc}
   26690:	2405      	movs	r4, #5
   26692:	4620      	mov	r0, r4
   26694:	b003      	add	sp, #12
   26696:	bd30      	pop	{r4, r5, pc}
   26698:	2001      	movs	r0, #1
   2669a:	f000 f8ed 	bl	26878 <CC_PalPowerSaveModeSelect>
   2669e:	2800      	cmp	r0, #0
   266a0:	d1da      	bne.n	26658 <CC_LibInit+0x5c>
   266a2:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   266a6:	e7db      	b.n	26660 <CC_LibInit+0x64>
   266a8:	5002b000 	.word	0x5002b000
   266ac:	20e00000 	.word	0x20e00000
   266b0:	20004080 	.word	0x20004080
   266b4:	20004018 	.word	0x20004018
   266b8:	5a5aea5a 	.word	0x5a5aea5a

000266bc <CC_HalInit>:
   266bc:	2000      	movs	r0, #0
   266be:	4770      	bx	lr

000266c0 <CC_HalTerminate>:
   266c0:	2000      	movs	r0, #0
   266c2:	4770      	bx	lr

000266c4 <CC_HalClearInterruptBit>:
   266c4:	0543      	lsls	r3, r0, #21
   266c6:	d504      	bpl.n	266d2 <CC_HalClearInterruptBit+0xe>
   266c8:	4b04      	ldr	r3, [pc, #16]	; (266dc <CC_HalClearInterruptBit+0x18>)
   266ca:	f04f 32ff 	mov.w	r2, #4294967295
   266ce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   266d2:	4b02      	ldr	r3, [pc, #8]	; (266dc <CC_HalClearInterruptBit+0x18>)
   266d4:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   266d8:	4770      	bx	lr
   266da:	bf00      	nop
   266dc:	5002b000 	.word	0x5002b000

000266e0 <CC_HalMaskInterrupt>:
   266e0:	4b01      	ldr	r3, [pc, #4]	; (266e8 <CC_HalMaskInterrupt+0x8>)
   266e2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   266e6:	4770      	bx	lr
   266e8:	5002b000 	.word	0x5002b000

000266ec <CC_HalWaitInterrupt>:
   266ec:	b108      	cbz	r0, 266f2 <CC_HalWaitInterrupt+0x6>
   266ee:	f000 b86b 	b.w	267c8 <CC_PalWaitInterrupt>
   266f2:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   266f6:	4770      	bx	lr

000266f8 <CC_HalWaitInterruptRND>:
   266f8:	b108      	cbz	r0, 266fe <CC_HalWaitInterruptRND+0x6>
   266fa:	f000 b84f 	b.w	2679c <CC_PalWaitInterruptRND>
   266fe:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   26702:	4770      	bx	lr

00026704 <CC_PalInit>:
   26704:	b510      	push	{r4, lr}
   26706:	4811      	ldr	r0, [pc, #68]	; (2674c <CC_PalInit+0x48>)
   26708:	f000 f872 	bl	267f0 <CC_PalMutexCreate>
   2670c:	b100      	cbz	r0, 26710 <CC_PalInit+0xc>
   2670e:	bd10      	pop	{r4, pc}
   26710:	480f      	ldr	r0, [pc, #60]	; (26750 <CC_PalInit+0x4c>)
   26712:	f000 f86d 	bl	267f0 <CC_PalMutexCreate>
   26716:	2800      	cmp	r0, #0
   26718:	d1f9      	bne.n	2670e <CC_PalInit+0xa>
   2671a:	4c0e      	ldr	r4, [pc, #56]	; (26754 <CC_PalInit+0x50>)
   2671c:	4620      	mov	r0, r4
   2671e:	f000 f867 	bl	267f0 <CC_PalMutexCreate>
   26722:	2800      	cmp	r0, #0
   26724:	d1f3      	bne.n	2670e <CC_PalInit+0xa>
   26726:	4b0c      	ldr	r3, [pc, #48]	; (26758 <CC_PalInit+0x54>)
   26728:	480c      	ldr	r0, [pc, #48]	; (2675c <CC_PalInit+0x58>)
   2672a:	601c      	str	r4, [r3, #0]
   2672c:	f000 f860 	bl	267f0 <CC_PalMutexCreate>
   26730:	4601      	mov	r1, r0
   26732:	2800      	cmp	r0, #0
   26734:	d1eb      	bne.n	2670e <CC_PalInit+0xa>
   26736:	f000 f82d 	bl	26794 <CC_PalDmaInit>
   2673a:	4604      	mov	r4, r0
   2673c:	b108      	cbz	r0, 26742 <CC_PalInit+0x3e>
   2673e:	4620      	mov	r0, r4
   26740:	bd10      	pop	{r4, pc}
   26742:	f000 f87b 	bl	2683c <CC_PalPowerSaveModeInit>
   26746:	4620      	mov	r0, r4
   26748:	e7fa      	b.n	26740 <CC_PalInit+0x3c>
   2674a:	bf00      	nop
   2674c:	20000948 	.word	0x20000948
   26750:	2000093c 	.word	0x2000093c
   26754:	20000944 	.word	0x20000944
   26758:	2000094c 	.word	0x2000094c
   2675c:	20000940 	.word	0x20000940

00026760 <CC_PalTerminate>:
   26760:	b508      	push	{r3, lr}
   26762:	4808      	ldr	r0, [pc, #32]	; (26784 <CC_PalTerminate+0x24>)
   26764:	f000 f84e 	bl	26804 <CC_PalMutexDestroy>
   26768:	4807      	ldr	r0, [pc, #28]	; (26788 <CC_PalTerminate+0x28>)
   2676a:	f000 f84b 	bl	26804 <CC_PalMutexDestroy>
   2676e:	4807      	ldr	r0, [pc, #28]	; (2678c <CC_PalTerminate+0x2c>)
   26770:	f000 f848 	bl	26804 <CC_PalMutexDestroy>
   26774:	4806      	ldr	r0, [pc, #24]	; (26790 <CC_PalTerminate+0x30>)
   26776:	f000 f845 	bl	26804 <CC_PalMutexDestroy>
   2677a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2677e:	f000 b80b 	b.w	26798 <CC_PalDmaTerminate>
   26782:	bf00      	nop
   26784:	20000948 	.word	0x20000948
   26788:	2000093c 	.word	0x2000093c
   2678c:	20000944 	.word	0x20000944
   26790:	20000940 	.word	0x20000940

00026794 <CC_PalDmaInit>:
   26794:	2000      	movs	r0, #0
   26796:	4770      	bx	lr

00026798 <CC_PalDmaTerminate>:
   26798:	4770      	bx	lr
   2679a:	bf00      	nop

0002679c <CC_PalWaitInterruptRND>:
   2679c:	b410      	push	{r4}
   2679e:	4c09      	ldr	r4, [pc, #36]	; (267c4 <CC_PalWaitInterruptRND+0x28>)
   267a0:	4602      	mov	r2, r0
   267a2:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   267a6:	4213      	tst	r3, r2
   267a8:	d0fb      	beq.n	267a2 <CC_PalWaitInterruptRND+0x6>
   267aa:	b121      	cbz	r1, 267b6 <CC_PalWaitInterruptRND+0x1a>
   267ac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   267b0:	600b      	str	r3, [r1, #0]
   267b2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   267b6:	4b03      	ldr	r3, [pc, #12]	; (267c4 <CC_PalWaitInterruptRND+0x28>)
   267b8:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   267bc:	2000      	movs	r0, #0
   267be:	bc10      	pop	{r4}
   267c0:	4770      	bx	lr
   267c2:	bf00      	nop
   267c4:	5002b000 	.word	0x5002b000

000267c8 <CC_PalWaitInterrupt>:
   267c8:	4a04      	ldr	r2, [pc, #16]	; (267dc <CC_PalWaitInterrupt+0x14>)
   267ca:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   267ce:	4218      	tst	r0, r3
   267d0:	d0fb      	beq.n	267ca <CC_PalWaitInterrupt+0x2>
   267d2:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   267d6:	2000      	movs	r0, #0
   267d8:	4770      	bx	lr
   267da:	bf00      	nop
   267dc:	5002b000 	.word	0x5002b000

000267e0 <CC_PalMemCopyPlat>:
   267e0:	f003 bac1 	b.w	29d66 <memmove>

000267e4 <CC_PalMemSetPlat>:
   267e4:	f003 bb01 	b.w	29dea <memset>

000267e8 <CC_PalMemSetZeroPlat>:
   267e8:	460a      	mov	r2, r1
   267ea:	2100      	movs	r1, #0
   267ec:	f003 bafd 	b.w	29dea <memset>

000267f0 <CC_PalMutexCreate>:
   267f0:	b508      	push	{r3, lr}
   267f2:	4b03      	ldr	r3, [pc, #12]	; (26800 <CC_PalMutexCreate+0x10>)
   267f4:	6802      	ldr	r2, [r0, #0]
   267f6:	681b      	ldr	r3, [r3, #0]
   267f8:	6810      	ldr	r0, [r2, #0]
   267fa:	4798      	blx	r3
   267fc:	2000      	movs	r0, #0
   267fe:	bd08      	pop	{r3, pc}
   26800:	200008fc 	.word	0x200008fc

00026804 <CC_PalMutexDestroy>:
   26804:	b508      	push	{r3, lr}
   26806:	4b03      	ldr	r3, [pc, #12]	; (26814 <CC_PalMutexDestroy+0x10>)
   26808:	6802      	ldr	r2, [r0, #0]
   2680a:	685b      	ldr	r3, [r3, #4]
   2680c:	6810      	ldr	r0, [r2, #0]
   2680e:	4798      	blx	r3
   26810:	2000      	movs	r0, #0
   26812:	bd08      	pop	{r3, pc}
   26814:	200008fc 	.word	0x200008fc

00026818 <CC_PalMutexLock>:
   26818:	4b02      	ldr	r3, [pc, #8]	; (26824 <CC_PalMutexLock+0xc>)
   2681a:	6802      	ldr	r2, [r0, #0]
   2681c:	689b      	ldr	r3, [r3, #8]
   2681e:	6810      	ldr	r0, [r2, #0]
   26820:	4718      	bx	r3
   26822:	bf00      	nop
   26824:	200008fc 	.word	0x200008fc

00026828 <CC_PalMutexUnlock>:
   26828:	b508      	push	{r3, lr}
   2682a:	4b03      	ldr	r3, [pc, #12]	; (26838 <CC_PalMutexUnlock+0x10>)
   2682c:	6802      	ldr	r2, [r0, #0]
   2682e:	68db      	ldr	r3, [r3, #12]
   26830:	6810      	ldr	r0, [r2, #0]
   26832:	4798      	blx	r3
   26834:	2000      	movs	r0, #0
   26836:	bd08      	pop	{r3, pc}
   26838:	200008fc 	.word	0x200008fc

0002683c <CC_PalPowerSaveModeInit>:
   2683c:	b570      	push	{r4, r5, r6, lr}
   2683e:	4c09      	ldr	r4, [pc, #36]	; (26864 <CC_PalPowerSaveModeInit+0x28>)
   26840:	4d09      	ldr	r5, [pc, #36]	; (26868 <CC_PalPowerSaveModeInit+0x2c>)
   26842:	6920      	ldr	r0, [r4, #16]
   26844:	68ab      	ldr	r3, [r5, #8]
   26846:	4798      	blx	r3
   26848:	b118      	cbz	r0, 26852 <CC_PalPowerSaveModeInit+0x16>
   2684a:	4b08      	ldr	r3, [pc, #32]	; (2686c <CC_PalPowerSaveModeInit+0x30>)
   2684c:	4808      	ldr	r0, [pc, #32]	; (26870 <CC_PalPowerSaveModeInit+0x34>)
   2684e:	685b      	ldr	r3, [r3, #4]
   26850:	4798      	blx	r3
   26852:	4a08      	ldr	r2, [pc, #32]	; (26874 <CC_PalPowerSaveModeInit+0x38>)
   26854:	68eb      	ldr	r3, [r5, #12]
   26856:	6920      	ldr	r0, [r4, #16]
   26858:	2100      	movs	r1, #0
   2685a:	6011      	str	r1, [r2, #0]
   2685c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26860:	4718      	bx	r3
   26862:	bf00      	nop
   26864:	2000090c 	.word	0x2000090c
   26868:	200008fc 	.word	0x200008fc
   2686c:	200008ec 	.word	0x200008ec
   26870:	00033fb4 	.word	0x00033fb4
   26874:	200042a4 	.word	0x200042a4

00026878 <CC_PalPowerSaveModeSelect>:
   26878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2687a:	4d1a      	ldr	r5, [pc, #104]	; (268e4 <CC_PalPowerSaveModeSelect+0x6c>)
   2687c:	4e1a      	ldr	r6, [pc, #104]	; (268e8 <CC_PalPowerSaveModeSelect+0x70>)
   2687e:	4604      	mov	r4, r0
   26880:	68b2      	ldr	r2, [r6, #8]
   26882:	6928      	ldr	r0, [r5, #16]
   26884:	4790      	blx	r2
   26886:	b9e8      	cbnz	r0, 268c4 <CC_PalPowerSaveModeSelect+0x4c>
   26888:	4f18      	ldr	r7, [pc, #96]	; (268ec <CC_PalPowerSaveModeSelect+0x74>)
   2688a:	683b      	ldr	r3, [r7, #0]
   2688c:	b14c      	cbz	r4, 268a2 <CC_PalPowerSaveModeSelect+0x2a>
   2688e:	b1a3      	cbz	r3, 268ba <CC_PalPowerSaveModeSelect+0x42>
   26890:	2b01      	cmp	r3, #1
   26892:	d019      	beq.n	268c8 <CC_PalPowerSaveModeSelect+0x50>
   26894:	3b01      	subs	r3, #1
   26896:	603b      	str	r3, [r7, #0]
   26898:	6928      	ldr	r0, [r5, #16]
   2689a:	68f3      	ldr	r3, [r6, #12]
   2689c:	4798      	blx	r3
   2689e:	2000      	movs	r0, #0
   268a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   268a2:	b943      	cbnz	r3, 268b6 <CC_PalPowerSaveModeSelect+0x3e>
   268a4:	4a12      	ldr	r2, [pc, #72]	; (268f0 <CC_PalPowerSaveModeSelect+0x78>)
   268a6:	2101      	movs	r1, #1
   268a8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   268ac:	4911      	ldr	r1, [pc, #68]	; (268f4 <CC_PalPowerSaveModeSelect+0x7c>)
   268ae:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   268b2:	2a00      	cmp	r2, #0
   268b4:	d1fb      	bne.n	268ae <CC_PalPowerSaveModeSelect+0x36>
   268b6:	3301      	adds	r3, #1
   268b8:	603b      	str	r3, [r7, #0]
   268ba:	68f3      	ldr	r3, [r6, #12]
   268bc:	6928      	ldr	r0, [r5, #16]
   268be:	4798      	blx	r3
   268c0:	2000      	movs	r0, #0
   268c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   268c4:	480c      	ldr	r0, [pc, #48]	; (268f8 <CC_PalPowerSaveModeSelect+0x80>)
   268c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   268c8:	4a0a      	ldr	r2, [pc, #40]	; (268f4 <CC_PalPowerSaveModeSelect+0x7c>)
   268ca:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   268ce:	2b00      	cmp	r3, #0
   268d0:	d1fb      	bne.n	268ca <CC_PalPowerSaveModeSelect+0x52>
   268d2:	4a07      	ldr	r2, [pc, #28]	; (268f0 <CC_PalPowerSaveModeSelect+0x78>)
   268d4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   268d8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   268dc:	f7ff ff00 	bl	266e0 <CC_HalMaskInterrupt>
   268e0:	683b      	ldr	r3, [r7, #0]
   268e2:	e7d7      	b.n	26894 <CC_PalPowerSaveModeSelect+0x1c>
   268e4:	2000090c 	.word	0x2000090c
   268e8:	200008fc 	.word	0x200008fc
   268ec:	200042a4 	.word	0x200042a4
   268f0:	5002a000 	.word	0x5002a000
   268f4:	5002b000 	.word	0x5002b000
   268f8:	ffff8fe9 	.word	0xffff8fe9

000268fc <mutex_init>:
   268fc:	4b01      	ldr	r3, [pc, #4]	; (26904 <mutex_init+0x8>)
   268fe:	681b      	ldr	r3, [r3, #0]
   26900:	4718      	bx	r3
   26902:	bf00      	nop
   26904:	200008fc 	.word	0x200008fc

00026908 <mutex_lock>:
   26908:	4b01      	ldr	r3, [pc, #4]	; (26910 <mutex_lock+0x8>)
   2690a:	689b      	ldr	r3, [r3, #8]
   2690c:	4718      	bx	r3
   2690e:	bf00      	nop
   26910:	200008fc 	.word	0x200008fc

00026914 <mutex_unlock>:
   26914:	4b01      	ldr	r3, [pc, #4]	; (2691c <mutex_unlock+0x8>)
   26916:	68db      	ldr	r3, [r3, #12]
   26918:	4718      	bx	r3
   2691a:	bf00      	nop
   2691c:	200008fc 	.word	0x200008fc

00026920 <startTrngHW>:
   26920:	2800      	cmp	r0, #0
   26922:	f000 8084 	beq.w	26a2e <startTrngHW+0x10e>
   26926:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2692a:	460c      	mov	r4, r1
   2692c:	b083      	sub	sp, #12
   2692e:	2900      	cmp	r1, #0
   26930:	d078      	beq.n	26a24 <startTrngHW+0x104>
   26932:	461d      	mov	r5, r3
   26934:	2b00      	cmp	r3, #0
   26936:	d075      	beq.n	26a24 <startTrngHW+0x104>
   26938:	4607      	mov	r7, r0
   2693a:	b11a      	cbz	r2, 26944 <startTrngHW+0x24>
   2693c:	2201      	movs	r2, #1
   2693e:	2300      	movs	r3, #0
   26940:	602a      	str	r2, [r5, #0]
   26942:	6003      	str	r3, [r0, #0]
   26944:	682b      	ldr	r3, [r5, #0]
   26946:	2b00      	cmp	r3, #0
   26948:	d067      	beq.n	26a1a <startTrngHW+0xfa>
   2694a:	4629      	mov	r1, r5
   2694c:	4620      	mov	r0, r4
   2694e:	f000 fde9 	bl	27524 <LLF_RND_GetFastestRosc>
   26952:	4603      	mov	r3, r0
   26954:	2800      	cmp	r0, #0
   26956:	d161      	bne.n	26a1c <startTrngHW+0xfc>
   26958:	6828      	ldr	r0, [r5, #0]
   2695a:	4621      	mov	r1, r4
   2695c:	f000 fdc4 	bl	274e8 <LLF_RND_GetRoscSampleCnt>
   26960:	4603      	mov	r3, r0
   26962:	2800      	cmp	r0, #0
   26964:	d15a      	bne.n	26a1c <startTrngHW+0xfc>
   26966:	682a      	ldr	r2, [r5, #0]
   26968:	2a08      	cmp	r2, #8
   2696a:	d072      	beq.n	26a52 <startTrngHW+0x132>
   2696c:	2a04      	cmp	r2, #4
   2696e:	d073      	beq.n	26a58 <startTrngHW+0x138>
   26970:	f1a2 0802 	sub.w	r8, r2, #2
   26974:	fab8 f888 	clz	r8, r8
   26978:	ea4f 1858 	mov.w	r8, r8, lsr #5
   2697c:	4e38      	ldr	r6, [pc, #224]	; (26a60 <startTrngHW+0x140>)
   2697e:	2001      	movs	r0, #1
   26980:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   26984:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   26988:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   2698c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2698e:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   26992:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   26996:	428a      	cmp	r2, r1
   26998:	d1f6      	bne.n	26988 <startTrngHW+0x68>
   2699a:	f04f 0900 	mov.w	r9, #0
   2699e:	9301      	str	r3, [sp, #4]
   269a0:	f04f 30ff 	mov.w	r0, #4294967295
   269a4:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   269a8:	f7ff fe8c 	bl	266c4 <CC_HalClearInterruptBit>
   269ac:	f06f 021b 	mvn.w	r2, #27
   269b0:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   269b4:	4648      	mov	r0, r9
   269b6:	f7ff fe93 	bl	266e0 <CC_HalMaskInterrupt>
   269ba:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   269be:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   269c2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   269c6:	f7ff fe8b 	bl	266e0 <CC_HalMaskInterrupt>
   269ca:	220a      	movs	r2, #10
   269cc:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   269d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   269d2:	2b01      	cmp	r3, #1
   269d4:	9b01      	ldr	r3, [sp, #4]
   269d6:	d02d      	beq.n	26a34 <startTrngHW+0x114>
   269d8:	6922      	ldr	r2, [r4, #16]
   269da:	4922      	ldr	r1, [pc, #136]	; (26a64 <startTrngHW+0x144>)
   269dc:	fba1 1202 	umull	r1, r2, r1, r2
   269e0:	0912      	lsrs	r2, r2, #4
   269e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   269e4:	fb01 f202 	mul.w	r2, r1, r2
   269e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   269ec:	491c      	ldr	r1, [pc, #112]	; (26a60 <startTrngHW+0x140>)
   269ee:	03d2      	lsls	r2, r2, #15
   269f0:	0992      	lsrs	r2, r2, #6
   269f2:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   269f6:	2201      	movs	r2, #1
   269f8:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   269fc:	683a      	ldr	r2, [r7, #0]
   269fe:	6829      	ldr	r1, [r5, #0]
   26a00:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26a04:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   26a08:	603a      	str	r2, [r7, #0]
   26a0a:	6829      	ldr	r1, [r5, #0]
   26a0c:	4618      	mov	r0, r3
   26a0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26a12:	603a      	str	r2, [r7, #0]
   26a14:	b003      	add	sp, #12
   26a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26a1a:	4b13      	ldr	r3, [pc, #76]	; (26a68 <startTrngHW+0x148>)
   26a1c:	4618      	mov	r0, r3
   26a1e:	b003      	add	sp, #12
   26a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26a24:	4b11      	ldr	r3, [pc, #68]	; (26a6c <startTrngHW+0x14c>)
   26a26:	4618      	mov	r0, r3
   26a28:	b003      	add	sp, #12
   26a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26a2e:	4b0f      	ldr	r3, [pc, #60]	; (26a6c <startTrngHW+0x14c>)
   26a30:	4618      	mov	r0, r3
   26a32:	4770      	bx	lr
   26a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   26a38:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   26a3c:	3101      	adds	r1, #1
   26a3e:	d006      	beq.n	26a4e <startTrngHW+0x12e>
   26a40:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   26a44:	4907      	ldr	r1, [pc, #28]	; (26a64 <startTrngHW+0x144>)
   26a46:	fba1 1202 	umull	r1, r2, r1, r2
   26a4a:	0912      	lsrs	r2, r2, #4
   26a4c:	e7c9      	b.n	269e2 <startTrngHW+0xc2>
   26a4e:	2216      	movs	r2, #22
   26a50:	e7c7      	b.n	269e2 <startTrngHW+0xc2>
   26a52:	f04f 0803 	mov.w	r8, #3
   26a56:	e791      	b.n	2697c <startTrngHW+0x5c>
   26a58:	f04f 0802 	mov.w	r8, #2
   26a5c:	e78e      	b.n	2697c <startTrngHW+0x5c>
   26a5e:	bf00      	nop
   26a60:	5002b000 	.word	0x5002b000
   26a64:	aaaaaaab 	.word	0xaaaaaaab
   26a68:	00f10c31 	.word	0x00f10c31
   26a6c:	00f10c35 	.word	0x00f10c35

00026a70 <LLF_RND_RepetitionCounterTest.part.0>:
   26a70:	b570      	push	{r4, r5, r6, lr}
   26a72:	00c9      	lsls	r1, r1, #3
   26a74:	2400      	movs	r4, #0
   26a76:	1e4e      	subs	r6, r1, #1
   26a78:	f04f 0c01 	mov.w	ip, #1
   26a7c:	4625      	mov	r5, r4
   26a7e:	46a6      	mov	lr, r4
   26a80:	e008      	b.n	26a94 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   26a82:	459e      	cmp	lr, r3
   26a84:	d015      	beq.n	26ab2 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   26a86:	2501      	movs	r5, #1
   26a88:	45b4      	cmp	ip, r6
   26a8a:	d817      	bhi.n	26abc <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   26a8c:	3401      	adds	r4, #1
   26a8e:	f10c 0c01 	add.w	ip, ip, #1
   26a92:	469e      	mov	lr, r3
   26a94:	0963      	lsrs	r3, r4, #5
   26a96:	f004 011f 	and.w	r1, r4, #31
   26a9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   26a9e:	291f      	cmp	r1, #31
   26aa0:	fa23 f301 	lsr.w	r3, r3, r1
   26aa4:	bf18      	it	ne
   26aa6:	f003 0301 	andne.w	r3, r3, #1
   26aaa:	2c00      	cmp	r4, #0
   26aac:	d1e9      	bne.n	26a82 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   26aae:	2501      	movs	r5, #1
   26ab0:	e7ec      	b.n	26a8c <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   26ab2:	3501      	adds	r5, #1
   26ab4:	4295      	cmp	r5, r2
   26ab6:	d1e7      	bne.n	26a88 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   26ab8:	4801      	ldr	r0, [pc, #4]	; (26ac0 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   26aba:	bd70      	pop	{r4, r5, r6, pc}
   26abc:	2000      	movs	r0, #0
   26abe:	bd70      	pop	{r4, r5, r6, pc}
   26ac0:	00f10c36 	.word	0x00f10c36

00026ac4 <LLF_RND_AdaptiveProportionTest>:
   26ac4:	2800      	cmp	r0, #0
   26ac6:	d03f      	beq.n	26b48 <LLF_RND_AdaptiveProportionTest+0x84>
   26ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26acc:	1e4c      	subs	r4, r1, #1
   26ace:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   26ad2:	d228      	bcs.n	26b26 <LLF_RND_AdaptiveProportionTest+0x62>
   26ad4:	b33b      	cbz	r3, 26b26 <LLF_RND_AdaptiveProportionTest+0x62>
   26ad6:	b332      	cbz	r2, 26b26 <LLF_RND_AdaptiveProportionTest+0x62>
   26ad8:	f04f 0e00 	mov.w	lr, #0
   26adc:	00cf      	lsls	r7, r1, #3
   26ade:	4676      	mov	r6, lr
   26ae0:	4675      	mov	r5, lr
   26ae2:	4674      	mov	r4, lr
   26ae4:	f103 38ff 	add.w	r8, r3, #4294967295
   26ae8:	0961      	lsrs	r1, r4, #5
   26aea:	f004 0c1f 	and.w	ip, r4, #31
   26aee:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   26af2:	f1bc 0f1f 	cmp.w	ip, #31
   26af6:	fa21 f10c 	lsr.w	r1, r1, ip
   26afa:	bf18      	it	ne
   26afc:	f001 0101 	andne.w	r1, r1, #1
   26b00:	b1a4      	cbz	r4, 26b2c <LLF_RND_AdaptiveProportionTest+0x68>
   26b02:	42ab      	cmp	r3, r5
   26b04:	d018      	beq.n	26b38 <LLF_RND_AdaptiveProportionTest+0x74>
   26b06:	428e      	cmp	r6, r1
   26b08:	bf08      	it	eq
   26b0a:	f10e 0e01 	addeq.w	lr, lr, #1
   26b0e:	45a8      	cmp	r8, r5
   26b10:	d015      	beq.n	26b3e <LLF_RND_AdaptiveProportionTest+0x7a>
   26b12:	3501      	adds	r5, #1
   26b14:	4631      	mov	r1, r6
   26b16:	3401      	adds	r4, #1
   26b18:	42bc      	cmp	r4, r7
   26b1a:	d001      	beq.n	26b20 <LLF_RND_AdaptiveProportionTest+0x5c>
   26b1c:	460e      	mov	r6, r1
   26b1e:	e7e3      	b.n	26ae8 <LLF_RND_AdaptiveProportionTest+0x24>
   26b20:	2000      	movs	r0, #0
   26b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26b26:	4809      	ldr	r0, [pc, #36]	; (26b4c <LLF_RND_AdaptiveProportionTest+0x88>)
   26b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26b2c:	f04f 0e01 	mov.w	lr, #1
   26b30:	4674      	mov	r4, lr
   26b32:	4675      	mov	r5, lr
   26b34:	460e      	mov	r6, r1
   26b36:	e7d7      	b.n	26ae8 <LLF_RND_AdaptiveProportionTest+0x24>
   26b38:	2501      	movs	r5, #1
   26b3a:	46ae      	mov	lr, r5
   26b3c:	e7eb      	b.n	26b16 <LLF_RND_AdaptiveProportionTest+0x52>
   26b3e:	4572      	cmp	r2, lr
   26b40:	d3f1      	bcc.n	26b26 <LLF_RND_AdaptiveProportionTest+0x62>
   26b42:	4631      	mov	r1, r6
   26b44:	461d      	mov	r5, r3
   26b46:	e7e6      	b.n	26b16 <LLF_RND_AdaptiveProportionTest+0x52>
   26b48:	4800      	ldr	r0, [pc, #0]	; (26b4c <LLF_RND_AdaptiveProportionTest+0x88>)
   26b4a:	4770      	bx	lr
   26b4c:	00f10c37 	.word	0x00f10c37

00026b50 <getTrngSource>:
   26b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b54:	b091      	sub	sp, #68	; 0x44
   26b56:	460d      	mov	r5, r1
   26b58:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   26b5c:	4681      	mov	r9, r0
   26b5e:	2900      	cmp	r1, #0
   26b60:	d14c      	bne.n	26bfc <getTrngSource+0xac>
   26b62:	6928      	ldr	r0, [r5, #16]
   26b64:	9006      	str	r0, [sp, #24]
   26b66:	981a      	ldr	r0, [sp, #104]	; 0x68
   26b68:	601c      	str	r4, [r3, #0]
   26b6a:	2300      	movs	r3, #0
   26b6c:	6003      	str	r3, [r0, #0]
   26b6e:	2a00      	cmp	r2, #0
   26b70:	f000 8124 	beq.w	26dbc <getTrngSource+0x26c>
   26b74:	4b9d      	ldr	r3, [pc, #628]	; (26dec <getTrngSource+0x29c>)
   26b76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   26b78:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   26b7c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   26b80:	429a      	cmp	r2, r3
   26b82:	d147      	bne.n	26c14 <getTrngSource+0xc4>
   26b84:	290a      	cmp	r1, #10
   26b86:	d145      	bne.n	26c14 <getTrngSource+0xc4>
   26b88:	f899 3003 	ldrb.w	r3, [r9, #3]
   26b8c:	9308      	str	r3, [sp, #32]
   26b8e:	f104 0308 	add.w	r3, r4, #8
   26b92:	9a06      	ldr	r2, [sp, #24]
   26b94:	9307      	str	r3, [sp, #28]
   26b96:	4b96      	ldr	r3, [pc, #600]	; (26df0 <getTrngSource+0x2a0>)
   26b98:	4c94      	ldr	r4, [pc, #592]	; (26dec <getTrngSource+0x29c>)
   26b9a:	fba3 1302 	umull	r1, r3, r3, r2
   26b9e:	089b      	lsrs	r3, r3, #2
   26ba0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26ba4:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   26ba8:	9303      	str	r3, [sp, #12]
   26baa:	2304      	movs	r3, #4
   26bac:	9305      	str	r3, [sp, #20]
   26bae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   26bb0:	9e06      	ldr	r6, [sp, #24]
   26bb2:	601e      	str	r6, [r3, #0]
   26bb4:	2e00      	cmp	r6, #0
   26bb6:	d033      	beq.n	26c20 <getTrngSource+0xd0>
   26bb8:	f8dd 801c 	ldr.w	r8, [sp, #28]
   26bbc:	2700      	movs	r7, #0
   26bbe:	f04f 0a01 	mov.w	sl, #1
   26bc2:	f000 fcbf 	bl	27544 <LLF_RND_TurnOffTrng>
   26bc6:	2300      	movs	r3, #0
   26bc8:	9309      	str	r3, [sp, #36]	; 0x24
   26bca:	f1b9 0f00 	cmp.w	r9, #0
   26bce:	f000 80df 	beq.w	26d90 <getTrngSource+0x240>
   26bd2:	2d00      	cmp	r5, #0
   26bd4:	f000 80dc 	beq.w	26d90 <getTrngSource+0x240>
   26bd8:	9b08      	ldr	r3, [sp, #32]
   26bda:	b1eb      	cbz	r3, 26c18 <getTrngSource+0xc8>
   26bdc:	a908      	add	r1, sp, #32
   26bde:	4628      	mov	r0, r5
   26be0:	f000 fca0 	bl	27524 <LLF_RND_GetFastestRosc>
   26be4:	2800      	cmp	r0, #0
   26be6:	d03e      	beq.n	26c66 <getTrngSource+0x116>
   26be8:	4b82      	ldr	r3, [pc, #520]	; (26df4 <getTrngSource+0x2a4>)
   26bea:	4298      	cmp	r0, r3
   26bec:	d118      	bne.n	26c20 <getTrngSource+0xd0>
   26bee:	9003      	str	r0, [sp, #12]
   26bf0:	f000 fca8 	bl	27544 <LLF_RND_TurnOffTrng>
   26bf4:	9803      	ldr	r0, [sp, #12]
   26bf6:	b011      	add	sp, #68	; 0x44
   26bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26bfc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   26c00:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   26c04:	3601      	adds	r6, #1
   26c06:	bf14      	ite	ne
   26c08:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   26c0c:	f44f 7004 	moveq.w	r0, #528	; 0x210
   26c10:	9006      	str	r0, [sp, #24]
   26c12:	e7a8      	b.n	26b66 <getTrngSource+0x16>
   26c14:	4878      	ldr	r0, [pc, #480]	; (26df8 <getTrngSource+0x2a8>)
   26c16:	e7ea      	b.n	26bee <getTrngSource+0x9e>
   26c18:	4878      	ldr	r0, [pc, #480]	; (26dfc <getTrngSource+0x2ac>)
   26c1a:	4b76      	ldr	r3, [pc, #472]	; (26df4 <getTrngSource+0x2a4>)
   26c1c:	4298      	cmp	r0, r3
   26c1e:	d0e6      	beq.n	26bee <getTrngSource+0x9e>
   26c20:	9b08      	ldr	r3, [sp, #32]
   26c22:	2b08      	cmp	r3, #8
   26c24:	f000 80c8 	beq.w	26db8 <getTrngSource+0x268>
   26c28:	005b      	lsls	r3, r3, #1
   26c2a:	2200      	movs	r2, #0
   26c2c:	9308      	str	r3, [sp, #32]
   26c2e:	9200      	str	r2, [sp, #0]
   26c30:	ab08      	add	r3, sp, #32
   26c32:	4629      	mov	r1, r5
   26c34:	4648      	mov	r0, r9
   26c36:	f7ff fe73 	bl	26920 <startTrngHW>
   26c3a:	4b70      	ldr	r3, [pc, #448]	; (26dfc <getTrngSource+0x2ac>)
   26c3c:	4298      	cmp	r0, r3
   26c3e:	f000 80b7 	beq.w	26db0 <getTrngSource+0x260>
   26c42:	2800      	cmp	r0, #0
   26c44:	d1d3      	bne.n	26bee <getTrngSource+0x9e>
   26c46:	f8d9 2000 	ldr.w	r2, [r9]
   26c4a:	0a13      	lsrs	r3, r2, #8
   26c4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   26c50:	4313      	orrs	r3, r2
   26c52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   26c56:	f8c9 3000 	str.w	r3, [r9]
   26c5a:	9b05      	ldr	r3, [sp, #20]
   26c5c:	3b01      	subs	r3, #1
   26c5e:	9305      	str	r3, [sp, #20]
   26c60:	d1a5      	bne.n	26bae <getTrngSource+0x5e>
   26c62:	2000      	movs	r0, #0
   26c64:	e7c3      	b.n	26bee <getTrngSource+0x9e>
   26c66:	9808      	ldr	r0, [sp, #32]
   26c68:	4629      	mov	r1, r5
   26c6a:	f000 fc3d 	bl	274e8 <LLF_RND_GetRoscSampleCnt>
   26c6e:	2800      	cmp	r0, #0
   26c70:	d1ba      	bne.n	26be8 <getTrngSource+0x98>
   26c72:	9b08      	ldr	r3, [sp, #32]
   26c74:	2b08      	cmp	r3, #8
   26c76:	f000 8095 	beq.w	26da4 <getTrngSource+0x254>
   26c7a:	2b04      	cmp	r3, #4
   26c7c:	f000 8095 	beq.w	26daa <getTrngSource+0x25a>
   26c80:	f1a3 0302 	sub.w	r3, r3, #2
   26c84:	fab3 f383 	clz	r3, r3
   26c88:	095b      	lsrs	r3, r3, #5
   26c8a:	9304      	str	r3, [sp, #16]
   26c8c:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   26c90:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   26c94:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   26c98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   26c9a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   26c9e:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   26ca2:	4293      	cmp	r3, r2
   26ca4:	d1f6      	bne.n	26c94 <getTrngSource+0x144>
   26ca6:	f04f 0b00 	mov.w	fp, #0
   26caa:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   26cae:	f04f 30ff 	mov.w	r0, #4294967295
   26cb2:	f7ff fd07 	bl	266c4 <CC_HalClearInterruptBit>
   26cb6:	f06f 031b 	mvn.w	r3, #27
   26cba:	4658      	mov	r0, fp
   26cbc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   26cc0:	f7ff fd0e 	bl	266e0 <CC_HalMaskInterrupt>
   26cc4:	9b04      	ldr	r3, [sp, #16]
   26cc6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   26cca:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   26cce:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   26cd2:	f7ff fd05 	bl	266e0 <CC_HalMaskInterrupt>
   26cd6:	230a      	movs	r3, #10
   26cd8:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   26cdc:	692b      	ldr	r3, [r5, #16]
   26cde:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   26ce2:	fbab 2303 	umull	r2, r3, fp, r3
   26ce6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   26ce8:	091b      	lsrs	r3, r3, #4
   26cea:	fb02 f303 	mul.w	r3, r2, r3
   26cee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26cf2:	03db      	lsls	r3, r3, #15
   26cf4:	099b      	lsrs	r3, r3, #6
   26cf6:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   26cfa:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   26cfe:	9908      	ldr	r1, [sp, #32]
   26d00:	f8d9 2000 	ldr.w	r2, [r9]
   26d04:	020b      	lsls	r3, r1, #8
   26d06:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26d0a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   26d0e:	4313      	orrs	r3, r2
   26d10:	f8c9 3000 	str.w	r3, [r9]
   26d14:	a809      	add	r0, sp, #36	; 0x24
   26d16:	f000 fbd7 	bl	274c8 <LLF_RND_WaitRngInterrupt>
   26d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26d1c:	f003 031a 	and.w	r3, r3, #26
   26d20:	4303      	orrs	r3, r0
   26d22:	f47f af7d 	bne.w	26c20 <getTrngSource+0xd0>
   26d26:	fbab 3b06 	umull	r3, fp, fp, r6
   26d2a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   26d2e:	930a      	str	r3, [sp, #40]	; 0x28
   26d30:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   26d34:	930b      	str	r3, [sp, #44]	; 0x2c
   26d36:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   26d3a:	930c      	str	r3, [sp, #48]	; 0x30
   26d3c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   26d40:	930d      	str	r3, [sp, #52]	; 0x34
   26d42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   26d46:	930e      	str	r3, [sp, #56]	; 0x38
   26d48:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   26d4c:	930f      	str	r3, [sp, #60]	; 0x3c
   26d4e:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   26d52:	d101      	bne.n	26d58 <getTrngSource+0x208>
   26d54:	9b03      	ldr	r3, [sp, #12]
   26d56:	b9eb      	cbnz	r3, 26d94 <getTrngSource+0x244>
   26d58:	4640      	mov	r0, r8
   26d5a:	2218      	movs	r2, #24
   26d5c:	a90a      	add	r1, sp, #40	; 0x28
   26d5e:	3e18      	subs	r6, #24
   26d60:	f108 0818 	add.w	r8, r8, #24
   26d64:	f7ff fd3c 	bl	267e0 <CC_PalMemCopyPlat>
   26d68:	3701      	adds	r7, #1
   26d6a:	2e00      	cmp	r6, #0
   26d6c:	f47f af29 	bne.w	26bc2 <getTrngSource+0x72>
   26d70:	9b06      	ldr	r3, [sp, #24]
   26d72:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   26d76:	d836      	bhi.n	26de6 <getTrngSource+0x296>
   26d78:	9e07      	ldr	r6, [sp, #28]
   26d7a:	696a      	ldr	r2, [r5, #20]
   26d7c:	4619      	mov	r1, r3
   26d7e:	4630      	mov	r0, r6
   26d80:	461f      	mov	r7, r3
   26d82:	f7ff fe75 	bl	26a70 <LLF_RND_RepetitionCounterTest.part.0>
   26d86:	b320      	cbz	r0, 26dd2 <getTrngSource+0x282>
   26d88:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   26d8a:	2300      	movs	r3, #0
   26d8c:	6013      	str	r3, [r2, #0]
   26d8e:	e72b      	b.n	26be8 <getTrngSource+0x98>
   26d90:	481b      	ldr	r0, [pc, #108]	; (26e00 <getTrngSource+0x2b0>)
   26d92:	e729      	b.n	26be8 <getTrngSource+0x98>
   26d94:	4640      	mov	r0, r8
   26d96:	461a      	mov	r2, r3
   26d98:	a90a      	add	r1, sp, #40	; 0x28
   26d9a:	1af6      	subs	r6, r6, r3
   26d9c:	4498      	add	r8, r3
   26d9e:	f7ff fd1f 	bl	267e0 <CC_PalMemCopyPlat>
   26da2:	e7e1      	b.n	26d68 <getTrngSource+0x218>
   26da4:	2303      	movs	r3, #3
   26da6:	9304      	str	r3, [sp, #16]
   26da8:	e770      	b.n	26c8c <getTrngSource+0x13c>
   26daa:	2302      	movs	r3, #2
   26dac:	9304      	str	r3, [sp, #16]
   26dae:	e76d      	b.n	26c8c <getTrngSource+0x13c>
   26db0:	6a2b      	ldr	r3, [r5, #32]
   26db2:	2b00      	cmp	r3, #0
   26db4:	f43f af1b 	beq.w	26bee <getTrngSource+0x9e>
   26db8:	4812      	ldr	r0, [pc, #72]	; (26e04 <getTrngSource+0x2b4>)
   26dba:	e718      	b.n	26bee <getTrngSource+0x9e>
   26dbc:	9100      	str	r1, [sp, #0]
   26dbe:	ab08      	add	r3, sp, #32
   26dc0:	2201      	movs	r2, #1
   26dc2:	4629      	mov	r1, r5
   26dc4:	4648      	mov	r0, r9
   26dc6:	f7ff fdab 	bl	26920 <startTrngHW>
   26dca:	2800      	cmp	r0, #0
   26dcc:	f43f aedf 	beq.w	26b8e <getTrngSource+0x3e>
   26dd0:	e70d      	b.n	26bee <getTrngSource+0x9e>
   26dd2:	69aa      	ldr	r2, [r5, #24]
   26dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   26dd8:	4639      	mov	r1, r7
   26dda:	4630      	mov	r0, r6
   26ddc:	f7ff fe72 	bl	26ac4 <LLF_RND_AdaptiveProportionTest>
   26de0:	2800      	cmp	r0, #0
   26de2:	d1d1      	bne.n	26d88 <getTrngSource+0x238>
   26de4:	e73d      	b.n	26c62 <getTrngSource+0x112>
   26de6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   26de8:	601e      	str	r6, [r3, #0]
   26dea:	e719      	b.n	26c20 <getTrngSource+0xd0>
   26dec:	5002b000 	.word	0x5002b000
   26df0:	aaaaaaab 	.word	0xaaaaaaab
   26df4:	00f10c02 	.word	0x00f10c02
   26df8:	00f10c30 	.word	0x00f10c30
   26dfc:	00f10c31 	.word	0x00f10c31
   26e00:	00f10c35 	.word	0x00f10c35
   26e04:	00f10c32 	.word	0x00f10c32

00026e08 <LLF_RND_GetTrngSource>:
   26e08:	b410      	push	{r4}
   26e0a:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   26e0e:	9401      	str	r4, [sp, #4]
   26e10:	9c03      	ldr	r4, [sp, #12]
   26e12:	9402      	str	r4, [sp, #8]
   26e14:	2400      	movs	r4, #0
   26e16:	9403      	str	r4, [sp, #12]
   26e18:	bc10      	pop	{r4}
   26e1a:	f7ff be99 	b.w	26b50 <getTrngSource>
   26e1e:	bf00      	nop

00026e20 <LLF_RND_RunTrngStartupTest>:
   26e20:	b510      	push	{r4, lr}
   26e22:	b086      	sub	sp, #24
   26e24:	ab05      	add	r3, sp, #20
   26e26:	2401      	movs	r4, #1
   26e28:	e9cd 2401 	strd	r2, r4, [sp, #4]
   26e2c:	9300      	str	r3, [sp, #0]
   26e2e:	2200      	movs	r2, #0
   26e30:	ab04      	add	r3, sp, #16
   26e32:	f7ff fe8d 	bl	26b50 <getTrngSource>
   26e36:	b006      	add	sp, #24
   26e38:	bd10      	pop	{r4, pc}
   26e3a:	bf00      	nop

00026e3c <mbedtls_hardware_poll>:
   26e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   26e3e:	b089      	sub	sp, #36	; 0x24
   26e40:	9205      	str	r2, [sp, #20]
   26e42:	2900      	cmp	r1, #0
   26e44:	d064      	beq.n	26f10 <mbedtls_hardware_poll+0xd4>
   26e46:	461c      	mov	r4, r3
   26e48:	2b00      	cmp	r3, #0
   26e4a:	d061      	beq.n	26f10 <mbedtls_hardware_poll+0xd4>
   26e4c:	4615      	mov	r5, r2
   26e4e:	2a00      	cmp	r2, #0
   26e50:	d05e      	beq.n	26f10 <mbedtls_hardware_poll+0xd4>
   26e52:	4f31      	ldr	r7, [pc, #196]	; (26f18 <mbedtls_hardware_poll+0xdc>)
   26e54:	460e      	mov	r6, r1
   26e56:	6838      	ldr	r0, [r7, #0]
   26e58:	f04f 31ff 	mov.w	r1, #4294967295
   26e5c:	f7ff fcdc 	bl	26818 <CC_PalMutexLock>
   26e60:	2800      	cmp	r0, #0
   26e62:	d14b      	bne.n	26efc <mbedtls_hardware_poll+0xc0>
   26e64:	2000      	movs	r0, #0
   26e66:	f7ff fd07 	bl	26878 <CC_PalPowerSaveModeSelect>
   26e6a:	2800      	cmp	r0, #0
   26e6c:	d142      	bne.n	26ef4 <mbedtls_hardware_poll+0xb8>
   26e6e:	482b      	ldr	r0, [pc, #172]	; (26f1c <mbedtls_hardware_poll+0xe0>)
   26e70:	f000 fa9a 	bl	273a8 <RNG_PLAT_SetUserRngParameters>
   26e74:	b1d8      	cbz	r0, 26eae <mbedtls_hardware_poll+0x72>
   26e76:	2001      	movs	r0, #1
   26e78:	f04f 36ff 	mov.w	r6, #4294967295
   26e7c:	f7ff fcfc 	bl	26878 <CC_PalPowerSaveModeSelect>
   26e80:	2800      	cmp	r0, #0
   26e82:	d133      	bne.n	26eec <mbedtls_hardware_poll+0xb0>
   26e84:	4826      	ldr	r0, [pc, #152]	; (26f20 <mbedtls_hardware_poll+0xe4>)
   26e86:	f44f 7108 	mov.w	r1, #544	; 0x220
   26e8a:	f7fe fe5f 	bl	25b4c <mbedtls_zeroize_internal>
   26e8e:	4825      	ldr	r0, [pc, #148]	; (26f24 <mbedtls_hardware_poll+0xe8>)
   26e90:	2104      	movs	r1, #4
   26e92:	f7fe fe5b 	bl	25b4c <mbedtls_zeroize_internal>
   26e96:	4821      	ldr	r0, [pc, #132]	; (26f1c <mbedtls_hardware_poll+0xe0>)
   26e98:	2128      	movs	r1, #40	; 0x28
   26e9a:	f7fe fe57 	bl	25b4c <mbedtls_zeroize_internal>
   26e9e:	6838      	ldr	r0, [r7, #0]
   26ea0:	f7ff fcc2 	bl	26828 <CC_PalMutexUnlock>
   26ea4:	2800      	cmp	r0, #0
   26ea6:	d12d      	bne.n	26f04 <mbedtls_hardware_poll+0xc8>
   26ea8:	4630      	mov	r0, r6
   26eaa:	b009      	add	sp, #36	; 0x24
   26eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26eae:	4b1c      	ldr	r3, [pc, #112]	; (26f20 <mbedtls_hardware_poll+0xe4>)
   26eb0:	9302      	str	r3, [sp, #8]
   26eb2:	ab07      	add	r3, sp, #28
   26eb4:	9003      	str	r0, [sp, #12]
   26eb6:	4602      	mov	r2, r0
   26eb8:	9300      	str	r3, [sp, #0]
   26eba:	4918      	ldr	r1, [pc, #96]	; (26f1c <mbedtls_hardware_poll+0xe0>)
   26ebc:	4819      	ldr	r0, [pc, #100]	; (26f24 <mbedtls_hardware_poll+0xe8>)
   26ebe:	9401      	str	r4, [sp, #4]
   26ec0:	ab05      	add	r3, sp, #20
   26ec2:	f7ff ffa1 	bl	26e08 <LLF_RND_GetTrngSource>
   26ec6:	4603      	mov	r3, r0
   26ec8:	2800      	cmp	r0, #0
   26eca:	d1d4      	bne.n	26e76 <mbedtls_hardware_poll+0x3a>
   26ecc:	6822      	ldr	r2, [r4, #0]
   26ece:	42aa      	cmp	r2, r5
   26ed0:	d3d1      	bcc.n	26e76 <mbedtls_hardware_poll+0x3a>
   26ed2:	9907      	ldr	r1, [sp, #28]
   26ed4:	4630      	mov	r0, r6
   26ed6:	3108      	adds	r1, #8
   26ed8:	462a      	mov	r2, r5
   26eda:	461e      	mov	r6, r3
   26edc:	f7ff fc80 	bl	267e0 <CC_PalMemCopyPlat>
   26ee0:	6025      	str	r5, [r4, #0]
   26ee2:	2001      	movs	r0, #1
   26ee4:	f7ff fcc8 	bl	26878 <CC_PalPowerSaveModeSelect>
   26ee8:	2800      	cmp	r0, #0
   26eea:	d0cb      	beq.n	26e84 <mbedtls_hardware_poll+0x48>
   26eec:	480e      	ldr	r0, [pc, #56]	; (26f28 <mbedtls_hardware_poll+0xec>)
   26eee:	f7fe fd17 	bl	25920 <CC_PalAbort>
   26ef2:	e7c7      	b.n	26e84 <mbedtls_hardware_poll+0x48>
   26ef4:	480d      	ldr	r0, [pc, #52]	; (26f2c <mbedtls_hardware_poll+0xf0>)
   26ef6:	f7fe fd13 	bl	25920 <CC_PalAbort>
   26efa:	e7b8      	b.n	26e6e <mbedtls_hardware_poll+0x32>
   26efc:	480c      	ldr	r0, [pc, #48]	; (26f30 <mbedtls_hardware_poll+0xf4>)
   26efe:	f7fe fd0f 	bl	25920 <CC_PalAbort>
   26f02:	e7af      	b.n	26e64 <mbedtls_hardware_poll+0x28>
   26f04:	480b      	ldr	r0, [pc, #44]	; (26f34 <mbedtls_hardware_poll+0xf8>)
   26f06:	f7fe fd0b 	bl	25920 <CC_PalAbort>
   26f0a:	4630      	mov	r0, r6
   26f0c:	b009      	add	sp, #36	; 0x24
   26f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26f10:	f04f 36ff 	mov.w	r6, #4294967295
   26f14:	e7c8      	b.n	26ea8 <mbedtls_hardware_poll+0x6c>
   26f16:	bf00      	nop
   26f18:	2000094c 	.word	0x2000094c
   26f1c:	200044cc 	.word	0x200044cc
   26f20:	200042ac 	.word	0x200042ac
   26f24:	200042a8 	.word	0x200042a8
   26f28:	00033f7c 	.word	0x00033f7c
   26f2c:	00033f5c 	.word	0x00033f5c
   26f30:	00033f44 	.word	0x00033f44
   26f34:	00033fd4 	.word	0x00033fd4

00026f38 <cc_mbedtls_aes_init>:
   26f38:	b510      	push	{r4, lr}
   26f3a:	4604      	mov	r4, r0
   26f3c:	b130      	cbz	r0, 26f4c <cc_mbedtls_aes_init+0x14>
   26f3e:	2200      	movs	r2, #0
   26f40:	2301      	movs	r3, #1
   26f42:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   26f46:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   26f4a:	bd10      	pop	{r4, pc}
   26f4c:	4801      	ldr	r0, [pc, #4]	; (26f54 <cc_mbedtls_aes_init+0x1c>)
   26f4e:	f7fe fce7 	bl	25920 <CC_PalAbort>
   26f52:	e7f4      	b.n	26f3e <cc_mbedtls_aes_init+0x6>
   26f54:	00033fec 	.word	0x00033fec

00026f58 <cc_mbedtls_aes_free>:
   26f58:	b118      	cbz	r0, 26f62 <cc_mbedtls_aes_free+0xa>
   26f5a:	2274      	movs	r2, #116	; 0x74
   26f5c:	2100      	movs	r1, #0
   26f5e:	f7ff bc41 	b.w	267e4 <CC_PalMemSetPlat>
   26f62:	4770      	bx	lr

00026f64 <cc_mbedtls_aes_setkey_enc>:
   26f64:	b190      	cbz	r0, 26f8c <cc_mbedtls_aes_setkey_enc+0x28>
   26f66:	b1a1      	cbz	r1, 26f92 <cc_mbedtls_aes_setkey_enc+0x2e>
   26f68:	b510      	push	{r4, lr}
   26f6a:	2a80      	cmp	r2, #128	; 0x80
   26f6c:	f04f 0400 	mov.w	r4, #0
   26f70:	6384      	str	r4, [r0, #56]	; 0x38
   26f72:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   26f76:	d106      	bne.n	26f86 <cc_mbedtls_aes_setkey_enc+0x22>
   26f78:	2210      	movs	r2, #16
   26f7a:	6304      	str	r4, [r0, #48]	; 0x30
   26f7c:	4410      	add	r0, r2
   26f7e:	f7ff fc2f 	bl	267e0 <CC_PalMemCopyPlat>
   26f82:	4620      	mov	r0, r4
   26f84:	bd10      	pop	{r4, pc}
   26f86:	f06f 001f 	mvn.w	r0, #31
   26f8a:	bd10      	pop	{r4, pc}
   26f8c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   26f90:	4770      	bx	lr
   26f92:	f06f 001f 	mvn.w	r0, #31
   26f96:	4770      	bx	lr

00026f98 <cc_mbedtls_aes_crypt_ecb>:
   26f98:	b328      	cbz	r0, 26fe6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   26f9a:	b322      	cbz	r2, 26fe6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   26f9c:	b31b      	cbz	r3, 26fe6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   26f9e:	2901      	cmp	r1, #1
   26fa0:	d821      	bhi.n	26fe6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   26fa2:	b570      	push	{r4, r5, r6, lr}
   26fa4:	4604      	mov	r4, r0
   26fa6:	6b81      	ldr	r1, [r0, #56]	; 0x38
   26fa8:	b086      	sub	sp, #24
   26faa:	d017      	beq.n	26fdc <cc_mbedtls_aes_crypt_ecb+0x44>
   26fac:	2901      	cmp	r1, #1
   26fae:	d117      	bne.n	26fe0 <cc_mbedtls_aes_crypt_ecb+0x48>
   26fb0:	2510      	movs	r5, #16
   26fb2:	2100      	movs	r1, #0
   26fb4:	eb0d 0605 	add.w	r6, sp, r5
   26fb8:	6361      	str	r1, [r4, #52]	; 0x34
   26fba:	4610      	mov	r0, r2
   26fbc:	9500      	str	r5, [sp, #0]
   26fbe:	9601      	str	r6, [sp, #4]
   26fc0:	aa02      	add	r2, sp, #8
   26fc2:	4629      	mov	r1, r5
   26fc4:	f000 faca 	bl	2755c <SetDataBuffersInfo>
   26fc8:	b950      	cbnz	r0, 26fe0 <cc_mbedtls_aes_crypt_ecb+0x48>
   26fca:	462b      	mov	r3, r5
   26fcc:	4632      	mov	r2, r6
   26fce:	a902      	add	r1, sp, #8
   26fd0:	4620      	mov	r0, r4
   26fd2:	f000 fd4b 	bl	27a6c <ProcessAesDrv>
   26fd6:	b918      	cbnz	r0, 26fe0 <cc_mbedtls_aes_crypt_ecb+0x48>
   26fd8:	b006      	add	sp, #24
   26fda:	bd70      	pop	{r4, r5, r6, pc}
   26fdc:	2900      	cmp	r1, #0
   26fde:	d0e7      	beq.n	26fb0 <cc_mbedtls_aes_crypt_ecb+0x18>
   26fe0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   26fe4:	e7f8      	b.n	26fd8 <cc_mbedtls_aes_crypt_ecb+0x40>
   26fe6:	f06f 0021 	mvn.w	r0, #33	; 0x21
   26fea:	4770      	bx	lr

00026fec <cc_mbedtls_sha256_init>:
   26fec:	b510      	push	{r4, lr}
   26fee:	4604      	mov	r4, r0
   26ff0:	b128      	cbz	r0, 26ffe <cc_mbedtls_sha256_init+0x12>
   26ff2:	4620      	mov	r0, r4
   26ff4:	21f4      	movs	r1, #244	; 0xf4
   26ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26ffa:	f7ff bbf5 	b.w	267e8 <CC_PalMemSetZeroPlat>
   26ffe:	4804      	ldr	r0, [pc, #16]	; (27010 <cc_mbedtls_sha256_init+0x24>)
   27000:	f7fe fc8e 	bl	25920 <CC_PalAbort>
   27004:	4620      	mov	r0, r4
   27006:	21f4      	movs	r1, #244	; 0xf4
   27008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2700c:	f7ff bbec 	b.w	267e8 <CC_PalMemSetZeroPlat>
   27010:	00034000 	.word	0x00034000

00027014 <cc_mbedtls_sha256_free>:
   27014:	b110      	cbz	r0, 2701c <cc_mbedtls_sha256_free+0x8>
   27016:	21f4      	movs	r1, #244	; 0xf4
   27018:	f7fe bd98 	b.w	25b4c <mbedtls_zeroize_internal>
   2701c:	4770      	bx	lr
   2701e:	bf00      	nop

00027020 <cc_mbedtls_sha256_starts>:
   27020:	b508      	push	{r3, lr}
   27022:	b161      	cbz	r1, 2703e <cc_mbedtls_sha256_starts+0x1e>
   27024:	2901      	cmp	r1, #1
   27026:	d107      	bne.n	27038 <cc_mbedtls_sha256_starts+0x18>
   27028:	2102      	movs	r1, #2
   2702a:	f000 f85b 	bl	270e4 <mbedtls_sha_starts_internal>
   2702e:	2800      	cmp	r0, #0
   27030:	bf18      	it	ne
   27032:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   27036:	bd08      	pop	{r3, pc}
   27038:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2703c:	bd08      	pop	{r3, pc}
   2703e:	2101      	movs	r1, #1
   27040:	f000 f850 	bl	270e4 <mbedtls_sha_starts_internal>
   27044:	e7f3      	b.n	2702e <cc_mbedtls_sha256_starts+0xe>
   27046:	bf00      	nop

00027048 <cc_mbedtls_sha256_update>:
   27048:	b530      	push	{r4, r5, lr}
   2704a:	4605      	mov	r5, r0
   2704c:	1888      	adds	r0, r1, r2
   2704e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   27052:	b0a1      	sub	sp, #132	; 0x84
   27054:	460b      	mov	r3, r1
   27056:	4614      	mov	r4, r2
   27058:	d801      	bhi.n	2705e <cc_mbedtls_sha256_update+0x16>
   2705a:	2a80      	cmp	r2, #128	; 0x80
   2705c:	d90c      	bls.n	27078 <cc_mbedtls_sha256_update+0x30>
   2705e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   27062:	d917      	bls.n	27094 <cc_mbedtls_sha256_update+0x4c>
   27064:	4622      	mov	r2, r4
   27066:	4619      	mov	r1, r3
   27068:	4628      	mov	r0, r5
   2706a:	f000 f87d 	bl	27168 <mbedtls_sha_update_internal>
   2706e:	4604      	mov	r4, r0
   27070:	b984      	cbnz	r4, 27094 <cc_mbedtls_sha256_update+0x4c>
   27072:	4620      	mov	r0, r4
   27074:	b021      	add	sp, #132	; 0x84
   27076:	bd30      	pop	{r4, r5, pc}
   27078:	4668      	mov	r0, sp
   2707a:	f7ff fbb1 	bl	267e0 <CC_PalMemCopyPlat>
   2707e:	4622      	mov	r2, r4
   27080:	4669      	mov	r1, sp
   27082:	4628      	mov	r0, r5
   27084:	f000 f870 	bl	27168 <mbedtls_sha_update_internal>
   27088:	2180      	movs	r1, #128	; 0x80
   2708a:	4604      	mov	r4, r0
   2708c:	4668      	mov	r0, sp
   2708e:	f7ff fbab 	bl	267e8 <CC_PalMemSetZeroPlat>
   27092:	e7ed      	b.n	27070 <cc_mbedtls_sha256_update+0x28>
   27094:	f06f 0436 	mvn.w	r4, #54	; 0x36
   27098:	e7eb      	b.n	27072 <cc_mbedtls_sha256_update+0x2a>
   2709a:	bf00      	nop

0002709c <cc_mbedtls_sha256_finish>:
   2709c:	b570      	push	{r4, r5, r6, lr}
   2709e:	b1e8      	cbz	r0, 270dc <cc_mbedtls_sha256_finish+0x40>
   270a0:	460e      	mov	r6, r1
   270a2:	b1d9      	cbz	r1, 270dc <cc_mbedtls_sha256_finish+0x40>
   270a4:	4604      	mov	r4, r0
   270a6:	f000 f831 	bl	2710c <mbedtls_sha_finish_internal>
   270aa:	4605      	mov	r5, r0
   270ac:	b9b0      	cbnz	r0, 270dc <cc_mbedtls_sha256_finish+0x40>
   270ae:	6823      	ldr	r3, [r4, #0]
   270b0:	2b01      	cmp	r3, #1
   270b2:	d00b      	beq.n	270cc <cc_mbedtls_sha256_finish+0x30>
   270b4:	2b02      	cmp	r3, #2
   270b6:	d001      	beq.n	270bc <cc_mbedtls_sha256_finish+0x20>
   270b8:	4628      	mov	r0, r5
   270ba:	bd70      	pop	{r4, r5, r6, pc}
   270bc:	221c      	movs	r2, #28
   270be:	f104 0108 	add.w	r1, r4, #8
   270c2:	4630      	mov	r0, r6
   270c4:	f7ff fb8c 	bl	267e0 <CC_PalMemCopyPlat>
   270c8:	4628      	mov	r0, r5
   270ca:	bd70      	pop	{r4, r5, r6, pc}
   270cc:	2220      	movs	r2, #32
   270ce:	f104 0108 	add.w	r1, r4, #8
   270d2:	4630      	mov	r0, r6
   270d4:	f7ff fb84 	bl	267e0 <CC_PalMemCopyPlat>
   270d8:	4628      	mov	r0, r5
   270da:	bd70      	pop	{r4, r5, r6, pc}
   270dc:	f06f 0536 	mvn.w	r5, #54	; 0x36
   270e0:	e7ea      	b.n	270b8 <cc_mbedtls_sha256_finish+0x1c>
   270e2:	bf00      	nop

000270e4 <mbedtls_sha_starts_internal>:
   270e4:	b178      	cbz	r0, 27106 <mbedtls_sha_starts_internal+0x22>
   270e6:	b538      	push	{r3, r4, r5, lr}
   270e8:	4604      	mov	r4, r0
   270ea:	460d      	mov	r5, r1
   270ec:	21f0      	movs	r1, #240	; 0xf0
   270ee:	f7ff fb7b 	bl	267e8 <CC_PalMemSetZeroPlat>
   270f2:	2340      	movs	r3, #64	; 0x40
   270f4:	6025      	str	r5, [r4, #0]
   270f6:	65e3      	str	r3, [r4, #92]	; 0x5c
   270f8:	4620      	mov	r0, r4
   270fa:	f000 fa63 	bl	275c4 <InitHashDrv>
   270fe:	3800      	subs	r0, #0
   27100:	bf18      	it	ne
   27102:	2001      	movne	r0, #1
   27104:	bd38      	pop	{r3, r4, r5, pc}
   27106:	2001      	movs	r0, #1
   27108:	4770      	bx	lr
   2710a:	bf00      	nop

0002710c <mbedtls_sha_finish_internal>:
   2710c:	b570      	push	{r4, r5, r6, lr}
   2710e:	6e05      	ldr	r5, [r0, #96]	; 0x60
   27110:	b0a4      	sub	sp, #144	; 0x90
   27112:	4604      	mov	r4, r0
   27114:	ae04      	add	r6, sp, #16
   27116:	b9e5      	cbnz	r5, 27152 <mbedtls_sha_finish_internal+0x46>
   27118:	2201      	movs	r2, #1
   2711a:	2300      	movs	r3, #0
   2711c:	6062      	str	r2, [r4, #4]
   2711e:	4630      	mov	r0, r6
   27120:	e9cd 3300 	strd	r3, r3, [sp]
   27124:	aa02      	add	r2, sp, #8
   27126:	4629      	mov	r1, r5
   27128:	f000 fa18 	bl	2755c <SetDataBuffersInfo>
   2712c:	b110      	cbz	r0, 27134 <mbedtls_sha_finish_internal+0x28>
   2712e:	2001      	movs	r0, #1
   27130:	b024      	add	sp, #144	; 0x90
   27132:	bd70      	pop	{r4, r5, r6, pc}
   27134:	462a      	mov	r2, r5
   27136:	a902      	add	r1, sp, #8
   27138:	4620      	mov	r0, r4
   2713a:	f000 fa6d 	bl	27618 <ProcessHashDrv>
   2713e:	2800      	cmp	r0, #0
   27140:	d1f5      	bne.n	2712e <mbedtls_sha_finish_internal+0x22>
   27142:	4620      	mov	r0, r4
   27144:	f000 fb7e 	bl	27844 <FinishHashDrv>
   27148:	2800      	cmp	r0, #0
   2714a:	d1f0      	bne.n	2712e <mbedtls_sha_finish_internal+0x22>
   2714c:	6620      	str	r0, [r4, #96]	; 0x60
   2714e:	b024      	add	sp, #144	; 0x90
   27150:	bd70      	pop	{r4, r5, r6, pc}
   27152:	2d80      	cmp	r5, #128	; 0x80
   27154:	462a      	mov	r2, r5
   27156:	f100 0164 	add.w	r1, r0, #100	; 0x64
   2715a:	bf28      	it	cs
   2715c:	2280      	movcs	r2, #128	; 0x80
   2715e:	4630      	mov	r0, r6
   27160:	f7ff fb3e 	bl	267e0 <CC_PalMemCopyPlat>
   27164:	6e25      	ldr	r5, [r4, #96]	; 0x60
   27166:	e7d7      	b.n	27118 <mbedtls_sha_finish_internal+0xc>

00027168 <mbedtls_sha_update_internal>:
   27168:	2800      	cmp	r0, #0
   2716a:	f000 80cd 	beq.w	27308 <mbedtls_sha_update_internal+0x1a0>
   2716e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27172:	4615      	mov	r5, r2
   27174:	b0a5      	sub	sp, #148	; 0x94
   27176:	2a00      	cmp	r2, #0
   27178:	f000 80b4 	beq.w	272e4 <mbedtls_sha_update_internal+0x17c>
   2717c:	460f      	mov	r7, r1
   2717e:	2900      	cmp	r1, #0
   27180:	f000 80ac 	beq.w	272dc <mbedtls_sha_update_internal+0x174>
   27184:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   27188:	4606      	mov	r6, r0
   2718a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   2718c:	d37d      	bcc.n	2728a <mbedtls_sha_update_internal+0x122>
   2718e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   27192:	f106 0964 	add.w	r9, r6, #100	; 0x64
   27196:	e014      	b.n	271c2 <mbedtls_sha_update_internal+0x5a>
   27198:	4283      	cmp	r3, r0
   2719a:	46ba      	mov	sl, r7
   2719c:	f64f 74ff 	movw	r4, #65535	; 0xffff
   271a0:	d029      	beq.n	271f6 <mbedtls_sha_update_internal+0x8e>
   271a2:	fbb4 fbf3 	udiv	fp, r4, r3
   271a6:	fb03 fb0b 	mul.w	fp, r3, fp
   271aa:	f1bb 0f00 	cmp.w	fp, #0
   271ae:	d144      	bne.n	2723a <mbedtls_sha_update_internal+0xd2>
   271b0:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   271b4:	4447      	add	r7, r8
   271b6:	3dff      	subs	r5, #255	; 0xff
   271b8:	2c00      	cmp	r4, #0
   271ba:	d159      	bne.n	27270 <mbedtls_sha_update_internal+0x108>
   271bc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   271c0:	d363      	bcc.n	2728a <mbedtls_sha_update_internal+0x122>
   271c2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   271c4:	1a1c      	subs	r4, r3, r0
   271c6:	fbb4 f2f3 	udiv	r2, r4, r3
   271ca:	fb03 4412 	mls	r4, r3, r2, r4
   271ce:	2c00      	cmp	r4, #0
   271d0:	d0e2      	beq.n	27198 <mbedtls_sha_update_internal+0x30>
   271d2:	4544      	cmp	r4, r8
   271d4:	bf28      	it	cs
   271d6:	4644      	movcs	r4, r8
   271d8:	4622      	mov	r2, r4
   271da:	4448      	add	r0, r9
   271dc:	4639      	mov	r1, r7
   271de:	f7ff faff 	bl	267e0 <CC_PalMemCopyPlat>
   271e2:	6e30      	ldr	r0, [r6, #96]	; 0x60
   271e4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   271e6:	4420      	add	r0, r4
   271e8:	4283      	cmp	r3, r0
   271ea:	eb07 0a04 	add.w	sl, r7, r4
   271ee:	6630      	str	r0, [r6, #96]	; 0x60
   271f0:	eba8 0404 	sub.w	r4, r8, r4
   271f4:	d1d5      	bne.n	271a2 <mbedtls_sha_update_internal+0x3a>
   271f6:	2b80      	cmp	r3, #128	; 0x80
   271f8:	bf28      	it	cs
   271fa:	2380      	movcs	r3, #128	; 0x80
   271fc:	461a      	mov	r2, r3
   271fe:	4649      	mov	r1, r9
   27200:	a804      	add	r0, sp, #16
   27202:	f7ff faed 	bl	267e0 <CC_PalMemCopyPlat>
   27206:	2300      	movs	r3, #0
   27208:	e9cd 3300 	strd	r3, r3, [sp]
   2720c:	aa02      	add	r2, sp, #8
   2720e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   27210:	a804      	add	r0, sp, #16
   27212:	f000 f9a3 	bl	2755c <SetDataBuffersInfo>
   27216:	2800      	cmp	r0, #0
   27218:	d160      	bne.n	272dc <mbedtls_sha_update_internal+0x174>
   2721a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2721c:	a902      	add	r1, sp, #8
   2721e:	4630      	mov	r0, r6
   27220:	f000 f9fa 	bl	27618 <ProcessHashDrv>
   27224:	2800      	cmp	r0, #0
   27226:	d159      	bne.n	272dc <mbedtls_sha_update_internal+0x174>
   27228:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   2722a:	fbb4 fbf3 	udiv	fp, r4, r3
   2722e:	fb03 fb0b 	mul.w	fp, r3, fp
   27232:	6630      	str	r0, [r6, #96]	; 0x60
   27234:	f1bb 0f00 	cmp.w	fp, #0
   27238:	d0ba      	beq.n	271b0 <mbedtls_sha_update_internal+0x48>
   2723a:	2300      	movs	r3, #0
   2723c:	e9cd 3300 	strd	r3, r3, [sp]
   27240:	aa02      	add	r2, sp, #8
   27242:	4659      	mov	r1, fp
   27244:	4650      	mov	r0, sl
   27246:	f000 f989 	bl	2755c <SetDataBuffersInfo>
   2724a:	2800      	cmp	r0, #0
   2724c:	d146      	bne.n	272dc <mbedtls_sha_update_internal+0x174>
   2724e:	a902      	add	r1, sp, #8
   27250:	465a      	mov	r2, fp
   27252:	4630      	mov	r0, r6
   27254:	f000 f9e0 	bl	27618 <ProcessHashDrv>
   27258:	2800      	cmp	r0, #0
   2725a:	d13f      	bne.n	272dc <mbedtls_sha_update_internal+0x174>
   2725c:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   27260:	eba4 040b 	sub.w	r4, r4, fp
   27264:	6e30      	ldr	r0, [r6, #96]	; 0x60
   27266:	44da      	add	sl, fp
   27268:	4447      	add	r7, r8
   2726a:	3dff      	subs	r5, #255	; 0xff
   2726c:	2c00      	cmp	r4, #0
   2726e:	d0a5      	beq.n	271bc <mbedtls_sha_update_internal+0x54>
   27270:	3019      	adds	r0, #25
   27272:	4651      	mov	r1, sl
   27274:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   27278:	4622      	mov	r2, r4
   2727a:	f7ff fab1 	bl	267e0 <CC_PalMemCopyPlat>
   2727e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   27280:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   27284:	4420      	add	r0, r4
   27286:	6630      	str	r0, [r6, #96]	; 0x60
   27288:	d29b      	bcs.n	271c2 <mbedtls_sha_update_internal+0x5a>
   2728a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2728c:	1a14      	subs	r4, r2, r0
   2728e:	fbb4 f3f2 	udiv	r3, r4, r2
   27292:	fb02 4413 	mls	r4, r2, r3, r4
   27296:	42ac      	cmp	r4, r5
   27298:	bf28      	it	cs
   2729a:	462c      	movcs	r4, r5
   2729c:	bb34      	cbnz	r4, 272ec <mbedtls_sha_update_internal+0x184>
   2729e:	4290      	cmp	r0, r2
   272a0:	d034      	beq.n	2730c <mbedtls_sha_update_internal+0x1a4>
   272a2:	fbb5 f4f2 	udiv	r4, r5, r2
   272a6:	fb02 f404 	mul.w	r4, r2, r4
   272aa:	b96c      	cbnz	r4, 272c8 <mbedtls_sha_update_internal+0x160>
   272ac:	b1d5      	cbz	r5, 272e4 <mbedtls_sha_update_internal+0x17c>
   272ae:	6e33      	ldr	r3, [r6, #96]	; 0x60
   272b0:	3319      	adds	r3, #25
   272b2:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   272b6:	462a      	mov	r2, r5
   272b8:	4639      	mov	r1, r7
   272ba:	f7ff fa91 	bl	267e0 <CC_PalMemCopyPlat>
   272be:	6e33      	ldr	r3, [r6, #96]	; 0x60
   272c0:	442b      	add	r3, r5
   272c2:	2000      	movs	r0, #0
   272c4:	6633      	str	r3, [r6, #96]	; 0x60
   272c6:	e00a      	b.n	272de <mbedtls_sha_update_internal+0x176>
   272c8:	2300      	movs	r3, #0
   272ca:	e9cd 3300 	strd	r3, r3, [sp]
   272ce:	aa02      	add	r2, sp, #8
   272d0:	4621      	mov	r1, r4
   272d2:	4638      	mov	r0, r7
   272d4:	f000 f942 	bl	2755c <SetDataBuffersInfo>
   272d8:	2800      	cmp	r0, #0
   272da:	d033      	beq.n	27344 <mbedtls_sha_update_internal+0x1dc>
   272dc:	2001      	movs	r0, #1
   272de:	b025      	add	sp, #148	; 0x94
   272e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272e4:	4628      	mov	r0, r5
   272e6:	b025      	add	sp, #148	; 0x94
   272e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272ec:	f106 0364 	add.w	r3, r6, #100	; 0x64
   272f0:	4639      	mov	r1, r7
   272f2:	4622      	mov	r2, r4
   272f4:	4418      	add	r0, r3
   272f6:	f7ff fa73 	bl	267e0 <CC_PalMemCopyPlat>
   272fa:	6e30      	ldr	r0, [r6, #96]	; 0x60
   272fc:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   272fe:	4420      	add	r0, r4
   27300:	1b2d      	subs	r5, r5, r4
   27302:	4427      	add	r7, r4
   27304:	6630      	str	r0, [r6, #96]	; 0x60
   27306:	e7ca      	b.n	2729e <mbedtls_sha_update_internal+0x136>
   27308:	2001      	movs	r0, #1
   2730a:	4770      	bx	lr
   2730c:	2a80      	cmp	r2, #128	; 0x80
   2730e:	bf28      	it	cs
   27310:	2280      	movcs	r2, #128	; 0x80
   27312:	f106 0164 	add.w	r1, r6, #100	; 0x64
   27316:	a804      	add	r0, sp, #16
   27318:	f7ff fa62 	bl	267e0 <CC_PalMemCopyPlat>
   2731c:	2300      	movs	r3, #0
   2731e:	e9cd 3300 	strd	r3, r3, [sp]
   27322:	a804      	add	r0, sp, #16
   27324:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   27326:	aa02      	add	r2, sp, #8
   27328:	f000 f918 	bl	2755c <SetDataBuffersInfo>
   2732c:	2800      	cmp	r0, #0
   2732e:	d1d5      	bne.n	272dc <mbedtls_sha_update_internal+0x174>
   27330:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   27332:	a902      	add	r1, sp, #8
   27334:	4630      	mov	r0, r6
   27336:	f000 f96f 	bl	27618 <ProcessHashDrv>
   2733a:	2800      	cmp	r0, #0
   2733c:	d1ce      	bne.n	272dc <mbedtls_sha_update_internal+0x174>
   2733e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   27340:	6630      	str	r0, [r6, #96]	; 0x60
   27342:	e7ae      	b.n	272a2 <mbedtls_sha_update_internal+0x13a>
   27344:	a902      	add	r1, sp, #8
   27346:	4622      	mov	r2, r4
   27348:	4630      	mov	r0, r6
   2734a:	f000 f965 	bl	27618 <ProcessHashDrv>
   2734e:	2800      	cmp	r0, #0
   27350:	d1c4      	bne.n	272dc <mbedtls_sha_update_internal+0x174>
   27352:	4427      	add	r7, r4
   27354:	1b2d      	subs	r5, r5, r4
   27356:	e7a9      	b.n	272ac <mbedtls_sha_update_internal+0x144>

00027358 <cc_mbedtls_sha256>:
   27358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2735a:	461c      	mov	r4, r3
   2735c:	4605      	mov	r5, r0
   2735e:	4811      	ldr	r0, [pc, #68]	; (273a4 <cc_mbedtls_sha256+0x4c>)
   27360:	460e      	mov	r6, r1
   27362:	4617      	mov	r7, r2
   27364:	f7ff fe42 	bl	26fec <cc_mbedtls_sha256_init>
   27368:	4621      	mov	r1, r4
   2736a:	480e      	ldr	r0, [pc, #56]	; (273a4 <cc_mbedtls_sha256+0x4c>)
   2736c:	f7ff fe58 	bl	27020 <cc_mbedtls_sha256_starts>
   27370:	4604      	mov	r4, r0
   27372:	b120      	cbz	r0, 2737e <cc_mbedtls_sha256+0x26>
   27374:	480b      	ldr	r0, [pc, #44]	; (273a4 <cc_mbedtls_sha256+0x4c>)
   27376:	f7ff fe4d 	bl	27014 <cc_mbedtls_sha256_free>
   2737a:	4620      	mov	r0, r4
   2737c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2737e:	4809      	ldr	r0, [pc, #36]	; (273a4 <cc_mbedtls_sha256+0x4c>)
   27380:	4632      	mov	r2, r6
   27382:	4629      	mov	r1, r5
   27384:	f7ff fe60 	bl	27048 <cc_mbedtls_sha256_update>
   27388:	4604      	mov	r4, r0
   2738a:	2800      	cmp	r0, #0
   2738c:	d1f2      	bne.n	27374 <cc_mbedtls_sha256+0x1c>
   2738e:	4639      	mov	r1, r7
   27390:	4804      	ldr	r0, [pc, #16]	; (273a4 <cc_mbedtls_sha256+0x4c>)
   27392:	f7ff fe83 	bl	2709c <cc_mbedtls_sha256_finish>
   27396:	4604      	mov	r4, r0
   27398:	4802      	ldr	r0, [pc, #8]	; (273a4 <cc_mbedtls_sha256+0x4c>)
   2739a:	f7ff fe3b 	bl	27014 <cc_mbedtls_sha256_free>
   2739e:	4620      	mov	r0, r4
   273a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   273a2:	bf00      	nop
   273a4:	200044f4 	.word	0x200044f4

000273a8 <RNG_PLAT_SetUserRngParameters>:
   273a8:	b530      	push	{r4, r5, lr}
   273aa:	b083      	sub	sp, #12
   273ac:	231c      	movs	r3, #28
   273ae:	a901      	add	r1, sp, #4
   273b0:	4604      	mov	r4, r0
   273b2:	9301      	str	r3, [sp, #4]
   273b4:	f000 f834 	bl	27420 <CC_PalTrngParamGet>
   273b8:	4605      	mov	r5, r0
   273ba:	b938      	cbnz	r0, 273cc <RNG_PLAT_SetUserRngParameters+0x24>
   273bc:	9b01      	ldr	r3, [sp, #4]
   273be:	2b1c      	cmp	r3, #28
   273c0:	d007      	beq.n	273d2 <RNG_PLAT_SetUserRngParameters+0x2a>
   273c2:	4d15      	ldr	r5, [pc, #84]	; (27418 <RNG_PLAT_SetUserRngParameters+0x70>)
   273c4:	211c      	movs	r1, #28
   273c6:	4620      	mov	r0, r4
   273c8:	f7ff fa0e 	bl	267e8 <CC_PalMemSetZeroPlat>
   273cc:	4628      	mov	r0, r5
   273ce:	b003      	add	sp, #12
   273d0:	bd30      	pop	{r4, r5, pc}
   273d2:	e9d4 3200 	ldrd	r3, r2, [r4]
   273d6:	2101      	movs	r1, #1
   273d8:	3b00      	subs	r3, #0
   273da:	61e1      	str	r1, [r4, #28]
   273dc:	bf18      	it	ne
   273de:	2301      	movne	r3, #1
   273e0:	b10a      	cbz	r2, 273e6 <RNG_PLAT_SetUserRngParameters+0x3e>
   273e2:	f043 0302 	orr.w	r3, r3, #2
   273e6:	68a2      	ldr	r2, [r4, #8]
   273e8:	b932      	cbnz	r2, 273f8 <RNG_PLAT_SetUserRngParameters+0x50>
   273ea:	68e2      	ldr	r2, [r4, #12]
   273ec:	b942      	cbnz	r2, 27400 <RNG_PLAT_SetUserRngParameters+0x58>
   273ee:	e9c4 3208 	strd	r3, r2, [r4, #32]
   273f2:	b97b      	cbnz	r3, 27414 <RNG_PLAT_SetUserRngParameters+0x6c>
   273f4:	4d09      	ldr	r5, [pc, #36]	; (2741c <RNG_PLAT_SetUserRngParameters+0x74>)
   273f6:	e7e5      	b.n	273c4 <RNG_PLAT_SetUserRngParameters+0x1c>
   273f8:	68e2      	ldr	r2, [r4, #12]
   273fa:	f043 0304 	orr.w	r3, r3, #4
   273fe:	b13a      	cbz	r2, 27410 <RNG_PLAT_SetUserRngParameters+0x68>
   27400:	f043 0308 	orr.w	r3, r3, #8
   27404:	2200      	movs	r2, #0
   27406:	4628      	mov	r0, r5
   27408:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2740c:	b003      	add	sp, #12
   2740e:	bd30      	pop	{r4, r5, pc}
   27410:	e9c4 3208 	strd	r3, r2, [r4, #32]
   27414:	4615      	mov	r5, r2
   27416:	e7d9      	b.n	273cc <RNG_PLAT_SetUserRngParameters+0x24>
   27418:	00f00c37 	.word	0x00f00c37
   2741c:	00f00c0e 	.word	0x00f00c0e

00027420 <CC_PalTrngParamGet>:
   27420:	b118      	cbz	r0, 2742a <CC_PalTrngParamGet+0xa>
   27422:	b111      	cbz	r1, 2742a <CC_PalTrngParamGet+0xa>
   27424:	680b      	ldr	r3, [r1, #0]
   27426:	2b1c      	cmp	r3, #28
   27428:	d001      	beq.n	2742e <CC_PalTrngParamGet+0xe>
   2742a:	2001      	movs	r0, #1
   2742c:	4770      	bx	lr
   2742e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27432:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   27436:	3201      	adds	r2, #1
   27438:	bf14      	ite	ne
   2743a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   2743e:	f241 225c 	movweq	r2, #4700	; 0x125c
   27442:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27446:	6002      	str	r2, [r0, #0]
   27448:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   2744c:	3201      	adds	r2, #1
   2744e:	bf14      	ite	ne
   27450:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   27454:	f641 1264 	movweq	r2, #6500	; 0x1964
   27458:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2745c:	6042      	str	r2, [r0, #4]
   2745e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   27462:	3201      	adds	r2, #1
   27464:	bf14      	ite	ne
   27466:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   2746a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   2746e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27472:	6082      	str	r2, [r0, #8]
   27474:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   27478:	3201      	adds	r2, #1
   2747a:	bf14      	ite	ne
   2747c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   27480:	f241 3288 	movweq	r2, #5000	; 0x1388
   27484:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27488:	60c2      	str	r2, [r0, #12]
   2748a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   2748e:	3201      	adds	r2, #1
   27490:	bf14      	ite	ne
   27492:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   27496:	2290      	moveq	r2, #144	; 0x90
   27498:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2749c:	6102      	str	r2, [r0, #16]
   2749e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   274a2:	3201      	adds	r2, #1
   274a4:	bf14      	ite	ne
   274a6:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   274aa:	2251      	moveq	r2, #81	; 0x51
   274ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   274b0:	6142      	str	r2, [r0, #20]
   274b2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   274b6:	3201      	adds	r2, #1
   274b8:	bf14      	ite	ne
   274ba:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   274be:	f240 3337 	movweq	r3, #823	; 0x337
   274c2:	6183      	str	r3, [r0, #24]
   274c4:	2000      	movs	r0, #0
   274c6:	4770      	bx	lr

000274c8 <LLF_RND_WaitRngInterrupt>:
   274c8:	b508      	push	{r3, lr}
   274ca:	4601      	mov	r1, r0
   274cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   274d0:	f7ff f912 	bl	266f8 <CC_HalWaitInterruptRND>
   274d4:	4b03      	ldr	r3, [pc, #12]	; (274e4 <LLF_RND_WaitRngInterrupt+0x1c>)
   274d6:	2200      	movs	r2, #0
   274d8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   274dc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   274e0:	bd08      	pop	{r3, pc}
   274e2:	bf00      	nop
   274e4:	5002b000 	.word	0x5002b000

000274e8 <LLF_RND_GetRoscSampleCnt>:
   274e8:	3801      	subs	r0, #1
   274ea:	2807      	cmp	r0, #7
   274ec:	d805      	bhi.n	274fa <LLF_RND_GetRoscSampleCnt+0x12>
   274ee:	e8df f000 	tbb	[pc, r0]
   274f2:	0e12      	.short	0x0e12
   274f4:	04040a04 	.word	0x04040a04
   274f8:	0604      	.short	0x0604
   274fa:	4809      	ldr	r0, [pc, #36]	; (27520 <LLF_RND_GetRoscSampleCnt+0x38>)
   274fc:	4770      	bx	lr
   274fe:	68cb      	ldr	r3, [r1, #12]
   27500:	624b      	str	r3, [r1, #36]	; 0x24
   27502:	2000      	movs	r0, #0
   27504:	4770      	bx	lr
   27506:	688b      	ldr	r3, [r1, #8]
   27508:	624b      	str	r3, [r1, #36]	; 0x24
   2750a:	2000      	movs	r0, #0
   2750c:	4770      	bx	lr
   2750e:	684b      	ldr	r3, [r1, #4]
   27510:	624b      	str	r3, [r1, #36]	; 0x24
   27512:	2000      	movs	r0, #0
   27514:	4770      	bx	lr
   27516:	680b      	ldr	r3, [r1, #0]
   27518:	624b      	str	r3, [r1, #36]	; 0x24
   2751a:	2000      	movs	r0, #0
   2751c:	4770      	bx	lr
   2751e:	bf00      	nop
   27520:	00f10c31 	.word	0x00f10c31

00027524 <LLF_RND_GetFastestRosc>:
   27524:	680b      	ldr	r3, [r1, #0]
   27526:	e002      	b.n	2752e <LLF_RND_GetFastestRosc+0xa>
   27528:	2b08      	cmp	r3, #8
   2752a:	600b      	str	r3, [r1, #0]
   2752c:	d806      	bhi.n	2753c <LLF_RND_GetFastestRosc+0x18>
   2752e:	6a02      	ldr	r2, [r0, #32]
   27530:	4213      	tst	r3, r2
   27532:	ea4f 0343 	mov.w	r3, r3, lsl #1
   27536:	d0f7      	beq.n	27528 <LLF_RND_GetFastestRosc+0x4>
   27538:	2000      	movs	r0, #0
   2753a:	4770      	bx	lr
   2753c:	4800      	ldr	r0, [pc, #0]	; (27540 <LLF_RND_GetFastestRosc+0x1c>)
   2753e:	4770      	bx	lr
   27540:	00f10c31 	.word	0x00f10c31

00027544 <LLF_RND_TurnOffTrng>:
   27544:	4b04      	ldr	r3, [pc, #16]	; (27558 <LLF_RND_TurnOffTrng+0x14>)
   27546:	2200      	movs	r2, #0
   27548:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   2754c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   27550:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   27554:	f7ff b8b6 	b.w	266c4 <CC_HalClearInterruptBit>
   27558:	5002b000 	.word	0x5002b000

0002755c <SetDataBuffersInfo>:
   2755c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2755e:	b083      	sub	sp, #12
   27560:	461d      	mov	r5, r3
   27562:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   27566:	f04f 0300 	mov.w	r3, #0
   2756a:	f88d 3007 	strb.w	r3, [sp, #7]
   2756e:	d324      	bcc.n	275ba <SetDataBuffersInfo+0x5e>
   27570:	468c      	mov	ip, r1
   27572:	4484      	add	ip, r0
   27574:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   27578:	4604      	mov	r4, r0
   2757a:	d81e      	bhi.n	275ba <SetDataBuffersInfo+0x5e>
   2757c:	4617      	mov	r7, r2
   2757e:	f10d 0307 	add.w	r3, sp, #7
   27582:	2201      	movs	r2, #1
   27584:	f000 fe68 	bl	28258 <CC_PalDataBufferAttrGet>
   27588:	4606      	mov	r6, r0
   2758a:	b9b0      	cbnz	r0, 275ba <SetDataBuffersInfo+0x5e>
   2758c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2758e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27592:	603c      	str	r4, [r7, #0]
   27594:	713b      	strb	r3, [r7, #4]
   27596:	b192      	cbz	r2, 275be <SetDataBuffersInfo+0x62>
   27598:	b14d      	cbz	r5, 275ae <SetDataBuffersInfo+0x52>
   2759a:	4602      	mov	r2, r0
   2759c:	9908      	ldr	r1, [sp, #32]
   2759e:	f10d 0307 	add.w	r3, sp, #7
   275a2:	4628      	mov	r0, r5
   275a4:	f000 fe58 	bl	28258 <CC_PalDataBufferAttrGet>
   275a8:	b938      	cbnz	r0, 275ba <SetDataBuffersInfo+0x5e>
   275aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   275ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   275b0:	4630      	mov	r0, r6
   275b2:	6015      	str	r5, [r2, #0]
   275b4:	7113      	strb	r3, [r2, #4]
   275b6:	b003      	add	sp, #12
   275b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   275ba:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   275be:	4630      	mov	r0, r6
   275c0:	b003      	add	sp, #12
   275c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000275c4 <InitHashDrv>:
   275c4:	b1e8      	cbz	r0, 27602 <InitHashDrv+0x3e>
   275c6:	b510      	push	{r4, lr}
   275c8:	6804      	ldr	r4, [r0, #0]
   275ca:	2c01      	cmp	r4, #1
   275cc:	d004      	beq.n	275d8 <InitHashDrv+0x14>
   275ce:	2c02      	cmp	r4, #2
   275d0:	d010      	beq.n	275f4 <InitHashDrv+0x30>
   275d2:	b144      	cbz	r4, 275e6 <InitHashDrv+0x22>
   275d4:	480c      	ldr	r0, [pc, #48]	; (27608 <InitHashDrv+0x44>)
   275d6:	bd10      	pop	{r4, pc}
   275d8:	490c      	ldr	r1, [pc, #48]	; (2760c <InitHashDrv+0x48>)
   275da:	2220      	movs	r2, #32
   275dc:	3008      	adds	r0, #8
   275de:	f7ff f8ff 	bl	267e0 <CC_PalMemCopyPlat>
   275e2:	2000      	movs	r0, #0
   275e4:	bd10      	pop	{r4, pc}
   275e6:	490a      	ldr	r1, [pc, #40]	; (27610 <InitHashDrv+0x4c>)
   275e8:	2214      	movs	r2, #20
   275ea:	3008      	adds	r0, #8
   275ec:	f7ff f8f8 	bl	267e0 <CC_PalMemCopyPlat>
   275f0:	4620      	mov	r0, r4
   275f2:	bd10      	pop	{r4, pc}
   275f4:	4907      	ldr	r1, [pc, #28]	; (27614 <InitHashDrv+0x50>)
   275f6:	2220      	movs	r2, #32
   275f8:	3008      	adds	r0, #8
   275fa:	f7ff f8f1 	bl	267e0 <CC_PalMemCopyPlat>
   275fe:	2000      	movs	r0, #0
   27600:	bd10      	pop	{r4, pc}
   27602:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   27606:	4770      	bx	lr
   27608:	00f30001 	.word	0x00f30001
   2760c:	00034044 	.word	0x00034044
   27610:	00034010 	.word	0x00034010
   27614:	00034024 	.word	0x00034024

00027618 <ProcessHashDrv>:
   27618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2761c:	2900      	cmp	r1, #0
   2761e:	f000 80f9 	beq.w	27814 <ProcessHashDrv+0x1fc>
   27622:	4604      	mov	r4, r0
   27624:	2800      	cmp	r0, #0
   27626:	f000 80f9 	beq.w	2781c <ProcessHashDrv+0x204>
   2762a:	6803      	ldr	r3, [r0, #0]
   2762c:	4690      	mov	r8, r2
   2762e:	460f      	mov	r7, r1
   27630:	2b00      	cmp	r3, #0
   27632:	f000 80c3 	beq.w	277bc <ProcessHashDrv+0x1a4>
   27636:	3b01      	subs	r3, #1
   27638:	2b01      	cmp	r3, #1
   2763a:	f200 80d7 	bhi.w	277ec <ProcessHashDrv+0x1d4>
   2763e:	4879      	ldr	r0, [pc, #484]	; (27824 <ProcessHashDrv+0x20c>)
   27640:	f04f 31ff 	mov.w	r1, #4294967295
   27644:	f04f 0902 	mov.w	r9, #2
   27648:	f7ff f8e6 	bl	26818 <CC_PalMutexLock>
   2764c:	2800      	cmp	r0, #0
   2764e:	f040 80bf 	bne.w	277d0 <ProcessHashDrv+0x1b8>
   27652:	2000      	movs	r0, #0
   27654:	f7ff f910 	bl	26878 <CC_PalPowerSaveModeSelect>
   27658:	4606      	mov	r6, r0
   2765a:	2800      	cmp	r0, #0
   2765c:	f040 80c2 	bne.w	277e4 <ProcessHashDrv+0x1cc>
   27660:	4a71      	ldr	r2, [pc, #452]	; (27828 <ProcessHashDrv+0x210>)
   27662:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   27666:	2b00      	cmp	r3, #0
   27668:	d1fb      	bne.n	27662 <ProcessHashDrv+0x4a>
   2766a:	4d6f      	ldr	r5, [pc, #444]	; (27828 <ProcessHashDrv+0x210>)
   2766c:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   27670:	2b00      	cmp	r3, #0
   27672:	d1fb      	bne.n	2766c <ProcessHashDrv+0x54>
   27674:	f04f 30ff 	mov.w	r0, #4294967295
   27678:	f7ff f824 	bl	266c4 <CC_HalClearInterruptBit>
   2767c:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   27680:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   27684:	f7ff f82c 	bl	266e0 <CC_HalMaskInterrupt>
   27688:	2301      	movs	r3, #1
   2768a:	2207      	movs	r2, #7
   2768c:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   27690:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   27694:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   27698:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2769a:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   2769e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   276a0:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   276a4:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   276a8:	6823      	ldr	r3, [r4, #0]
   276aa:	b15b      	cbz	r3, 276c4 <ProcessHashDrv+0xac>
   276ac:	3b01      	subs	r3, #1
   276ae:	2b01      	cmp	r3, #1
   276b0:	d818      	bhi.n	276e4 <ProcessHashDrv+0xcc>
   276b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   276b4:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   276b8:	6a23      	ldr	r3, [r4, #32]
   276ba:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   276be:	69e3      	ldr	r3, [r4, #28]
   276c0:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   276c4:	4b58      	ldr	r3, [pc, #352]	; (27828 <ProcessHashDrv+0x210>)
   276c6:	69a2      	ldr	r2, [r4, #24]
   276c8:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   276cc:	6962      	ldr	r2, [r4, #20]
   276ce:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   276d2:	6922      	ldr	r2, [r4, #16]
   276d4:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   276d8:	68e2      	ldr	r2, [r4, #12]
   276da:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   276de:	68a2      	ldr	r2, [r4, #8]
   276e0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   276e4:	4a50      	ldr	r2, [pc, #320]	; (27828 <ProcessHashDrv+0x210>)
   276e6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   276ea:	2b00      	cmp	r3, #0
   276ec:	d1fb      	bne.n	276e6 <ProcessHashDrv+0xce>
   276ee:	f1b8 0f00 	cmp.w	r8, #0
   276f2:	d05f      	beq.n	277b4 <ProcessHashDrv+0x19c>
   276f4:	6863      	ldr	r3, [r4, #4]
   276f6:	2b01      	cmp	r3, #1
   276f8:	bf08      	it	eq
   276fa:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   276fe:	4b4a      	ldr	r3, [pc, #296]	; (27828 <ProcessHashDrv+0x210>)
   27700:	683a      	ldr	r2, [r7, #0]
   27702:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   27706:	2040      	movs	r0, #64	; 0x40
   27708:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   2770c:	f7fe ffee 	bl	266ec <CC_HalWaitInterrupt>
   27710:	4606      	mov	r6, r0
   27712:	4a45      	ldr	r2, [pc, #276]	; (27828 <ProcessHashDrv+0x210>)
   27714:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27718:	2b00      	cmp	r3, #0
   2771a:	d1fb      	bne.n	27714 <ProcessHashDrv+0xfc>
   2771c:	4a42      	ldr	r2, [pc, #264]	; (27828 <ProcessHashDrv+0x210>)
   2771e:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   27722:	2b00      	cmp	r3, #0
   27724:	d1fb      	bne.n	2771e <ProcessHashDrv+0x106>
   27726:	6823      	ldr	r3, [r4, #0]
   27728:	b15b      	cbz	r3, 27742 <ProcessHashDrv+0x12a>
   2772a:	3b01      	subs	r3, #1
   2772c:	2b01      	cmp	r3, #1
   2772e:	d818      	bhi.n	27762 <ProcessHashDrv+0x14a>
   27730:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   27734:	6263      	str	r3, [r4, #36]	; 0x24
   27736:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   2773a:	6223      	str	r3, [r4, #32]
   2773c:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   27740:	61e3      	str	r3, [r4, #28]
   27742:	4b39      	ldr	r3, [pc, #228]	; (27828 <ProcessHashDrv+0x210>)
   27744:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   27748:	61a2      	str	r2, [r4, #24]
   2774a:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   2774e:	6162      	str	r2, [r4, #20]
   27750:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   27754:	6122      	str	r2, [r4, #16]
   27756:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   2775a:	60e2      	str	r2, [r4, #12]
   2775c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   27760:	60a3      	str	r3, [r4, #8]
   27762:	4a31      	ldr	r2, [pc, #196]	; (27828 <ProcessHashDrv+0x210>)
   27764:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   27768:	64a1      	str	r1, [r4, #72]	; 0x48
   2776a:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   2776e:	64e1      	str	r1, [r4, #76]	; 0x4c
   27770:	2300      	movs	r3, #0
   27772:	2101      	movs	r1, #1
   27774:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   27778:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   2777c:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   27780:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27784:	2b00      	cmp	r3, #0
   27786:	d1fb      	bne.n	27780 <ProcessHashDrv+0x168>
   27788:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   2778c:	2e00      	cmp	r6, #0
   2778e:	d13b      	bne.n	27808 <ProcessHashDrv+0x1f0>
   27790:	4b25      	ldr	r3, [pc, #148]	; (27828 <ProcessHashDrv+0x210>)
   27792:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   27796:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   2779a:	f7fe ffa1 	bl	266e0 <CC_HalMaskInterrupt>
   2779e:	2001      	movs	r0, #1
   277a0:	f7ff f86a 	bl	26878 <CC_PalPowerSaveModeSelect>
   277a4:	bb60      	cbnz	r0, 27800 <ProcessHashDrv+0x1e8>
   277a6:	481f      	ldr	r0, [pc, #124]	; (27824 <ProcessHashDrv+0x20c>)
   277a8:	f7ff f83e 	bl	26828 <CC_PalMutexUnlock>
   277ac:	bb10      	cbnz	r0, 277f4 <ProcessHashDrv+0x1dc>
   277ae:	4630      	mov	r0, r6
   277b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   277b4:	2304      	movs	r3, #4
   277b6:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   277ba:	e7aa      	b.n	27712 <ProcessHashDrv+0xfa>
   277bc:	4819      	ldr	r0, [pc, #100]	; (27824 <ProcessHashDrv+0x20c>)
   277be:	f04f 31ff 	mov.w	r1, #4294967295
   277c2:	f04f 0901 	mov.w	r9, #1
   277c6:	f7ff f827 	bl	26818 <CC_PalMutexLock>
   277ca:	2800      	cmp	r0, #0
   277cc:	f43f af41 	beq.w	27652 <ProcessHashDrv+0x3a>
   277d0:	4816      	ldr	r0, [pc, #88]	; (2782c <ProcessHashDrv+0x214>)
   277d2:	f7fe f8a5 	bl	25920 <CC_PalAbort>
   277d6:	2000      	movs	r0, #0
   277d8:	f7ff f84e 	bl	26878 <CC_PalPowerSaveModeSelect>
   277dc:	4606      	mov	r6, r0
   277de:	2800      	cmp	r0, #0
   277e0:	f43f af3e 	beq.w	27660 <ProcessHashDrv+0x48>
   277e4:	4812      	ldr	r0, [pc, #72]	; (27830 <ProcessHashDrv+0x218>)
   277e6:	f7fe f89b 	bl	25920 <CC_PalAbort>
   277ea:	e739      	b.n	27660 <ProcessHashDrv+0x48>
   277ec:	4e11      	ldr	r6, [pc, #68]	; (27834 <ProcessHashDrv+0x21c>)
   277ee:	4630      	mov	r0, r6
   277f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   277f4:	4810      	ldr	r0, [pc, #64]	; (27838 <ProcessHashDrv+0x220>)
   277f6:	f7fe f893 	bl	25920 <CC_PalAbort>
   277fa:	4630      	mov	r0, r6
   277fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27800:	480e      	ldr	r0, [pc, #56]	; (2783c <ProcessHashDrv+0x224>)
   27802:	f7fe f88d 	bl	25920 <CC_PalAbort>
   27806:	e7ce      	b.n	277a6 <ProcessHashDrv+0x18e>
   27808:	2110      	movs	r1, #16
   2780a:	f104 0008 	add.w	r0, r4, #8
   2780e:	f7fe ffeb 	bl	267e8 <CC_PalMemSetZeroPlat>
   27812:	e7bd      	b.n	27790 <ProcessHashDrv+0x178>
   27814:	4e0a      	ldr	r6, [pc, #40]	; (27840 <ProcessHashDrv+0x228>)
   27816:	4630      	mov	r0, r6
   27818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2781c:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   27820:	e7c5      	b.n	277ae <ProcessHashDrv+0x196>
   27822:	bf00      	nop
   27824:	20000948 	.word	0x20000948
   27828:	5002b000 	.word	0x5002b000
   2782c:	00033f44 	.word	0x00033f44
   27830:	00033f5c 	.word	0x00033f5c
   27834:	00f30001 	.word	0x00f30001
   27838:	00033f9c 	.word	0x00033f9c
   2783c:	00033f7c 	.word	0x00033f7c
   27840:	00f30003 	.word	0x00f30003

00027844 <FinishHashDrv>:
   27844:	b398      	cbz	r0, 278ae <FinishHashDrv+0x6a>
   27846:	b470      	push	{r4, r5, r6}
   27848:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   2784c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   27850:	ba26      	rev	r6, r4
   27852:	ba0d      	rev	r5, r1
   27854:	ba14      	rev	r4, r2
   27856:	ba19      	rev	r1, r3
   27858:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   2785c:	ba12      	rev	r2, r2
   2785e:	e9c0 4104 	strd	r4, r1, [r0, #16]
   27862:	6182      	str	r2, [r0, #24]
   27864:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   27868:	e9c0 6502 	strd	r6, r5, [r0, #8]
   2786c:	ba1b      	rev	r3, r3
   2786e:	ba25      	rev	r5, r4
   27870:	e9c0 3507 	strd	r3, r5, [r0, #28]
   27874:	ba14      	rev	r4, r2
   27876:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   2787a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   2787c:	ba12      	rev	r2, r2
   2787e:	ba09      	rev	r1, r1
   27880:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   27884:	62c2      	str	r2, [r0, #44]	; 0x2c
   27886:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   2788a:	ba1b      	rev	r3, r3
   2788c:	ba25      	rev	r5, r4
   2788e:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   27892:	ba14      	rev	r4, r2
   27894:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   27898:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   2789a:	ba12      	rev	r2, r2
   2789c:	ba09      	rev	r1, r1
   2789e:	ba1b      	rev	r3, r3
   278a0:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   278a4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   278a8:	2000      	movs	r0, #0
   278aa:	bc70      	pop	{r4, r5, r6}
   278ac:	4770      	bx	lr
   278ae:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   278b2:	4770      	bx	lr

000278b4 <LoadAesKey>:
   278b4:	2800      	cmp	r0, #0
   278b6:	d046      	beq.n	27946 <LoadAesKey+0x92>
   278b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   278bc:	2b00      	cmp	r3, #0
   278be:	d033      	beq.n	27928 <LoadAesKey+0x74>
   278c0:	2b03      	cmp	r3, #3
   278c2:	b510      	push	{r4, lr}
   278c4:	d013      	beq.n	278ee <LoadAesKey+0x3a>
   278c6:	4821      	ldr	r0, [pc, #132]	; (2794c <LoadAesKey+0x98>)
   278c8:	4c21      	ldr	r4, [pc, #132]	; (27950 <LoadAesKey+0x9c>)
   278ca:	6822      	ldr	r2, [r4, #0]
   278cc:	4b21      	ldr	r3, [pc, #132]	; (27954 <LoadAesKey+0xa0>)
   278ce:	6812      	ldr	r2, [r2, #0]
   278d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   278d4:	6822      	ldr	r2, [r4, #0]
   278d6:	6852      	ldr	r2, [r2, #4]
   278d8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   278dc:	6822      	ldr	r2, [r4, #0]
   278de:	6892      	ldr	r2, [r2, #8]
   278e0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   278e4:	6822      	ldr	r2, [r4, #0]
   278e6:	68d2      	ldr	r2, [r2, #12]
   278e8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   278ec:	bd10      	pop	{r4, pc}
   278ee:	6b01      	ldr	r1, [r0, #48]	; 0x30
   278f0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   278f2:	4c17      	ldr	r4, [pc, #92]	; (27950 <LoadAesKey+0x9c>)
   278f4:	f000 fbac 	bl	28050 <kmu_validate_kdr_slot_and_size>
   278f8:	2800      	cmp	r0, #0
   278fa:	d1e6      	bne.n	278ca <LoadAesKey+0x16>
   278fc:	6822      	ldr	r2, [r4, #0]
   278fe:	4b15      	ldr	r3, [pc, #84]	; (27954 <LoadAesKey+0xa0>)
   27900:	6812      	ldr	r2, [r2, #0]
   27902:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   27906:	6822      	ldr	r2, [r4, #0]
   27908:	6852      	ldr	r2, [r2, #4]
   2790a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   2790e:	6822      	ldr	r2, [r4, #0]
   27910:	6892      	ldr	r2, [r2, #8]
   27912:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   27916:	6822      	ldr	r2, [r4, #0]
   27918:	68d2      	ldr	r2, [r2, #12]
   2791a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2791e:	f000 fba3 	bl	28068 <kmu_use_kdr_key>
   27922:	2800      	cmp	r0, #0
   27924:	d1d1      	bne.n	278ca <LoadAesKey+0x16>
   27926:	bd10      	pop	{r4, pc}
   27928:	4a0a      	ldr	r2, [pc, #40]	; (27954 <LoadAesKey+0xa0>)
   2792a:	6901      	ldr	r1, [r0, #16]
   2792c:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   27930:	6941      	ldr	r1, [r0, #20]
   27932:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   27936:	6981      	ldr	r1, [r0, #24]
   27938:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   2793c:	69c1      	ldr	r1, [r0, #28]
   2793e:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   27942:	4618      	mov	r0, r3
   27944:	4770      	bx	lr
   27946:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   2794a:	4770      	bx	lr
   2794c:	00f10009 	.word	0x00f10009
   27950:	20000938 	.word	0x20000938
   27954:	5002b000 	.word	0x5002b000

00027958 <InitAes.part.0>:
   27958:	4a37      	ldr	r2, [pc, #220]	; (27a38 <InitAes.part.0+0xe0>)
   2795a:	b538      	push	{r3, r4, r5, lr}
   2795c:	4604      	mov	r4, r0
   2795e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27962:	2b00      	cmp	r3, #0
   27964:	d1fb      	bne.n	2795e <InitAes.part.0+0x6>
   27966:	4a34      	ldr	r2, [pc, #208]	; (27a38 <InitAes.part.0+0xe0>)
   27968:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   2796c:	2b00      	cmp	r3, #0
   2796e:	d1fb      	bne.n	27968 <InitAes.part.0+0x10>
   27970:	4a31      	ldr	r2, [pc, #196]	; (27a38 <InitAes.part.0+0xe0>)
   27972:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   27976:	2b00      	cmp	r3, #0
   27978:	d1fb      	bne.n	27972 <InitAes.part.0+0x1a>
   2797a:	4a2f      	ldr	r2, [pc, #188]	; (27a38 <InitAes.part.0+0xe0>)
   2797c:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   27980:	2b00      	cmp	r3, #0
   27982:	d1fb      	bne.n	2797c <InitAes.part.0+0x24>
   27984:	4a2c      	ldr	r2, [pc, #176]	; (27a38 <InitAes.part.0+0xe0>)
   27986:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   2798a:	2b00      	cmp	r3, #0
   2798c:	d1fb      	bne.n	27986 <InitAes.part.0+0x2e>
   2798e:	4d2a      	ldr	r5, [pc, #168]	; (27a38 <InitAes.part.0+0xe0>)
   27990:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   27994:	2b00      	cmp	r3, #0
   27996:	d1fb      	bne.n	27990 <InitAes.part.0+0x38>
   27998:	f04f 30ff 	mov.w	r0, #4294967295
   2799c:	f7fe fe92 	bl	266c4 <CC_HalClearInterruptBit>
   279a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   279a2:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   279a6:	f023 0304 	bic.w	r3, r3, #4
   279aa:	2b03      	cmp	r3, #3
   279ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   279ae:	d039      	beq.n	27a24 <InitAes.part.0+0xcc>
   279b0:	2b01      	cmp	r3, #1
   279b2:	bf0c      	ite	eq
   279b4:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   279b8:	f020 0020 	bicne.w	r0, r0, #32
   279bc:	f7fe fe90 	bl	266e0 <CC_HalMaskInterrupt>
   279c0:	4a1d      	ldr	r2, [pc, #116]	; (27a38 <InitAes.part.0+0xe0>)
   279c2:	2301      	movs	r3, #1
   279c4:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   279c8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   279cc:	2b00      	cmp	r3, #0
   279ce:	d1fb      	bne.n	279c8 <InitAes.part.0+0x70>
   279d0:	4a19      	ldr	r2, [pc, #100]	; (27a38 <InitAes.part.0+0xe0>)
   279d2:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   279d6:	2b00      	cmp	r3, #0
   279d8:	d1fb      	bne.n	279d2 <InitAes.part.0+0x7a>
   279da:	4917      	ldr	r1, [pc, #92]	; (27a38 <InitAes.part.0+0xe0>)
   279dc:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   279e0:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   279e4:	2b00      	cmp	r3, #0
   279e6:	d1fb      	bne.n	279e0 <InitAes.part.0+0x88>
   279e8:	4a13      	ldr	r2, [pc, #76]	; (27a38 <InitAes.part.0+0xe0>)
   279ea:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   279ee:	2b00      	cmp	r3, #0
   279f0:	d1fb      	bne.n	279ea <InitAes.part.0+0x92>
   279f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   279f4:	f022 0104 	bic.w	r1, r2, #4
   279f8:	2903      	cmp	r1, #3
   279fa:	bf18      	it	ne
   279fc:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   279fe:	490e      	ldr	r1, [pc, #56]	; (27a38 <InitAes.part.0+0xe0>)
   27a00:	ea4f 0282 	mov.w	r2, r2, lsl #2
   27a04:	bf18      	it	ne
   27a06:	f003 0301 	andne.w	r3, r3, #1
   27a0a:	f002 021c 	and.w	r2, r2, #28
   27a0e:	4313      	orrs	r3, r2
   27a10:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   27a14:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27a16:	2b07      	cmp	r3, #7
   27a18:	bf04      	itt	eq
   27a1a:	2301      	moveq	r3, #1
   27a1c:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   27a20:	2000      	movs	r0, #0
   27a22:	bd38      	pop	{r3, r4, r5, pc}
   27a24:	2b01      	cmp	r3, #1
   27a26:	bf0c      	ite	eq
   27a28:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   27a2c:	f020 0010 	bicne.w	r0, r0, #16
   27a30:	f7fe fe56 	bl	266e0 <CC_HalMaskInterrupt>
   27a34:	e7c4      	b.n	279c0 <InitAes.part.0+0x68>
   27a36:	bf00      	nop
   27a38:	5002b000 	.word	0x5002b000

00027a3c <write_invalid_key>:
   27a3c:	4a09      	ldr	r2, [pc, #36]	; (27a64 <write_invalid_key+0x28>)
   27a3e:	4b0a      	ldr	r3, [pc, #40]	; (27a68 <write_invalid_key+0x2c>)
   27a40:	6811      	ldr	r1, [r2, #0]
   27a42:	6809      	ldr	r1, [r1, #0]
   27a44:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   27a48:	6811      	ldr	r1, [r2, #0]
   27a4a:	6849      	ldr	r1, [r1, #4]
   27a4c:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   27a50:	6811      	ldr	r1, [r2, #0]
   27a52:	6889      	ldr	r1, [r1, #8]
   27a54:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   27a58:	6812      	ldr	r2, [r2, #0]
   27a5a:	68d2      	ldr	r2, [r2, #12]
   27a5c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   27a60:	4770      	bx	lr
   27a62:	bf00      	nop
   27a64:	20000938 	.word	0x20000938
   27a68:	5002b000 	.word	0x5002b000

00027a6c <ProcessAesDrv>:
   27a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a70:	b085      	sub	sp, #20
   27a72:	2900      	cmp	r1, #0
   27a74:	f000 80a3 	beq.w	27bbe <ProcessAesDrv+0x152>
   27a78:	4690      	mov	r8, r2
   27a7a:	2a00      	cmp	r2, #0
   27a7c:	f000 809f 	beq.w	27bbe <ProcessAesDrv+0x152>
   27a80:	4605      	mov	r5, r0
   27a82:	2800      	cmp	r0, #0
   27a84:	f000 813c 	beq.w	27d00 <ProcessAesDrv+0x294>
   27a88:	4699      	mov	r9, r3
   27a8a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   27a8c:	460e      	mov	r6, r1
   27a8e:	2b00      	cmp	r3, #0
   27a90:	d151      	bne.n	27b36 <ProcessAesDrv+0xca>
   27a92:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   27a96:	d253      	bcs.n	27b40 <ProcessAesDrv+0xd4>
   27a98:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   27a9c:	2b04      	cmp	r3, #4
   27a9e:	f000 8112 	beq.w	27cc6 <ProcessAesDrv+0x25a>
   27aa2:	2700      	movs	r7, #0
   27aa4:	48a6      	ldr	r0, [pc, #664]	; (27d40 <ProcessAesDrv+0x2d4>)
   27aa6:	f04f 31ff 	mov.w	r1, #4294967295
   27aaa:	f7fe feb5 	bl	26818 <CC_PalMutexLock>
   27aae:	2800      	cmp	r0, #0
   27ab0:	f040 80e8 	bne.w	27c84 <ProcessAesDrv+0x218>
   27ab4:	2000      	movs	r0, #0
   27ab6:	f7fe fedf 	bl	26878 <CC_PalPowerSaveModeSelect>
   27aba:	2800      	cmp	r0, #0
   27abc:	f040 80eb 	bne.w	27c96 <ProcessAesDrv+0x22a>
   27ac0:	48a0      	ldr	r0, [pc, #640]	; (27d44 <ProcessAesDrv+0x2d8>)
   27ac2:	2301      	movs	r3, #1
   27ac4:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   27ac8:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   27acc:	2c00      	cmp	r4, #0
   27ace:	d1fb      	bne.n	27ac8 <ProcessAesDrv+0x5c>
   27ad0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27ad2:	2b03      	cmp	r3, #3
   27ad4:	dc39      	bgt.n	27b4a <ProcessAesDrv+0xde>
   27ad6:	2b00      	cmp	r3, #0
   27ad8:	da3a      	bge.n	27b50 <ProcessAesDrv+0xe4>
   27ada:	4c9b      	ldr	r4, [pc, #620]	; (27d48 <ProcessAesDrv+0x2dc>)
   27adc:	4a99      	ldr	r2, [pc, #612]	; (27d44 <ProcessAesDrv+0x2d8>)
   27ade:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27ae2:	2b00      	cmp	r3, #0
   27ae4:	d1fb      	bne.n	27ade <ProcessAesDrv+0x72>
   27ae6:	2f00      	cmp	r7, #0
   27ae8:	f040 80e4 	bne.w	27cb4 <ProcessAesDrv+0x248>
   27aec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27aee:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   27af0:	f023 0304 	bic.w	r3, r3, #4
   27af4:	2b03      	cmp	r3, #3
   27af6:	4b93      	ldr	r3, [pc, #588]	; (27d44 <ProcessAesDrv+0x2d8>)
   27af8:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   27afc:	d056      	beq.n	27bac <ProcessAesDrv+0x140>
   27afe:	2a01      	cmp	r2, #1
   27b00:	bf0c      	ite	eq
   27b02:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   27b06:	f040 0020 	orrne.w	r0, r0, #32
   27b0a:	f7fe fde9 	bl	266e0 <CC_HalMaskInterrupt>
   27b0e:	4b8d      	ldr	r3, [pc, #564]	; (27d44 <ProcessAesDrv+0x2d8>)
   27b10:	2200      	movs	r2, #0
   27b12:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   27b16:	2001      	movs	r0, #1
   27b18:	f7fe feae 	bl	26878 <CC_PalPowerSaveModeSelect>
   27b1c:	2800      	cmp	r0, #0
   27b1e:	f040 80c5 	bne.w	27cac <ProcessAesDrv+0x240>
   27b22:	4887      	ldr	r0, [pc, #540]	; (27d40 <ProcessAesDrv+0x2d4>)
   27b24:	f7fe fe80 	bl	26828 <CC_PalMutexUnlock>
   27b28:	2800      	cmp	r0, #0
   27b2a:	f040 80b8 	bne.w	27c9e <ProcessAesDrv+0x232>
   27b2e:	4620      	mov	r0, r4
   27b30:	b005      	add	sp, #20
   27b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b36:	2b01      	cmp	r3, #1
   27b38:	d1ae      	bne.n	27a98 <ProcessAesDrv+0x2c>
   27b3a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   27b3e:	d3ab      	bcc.n	27a98 <ProcessAesDrv+0x2c>
   27b40:	4c82      	ldr	r4, [pc, #520]	; (27d4c <ProcessAesDrv+0x2e0>)
   27b42:	4620      	mov	r0, r4
   27b44:	b005      	add	sp, #20
   27b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b4a:	3b06      	subs	r3, #6
   27b4c:	2b01      	cmp	r3, #1
   27b4e:	d8c4      	bhi.n	27ada <ProcessAesDrv+0x6e>
   27b50:	6bab      	ldr	r3, [r5, #56]	; 0x38
   27b52:	2b01      	cmp	r3, #1
   27b54:	f200 80d2 	bhi.w	27cfc <ProcessAesDrv+0x290>
   27b58:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   27b5a:	2b01      	cmp	r3, #1
   27b5c:	d834      	bhi.n	27bc8 <ProcessAesDrv+0x15c>
   27b5e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   27b60:	2b01      	cmp	r3, #1
   27b62:	f200 8122 	bhi.w	27daa <ProcessAesDrv+0x33e>
   27b66:	4628      	mov	r0, r5
   27b68:	f7ff fef6 	bl	27958 <InitAes.part.0>
   27b6c:	4604      	mov	r4, r0
   27b6e:	2800      	cmp	r0, #0
   27b70:	d1b4      	bne.n	27adc <ProcessAesDrv+0x70>
   27b72:	4628      	mov	r0, r5
   27b74:	f7ff fe9e 	bl	278b4 <LoadAesKey>
   27b78:	4604      	mov	r4, r0
   27b7a:	2800      	cmp	r0, #0
   27b7c:	d1ae      	bne.n	27adc <ProcessAesDrv+0x70>
   27b7e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27b80:	2b07      	cmp	r3, #7
   27b82:	d8aa      	bhi.n	27ada <ProcessAesDrv+0x6e>
   27b84:	a201      	add	r2, pc, #4	; (adr r2, 27b8c <ProcessAesDrv+0x120>)
   27b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27b8a:	bf00      	nop
   27b8c:	00027be9 	.word	0x00027be9
   27b90:	00027bcd 	.word	0x00027bcd
   27b94:	00027d71 	.word	0x00027d71
   27b98:	00027bcd 	.word	0x00027bcd
   27b9c:	00027adb 	.word	0x00027adb
   27ba0:	00027adb 	.word	0x00027adb
   27ba4:	00027d71 	.word	0x00027d71
   27ba8:	00027bcd 	.word	0x00027bcd
   27bac:	2a01      	cmp	r2, #1
   27bae:	bf0c      	ite	eq
   27bb0:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   27bb4:	f040 0010 	orrne.w	r0, r0, #16
   27bb8:	f7fe fd92 	bl	266e0 <CC_HalMaskInterrupt>
   27bbc:	e7a7      	b.n	27b0e <ProcessAesDrv+0xa2>
   27bbe:	4c64      	ldr	r4, [pc, #400]	; (27d50 <ProcessAesDrv+0x2e4>)
   27bc0:	4620      	mov	r0, r4
   27bc2:	b005      	add	sp, #20
   27bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27bc8:	4c62      	ldr	r4, [pc, #392]	; (27d54 <ProcessAesDrv+0x2e8>)
   27bca:	e787      	b.n	27adc <ProcessAesDrv+0x70>
   27bcc:	4b5d      	ldr	r3, [pc, #372]	; (27d44 <ProcessAesDrv+0x2d8>)
   27bce:	682a      	ldr	r2, [r5, #0]
   27bd0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   27bd4:	686a      	ldr	r2, [r5, #4]
   27bd6:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   27bda:	68aa      	ldr	r2, [r5, #8]
   27bdc:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   27be0:	68ea      	ldr	r2, [r5, #12]
   27be2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   27be6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27be8:	6832      	ldr	r2, [r6, #0]
   27bea:	f023 0304 	bic.w	r3, r3, #4
   27bee:	2b03      	cmp	r3, #3
   27bf0:	d00d      	beq.n	27c0e <ProcessAesDrv+0x1a2>
   27bf2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   27bf4:	f8d8 1000 	ldr.w	r1, [r8]
   27bf8:	2b01      	cmp	r3, #1
   27bfa:	4b52      	ldr	r3, [pc, #328]	; (27d44 <ProcessAesDrv+0x2d8>)
   27bfc:	bf0b      	itete	eq
   27bfe:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   27c02:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   27c06:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   27c0a:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   27c0e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   27c10:	2b01      	cmp	r3, #1
   27c12:	4b4c      	ldr	r3, [pc, #304]	; (27d44 <ProcessAesDrv+0x2d8>)
   27c14:	bf0b      	itete	eq
   27c16:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   27c1a:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   27c1e:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   27c22:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   27c26:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27c28:	f023 0304 	bic.w	r3, r3, #4
   27c2c:	2b03      	cmp	r3, #3
   27c2e:	d06a      	beq.n	27d06 <ProcessAesDrv+0x29a>
   27c30:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   27c32:	2b01      	cmp	r3, #1
   27c34:	bf0c      	ite	eq
   27c36:	2080      	moveq	r0, #128	; 0x80
   27c38:	2020      	movne	r0, #32
   27c3a:	f7fe fd57 	bl	266ec <CC_HalWaitInterrupt>
   27c3e:	4604      	mov	r4, r0
   27c40:	2800      	cmp	r0, #0
   27c42:	f47f af4b 	bne.w	27adc <ProcessAesDrv+0x70>
   27c46:	4b3f      	ldr	r3, [pc, #252]	; (27d44 <ProcessAesDrv+0x2d8>)
   27c48:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   27c4c:	2c00      	cmp	r4, #0
   27c4e:	d1fb      	bne.n	27c48 <ProcessAesDrv+0x1dc>
   27c50:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27c52:	3b01      	subs	r3, #1
   27c54:	2b06      	cmp	r3, #6
   27c56:	d812      	bhi.n	27c7e <ProcessAesDrv+0x212>
   27c58:	e8df f003 	tbb	[pc, r3]
   27c5c:	11049904 	.word	0x11049904
   27c60:	9911      	.short	0x9911
   27c62:	04          	.byte	0x04
   27c63:	00          	.byte	0x00
   27c64:	4b37      	ldr	r3, [pc, #220]	; (27d44 <ProcessAesDrv+0x2d8>)
   27c66:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   27c6a:	602a      	str	r2, [r5, #0]
   27c6c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   27c70:	606a      	str	r2, [r5, #4]
   27c72:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   27c76:	60aa      	str	r2, [r5, #8]
   27c78:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   27c7c:	60eb      	str	r3, [r5, #12]
   27c7e:	2301      	movs	r3, #1
   27c80:	65ab      	str	r3, [r5, #88]	; 0x58
   27c82:	e72b      	b.n	27adc <ProcessAesDrv+0x70>
   27c84:	4834      	ldr	r0, [pc, #208]	; (27d58 <ProcessAesDrv+0x2ec>)
   27c86:	f7fd fe4b 	bl	25920 <CC_PalAbort>
   27c8a:	2000      	movs	r0, #0
   27c8c:	f7fe fdf4 	bl	26878 <CC_PalPowerSaveModeSelect>
   27c90:	2800      	cmp	r0, #0
   27c92:	f43f af15 	beq.w	27ac0 <ProcessAesDrv+0x54>
   27c96:	4831      	ldr	r0, [pc, #196]	; (27d5c <ProcessAesDrv+0x2f0>)
   27c98:	f7fd fe42 	bl	25920 <CC_PalAbort>
   27c9c:	e710      	b.n	27ac0 <ProcessAesDrv+0x54>
   27c9e:	4830      	ldr	r0, [pc, #192]	; (27d60 <ProcessAesDrv+0x2f4>)
   27ca0:	f7fd fe3e 	bl	25920 <CC_PalAbort>
   27ca4:	4620      	mov	r0, r4
   27ca6:	b005      	add	sp, #20
   27ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27cac:	482d      	ldr	r0, [pc, #180]	; (27d64 <ProcessAesDrv+0x2f8>)
   27cae:	f7fd fe37 	bl	25920 <CC_PalAbort>
   27cb2:	e736      	b.n	27b22 <ProcessAesDrv+0xb6>
   27cb4:	2304      	movs	r3, #4
   27cb6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   27cba:	2120      	movs	r1, #32
   27cbc:	f105 0010 	add.w	r0, r5, #16
   27cc0:	f7fe fd92 	bl	267e8 <CC_PalMemSetZeroPlat>
   27cc4:	e712      	b.n	27aec <ProcessAesDrv+0x80>
   27cc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   27cc8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   27cca:	f000 f9b5 	bl	28038 <kmu_validate_slot_and_size>
   27cce:	b998      	cbnz	r0, 27cf8 <ProcessAesDrv+0x28c>
   27cd0:	4f25      	ldr	r7, [pc, #148]	; (27d68 <ProcessAesDrv+0x2fc>)
   27cd2:	4c1c      	ldr	r4, [pc, #112]	; (27d44 <ProcessAesDrv+0x2d8>)
   27cd4:	683b      	ldr	r3, [r7, #0]
   27cd6:	681b      	ldr	r3, [r3, #0]
   27cd8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   27cdc:	683b      	ldr	r3, [r7, #0]
   27cde:	685b      	ldr	r3, [r3, #4]
   27ce0:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   27ce4:	683b      	ldr	r3, [r7, #0]
   27ce6:	689b      	ldr	r3, [r3, #8]
   27ce8:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   27cec:	683b      	ldr	r3, [r7, #0]
   27cee:	68db      	ldr	r3, [r3, #12]
   27cf0:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   27cf4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   27cf6:	b161      	cbz	r1, 27d12 <ProcessAesDrv+0x2a6>
   27cf8:	2701      	movs	r7, #1
   27cfa:	e6d3      	b.n	27aa4 <ProcessAesDrv+0x38>
   27cfc:	4c1b      	ldr	r4, [pc, #108]	; (27d6c <ProcessAesDrv+0x300>)
   27cfe:	e6ed      	b.n	27adc <ProcessAesDrv+0x70>
   27d00:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   27d04:	e713      	b.n	27b2e <ProcessAesDrv+0xc2>
   27d06:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   27d08:	2b01      	cmp	r3, #1
   27d0a:	bf0c      	ite	eq
   27d0c:	2040      	moveq	r0, #64	; 0x40
   27d0e:	2010      	movne	r0, #16
   27d10:	e793      	b.n	27c3a <ProcessAesDrv+0x1ce>
   27d12:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   27d14:	9301      	str	r3, [sp, #4]
   27d16:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   27d18:	9300      	str	r3, [sp, #0]
   27d1a:	f105 0a10 	add.w	sl, r5, #16
   27d1e:	f04f 0b10 	mov.w	fp, #16
   27d22:	f8cd a008 	str.w	sl, [sp, #8]
   27d26:	f8cd b00c 	str.w	fp, [sp, #12]
   27d2a:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   27d2e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   27d30:	f000 f9a4 	bl	2807c <kmu_derive_cmac>
   27d34:	2800      	cmp	r0, #0
   27d36:	d13a      	bne.n	27dae <ProcessAesDrv+0x342>
   27d38:	2300      	movs	r3, #0
   27d3a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   27d3e:	e7db      	b.n	27cf8 <ProcessAesDrv+0x28c>
   27d40:	20000948 	.word	0x20000948
   27d44:	5002b000 	.word	0x5002b000
   27d48:	00f10001 	.word	0x00f10001
   27d4c:	00f10005 	.word	0x00f10005
   27d50:	00f1000b 	.word	0x00f1000b
   27d54:	00f10003 	.word	0x00f10003
   27d58:	00033f44 	.word	0x00033f44
   27d5c:	00033f5c 	.word	0x00033f5c
   27d60:	00033f9c 	.word	0x00033f9c
   27d64:	00033f7c 	.word	0x00033f7c
   27d68:	20000938 	.word	0x20000938
   27d6c:	00f10002 	.word	0x00f10002
   27d70:	4b19      	ldr	r3, [pc, #100]	; (27dd8 <ProcessAesDrv+0x36c>)
   27d72:	682a      	ldr	r2, [r5, #0]
   27d74:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   27d78:	686a      	ldr	r2, [r5, #4]
   27d7a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   27d7e:	68aa      	ldr	r2, [r5, #8]
   27d80:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   27d84:	68ea      	ldr	r2, [r5, #12]
   27d86:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   27d8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27d8c:	e72c      	b.n	27be8 <ProcessAesDrv+0x17c>
   27d8e:	4b12      	ldr	r3, [pc, #72]	; (27dd8 <ProcessAesDrv+0x36c>)
   27d90:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   27d94:	602a      	str	r2, [r5, #0]
   27d96:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   27d9a:	606a      	str	r2, [r5, #4]
   27d9c:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   27da0:	60aa      	str	r2, [r5, #8]
   27da2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   27da6:	60eb      	str	r3, [r5, #12]
   27da8:	e769      	b.n	27c7e <ProcessAesDrv+0x212>
   27daa:	4c0c      	ldr	r4, [pc, #48]	; (27ddc <ProcessAesDrv+0x370>)
   27dac:	e696      	b.n	27adc <ProcessAesDrv+0x70>
   27dae:	683b      	ldr	r3, [r7, #0]
   27db0:	681b      	ldr	r3, [r3, #0]
   27db2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   27db6:	683b      	ldr	r3, [r7, #0]
   27db8:	685b      	ldr	r3, [r3, #4]
   27dba:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   27dbe:	683b      	ldr	r3, [r7, #0]
   27dc0:	689b      	ldr	r3, [r3, #8]
   27dc2:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   27dc6:	683b      	ldr	r3, [r7, #0]
   27dc8:	68db      	ldr	r3, [r3, #12]
   27dca:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   27dce:	4659      	mov	r1, fp
   27dd0:	4650      	mov	r0, sl
   27dd2:	f7fe fd09 	bl	267e8 <CC_PalMemSetZeroPlat>
   27dd6:	e7af      	b.n	27d38 <ProcessAesDrv+0x2cc>
   27dd8:	5002b000 	.word	0x5002b000
   27ddc:	00f10004 	.word	0x00f10004

00027de0 <FinishAesDrv>:
   27de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27de4:	b301      	cbz	r1, 27e28 <FinishAesDrv+0x48>
   27de6:	b1fa      	cbz	r2, 27e28 <FinishAesDrv+0x48>
   27de8:	4604      	mov	r4, r0
   27dea:	2800      	cmp	r0, #0
   27dec:	d07c      	beq.n	27ee8 <FinishAesDrv+0x108>
   27dee:	461d      	mov	r5, r3
   27df0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   27df2:	2b07      	cmp	r3, #7
   27df4:	460e      	mov	r6, r1
   27df6:	d01b      	beq.n	27e30 <FinishAesDrv+0x50>
   27df8:	b95d      	cbnz	r5, 27e12 <FinishAesDrv+0x32>
   27dfa:	2b03      	cmp	r3, #3
   27dfc:	d110      	bne.n	27e20 <FinishAesDrv+0x40>
   27dfe:	6d83      	ldr	r3, [r0, #88]	; 0x58
   27e00:	b973      	cbnz	r3, 27e20 <FinishAesDrv+0x40>
   27e02:	f100 0364 	add.w	r3, r0, #100	; 0x64
   27e06:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   27e0a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   27e0e:	600b      	str	r3, [r1, #0]
   27e10:	2510      	movs	r5, #16
   27e12:	462b      	mov	r3, r5
   27e14:	4631      	mov	r1, r6
   27e16:	4620      	mov	r0, r4
   27e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27e1c:	f7ff be26 	b.w	27a6c <ProcessAesDrv>
   27e20:	462f      	mov	r7, r5
   27e22:	4638      	mov	r0, r7
   27e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27e28:	4f77      	ldr	r7, [pc, #476]	; (28008 <FinishAesDrv+0x228>)
   27e2a:	4638      	mov	r0, r7
   27e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27e30:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   27e32:	2b00      	cmp	r3, #0
   27e34:	d15b      	bne.n	27eee <FinishAesDrv+0x10e>
   27e36:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   27e3a:	d25d      	bcs.n	27ef8 <FinishAesDrv+0x118>
   27e3c:	b915      	cbnz	r5, 27e44 <FinishAesDrv+0x64>
   27e3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   27e40:	2b00      	cmp	r3, #0
   27e42:	d159      	bne.n	27ef8 <FinishAesDrv+0x118>
   27e44:	4871      	ldr	r0, [pc, #452]	; (2800c <FinishAesDrv+0x22c>)
   27e46:	f04f 31ff 	mov.w	r1, #4294967295
   27e4a:	f7fe fce5 	bl	26818 <CC_PalMutexLock>
   27e4e:	2800      	cmp	r0, #0
   27e50:	f040 80b8 	bne.w	27fc4 <FinishAesDrv+0x1e4>
   27e54:	2000      	movs	r0, #0
   27e56:	f7fe fd0f 	bl	26878 <CC_PalPowerSaveModeSelect>
   27e5a:	2800      	cmp	r0, #0
   27e5c:	f040 80ae 	bne.w	27fbc <FinishAesDrv+0x1dc>
   27e60:	4a6b      	ldr	r2, [pc, #428]	; (28010 <FinishAesDrv+0x230>)
   27e62:	2301      	movs	r3, #1
   27e64:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   27e68:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27e6c:	2b00      	cmp	r3, #0
   27e6e:	d1fb      	bne.n	27e68 <FinishAesDrv+0x88>
   27e70:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27e72:	2b03      	cmp	r3, #3
   27e74:	dd20      	ble.n	27eb8 <FinishAesDrv+0xd8>
   27e76:	3b06      	subs	r3, #6
   27e78:	2b01      	cmp	r3, #1
   27e7a:	d81f      	bhi.n	27ebc <FinishAesDrv+0xdc>
   27e7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   27e7e:	2b01      	cmp	r3, #1
   27e80:	d83c      	bhi.n	27efc <FinishAesDrv+0x11c>
   27e82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27e84:	2b01      	cmp	r3, #1
   27e86:	f200 80a5 	bhi.w	27fd4 <FinishAesDrv+0x1f4>
   27e8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   27e8c:	2b01      	cmp	r3, #1
   27e8e:	f200 80a3 	bhi.w	27fd8 <FinishAesDrv+0x1f8>
   27e92:	4620      	mov	r0, r4
   27e94:	f7ff fd60 	bl	27958 <InitAes.part.0>
   27e98:	4607      	mov	r7, r0
   27e9a:	b980      	cbnz	r0, 27ebe <FinishAesDrv+0xde>
   27e9c:	4620      	mov	r0, r4
   27e9e:	f7ff fd09 	bl	278b4 <LoadAesKey>
   27ea2:	4607      	mov	r7, r0
   27ea4:	b958      	cbnz	r0, 27ebe <FinishAesDrv+0xde>
   27ea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27ea8:	2b07      	cmp	r3, #7
   27eaa:	d807      	bhi.n	27ebc <FinishAesDrv+0xdc>
   27eac:	e8df f003 	tbb	[pc, r3]
   27eb0:	285c2835 	.word	0x285c2835
   27eb4:	285c0606 	.word	0x285c0606
   27eb8:	2b00      	cmp	r3, #0
   27eba:	dadf      	bge.n	27e7c <FinishAesDrv+0x9c>
   27ebc:	4f55      	ldr	r7, [pc, #340]	; (28014 <FinishAesDrv+0x234>)
   27ebe:	4a54      	ldr	r2, [pc, #336]	; (28010 <FinishAesDrv+0x230>)
   27ec0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27ec4:	2b00      	cmp	r3, #0
   27ec6:	d1fb      	bne.n	27ec0 <FinishAesDrv+0xe0>
   27ec8:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   27ecc:	2001      	movs	r0, #1
   27ece:	f7fe fcd3 	bl	26878 <CC_PalPowerSaveModeSelect>
   27ed2:	2800      	cmp	r0, #0
   27ed4:	d17a      	bne.n	27fcc <FinishAesDrv+0x1ec>
   27ed6:	484d      	ldr	r0, [pc, #308]	; (2800c <FinishAesDrv+0x22c>)
   27ed8:	f7fe fca6 	bl	26828 <CC_PalMutexUnlock>
   27edc:	2800      	cmp	r0, #0
   27ede:	d0a0      	beq.n	27e22 <FinishAesDrv+0x42>
   27ee0:	484d      	ldr	r0, [pc, #308]	; (28018 <FinishAesDrv+0x238>)
   27ee2:	f7fd fd1d 	bl	25920 <CC_PalAbort>
   27ee6:	e79c      	b.n	27e22 <FinishAesDrv+0x42>
   27ee8:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   27eec:	e799      	b.n	27e22 <FinishAesDrv+0x42>
   27eee:	2b01      	cmp	r3, #1
   27ef0:	d1a4      	bne.n	27e3c <FinishAesDrv+0x5c>
   27ef2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   27ef6:	d3a1      	bcc.n	27e3c <FinishAesDrv+0x5c>
   27ef8:	4f48      	ldr	r7, [pc, #288]	; (2801c <FinishAesDrv+0x23c>)
   27efa:	e792      	b.n	27e22 <FinishAesDrv+0x42>
   27efc:	4f48      	ldr	r7, [pc, #288]	; (28020 <FinishAesDrv+0x240>)
   27efe:	e7de      	b.n	27ebe <FinishAesDrv+0xde>
   27f00:	4b43      	ldr	r3, [pc, #268]	; (28010 <FinishAesDrv+0x230>)
   27f02:	6822      	ldr	r2, [r4, #0]
   27f04:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   27f08:	6862      	ldr	r2, [r4, #4]
   27f0a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   27f0e:	68a2      	ldr	r2, [r4, #8]
   27f10:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   27f14:	68e2      	ldr	r2, [r4, #12]
   27f16:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   27f1a:	4b3d      	ldr	r3, [pc, #244]	; (28010 <FinishAesDrv+0x230>)
   27f1c:	2201      	movs	r2, #1
   27f1e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   27f22:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   27f26:	2d00      	cmp	r5, #0
   27f28:	d158      	bne.n	27fdc <FinishAesDrv+0x1fc>
   27f2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
   27f2c:	b909      	cbnz	r1, 27f32 <FinishAesDrv+0x152>
   27f2e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   27f32:	4b37      	ldr	r3, [pc, #220]	; (28010 <FinishAesDrv+0x230>)
   27f34:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   27f38:	2f00      	cmp	r7, #0
   27f3a:	d1fb      	bne.n	27f34 <FinishAesDrv+0x154>
   27f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27f3e:	3b01      	subs	r3, #1
   27f40:	2b06      	cmp	r3, #6
   27f42:	d8bc      	bhi.n	27ebe <FinishAesDrv+0xde>
   27f44:	a201      	add	r2, pc, #4	; (adr r2, 27f4c <FinishAesDrv+0x16c>)
   27f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27f4a:	bf00      	nop
   27f4c:	00027f85 	.word	0x00027f85
   27f50:	00027fa1 	.word	0x00027fa1
   27f54:	00027f85 	.word	0x00027f85
   27f58:	00027ebf 	.word	0x00027ebf
   27f5c:	00027ebf 	.word	0x00027ebf
   27f60:	00027fa1 	.word	0x00027fa1
   27f64:	00027f85 	.word	0x00027f85
   27f68:	4b29      	ldr	r3, [pc, #164]	; (28010 <FinishAesDrv+0x230>)
   27f6a:	6822      	ldr	r2, [r4, #0]
   27f6c:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   27f70:	6862      	ldr	r2, [r4, #4]
   27f72:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   27f76:	68a2      	ldr	r2, [r4, #8]
   27f78:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   27f7c:	68e2      	ldr	r2, [r4, #12]
   27f7e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   27f82:	e7ca      	b.n	27f1a <FinishAesDrv+0x13a>
   27f84:	4b22      	ldr	r3, [pc, #136]	; (28010 <FinishAesDrv+0x230>)
   27f86:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   27f8a:	6022      	str	r2, [r4, #0]
   27f8c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   27f90:	6062      	str	r2, [r4, #4]
   27f92:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   27f96:	60a2      	str	r2, [r4, #8]
   27f98:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   27f9c:	60e3      	str	r3, [r4, #12]
   27f9e:	e78e      	b.n	27ebe <FinishAesDrv+0xde>
   27fa0:	4b1b      	ldr	r3, [pc, #108]	; (28010 <FinishAesDrv+0x230>)
   27fa2:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   27fa6:	6022      	str	r2, [r4, #0]
   27fa8:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   27fac:	6062      	str	r2, [r4, #4]
   27fae:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   27fb2:	60a2      	str	r2, [r4, #8]
   27fb4:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   27fb8:	60e3      	str	r3, [r4, #12]
   27fba:	e780      	b.n	27ebe <FinishAesDrv+0xde>
   27fbc:	4819      	ldr	r0, [pc, #100]	; (28024 <FinishAesDrv+0x244>)
   27fbe:	f7fd fcaf 	bl	25920 <CC_PalAbort>
   27fc2:	e74d      	b.n	27e60 <FinishAesDrv+0x80>
   27fc4:	4818      	ldr	r0, [pc, #96]	; (28028 <FinishAesDrv+0x248>)
   27fc6:	f7fd fcab 	bl	25920 <CC_PalAbort>
   27fca:	e743      	b.n	27e54 <FinishAesDrv+0x74>
   27fcc:	4817      	ldr	r0, [pc, #92]	; (2802c <FinishAesDrv+0x24c>)
   27fce:	f7fd fca7 	bl	25920 <CC_PalAbort>
   27fd2:	e780      	b.n	27ed6 <FinishAesDrv+0xf6>
   27fd4:	4f16      	ldr	r7, [pc, #88]	; (28030 <FinishAesDrv+0x250>)
   27fd6:	e772      	b.n	27ebe <FinishAesDrv+0xde>
   27fd8:	4f16      	ldr	r7, [pc, #88]	; (28034 <FinishAesDrv+0x254>)
   27fda:	e770      	b.n	27ebe <FinishAesDrv+0xde>
   27fdc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   27fde:	6832      	ldr	r2, [r6, #0]
   27fe0:	2901      	cmp	r1, #1
   27fe2:	d00a      	beq.n	27ffa <FinishAesDrv+0x21a>
   27fe4:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   27fe8:	2010      	movs	r0, #16
   27fea:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   27fee:	f7fe fb7d 	bl	266ec <CC_HalWaitInterrupt>
   27ff2:	4607      	mov	r7, r0
   27ff4:	2800      	cmp	r0, #0
   27ff6:	d09c      	beq.n	27f32 <FinishAesDrv+0x152>
   27ff8:	e761      	b.n	27ebe <FinishAesDrv+0xde>
   27ffa:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   27ffe:	2040      	movs	r0, #64	; 0x40
   28000:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   28004:	e7f3      	b.n	27fee <FinishAesDrv+0x20e>
   28006:	bf00      	nop
   28008:	00f1000b 	.word	0x00f1000b
   2800c:	20000948 	.word	0x20000948
   28010:	5002b000 	.word	0x5002b000
   28014:	00f10001 	.word	0x00f10001
   28018:	00033f9c 	.word	0x00033f9c
   2801c:	00f10005 	.word	0x00f10005
   28020:	00f10002 	.word	0x00f10002
   28024:	00033f5c 	.word	0x00033f5c
   28028:	00033f44 	.word	0x00033f44
   2802c:	00033f7c 	.word	0x00033f7c
   28030:	00f10003 	.word	0x00f10003
   28034:	00f10004 	.word	0x00f10004

00028038 <kmu_validate_slot_and_size>:
   28038:	b921      	cbnz	r1, 28044 <kmu_validate_slot_and_size+0xc>
   2803a:	4b03      	ldr	r3, [pc, #12]	; (28048 <kmu_validate_slot_and_size+0x10>)
   2803c:	2800      	cmp	r0, #0
   2803e:	bf18      	it	ne
   28040:	4618      	movne	r0, r3
   28042:	4770      	bx	lr
   28044:	4801      	ldr	r0, [pc, #4]	; (2804c <kmu_validate_slot_and_size+0x14>)
   28046:	4770      	bx	lr
   28048:	00f70001 	.word	0x00f70001
   2804c:	00f70003 	.word	0x00f70003

00028050 <kmu_validate_kdr_slot_and_size>:
   28050:	b921      	cbnz	r1, 2805c <kmu_validate_kdr_slot_and_size+0xc>
   28052:	4b03      	ldr	r3, [pc, #12]	; (28060 <kmu_validate_kdr_slot_and_size+0x10>)
   28054:	2800      	cmp	r0, #0
   28056:	bf18      	it	ne
   28058:	4618      	movne	r0, r3
   2805a:	4770      	bx	lr
   2805c:	4801      	ldr	r0, [pc, #4]	; (28064 <kmu_validate_kdr_slot_and_size+0x14>)
   2805e:	4770      	bx	lr
   28060:	00f70001 	.word	0x00f70001
   28064:	00f70003 	.word	0x00f70003

00028068 <kmu_use_kdr_key>:
   28068:	4b03      	ldr	r3, [pc, #12]	; (28078 <kmu_use_kdr_key+0x10>)
   2806a:	2000      	movs	r0, #0
   2806c:	2201      	movs	r2, #1
   2806e:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   28072:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   28076:	4770      	bx	lr
   28078:	5002b000 	.word	0x5002b000

0002807c <kmu_derive_cmac>:
   2807c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28080:	b0cc      	sub	sp, #304	; 0x130
   28082:	2400      	movs	r4, #0
   28084:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   28086:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   2808a:	4682      	mov	sl, r0
   2808c:	4689      	mov	r9, r1
   2808e:	4616      	mov	r6, r2
   28090:	4621      	mov	r1, r4
   28092:	2274      	movs	r2, #116	; 0x74
   28094:	a80e      	add	r0, sp, #56	; 0x38
   28096:	461f      	mov	r7, r3
   28098:	f001 fea7 	bl	29dea <memset>
   2809c:	2280      	movs	r2, #128	; 0x80
   2809e:	4621      	mov	r1, r4
   280a0:	a82c      	add	r0, sp, #176	; 0xb0
   280a2:	942b      	str	r4, [sp, #172]	; 0xac
   280a4:	f001 fea1 	bl	29dea <memset>
   280a8:	2384      	movs	r3, #132	; 0x84
   280aa:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   280ae:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   280b2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   280b6:	9305      	str	r3, [sp, #20]
   280b8:	d863      	bhi.n	28182 <kmu_derive_cmac+0x106>
   280ba:	f7ff fcbf 	bl	27a3c <write_invalid_key>
   280be:	ab05      	add	r3, sp, #20
   280c0:	4630      	mov	r0, r6
   280c2:	ae2b      	add	r6, sp, #172	; 0xac
   280c4:	9301      	str	r3, [sp, #4]
   280c6:	9502      	str	r5, [sp, #8]
   280c8:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   280cc:	4639      	mov	r1, r7
   280ce:	9600      	str	r6, [sp, #0]
   280d0:	f000 f862 	bl	28198 <UtilCmacBuildDataForDerivation>
   280d4:	2800      	cmp	r0, #0
   280d6:	d14f      	bne.n	28178 <kmu_derive_cmac+0xfc>
   280d8:	2303      	movs	r3, #3
   280da:	f88d 3013 	strb.w	r3, [sp, #19]
   280de:	f89d 3013 	ldrb.w	r3, [sp, #19]
   280e2:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   280e6:	2307      	movs	r3, #7
   280e8:	2200      	movs	r2, #0
   280ea:	901c      	str	r0, [sp, #112]	; 0x70
   280ec:	2110      	movs	r1, #16
   280ee:	a80e      	add	r0, sp, #56	; 0x38
   280f0:	931b      	str	r3, [sp, #108]	; 0x6c
   280f2:	2401      	movs	r4, #1
   280f4:	2301      	movs	r3, #1
   280f6:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   280fa:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   280fe:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   28102:	9426      	str	r4, [sp, #152]	; 0x98
   28104:	f10d 0920 	add.w	r9, sp, #32
   28108:	f7fe fb6e 	bl	267e8 <CC_PalMemSetZeroPlat>
   2810c:	2210      	movs	r2, #16
   2810e:	9200      	str	r2, [sp, #0]
   28110:	9905      	ldr	r1, [sp, #20]
   28112:	f8cd 9004 	str.w	r9, [sp, #4]
   28116:	ab0a      	add	r3, sp, #40	; 0x28
   28118:	4630      	mov	r0, r6
   2811a:	aa06      	add	r2, sp, #24
   2811c:	f7ff fa1e 	bl	2755c <SetDataBuffersInfo>
   28120:	4607      	mov	r7, r0
   28122:	b170      	cbz	r0, 28142 <kmu_derive_cmac+0xc6>
   28124:	e01d      	b.n	28162 <kmu_derive_cmac+0xe6>
   28126:	a90e      	add	r1, sp, #56	; 0x38
   28128:	eb08 0007 	add.w	r0, r8, r7
   2812c:	f7fe fb58 	bl	267e0 <CC_PalMemCopyPlat>
   28130:	2110      	movs	r1, #16
   28132:	a80e      	add	r0, sp, #56	; 0x38
   28134:	f7fe fb58 	bl	267e8 <CC_PalMemSetZeroPlat>
   28138:	3401      	adds	r4, #1
   2813a:	1bad      	subs	r5, r5, r6
   2813c:	4437      	add	r7, r6
   2813e:	b2e4      	uxtb	r4, r4
   28140:	d024      	beq.n	2818c <kmu_derive_cmac+0x110>
   28142:	2d10      	cmp	r5, #16
   28144:	464a      	mov	r2, r9
   28146:	9b05      	ldr	r3, [sp, #20]
   28148:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2814c:	a906      	add	r1, sp, #24
   2814e:	a80e      	add	r0, sp, #56	; 0x38
   28150:	462e      	mov	r6, r5
   28152:	bf28      	it	cs
   28154:	2610      	movcs	r6, #16
   28156:	f7ff fe43 	bl	27de0 <FinishAesDrv>
   2815a:	4632      	mov	r2, r6
   2815c:	2800      	cmp	r0, #0
   2815e:	d0e2      	beq.n	28126 <kmu_derive_cmac+0xaa>
   28160:	4607      	mov	r7, r0
   28162:	a80e      	add	r0, sp, #56	; 0x38
   28164:	2274      	movs	r2, #116	; 0x74
   28166:	2100      	movs	r1, #0
   28168:	f7fe fb3c 	bl	267e4 <CC_PalMemSetPlat>
   2816c:	f7ff fc66 	bl	27a3c <write_invalid_key>
   28170:	4638      	mov	r0, r7
   28172:	b04c      	add	sp, #304	; 0x130
   28174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28178:	4f05      	ldr	r7, [pc, #20]	; (28190 <kmu_derive_cmac+0x114>)
   2817a:	4638      	mov	r0, r7
   2817c:	b04c      	add	sp, #304	; 0x130
   2817e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28182:	4f04      	ldr	r7, [pc, #16]	; (28194 <kmu_derive_cmac+0x118>)
   28184:	4638      	mov	r0, r7
   28186:	b04c      	add	sp, #304	; 0x130
   28188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2818c:	462f      	mov	r7, r5
   2818e:	e7e8      	b.n	28162 <kmu_derive_cmac+0xe6>
   28190:	00f1000e 	.word	0x00f1000e
   28194:	00f1000f 	.word	0x00f1000f

00028198 <UtilCmacBuildDataForDerivation>:
   28198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2819c:	b082      	sub	sp, #8
   2819e:	461e      	mov	r6, r3
   281a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   281a2:	2300      	movs	r3, #0
   281a4:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   281a8:	9301      	str	r3, [sp, #4]
   281aa:	d83e      	bhi.n	2822a <UtilCmacBuildDataForDerivation+0x92>
   281ac:	00e4      	lsls	r4, r4, #3
   281ae:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   281b2:	4617      	mov	r7, r2
   281b4:	f101 32ff 	add.w	r2, r1, #4294967295
   281b8:	bf34      	ite	cc
   281ba:	2303      	movcc	r3, #3
   281bc:	2304      	movcs	r3, #4
   281be:	2a3f      	cmp	r2, #63	; 0x3f
   281c0:	460d      	mov	r5, r1
   281c2:	9300      	str	r3, [sp, #0]
   281c4:	d831      	bhi.n	2822a <UtilCmacBuildDataForDerivation+0x92>
   281c6:	b380      	cbz	r0, 2822a <UtilCmacBuildDataForDerivation+0x92>
   281c8:	b116      	cbz	r6, 281d0 <UtilCmacBuildDataForDerivation+0x38>
   281ca:	b377      	cbz	r7, 2822a <UtilCmacBuildDataForDerivation+0x92>
   281cc:	2e40      	cmp	r6, #64	; 0x40
   281ce:	d82c      	bhi.n	2822a <UtilCmacBuildDataForDerivation+0x92>
   281d0:	9a08      	ldr	r2, [sp, #32]
   281d2:	b352      	cbz	r2, 2822a <UtilCmacBuildDataForDerivation+0x92>
   281d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   281d6:	6811      	ldr	r1, [r2, #0]
   281d8:	b339      	cbz	r1, 2822a <UtilCmacBuildDataForDerivation+0x92>
   281da:	19aa      	adds	r2, r5, r6
   281dc:	4413      	add	r3, r2
   281de:	4299      	cmp	r1, r3
   281e0:	d323      	bcc.n	2822a <UtilCmacBuildDataForDerivation+0x92>
   281e2:	9b08      	ldr	r3, [sp, #32]
   281e4:	4601      	mov	r1, r0
   281e6:	462a      	mov	r2, r5
   281e8:	1c58      	adds	r0, r3, #1
   281ea:	f7fe faf9 	bl	267e0 <CC_PalMemCopyPlat>
   281ee:	9b08      	ldr	r3, [sp, #32]
   281f0:	f105 0802 	add.w	r8, r5, #2
   281f4:	441d      	add	r5, r3
   281f6:	2300      	movs	r3, #0
   281f8:	706b      	strb	r3, [r5, #1]
   281fa:	bb0e      	cbnz	r6, 28240 <UtilCmacBuildDataForDerivation+0xa8>
   281fc:	9b08      	ldr	r3, [sp, #32]
   281fe:	9400      	str	r4, [sp, #0]
   28200:	2cff      	cmp	r4, #255	; 0xff
   28202:	eb03 0008 	add.w	r0, r3, r8
   28206:	d914      	bls.n	28232 <UtilCmacBuildDataForDerivation+0x9a>
   28208:	0223      	lsls	r3, r4, #8
   2820a:	b29b      	uxth	r3, r3
   2820c:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   28210:	2202      	movs	r2, #2
   28212:	a901      	add	r1, sp, #4
   28214:	9401      	str	r4, [sp, #4]
   28216:	f7fe fae3 	bl	267e0 <CC_PalMemCopyPlat>
   2821a:	f108 0302 	add.w	r3, r8, #2
   2821e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28220:	2000      	movs	r0, #0
   28222:	6013      	str	r3, [r2, #0]
   28224:	b002      	add	sp, #8
   28226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2822a:	480a      	ldr	r0, [pc, #40]	; (28254 <UtilCmacBuildDataForDerivation+0xbc>)
   2822c:	b002      	add	sp, #8
   2822e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28232:	2201      	movs	r2, #1
   28234:	4669      	mov	r1, sp
   28236:	f7fe fad3 	bl	267e0 <CC_PalMemCopyPlat>
   2823a:	f108 0301 	add.w	r3, r8, #1
   2823e:	e7ee      	b.n	2821e <UtilCmacBuildDataForDerivation+0x86>
   28240:	9b08      	ldr	r3, [sp, #32]
   28242:	4632      	mov	r2, r6
   28244:	eb03 0008 	add.w	r0, r3, r8
   28248:	4639      	mov	r1, r7
   2824a:	f7fe fac9 	bl	267e0 <CC_PalMemCopyPlat>
   2824e:	44b0      	add	r8, r6
   28250:	e7d4      	b.n	281fc <UtilCmacBuildDataForDerivation+0x64>
   28252:	bf00      	nop
   28254:	80000006 	.word	0x80000006

00028258 <CC_PalDataBufferAttrGet>:
   28258:	2000      	movs	r0, #0
   2825a:	7018      	strb	r0, [r3, #0]
   2825c:	4770      	bx	lr
   2825e:	bf00      	nop

00028260 <app_led_cb>:
{
   28260:	b508      	push	{r3, lr}
   28262:	4601      	mov	r1, r0
	dk_set_led(USER_LED, led_state);
   28264:	2002      	movs	r0, #2
   28266:	f7f7 f933 	bl	1f4d0 <dk_set_led>
}
   2826a:	bd08      	pop	{r3, pc}

0002826c <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2826c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   28270:	b2db      	uxtb	r3, r3
   28272:	2b09      	cmp	r3, #9
   28274:	d802      	bhi.n	2827c <char2hex+0x10>
		*x = c - '0';
   28276:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   28278:	2000      	movs	r0, #0
   2827a:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2827c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   28280:	b2db      	uxtb	r3, r3
   28282:	2b05      	cmp	r3, #5
   28284:	d803      	bhi.n	2828e <char2hex+0x22>
		*x = c - 'a' + 10;
   28286:	3857      	subs	r0, #87	; 0x57
   28288:	7008      	strb	r0, [r1, #0]
	return 0;
   2828a:	2000      	movs	r0, #0
   2828c:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   2828e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   28292:	b2db      	uxtb	r3, r3
   28294:	2b05      	cmp	r3, #5
   28296:	d803      	bhi.n	282a0 <char2hex+0x34>
		*x = c - 'A' + 10;
   28298:	3837      	subs	r0, #55	; 0x37
   2829a:	7008      	strb	r0, [r1, #0]
	return 0;
   2829c:	2000      	movs	r0, #0
   2829e:	4770      	bx	lr
		return -EINVAL;
   282a0:	f06f 0015 	mvn.w	r0, #21
}
   282a4:	4770      	bx	lr

000282a6 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   282a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   282aa:	b083      	sub	sp, #12
   282ac:	4616      	mov	r6, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   282ae:	f001 0201 	and.w	r2, r1, #1
   282b2:	eb02 0851 	add.w	r8, r2, r1, lsr #1
   282b6:	4598      	cmp	r8, r3
   282b8:	d82f      	bhi.n	2831a <hex2bin+0x74>
   282ba:	4607      	mov	r7, r0
   282bc:	ea4f 0951 	mov.w	r9, r1, lsr #1
		return 0;
	}

	/* if hexlen is uneven, insert leading zero nibble */
	if (hexlen % 2) {
   282c0:	b9f2      	cbnz	r2, 28300 <hex2bin+0x5a>
		hex++;
		buf++;
	}

	/* regular hex conversion */
	for (size_t i = 0; i < hexlen / 2; i++) {
   282c2:	2400      	movs	r4, #0
   282c4:	45a1      	cmp	r9, r4
   282c6:	d92a      	bls.n	2831e <hex2bin+0x78>
		if (char2hex(hex[2 * i], &dec) < 0) {
   282c8:	0065      	lsls	r5, r4, #1
   282ca:	f10d 0107 	add.w	r1, sp, #7
   282ce:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
   282d2:	f7ff ffcb 	bl	2826c <char2hex>
   282d6:	2800      	cmp	r0, #0
   282d8:	db28      	blt.n	2832c <hex2bin+0x86>
			return 0;
		}
		buf[i] = dec << 4;
   282da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   282de:	011b      	lsls	r3, r3, #4
   282e0:	5533      	strb	r3, [r6, r4]

		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   282e2:	3501      	adds	r5, #1
   282e4:	f10d 0107 	add.w	r1, sp, #7
   282e8:	5d78      	ldrb	r0, [r7, r5]
   282ea:	f7ff ffbf 	bl	2826c <char2hex>
   282ee:	2800      	cmp	r0, #0
   282f0:	db1f      	blt.n	28332 <hex2bin+0x8c>
			return 0;
		}
		buf[i] += dec;
   282f2:	5d33      	ldrb	r3, [r6, r4]
   282f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   282f8:	4413      	add	r3, r2
   282fa:	5533      	strb	r3, [r6, r4]
	for (size_t i = 0; i < hexlen / 2; i++) {
   282fc:	3401      	adds	r4, #1
   282fe:	e7e1      	b.n	282c4 <hex2bin+0x1e>
		if (char2hex(hex[0], &dec) < 0) {
   28300:	f10d 0107 	add.w	r1, sp, #7
   28304:	7800      	ldrb	r0, [r0, #0]
   28306:	f7ff ffb1 	bl	2826c <char2hex>
   2830a:	2800      	cmp	r0, #0
   2830c:	db0b      	blt.n	28326 <hex2bin+0x80>
		buf[0] = dec;
   2830e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28312:	f806 3b01 	strb.w	r3, [r6], #1
		hex++;
   28316:	3701      	adds	r7, #1
		buf++;
   28318:	e7d3      	b.n	282c2 <hex2bin+0x1c>
		return 0;
   2831a:	f04f 0800 	mov.w	r8, #0
	}

	return hexlen / 2 + hexlen % 2;
}
   2831e:	4640      	mov	r0, r8
   28320:	b003      	add	sp, #12
   28322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return 0;
   28326:	f04f 0800 	mov.w	r8, #0
   2832a:	e7f8      	b.n	2831e <hex2bin+0x78>
			return 0;
   2832c:	f04f 0800 	mov.w	r8, #0
   28330:	e7f5      	b.n	2831e <hex2bin+0x78>
			return 0;
   28332:	f04f 0800 	mov.w	r8, #0
   28336:	e7f2      	b.n	2831e <hex2bin+0x78>

00028338 <arch_printk_char_out>:
}
   28338:	2000      	movs	r0, #0
   2833a:	4770      	bx	lr

0002833c <str_out>:
{
   2833c:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2833e:	680c      	ldr	r4, [r1, #0]
   28340:	b154      	cbz	r4, 28358 <str_out+0x1c>
   28342:	688a      	ldr	r2, [r1, #8]
   28344:	684b      	ldr	r3, [r1, #4]
   28346:	429a      	cmp	r2, r3
   28348:	da06      	bge.n	28358 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   2834a:	3b01      	subs	r3, #1
   2834c:	429a      	cmp	r2, r3
   2834e:	d008      	beq.n	28362 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   28350:	1c53      	adds	r3, r2, #1
   28352:	608b      	str	r3, [r1, #8]
   28354:	54a0      	strb	r0, [r4, r2]
   28356:	e002      	b.n	2835e <str_out+0x22>
		ctx->count++;
   28358:	688b      	ldr	r3, [r1, #8]
   2835a:	3301      	adds	r3, #1
   2835c:	608b      	str	r3, [r1, #8]
}
   2835e:	bc10      	pop	{r4}
   28360:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   28362:	1c53      	adds	r3, r2, #1
   28364:	608b      	str	r3, [r1, #8]
   28366:	2300      	movs	r3, #0
   28368:	54a3      	strb	r3, [r4, r2]
   2836a:	e7f8      	b.n	2835e <str_out+0x22>

0002836c <printk>:
{
   2836c:	b40f      	push	{r0, r1, r2, r3}
   2836e:	b500      	push	{lr}
   28370:	b083      	sub	sp, #12
   28372:	a904      	add	r1, sp, #16
   28374:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   28378:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2837a:	f7e8 fce7 	bl	10d4c <vprintk>
}
   2837e:	b003      	add	sp, #12
   28380:	f85d eb04 	ldr.w	lr, [sp], #4
   28384:	b004      	add	sp, #16
   28386:	4770      	bx	lr

00028388 <snprintk>:
{
   28388:	b40c      	push	{r2, r3}
   2838a:	b500      	push	{lr}
   2838c:	b083      	sub	sp, #12
   2838e:	ab04      	add	r3, sp, #16
   28390:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   28394:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   28396:	f7e8 fce7 	bl	10d68 <vsnprintk>
}
   2839a:	b003      	add	sp, #12
   2839c:	f85d eb04 	ldr.w	lr, [sp], #4
   283a0:	b002      	add	sp, #8
   283a2:	4770      	bx	lr

000283a4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   283a4:	b508      	push	{r3, lr}
   283a6:	4604      	mov	r4, r0
   283a8:	4608      	mov	r0, r1
   283aa:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   283ac:	461a      	mov	r2, r3
   283ae:	47a0      	blx	r4
	return z_impl_z_current_get();
   283b0:	f7fb ff8a 	bl	242c8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   283b4:	f7eb faf0 	bl	13998 <z_impl_k_thread_abort>

000283b8 <chunk_mem>:
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   283b8:	00c9      	lsls	r1, r1, #3
   283ba:	3104      	adds	r1, #4
}
   283bc:	4408      	add	r0, r1
   283be:	4770      	bx	lr

000283c0 <free_list_remove_bidx>:
	void *cmem = &buf[c];
   283c0:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		return ((uint16_t *)cmem)[f];
   283c4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   283c8:	88db      	ldrh	r3, [r3, #6]
	if (next_free_chunk(h, c) == c) {
   283ca:	4299      	cmp	r1, r3
   283cc:	d00c      	beq.n	283e8 <free_list_remove_bidx+0x28>
   283ce:	4484      	add	ip, r0
   283d0:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = second;
   283d4:	3204      	adds	r2, #4
   283d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   283da:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   283dc:	3206      	adds	r2, #6
   283de:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   283e0:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   283e2:	3304      	adds	r3, #4
   283e4:	52c1      	strh	r1, [r0, r3]
}
   283e6:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   283e8:	68c3      	ldr	r3, [r0, #12]
   283ea:	2101      	movs	r1, #1
   283ec:	4091      	lsls	r1, r2
   283ee:	ea23 0301 	bic.w	r3, r3, r1
   283f2:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   283f4:	3204      	adds	r2, #4
   283f6:	2300      	movs	r3, #0
   283f8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   283fc:	4770      	bx	lr

000283fe <free_list_add_bidx>:
{
   283fe:	b510      	push	{r4, lr}
	if (b->next == 0U) {
   28400:	1d13      	adds	r3, r2, #4
   28402:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   28406:	b974      	cbnz	r4, 28426 <free_list_add_bidx+0x28>
		h->avail_buckets |= BIT(bidx);
   28408:	68c3      	ldr	r3, [r0, #12]
   2840a:	2401      	movs	r4, #1
   2840c:	4094      	lsls	r4, r2
   2840e:	4323      	orrs	r3, r4
   28410:	60c3      	str	r3, [r0, #12]
		b->next = c;
   28412:	3204      	adds	r2, #4
   28414:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   28418:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   2841a:	1d1a      	adds	r2, r3, #4
   2841c:	b289      	uxth	r1, r1
   2841e:	5281      	strh	r1, [r0, r2]
   28420:	3306      	adds	r3, #6
   28422:	52c1      	strh	r1, [r0, r3]
}
   28424:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   28426:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   28428:	3204      	adds	r2, #4
   2842a:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   2842c:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   28430:	f10c 0e04 	add.w	lr, ip, #4
   28434:	f820 300e 	strh.w	r3, [r0, lr]
   28438:	f10c 0c06 	add.w	ip, ip, #6
   2843c:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   28440:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   28442:	3306      	adds	r3, #6
   28444:	b289      	uxth	r1, r1
   28446:	52c1      	strh	r1, [r0, r3]
   28448:	5281      	strh	r1, [r0, r2]
   2844a:	e7eb      	b.n	28424 <free_list_add_bidx+0x26>

0002844c <split_chunks>:
{
   2844c:	b500      	push	{lr}
	void *cmem = &buf[c];
   2844e:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   28450:	3302      	adds	r3, #2
   28452:	f830 e003 	ldrh.w	lr, [r0, r3]
	chunksz_t lsz = rc - lc;
   28456:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2845a:	1a89      	subs	r1, r1, r2
   2845c:	eb01 015e 	add.w	r1, r1, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28460:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   28464:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28468:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   2846c:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   2846e:	3302      	adds	r3, #2
   28470:	f820 e003 	strh.w	lr, [r0, r3]
   28474:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   28478:	5ac3      	ldrh	r3, [r0, r3]
	return c + chunk_size(h, c);
   2847a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   2847e:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
}
   28482:	f85d fb04 	ldr.w	pc, [sp], #4

00028486 <merge_chunks>:
{
   28486:	b500      	push	{lr}
	void *cmem = &buf[c];
   28488:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   2848a:	3102      	adds	r1, #2
   2848c:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   28490:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   28494:	f10c 0c02 	add.w	ip, ip, #2
   28498:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2849c:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2849e:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   284a2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   284a6:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   284aa:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   284ae:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   284b2:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
}
   284b6:	f85d fb04 	ldr.w	pc, [sp], #4

000284ba <mem_to_chunkid>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   284ba:	3904      	subs	r1, #4
   284bc:	1a08      	subs	r0, r1, r0
}
   284be:	08c0      	lsrs	r0, r0, #3
   284c0:	4770      	bx	lr

000284c2 <free_list_remove>:
{
   284c2:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   284c4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   284c8:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   284ca:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   284cc:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   284d0:	f1c2 021f 	rsb	r2, r2, #31
   284d4:	f7ff ff74 	bl	283c0 <free_list_remove_bidx>
}
   284d8:	bd08      	pop	{r3, pc}

000284da <free_list_add>:
{
   284da:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   284dc:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   284e0:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   284e2:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   284e4:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   284e8:	f1c2 021f 	rsb	r2, r2, #31
   284ec:	f7ff ff87 	bl	283fe <free_list_add_bidx>
}
   284f0:	bd08      	pop	{r3, pc}

000284f2 <free_chunk>:
{
   284f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   284f4:	4604      	mov	r4, r0
   284f6:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   284f8:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   284fa:	1cb7      	adds	r7, r6, #2
   284fc:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   284fe:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   28502:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   28506:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   28508:	f013 0f01 	tst.w	r3, #1
   2850c:	d00c      	beq.n	28528 <free_chunk+0x36>
   2850e:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   28510:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   28512:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   28516:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   28518:	f013 0f01 	tst.w	r3, #1
   2851c:	d00e      	beq.n	2853c <free_chunk+0x4a>
	free_list_add(h, c);
   2851e:	4629      	mov	r1, r5
   28520:	4620      	mov	r0, r4
   28522:	f7ff ffda 	bl	284da <free_list_add>
}
   28526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   28528:	f7ff ffcb 	bl	284c2 <free_list_remove>
   2852c:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   2852e:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   28532:	4629      	mov	r1, r5
   28534:	4620      	mov	r0, r4
   28536:	f7ff ffa6 	bl	28486 <merge_chunks>
   2853a:	e7e8      	b.n	2850e <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   2853c:	4620      	mov	r0, r4
   2853e:	f7ff ffc0 	bl	284c2 <free_list_remove>
   28542:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   28544:	462a      	mov	r2, r5
   28546:	1a69      	subs	r1, r5, r1
   28548:	4620      	mov	r0, r4
   2854a:	f7ff ff9c 	bl	28486 <merge_chunks>
   2854e:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   28550:	1aed      	subs	r5, r5, r3
   28552:	e7e4      	b.n	2851e <free_chunk+0x2c>

00028554 <alloc_chunk>:
{
   28554:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   28556:	fab1 f381 	clz	r3, r1
	if (b->next) {
   2855a:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   2855e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   28562:	b1cd      	cbz	r5, 28598 <alloc_chunk+0x44>
   28564:	f1c3 021f 	rsb	r2, r3, #31
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   28568:	f04f 0e03 	mov.w	lr, #3
			chunkid_t c = b->next;
   2856c:	1d14      	adds	r4, r2, #4
   2856e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   28572:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   28576:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   2857a:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   2857c:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   28580:	d914      	bls.n	285ac <alloc_chunk+0x58>
   28582:	4484      	add	ip, r0
   28584:	f8bc 4006 	ldrh.w	r4, [ip, #6]
			b->next = next_free_chunk(h, c);
   28588:	1d16      	adds	r6, r2, #4
   2858a:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
		} while (--i && b->next != first);
   2858e:	f1be 0e01 	subs.w	lr, lr, #1
   28592:	d001      	beq.n	28598 <alloc_chunk+0x44>
   28594:	42a5      	cmp	r5, r4
   28596:	d1e9      	bne.n	2856c <alloc_chunk+0x18>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   28598:	68c4      	ldr	r4, [r0, #12]
   2859a:	f1c3 0220 	rsb	r2, r3, #32
   2859e:	2301      	movs	r3, #1
   285a0:	4093      	lsls	r3, r2
   285a2:	425b      	negs	r3, r3
	if (bmask != 0U) {
   285a4:	401c      	ands	r4, r3
   285a6:	d105      	bne.n	285b4 <alloc_chunk+0x60>
}
   285a8:	4620      	mov	r0, r4
   285aa:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   285ac:	4621      	mov	r1, r4
   285ae:	f7ff ff07 	bl	283c0 <free_list_remove_bidx>
				return c;
   285b2:	e7f9      	b.n	285a8 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   285b4:	fa94 f2a4 	rbit	r2, r4
   285b8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   285bc:	1d13      	adds	r3, r2, #4
   285be:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   285c2:	4621      	mov	r1, r4
   285c4:	f7ff fefc 	bl	283c0 <free_list_remove_bidx>
		return c;
   285c8:	e7ee      	b.n	285a8 <alloc_chunk+0x54>

000285ca <sys_heap_alloc>:
{
   285ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   285cc:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   285ce:	b341      	cbz	r1, 28622 <sys_heap_alloc+0x58>
   285d0:	460b      	mov	r3, r1
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   285d2:	68aa      	ldr	r2, [r5, #8]
   285d4:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   285d8:	d925      	bls.n	28626 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   285da:	330b      	adds	r3, #11
   285dc:	08dc      	lsrs	r4, r3, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   285de:	4621      	mov	r1, r4
   285e0:	4628      	mov	r0, r5
   285e2:	f7ff ffb7 	bl	28554 <alloc_chunk>
	if (c == 0U) {
   285e6:	4607      	mov	r7, r0
   285e8:	b1f8      	cbz	r0, 2862a <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   285ea:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   285ec:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   285f0:	885b      	ldrh	r3, [r3, #2]
	if (chunk_size(h, c) > chunk_sz) {
   285f2:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   285f6:	d309      	bcc.n	2860c <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   285f8:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   285fa:	885a      	ldrh	r2, [r3, #2]
   285fc:	f042 0201 	orr.w	r2, r2, #1
   28600:	805a      	strh	r2, [r3, #2]
	mem = chunk_mem(h, c);
   28602:	4639      	mov	r1, r7
   28604:	4628      	mov	r0, r5
   28606:	f7ff fed7 	bl	283b8 <chunk_mem>
}
   2860a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   2860c:	4404      	add	r4, r0
   2860e:	4622      	mov	r2, r4
   28610:	4601      	mov	r1, r0
   28612:	4628      	mov	r0, r5
   28614:	f7ff ff1a 	bl	2844c <split_chunks>
		free_list_add(h, c + chunk_sz);
   28618:	4621      	mov	r1, r4
   2861a:	4628      	mov	r0, r5
   2861c:	f7ff ff5d 	bl	284da <free_list_add>
   28620:	e7ea      	b.n	285f8 <sys_heap_alloc+0x2e>
		return NULL;
   28622:	2000      	movs	r0, #0
   28624:	e7f1      	b.n	2860a <sys_heap_alloc+0x40>
   28626:	2000      	movs	r0, #0
   28628:	e7ef      	b.n	2860a <sys_heap_alloc+0x40>
		return NULL;
   2862a:	2000      	movs	r0, #0
   2862c:	e7ed      	b.n	2860a <sys_heap_alloc+0x40>

0002862e <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   2862e:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28632:	8b83      	ldrh	r3, [r0, #28]
   28634:	f023 0307 	bic.w	r3, r3, #7
   28638:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2863a:	8383      	strh	r3, [r0, #28]
}
   2863c:	4770      	bx	lr

0002863e <notify_monitors>:
{
   2863e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28642:	4606      	mov	r6, r0
   28644:	460f      	mov	r7, r1
   28646:	4690      	mov	r8, r2
	return list->head;
   28648:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2864a:	b121      	cbz	r1, 28656 <notify_monitors+0x18>
	return node->next;
   2864c:	680c      	ldr	r4, [r1, #0]
   2864e:	b13c      	cbz	r4, 28660 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28650:	b931      	cbnz	r1, 28660 <notify_monitors+0x22>
   28652:	460c      	mov	r4, r1
   28654:	e004      	b.n	28660 <notify_monitors+0x22>
   28656:	460c      	mov	r4, r1
   28658:	e002      	b.n	28660 <notify_monitors+0x22>
   2865a:	4623      	mov	r3, r4
   2865c:	4621      	mov	r1, r4
   2865e:	461c      	mov	r4, r3
   28660:	b169      	cbz	r1, 2867e <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   28662:	684d      	ldr	r5, [r1, #4]
   28664:	4643      	mov	r3, r8
   28666:	463a      	mov	r2, r7
   28668:	4630      	mov	r0, r6
   2866a:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2866c:	2c00      	cmp	r4, #0
   2866e:	d0f4      	beq.n	2865a <notify_monitors+0x1c>
	return node->next;
   28670:	6823      	ldr	r3, [r4, #0]
   28672:	2b00      	cmp	r3, #0
   28674:	d0f2      	beq.n	2865c <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28676:	2c00      	cmp	r4, #0
   28678:	d1f0      	bne.n	2865c <notify_monitors+0x1e>
   2867a:	4623      	mov	r3, r4
   2867c:	e7ee      	b.n	2865c <notify_monitors+0x1e>
}
   2867e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028682 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   28682:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   28684:	f013 0307 	ands.w	r3, r3, #7
   28688:	d103      	bne.n	28692 <process_recheck+0x10>
	return list->head;
   2868a:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   2868c:	b10a      	cbz	r2, 28692 <process_recheck+0x10>
		evt = EVT_START;
   2868e:	2003      	movs	r0, #3
   28690:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   28692:	2b02      	cmp	r3, #2
   28694:	d003      	beq.n	2869e <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   28696:	2b01      	cmp	r3, #1
   28698:	d006      	beq.n	286a8 <process_recheck+0x26>
	int evt = EVT_NOP;
   2869a:	2000      	movs	r0, #0
   2869c:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   2869e:	8bc2      	ldrh	r2, [r0, #30]
   286a0:	2a00      	cmp	r2, #0
   286a2:	d1f8      	bne.n	28696 <process_recheck+0x14>
		evt = EVT_STOP;
   286a4:	2004      	movs	r0, #4
   286a6:	4770      	bx	lr
   286a8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   286aa:	b10b      	cbz	r3, 286b0 <process_recheck+0x2e>
		evt = EVT_RESET;
   286ac:	2005      	movs	r0, #5
}
   286ae:	4770      	bx	lr
	int evt = EVT_NOP;
   286b0:	2000      	movs	r0, #0
   286b2:	4770      	bx	lr

000286b4 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   286b4:	b150      	cbz	r0, 286cc <validate_args+0x18>
{
   286b6:	b510      	push	{r4, lr}
   286b8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   286ba:	b151      	cbz	r1, 286d2 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   286bc:	1d08      	adds	r0, r1, #4
   286be:	f000 f854 	bl	2876a <sys_notify_validate>
	if ((rv == 0)
   286c2:	b910      	cbnz	r0, 286ca <validate_args+0x16>
	    && ((cli->notify.flags
   286c4:	68a3      	ldr	r3, [r4, #8]
   286c6:	2b03      	cmp	r3, #3
   286c8:	d806      	bhi.n	286d8 <validate_args+0x24>
}
   286ca:	bd10      	pop	{r4, pc}
		return -EINVAL;
   286cc:	f06f 0015 	mvn.w	r0, #21
}
   286d0:	4770      	bx	lr
		return -EINVAL;
   286d2:	f06f 0015 	mvn.w	r0, #21
   286d6:	e7f8      	b.n	286ca <validate_args+0x16>
		rv = -EINVAL;
   286d8:	f06f 0015 	mvn.w	r0, #21
   286dc:	e7f5      	b.n	286ca <validate_args+0x16>

000286de <notify_one>:
{
   286de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   286e2:	4607      	mov	r7, r0
   286e4:	460c      	mov	r4, r1
   286e6:	4616      	mov	r6, r2
   286e8:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   286ea:	4619      	mov	r1, r3
   286ec:	1d20      	adds	r0, r4, #4
   286ee:	f7e8 ff5f 	bl	115b0 <sys_notify_finalize>
	if (cb) {
   286f2:	b128      	cbz	r0, 28700 <notify_one+0x22>
   286f4:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   286f6:	462b      	mov	r3, r5
   286f8:	4632      	mov	r2, r6
   286fa:	4621      	mov	r1, r4
   286fc:	4638      	mov	r0, r7
   286fe:	47c0      	blx	r8
}
   28700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028704 <notify_all>:
{
   28704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28708:	4680      	mov	r8, r0
   2870a:	460c      	mov	r4, r1
   2870c:	4617      	mov	r7, r2
   2870e:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   28710:	e004      	b.n	2871c <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   28712:	4633      	mov	r3, r6
   28714:	463a      	mov	r2, r7
   28716:	4640      	mov	r0, r8
   28718:	f7ff ffe1 	bl	286de <notify_one>
   2871c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   2871e:	b131      	cbz	r1, 2872e <notify_all+0x2a>
	return node->next;
   28720:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   28722:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28724:	6863      	ldr	r3, [r4, #4]
   28726:	428b      	cmp	r3, r1
   28728:	d1f3      	bne.n	28712 <notify_all+0xe>
	list->tail = node;
   2872a:	6065      	str	r5, [r4, #4]
}
   2872c:	e7f1      	b.n	28712 <notify_all+0xe>
}
   2872e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028732 <onoff_manager_init>:
	if ((mgr == NULL)
   28732:	b170      	cbz	r0, 28752 <onoff_manager_init+0x20>
{
   28734:	b538      	push	{r3, r4, r5, lr}
   28736:	460c      	mov	r4, r1
   28738:	4605      	mov	r5, r0
	    || (transitions == NULL)
   2873a:	b169      	cbz	r1, 28758 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   2873c:	680b      	ldr	r3, [r1, #0]
   2873e:	b173      	cbz	r3, 2875e <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   28740:	684b      	ldr	r3, [r1, #4]
   28742:	b17b      	cbz	r3, 28764 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   28744:	2220      	movs	r2, #32
   28746:	2100      	movs	r1, #0
   28748:	f001 fb4f 	bl	29dea <memset>
   2874c:	612c      	str	r4, [r5, #16]
	return 0;
   2874e:	2000      	movs	r0, #0
}
   28750:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   28752:	f06f 0015 	mvn.w	r0, #21
}
   28756:	4770      	bx	lr
		return -EINVAL;
   28758:	f06f 0015 	mvn.w	r0, #21
   2875c:	e7f8      	b.n	28750 <onoff_manager_init+0x1e>
   2875e:	f06f 0015 	mvn.w	r0, #21
   28762:	e7f5      	b.n	28750 <onoff_manager_init+0x1e>
   28764:	f06f 0015 	mvn.w	r0, #21
   28768:	e7f2      	b.n	28750 <onoff_manager_init+0x1e>

0002876a <sys_notify_validate>:
	if (notify == NULL) {
   2876a:	4602      	mov	r2, r0
   2876c:	b1b0      	cbz	r0, 2879c <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2876e:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   28770:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   28774:	2b02      	cmp	r3, #2
   28776:	d00b      	beq.n	28790 <sys_notify_validate+0x26>
   28778:	2b03      	cmp	r3, #3
   2877a:	d004      	beq.n	28786 <sys_notify_validate+0x1c>
   2877c:	2b01      	cmp	r3, #1
   2877e:	d004      	beq.n	2878a <sys_notify_validate+0x20>
   28780:	f06f 0015 	mvn.w	r0, #21
   28784:	4770      	bx	lr
		if (notify->method.callback == NULL) {
   28786:	6803      	ldr	r3, [r0, #0]
   28788:	b15b      	cbz	r3, 287a2 <sys_notify_validate+0x38>
		notify->result = 0;
   2878a:	2000      	movs	r0, #0
   2878c:	6090      	str	r0, [r2, #8]
   2878e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   28790:	6803      	ldr	r3, [r0, #0]
   28792:	2b00      	cmp	r3, #0
   28794:	d1f9      	bne.n	2878a <sys_notify_validate+0x20>
			rv = -EINVAL;
   28796:	f06f 0015 	mvn.w	r0, #21
}
   2879a:	4770      	bx	lr
		return -EINVAL;
   2879c:	f06f 0015 	mvn.w	r0, #21
   287a0:	4770      	bx	lr
			rv = -EINVAL;
   287a2:	f06f 0015 	mvn.w	r0, #21
   287a6:	4770      	bx	lr

000287a8 <extract_decimal>:
{
   287a8:	4684      	mov	ip, r0
	const char *sp = *str;
   287aa:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   287ac:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   287ae:	e006      	b.n	287be <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   287b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   287b4:	3201      	adds	r2, #1
   287b6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   287ba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   287be:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   287c0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   287c4:	2909      	cmp	r1, #9
   287c6:	d9f3      	bls.n	287b0 <extract_decimal+0x8>
	*str = sp;
   287c8:	f8cc 2000 	str.w	r2, [ip]
}
   287cc:	4770      	bx	lr

000287ce <extract_width>:
{
   287ce:	b530      	push	{r4, r5, lr}
   287d0:	b083      	sub	sp, #12
   287d2:	4604      	mov	r4, r0
   287d4:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   287d6:	7803      	ldrb	r3, [r0, #0]
   287d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   287dc:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   287de:	460d      	mov	r5, r1
   287e0:	780b      	ldrb	r3, [r1, #0]
   287e2:	2b2a      	cmp	r3, #42	; 0x2a
   287e4:	d018      	beq.n	28818 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   287e6:	a801      	add	r0, sp, #4
   287e8:	f7ff ffde 	bl	287a8 <extract_decimal>
	if (sp != wp) {
   287ec:	9b01      	ldr	r3, [sp, #4]
   287ee:	429d      	cmp	r5, r3
   287f0:	d00f      	beq.n	28812 <extract_width+0x44>
		conv->width_present = true;
   287f2:	7823      	ldrb	r3, [r4, #0]
   287f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   287f8:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   287fa:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   287fc:	b2db      	uxtb	r3, r3
   287fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   28802:	2800      	cmp	r0, #0
   28804:	db10      	blt.n	28828 <extract_width+0x5a>
   28806:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   28808:	4313      	orrs	r3, r2
   2880a:	7822      	ldrb	r2, [r4, #0]
   2880c:	f363 0241 	bfi	r2, r3, #1, #1
   28810:	7022      	strb	r2, [r4, #0]
	return sp;
   28812:	9801      	ldr	r0, [sp, #4]
}
   28814:	b003      	add	sp, #12
   28816:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   28818:	7843      	ldrb	r3, [r0, #1]
   2881a:	f043 0301 	orr.w	r3, r3, #1
   2881e:	7043      	strb	r3, [r0, #1]
		return ++sp;
   28820:	4608      	mov	r0, r1
   28822:	3001      	adds	r0, #1
   28824:	9001      	str	r0, [sp, #4]
   28826:	e7f5      	b.n	28814 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   28828:	2201      	movs	r2, #1
   2882a:	e7ed      	b.n	28808 <extract_width+0x3a>

0002882c <extract_prec>:
{
   2882c:	b510      	push	{r4, lr}
   2882e:	b082      	sub	sp, #8
   28830:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   28832:	780b      	ldrb	r3, [r1, #0]
   28834:	2b2e      	cmp	r3, #46	; 0x2e
   28836:	bf14      	ite	ne
   28838:	2300      	movne	r3, #0
   2883a:	2301      	moveq	r3, #1
   2883c:	7842      	ldrb	r2, [r0, #1]
   2883e:	f363 0241 	bfi	r2, r3, #1, #1
   28842:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   28844:	b1c3      	cbz	r3, 28878 <extract_prec+0x4c>
   28846:	4604      	mov	r4, r0
	++sp;
   28848:	9b01      	ldr	r3, [sp, #4]
   2884a:	1c5a      	adds	r2, r3, #1
   2884c:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   2884e:	785b      	ldrb	r3, [r3, #1]
   28850:	2b2a      	cmp	r3, #42	; 0x2a
   28852:	d013      	beq.n	2887c <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   28854:	a801      	add	r0, sp, #4
   28856:	f7ff ffa7 	bl	287a8 <extract_decimal>
	conv->prec_value = prec;
   2885a:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   2885c:	7823      	ldrb	r3, [r4, #0]
   2885e:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   28862:	2800      	cmp	r0, #0
   28864:	db12      	blt.n	2888c <extract_prec+0x60>
   28866:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   28868:	4313      	orrs	r3, r2
   2886a:	7822      	ldrb	r2, [r4, #0]
   2886c:	f363 0241 	bfi	r2, r3, #1, #1
   28870:	7022      	strb	r2, [r4, #0]
	return sp;
   28872:	9801      	ldr	r0, [sp, #4]
}
   28874:	b002      	add	sp, #8
   28876:	bd10      	pop	{r4, pc}
		return sp;
   28878:	4608      	mov	r0, r1
   2887a:	e7fb      	b.n	28874 <extract_prec+0x48>
		conv->prec_star = true;
   2887c:	7843      	ldrb	r3, [r0, #1]
   2887e:	f043 0304 	orr.w	r3, r3, #4
   28882:	7043      	strb	r3, [r0, #1]
		return ++sp;
   28884:	4610      	mov	r0, r2
   28886:	3001      	adds	r0, #1
   28888:	9001      	str	r0, [sp, #4]
   2888a:	e7f3      	b.n	28874 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   2888c:	2201      	movs	r2, #1
   2888e:	e7eb      	b.n	28868 <extract_prec+0x3c>

00028890 <extract_length>:
{
   28890:	4602      	mov	r2, r0
	switch (*sp) {
   28892:	780b      	ldrb	r3, [r1, #0]
   28894:	3b4c      	subs	r3, #76	; 0x4c
   28896:	2b2e      	cmp	r3, #46	; 0x2e
   28898:	d85b      	bhi.n	28952 <extract_length+0xc2>
   2889a:	e8df f003 	tbb	[pc, r3]
   2889e:	5a4f      	.short	0x5a4f
   288a0:	5a5a5a5a 	.word	0x5a5a5a5a
   288a4:	5a5a5a5a 	.word	0x5a5a5a5a
   288a8:	5a5a5a5a 	.word	0x5a5a5a5a
   288ac:	5a5a5a5a 	.word	0x5a5a5a5a
   288b0:	5a5a5a5a 	.word	0x5a5a5a5a
   288b4:	5a5a5a5a 	.word	0x5a5a5a5a
   288b8:	5a185a5a 	.word	0x5a185a5a
   288bc:	5a295a3a 	.word	0x5a295a3a
   288c0:	5a5a5a5a 	.word	0x5a5a5a5a
   288c4:	5a485a5a 	.word	0x5a485a5a
   288c8:	5a5a5a5a 	.word	0x5a5a5a5a
   288cc:	41          	.byte	0x41
   288cd:	00          	.byte	0x00
		if (*++sp == 'h') {
   288ce:	1c48      	adds	r0, r1, #1
   288d0:	784b      	ldrb	r3, [r1, #1]
   288d2:	2b68      	cmp	r3, #104	; 0x68
   288d4:	d005      	beq.n	288e2 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   288d6:	7853      	ldrb	r3, [r2, #1]
   288d8:	2102      	movs	r1, #2
   288da:	f361 03c6 	bfi	r3, r1, #3, #4
   288de:	7053      	strb	r3, [r2, #1]
   288e0:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   288e2:	7853      	ldrb	r3, [r2, #1]
   288e4:	2001      	movs	r0, #1
   288e6:	f360 03c6 	bfi	r3, r0, #3, #4
   288ea:	7053      	strb	r3, [r2, #1]
			++sp;
   288ec:	1c88      	adds	r0, r1, #2
   288ee:	4770      	bx	lr
		if (*++sp == 'l') {
   288f0:	1c48      	adds	r0, r1, #1
   288f2:	784b      	ldrb	r3, [r1, #1]
   288f4:	2b6c      	cmp	r3, #108	; 0x6c
   288f6:	d005      	beq.n	28904 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   288f8:	7853      	ldrb	r3, [r2, #1]
   288fa:	2103      	movs	r1, #3
   288fc:	f361 03c6 	bfi	r3, r1, #3, #4
   28900:	7053      	strb	r3, [r2, #1]
   28902:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   28904:	7853      	ldrb	r3, [r2, #1]
   28906:	2004      	movs	r0, #4
   28908:	f360 03c6 	bfi	r3, r0, #3, #4
   2890c:	7053      	strb	r3, [r2, #1]
			++sp;
   2890e:	1c88      	adds	r0, r1, #2
   28910:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   28912:	7853      	ldrb	r3, [r2, #1]
   28914:	2005      	movs	r0, #5
   28916:	f360 03c6 	bfi	r3, r0, #3, #4
   2891a:	7053      	strb	r3, [r2, #1]
		++sp;
   2891c:	1c48      	adds	r0, r1, #1
		break;
   2891e:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   28920:	7853      	ldrb	r3, [r2, #1]
   28922:	2006      	movs	r0, #6
   28924:	f360 03c6 	bfi	r3, r0, #3, #4
   28928:	7053      	strb	r3, [r2, #1]
		++sp;
   2892a:	1c48      	adds	r0, r1, #1
		break;
   2892c:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   2892e:	7853      	ldrb	r3, [r2, #1]
   28930:	2007      	movs	r0, #7
   28932:	f360 03c6 	bfi	r3, r0, #3, #4
   28936:	7053      	strb	r3, [r2, #1]
		++sp;
   28938:	1c48      	adds	r0, r1, #1
		break;
   2893a:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   2893c:	7853      	ldrb	r3, [r2, #1]
   2893e:	2008      	movs	r0, #8
   28940:	f360 03c6 	bfi	r3, r0, #3, #4
   28944:	7053      	strb	r3, [r2, #1]
		++sp;
   28946:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   28948:	7813      	ldrb	r3, [r2, #0]
   2894a:	f043 0302 	orr.w	r3, r3, #2
   2894e:	7013      	strb	r3, [r2, #0]
		break;
   28950:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   28952:	7853      	ldrb	r3, [r2, #1]
   28954:	f36f 03c6 	bfc	r3, #3, #4
   28958:	7053      	strb	r3, [r2, #1]
		break;
   2895a:	4608      	mov	r0, r1
}
   2895c:	4770      	bx	lr

0002895e <extract_specifier>:
{
   2895e:	b500      	push	{lr}
   28960:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   28962:	4608      	mov	r0, r1
   28964:	f810 3b01 	ldrb.w	r3, [r0], #1
   28968:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   2896a:	2b78      	cmp	r3, #120	; 0x78
   2896c:	d817      	bhi.n	2899e <extract_specifier+0x40>
   2896e:	2b6e      	cmp	r3, #110	; 0x6e
   28970:	d229      	bcs.n	289c6 <extract_specifier+0x68>
   28972:	2b69      	cmp	r3, #105	; 0x69
   28974:	d813      	bhi.n	2899e <extract_specifier+0x40>
   28976:	2b58      	cmp	r3, #88	; 0x58
   28978:	d317      	bcc.n	289aa <extract_specifier+0x4c>
   2897a:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   2897e:	fa5f fc8c 	uxtb.w	ip, ip
   28982:	2101      	movs	r1, #1
   28984:	fa01 f10c 	lsl.w	r1, r1, ip
   28988:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   2898c:	d114      	bne.n	289b8 <extract_specifier+0x5a>
   2898e:	f640 0c01 	movw	ip, #2049	; 0x801
   28992:	ea11 0f0c 	tst.w	r1, ip
   28996:	d155      	bne.n	28a44 <extract_specifier+0xe6>
   28998:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   2899c:	d13a      	bne.n	28a14 <extract_specifier+0xb6>
		conv->invalid = true;
   2899e:	7813      	ldrb	r3, [r2, #0]
   289a0:	f043 0301 	orr.w	r3, r3, #1
   289a4:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   289a6:	2100      	movs	r1, #0
		break;
   289a8:	e042      	b.n	28a30 <extract_specifier+0xd2>
	switch (conv->specifier) {
   289aa:	2b41      	cmp	r3, #65	; 0x41
   289ac:	d004      	beq.n	289b8 <extract_specifier+0x5a>
   289ae:	d3f6      	bcc.n	2899e <extract_specifier+0x40>
   289b0:	3b45      	subs	r3, #69	; 0x45
   289b2:	b2db      	uxtb	r3, r3
   289b4:	2b02      	cmp	r3, #2
   289b6:	d8f2      	bhi.n	2899e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   289b8:	7893      	ldrb	r3, [r2, #2]
   289ba:	2104      	movs	r1, #4
   289bc:	f361 0302 	bfi	r3, r1, #0, #3
   289c0:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   289c2:	2101      	movs	r1, #1
			break;
   289c4:	e034      	b.n	28a30 <extract_specifier+0xd2>
	switch (conv->specifier) {
   289c6:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   289ca:	b2c9      	uxtb	r1, r1
   289cc:	f04f 0c01 	mov.w	ip, #1
   289d0:	fa0c fc01 	lsl.w	ip, ip, r1
   289d4:	f240 4182 	movw	r1, #1154	; 0x482
   289d8:	ea1c 0f01 	tst.w	ip, r1
   289dc:	bf14      	ite	ne
   289de:	f04f 0e01 	movne.w	lr, #1
   289e2:	f04f 0e00 	moveq.w	lr, #0
   289e6:	d12d      	bne.n	28a44 <extract_specifier+0xe6>
   289e8:	f01c 0f24 	tst.w	ip, #36	; 0x24
   289ec:	bf14      	ite	ne
   289ee:	2101      	movne	r1, #1
   289f0:	2100      	moveq	r1, #0
   289f2:	d139      	bne.n	28a68 <extract_specifier+0x10a>
   289f4:	f01c 0c01 	ands.w	ip, ip, #1
   289f8:	d0d1      	beq.n	2899e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   289fa:	7893      	ldrb	r3, [r2, #2]
   289fc:	f04f 0e03 	mov.w	lr, #3
   28a00:	f36e 0302 	bfi	r3, lr, #0, #3
   28a04:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   28a06:	7853      	ldrb	r3, [r2, #1]
   28a08:	f003 0378 	and.w	r3, r3, #120	; 0x78
   28a0c:	2b40      	cmp	r3, #64	; 0x40
   28a0e:	d10f      	bne.n	28a30 <extract_specifier+0xd2>
			unsupported = true;
   28a10:	4661      	mov	r1, ip
   28a12:	e00d      	b.n	28a30 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   28a14:	7891      	ldrb	r1, [r2, #2]
   28a16:	f04f 0c01 	mov.w	ip, #1
   28a1a:	f36c 0102 	bfi	r1, ip, #0, #3
   28a1e:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   28a20:	7851      	ldrb	r1, [r2, #1]
   28a22:	f001 0178 	and.w	r1, r1, #120	; 0x78
   28a26:	2940      	cmp	r1, #64	; 0x40
   28a28:	d013      	beq.n	28a52 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   28a2a:	2b63      	cmp	r3, #99	; 0x63
   28a2c:	d018      	beq.n	28a60 <extract_specifier+0x102>
	bool unsupported = false;
   28a2e:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   28a30:	7813      	ldrb	r3, [r2, #0]
   28a32:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   28a36:	ea41 010c 	orr.w	r1, r1, ip
   28a3a:	f361 0341 	bfi	r3, r1, #1, #1
   28a3e:	7013      	strb	r3, [r2, #0]
}
   28a40:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   28a44:	7891      	ldrb	r1, [r2, #2]
   28a46:	f04f 0c02 	mov.w	ip, #2
   28a4a:	f36c 0102 	bfi	r1, ip, #0, #3
   28a4e:	7091      	strb	r1, [r2, #2]
   28a50:	e7e6      	b.n	28a20 <extract_specifier+0xc2>
			conv->invalid = true;
   28a52:	f892 c000 	ldrb.w	ip, [r2]
   28a56:	f04c 0c01 	orr.w	ip, ip, #1
   28a5a:	f882 c000 	strb.w	ip, [r2]
   28a5e:	e7e4      	b.n	28a2a <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   28a60:	3900      	subs	r1, #0
   28a62:	bf18      	it	ne
   28a64:	2101      	movne	r1, #1
   28a66:	e7e3      	b.n	28a30 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   28a68:	7893      	ldrb	r3, [r2, #2]
   28a6a:	f04f 0c03 	mov.w	ip, #3
   28a6e:	f36c 0302 	bfi	r3, ip, #0, #3
   28a72:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   28a74:	7853      	ldrb	r3, [r2, #1]
   28a76:	f013 0f78 	tst.w	r3, #120	; 0x78
   28a7a:	d1d9      	bne.n	28a30 <extract_specifier+0xd2>
	bool unsupported = false;
   28a7c:	4671      	mov	r1, lr
   28a7e:	e7d7      	b.n	28a30 <extract_specifier+0xd2>

00028a80 <extract_conversion>:
{
   28a80:	b510      	push	{r4, lr}
   28a82:	4604      	mov	r4, r0
   28a84:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   28a86:	2300      	movs	r3, #0
   28a88:	6023      	str	r3, [r4, #0]
   28a8a:	6063      	str	r3, [r4, #4]
   28a8c:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   28a8e:	784b      	ldrb	r3, [r1, #1]
   28a90:	2b25      	cmp	r3, #37	; 0x25
   28a92:	d014      	beq.n	28abe <extract_conversion+0x3e>
   28a94:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   28a96:	4620      	mov	r0, r4
   28a98:	f7e8 fdb4 	bl	11604 <extract_flags>
   28a9c:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   28a9e:	4620      	mov	r0, r4
   28aa0:	f7ff fe95 	bl	287ce <extract_width>
   28aa4:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   28aa6:	4620      	mov	r0, r4
   28aa8:	f7ff fec0 	bl	2882c <extract_prec>
   28aac:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   28aae:	4620      	mov	r0, r4
   28ab0:	f7ff feee 	bl	28890 <extract_length>
   28ab4:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   28ab6:	4620      	mov	r0, r4
   28ab8:	f7ff ff51 	bl	2895e <extract_specifier>
}
   28abc:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   28abe:	3002      	adds	r0, #2
   28ac0:	70e3      	strb	r3, [r4, #3]
		return sp;
   28ac2:	e7fb      	b.n	28abc <extract_conversion+0x3c>

00028ac4 <conversion_radix>:
	switch (specifier) {
   28ac4:	286f      	cmp	r0, #111	; 0x6f
   28ac6:	d00c      	beq.n	28ae2 <conversion_radix+0x1e>
   28ac8:	d905      	bls.n	28ad6 <conversion_radix+0x12>
   28aca:	2870      	cmp	r0, #112	; 0x70
   28acc:	d00b      	beq.n	28ae6 <conversion_radix+0x22>
   28ace:	2878      	cmp	r0, #120	; 0x78
   28ad0:	d10b      	bne.n	28aea <conversion_radix+0x26>
		return 16;
   28ad2:	2010      	movs	r0, #16
   28ad4:	4770      	bx	lr
	switch (specifier) {
   28ad6:	2858      	cmp	r0, #88	; 0x58
   28ad8:	d001      	beq.n	28ade <conversion_radix+0x1a>
   28ada:	200a      	movs	r0, #10
   28adc:	4770      	bx	lr
		return 16;
   28ade:	2010      	movs	r0, #16
   28ae0:	4770      	bx	lr
		return 8;
   28ae2:	2008      	movs	r0, #8
   28ae4:	4770      	bx	lr
		return 16;
   28ae6:	2010      	movs	r0, #16
   28ae8:	4770      	bx	lr
	switch (specifier) {
   28aea:	200a      	movs	r0, #10
}
   28aec:	4770      	bx	lr

00028aee <encode_uint>:
{
   28aee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28af2:	4605      	mov	r5, r0
   28af4:	460c      	mov	r4, r1
   28af6:	4693      	mov	fp, r2
   28af8:	4699      	mov	r9, r3
   28afa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
   28afc:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   28afe:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   28b02:	f7ff ffdf 	bl	28ac4 <conversion_radix>
   28b06:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   28b08:	e015      	b.n	28b36 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28b0a:	f1ba 0f19 	cmp.w	sl, #25
   28b0e:	d820      	bhi.n	28b52 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   28b10:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28b12:	3237      	adds	r2, #55	; 0x37
   28b14:	b2d2      	uxtb	r2, r2
   28b16:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   28b1a:	4632      	mov	r2, r6
   28b1c:	4643      	mov	r3, r8
   28b1e:	4628      	mov	r0, r5
   28b20:	4621      	mov	r1, r4
   28b22:	f7d7 faed 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   28b26:	42b5      	cmp	r5, r6
   28b28:	f174 0400 	sbcs.w	r4, r4, #0
   28b2c:	d315      	bcc.n	28b5a <encode_uint+0x6c>
   28b2e:	454f      	cmp	r7, r9
   28b30:	d913      	bls.n	28b5a <encode_uint+0x6c>
		value /= radix;
   28b32:	4605      	mov	r5, r0
   28b34:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   28b36:	f04f 0800 	mov.w	r8, #0
   28b3a:	4632      	mov	r2, r6
   28b3c:	4643      	mov	r3, r8
   28b3e:	4628      	mov	r0, r5
   28b40:	4621      	mov	r1, r4
   28b42:	f7d7 fadd 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28b46:	2a09      	cmp	r2, #9
   28b48:	d8df      	bhi.n	28b0a <encode_uint+0x1c>
   28b4a:	b2d2      	uxtb	r2, r2
   28b4c:	3230      	adds	r2, #48	; 0x30
   28b4e:	b2d2      	uxtb	r2, r2
   28b50:	e7e1      	b.n	28b16 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   28b52:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28b54:	3257      	adds	r2, #87	; 0x57
   28b56:	b2d2      	uxtb	r2, r2
   28b58:	e7dd      	b.n	28b16 <encode_uint+0x28>
	if (conv->flag_hash) {
   28b5a:	f89b 3000 	ldrb.w	r3, [fp]
   28b5e:	f013 0f20 	tst.w	r3, #32
   28b62:	d003      	beq.n	28b6c <encode_uint+0x7e>
		if (radix == 8) {
   28b64:	2e08      	cmp	r6, #8
   28b66:	d004      	beq.n	28b72 <encode_uint+0x84>
		} else if (radix == 16) {
   28b68:	2e10      	cmp	r6, #16
   28b6a:	d009      	beq.n	28b80 <encode_uint+0x92>
}
   28b6c:	4638      	mov	r0, r7
   28b6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   28b72:	f89b 3002 	ldrb.w	r3, [fp, #2]
   28b76:	f043 0308 	orr.w	r3, r3, #8
   28b7a:	f88b 3002 	strb.w	r3, [fp, #2]
   28b7e:	e7f5      	b.n	28b6c <encode_uint+0x7e>
			conv->altform_0c = true;
   28b80:	f89b 3002 	ldrb.w	r3, [fp, #2]
   28b84:	f043 0310 	orr.w	r3, r3, #16
   28b88:	f88b 3002 	strb.w	r3, [fp, #2]
   28b8c:	e7ee      	b.n	28b6c <encode_uint+0x7e>

00028b8e <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   28b8e:	7843      	ldrb	r3, [r0, #1]
   28b90:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   28b94:	2b07      	cmp	r3, #7
   28b96:	d818      	bhi.n	28bca <store_count+0x3c>
   28b98:	e8df f003 	tbb	[pc, r3]
   28b9c:	0a080604 	.word	0x0a080604
   28ba0:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   28ba4:	600a      	str	r2, [r1, #0]
		break;
   28ba6:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   28ba8:	700a      	strb	r2, [r1, #0]
		break;
   28baa:	4770      	bx	lr
		*(short *)dp = (short)count;
   28bac:	800a      	strh	r2, [r1, #0]
		break;
   28bae:	4770      	bx	lr
		*(long *)dp = (long)count;
   28bb0:	600a      	str	r2, [r1, #0]
		break;
   28bb2:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   28bb4:	17d3      	asrs	r3, r2, #31
   28bb6:	600a      	str	r2, [r1, #0]
   28bb8:	604b      	str	r3, [r1, #4]
		break;
   28bba:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   28bbc:	17d3      	asrs	r3, r2, #31
   28bbe:	600a      	str	r2, [r1, #0]
   28bc0:	604b      	str	r3, [r1, #4]
		break;
   28bc2:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   28bc4:	600a      	str	r2, [r1, #0]
		break;
   28bc6:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   28bc8:	600a      	str	r2, [r1, #0]
}
   28bca:	4770      	bx	lr

00028bcc <outs>:
{
   28bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28bd0:	4607      	mov	r7, r0
   28bd2:	460e      	mov	r6, r1
   28bd4:	4614      	mov	r4, r2
   28bd6:	4698      	mov	r8, r3
	size_t count = 0;
   28bd8:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28bda:	e006      	b.n	28bea <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   28bdc:	4631      	mov	r1, r6
   28bde:	f814 0b01 	ldrb.w	r0, [r4], #1
   28be2:	47b8      	blx	r7
		if (rc < 0) {
   28be4:	2800      	cmp	r0, #0
   28be6:	db09      	blt.n	28bfc <outs+0x30>
		++count;
   28be8:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28bea:	4544      	cmp	r4, r8
   28bec:	d3f6      	bcc.n	28bdc <outs+0x10>
   28bee:	f1b8 0f00 	cmp.w	r8, #0
   28bf2:	d102      	bne.n	28bfa <outs+0x2e>
   28bf4:	7823      	ldrb	r3, [r4, #0]
   28bf6:	2b00      	cmp	r3, #0
   28bf8:	d1f0      	bne.n	28bdc <outs+0x10>
	return (int)count;
   28bfa:	4628      	mov	r0, r5
}
   28bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028c00 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   28c00:	4040      	eors	r0, r0
   28c02:	f380 8811 	msr	BASEPRI, r0
   28c06:	f04f 0004 	mov.w	r0, #4
   28c0a:	df02      	svc	2
}
   28c0c:	4770      	bx	lr

00028c0e <assert_print>:

void assert_print(const char *fmt, ...)
{
   28c0e:	b40f      	push	{r0, r1, r2, r3}
   28c10:	b500      	push	{lr}
   28c12:	b083      	sub	sp, #12
   28c14:	a904      	add	r1, sp, #16
   28c16:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   28c1a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   28c1c:	f7e8 f896 	bl	10d4c <vprintk>

	va_end(ap);
}
   28c20:	b003      	add	sp, #12
   28c22:	f85d eb04 	ldr.w	lr, [sp], #4
   28c26:	b004      	add	sp, #16
   28c28:	4770      	bx	lr

00028c2a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   28c2a:	4770      	bx	lr

00028c2c <z_log_minimal_level_to_char>:
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   28c2c:	3801      	subs	r0, #1
   28c2e:	2803      	cmp	r0, #3
   28c30:	d809      	bhi.n	28c46 <z_log_minimal_level_to_char+0x1a>
   28c32:	e8df f000 	tbb	[pc, r0]
   28c36:	0a02      	.short	0x0a02
   28c38:	0604      	.short	0x0604
   28c3a:	2045      	movs	r0, #69	; 0x45
   28c3c:	4770      	bx	lr
	case LOG_LEVEL_ERR:
		return 'E';
	case LOG_LEVEL_WRN:
		return 'W';
	case LOG_LEVEL_INF:
		return 'I';
   28c3e:	2049      	movs	r0, #73	; 0x49
   28c40:	4770      	bx	lr
	case LOG_LEVEL_DBG:
		return 'D';
   28c42:	2044      	movs	r0, #68	; 0x44
   28c44:	4770      	bx	lr
	default:
		return '?';
   28c46:	203f      	movs	r0, #63	; 0x3f
   28c48:	4770      	bx	lr
		return 'W';
   28c4a:	2057      	movs	r0, #87	; 0x57
	}
}
   28c4c:	4770      	bx	lr

00028c4e <z_log_minimal_printk>:
{
   28c4e:	b40f      	push	{r0, r1, r2, r3}
   28c50:	b500      	push	{lr}
   28c52:	b083      	sub	sp, #12
   28c54:	a904      	add	r1, sp, #16
   28c56:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   28c5a:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   28c5c:	f7e8 f876 	bl	10d4c <vprintk>
}
   28c60:	b003      	add	sp, #12
   28c62:	f85d eb04 	ldr.w	lr, [sp], #4
   28c66:	b004      	add	sp, #16
   28c68:	4770      	bx	lr

00028c6a <nvs_flash_rd>:
{
   28c6a:	b510      	push	{r4, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28c6c:	8984      	ldrh	r4, [r0, #12]
   28c6e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   28c72:	f8d0 e000 	ldr.w	lr, [r0]
   28c76:	fb0c ec04 	mla	ip, ip, r4, lr
	offset += addr & ADDR_OFFS_MASK;
   28c7a:	fa1c f181 	uxtah	r1, ip, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   28c7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   28c80:	6884      	ldr	r4, [r0, #8]
	return api->read(dev, offset, data, len);
   28c82:	6824      	ldr	r4, [r4, #0]
   28c84:	47a0      	blx	r4
}
   28c86:	bd10      	pop	{r4, pc}

00028c88 <nvs_flash_ate_rd>:
{
   28c88:	b508      	push	{r3, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28c8a:	2308      	movs	r3, #8
   28c8c:	f7ff ffed 	bl	28c6a <nvs_flash_rd>
}
   28c90:	bd08      	pop	{r3, pc}

00028c92 <nvs_ate_cmp_const>:
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   28c92:	2300      	movs	r3, #0
   28c94:	2b07      	cmp	r3, #7
   28c96:	d804      	bhi.n	28ca2 <nvs_ate_cmp_const+0x10>
		if (data8[i] != value) {
   28c98:	5cc2      	ldrb	r2, [r0, r3]
   28c9a:	428a      	cmp	r2, r1
   28c9c:	d103      	bne.n	28ca6 <nvs_ate_cmp_const+0x14>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   28c9e:	3301      	adds	r3, #1
   28ca0:	e7f8      	b.n	28c94 <nvs_ate_cmp_const+0x2>
	return 0;
   28ca2:	2000      	movs	r0, #0
   28ca4:	4770      	bx	lr
			return 1;
   28ca6:	2001      	movs	r0, #1
}
   28ca8:	4770      	bx	lr

00028caa <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   28caa:	680b      	ldr	r3, [r1, #0]
   28cac:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   28cb0:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   28cb2:	89c2      	ldrh	r2, [r0, #14]
   28cb4:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   28cb8:	d000      	beq.n	28cbc <nvs_sector_advance+0x12>
}
   28cba:	4770      	bx	lr
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   28cbc:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
   28cc0:	600b      	str	r3, [r1, #0]
}
   28cc2:	e7fa      	b.n	28cba <nvs_sector_advance+0x10>

00028cc4 <nvs_flash_block_cmp>:
{
   28cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28cc8:	b089      	sub	sp, #36	; 0x24
   28cca:	4681      	mov	r9, r0
   28ccc:	460e      	mov	r6, r1
   28cce:	4617      	mov	r7, r2
   28cd0:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28cd2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28cd4:	681b      	ldr	r3, [r3, #0]
   28cd6:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   28cda:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   28cde:	e002      	b.n	28ce6 <nvs_flash_block_cmp+0x22>
		len -= bytes_to_cmp;
   28ce0:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_cmp;
   28ce2:	4426      	add	r6, r4
		data8 += bytes_to_cmp;
   28ce4:	4427      	add	r7, r4
	while (len) {
   28ce6:	b1a5      	cbz	r5, 28d12 <nvs_flash_block_cmp+0x4e>
		bytes_to_cmp = MIN(block_size, len);
   28ce8:	462c      	mov	r4, r5
   28cea:	4545      	cmp	r5, r8
   28cec:	bf28      	it	cs
   28cee:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   28cf0:	4623      	mov	r3, r4
   28cf2:	466a      	mov	r2, sp
   28cf4:	4631      	mov	r1, r6
   28cf6:	4648      	mov	r0, r9
   28cf8:	f7ff ffb7 	bl	28c6a <nvs_flash_rd>
		if (rc) {
   28cfc:	4603      	mov	r3, r0
   28cfe:	b948      	cbnz	r0, 28d14 <nvs_flash_block_cmp+0x50>
		rc = memcmp(data8, buf, bytes_to_cmp);
   28d00:	4622      	mov	r2, r4
   28d02:	4669      	mov	r1, sp
   28d04:	4638      	mov	r0, r7
   28d06:	f001 f81c 	bl	29d42 <memcmp>
		if (rc) {
   28d0a:	2800      	cmp	r0, #0
   28d0c:	d0e8      	beq.n	28ce0 <nvs_flash_block_cmp+0x1c>
			return 1;
   28d0e:	2301      	movs	r3, #1
   28d10:	e000      	b.n	28d14 <nvs_flash_block_cmp+0x50>
	return 0;
   28d12:	2300      	movs	r3, #0
}
   28d14:	4618      	mov	r0, r3
   28d16:	b009      	add	sp, #36	; 0x24
   28d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00028d1c <nvs_flash_cmp_const>:
{
   28d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28d20:	b088      	sub	sp, #32
   28d22:	4680      	mov	r8, r0
   28d24:	460e      	mov	r6, r1
   28d26:	4611      	mov	r1, r2
   28d28:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28d2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28d2c:	681f      	ldr	r7, [r3, #0]
   28d2e:	427f      	negs	r7, r7
	block_size =
   28d30:	f007 0720 	and.w	r7, r7, #32
	(void)memset(cmp, value, block_size);
   28d34:	463a      	mov	r2, r7
   28d36:	4668      	mov	r0, sp
   28d38:	f001 f857 	bl	29dea <memset>
	while (len) {
   28d3c:	e001      	b.n	28d42 <nvs_flash_cmp_const+0x26>
		len -= bytes_to_cmp;
   28d3e:	1b64      	subs	r4, r4, r5
		addr += bytes_to_cmp;
   28d40:	442e      	add	r6, r5
	while (len) {
   28d42:	b16c      	cbz	r4, 28d60 <nvs_flash_cmp_const+0x44>
		bytes_to_cmp = MIN(block_size, len);
   28d44:	4625      	mov	r5, r4
   28d46:	42bc      	cmp	r4, r7
   28d48:	bf28      	it	cs
   28d4a:	463d      	movcs	r5, r7
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   28d4c:	462b      	mov	r3, r5
   28d4e:	466a      	mov	r2, sp
   28d50:	4631      	mov	r1, r6
   28d52:	4640      	mov	r0, r8
   28d54:	f7ff ffb6 	bl	28cc4 <nvs_flash_block_cmp>
		if (rc) {
   28d58:	4603      	mov	r3, r0
   28d5a:	2800      	cmp	r0, #0
   28d5c:	d0ef      	beq.n	28d3e <nvs_flash_cmp_const+0x22>
   28d5e:	e000      	b.n	28d62 <nvs_flash_cmp_const+0x46>
	return 0;
   28d60:	2300      	movs	r3, #0
}
   28d62:	4618      	mov	r0, r3
   28d64:	b008      	add	sp, #32
   28d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028d6a <nvs_flash_erase_sector>:
{
   28d6a:	b570      	push	{r4, r5, r6, lr}
   28d6c:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   28d6e:	0c0d      	lsrs	r5, r1, #16
	offset = fs->offset;
   28d70:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28d72:	8982      	ldrh	r2, [r0, #12]
   28d74:	0c09      	lsrs	r1, r1, #16
   28d76:	fb01 3102 	mla	r1, r1, r2, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   28d7a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   28d7c:	6883      	ldr	r3, [r0, #8]
	rc = api->erase(dev, offset, size);
   28d7e:	689b      	ldr	r3, [r3, #8]
   28d80:	4798      	blx	r3
	if (rc) {
   28d82:	4606      	mov	r6, r0
   28d84:	b108      	cbz	r0, 28d8a <nvs_flash_erase_sector+0x20>
}
   28d86:	4630      	mov	r0, r6
   28d88:	bd70      	pop	{r4, r5, r6, pc}
   28d8a:	042d      	lsls	r5, r5, #16
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   28d8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   28d8e:	89a3      	ldrh	r3, [r4, #12]
   28d90:	7912      	ldrb	r2, [r2, #4]
   28d92:	4629      	mov	r1, r5
   28d94:	4620      	mov	r0, r4
   28d96:	f7ff ffc1 	bl	28d1c <nvs_flash_cmp_const>
   28d9a:	2800      	cmp	r0, #0
   28d9c:	d0f3      	beq.n	28d86 <nvs_flash_erase_sector+0x1c>
		rc = -ENXIO;
   28d9e:	f06f 0605 	mvn.w	r6, #5
   28da2:	e7f0      	b.n	28d86 <nvs_flash_erase_sector+0x1c>

00028da4 <nvs_ate_crc8_check>:
{
   28da4:	b510      	push	{r4, lr}
   28da6:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   28da8:	2207      	movs	r2, #7
   28daa:	4601      	mov	r1, r0
   28dac:	20ff      	movs	r0, #255	; 0xff
   28dae:	f7e7 ff79 	bl	10ca4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   28db2:	79e3      	ldrb	r3, [r4, #7]
   28db4:	4283      	cmp	r3, r0
   28db6:	d001      	beq.n	28dbc <nvs_ate_crc8_check+0x18>
	return 1;
   28db8:	2001      	movs	r0, #1
}
   28dba:	bd10      	pop	{r4, pc}
		return 0;
   28dbc:	2000      	movs	r0, #0
   28dbe:	e7fc      	b.n	28dba <nvs_ate_crc8_check+0x16>

00028dc0 <nvs_ate_valid>:
{
   28dc0:	b570      	push	{r4, r5, r6, lr}
   28dc2:	4604      	mov	r4, r0
   28dc4:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28dc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28dc8:	681b      	ldr	r3, [r3, #0]
   28dca:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   28dcc:	2a01      	cmp	r2, #1
   28dce:	d90d      	bls.n	28dec <nvs_ate_valid+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   28dd0:	1dd6      	adds	r6, r2, #7
   28dd2:	4253      	negs	r3, r2
   28dd4:	401e      	ands	r6, r3
	if ((nvs_ate_crc8_check(entry)) ||
   28dd6:	4628      	mov	r0, r5
   28dd8:	f7ff ffe4 	bl	28da4 <nvs_ate_crc8_check>
   28ddc:	b940      	cbnz	r0, 28df0 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   28dde:	886a      	ldrh	r2, [r5, #2]
   28de0:	89a3      	ldrh	r3, [r4, #12]
   28de2:	1b9b      	subs	r3, r3, r6
	if ((nvs_ate_crc8_check(entry)) ||
   28de4:	429a      	cmp	r2, r3
   28de6:	d205      	bcs.n	28df4 <nvs_ate_valid+0x34>
	return 1;
   28de8:	2001      	movs	r0, #1
}
   28dea:	bd70      	pop	{r4, r5, r6, pc}
		return len;
   28dec:	2608      	movs	r6, #8
   28dee:	e7f2      	b.n	28dd6 <nvs_ate_valid+0x16>
		return 0;
   28df0:	2000      	movs	r0, #0
   28df2:	e7fa      	b.n	28dea <nvs_ate_valid+0x2a>
   28df4:	2000      	movs	r0, #0
   28df6:	e7f8      	b.n	28dea <nvs_ate_valid+0x2a>

00028df8 <nvs_recover_last_ate>:
{
   28df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28dfc:	b082      	sub	sp, #8
   28dfe:	4606      	mov	r6, r0
   28e00:	4688      	mov	r8, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28e02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28e04:	681f      	ldr	r7, [r3, #0]
   28e06:	b2fb      	uxtb	r3, r7
	if (write_block_size <= 1U) {
   28e08:	2b01      	cmp	r3, #1
   28e0a:	d90b      	bls.n	28e24 <nvs_recover_last_ate+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   28e0c:	461f      	mov	r7, r3
   28e0e:	3307      	adds	r3, #7
   28e10:	427f      	negs	r7, r7
   28e12:	401f      	ands	r7, r3
	*addr -= ate_size;
   28e14:	f8d8 4000 	ldr.w	r4, [r8]
   28e18:	1be4      	subs	r4, r4, r7
   28e1a:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
   28e1e:	0c25      	lsrs	r5, r4, #16
   28e20:	042d      	lsls	r5, r5, #16
	while (ate_end_addr > data_end_addr) {
   28e22:	e002      	b.n	28e2a <nvs_recover_last_ate+0x32>
		return len;
   28e24:	2708      	movs	r7, #8
   28e26:	e7f5      	b.n	28e14 <nvs_recover_last_ate+0x1c>
		ate_end_addr -= ate_size;
   28e28:	1be4      	subs	r4, r4, r7
	while (ate_end_addr > data_end_addr) {
   28e2a:	42ac      	cmp	r4, r5
   28e2c:	d917      	bls.n	28e5e <nvs_recover_last_ate+0x66>
		rc = nvs_flash_ate_rd(fs, ate_end_addr, &end_ate);
   28e2e:	466a      	mov	r2, sp
   28e30:	4621      	mov	r1, r4
   28e32:	4630      	mov	r0, r6
   28e34:	f7ff ff28 	bl	28c88 <nvs_flash_ate_rd>
		if (rc) {
   28e38:	4603      	mov	r3, r0
   28e3a:	b988      	cbnz	r0, 28e60 <nvs_recover_last_ate+0x68>
		if (nvs_ate_valid(fs, &end_ate)) {
   28e3c:	4669      	mov	r1, sp
   28e3e:	4630      	mov	r0, r6
   28e40:	f7ff ffbe 	bl	28dc0 <nvs_ate_valid>
   28e44:	2800      	cmp	r0, #0
   28e46:	d0ef      	beq.n	28e28 <nvs_recover_last_ate+0x30>
			data_end_addr &= ADDR_SECT_MASK;
   28e48:	0c2d      	lsrs	r5, r5, #16
   28e4a:	042d      	lsls	r5, r5, #16
			data_end_addr += end_ate.offset + end_ate.len;
   28e4c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   28e50:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   28e54:	4413      	add	r3, r2
   28e56:	441d      	add	r5, r3
			*addr = ate_end_addr;
   28e58:	f8c8 4000 	str.w	r4, [r8]
   28e5c:	e7e4      	b.n	28e28 <nvs_recover_last_ate+0x30>
	return 0;
   28e5e:	2300      	movs	r3, #0
}
   28e60:	4618      	mov	r0, r3
   28e62:	b002      	add	sp, #8
   28e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028e68 <nvs_close_ate_valid>:
{
   28e68:	b538      	push	{r3, r4, r5, lr}
   28e6a:	4605      	mov	r5, r0
   28e6c:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   28e6e:	f7ff ffa7 	bl	28dc0 <nvs_ate_valid>
   28e72:	b1e0      	cbz	r0, 28eae <nvs_close_ate_valid+0x46>
   28e74:	88a3      	ldrh	r3, [r4, #4]
   28e76:	b9cb      	cbnz	r3, 28eac <nvs_close_ate_valid+0x44>
	    (entry->id != 0xFFFF)) {
   28e78:	8822      	ldrh	r2, [r4, #0]
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   28e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28e7e:	429a      	cmp	r2, r3
   28e80:	d116      	bne.n	28eb0 <nvs_close_ate_valid+0x48>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28e82:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   28e84:	681b      	ldr	r3, [r3, #0]
   28e86:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   28e88:	2a01      	cmp	r2, #1
   28e8a:	d90d      	bls.n	28ea8 <nvs_close_ate_valid+0x40>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   28e8c:	4613      	mov	r3, r2
   28e8e:	3207      	adds	r2, #7
   28e90:	425b      	negs	r3, r3
   28e92:	401a      	ands	r2, r3
	if ((fs->sector_size - entry->offset) % ate_size) {
   28e94:	89ab      	ldrh	r3, [r5, #12]
   28e96:	8861      	ldrh	r1, [r4, #2]
   28e98:	1a5b      	subs	r3, r3, r1
   28e9a:	fbb3 f1f2 	udiv	r1, r3, r2
   28e9e:	fb02 3311 	mls	r3, r2, r1, r3
   28ea2:	b93b      	cbnz	r3, 28eb4 <nvs_close_ate_valid+0x4c>
	return 1;
   28ea4:	2001      	movs	r0, #1
   28ea6:	e002      	b.n	28eae <nvs_close_ate_valid+0x46>
		return len;
   28ea8:	2208      	movs	r2, #8
   28eaa:	e7f3      	b.n	28e94 <nvs_close_ate_valid+0x2c>
		return 0;
   28eac:	2000      	movs	r0, #0
}
   28eae:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   28eb0:	2000      	movs	r0, #0
   28eb2:	e7fc      	b.n	28eae <nvs_close_ate_valid+0x46>
		return 0;
   28eb4:	2000      	movs	r0, #0
   28eb6:	e7fa      	b.n	28eae <nvs_close_ate_valid+0x46>

00028eb8 <nvs_prev_ate>:
{
   28eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   28eba:	b083      	sub	sp, #12
   28ebc:	4604      	mov	r4, r0
   28ebe:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28ec0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28ec2:	681b      	ldr	r3, [r3, #0]
   28ec4:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   28ec6:	2901      	cmp	r1, #1
   28ec8:	d92a      	bls.n	28f20 <nvs_prev_ate+0x68>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   28eca:	1dce      	adds	r6, r1, #7
   28ecc:	424b      	negs	r3, r1
   28ece:	401e      	ands	r6, r3
	rc = nvs_flash_ate_rd(fs, *addr, ate);
   28ed0:	6829      	ldr	r1, [r5, #0]
   28ed2:	4620      	mov	r0, r4
   28ed4:	f7ff fed8 	bl	28c88 <nvs_flash_ate_rd>
	if (rc) {
   28ed8:	4607      	mov	r7, r0
   28eda:	b9f0      	cbnz	r0, 28f1a <nvs_prev_ate+0x62>
	*addr += ate_size;
   28edc:	682b      	ldr	r3, [r5, #0]
   28ede:	4433      	add	r3, r6
   28ee0:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   28ee2:	b299      	uxth	r1, r3
   28ee4:	89a2      	ldrh	r2, [r4, #12]
   28ee6:	1b92      	subs	r2, r2, r6
   28ee8:	4291      	cmp	r1, r2
   28eea:	d116      	bne.n	28f1a <nvs_prev_ate+0x62>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   28eec:	0c1a      	lsrs	r2, r3, #16
   28eee:	d119      	bne.n	28f24 <nvs_prev_ate+0x6c>
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   28ef0:	89e2      	ldrh	r2, [r4, #14]
   28ef2:	3a01      	subs	r2, #1
   28ef4:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   28ef8:	602b      	str	r3, [r5, #0]
	rc = nvs_flash_ate_rd(fs, *addr, &close_ate);
   28efa:	466a      	mov	r2, sp
   28efc:	6829      	ldr	r1, [r5, #0]
   28efe:	4620      	mov	r0, r4
   28f00:	f7ff fec2 	bl	28c88 <nvs_flash_ate_rd>
	if (rc) {
   28f04:	4607      	mov	r7, r0
   28f06:	b940      	cbnz	r0, 28f1a <nvs_prev_ate+0x62>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   28f08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28f0a:	7919      	ldrb	r1, [r3, #4]
   28f0c:	4668      	mov	r0, sp
   28f0e:	f7ff fec0 	bl	28c92 <nvs_ate_cmp_const>
	if (!rc) {
   28f12:	b958      	cbnz	r0, 28f2c <nvs_prev_ate+0x74>
		*addr = fs->ate_wra;
   28f14:	6862      	ldr	r2, [r4, #4]
   28f16:	602a      	str	r2, [r5, #0]
		return 0;
   28f18:	4607      	mov	r7, r0
}
   28f1a:	4638      	mov	r0, r7
   28f1c:	b003      	add	sp, #12
   28f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
   28f20:	2608      	movs	r6, #8
   28f22:	e7d5      	b.n	28ed0 <nvs_prev_ate+0x18>
		*addr -= (1 << ADDR_SECT_SHIFT);
   28f24:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   28f28:	602b      	str	r3, [r5, #0]
   28f2a:	e7e6      	b.n	28efa <nvs_prev_ate+0x42>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   28f2c:	4669      	mov	r1, sp
   28f2e:	4620      	mov	r0, r4
   28f30:	f7ff ff9a 	bl	28e68 <nvs_close_ate_valid>
   28f34:	b138      	cbz	r0, 28f46 <nvs_prev_ate+0x8e>
		(*addr) &= ADDR_SECT_MASK;
   28f36:	886b      	ldrh	r3, [r5, #2]
   28f38:	041b      	lsls	r3, r3, #16
   28f3a:	602b      	str	r3, [r5, #0]
		(*addr) += close_ate.offset;
   28f3c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   28f40:	4413      	add	r3, r2
   28f42:	602b      	str	r3, [r5, #0]
		return 0;
   28f44:	e7e9      	b.n	28f1a <nvs_prev_ate+0x62>
	return nvs_recover_last_ate(fs, addr);
   28f46:	4629      	mov	r1, r5
   28f48:	4620      	mov	r0, r4
   28f4a:	f7ff ff55 	bl	28df8 <nvs_recover_last_ate>
   28f4e:	4607      	mov	r7, r0
   28f50:	e7e3      	b.n	28f1a <nvs_prev_ate+0x62>

00028f52 <nvs_ate_crc8_update>:
{
   28f52:	b510      	push	{r4, lr}
   28f54:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   28f56:	2207      	movs	r2, #7
   28f58:	4601      	mov	r1, r0
   28f5a:	20ff      	movs	r0, #255	; 0xff
   28f5c:	f7e7 fea2 	bl	10ca4 <crc8_ccitt>
	entry->crc8 = crc8;
   28f60:	71e0      	strb	r0, [r4, #7]
}
   28f62:	bd10      	pop	{r4, pc}

00028f64 <nvs_flash_al_wrt>:
	if (!len) {
   28f64:	2b00      	cmp	r3, #0
   28f66:	d040      	beq.n	28fea <nvs_flash_al_wrt+0x86>
{
   28f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28f6c:	b089      	sub	sp, #36	; 0x24
   28f6e:	4605      	mov	r5, r0
   28f70:	4617      	mov	r7, r2
   28f72:	4698      	mov	r8, r3
	offset = fs->offset;
   28f74:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28f76:	8982      	ldrh	r2, [r0, #12]
   28f78:	0c08      	lsrs	r0, r1, #16
   28f7a:	fb00 3302 	mla	r3, r0, r2, r3
	offset += addr & ADDR_OFFS_MASK;
   28f7e:	fa13 f481 	uxtah	r4, r3, r1
   28f82:	46a1      	mov	r9, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   28f84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   28f86:	681b      	ldr	r3, [r3, #0]
   28f88:	425b      	negs	r3, r3
	if (blen > 0) {
   28f8a:	ea13 0608 	ands.w	r6, r3, r8
   28f8e:	d00e      	beq.n	28fae <nvs_flash_al_wrt+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   28f90:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	const struct flash_driver_api *api =
   28f92:	6883      	ldr	r3, [r0, #8]
	rc = api->write(dev, offset, data, len);
   28f94:	f8d3 9004 	ldr.w	r9, [r3, #4]
   28f98:	4633      	mov	r3, r6
   28f9a:	463a      	mov	r2, r7
   28f9c:	4621      	mov	r1, r4
   28f9e:	47c8      	blx	r9
		if (rc) {
   28fa0:	b948      	cbnz	r0, 28fb6 <nvs_flash_al_wrt+0x52>
		len -= blen;
   28fa2:	eba8 0806 	sub.w	r8, r8, r6
		offset += blen;
   28fa6:	eb04 0906 	add.w	r9, r4, r6
		data8 += blen;
   28faa:	4437      	add	r7, r6
   28fac:	e000      	b.n	28fb0 <nvs_flash_al_wrt+0x4c>
	int rc = 0;
   28fae:	2000      	movs	r0, #0
	if (len) {
   28fb0:	f1b8 0f00 	cmp.w	r8, #0
   28fb4:	d102      	bne.n	28fbc <nvs_flash_al_wrt+0x58>
}
   28fb6:	b009      	add	sp, #36	; 0x24
   28fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(buf, data8, len);
   28fbc:	4642      	mov	r2, r8
   28fbe:	4639      	mov	r1, r7
   28fc0:	4668      	mov	r0, sp
   28fc2:	f000 fee3 	bl	29d8c <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   28fc6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			fs->flash_parameters->write_block_size - len);
   28fc8:	681a      	ldr	r2, [r3, #0]
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   28fca:	eba2 0208 	sub.w	r2, r2, r8
   28fce:	7919      	ldrb	r1, [r3, #4]
   28fd0:	eb0d 0008 	add.w	r0, sp, r8
   28fd4:	f000 ff09 	bl	29dea <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   28fd8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   28fda:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   28fdc:	681b      	ldr	r3, [r3, #0]
	const struct flash_driver_api *api =
   28fde:	6882      	ldr	r2, [r0, #8]
	rc = api->write(dev, offset, data, len);
   28fe0:	6854      	ldr	r4, [r2, #4]
   28fe2:	466a      	mov	r2, sp
   28fe4:	4649      	mov	r1, r9
   28fe6:	47a0      	blx	r4
	return rc;
   28fe8:	e7e5      	b.n	28fb6 <nvs_flash_al_wrt+0x52>
		return 0;
   28fea:	2000      	movs	r0, #0
}
   28fec:	4770      	bx	lr

00028fee <nvs_flash_data_wrt>:
{
   28fee:	b538      	push	{r3, r4, r5, lr}
   28ff0:	4605      	mov	r5, r0
   28ff2:	4614      	mov	r4, r2
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   28ff4:	4613      	mov	r3, r2
   28ff6:	460a      	mov	r2, r1
   28ff8:	6881      	ldr	r1, [r0, #8]
   28ffa:	f7ff ffb3 	bl	28f64 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28ffe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   29000:	681b      	ldr	r3, [r3, #0]
   29002:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   29004:	2a01      	cmp	r2, #1
   29006:	d903      	bls.n	29010 <nvs_flash_data_wrt+0x22>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   29008:	4414      	add	r4, r2
   2900a:	3c01      	subs	r4, #1
   2900c:	4253      	negs	r3, r2
   2900e:	401c      	ands	r4, r3
	fs->data_wra += nvs_al_size(fs, len);
   29010:	68ab      	ldr	r3, [r5, #8]
   29012:	4423      	add	r3, r4
   29014:	60ab      	str	r3, [r5, #8]
}
   29016:	bd38      	pop	{r3, r4, r5, pc}

00029018 <nvs_flash_block_move>:
{
   29018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2901c:	b088      	sub	sp, #32
   2901e:	4607      	mov	r7, r0
   29020:	460e      	mov	r6, r1
   29022:	4615      	mov	r5, r2
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   29024:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   29026:	681b      	ldr	r3, [r3, #0]
   29028:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   2902c:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   29030:	e001      	b.n	29036 <nvs_flash_block_move+0x1e>
		len -= bytes_to_copy;
   29032:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_copy;
   29034:	4426      	add	r6, r4
	while (len) {
   29036:	b1a5      	cbz	r5, 29062 <nvs_flash_block_move+0x4a>
		bytes_to_copy = MIN(block_size, len);
   29038:	462c      	mov	r4, r5
   2903a:	4545      	cmp	r5, r8
   2903c:	bf28      	it	cs
   2903e:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   29040:	4623      	mov	r3, r4
   29042:	466a      	mov	r2, sp
   29044:	4631      	mov	r1, r6
   29046:	4638      	mov	r0, r7
   29048:	f7ff fe0f 	bl	28c6a <nvs_flash_rd>
		if (rc) {
   2904c:	4603      	mov	r3, r0
   2904e:	b948      	cbnz	r0, 29064 <nvs_flash_block_move+0x4c>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   29050:	4622      	mov	r2, r4
   29052:	4669      	mov	r1, sp
   29054:	4638      	mov	r0, r7
   29056:	f7ff ffca 	bl	28fee <nvs_flash_data_wrt>
		if (rc) {
   2905a:	4603      	mov	r3, r0
   2905c:	2800      	cmp	r0, #0
   2905e:	d0e8      	beq.n	29032 <nvs_flash_block_move+0x1a>
   29060:	e000      	b.n	29064 <nvs_flash_block_move+0x4c>
	return 0;
   29062:	2300      	movs	r3, #0
}
   29064:	4618      	mov	r0, r3
   29066:	b008      	add	sp, #32
   29068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002906c <nvs_flash_ate_wrt>:
{
   2906c:	b510      	push	{r4, lr}
   2906e:	4604      	mov	r4, r0
   29070:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   29072:	2308      	movs	r3, #8
   29074:	6841      	ldr	r1, [r0, #4]
   29076:	f7ff ff75 	bl	28f64 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   2907a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2907c:	681b      	ldr	r3, [r3, #0]
   2907e:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   29080:	2a01      	cmp	r2, #1
   29082:	d907      	bls.n	29094 <nvs_flash_ate_wrt+0x28>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   29084:	4613      	mov	r3, r2
   29086:	3207      	adds	r2, #7
   29088:	425b      	negs	r3, r3
   2908a:	401a      	ands	r2, r3
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2908c:	6863      	ldr	r3, [r4, #4]
   2908e:	1a9b      	subs	r3, r3, r2
   29090:	6063      	str	r3, [r4, #4]
}
   29092:	bd10      	pop	{r4, pc}
		return len;
   29094:	2208      	movs	r2, #8
   29096:	e7f9      	b.n	2908c <nvs_flash_ate_wrt+0x20>

00029098 <nvs_add_gc_done_ate>:
{
   29098:	b510      	push	{r4, lr}
   2909a:	b082      	sub	sp, #8
   2909c:	4604      	mov	r4, r0
	gc_done_ate.id = 0xffff;
   2909e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   290a2:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   290a6:	2300      	movs	r3, #0
   290a8:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   290ac:	8903      	ldrh	r3, [r0, #8]
   290ae:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   290b2:	4668      	mov	r0, sp
   290b4:	f7ff ff4d 	bl	28f52 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   290b8:	4669      	mov	r1, sp
   290ba:	4620      	mov	r0, r4
   290bc:	f7ff ffd6 	bl	2906c <nvs_flash_ate_wrt>
}
   290c0:	b002      	add	sp, #8
   290c2:	bd10      	pop	{r4, pc}

000290c4 <nvs_gc>:
{
   290c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   290c8:	b08a      	sub	sp, #40	; 0x28
   290ca:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   290cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   290ce:	681b      	ldr	r3, [r3, #0]
   290d0:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   290d2:	2a01      	cmp	r2, #1
   290d4:	d92d      	bls.n	29132 <nvs_gc+0x6e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   290d6:	1dd6      	adds	r6, r2, #7
   290d8:	4253      	negs	r3, r2
   290da:	401e      	ands	r6, r3
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   290dc:	88e3      	ldrh	r3, [r4, #6]
   290de:	041b      	lsls	r3, r3, #16
   290e0:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   290e2:	a903      	add	r1, sp, #12
   290e4:	4620      	mov	r0, r4
   290e6:	f7ff fde0 	bl	28caa <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   290ea:	89a1      	ldrh	r1, [r4, #12]
   290ec:	9b03      	ldr	r3, [sp, #12]
   290ee:	4419      	add	r1, r3
   290f0:	1b89      	subs	r1, r1, r6
   290f2:	9102      	str	r1, [sp, #8]
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
   290f4:	aa08      	add	r2, sp, #32
   290f6:	4620      	mov	r0, r4
   290f8:	f7ff fdc6 	bl	28c88 <nvs_flash_ate_rd>
	if (rc < 0) {
   290fc:	1e03      	subs	r3, r0, #0
   290fe:	db14      	blt.n	2912a <nvs_gc+0x66>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   29100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29102:	7919      	ldrb	r1, [r3, #4]
   29104:	a808      	add	r0, sp, #32
   29106:	f7ff fdc4 	bl	28c92 <nvs_ate_cmp_const>
	if (!rc) {
   2910a:	b9a0      	cbnz	r0, 29136 <nvs_gc+0x72>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2910c:	6863      	ldr	r3, [r4, #4]
   2910e:	68a2      	ldr	r2, [r4, #8]
   29110:	4416      	add	r6, r2
   29112:	42b3      	cmp	r3, r6
   29114:	d304      	bcc.n	29120 <nvs_gc+0x5c>
		rc = nvs_add_gc_done_ate(fs);
   29116:	4620      	mov	r0, r4
   29118:	f7ff ffbe 	bl	29098 <nvs_add_gc_done_ate>
		if (rc) {
   2911c:	4603      	mov	r3, r0
   2911e:	b920      	cbnz	r0, 2912a <nvs_gc+0x66>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   29120:	9903      	ldr	r1, [sp, #12]
   29122:	4620      	mov	r0, r4
   29124:	f7ff fe21 	bl	28d6a <nvs_flash_erase_sector>
   29128:	4603      	mov	r3, r0
}
   2912a:	4618      	mov	r0, r3
   2912c:	b00a      	add	sp, #40	; 0x28
   2912e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return len;
   29132:	2608      	movs	r6, #8
   29134:	e7d2      	b.n	290dc <nvs_gc+0x18>
	stop_addr = gc_addr - ate_size;
   29136:	9b02      	ldr	r3, [sp, #8]
   29138:	eba3 0806 	sub.w	r8, r3, r6
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2913c:	a908      	add	r1, sp, #32
   2913e:	4620      	mov	r0, r4
   29140:	f7ff fe92 	bl	28e68 <nvs_close_ate_valid>
   29144:	b140      	cbz	r0, 29158 <nvs_gc+0x94>
		gc_addr &= ADDR_SECT_MASK;
   29146:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2914a:	041b      	lsls	r3, r3, #16
   2914c:	9302      	str	r3, [sp, #8]
		gc_addr += close_ate.offset;
   2914e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   29152:	4413      	add	r3, r2
   29154:	9302      	str	r3, [sp, #8]
   29156:	e023      	b.n	291a0 <nvs_gc+0xdc>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   29158:	a902      	add	r1, sp, #8
   2915a:	4620      	mov	r0, r4
   2915c:	f7ff fe4c 	bl	28df8 <nvs_recover_last_ate>
		if (rc) {
   29160:	4603      	mov	r3, r0
   29162:	b1e8      	cbz	r0, 291a0 <nvs_gc+0xdc>
   29164:	e7e1      	b.n	2912a <nvs_gc+0x66>
		} while (wlk_addr != fs->ate_wra);
   29166:	6862      	ldr	r2, [r4, #4]
   29168:	9b01      	ldr	r3, [sp, #4]
   2916a:	429a      	cmp	r2, r3
   2916c:	d014      	beq.n	29198 <nvs_gc+0xd4>
			wlk_prev_addr = wlk_addr;
   2916e:	9d01      	ldr	r5, [sp, #4]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   29170:	aa04      	add	r2, sp, #16
   29172:	a901      	add	r1, sp, #4
   29174:	4620      	mov	r0, r4
   29176:	f7ff fe9f 	bl	28eb8 <nvs_prev_ate>
			if (rc) {
   2917a:	4603      	mov	r3, r0
   2917c:	2800      	cmp	r0, #0
   2917e:	d1d4      	bne.n	2912a <nvs_gc+0x66>
			if ((wlk_ate.id == gc_ate.id) &&
   29180:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   29184:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   29188:	429a      	cmp	r2, r3
   2918a:	d1ec      	bne.n	29166 <nvs_gc+0xa2>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2918c:	a904      	add	r1, sp, #16
   2918e:	4620      	mov	r0, r4
   29190:	f7ff fe16 	bl	28dc0 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   29194:	2800      	cmp	r0, #0
   29196:	d0e6      	beq.n	29166 <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   29198:	42bd      	cmp	r5, r7
   2919a:	d013      	beq.n	291c4 <nvs_gc+0x100>
	} while (gc_prev_addr != stop_addr);
   2919c:	4547      	cmp	r7, r8
   2919e:	d0b5      	beq.n	2910c <nvs_gc+0x48>
		gc_prev_addr = gc_addr;
   291a0:	9f02      	ldr	r7, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   291a2:	aa06      	add	r2, sp, #24
   291a4:	a902      	add	r1, sp, #8
   291a6:	4620      	mov	r0, r4
   291a8:	f7ff fe86 	bl	28eb8 <nvs_prev_ate>
		if (rc) {
   291ac:	4603      	mov	r3, r0
   291ae:	2800      	cmp	r0, #0
   291b0:	d1bb      	bne.n	2912a <nvs_gc+0x66>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   291b2:	a906      	add	r1, sp, #24
   291b4:	4620      	mov	r0, r4
   291b6:	f7ff fe03 	bl	28dc0 <nvs_ate_valid>
   291ba:	2800      	cmp	r0, #0
   291bc:	d0ee      	beq.n	2919c <nvs_gc+0xd8>
		wlk_addr = fs->ate_wra;
   291be:	6863      	ldr	r3, [r4, #4]
   291c0:	9301      	str	r3, [sp, #4]
   291c2:	e7d4      	b.n	2916e <nvs_gc+0xaa>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   291c4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   291c8:	2b00      	cmp	r3, #0
   291ca:	d0e7      	beq.n	2919c <nvs_gc+0xd8>
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   291cc:	0c3b      	lsrs	r3, r7, #16
   291ce:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   291d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   291d4:	189d      	adds	r5, r3, r2
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   291d6:	8923      	ldrh	r3, [r4, #8]
   291d8:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   291dc:	a806      	add	r0, sp, #24
   291de:	f7ff feb8 	bl	28f52 <nvs_ate_crc8_update>
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   291e2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   291e6:	4629      	mov	r1, r5
   291e8:	4620      	mov	r0, r4
   291ea:	f7ff ff15 	bl	29018 <nvs_flash_block_move>
			if (rc) {
   291ee:	4603      	mov	r3, r0
   291f0:	2800      	cmp	r0, #0
   291f2:	d19a      	bne.n	2912a <nvs_gc+0x66>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   291f4:	a906      	add	r1, sp, #24
   291f6:	4620      	mov	r0, r4
   291f8:	f7ff ff38 	bl	2906c <nvs_flash_ate_wrt>
			if (rc) {
   291fc:	4603      	mov	r3, r0
   291fe:	2800      	cmp	r0, #0
   29200:	d0cc      	beq.n	2919c <nvs_gc+0xd8>
   29202:	e792      	b.n	2912a <nvs_gc+0x66>

00029204 <nvs_flash_wrt_entry>:
{
   29204:	b570      	push	{r4, r5, r6, lr}
   29206:	b082      	sub	sp, #8
   29208:	4604      	mov	r4, r0
   2920a:	4616      	mov	r6, r2
   2920c:	461d      	mov	r5, r3
	entry.id = id;
   2920e:	f8ad 1000 	strh.w	r1, [sp]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   29212:	8903      	ldrh	r3, [r0, #8]
   29214:	f8ad 3002 	strh.w	r3, [sp, #2]
	entry.len = (uint16_t)len;
   29218:	f8ad 5004 	strh.w	r5, [sp, #4]
	entry.part = 0xff;
   2921c:	23ff      	movs	r3, #255	; 0xff
   2921e:	f88d 3006 	strb.w	r3, [sp, #6]
	nvs_ate_crc8_update(&entry);
   29222:	4668      	mov	r0, sp
   29224:	f7ff fe95 	bl	28f52 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   29228:	462a      	mov	r2, r5
   2922a:	4631      	mov	r1, r6
   2922c:	4620      	mov	r0, r4
   2922e:	f7ff fede 	bl	28fee <nvs_flash_data_wrt>
	if (rc) {
   29232:	b108      	cbz	r0, 29238 <nvs_flash_wrt_entry+0x34>
}
   29234:	b002      	add	sp, #8
   29236:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_flash_ate_wrt(fs, &entry);
   29238:	4669      	mov	r1, sp
   2923a:	4620      	mov	r0, r4
   2923c:	f7ff ff16 	bl	2906c <nvs_flash_ate_wrt>
	if (rc) {
   29240:	e7f8      	b.n	29234 <nvs_flash_wrt_entry+0x30>

00029242 <nvs_sector_close>:
{
   29242:	b530      	push	{r4, r5, lr}
   29244:	b083      	sub	sp, #12
   29246:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   29248:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2924a:	681b      	ldr	r3, [r3, #0]
   2924c:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   2924e:	2a01      	cmp	r2, #1
   29250:	d926      	bls.n	292a0 <nvs_sector_close+0x5e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   29252:	4613      	mov	r3, r2
   29254:	3207      	adds	r2, #7
   29256:	425b      	negs	r3, r3
   29258:	401a      	ands	r2, r3
	close_ate.id = 0xFFFF;
   2925a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2925e:	f8ad 3000 	strh.w	r3, [sp]
	close_ate.len = 0U;
   29262:	2500      	movs	r5, #0
   29264:	f8ad 5004 	strh.w	r5, [sp, #4]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   29268:	6863      	ldr	r3, [r4, #4]
   2926a:	1899      	adds	r1, r3, r2
   2926c:	f8ad 1002 	strh.w	r1, [sp, #2]
	fs->ate_wra &= ADDR_SECT_MASK;
   29270:	0c1b      	lsrs	r3, r3, #16
   29272:	041b      	lsls	r3, r3, #16
   29274:	6063      	str	r3, [r4, #4]
	fs->ate_wra += (fs->sector_size - ate_size);
   29276:	89a1      	ldrh	r1, [r4, #12]
   29278:	1a8a      	subs	r2, r1, r2
   2927a:	4413      	add	r3, r2
   2927c:	6063      	str	r3, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   2927e:	4668      	mov	r0, sp
   29280:	f7ff fe67 	bl	28f52 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   29284:	4669      	mov	r1, sp
   29286:	4620      	mov	r0, r4
   29288:	f7ff fef0 	bl	2906c <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   2928c:	1d21      	adds	r1, r4, #4
   2928e:	4620      	mov	r0, r4
   29290:	f7ff fd0b 	bl	28caa <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   29294:	88e3      	ldrh	r3, [r4, #6]
   29296:	041b      	lsls	r3, r3, #16
   29298:	60a3      	str	r3, [r4, #8]
}
   2929a:	4628      	mov	r0, r5
   2929c:	b003      	add	sp, #12
   2929e:	bd30      	pop	{r4, r5, pc}
		return len;
   292a0:	2208      	movs	r2, #8
   292a2:	e7da      	b.n	2925a <nvs_sector_close+0x18>

000292a4 <nvs_delete>:
{
   292a4:	b508      	push	{r3, lr}
	return nvs_write(fs, id, NULL, 0);
   292a6:	2300      	movs	r3, #0
   292a8:	461a      	mov	r2, r3
   292aa:	f7e8 fefb 	bl	120a4 <nvs_write>
}
   292ae:	bd08      	pop	{r3, pc}

000292b0 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   292b0:	b510      	push	{r4, lr}
   292b2:	b082      	sub	sp, #8
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   292b4:	2400      	movs	r4, #0
   292b6:	9400      	str	r4, [sp, #0]
   292b8:	f7e8 ffac 	bl	12214 <nvs_read_hist>
	return rc;
}
   292bc:	b002      	add	sp, #8
   292be:	bd10      	pop	{r4, pc}

000292c0 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   292c0:	4770      	bx	lr

000292c2 <should_bail>:
	if (info->start_offset < data->area_off) {
   292c2:	6800      	ldr	r0, [r0, #0]
   292c4:	684b      	ldr	r3, [r1, #4]
   292c6:	4298      	cmp	r0, r3
   292c8:	d30a      	bcc.n	292e0 <should_bail+0x1e>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   292ca:	f8d1 c008 	ldr.w	ip, [r1, #8]
   292ce:	4463      	add	r3, ip
   292d0:	4298      	cmp	r0, r3
   292d2:	d208      	bcs.n	292e6 <should_bail+0x24>
	} else if (data->ret_idx >= data->ret_len) {
   292d4:	6908      	ldr	r0, [r1, #16]
   292d6:	694b      	ldr	r3, [r1, #20]
   292d8:	4298      	cmp	r0, r3
   292da:	d208      	bcs.n	292ee <should_bail+0x2c>
	return false;
   292dc:	2000      	movs	r0, #0
}
   292de:	4770      	bx	lr
		*bail_value = true;
   292e0:	2001      	movs	r0, #1
   292e2:	7010      	strb	r0, [r2, #0]
		return true;
   292e4:	4770      	bx	lr
		*bail_value = false;
   292e6:	2300      	movs	r3, #0
   292e8:	7013      	strb	r3, [r2, #0]
		return true;
   292ea:	2001      	movs	r0, #1
   292ec:	4770      	bx	lr
		data->status = -ENOMEM;
   292ee:	f06f 030b 	mvn.w	r3, #11
   292f2:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   292f4:	2300      	movs	r3, #0
   292f6:	7013      	strb	r3, [r2, #0]
		return true;
   292f8:	2001      	movs	r0, #1
   292fa:	4770      	bx	lr

000292fc <get_sectors_cb>:
{
   292fc:	b570      	push	{r4, r5, r6, lr}
   292fe:	b082      	sub	sp, #8
   29300:	4605      	mov	r5, r0
   29302:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
   29304:	68ce      	ldr	r6, [r1, #12]
	if (should_bail(info, data, &bail)) {
   29306:	f10d 0207 	add.w	r2, sp, #7
   2930a:	f7ff ffda 	bl	292c2 <should_bail>
   2930e:	b980      	cbnz	r0, 29332 <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   29310:	682b      	ldr	r3, [r5, #0]
   29312:	6861      	ldr	r1, [r4, #4]
   29314:	6922      	ldr	r2, [r4, #16]
   29316:	1a5b      	subs	r3, r3, r1
   29318:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2931c:	6923      	ldr	r3, [r4, #16]
   2931e:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   29322:	686b      	ldr	r3, [r5, #4]
   29324:	6073      	str	r3, [r6, #4]
	data->ret_idx++;
   29326:	6923      	ldr	r3, [r4, #16]
   29328:	3301      	adds	r3, #1
   2932a:	6123      	str	r3, [r4, #16]
	return true;
   2932c:	2001      	movs	r0, #1
}
   2932e:	b002      	add	sp, #8
   29330:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
   29332:	f89d 0007 	ldrb.w	r0, [sp, #7]
   29336:	e7fa      	b.n	2932e <get_sectors_cb+0x32>

00029338 <flash_area_layout>:
{
   29338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2933c:	b082      	sub	sp, #8
   2933e:	4605      	mov	r5, r0
   29340:	460e      	mov	r6, r1
   29342:	4690      	mov	r8, r2
   29344:	461f      	mov	r7, r3
   29346:	9c08      	ldr	r4, [sp, #32]
	int rc = flash_area_open(idx, &fa);
   29348:	a901      	add	r1, sp, #4
   2934a:	b2c0      	uxtb	r0, r0
   2934c:	f7e8 ffea 	bl	12324 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   29350:	2800      	cmp	r0, #0
   29352:	db1f      	blt.n	29394 <flash_area_layout+0x5c>
   29354:	9b01      	ldr	r3, [sp, #4]
   29356:	b303      	cbz	r3, 2939a <flash_area_layout+0x62>
	cb_data->area_idx = idx;
   29358:	6025      	str	r5, [r4, #0]
	cb_data->area_off = fa->fa_off;
   2935a:	9801      	ldr	r0, [sp, #4]
   2935c:	6843      	ldr	r3, [r0, #4]
   2935e:	6063      	str	r3, [r4, #4]
	cb_data->area_len = fa->fa_size;
   29360:	6883      	ldr	r3, [r0, #8]
   29362:	60a3      	str	r3, [r4, #8]
	cb_data->ret = ret;
   29364:	f8c4 800c 	str.w	r8, [r4, #12]
	cb_data->ret_idx = 0U;
   29368:	2200      	movs	r2, #0
   2936a:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
   2936c:	6833      	ldr	r3, [r6, #0]
   2936e:	6163      	str	r3, [r4, #20]
	cb_data->status = 0;
   29370:	61a2      	str	r2, [r4, #24]
	flash_dev = fa->fa_dev;
   29372:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   29374:	f7ff ffa4 	bl	292c0 <flash_area_close>
	if (flash_dev == NULL) {
   29378:	b195      	cbz	r5, 293a0 <flash_area_layout+0x68>
	flash_page_foreach(flash_dev, cb, cb_data);
   2937a:	4622      	mov	r2, r4
   2937c:	4639      	mov	r1, r7
   2937e:	4628      	mov	r0, r5
   29380:	f004 fbb1 	bl	2dae6 <flash_page_foreach>
	if (cb_data->status == 0) {
   29384:	69a3      	ldr	r3, [r4, #24]
   29386:	b90b      	cbnz	r3, 2938c <flash_area_layout+0x54>
		*cnt = cb_data->ret_idx;
   29388:	6923      	ldr	r3, [r4, #16]
   2938a:	6033      	str	r3, [r6, #0]
	return cb_data->status;
   2938c:	69a0      	ldr	r0, [r4, #24]
}
   2938e:	b002      	add	sp, #8
   29390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   29394:	f06f 0015 	mvn.w	r0, #21
   29398:	e7f9      	b.n	2938e <flash_area_layout+0x56>
   2939a:	f06f 0015 	mvn.w	r0, #21
   2939e:	e7f6      	b.n	2938e <flash_area_layout+0x56>
		return -ENODEV;
   293a0:	f06f 0012 	mvn.w	r0, #18
   293a4:	e7f3      	b.n	2938e <flash_area_layout+0x56>

000293a6 <settings_load>:
{
   293a6:	b508      	push	{r3, lr}
	return settings_load_subtree(NULL);
   293a8:	2000      	movs	r0, #0
   293aa:	f7e9 f81f 	bl	123ec <settings_load_subtree>
}
   293ae:	bd08      	pop	{r3, pc}

000293b0 <settings_delete>:
{
   293b0:	b508      	push	{r3, lr}
	return settings_save_one(name, NULL, 0);
   293b2:	2200      	movs	r2, #0
   293b4:	4611      	mov	r1, r2
   293b6:	f7e8 ffdd 	bl	12374 <settings_save_one>
}
   293ba:	bd08      	pop	{r3, pc}

000293bc <settings_name_steq>:
{
   293bc:	b410      	push	{r4}
	if (next) {
   293be:	4614      	mov	r4, r2
   293c0:	b10a      	cbz	r2, 293c6 <settings_name_steq+0xa>
		*next = NULL;
   293c2:	2300      	movs	r3, #0
   293c4:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   293c6:	b1d0      	cbz	r0, 293fe <settings_name_steq+0x42>
   293c8:	b919      	cbnz	r1, 293d2 <settings_name_steq+0x16>
		return 0;
   293ca:	2000      	movs	r0, #0
   293cc:	e01a      	b.n	29404 <settings_name_steq+0x48>
		key++;
   293ce:	3101      	adds	r1, #1
		name++;
   293d0:	3001      	adds	r0, #1
	while ((*key != '\0') && (*key == *name) &&
   293d2:	780a      	ldrb	r2, [r1, #0]
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   293d4:	b12a      	cbz	r2, 293e2 <settings_name_steq+0x26>
	while ((*key != '\0') && (*key == *name) &&
   293d6:	7803      	ldrb	r3, [r0, #0]
   293d8:	429a      	cmp	r2, r3
   293da:	d102      	bne.n	293e2 <settings_name_steq+0x26>
   293dc:	b10b      	cbz	r3, 293e2 <settings_name_steq+0x26>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   293de:	2b3d      	cmp	r3, #61	; 0x3d
   293e0:	d1f5      	bne.n	293ce <settings_name_steq+0x12>
	if (*key != '\0') {
   293e2:	b972      	cbnz	r2, 29402 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   293e4:	7803      	ldrb	r3, [r0, #0]
   293e6:	2b2f      	cmp	r3, #47	; 0x2f
   293e8:	d004      	beq.n	293f4 <settings_name_steq+0x38>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   293ea:	2b3d      	cmp	r3, #61	; 0x3d
   293ec:	d00c      	beq.n	29408 <settings_name_steq+0x4c>
   293ee:	b16b      	cbz	r3, 2940c <settings_name_steq+0x50>
	return 0;
   293f0:	2000      	movs	r0, #0
   293f2:	e007      	b.n	29404 <settings_name_steq+0x48>
		if (next) {
   293f4:	b10c      	cbz	r4, 293fa <settings_name_steq+0x3e>
			*next = name + 1;
   293f6:	3001      	adds	r0, #1
   293f8:	6020      	str	r0, [r4, #0]
		return 1;
   293fa:	2001      	movs	r0, #1
   293fc:	e002      	b.n	29404 <settings_name_steq+0x48>
		return 0;
   293fe:	2000      	movs	r0, #0
   29400:	e000      	b.n	29404 <settings_name_steq+0x48>
		return 0;
   29402:	2000      	movs	r0, #0
}
   29404:	bc10      	pop	{r4}
   29406:	4770      	bx	lr
		return 1;
   29408:	2001      	movs	r0, #1
   2940a:	e7fb      	b.n	29404 <settings_name_steq+0x48>
   2940c:	2001      	movs	r0, #1
   2940e:	e7f9      	b.n	29404 <settings_name_steq+0x48>

00029410 <settings_name_next>:
{
   29410:	b410      	push	{r4}
   29412:	4602      	mov	r2, r0
	if (next) {
   29414:	460c      	mov	r4, r1
   29416:	b109      	cbz	r1, 2941c <settings_name_next+0xc>
		*next = NULL;
   29418:	2300      	movs	r3, #0
   2941a:	600b      	str	r3, [r1, #0]
	if (!name) {
   2941c:	b192      	cbz	r2, 29444 <settings_name_next+0x34>
	int rc = 0;
   2941e:	2000      	movs	r0, #0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   29420:	7813      	ldrb	r3, [r2, #0]
   29422:	b133      	cbz	r3, 29432 <settings_name_next+0x22>
   29424:	2b3d      	cmp	r3, #61	; 0x3d
   29426:	d004      	beq.n	29432 <settings_name_next+0x22>
   29428:	2b2f      	cmp	r3, #47	; 0x2f
   2942a:	d002      	beq.n	29432 <settings_name_next+0x22>
		rc++;
   2942c:	3001      	adds	r0, #1
		name++;
   2942e:	3201      	adds	r2, #1
   29430:	e7f6      	b.n	29420 <settings_name_next+0x10>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   29432:	2b2f      	cmp	r3, #47	; 0x2f
   29434:	d001      	beq.n	2943a <settings_name_next+0x2a>
}
   29436:	bc10      	pop	{r4}
   29438:	4770      	bx	lr
		if (next) {
   2943a:	2c00      	cmp	r4, #0
   2943c:	d0fb      	beq.n	29436 <settings_name_next+0x26>
			*next = name + 1;
   2943e:	3201      	adds	r2, #1
   29440:	6022      	str	r2, [r4, #0]
		return rc;
   29442:	e7f8      	b.n	29436 <settings_name_next+0x26>
		return 0;
   29444:	2000      	movs	r0, #0
   29446:	e7f6      	b.n	29436 <settings_name_next+0x26>

00029448 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = (struct settings_nvs *)cs;

	return &cf->cf_nvs;
}
   29448:	3008      	adds	r0, #8
   2944a:	4770      	bx	lr

0002944c <settings_nvs_read_fn>:
{
   2944c:	b510      	push	{r4, lr}
   2944e:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   29450:	4613      	mov	r3, r2
   29452:	460a      	mov	r2, r1
   29454:	8881      	ldrh	r1, [r0, #4]
   29456:	6800      	ldr	r0, [r0, #0]
   29458:	f7ff ff2a 	bl	292b0 <nvs_read>
   2945c:	4603      	mov	r3, r0
	if (rc > (ssize_t)len) {
   2945e:	4620      	mov	r0, r4
   29460:	429c      	cmp	r4, r3
   29462:	db00      	blt.n	29466 <settings_nvs_read_fn+0x1a>
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   29464:	4618      	mov	r0, r3
}
   29466:	bd10      	pop	{r4, pc}

00029468 <settings_nvs_save>:
{
   29468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2946c:	b097      	sub	sp, #92	; 0x5c
   2946e:	9301      	str	r3, [sp, #4]
	if (!name) {
   29470:	2900      	cmp	r1, #0
   29472:	f000 8092 	beq.w	2959a <settings_nvs_save+0x132>
   29476:	4606      	mov	r6, r0
   29478:	4692      	mov	sl, r2
   2947a:	468b      	mov	fp, r1
	delete = ((value == NULL) || (val_len == 0));
   2947c:	b13a      	cbz	r2, 2948e <settings_nvs_save+0x26>
   2947e:	b94b      	cbnz	r3, 29494 <settings_nvs_save+0x2c>
   29480:	f04f 0901 	mov.w	r9, #1
	name_id = cf->last_name_id + 1;
   29484:	8f35      	ldrh	r5, [r6, #56]	; 0x38
   29486:	3501      	adds	r5, #1
   29488:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2948a:	9500      	str	r5, [sp, #0]
   2948c:	e009      	b.n	294a2 <settings_nvs_save+0x3a>
	delete = ((value == NULL) || (val_len == 0));
   2948e:	f04f 0901 	mov.w	r9, #1
   29492:	e7f7      	b.n	29484 <settings_nvs_save+0x1c>
   29494:	f04f 0900 	mov.w	r9, #0
   29498:	e7f4      	b.n	29484 <settings_nvs_save+0x1c>
			if (rc == -ENOENT) {
   2949a:	f110 0f02 	cmn.w	r0, #2
   2949e:	d037      	beq.n	29510 <settings_nvs_save+0xa8>
	delete = ((value == NULL) || (val_len == 0));
   294a0:	4625      	mov	r5, r4
		name_id--;
   294a2:	1e6c      	subs	r4, r5, #1
   294a4:	b2a4      	uxth	r4, r4
		if (name_id == NVS_NAMECNT_ID) {
   294a6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   294aa:	d041      	beq.n	29530 <settings_nvs_save+0xc8>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   294ac:	f106 0808 	add.w	r8, r6, #8
   294b0:	234a      	movs	r3, #74	; 0x4a
   294b2:	aa03      	add	r2, sp, #12
   294b4:	4621      	mov	r1, r4
   294b6:	4640      	mov	r0, r8
   294b8:	f7ff fefa 	bl	292b0 <nvs_read>
		if (rc < 0) {
   294bc:	2800      	cmp	r0, #0
   294be:	dbec      	blt.n	2949a <settings_nvs_save+0x32>
		rdname[rc] = '\0';
   294c0:	f100 0358 	add.w	r3, r0, #88	; 0x58
   294c4:	eb0d 0003 	add.w	r0, sp, r3
   294c8:	2300      	movs	r3, #0
   294ca:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   294ce:	a903      	add	r1, sp, #12
   294d0:	4658      	mov	r0, fp
   294d2:	f000 fc18 	bl	29d06 <strcmp>
   294d6:	4607      	mov	r7, r0
   294d8:	2800      	cmp	r0, #0
   294da:	d1e1      	bne.n	294a0 <settings_nvs_save+0x38>
		if ((delete) && (name_id == cf->last_name_id)) {
   294dc:	f1b9 0f00 	cmp.w	r9, #0
   294e0:	d029      	beq.n	29536 <settings_nvs_save+0xce>
   294e2:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   294e4:	42a3      	cmp	r3, r4
   294e6:	d015      	beq.n	29514 <settings_nvs_save+0xac>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   294e8:	4621      	mov	r1, r4
   294ea:	4640      	mov	r0, r8
   294ec:	f7ff feda 	bl	292a4 <nvs_delete>
			if (rc >= 0) {
   294f0:	2800      	cmp	r0, #0
   294f2:	db08      	blt.n	29506 <settings_nvs_save+0x9e>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   294f4:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   294f8:	313f      	adds	r1, #63	; 0x3f
   294fa:	b289      	uxth	r1, r1
   294fc:	4640      	mov	r0, r8
   294fe:	f7ff fed1 	bl	292a4 <nvs_delete>
			if (rc < 0) {
   29502:	2800      	cmp	r0, #0
   29504:	da00      	bge.n	29508 <settings_nvs_save+0xa0>
				return rc;
   29506:	4607      	mov	r7, r0
}
   29508:	4638      	mov	r0, r7
   2950a:	b017      	add	sp, #92	; 0x5c
   2950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				write_name_id = name_id;
   29510:	9400      	str	r4, [sp, #0]
			continue;
   29512:	e7c5      	b.n	294a0 <settings_nvs_save+0x38>
			cf->last_name_id--;
   29514:	3b01      	subs	r3, #1
   29516:	4632      	mov	r2, r6
   29518:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2951c:	2302      	movs	r3, #2
   2951e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   29522:	4640      	mov	r0, r8
   29524:	f7e8 fdbe 	bl	120a4 <nvs_write>
			if (rc < 0) {
   29528:	2800      	cmp	r0, #0
   2952a:	dadd      	bge.n	294e8 <settings_nvs_save+0x80>
				return rc;
   2952c:	4607      	mov	r7, r0
   2952e:	e7eb      	b.n	29508 <settings_nvs_save+0xa0>
   29530:	9c00      	ldr	r4, [sp, #0]
	write_name = true;
   29532:	2501      	movs	r5, #1
   29534:	e000      	b.n	29538 <settings_nvs_save+0xd0>
		write_name = false;
   29536:	464d      	mov	r5, r9
	if (delete) {
   29538:	f1b9 0f00 	cmp.w	r9, #0
   2953c:	d130      	bne.n	295a0 <settings_nvs_save+0x138>
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2953e:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
   29542:	d02f      	beq.n	295a4 <settings_nvs_save+0x13c>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   29544:	f106 0808 	add.w	r8, r6, #8
   29548:	f504 4180 	add.w	r1, r4, #16384	; 0x4000
   2954c:	9b01      	ldr	r3, [sp, #4]
   2954e:	4652      	mov	r2, sl
   29550:	b289      	uxth	r1, r1
   29552:	4640      	mov	r0, r8
   29554:	f7e8 fda6 	bl	120a4 <nvs_write>
	if (rc < 0) {
   29558:	1e07      	subs	r7, r0, #0
   2955a:	dbd5      	blt.n	29508 <settings_nvs_save+0xa0>
	if (write_name) {
   2955c:	b935      	cbnz	r5, 2956c <settings_nvs_save+0x104>
	if (write_name_id > cf->last_name_id) {
   2955e:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   29560:	42a3      	cmp	r3, r4
   29562:	d30f      	bcc.n	29584 <settings_nvs_save+0x11c>
	if (rc < 0) {
   29564:	2f00      	cmp	r7, #0
   29566:	dbcf      	blt.n	29508 <settings_nvs_save+0xa0>
	return 0;
   29568:	2700      	movs	r7, #0
   2956a:	e7cd      	b.n	29508 <settings_nvs_save+0xa0>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2956c:	4658      	mov	r0, fp
   2956e:	f000 fbb7 	bl	29ce0 <strlen>
   29572:	4603      	mov	r3, r0
   29574:	465a      	mov	r2, fp
   29576:	4621      	mov	r1, r4
   29578:	4640      	mov	r0, r8
   2957a:	f7e8 fd93 	bl	120a4 <nvs_write>
		if (rc < 0) {
   2957e:	1e07      	subs	r7, r0, #0
   29580:	daed      	bge.n	2955e <settings_nvs_save+0xf6>
   29582:	e7c1      	b.n	29508 <settings_nvs_save+0xa0>
		cf->last_name_id = write_name_id;
   29584:	4632      	mov	r2, r6
   29586:	f822 4f38 	strh.w	r4, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2958a:	2302      	movs	r3, #2
   2958c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   29590:	4640      	mov	r0, r8
   29592:	f7e8 fd87 	bl	120a4 <nvs_write>
   29596:	4607      	mov	r7, r0
   29598:	e7e4      	b.n	29564 <settings_nvs_save+0xfc>
		return -EINVAL;
   2959a:	f06f 0715 	mvn.w	r7, #21
   2959e:	e7b3      	b.n	29508 <settings_nvs_save+0xa0>
		return 0;
   295a0:	2700      	movs	r7, #0
   295a2:	e7b1      	b.n	29508 <settings_nvs_save+0xa0>
		return -ENOMEM;
   295a4:	f06f 070b 	mvn.w	r7, #11
   295a8:	e7ae      	b.n	29508 <settings_nvs_save+0xa0>

000295aa <settings_nvs_backend_init>:
{
   295aa:	b570      	push	{r4, r5, r6, lr}
   295ac:	b082      	sub	sp, #8
	cf->cf_nvs.flash_device = cf->flash_dev;
   295ae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   295b0:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   295b2:	b1e3      	cbz	r3, 295ee <settings_nvs_backend_init+0x44>
   295b4:	4604      	mov	r4, r0
	rc = nvs_mount(&cf->cf_nvs);
   295b6:	f100 0508 	add.w	r5, r0, #8
   295ba:	4628      	mov	r0, r5
   295bc:	f7e8 fcfa 	bl	11fb4 <nvs_mount>
	if (rc) {
   295c0:	4606      	mov	r6, r0
   295c2:	b110      	cbz	r0, 295ca <settings_nvs_backend_init+0x20>
}
   295c4:	4630      	mov	r0, r6
   295c6:	b002      	add	sp, #8
   295c8:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   295ca:	2302      	movs	r3, #2
   295cc:	f10d 0206 	add.w	r2, sp, #6
   295d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   295d4:	4628      	mov	r0, r5
   295d6:	f7ff fe6b 	bl	292b0 <nvs_read>
	if (rc < 0) {
   295da:	2800      	cmp	r0, #0
   295dc:	db03      	blt.n	295e6 <settings_nvs_backend_init+0x3c>
		cf->last_name_id = last_name_id;
   295de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   295e2:	8723      	strh	r3, [r4, #56]	; 0x38
   295e4:	e7ee      	b.n	295c4 <settings_nvs_backend_init+0x1a>
		cf->last_name_id = NVS_NAMECNT_ID;
   295e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   295ea:	8723      	strh	r3, [r4, #56]	; 0x38
   295ec:	e7ea      	b.n	295c4 <settings_nvs_backend_init+0x1a>
		return -ENODEV;
   295ee:	f06f 0612 	mvn.w	r6, #18
   295f2:	e7e7      	b.n	295c4 <settings_nvs_backend_init+0x1a>

000295f4 <atomic_test_and_clear_bit>:
{
   295f4:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   295f6:	f001 021f 	and.w	r2, r1, #31
   295fa:	2301      	movs	r3, #1
   295fc:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   295fe:	0949      	lsrs	r1, r1, #5
   29600:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   29604:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29606:	f3bf 8f5b 	dmb	ish
   2960a:	e850 2f00 	ldrex	r2, [r0]
   2960e:	ea02 0c01 	and.w	ip, r2, r1
   29612:	e840 ce00 	strex	lr, ip, [r0]
   29616:	f1be 0f00 	cmp.w	lr, #0
   2961a:	d1f6      	bne.n	2960a <atomic_test_and_clear_bit+0x16>
   2961c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   29620:	4213      	tst	r3, r2
}
   29622:	bf14      	ite	ne
   29624:	2001      	movne	r0, #1
   29626:	2000      	moveq	r0, #0
   29628:	f85d fb04 	ldr.w	pc, [sp], #4

0002962c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2962c:	f001 021f 	and.w	r2, r1, #31
   29630:	2301      	movs	r3, #1
   29632:	4093      	lsls	r3, r2
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29634:	0949      	lsrs	r1, r1, #5
   29636:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2963a:	f3bf 8f5b 	dmb	ish
   2963e:	e850 2f00 	ldrex	r2, [r0]
   29642:	431a      	orrs	r2, r3
   29644:	e840 2100 	strex	r1, r2, [r0]
   29648:	2900      	cmp	r1, #0
   2964a:	d1f8      	bne.n	2963e <atomic_set_bit+0x12>
   2964c:	f3bf 8f5b 	dmb	ish
}
   29650:	4770      	bx	lr

00029652 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   29652:	2000      	movs	r0, #0
   29654:	4770      	bx	lr

00029656 <bt_gatt_notify>:
 *  @return 0 in case of success or negative value in case of error.
 */
static inline int bt_gatt_notify(struct bt_conn *conn,
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
   29656:	b5f0      	push	{r4, r5, r6, r7, lr}
   29658:	b087      	sub	sp, #28
   2965a:	4604      	mov	r4, r0
   2965c:	460f      	mov	r7, r1
   2965e:	4616      	mov	r6, r2
   29660:	461d      	mov	r5, r3
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   29662:	2218      	movs	r2, #24
   29664:	2100      	movs	r1, #0
   29666:	4668      	mov	r0, sp
   29668:	f000 fbbf 	bl	29dea <memset>

	params.attr = attr;
   2966c:	9701      	str	r7, [sp, #4]
	params.data = data;
   2966e:	9602      	str	r6, [sp, #8]
	params.len = len;
   29670:	f8ad 500c 	strh.w	r5, [sp, #12]
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   29674:	4669      	mov	r1, sp
   29676:	4620      	mov	r0, r4
   29678:	f7f0 fdee 	bl	1a258 <bt_gatt_notify_cb>
}
   2967c:	b007      	add	sp, #28
   2967e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029680 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   29680:	428b      	cmp	r3, r1
   29682:	d901      	bls.n	29688 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   29684:	2000      	movs	r0, #0
	}
}
   29686:	4770      	bx	lr
{
   29688:	b510      	push	{r4, lr}
   2968a:	4694      	mov	ip, r2
   2968c:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   2968e:	461a      	mov	r2, r3
   29690:	4661      	mov	r1, ip
   29692:	f000 fb7b 	bl	29d8c <memcpy>
		return from_len;
   29696:	4620      	mov	r0, r4
}
   29698:	bd10      	pop	{r4, pc}

0002969a <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   2969a:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   2969c:	f000 fba5 	bl	29dea <memset>
}
   296a0:	bd08      	pop	{r3, pc}

000296a2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   296a2:	09c3      	lsrs	r3, r0, #7
   296a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   296a8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   296ac:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   296b0:	b2c0      	uxtb	r0, r0
   296b2:	4770      	bx	lr

000296b4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   296b4:	7803      	ldrb	r3, [r0, #0]
   296b6:	78ca      	ldrb	r2, [r1, #3]
   296b8:	4053      	eors	r3, r2
   296ba:	7003      	strb	r3, [r0, #0]
   296bc:	7843      	ldrb	r3, [r0, #1]
   296be:	788a      	ldrb	r2, [r1, #2]
   296c0:	4053      	eors	r3, r2
   296c2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   296c4:	7883      	ldrb	r3, [r0, #2]
   296c6:	784a      	ldrb	r2, [r1, #1]
   296c8:	4053      	eors	r3, r2
   296ca:	7083      	strb	r3, [r0, #2]
   296cc:	78c3      	ldrb	r3, [r0, #3]
   296ce:	780a      	ldrb	r2, [r1, #0]
   296d0:	4053      	eors	r3, r2
   296d2:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   296d4:	7903      	ldrb	r3, [r0, #4]
   296d6:	79ca      	ldrb	r2, [r1, #7]
   296d8:	4053      	eors	r3, r2
   296da:	7103      	strb	r3, [r0, #4]
   296dc:	7943      	ldrb	r3, [r0, #5]
   296de:	798a      	ldrb	r2, [r1, #6]
   296e0:	4053      	eors	r3, r2
   296e2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   296e4:	7983      	ldrb	r3, [r0, #6]
   296e6:	794a      	ldrb	r2, [r1, #5]
   296e8:	4053      	eors	r3, r2
   296ea:	7183      	strb	r3, [r0, #6]
   296ec:	79c3      	ldrb	r3, [r0, #7]
   296ee:	790a      	ldrb	r2, [r1, #4]
   296f0:	4053      	eors	r3, r2
   296f2:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   296f4:	7a03      	ldrb	r3, [r0, #8]
   296f6:	7aca      	ldrb	r2, [r1, #11]
   296f8:	4053      	eors	r3, r2
   296fa:	7203      	strb	r3, [r0, #8]
   296fc:	7a43      	ldrb	r3, [r0, #9]
   296fe:	7a8a      	ldrb	r2, [r1, #10]
   29700:	4053      	eors	r3, r2
   29702:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   29704:	7a83      	ldrb	r3, [r0, #10]
   29706:	7a4a      	ldrb	r2, [r1, #9]
   29708:	4053      	eors	r3, r2
   2970a:	7283      	strb	r3, [r0, #10]
   2970c:	7ac3      	ldrb	r3, [r0, #11]
   2970e:	7a0a      	ldrb	r2, [r1, #8]
   29710:	4053      	eors	r3, r2
   29712:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   29714:	7b03      	ldrb	r3, [r0, #12]
   29716:	7bca      	ldrb	r2, [r1, #15]
   29718:	4053      	eors	r3, r2
   2971a:	7303      	strb	r3, [r0, #12]
   2971c:	7b43      	ldrb	r3, [r0, #13]
   2971e:	7b8a      	ldrb	r2, [r1, #14]
   29720:	4053      	eors	r3, r2
   29722:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   29724:	7b83      	ldrb	r3, [r0, #14]
   29726:	7b4a      	ldrb	r2, [r1, #13]
   29728:	4053      	eors	r3, r2
   2972a:	7383      	strb	r3, [r0, #14]
   2972c:	7bc3      	ldrb	r3, [r0, #15]
   2972e:	7b0a      	ldrb	r2, [r1, #12]
   29730:	4053      	eors	r3, r2
   29732:	73c3      	strb	r3, [r0, #15]
}
   29734:	4770      	bx	lr

00029736 <shift_rows>:
{
   29736:	b500      	push	{lr}
   29738:	b085      	sub	sp, #20
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2973a:	7802      	ldrb	r2, [r0, #0]
   2973c:	f88d 2000 	strb.w	r2, [sp]
   29740:	7942      	ldrb	r2, [r0, #5]
   29742:	f88d 2001 	strb.w	r2, [sp, #1]
   29746:	7a82      	ldrb	r2, [r0, #10]
   29748:	f88d 2002 	strb.w	r2, [sp, #2]
   2974c:	7bc2      	ldrb	r2, [r0, #15]
   2974e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   29752:	7902      	ldrb	r2, [r0, #4]
   29754:	f88d 2004 	strb.w	r2, [sp, #4]
   29758:	7a42      	ldrb	r2, [r0, #9]
   2975a:	f88d 2005 	strb.w	r2, [sp, #5]
   2975e:	7b82      	ldrb	r2, [r0, #14]
   29760:	f88d 2006 	strb.w	r2, [sp, #6]
   29764:	78c2      	ldrb	r2, [r0, #3]
   29766:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2976a:	7a02      	ldrb	r2, [r0, #8]
   2976c:	f88d 2008 	strb.w	r2, [sp, #8]
   29770:	7b42      	ldrb	r2, [r0, #13]
   29772:	f88d 2009 	strb.w	r2, [sp, #9]
   29776:	7882      	ldrb	r2, [r0, #2]
   29778:	f88d 200a 	strb.w	r2, [sp, #10]
   2977c:	79c2      	ldrb	r2, [r0, #7]
   2977e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   29782:	7b02      	ldrb	r2, [r0, #12]
   29784:	f88d 200c 	strb.w	r2, [sp, #12]
   29788:	7842      	ldrb	r2, [r0, #1]
   2978a:	f88d 200d 	strb.w	r2, [sp, #13]
   2978e:	7982      	ldrb	r2, [r0, #6]
   29790:	f88d 200e 	strb.w	r2, [sp, #14]
   29794:	7ac3      	ldrb	r3, [r0, #11]
   29796:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2979a:	2310      	movs	r3, #16
   2979c:	466a      	mov	r2, sp
   2979e:	4619      	mov	r1, r3
   297a0:	f7ff ff6e 	bl	29680 <_copy>
}
   297a4:	b005      	add	sp, #20
   297a6:	f85d fb04 	ldr.w	pc, [sp], #4

000297aa <mult_row_column>:
{
   297aa:	b570      	push	{r4, r5, r6, lr}
   297ac:	4606      	mov	r6, r0
   297ae:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   297b0:	7808      	ldrb	r0, [r1, #0]
   297b2:	f7ff ff76 	bl	296a2 <_double_byte>
   297b6:	4605      	mov	r5, r0
   297b8:	7860      	ldrb	r0, [r4, #1]
   297ba:	f7ff ff72 	bl	296a2 <_double_byte>
   297be:	7861      	ldrb	r1, [r4, #1]
   297c0:	78a2      	ldrb	r2, [r4, #2]
   297c2:	78e3      	ldrb	r3, [r4, #3]
   297c4:	4048      	eors	r0, r1
   297c6:	4045      	eors	r5, r0
   297c8:	406a      	eors	r2, r5
   297ca:	4053      	eors	r3, r2
   297cc:	7033      	strb	r3, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   297ce:	7825      	ldrb	r5, [r4, #0]
   297d0:	7860      	ldrb	r0, [r4, #1]
   297d2:	f7ff ff66 	bl	296a2 <_double_byte>
   297d6:	4045      	eors	r5, r0
   297d8:	b2ed      	uxtb	r5, r5
   297da:	78a0      	ldrb	r0, [r4, #2]
   297dc:	f7ff ff61 	bl	296a2 <_double_byte>
   297e0:	78a2      	ldrb	r2, [r4, #2]
   297e2:	78e3      	ldrb	r3, [r4, #3]
   297e4:	4050      	eors	r0, r2
   297e6:	4045      	eors	r5, r0
   297e8:	406b      	eors	r3, r5
   297ea:	7073      	strb	r3, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   297ec:	7825      	ldrb	r5, [r4, #0]
   297ee:	7863      	ldrb	r3, [r4, #1]
   297f0:	405d      	eors	r5, r3
   297f2:	78a0      	ldrb	r0, [r4, #2]
   297f4:	f7ff ff55 	bl	296a2 <_double_byte>
   297f8:	4045      	eors	r5, r0
   297fa:	b2ed      	uxtb	r5, r5
   297fc:	78e0      	ldrb	r0, [r4, #3]
   297fe:	f7ff ff50 	bl	296a2 <_double_byte>
   29802:	78e3      	ldrb	r3, [r4, #3]
   29804:	4058      	eors	r0, r3
   29806:	4045      	eors	r5, r0
   29808:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2980a:	7820      	ldrb	r0, [r4, #0]
   2980c:	f7ff ff49 	bl	296a2 <_double_byte>
   29810:	7822      	ldrb	r2, [r4, #0]
   29812:	7863      	ldrb	r3, [r4, #1]
   29814:	78a5      	ldrb	r5, [r4, #2]
   29816:	4050      	eors	r0, r2
   29818:	4043      	eors	r3, r0
   2981a:	405d      	eors	r5, r3
   2981c:	b2ed      	uxtb	r5, r5
   2981e:	78e0      	ldrb	r0, [r4, #3]
   29820:	f7ff ff3f 	bl	296a2 <_double_byte>
   29824:	4045      	eors	r5, r0
   29826:	70f5      	strb	r5, [r6, #3]
}
   29828:	bd70      	pop	{r4, r5, r6, pc}

0002982a <mix_columns>:
{
   2982a:	b510      	push	{r4, lr}
   2982c:	b084      	sub	sp, #16
   2982e:	4604      	mov	r4, r0
	mult_row_column(t, s);
   29830:	4601      	mov	r1, r0
   29832:	4668      	mov	r0, sp
   29834:	f7ff ffb9 	bl	297aa <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   29838:	1d21      	adds	r1, r4, #4
   2983a:	a801      	add	r0, sp, #4
   2983c:	f7ff ffb5 	bl	297aa <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   29840:	f104 0108 	add.w	r1, r4, #8
   29844:	a802      	add	r0, sp, #8
   29846:	f7ff ffb0 	bl	297aa <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2984a:	f104 010c 	add.w	r1, r4, #12
   2984e:	a803      	add	r0, sp, #12
   29850:	f7ff ffab 	bl	297aa <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   29854:	2310      	movs	r3, #16
   29856:	466a      	mov	r2, sp
   29858:	4619      	mov	r1, r3
   2985a:	4620      	mov	r0, r4
   2985c:	f7ff ff10 	bl	29680 <_copy>
}
   29860:	b004      	add	sp, #16
   29862:	bd10      	pop	{r4, pc}

00029864 <gf_double>:
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   29864:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29866:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   2986a:	2a00      	cmp	r2, #0
   2986c:	db04      	blt.n	29878 <gf_double+0x14>
   2986e:	f04f 0c00 	mov.w	ip, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   29872:	f100 020f 	add.w	r2, r0, #15
   29876:	e006      	b.n	29886 <gf_double+0x22>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29878:	f04f 0c87 	mov.w	ip, #135	; 0x87
   2987c:	e7f9      	b.n	29872 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   2987e:	f813 0901 	ldrb.w	r0, [r3], #-1
   29882:	ea4f 1cd0 	mov.w	ip, r0, lsr #7
		*out-- = (*x << 1) ^ carry;
   29886:	7818      	ldrb	r0, [r3, #0]
   29888:	ea8c 0040 	eor.w	r0, ip, r0, lsl #1
   2988c:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   29890:	428b      	cmp	r3, r1
   29892:	d1f4      	bne.n	2987e <gf_double+0x1a>
	}
}
   29894:	4770      	bx	lr

00029896 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   29896:	b130      	cbz	r0, 298a6 <tc_cmac_erase+0x10>
{
   29898:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2989a:	2258      	movs	r2, #88	; 0x58
   2989c:	2100      	movs	r1, #0
   2989e:	f7ff fefc 	bl	2969a <_set>

	return TC_CRYPTO_SUCCESS;
   298a2:	2001      	movs	r0, #1
}
   298a4:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   298a6:	2000      	movs	r0, #0
}
   298a8:	4770      	bx	lr

000298aa <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   298aa:	b1a0      	cbz	r0, 298d6 <tc_cmac_init+0x2c>
{
   298ac:	b510      	push	{r4, lr}
   298ae:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   298b0:	2210      	movs	r2, #16
   298b2:	2100      	movs	r1, #0
   298b4:	f7ff fef1 	bl	2969a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   298b8:	2210      	movs	r2, #16
   298ba:	2100      	movs	r1, #0
   298bc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   298c0:	f7ff feeb 	bl	2969a <_set>
	s->leftover_offset = 0;
   298c4:	2300      	movs	r3, #0
   298c6:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   298c8:	2200      	movs	r2, #0
   298ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   298ce:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   298d2:	2001      	movs	r0, #1
}
   298d4:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   298d6:	2000      	movs	r0, #0
}
   298d8:	4770      	bx	lr

000298da <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   298da:	b338      	cbz	r0, 2992c <tc_cmac_setup+0x52>
{
   298dc:	b570      	push	{r4, r5, r6, lr}
   298de:	460d      	mov	r5, r1
   298e0:	4616      	mov	r6, r2
   298e2:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   298e4:	b321      	cbz	r1, 29930 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   298e6:	2258      	movs	r2, #88	; 0x58
   298e8:	2100      	movs	r1, #0
   298ea:	f7ff fed6 	bl	2969a <_set>
	s->sched = sched;
   298ee:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   298f0:	4629      	mov	r1, r5
   298f2:	4630      	mov	r0, r6
   298f4:	f7e9 f99c 	bl	12c30 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   298f8:	2210      	movs	r2, #16
   298fa:	2100      	movs	r1, #0
   298fc:	4620      	mov	r0, r4
   298fe:	f7ff fecc 	bl	2969a <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   29902:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29904:	4621      	mov	r1, r4
   29906:	4620      	mov	r0, r4
   29908:	f7e9 f9f4 	bl	12cf4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2990c:	f104 0510 	add.w	r5, r4, #16
   29910:	4621      	mov	r1, r4
   29912:	4628      	mov	r0, r5
   29914:	f7ff ffa6 	bl	29864 <gf_double>
	gf_double (s->K2, s->K1);
   29918:	4629      	mov	r1, r5
   2991a:	f104 0020 	add.w	r0, r4, #32
   2991e:	f7ff ffa1 	bl	29864 <gf_double>
	tc_cmac_init(s);
   29922:	4620      	mov	r0, r4
   29924:	f7ff ffc1 	bl	298aa <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   29928:	2001      	movs	r0, #1
}
   2992a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2992c:	2000      	movs	r0, #0
}
   2992e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   29930:	2000      	movs	r0, #0
   29932:	e7fa      	b.n	2992a <tc_cmac_setup+0x50>

00029934 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29934:	2800      	cmp	r0, #0
   29936:	d064      	beq.n	29a02 <tc_cmac_update+0xce>
{
   29938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2993c:	460d      	mov	r5, r1
   2993e:	4616      	mov	r6, r2
   29940:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   29942:	2a00      	cmp	r2, #0
   29944:	d05f      	beq.n	29a06 <tc_cmac_update+0xd2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   29946:	2900      	cmp	r1, #0
   29948:	d060      	beq.n	29a0c <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2994a:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2994c:	6d42      	ldr	r2, [r0, #84]	; 0x54
   2994e:	ea53 0102 	orrs.w	r1, r3, r2
   29952:	d05d      	beq.n	29a10 <tc_cmac_update+0xdc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   29954:	3b01      	subs	r3, #1
   29956:	f142 32ff 	adc.w	r2, r2, #4294967295
   2995a:	6503      	str	r3, [r0, #80]	; 0x50
   2995c:	6542      	str	r2, [r0, #84]	; 0x54

	if (s->leftover_offset > 0) {
   2995e:	6c47      	ldr	r7, [r0, #68]	; 0x44
   29960:	2f00      	cmp	r7, #0
   29962:	d03d      	beq.n	299e0 <tc_cmac_update+0xac>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   29964:	f1c7 0810 	rsb	r8, r7, #16

		if (data_length < remaining_space) {
   29968:	4546      	cmp	r6, r8
   2996a:	d30d      	bcc.n	29988 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2996c:	f107 0030 	add.w	r0, r7, #48	; 0x30
   29970:	4643      	mov	r3, r8
   29972:	462a      	mov	r2, r5
   29974:	4641      	mov	r1, r8
   29976:	4420      	add	r0, r4
   29978:	f7ff fe82 	bl	29680 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2997c:	3f10      	subs	r7, #16
   2997e:	443e      	add	r6, r7
		data += remaining_space;
   29980:	4445      	add	r5, r8
		s->leftover_offset = 0;
   29982:	2300      	movs	r3, #0
   29984:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29986:	e013      	b.n	299b0 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29988:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2998c:	4633      	mov	r3, r6
   2998e:	462a      	mov	r2, r5
   29990:	4631      	mov	r1, r6
   29992:	4420      	add	r0, r4
   29994:	f7ff fe74 	bl	29680 <_copy>
			s->leftover_offset += data_length;
   29998:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2999a:	4433      	add	r3, r6
   2999c:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2999e:	2001      	movs	r0, #1
   299a0:	e032      	b.n	29a08 <tc_cmac_update+0xd4>
			s->iv[i] ^= s->leftover[i];
   299a2:	5ce2      	ldrb	r2, [r4, r3]
   299a4:	18e1      	adds	r1, r4, r3
   299a6:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
   299aa:	404a      	eors	r2, r1
   299ac:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   299ae:	3301      	adds	r3, #1
   299b0:	2b0f      	cmp	r3, #15
   299b2:	d9f6      	bls.n	299a2 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   299b4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   299b6:	4621      	mov	r1, r4
   299b8:	4620      	mov	r0, r4
   299ba:	f7e9 f99b 	bl	12cf4 <tc_aes_encrypt>
   299be:	e00f      	b.n	299e0 <tc_cmac_update+0xac>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   299c0:	5ce0      	ldrb	r0, [r4, r3]
   299c2:	f815 c003 	ldrb.w	ip, [r5, r3]
   299c6:	ea80 000c 	eor.w	r0, r0, ip
   299ca:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   299cc:	3301      	adds	r3, #1
   299ce:	2b0f      	cmp	r3, #15
   299d0:	d9f6      	bls.n	299c0 <tc_cmac_update+0x8c>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   299d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   299d4:	4621      	mov	r1, r4
   299d6:	4620      	mov	r0, r4
   299d8:	f7e9 f98c 	bl	12cf4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   299dc:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   299de:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   299e0:	2e10      	cmp	r6, #16
   299e2:	d901      	bls.n	299e8 <tc_cmac_update+0xb4>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   299e4:	2300      	movs	r3, #0
   299e6:	e7f2      	b.n	299ce <tc_cmac_update+0x9a>
	}

	if (data_length > 0) {
   299e8:	b90e      	cbnz	r6, 299ee <tc_cmac_update+0xba>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   299ea:	2001      	movs	r0, #1
   299ec:	e00c      	b.n	29a08 <tc_cmac_update+0xd4>
		_copy(s->leftover, data_length, data, data_length);
   299ee:	4633      	mov	r3, r6
   299f0:	462a      	mov	r2, r5
   299f2:	4631      	mov	r1, r6
   299f4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   299f8:	f7ff fe42 	bl	29680 <_copy>
		s->leftover_offset = data_length;
   299fc:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   299fe:	2001      	movs	r0, #1
   29a00:	e002      	b.n	29a08 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   29a02:	2000      	movs	r0, #0
}
   29a04:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   29a06:	2001      	movs	r0, #1
}
   29a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   29a0c:	2000      	movs	r0, #0
   29a0e:	e7fb      	b.n	29a08 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   29a10:	2000      	movs	r0, #0
   29a12:	e7f9      	b.n	29a08 <tc_cmac_update+0xd4>

00029a14 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   29a14:	b380      	cbz	r0, 29a78 <tc_cmac_final+0x64>
{
   29a16:	b538      	push	{r3, r4, r5, lr}
   29a18:	460c      	mov	r4, r1
   29a1a:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   29a1c:	b371      	cbz	r1, 29a7c <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   29a1e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   29a20:	2a10      	cmp	r2, #16
   29a22:	d103      	bne.n	29a2c <tc_cmac_final+0x18>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   29a24:	f101 0c10 	add.w	ip, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29a28:	2300      	movs	r3, #0
   29a2a:	e019      	b.n	29a60 <tc_cmac_final+0x4c>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   29a2c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   29a30:	f1c2 0210 	rsb	r2, r2, #16
   29a34:	2100      	movs	r1, #0
   29a36:	4420      	add	r0, r4
   29a38:	f7ff fe2f 	bl	2969a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   29a3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   29a3e:	4423      	add	r3, r4
   29a40:	2280      	movs	r2, #128	; 0x80
   29a42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   29a46:	f104 0c20 	add.w	ip, r4, #32
   29a4a:	e7ed      	b.n	29a28 <tc_cmac_final+0x14>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   29a4c:	5ce2      	ldrb	r2, [r4, r3]
   29a4e:	18e1      	adds	r1, r4, r3
   29a50:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   29a54:	f81c 1003 	ldrb.w	r1, [ip, r3]
   29a58:	4048      	eors	r0, r1
   29a5a:	4042      	eors	r2, r0
   29a5c:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29a5e:	3301      	adds	r3, #1
   29a60:	2b0f      	cmp	r3, #15
   29a62:	d9f3      	bls.n	29a4c <tc_cmac_final+0x38>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   29a64:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29a66:	4621      	mov	r1, r4
   29a68:	4628      	mov	r0, r5
   29a6a:	f7e9 f943 	bl	12cf4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   29a6e:	4620      	mov	r0, r4
   29a70:	f7ff ff11 	bl	29896 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   29a74:	2001      	movs	r0, #1
}
   29a76:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   29a78:	2000      	movs	r0, #0
}
   29a7a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   29a7c:	2000      	movs	r0, #0
   29a7e:	e7fa      	b.n	29a76 <tc_cmac_final+0x62>

00029a80 <abort_function>:
{
   29a80:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   29a82:	2000      	movs	r0, #0
   29a84:	f7e8 f8ec 	bl	11c60 <sys_reboot>

00029a88 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   29a88:	b538      	push	{r3, r4, r5, lr}
   29a8a:	4604      	mov	r4, r0

	if (esf != NULL) {
   29a8c:	460d      	mov	r5, r1
   29a8e:	b111      	cbz	r1, 29a96 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   29a90:	4608      	mov	r0, r1
   29a92:	f7e9 fab7 	bl	13004 <esf_dump>
	}
	z_fatal_error(reason, esf);
   29a96:	4629      	mov	r1, r5
   29a98:	4620      	mov	r0, r4
   29a9a:	f7f7 fe53 	bl	21744 <z_fatal_error>
}
   29a9e:	bd38      	pop	{r3, r4, r5, pc}

00029aa0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   29aa0:	b508      	push	{r3, lr}
   29aa2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   29aa4:	6800      	ldr	r0, [r0, #0]
   29aa6:	f7ff ffef 	bl	29a88 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   29aaa:	bd08      	pop	{r3, pc}

00029aac <arch_irq_enable>:
{
   29aac:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   29aae:	b240      	sxtb	r0, r0
   29ab0:	f7e9 fad0 	bl	13054 <__NVIC_EnableIRQ>
}
   29ab4:	bd08      	pop	{r3, pc}

00029ab6 <arch_irq_disable>:
{
   29ab6:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   29ab8:	b240      	sxtb	r0, r0
   29aba:	f7e9 fad9 	bl	13070 <__NVIC_DisableIRQ>
}
   29abe:	bd08      	pop	{r3, pc}

00029ac0 <z_irq_spurious>:
{
   29ac0:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   29ac2:	2100      	movs	r1, #0
   29ac4:	2001      	movs	r0, #1
   29ac6:	f7ff ffdf 	bl	29a88 <z_arm_fatal_error>
}
   29aca:	bd08      	pop	{r3, pc}

00029acc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   29acc:	b508      	push	{r3, lr}
	handler();
   29ace:	f7e9 fb2f 	bl	13130 <z_SysNmiOnReset>
	z_arm_int_exit();
   29ad2:	f7e9 fc21 	bl	13318 <z_arm_exc_exit>
}
   29ad6:	bd08      	pop	{r3, pc}

00029ad8 <memory_fault_recoverable>:
}
   29ad8:	2000      	movs	r0, #0
   29ada:	4770      	bx	lr

00029adc <fault_handle>:
{
   29adc:	b508      	push	{r3, lr}
	*recoverable = false;
   29ade:	2300      	movs	r3, #0
   29ae0:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   29ae2:	1ecb      	subs	r3, r1, #3
   29ae4:	2b09      	cmp	r3, #9
   29ae6:	d81a      	bhi.n	29b1e <fault_handle+0x42>
   29ae8:	e8df f003 	tbb	[pc, r3]
   29aec:	110d0905 	.word	0x110d0905
   29af0:	19191919 	.word	0x19191919
   29af4:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   29af6:	4611      	mov	r1, r2
   29af8:	f7e9 fdec 	bl	136d4 <hard_fault>
}
   29afc:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   29afe:	2100      	movs	r1, #0
   29b00:	f7e9 fd44 	bl	1358c <mem_manage_fault>
		break;
   29b04:	e7fa      	b.n	29afc <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   29b06:	2100      	movs	r1, #0
   29b08:	f7e9 fc54 	bl	133b4 <bus_fault>
		break;
   29b0c:	e7f6      	b.n	29afc <fault_handle+0x20>
		reason = usage_fault(esf);
   29b0e:	f7e9 fcc5 	bl	1349c <usage_fault>
		break;
   29b12:	e7f3      	b.n	29afc <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   29b14:	4611      	mov	r1, r2
   29b16:	f7e9 fd1b 	bl	13550 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   29b1a:	2000      	movs	r0, #0
		break;
   29b1c:	e7ee      	b.n	29afc <fault_handle+0x20>
		reserved_exception(esf, fault);
   29b1e:	f7e9 fd21 	bl	13564 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   29b22:	2000      	movs	r0, #0
	return reason;
   29b24:	e7ea      	b.n	29afc <fault_handle+0x20>

00029b26 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   29b26:	6843      	ldr	r3, [r0, #4]
   29b28:	1e5a      	subs	r2, r3, #1
		&&
   29b2a:	4213      	tst	r3, r2
   29b2c:	d106      	bne.n	29b3c <mpu_partition_is_valid+0x16>
		&&
   29b2e:	2b1f      	cmp	r3, #31
   29b30:	d906      	bls.n	29b40 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   29b32:	6803      	ldr	r3, [r0, #0]
		&&
   29b34:	421a      	tst	r2, r3
   29b36:	d005      	beq.n	29b44 <mpu_partition_is_valid+0x1e>
   29b38:	2000      	movs	r0, #0
   29b3a:	4770      	bx	lr
   29b3c:	2000      	movs	r0, #0
   29b3e:	4770      	bx	lr
   29b40:	2000      	movs	r0, #0
   29b42:	4770      	bx	lr
   29b44:	2001      	movs	r0, #1
}
   29b46:	4770      	bx	lr

00029b48 <mpu_configure_region>:
{
   29b48:	b500      	push	{lr}
   29b4a:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   29b4c:	680b      	ldr	r3, [r1, #0]
   29b4e:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   29b50:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   29b52:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   29b54:	2b20      	cmp	r3, #32
   29b56:	d912      	bls.n	29b7e <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   29b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   29b5c:	d811      	bhi.n	29b82 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   29b5e:	3b01      	subs	r3, #1
   29b60:	fab3 f383 	clz	r3, r3
   29b64:	f1c3 031f 	rsb	r3, r3, #31
   29b68:	005b      	lsls	r3, r3, #1
   29b6a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   29b6e:	4313      	orrs	r3, r2
   29b70:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   29b72:	a901      	add	r1, sp, #4
   29b74:	f7e9 ff5e 	bl	13a34 <region_allocate_and_init>
}
   29b78:	b005      	add	sp, #20
   29b7a:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   29b7e:	2308      	movs	r3, #8
   29b80:	e7f5      	b.n	29b6e <mpu_configure_region+0x26>
		return REGION_4G;
   29b82:	233e      	movs	r3, #62	; 0x3e
   29b84:	e7f3      	b.n	29b6e <mpu_configure_region+0x26>

00029b86 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   29b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29b8a:	4606      	mov	r6, r0
   29b8c:	460f      	mov	r7, r1
	register const char *s = nptr;
   29b8e:	4604      	mov	r4, r0
   29b90:	e001      	b.n	29b96 <strtoul+0x10>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   29b92:	2501      	movs	r5, #1
	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
	} while (isspace((unsigned char)c));
   29b94:	b16d      	cbz	r5, 29bb2 <strtoul+0x2c>
		c = *s++;
   29b96:	4620      	mov	r0, r4
   29b98:	3401      	adds	r4, #1
   29b9a:	7801      	ldrb	r1, [r0, #0]
   29b9c:	460b      	mov	r3, r1
   29b9e:	2920      	cmp	r1, #32
   29ba0:	d0f7      	beq.n	29b92 <strtoul+0xc>
   29ba2:	f1a1 0509 	sub.w	r5, r1, #9
   29ba6:	2d04      	cmp	r5, #4
   29ba8:	d801      	bhi.n	29bae <strtoul+0x28>
   29baa:	2501      	movs	r5, #1
   29bac:	e7f2      	b.n	29b94 <strtoul+0xe>
   29bae:	2500      	movs	r5, #0
   29bb0:	e7f0      	b.n	29b94 <strtoul+0xe>
	if (c == '-') {
   29bb2:	292d      	cmp	r1, #45	; 0x2d
   29bb4:	d016      	beq.n	29be4 <strtoul+0x5e>
		neg = 1;
		c = *s++;
	} else if (c == '+') {
   29bb6:	292b      	cmp	r1, #43	; 0x2b
   29bb8:	d019      	beq.n	29bee <strtoul+0x68>
	register int neg = 0, any, cutlim;
   29bba:	46a9      	mov	r9, r5
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   29bbc:	b10a      	cbz	r2, 29bc2 <strtoul+0x3c>
   29bbe:	2a10      	cmp	r2, #16
   29bc0:	d101      	bne.n	29bc6 <strtoul+0x40>
   29bc2:	2b30      	cmp	r3, #48	; 0x30
   29bc4:	d017      	beq.n	29bf6 <strtoul+0x70>
		c = s[1];
		s += 2;
		base = 16;
	}

	if (base == 0) {
   29bc6:	b912      	cbnz	r2, 29bce <strtoul+0x48>
		base = c == '0' ? 8 : 10;
   29bc8:	2b30      	cmp	r3, #48	; 0x30
   29bca:	d01d      	beq.n	29c08 <strtoul+0x82>
   29bcc:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   29bce:	4690      	mov	r8, r2
   29bd0:	f04f 31ff 	mov.w	r1, #4294967295
   29bd4:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   29bd8:	fb02 fe01 	mul.w	lr, r2, r1
   29bdc:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   29be0:	2000      	movs	r0, #0
   29be2:	e030      	b.n	29c46 <strtoul+0xc0>
		c = *s++;
   29be4:	7823      	ldrb	r3, [r4, #0]
   29be6:	1c84      	adds	r4, r0, #2
		neg = 1;
   29be8:	f04f 0901 	mov.w	r9, #1
   29bec:	e7e6      	b.n	29bbc <strtoul+0x36>
		c = *s++;
   29bee:	7823      	ldrb	r3, [r4, #0]
	register int neg = 0, any, cutlim;
   29bf0:	46a9      	mov	r9, r5
		c = *s++;
   29bf2:	1c84      	adds	r4, r0, #2
   29bf4:	e7e2      	b.n	29bbc <strtoul+0x36>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   29bf6:	7821      	ldrb	r1, [r4, #0]
   29bf8:	2978      	cmp	r1, #120	; 0x78
   29bfa:	d001      	beq.n	29c00 <strtoul+0x7a>
   29bfc:	2958      	cmp	r1, #88	; 0x58
   29bfe:	d1e2      	bne.n	29bc6 <strtoul+0x40>
		c = s[1];
   29c00:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   29c02:	3402      	adds	r4, #2
		base = 16;
   29c04:	2210      	movs	r2, #16
   29c06:	e7de      	b.n	29bc6 <strtoul+0x40>
		base = c == '0' ? 8 : 10;
   29c08:	2208      	movs	r2, #8
   29c0a:	e7e0      	b.n	29bce <strtoul+0x48>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   29c0c:	f04c 0a20 	orr.w	sl, ip, #32
   29c10:	f1aa 0a61 	sub.w	sl, sl, #97	; 0x61
		if (isdigit((unsigned char)c)) {
			c -= '0';
		} else if (isalpha((unsigned char)c)) {
   29c14:	f1ba 0f19 	cmp.w	sl, #25
   29c18:	d82b      	bhi.n	29c72 <strtoul+0xec>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   29c1a:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   29c1e:	f1bc 0f19 	cmp.w	ip, #25
   29c22:	d804      	bhi.n	29c2e <strtoul+0xa8>
   29c24:	f04f 0c37 	mov.w	ip, #55	; 0x37
   29c28:	eba3 030c 	sub.w	r3, r3, ip
   29c2c:	e013      	b.n	29c56 <strtoul+0xd0>
   29c2e:	f04f 0c57 	mov.w	ip, #87	; 0x57
   29c32:	e7f9      	b.n	29c28 <strtoul+0xa2>
			break;
		}
		if (c >= base) {
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   29c34:	4573      	cmp	r3, lr
   29c36:	dd15      	ble.n	29c64 <strtoul+0xde>
			any = -1;
   29c38:	f04f 35ff 	mov.w	r5, #4294967295
   29c3c:	e001      	b.n	29c42 <strtoul+0xbc>
   29c3e:	f04f 35ff 	mov.w	r5, #4294967295
	for (acc = 0, any = 0;; c = *s++) {
   29c42:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   29c46:	fa5f fc83 	uxtb.w	ip, r3
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   29c4a:	f1a3 0a30 	sub.w	sl, r3, #48	; 0x30
   29c4e:	f1ba 0f09 	cmp.w	sl, #9
   29c52:	d8db      	bhi.n	29c0c <strtoul+0x86>
			c -= '0';
   29c54:	4653      	mov	r3, sl
		if (c >= base) {
   29c56:	429a      	cmp	r2, r3
   29c58:	dd0b      	ble.n	29c72 <strtoul+0xec>
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   29c5a:	2d00      	cmp	r5, #0
   29c5c:	dbef      	blt.n	29c3e <strtoul+0xb8>
   29c5e:	4288      	cmp	r0, r1
   29c60:	d804      	bhi.n	29c6c <strtoul+0xe6>
   29c62:	d0e7      	beq.n	29c34 <strtoul+0xae>
		} else {
			any = 1;
			acc *= base;
			acc += c;
   29c64:	fb00 3008 	mla	r0, r0, r8, r3
			any = 1;
   29c68:	2501      	movs	r5, #1
   29c6a:	e7ea      	b.n	29c42 <strtoul+0xbc>
			any = -1;
   29c6c:	f04f 35ff 	mov.w	r5, #4294967295
   29c70:	e7e7      	b.n	29c42 <strtoul+0xbc>
		}
	}
	if (any < 0) {
   29c72:	2d00      	cmp	r5, #0
   29c74:	db09      	blt.n	29c8a <strtoul+0x104>
		acc = ULONG_MAX;
		errno = ERANGE;
	} else if (neg) {
   29c76:	f1b9 0f00 	cmp.w	r9, #0
   29c7a:	d000      	beq.n	29c7e <strtoul+0xf8>
		acc = -acc;
   29c7c:	4240      	negs	r0, r0
	}
	if (endptr != NULL) {
   29c7e:	b117      	cbz	r7, 29c86 <strtoul+0x100>
		*endptr = (char *)(any ? s - 1 : nptr);
   29c80:	b105      	cbz	r5, 29c84 <strtoul+0xfe>
   29c82:	1e66      	subs	r6, r4, #1
   29c84:	603e      	str	r6, [r7, #0]
	}
	return acc;
}
   29c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   29c8a:	f7f7 fd25 	bl	216d8 <z_impl_z_errno>
		errno = ERANGE;
   29c8e:	2322      	movs	r3, #34	; 0x22
   29c90:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   29c92:	f04f 30ff 	mov.w	r0, #4294967295
   29c96:	e7f2      	b.n	29c7e <strtoul+0xf8>

00029c98 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   29c98:	4602      	mov	r2, r0
   29c9a:	e002      	b.n	29ca2 <strcpy+0xa>
		*d = *s;
   29c9c:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   29ca0:	3101      	adds	r1, #1
	while (*s != '\0') {
   29ca2:	780b      	ldrb	r3, [r1, #0]
   29ca4:	2b00      	cmp	r3, #0
   29ca6:	d1f9      	bne.n	29c9c <strcpy+0x4>
	}

	*d = '\0';
   29ca8:	7013      	strb	r3, [r2, #0]

	return dest;
}
   29caa:	4770      	bx	lr

00029cac <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   29cac:	4603      	mov	r3, r0
   29cae:	b1a2      	cbz	r2, 29cda <strncpy+0x2e>
{
   29cb0:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   29cb2:	780c      	ldrb	r4, [r1, #0]
   29cb4:	b12c      	cbz	r4, 29cc2 <strncpy+0x16>
		*d = *s;
   29cb6:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   29cba:	3101      	adds	r1, #1
		d++;
		n--;
   29cbc:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   29cbe:	2a00      	cmp	r2, #0
   29cc0:	d1f7      	bne.n	29cb2 <strncpy+0x6>
	}

	while (n > 0) {
   29cc2:	b122      	cbz	r2, 29cce <strncpy+0x22>
		*d = '\0';
   29cc4:	2100      	movs	r1, #0
   29cc6:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   29cca:	3a01      	subs	r2, #1
   29ccc:	e7f9      	b.n	29cc2 <strncpy+0x16>
	}

	return dest;
}
   29cce:	bc10      	pop	{r4}
   29cd0:	4770      	bx	lr
		*d = '\0';
   29cd2:	2100      	movs	r1, #0
   29cd4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   29cd8:	3a01      	subs	r2, #1
	while (n > 0) {
   29cda:	2a00      	cmp	r2, #0
   29cdc:	d1f9      	bne.n	29cd2 <strncpy+0x26>
   29cde:	4770      	bx	lr

00029ce0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   29ce0:	4603      	mov	r3, r0
	size_t n = 0;
   29ce2:	2000      	movs	r0, #0

	while (*s != '\0') {
   29ce4:	e001      	b.n	29cea <strlen+0xa>
		s++;
   29ce6:	3301      	adds	r3, #1
		n++;
   29ce8:	3001      	adds	r0, #1
	while (*s != '\0') {
   29cea:	781a      	ldrb	r2, [r3, #0]
   29cec:	2a00      	cmp	r2, #0
   29cee:	d1fa      	bne.n	29ce6 <strlen+0x6>
	}

	return n;
}
   29cf0:	4770      	bx	lr

00029cf2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   29cf2:	4603      	mov	r3, r0
	size_t n = 0;
   29cf4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   29cf6:	e001      	b.n	29cfc <strnlen+0xa>
		s++;
   29cf8:	3301      	adds	r3, #1
		n++;
   29cfa:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   29cfc:	781a      	ldrb	r2, [r3, #0]
   29cfe:	b10a      	cbz	r2, 29d04 <strnlen+0x12>
   29d00:	4288      	cmp	r0, r1
   29d02:	d3f9      	bcc.n	29cf8 <strnlen+0x6>
	}

	return n;
}
   29d04:	4770      	bx	lr

00029d06 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   29d06:	e001      	b.n	29d0c <strcmp+0x6>
		s1++;
   29d08:	3001      	adds	r0, #1
		s2++;
   29d0a:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   29d0c:	7803      	ldrb	r3, [r0, #0]
   29d0e:	780a      	ldrb	r2, [r1, #0]
   29d10:	4293      	cmp	r3, r2
   29d12:	d101      	bne.n	29d18 <strcmp+0x12>
   29d14:	2b00      	cmp	r3, #0
   29d16:	d1f7      	bne.n	29d08 <strcmp+0x2>
	}

	return *s1 - *s2;
}
   29d18:	1a98      	subs	r0, r3, r2
   29d1a:	4770      	bx	lr

00029d1c <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   29d1c:	e002      	b.n	29d24 <strncmp+0x8>
		s1++;
   29d1e:	3001      	adds	r0, #1
		s2++;
   29d20:	3101      	adds	r1, #1
		n--;
   29d22:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   29d24:	b132      	cbz	r2, 29d34 <strncmp+0x18>
   29d26:	7803      	ldrb	r3, [r0, #0]
   29d28:	f891 c000 	ldrb.w	ip, [r1]
   29d2c:	4563      	cmp	r3, ip
   29d2e:	d101      	bne.n	29d34 <strncmp+0x18>
   29d30:	2b00      	cmp	r3, #0
   29d32:	d1f4      	bne.n	29d1e <strncmp+0x2>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   29d34:	b11a      	cbz	r2, 29d3e <strncmp+0x22>
   29d36:	7800      	ldrb	r0, [r0, #0]
   29d38:	780b      	ldrb	r3, [r1, #0]
   29d3a:	1ac0      	subs	r0, r0, r3
   29d3c:	4770      	bx	lr
   29d3e:	2000      	movs	r0, #0
}
   29d40:	4770      	bx	lr

00029d42 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   29d42:	4613      	mov	r3, r2
   29d44:	b16a      	cbz	r2, 29d62 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   29d46:	3b01      	subs	r3, #1
   29d48:	d007      	beq.n	29d5a <memcmp+0x18>
   29d4a:	f890 c000 	ldrb.w	ip, [r0]
   29d4e:	780a      	ldrb	r2, [r1, #0]
   29d50:	4594      	cmp	ip, r2
   29d52:	d102      	bne.n	29d5a <memcmp+0x18>
		c1++;
   29d54:	3001      	adds	r0, #1
		c2++;
   29d56:	3101      	adds	r1, #1
   29d58:	e7f5      	b.n	29d46 <memcmp+0x4>
	}

	return *c1 - *c2;
   29d5a:	7800      	ldrb	r0, [r0, #0]
   29d5c:	780b      	ldrb	r3, [r1, #0]
   29d5e:	1ac0      	subs	r0, r0, r3
   29d60:	4770      	bx	lr
		return 0;
   29d62:	2000      	movs	r0, #0
}
   29d64:	4770      	bx	lr

00029d66 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   29d66:	1a43      	subs	r3, r0, r1
   29d68:	4293      	cmp	r3, r2
   29d6a:	d304      	bcc.n	29d76 <memmove+0x10>
	char *dest = d;
   29d6c:	4603      	mov	r3, r0
   29d6e:	e00a      	b.n	29d86 <memmove+0x20>
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
			n--;
   29d70:	3a01      	subs	r2, #1
			dest[n] = src[n];
   29d72:	5c8b      	ldrb	r3, [r1, r2]
   29d74:	5483      	strb	r3, [r0, r2]
		while (n > 0) {
   29d76:	2a00      	cmp	r2, #0
   29d78:	d1fa      	bne.n	29d70 <memmove+0xa>
   29d7a:	4770      	bx	lr
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
			*dest = *src;
   29d7c:	f811 cb01 	ldrb.w	ip, [r1], #1
   29d80:	f803 cb01 	strb.w	ip, [r3], #1
			dest++;
			src++;
			n--;
   29d84:	3a01      	subs	r2, #1
		while (n > 0) {
   29d86:	2a00      	cmp	r2, #0
   29d88:	d1f8      	bne.n	29d7c <memmove+0x16>
		}
	}

	return d;
}
   29d8a:	4770      	bx	lr

00029d8c <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   29d8c:	ea80 0301 	eor.w	r3, r0, r1
   29d90:	f013 0f03 	tst.w	r3, #3
   29d94:	d001      	beq.n	29d9a <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   29d96:	4603      	mov	r3, r0
   29d98:	e023      	b.n	29de2 <memcpy+0x56>
   29d9a:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   29d9c:	f013 0f03 	tst.w	r3, #3
   29da0:	d00f      	beq.n	29dc2 <memcpy+0x36>
			if (n == 0) {
   29da2:	b30a      	cbz	r2, 29de8 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   29da4:	f811 cb01 	ldrb.w	ip, [r1], #1
   29da8:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   29dac:	3a01      	subs	r2, #1
   29dae:	e7f5      	b.n	29d9c <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   29db0:	f811 cb01 	ldrb.w	ip, [r1], #1
   29db4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   29db8:	3a01      	subs	r2, #1
	while (n > 0) {
   29dba:	2a00      	cmp	r2, #0
   29dbc:	d1f8      	bne.n	29db0 <memcpy+0x24>
	}

	return d;
}
   29dbe:	bc10      	pop	{r4}
   29dc0:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   29dc2:	2a03      	cmp	r2, #3
   29dc4:	d90d      	bls.n	29de2 <memcpy+0x56>
{
   29dc6:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   29dc8:	f851 4b04 	ldr.w	r4, [r1], #4
   29dcc:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   29dd0:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   29dd2:	2a03      	cmp	r2, #3
   29dd4:	d8f8      	bhi.n	29dc8 <memcpy+0x3c>
   29dd6:	e7f0      	b.n	29dba <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   29dd8:	f811 cb01 	ldrb.w	ip, [r1], #1
   29ddc:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   29de0:	3a01      	subs	r2, #1
	while (n > 0) {
   29de2:	2a00      	cmp	r2, #0
   29de4:	d1f8      	bne.n	29dd8 <memcpy+0x4c>
   29de6:	4770      	bx	lr
}
   29de8:	4770      	bx	lr

00029dea <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   29dea:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   29dee:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   29df0:	e002      	b.n	29df8 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   29df2:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   29df6:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   29df8:	f013 0f03 	tst.w	r3, #3
   29dfc:	d002      	beq.n	29e04 <memset+0x1a>
		if (n == 0) {
   29dfe:	2a00      	cmp	r2, #0
   29e00:	d1f7      	bne.n	29df2 <memset+0x8>
   29e02:	e00f      	b.n	29e24 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   29e04:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   29e06:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   29e0a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   29e0e:	2a03      	cmp	r2, #3
   29e10:	d906      	bls.n	29e20 <memset+0x36>
		*(d_word++) = c_word;
   29e12:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   29e16:	3a04      	subs	r2, #4
   29e18:	e7f9      	b.n	29e0e <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   29e1a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   29e1e:	3a01      	subs	r2, #1
	while (n > 0) {
   29e20:	2a00      	cmp	r2, #0
   29e22:	d1fa      	bne.n	29e1a <memset+0x30>
	}

	return buf;
}
   29e24:	4770      	bx	lr

00029e26 <_stdout_hook_default>:
}
   29e26:	f04f 30ff 	mov.w	r0, #4294967295
   29e2a:	4770      	bx	lr

00029e2c <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   29e2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29e30:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   29e34:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   29e38:	2a08      	cmp	r2, #8
   29e3a:	d001      	beq.n	29e40 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   29e3c:	2000      	movs	r0, #0
   29e3e:	4770      	bx	lr
                switch(var2)
   29e40:	2b02      	cmp	r3, #2
   29e42:	d001      	beq.n	29e48 <nrf52_errata_197+0x1c>
                        return false;
   29e44:	2000      	movs	r0, #0
   29e46:	4770      	bx	lr
                        return true;
   29e48:	2001      	movs	r0, #1
    #endif
}
   29e4a:	4770      	bx	lr

00029e4c <sys_arch_reboot>:
{
   29e4c:	b508      	push	{r3, lr}
    *p_gpregret = val;
   29e4e:	b2c0      	uxtb	r0, r0
   29e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29e54:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   29e58:	f7e9 fee2 	bl	13c20 <__NVIC_SystemReset>

00029e5c <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   29e5c:	2301      	movs	r3, #1
   29e5e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   29e62:	f3bf 8f4f 	dsb	sy
        __WFE();
   29e66:	bf20      	wfe
    while (true)
   29e68:	e7fd      	b.n	29e66 <nrf_power_system_off+0xa>

00029e6a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   29e6a:	2806      	cmp	r0, #6
   29e6c:	d000      	beq.n	29e70 <pm_state_set+0x6>
   29e6e:	4770      	bx	lr
{
   29e70:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   29e72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   29e76:	f7ff fff1 	bl	29e5c <nrf_power_system_off>

00029e7a <pm_state_exit_post_ops>:
   29e7a:	2300      	movs	r3, #0
   29e7c:	f383 8811 	msr	BASEPRI, r3
   29e80:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   29e84:	4770      	bx	lr

00029e86 <internal_encrypt_le>:
}
#endif /* defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY) */

static int internal_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
			       uint8_t enc_data[16])
{
   29e86:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_CTLR) && defined(CONFIG_BT_HOST_CRYPTO) && \
    defined(CONFIG_BT_CTLR_LE_ENC)
	ecb_encrypt(key, plaintext, enc_data, NULL);
	return 0;
#else
	return bt_encrypt_le(key, plaintext, enc_data);
   29e88:	f004 fd10 	bl	2e8ac <bt_encrypt_le>
#endif
}
   29e8c:	bd08      	pop	{r3, pc}

00029e8e <ah>:

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   29e8e:	b530      	push	{r4, r5, lr}
   29e90:	b085      	sub	sp, #20
   29e92:	4604      	mov	r4, r0
   29e94:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   29e96:	2203      	movs	r2, #3
   29e98:	4668      	mov	r0, sp
   29e9a:	f7ff ff77 	bl	29d8c <memcpy>
	(void)memset(res + 3, 0, 13);
   29e9e:	220d      	movs	r2, #13
   29ea0:	2100      	movs	r1, #0
   29ea2:	f10d 0003 	add.w	r0, sp, #3
   29ea6:	f7ff ffa0 	bl	29dea <memset>

	err = internal_encrypt_le(irk, res, res);
   29eaa:	466a      	mov	r2, sp
   29eac:	4669      	mov	r1, sp
   29eae:	4620      	mov	r0, r4
   29eb0:	f7ff ffe9 	bl	29e86 <internal_encrypt_le>
	if (err) {
   29eb4:	4604      	mov	r4, r0
   29eb6:	b110      	cbz	r0, 29ebe <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   29eb8:	4620      	mov	r0, r4
   29eba:	b005      	add	sp, #20
   29ebc:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   29ebe:	2203      	movs	r2, #3
   29ec0:	4669      	mov	r1, sp
   29ec2:	4628      	mov	r0, r5
   29ec4:	f7ff ff62 	bl	29d8c <memcpy>
	return 0;
   29ec8:	e7f6      	b.n	29eb8 <ah+0x2a>

00029eca <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   29eca:	b510      	push	{r4, lr}
   29ecc:	b082      	sub	sp, #8
   29ece:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   29ed0:	aa01      	add	r2, sp, #4
   29ed2:	3103      	adds	r1, #3
   29ed4:	f7ff ffdb 	bl	29e8e <ah>
	if (err) {
   29ed8:	b110      	cbz	r0, 29ee0 <bt_rpa_irk_matches+0x16>
		return false;
   29eda:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   29edc:	b002      	add	sp, #8
   29ede:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
   29ee0:	2203      	movs	r2, #3
   29ee2:	a901      	add	r1, sp, #4
   29ee4:	4620      	mov	r0, r4
   29ee6:	f7ff ff2c 	bl	29d42 <memcmp>
   29eea:	fab0 f080 	clz	r0, r0
   29eee:	0940      	lsrs	r0, r0, #5
   29ef0:	e7f4      	b.n	29edc <bt_rpa_irk_matches+0x12>

00029ef2 <bt_settings_decode_key>:
{
   29ef2:	b570      	push	{r4, r5, r6, lr}
   29ef4:	4605      	mov	r5, r0
   29ef6:	460e      	mov	r6, r1
	if (settings_name_next(key, NULL) != 13) {
   29ef8:	2100      	movs	r1, #0
   29efa:	f7ff fa89 	bl	29410 <settings_name_next>
   29efe:	280d      	cmp	r0, #13
   29f00:	d11b      	bne.n	29f3a <bt_settings_decode_key+0x48>
	if (key[12] == '0') {
   29f02:	7b2b      	ldrb	r3, [r5, #12]
   29f04:	2b30      	cmp	r3, #48	; 0x30
   29f06:	d005      	beq.n	29f14 <bt_settings_decode_key+0x22>
	} else if (key[12] == '1') {
   29f08:	2b31      	cmp	r3, #49	; 0x31
   29f0a:	d119      	bne.n	29f40 <bt_settings_decode_key+0x4e>
		addr->type = BT_ADDR_LE_RANDOM;
   29f0c:	2301      	movs	r3, #1
   29f0e:	7033      	strb	r3, [r6, #0]
{
   29f10:	2400      	movs	r4, #0
   29f12:	e00e      	b.n	29f32 <bt_settings_decode_key+0x40>
		addr->type = BT_ADDR_LE_PUBLIC;
   29f14:	2300      	movs	r3, #0
   29f16:	7033      	strb	r3, [r6, #0]
   29f18:	e7fa      	b.n	29f10 <bt_settings_decode_key+0x1e>
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   29f1a:	f1c4 0205 	rsb	r2, r4, #5
   29f1e:	4432      	add	r2, r6
   29f20:	2301      	movs	r3, #1
   29f22:	441a      	add	r2, r3
   29f24:	2102      	movs	r1, #2
   29f26:	eb05 0044 	add.w	r0, r5, r4, lsl #1
   29f2a:	f7fe f9bc 	bl	282a6 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   29f2e:	3401      	adds	r4, #1
   29f30:	b2e4      	uxtb	r4, r4
   29f32:	2c05      	cmp	r4, #5
   29f34:	d9f1      	bls.n	29f1a <bt_settings_decode_key+0x28>
	return 0;
   29f36:	2000      	movs	r0, #0
}
   29f38:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   29f3a:	f06f 0015 	mvn.w	r0, #21
   29f3e:	e7fb      	b.n	29f38 <bt_settings_decode_key+0x46>
		return -EINVAL;
   29f40:	f06f 0015 	mvn.w	r0, #21
   29f44:	e7f8      	b.n	29f38 <bt_settings_decode_key+0x46>

00029f46 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   29f46:	b510      	push	{r4, lr}
   29f48:	b08a      	sub	sp, #40	; 0x28
   29f4a:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   29f4c:	a905      	add	r1, sp, #20
   29f4e:	f7ea f87f 	bl	14050 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   29f52:	4669      	mov	r1, sp
   29f54:	4620      	mov	r0, r4
   29f56:	f7ea f87b 	bl	14050 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   29f5a:	2210      	movs	r2, #16
   29f5c:	f10d 0101 	add.w	r1, sp, #1
   29f60:	f10d 0015 	add.w	r0, sp, #21
   29f64:	f7ff feed 	bl	29d42 <memcmp>
}
   29f68:	b00a      	add	sp, #40	; 0x28
   29f6a:	bd10      	pop	{r4, pc}

00029f6c <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   29f6c:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   29f6e:	7803      	ldrb	r3, [r0, #0]
   29f70:	780a      	ldrb	r2, [r1, #0]
   29f72:	4293      	cmp	r3, r2
   29f74:	d107      	bne.n	29f86 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   29f76:	2b01      	cmp	r3, #1
   29f78:	d00c      	beq.n	29f94 <bt_uuid_cmp+0x28>
   29f7a:	2b02      	cmp	r3, #2
   29f7c:	d00e      	beq.n	29f9c <bt_uuid_cmp+0x30>
   29f7e:	b12b      	cbz	r3, 29f8c <bt_uuid_cmp+0x20>
   29f80:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   29f84:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   29f86:	f7ff ffde 	bl	29f46 <uuid128_cmp>
   29f8a:	e7fb      	b.n	29f84 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   29f8c:	8840      	ldrh	r0, [r0, #2]
   29f8e:	884b      	ldrh	r3, [r1, #2]
   29f90:	1ac0      	subs	r0, r0, r3
   29f92:	e7f7      	b.n	29f84 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   29f94:	6840      	ldr	r0, [r0, #4]
   29f96:	684b      	ldr	r3, [r1, #4]
   29f98:	1ac0      	subs	r0, r0, r3
   29f9a:	e7f3      	b.n	29f84 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   29f9c:	2210      	movs	r2, #16
   29f9e:	3101      	adds	r1, #1
   29fa0:	3001      	adds	r0, #1
   29fa2:	f7ff fece 	bl	29d42 <memcmp>
   29fa6:	e7ed      	b.n	29f84 <bt_uuid_cmp+0x18>

00029fa8 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   29fa8:	b508      	push	{r3, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   29faa:	2a04      	cmp	r2, #4
   29fac:	d00e      	beq.n	29fcc <bt_uuid_create+0x24>
   29fae:	2a10      	cmp	r2, #16
   29fb0:	d01d      	beq.n	29fee <bt_uuid_create+0x46>
   29fb2:	2a02      	cmp	r2, #2
   29fb4:	d001      	beq.n	29fba <bt_uuid_create+0x12>
   29fb6:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   29fb8:	bd08      	pop	{r3, pc}
		uuid->type = BT_UUID_TYPE_16;
   29fba:	2300      	movs	r3, #0
   29fbc:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   29fbe:	784a      	ldrb	r2, [r1, #1]
   29fc0:	780b      	ldrb	r3, [r1, #0]
   29fc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   29fc6:	8043      	strh	r3, [r0, #2]
	return true;
   29fc8:	2001      	movs	r0, #1
		break;
   29fca:	e7f5      	b.n	29fb8 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   29fcc:	2301      	movs	r3, #1
   29fce:	7003      	strb	r3, [r0, #0]
   29fd0:	78ca      	ldrb	r2, [r1, #3]
   29fd2:	f891 c002 	ldrb.w	ip, [r1, #2]
   29fd6:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   29fda:	f891 e001 	ldrb.w	lr, [r1, #1]
   29fde:	780a      	ldrb	r2, [r1, #0]
   29fe0:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   29fe4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   29fe8:	6042      	str	r2, [r0, #4]
	return true;
   29fea:	4618      	mov	r0, r3
		break;
   29fec:	e7e4      	b.n	29fb8 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   29fee:	2302      	movs	r3, #2
   29ff0:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   29ff4:	2210      	movs	r2, #16
   29ff6:	f7ff fec9 	bl	29d8c <memcpy>
	return true;
   29ffa:	2001      	movs	r0, #1
		break;
   29ffc:	e7dc      	b.n	29fb8 <bt_uuid_create+0x10>

00029ffe <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   29ffe:	b510      	push	{r4, lr}
   2a000:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2a002:	2301      	movs	r3, #1
   2a004:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2a008:	2106      	movs	r1, #6
   2a00a:	f7f5 fdeb 	bl	1fbe4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2a00e:	b918      	cbnz	r0, 2a018 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2a010:	79a3      	ldrb	r3, [r4, #6]
   2a012:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2a016:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2a018:	bd10      	pop	{r4, pc}

0002a01a <sys_put_le64>:
	dst[0] = val;
   2a01a:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2a01c:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2a020:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   2a022:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   2a024:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   2a026:	0e00      	lsrs	r0, r0, #24
   2a028:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2a02a:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   2a02c:	f3c1 2307 	ubfx	r3, r1, #8, #8
   2a030:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   2a032:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   2a034:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2a036:	0e09      	lsrs	r1, r1, #24
   2a038:	71d1      	strb	r1, [r2, #7]
}
   2a03a:	4770      	bx	lr

0002a03c <sys_get_le64>:
{
   2a03c:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2a03e:	79c3      	ldrb	r3, [r0, #7]
   2a040:	7981      	ldrb	r1, [r0, #6]
   2a042:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2a046:	7942      	ldrb	r2, [r0, #5]
   2a048:	7903      	ldrb	r3, [r0, #4]
   2a04a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2a04e:	78c2      	ldrb	r2, [r0, #3]
   2a050:	f890 c002 	ldrb.w	ip, [r0, #2]
   2a054:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   2a058:	f890 e001 	ldrb.w	lr, [r0, #1]
   2a05c:	7802      	ldrb	r2, [r0, #0]
   2a05e:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
}
   2a062:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   2a066:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   2a06a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a06e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2a06e:	3805      	subs	r0, #5
   2a070:	2815      	cmp	r0, #21
   2a072:	d80e      	bhi.n	2a092 <bt_hci_evt_get_flags+0x24>
   2a074:	e8df f000 	tbb	[pc, r0]
   2a078:	0d0d0d0b 	.word	0x0d0d0d0b
   2a07c:	0d0d0d0d 	.word	0x0d0d0d0d
   2a080:	0d0f0f0d 	.word	0x0d0f0f0d
   2a084:	0d0f0d0d 	.word	0x0d0f0d0d
   2a088:	0d0d0d0d 	.word	0x0d0d0d0d
   2a08c:	0f0d      	.short	0x0f0d
   2a08e:	2003      	movs	r0, #3
   2a090:	4770      	bx	lr
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2a092:	2002      	movs	r0, #2
   2a094:	4770      	bx	lr
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   2a096:	2001      	movs	r0, #1
	}
}
   2a098:	4770      	bx	lr

0002a09a <skip_auto_phy_update_on_conn_establishment>:
}
   2a09a:	2000      	movs	r0, #0
   2a09c:	4770      	bx	lr

0002a09e <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2a09e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2a0a2:	b17b      	cbz	r3, 2a0c4 <update_sec_level+0x26>
   2a0a4:	7b5a      	ldrb	r2, [r3, #13]
   2a0a6:	f012 0f01 	tst.w	r2, #1
   2a0aa:	d00b      	beq.n	2a0c4 <update_sec_level+0x26>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2a0ac:	f012 0f10 	tst.w	r2, #16
   2a0b0:	d002      	beq.n	2a0b8 <update_sec_level+0x1a>
		    conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE) {
   2a0b2:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2a0b4:	2b10      	cmp	r3, #16
   2a0b6:	d002      	beq.n	2a0be <update_sec_level+0x20>
			conn->sec_level = BT_SECURITY_L3;
   2a0b8:	2303      	movs	r3, #3
   2a0ba:	7243      	strb	r3, [r0, #9]
   2a0bc:	e004      	b.n	2a0c8 <update_sec_level+0x2a>
			conn->sec_level = BT_SECURITY_L4;
   2a0be:	2304      	movs	r3, #4
   2a0c0:	7243      	strb	r3, [r0, #9]
   2a0c2:	e001      	b.n	2a0c8 <update_sec_level+0x2a>
		conn->sec_level = BT_SECURITY_L2;
   2a0c4:	2302      	movs	r3, #2
   2a0c6:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2a0c8:	7a82      	ldrb	r2, [r0, #10]
   2a0ca:	7a40      	ldrb	r0, [r0, #9]
}
   2a0cc:	4282      	cmp	r2, r0
   2a0ce:	bf8c      	ite	hi
   2a0d0:	2000      	movhi	r0, #0
   2a0d2:	2001      	movls	r0, #1
   2a0d4:	4770      	bx	lr

0002a0d6 <hci_vendor_event>:
}
   2a0d6:	4770      	bx	lr

0002a0d8 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2a0d8:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a0da:	f3bf 8f5b 	dmb	ish
   2a0de:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2a0e2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a0e6:	f001 011f 	and.w	r1, r1, #31
   2a0ea:	4108      	asrs	r0, r1
}
   2a0ec:	f000 0001 	and.w	r0, r0, #1
   2a0f0:	4770      	bx	lr

0002a0f2 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a0f2:	f001 021f 	and.w	r2, r1, #31
   2a0f6:	2301      	movs	r3, #1
   2a0f8:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2a0fa:	0949      	lsrs	r1, r1, #5
   2a0fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a100:	f3bf 8f5b 	dmb	ish
   2a104:	e850 2f00 	ldrex	r2, [r0]
   2a108:	ea42 0103 	orr.w	r1, r2, r3
   2a10c:	e840 1c00 	strex	ip, r1, [r0]
   2a110:	f1bc 0f00 	cmp.w	ip, #0
   2a114:	d1f6      	bne.n	2a104 <atomic_test_and_set_bit+0x12>
   2a116:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2a11a:	4213      	tst	r3, r2
}
   2a11c:	bf14      	ite	ne
   2a11e:	2001      	movne	r0, #1
   2a120:	2000      	moveq	r0, #0
   2a122:	4770      	bx	lr

0002a124 <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a124:	f001 0c1f 	and.w	ip, r1, #31
   2a128:	2301      	movs	r3, #1
   2a12a:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   2a12e:	b172      	cbz	r2, 2a14e <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2a130:	0949      	lsrs	r1, r1, #5
   2a132:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a136:	f3bf 8f5b 	dmb	ish
   2a13a:	e850 2f00 	ldrex	r2, [r0]
   2a13e:	431a      	orrs	r2, r3
   2a140:	e840 2100 	strex	r1, r2, [r0]
   2a144:	2900      	cmp	r1, #0
   2a146:	d1f8      	bne.n	2a13a <atomic_set_bit_to+0x16>
   2a148:	f3bf 8f5b 	dmb	ish
   2a14c:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a14e:	0949      	lsrs	r1, r1, #5
   2a150:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a154:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a156:	f3bf 8f5b 	dmb	ish
   2a15a:	e850 2f00 	ldrex	r2, [r0]
   2a15e:	401a      	ands	r2, r3
   2a160:	e840 2100 	strex	r1, r2, [r0]
   2a164:	2900      	cmp	r1, #0
   2a166:	d1f8      	bne.n	2a15a <atomic_set_bit_to+0x36>
   2a168:	f3bf 8f5b 	dmb	ish
	}
}
   2a16c:	4770      	bx	lr

0002a16e <hci_disconn_complete_prio>:
{
   2a16e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2a170:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2a172:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2a176:	781b      	ldrb	r3, [r3, #0]
   2a178:	b103      	cbz	r3, 2a17c <hci_disconn_complete_prio+0xe>
}
   2a17a:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   2a17c:	4620      	mov	r0, r4
   2a17e:	f7ec ff81 	bl	17084 <bt_conn_lookup_handle>
	if (!conn) {
   2a182:	4605      	mov	r5, r0
   2a184:	b130      	cbz	r0, 2a194 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2a186:	2101      	movs	r1, #1
   2a188:	f7ec ff86 	bl	17098 <bt_conn_set_state>
	bt_conn_unref(conn);
   2a18c:	4628      	mov	r0, r5
   2a18e:	f7ec ff47 	bl	17020 <bt_conn_unref>
   2a192:	e7f2      	b.n	2a17a <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   2a194:	4620      	mov	r0, r4
   2a196:	f7ea f811 	bl	141bc <conn_handle_disconnected>
		return;
   2a19a:	e7ee      	b.n	2a17a <hci_disconn_complete_prio+0xc>

0002a19c <hci_le_read_remote_features>:
{
   2a19c:	b538      	push	{r3, r4, r5, lr}
   2a19e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2a1a0:	2102      	movs	r1, #2
   2a1a2:	f242 0016 	movw	r0, #8214	; 0x2016
   2a1a6:	f7ea fc27 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2a1aa:	b168      	cbz	r0, 2a1c8 <hci_le_read_remote_features+0x2c>
   2a1ac:	4605      	mov	r5, r0
   2a1ae:	2102      	movs	r1, #2
   2a1b0:	3008      	adds	r0, #8
   2a1b2:	f7f2 fdfd 	bl	1cdb0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a1b6:	8823      	ldrh	r3, [r4, #0]
   2a1b8:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   2a1ba:	2200      	movs	r2, #0
   2a1bc:	4629      	mov	r1, r5
   2a1be:	f242 0016 	movw	r0, #8214	; 0x2016
   2a1c2:	f7ea fc69 	bl	14a98 <bt_hci_cmd_send_sync>
}
   2a1c6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2a1c8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a1cc:	e7fb      	b.n	2a1c6 <hci_le_read_remote_features+0x2a>

0002a1ce <bt_hci_disconnect>:
{
   2a1ce:	b570      	push	{r4, r5, r6, lr}
   2a1d0:	4605      	mov	r5, r0
   2a1d2:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2a1d4:	2103      	movs	r1, #3
   2a1d6:	f240 4006 	movw	r0, #1030	; 0x406
   2a1da:	f7ea fc0d 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2a1de:	b168      	cbz	r0, 2a1fc <bt_hci_disconnect+0x2e>
   2a1e0:	4606      	mov	r6, r0
   2a1e2:	2103      	movs	r1, #3
   2a1e4:	3008      	adds	r0, #8
   2a1e6:	f7f2 fde3 	bl	1cdb0 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2a1ea:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   2a1ec:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2a1ee:	2200      	movs	r2, #0
   2a1f0:	4631      	mov	r1, r6
   2a1f2:	f240 4006 	movw	r0, #1030	; 0x406
   2a1f6:	f7ea fc4f 	bl	14a98 <bt_hci_cmd_send_sync>
}
   2a1fa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2a1fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a200:	e7fb      	b.n	2a1fa <bt_hci_disconnect+0x2c>

0002a202 <bt_le_set_data_len>:
{
   2a202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a204:	4606      	mov	r6, r0
   2a206:	460f      	mov	r7, r1
   2a208:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2a20a:	2106      	movs	r1, #6
   2a20c:	f242 0022 	movw	r0, #8226	; 0x2022
   2a210:	f7ea fbf2 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2a214:	b178      	cbz	r0, 2a236 <bt_le_set_data_len+0x34>
   2a216:	4605      	mov	r5, r0
   2a218:	2106      	movs	r1, #6
   2a21a:	3008      	adds	r0, #8
   2a21c:	f7f2 fdc8 	bl	1cdb0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a220:	8833      	ldrh	r3, [r6, #0]
   2a222:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2a224:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2a226:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2a228:	2200      	movs	r2, #0
   2a22a:	4629      	mov	r1, r5
   2a22c:	f242 0022 	movw	r0, #8226	; 0x2022
   2a230:	f7ea fc32 	bl	14a98 <bt_hci_cmd_send_sync>
}
   2a234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2a236:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a23a:	e7fb      	b.n	2a234 <bt_le_set_data_len+0x32>

0002a23c <bt_le_set_phy>:
{
   2a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a240:	4607      	mov	r7, r0
   2a242:	460e      	mov	r6, r1
   2a244:	4615      	mov	r5, r2
   2a246:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2a248:	2107      	movs	r1, #7
   2a24a:	f242 0032 	movw	r0, #8242	; 0x2032
   2a24e:	f7ea fbd3 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2a252:	b1a8      	cbz	r0, 2a280 <bt_le_set_phy+0x44>
   2a254:	4680      	mov	r8, r0
   2a256:	2107      	movs	r1, #7
   2a258:	3008      	adds	r0, #8
   2a25a:	f7f2 fda9 	bl	1cdb0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a25e:	883b      	ldrh	r3, [r7, #0]
   2a260:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2a262:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2a264:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2a266:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   2a268:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2a26c:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2a270:	2200      	movs	r2, #0
   2a272:	4641      	mov	r1, r8
   2a274:	f242 0032 	movw	r0, #8242	; 0x2032
   2a278:	f7ea fc0e 	bl	14a98 <bt_hci_cmd_send_sync>
}
   2a27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   2a280:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a284:	e7fa      	b.n	2a27c <bt_le_set_phy+0x40>

0002a286 <enh_conn_complete>:
{
   2a286:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   2a288:	f7ea ff02 	bl	15090 <bt_hci_le_enh_conn_complete>
}
   2a28c:	bd08      	pop	{r3, pc}

0002a28e <le_enh_conn_complete>:
{
   2a28e:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   2a290:	6880      	ldr	r0, [r0, #8]
   2a292:	f7ff fff8 	bl	2a286 <enh_conn_complete>
}
   2a296:	bd08      	pop	{r3, pc}

0002a298 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2a298:	8802      	ldrh	r2, [r0, #0]
   2a29a:	8843      	ldrh	r3, [r0, #2]
   2a29c:	429a      	cmp	r2, r3
   2a29e:	d817      	bhi.n	2a2d0 <bt_le_conn_params_valid+0x38>
   2a2a0:	2a05      	cmp	r2, #5
   2a2a2:	d917      	bls.n	2a2d4 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2a2a4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2a2a8:	d816      	bhi.n	2a2d8 <bt_le_conn_params_valid+0x40>
	if (param->latency > 499) {
   2a2aa:	8881      	ldrh	r1, [r0, #4]
   2a2ac:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   2a2b0:	d214      	bcs.n	2a2dc <bt_le_conn_params_valid+0x44>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2a2b2:	88c0      	ldrh	r0, [r0, #6]
   2a2b4:	f1a0 020a 	sub.w	r2, r0, #10
   2a2b8:	b292      	uxth	r2, r2
   2a2ba:	f640 4c76 	movw	ip, #3190	; 0xc76
   2a2be:	4562      	cmp	r2, ip
   2a2c0:	d80e      	bhi.n	2a2e0 <bt_le_conn_params_valid+0x48>
	     ((1U + param->latency) * param->interval_max))) {
   2a2c2:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2a2c6:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2a2ca:	d20b      	bcs.n	2a2e4 <bt_le_conn_params_valid+0x4c>
	return true;
   2a2cc:	2001      	movs	r0, #1
   2a2ce:	4770      	bx	lr
		return false;
   2a2d0:	2000      	movs	r0, #0
   2a2d2:	4770      	bx	lr
   2a2d4:	2000      	movs	r0, #0
   2a2d6:	4770      	bx	lr
   2a2d8:	2000      	movs	r0, #0
   2a2da:	4770      	bx	lr
		return false;
   2a2dc:	2000      	movs	r0, #0
   2a2de:	4770      	bx	lr
		return false;
   2a2e0:	2000      	movs	r0, #0
   2a2e2:	4770      	bx	lr
   2a2e4:	2000      	movs	r0, #0
}
   2a2e6:	4770      	bx	lr

0002a2e8 <bt_security_err_get>:
	switch (hci_err) {
   2a2e8:	2829      	cmp	r0, #41	; 0x29
   2a2ea:	d81e      	bhi.n	2a32a <bt_security_err_get+0x42>
   2a2ec:	e8df f000 	tbb	[pc, r0]
   2a2f0:	1d1d1d20 	.word	0x1d1d1d20
   2a2f4:	1d151f1d 	.word	0x1d151f1d
   2a2f8:	1d1d1d1d 	.word	0x1d1d1d1d
   2a2fc:	1d1d1d1d 	.word	0x1d1d1d1d
   2a300:	1d1b1d1d 	.word	0x1d1b1d1d
   2a304:	1d1d1d1d 	.word	0x1d1d1d1d
   2a308:	1d1d1d19 	.word	0x1d1d1d19
   2a30c:	1d1d1d1d 	.word	0x1d1d1d1d
   2a310:	1d1d1d1d 	.word	0x1d1d1d1d
   2a314:	1d1d1d1d 	.word	0x1d1d1d1d
   2a318:	171d      	.short	0x171d
		return BT_SECURITY_ERR_PIN_OR_KEY_MISSING;
   2a31a:	2002      	movs	r0, #2
   2a31c:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   2a31e:	2005      	movs	r0, #5
   2a320:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   2a322:	2006      	movs	r0, #6
   2a324:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   2a326:	2007      	movs	r0, #7
   2a328:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   2a32a:	2009      	movs	r0, #9
   2a32c:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_FAIL;
   2a32e:	2001      	movs	r0, #1
}
   2a330:	4770      	bx	lr

0002a332 <le_conn_param_req_reply>:
{
   2a332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a334:	4606      	mov	r6, r0
   2a336:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2a338:	210e      	movs	r1, #14
   2a33a:	f242 0020 	movw	r0, #8224	; 0x2020
   2a33e:	f7ea fb5b 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2a342:	b1c0      	cbz	r0, 2a376 <le_conn_param_req_reply+0x44>
   2a344:	4607      	mov	r7, r0
   2a346:	210e      	movs	r1, #14
   2a348:	3008      	adds	r0, #8
   2a34a:	f7f2 fd31 	bl	1cdb0 <net_buf_simple_add>
   2a34e:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   2a350:	220e      	movs	r2, #14
   2a352:	2100      	movs	r1, #0
   2a354:	f7ff fd49 	bl	29dea <memset>
	cp->handle = sys_cpu_to_le16(handle);
   2a358:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2a35a:	882b      	ldrh	r3, [r5, #0]
   2a35c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2a35e:	886b      	ldrh	r3, [r5, #2]
   2a360:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   2a362:	88ab      	ldrh	r3, [r5, #4]
   2a364:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2a366:	88eb      	ldrh	r3, [r5, #6]
   2a368:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   2a36a:	4639      	mov	r1, r7
   2a36c:	f242 0020 	movw	r0, #8224	; 0x2020
   2a370:	f7eb f81e 	bl	153b0 <bt_hci_cmd_send>
}
   2a374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2a376:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a37a:	e7fb      	b.n	2a374 <le_conn_param_req_reply+0x42>

0002a37c <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2a37c:	2000      	movs	r0, #0
   2a37e:	4770      	bx	lr

0002a380 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2a380:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2a382:	f7f2 f837 	bl	1c3f4 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2a386:	b118      	cbz	r0, 2a390 <bt_addr_le_is_bonded+0x10>
   2a388:	89c3      	ldrh	r3, [r0, #14]
   2a38a:	b91b      	cbnz	r3, 2a394 <bt_addr_le_is_bonded+0x14>
   2a38c:	2000      	movs	r0, #0
	} else {
		return false;
	}
}
   2a38e:	bd08      	pop	{r3, pc}
		return keys && keys->keys;
   2a390:	2000      	movs	r0, #0
   2a392:	e7fc      	b.n	2a38e <bt_addr_le_is_bonded+0xe>
   2a394:	2001      	movs	r0, #1
   2a396:	e7fa      	b.n	2a38e <bt_addr_le_is_bonded+0xe>

0002a398 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2a398:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a39a:	f3bf 8f5b 	dmb	ish
   2a39e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2a3a2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a3a6:	f001 011f 	and.w	r1, r1, #31
   2a3aa:	4108      	asrs	r0, r1
}
   2a3ac:	f000 0001 	and.w	r0, r0, #1
   2a3b0:	4770      	bx	lr

0002a3b2 <atomic_test_and_clear_bit>:
{
   2a3b2:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a3b4:	f001 021f 	and.w	r2, r1, #31
   2a3b8:	2301      	movs	r3, #1
   2a3ba:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a3bc:	0949      	lsrs	r1, r1, #5
   2a3be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a3c2:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a3c4:	f3bf 8f5b 	dmb	ish
   2a3c8:	e850 2f00 	ldrex	r2, [r0]
   2a3cc:	ea02 0c01 	and.w	ip, r2, r1
   2a3d0:	e840 ce00 	strex	lr, ip, [r0]
   2a3d4:	f1be 0f00 	cmp.w	lr, #0
   2a3d8:	d1f6      	bne.n	2a3c8 <atomic_test_and_clear_bit+0x16>
   2a3da:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2a3de:	4213      	tst	r3, r2
}
   2a3e0:	bf14      	ite	ne
   2a3e2:	2001      	movne	r0, #1
   2a3e4:	2000      	moveq	r0, #0
   2a3e6:	f85d fb04 	ldr.w	pc, [sp], #4

0002a3ea <adv_unpause_enabled>:
{
   2a3ea:	b510      	push	{r4, lr}
   2a3ec:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2a3ee:	210f      	movs	r1, #15
   2a3f0:	3010      	adds	r0, #16
   2a3f2:	f7ff ffde 	bl	2a3b2 <atomic_test_and_clear_bit>
   2a3f6:	b900      	cbnz	r0, 2a3fa <adv_unpause_enabled+0x10>
}
   2a3f8:	bd10      	pop	{r4, pc}
		bt_le_adv_set_enable(adv, true);
   2a3fa:	2101      	movs	r1, #1
   2a3fc:	4620      	mov	r0, r4
   2a3fe:	f000 fa69 	bl	2a8d4 <bt_le_adv_set_enable>
}
   2a402:	e7f9      	b.n	2a3f8 <adv_unpause_enabled+0xe>

0002a404 <adv_pause_enabled>:
{
   2a404:	b538      	push	{r3, r4, r5, lr}
   2a406:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2a408:	f100 0510 	add.w	r5, r0, #16
   2a40c:	2107      	movs	r1, #7
   2a40e:	4628      	mov	r0, r5
   2a410:	f7ff ffc2 	bl	2a398 <atomic_test_bit>
   2a414:	b178      	cbz	r0, 2a436 <adv_pause_enabled+0x32>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a416:	f3bf 8f5b 	dmb	ish
   2a41a:	e855 3f00 	ldrex	r3, [r5]
   2a41e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   2a422:	e845 3200 	strex	r2, r3, [r5]
   2a426:	2a00      	cmp	r2, #0
   2a428:	d1f7      	bne.n	2a41a <adv_pause_enabled+0x16>
   2a42a:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   2a42e:	2100      	movs	r1, #0
   2a430:	4620      	mov	r0, r4
   2a432:	f000 fa4f 	bl	2a8d4 <bt_le_adv_set_enable>
}
   2a436:	bd38      	pop	{r3, r4, r5, pc}

0002a438 <hci_id_add>:
	if (id >= CONFIG_BT_ID_MAX) {
   2a438:	bb20      	cbnz	r0, 2a484 <hci_id_add+0x4c>
{
   2a43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a43c:	460e      	mov	r6, r1
   2a43e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2a440:	2127      	movs	r1, #39	; 0x27
   2a442:	f242 0027 	movw	r0, #8231	; 0x2027
   2a446:	f7ea fad7 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2a44a:	4607      	mov	r7, r0
   2a44c:	b1e8      	cbz	r0, 2a48a <hci_id_add+0x52>
   2a44e:	2127      	movs	r1, #39	; 0x27
   2a450:	3008      	adds	r0, #8
   2a452:	f7f2 fcad 	bl	1cdb0 <net_buf_simple_add>
   2a456:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   2a458:	2207      	movs	r2, #7
   2a45a:	4631      	mov	r1, r6
   2a45c:	f7ff fc96 	bl	29d8c <memcpy>
	memcpy(cp->peer_irk, peer_irk, 16);
   2a460:	2210      	movs	r2, #16
   2a462:	4629      	mov	r1, r5
   2a464:	1de0      	adds	r0, r4, #7
   2a466:	f7ff fc91 	bl	29d8c <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   2a46a:	2210      	movs	r2, #16
   2a46c:	2100      	movs	r1, #0
   2a46e:	f104 0017 	add.w	r0, r4, #23
   2a472:	f7ff fcba 	bl	29dea <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2a476:	2200      	movs	r2, #0
   2a478:	4639      	mov	r1, r7
   2a47a:	f242 0027 	movw	r0, #8231	; 0x2027
   2a47e:	f7ea fb0b 	bl	14a98 <bt_hci_cmd_send_sync>
}
   2a482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2a484:	f06f 0015 	mvn.w	r0, #21
}
   2a488:	4770      	bx	lr
		return -ENOBUFS;
   2a48a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a48e:	e7f8      	b.n	2a482 <hci_id_add+0x4a>

0002a490 <keys_add_id>:
{
   2a490:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   2a492:	7a03      	ldrb	r3, [r0, #8]
   2a494:	f013 0f04 	tst.w	r3, #4
   2a498:	d100      	bne.n	2a49c <keys_add_id+0xc>
}
   2a49a:	bd08      	pop	{r3, pc}
   2a49c:	4601      	mov	r1, r0
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2a49e:	4602      	mov	r2, r0
   2a4a0:	f812 0b2a 	ldrb.w	r0, [r2], #42
   2a4a4:	3101      	adds	r1, #1
   2a4a6:	f7ff ffc7 	bl	2a438 <hci_id_add>
}
   2a4aa:	e7f6      	b.n	2a49a <keys_add_id+0xa>

0002a4ac <hci_id_del>:
{
   2a4ac:	b538      	push	{r3, r4, r5, lr}
   2a4ae:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2a4b0:	2107      	movs	r1, #7
   2a4b2:	f242 0028 	movw	r0, #8232	; 0x2028
   2a4b6:	f7ea fa9f 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2a4ba:	b178      	cbz	r0, 2a4dc <hci_id_del+0x30>
   2a4bc:	4605      	mov	r5, r0
   2a4be:	2107      	movs	r1, #7
   2a4c0:	3008      	adds	r0, #8
   2a4c2:	f7f2 fc75 	bl	1cdb0 <net_buf_simple_add>
   2a4c6:	2207      	movs	r2, #7
   2a4c8:	4621      	mov	r1, r4
   2a4ca:	f7ff fc5f 	bl	29d8c <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2a4ce:	2200      	movs	r2, #0
   2a4d0:	4629      	mov	r1, r5
   2a4d2:	f242 0028 	movw	r0, #8232	; 0x2028
   2a4d6:	f7ea fadf 	bl	14a98 <bt_hci_cmd_send_sync>
}
   2a4da:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2a4dc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a4e0:	e7fb      	b.n	2a4da <hci_id_del+0x2e>

0002a4e2 <addr_res_enable>:
{
   2a4e2:	b538      	push	{r3, r4, r5, lr}
   2a4e4:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2a4e6:	2101      	movs	r1, #1
   2a4e8:	f242 002d 	movw	r0, #8237	; 0x202d
   2a4ec:	f7ea fa84 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2a4f0:	b158      	cbz	r0, 2a50a <addr_res_enable+0x28>
   2a4f2:	4605      	mov	r5, r0
	return net_buf_simple_add_u8(&buf->b, val);
   2a4f4:	4621      	mov	r1, r4
   2a4f6:	3008      	adds	r0, #8
   2a4f8:	f002 ff72 	bl	2d3e0 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2a4fc:	2200      	movs	r2, #0
   2a4fe:	4629      	mov	r1, r5
   2a500:	f242 002d 	movw	r0, #8237	; 0x202d
   2a504:	f7ea fac8 	bl	14a98 <bt_hci_cmd_send_sync>
}
   2a508:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2a50a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a50e:	e7fb      	b.n	2a508 <addr_res_enable+0x26>

0002a510 <bt_lookup_id_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2a510:	b938      	cbnz	r0, 2a522 <bt_lookup_id_addr+0x12>
{
   2a512:	b510      	push	{r4, lr}
   2a514:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2a516:	b131      	cbz	r1, 2a526 <bt_lookup_id_addr+0x16>
		keys = bt_keys_find_irk(id, addr);
   2a518:	f7f1 fef8 	bl	1c30c <bt_keys_find_irk>
		if (keys) {
   2a51c:	b128      	cbz	r0, 2a52a <bt_lookup_id_addr+0x1a>
			return &keys->addr;
   2a51e:	3001      	adds	r0, #1
}
   2a520:	bd10      	pop	{r4, pc}
		return NULL;
   2a522:	2000      	movs	r0, #0
}
   2a524:	4770      	bx	lr
		return NULL;
   2a526:	4608      	mov	r0, r1
   2a528:	e7fa      	b.n	2a520 <bt_lookup_id_addr+0x10>
	return addr;
   2a52a:	4620      	mov	r0, r4
   2a52c:	e7f8      	b.n	2a520 <bt_lookup_id_addr+0x10>

0002a52e <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2a52e:	b128      	cbz	r0, 2a53c <bt_id_set_adv_random_addr+0xe>
   2a530:	b139      	cbz	r1, 2a542 <bt_id_set_adv_random_addr+0x14>
{
   2a532:	b508      	push	{r3, lr}
		return set_random_address(addr);
   2a534:	4608      	mov	r0, r1
   2a536:	f7eb fa71 	bl	15a1c <set_random_address>
}
   2a53a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2a53c:	f06f 0015 	mvn.w	r0, #21
   2a540:	4770      	bx	lr
   2a542:	f06f 0015 	mvn.w	r0, #21
}
   2a546:	4770      	bx	lr

0002a548 <bt_id_set_adv_private_addr>:
	CHECKIF(adv == NULL) {
   2a548:	b1a0      	cbz	r0, 2a574 <bt_id_set_adv_private_addr+0x2c>
{
   2a54a:	b510      	push	{r4, lr}
   2a54c:	b082      	sub	sp, #8
   2a54e:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2a550:	2106      	movs	r1, #6
   2a552:	4668      	mov	r0, sp
   2a554:	f7f5 fb46 	bl	1fbe4 <bt_rand>
	if (err) {
   2a558:	b108      	cbz	r0, 2a55e <bt_id_set_adv_private_addr+0x16>
}
   2a55a:	b002      	add	sp, #8
   2a55c:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   2a55e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2a562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2a566:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2a56a:	4669      	mov	r1, sp
   2a56c:	4620      	mov	r0, r4
   2a56e:	f7ff ffde 	bl	2a52e <bt_id_set_adv_random_addr>
	if (err) {
   2a572:	e7f2      	b.n	2a55a <bt_id_set_adv_private_addr+0x12>
		return -EINVAL;
   2a574:	f06f 0015 	mvn.w	r0, #21
}
   2a578:	4770      	bx	lr

0002a57a <bt_id_adv_random_addr_check>:
	CHECKIF(param == NULL) {
   2a57a:	b100      	cbz	r0, 2a57e <bt_id_adv_random_addr_check+0x4>
		return true;
   2a57c:	2001      	movs	r0, #1
}
   2a57e:	4770      	bx	lr

0002a580 <pending_id_update>:
{
   2a580:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2a582:	7a03      	ldrb	r3, [r0, #8]
   2a584:	f013 0f01 	tst.w	r3, #1
   2a588:	d103      	bne.n	2a592 <pending_id_update+0x12>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2a58a:	f013 0f02 	tst.w	r3, #2
   2a58e:	d106      	bne.n	2a59e <pending_id_update+0x1e>
}
   2a590:	bd08      	pop	{r3, pc}
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2a592:	f023 0301 	bic.w	r3, r3, #1
   2a596:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2a598:	f7eb fb9a 	bl	15cd0 <bt_id_add>
		return;
   2a59c:	e7f8      	b.n	2a590 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2a59e:	f023 0302 	bic.w	r3, r3, #2
   2a5a2:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2a5a4:	f7eb fc2c 	bl	15e00 <bt_id_del>
		return;
   2a5a8:	e7f2      	b.n	2a590 <pending_id_update+0x10>

0002a5aa <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2a5aa:	2000      	movs	r0, #0
   2a5ac:	4770      	bx	lr

0002a5ae <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   2a5ae:	2300      	movs	r3, #0
   2a5b0:	428b      	cmp	r3, r1
   2a5b2:	d219      	bcs.n	2a5e8 <ad_is_limited+0x3a>
{
   2a5b4:	b500      	push	{lr}
   2a5b6:	e002      	b.n	2a5be <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   2a5b8:	3301      	adds	r3, #1
   2a5ba:	428b      	cmp	r3, r1
   2a5bc:	d211      	bcs.n	2a5e2 <ad_is_limited+0x34>
		if (ad[i].type == BT_DATA_FLAGS &&
   2a5be:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
   2a5c2:	f830 c033 	ldrh.w	ip, [r0, r3, lsl #3]
   2a5c6:	f240 1201 	movw	r2, #257	; 0x101
   2a5ca:	4594      	cmp	ip, r2
   2a5cc:	d1f4      	bne.n	2a5b8 <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   2a5ce:	f8de 2004 	ldr.w	r2, [lr, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2a5d2:	2a00      	cmp	r2, #0
   2a5d4:	d0f0      	beq.n	2a5b8 <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2a5d6:	7812      	ldrb	r2, [r2, #0]
   2a5d8:	f012 0f01 	tst.w	r2, #1
   2a5dc:	d0ec      	beq.n	2a5b8 <ad_is_limited+0xa>
				return true;
   2a5de:	2001      	movs	r0, #1
   2a5e0:	e000      	b.n	2a5e4 <ad_is_limited+0x36>
	return false;
   2a5e2:	2000      	movs	r0, #0
}
   2a5e4:	f85d fb04 	ldr.w	pc, [sp], #4
	return false;
   2a5e8:	2000      	movs	r0, #0
}
   2a5ea:	4770      	bx	lr

0002a5ec <get_filter_policy>:
}
   2a5ec:	2000      	movs	r0, #0
   2a5ee:	4770      	bx	lr

0002a5f0 <get_adv_channel_map>:
{
   2a5f0:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   2a5f2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2a5f6:	d10b      	bne.n	2a610 <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   2a5f8:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2a5fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2a5fe:	d001      	beq.n	2a604 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   2a600:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2a604:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   2a608:	d001      	beq.n	2a60e <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   2a60a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   2a60e:	4770      	bx	lr
		channel_map &= ~0x01;
   2a610:	2006      	movs	r0, #6
   2a612:	e7f2      	b.n	2a5fa <get_adv_channel_map+0xa>

0002a614 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2a614:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a616:	f3bf 8f5b 	dmb	ish
   2a61a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2a61e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a622:	f001 011f 	and.w	r1, r1, #31
   2a626:	4108      	asrs	r0, r1
}
   2a628:	f000 0001 	and.w	r0, r0, #1
   2a62c:	4770      	bx	lr

0002a62e <hci_set_ad>:
{
   2a62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a632:	b082      	sub	sp, #8
   2a634:	4607      	mov	r7, r0
   2a636:	460d      	mov	r5, r1
   2a638:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2a63a:	2120      	movs	r1, #32
   2a63c:	f7ea f9dc 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2a640:	b300      	cbz	r0, 2a684 <hci_set_ad+0x56>
   2a642:	4680      	mov	r8, r0
	return net_buf_simple_add(&buf->b, len);
   2a644:	2120      	movs	r1, #32
   2a646:	3008      	adds	r0, #8
   2a648:	f7f2 fbb2 	bl	1cdb0 <net_buf_simple_add>
   2a64c:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   2a64e:	2220      	movs	r2, #32
   2a650:	2100      	movs	r1, #0
   2a652:	f7ff fbca 	bl	29dea <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   2a656:	9400      	str	r4, [sp, #0]
   2a658:	4633      	mov	r3, r6
   2a65a:	462a      	mov	r2, r5
   2a65c:	211f      	movs	r1, #31
   2a65e:	1c60      	adds	r0, r4, #1
   2a660:	f7eb fdea 	bl	16238 <set_data_add_complete>
	if (err) {
   2a664:	4604      	mov	r4, r0
   2a666:	b948      	cbnz	r0, 2a67c <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2a668:	2200      	movs	r2, #0
   2a66a:	4641      	mov	r1, r8
   2a66c:	4638      	mov	r0, r7
   2a66e:	f7ea fa13 	bl	14a98 <bt_hci_cmd_send_sync>
   2a672:	4604      	mov	r4, r0
}
   2a674:	4620      	mov	r0, r4
   2a676:	b002      	add	sp, #8
   2a678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2a67c:	4640      	mov	r0, r8
   2a67e:	f7f2 fa95 	bl	1cbac <net_buf_unref>
		return err;
   2a682:	e7f7      	b.n	2a674 <hci_set_ad+0x46>
		return -ENOBUFS;
   2a684:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2a688:	e7f4      	b.n	2a674 <hci_set_ad+0x46>

0002a68a <set_ad>:
{
   2a68a:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2a68c:	f242 0008 	movw	r0, #8200	; 0x2008
   2a690:	f7ff ffcd 	bl	2a62e <hci_set_ad>
}
   2a694:	bd08      	pop	{r3, pc}

0002a696 <set_sd>:
{
   2a696:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2a698:	f242 0009 	movw	r0, #8201	; 0x2009
   2a69c:	f7ff ffc7 	bl	2a62e <hci_set_ad>
}
   2a6a0:	bd08      	pop	{r3, pc}

0002a6a2 <le_adv_update>:
{
   2a6a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a6a6:	b089      	sub	sp, #36	; 0x24
   2a6a8:	4604      	mov	r4, r0
   2a6aa:	460e      	mov	r6, r1
   2a6ac:	4617      	mov	r7, r2
   2a6ae:	461d      	mov	r5, r3
   2a6b0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   2a6b4:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   2a6b8:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   2a6bc:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   2a6c0:	2300      	movs	r3, #0
   2a6c2:	9304      	str	r3, [sp, #16]
   2a6c4:	9305      	str	r3, [sp, #20]
   2a6c6:	9306      	str	r3, [sp, #24]
   2a6c8:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   2a6ca:	f1b9 0f00 	cmp.w	r9, #0
   2a6ce:	d133      	bne.n	2a738 <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   2a6d0:	f1ba 0f00 	cmp.w	sl, #0
   2a6d4:	d002      	beq.n	2a6dc <le_adv_update+0x3a>
   2a6d6:	f1bb 0f00 	cmp.w	fp, #0
   2a6da:	d10e      	bne.n	2a6fa <le_adv_update+0x58>
		d[0].data = ad;
   2a6dc:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   2a6de:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   2a6e0:	f1b9 0f01 	cmp.w	r9, #1
   2a6e4:	d056      	beq.n	2a794 <le_adv_update+0xf2>
		d_len = 1;
   2a6e6:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   2a6e8:	a904      	add	r1, sp, #16
   2a6ea:	4620      	mov	r0, r4
   2a6ec:	f7ff ffcd 	bl	2a68a <set_ad>
		if (err) {
   2a6f0:	4603      	mov	r3, r0
   2a6f2:	b9e8      	cbnz	r0, 2a730 <le_adv_update+0x8e>
	if (scannable) {
   2a6f4:	f1bb 0f00 	cmp.w	fp, #0
   2a6f8:	d00c      	beq.n	2a714 <le_adv_update+0x72>
		d[0].data = sd;
   2a6fa:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   2a6fc:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   2a700:	f1b9 0f02 	cmp.w	r9, #2
   2a704:	d04c      	beq.n	2a7a0 <le_adv_update+0xfe>
		d_len = 1;
   2a706:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   2a708:	a904      	add	r1, sp, #16
   2a70a:	4620      	mov	r0, r4
   2a70c:	f7ff ffc3 	bl	2a696 <set_sd>
		if (err) {
   2a710:	4603      	mov	r3, r0
   2a712:	b968      	cbnz	r0, 2a730 <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   2a714:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a716:	f3bf 8f5b 	dmb	ish
   2a71a:	e854 3f00 	ldrex	r3, [r4]
   2a71e:	f043 0304 	orr.w	r3, r3, #4
   2a722:	e844 3200 	strex	r2, r3, [r4]
   2a726:	2a00      	cmp	r2, #0
   2a728:	d1f7      	bne.n	2a71a <le_adv_update+0x78>
   2a72a:	f3bf 8f5b 	dmb	ish
	return 0;
   2a72e:	2300      	movs	r3, #0
}
   2a730:	4618      	mov	r0, r3
   2a732:	b009      	add	sp, #36	; 0x24
   2a734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2a738:	f7eb f950 	bl	159dc <bt_get_name>
   2a73c:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   2a73e:	b166      	cbz	r6, 2a75a <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   2a740:	2200      	movs	r2, #0
   2a742:	4297      	cmp	r7, r2
   2a744:	d907      	bls.n	2a756 <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2a746:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   2a74a:	3b08      	subs	r3, #8
   2a74c:	b2db      	uxtb	r3, r3
   2a74e:	2b01      	cmp	r3, #1
   2a750:	d90f      	bls.n	2a772 <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   2a752:	3201      	adds	r2, #1
   2a754:	e7f5      	b.n	2a742 <le_adv_update+0xa0>
	return false;
   2a756:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2a758:	bb43      	cbnz	r3, 2a7ac <le_adv_update+0x10a>
   2a75a:	b175      	cbz	r5, 2a77a <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   2a75c:	2200      	movs	r2, #0
   2a75e:	4590      	cmp	r8, r2
   2a760:	d909      	bls.n	2a776 <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2a762:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   2a766:	3b08      	subs	r3, #8
   2a768:	b2db      	uxtb	r3, r3
   2a76a:	2b01      	cmp	r3, #1
   2a76c:	d910      	bls.n	2a790 <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   2a76e:	3201      	adds	r2, #1
   2a770:	e7f5      	b.n	2a75e <le_adv_update+0xbc>
			return true;
   2a772:	2301      	movs	r3, #1
   2a774:	e7f0      	b.n	2a758 <le_adv_update+0xb6>
	return false;
   2a776:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   2a778:	b9db      	cbnz	r3, 2a7b2 <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   2a77a:	9801      	ldr	r0, [sp, #4]
   2a77c:	f7ff fab0 	bl	29ce0 <strlen>
   2a780:	2309      	movs	r3, #9
   2a782:	f88d 3008 	strb.w	r3, [sp, #8]
   2a786:	f88d 0009 	strb.w	r0, [sp, #9]
   2a78a:	9b01      	ldr	r3, [sp, #4]
   2a78c:	9303      	str	r3, [sp, #12]
   2a78e:	e79f      	b.n	2a6d0 <le_adv_update+0x2e>
			return true;
   2a790:	2301      	movs	r3, #1
   2a792:	e7f1      	b.n	2a778 <le_adv_update+0xd6>
			d[1].data = &data;
   2a794:	ab02      	add	r3, sp, #8
   2a796:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2a798:	2301      	movs	r3, #1
   2a79a:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2a79c:	2202      	movs	r2, #2
   2a79e:	e7a3      	b.n	2a6e8 <le_adv_update+0x46>
			d[1].data = &data;
   2a7a0:	ab02      	add	r3, sp, #8
   2a7a2:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2a7a4:	2301      	movs	r3, #1
   2a7a6:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2a7a8:	2202      	movs	r2, #2
   2a7aa:	e7ad      	b.n	2a708 <le_adv_update+0x66>
			return -EINVAL;
   2a7ac:	f06f 0315 	mvn.w	r3, #21
   2a7b0:	e7be      	b.n	2a730 <le_adv_update+0x8e>
   2a7b2:	f06f 0315 	mvn.w	r3, #21
   2a7b6:	e7bb      	b.n	2a730 <le_adv_update+0x8e>

0002a7b8 <valid_adv_param>:
{
   2a7b8:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2a7ba:	6843      	ldr	r3, [r0, #4]
   2a7bc:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2a7c0:	d107      	bne.n	2a7d2 <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2a7c2:	6902      	ldr	r2, [r0, #16]
   2a7c4:	b112      	cbz	r2, 2a7cc <valid_adv_param+0x14>
   2a7c6:	f013 0f01 	tst.w	r3, #1
   2a7ca:	d004      	beq.n	2a7d6 <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   2a7cc:	f7eb fd8e 	bl	162ec <valid_adv_ext_param>
}
   2a7d0:	bd08      	pop	{r3, pc}
		return false;
   2a7d2:	2000      	movs	r0, #0
   2a7d4:	e7fc      	b.n	2a7d0 <valid_adv_param+0x18>
		return false;
   2a7d6:	2000      	movs	r0, #0
   2a7d8:	e7fa      	b.n	2a7d0 <valid_adv_param+0x18>

0002a7da <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a7da:	f001 0c1f 	and.w	ip, r1, #31
   2a7de:	2301      	movs	r3, #1
   2a7e0:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   2a7e4:	b172      	cbz	r2, 2a804 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2a7e6:	0949      	lsrs	r1, r1, #5
   2a7e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a7ec:	f3bf 8f5b 	dmb	ish
   2a7f0:	e850 2f00 	ldrex	r2, [r0]
   2a7f4:	431a      	orrs	r2, r3
   2a7f6:	e840 2100 	strex	r1, r2, [r0]
   2a7fa:	2900      	cmp	r1, #0
   2a7fc:	d1f8      	bne.n	2a7f0 <atomic_set_bit_to+0x16>
   2a7fe:	f3bf 8f5b 	dmb	ish
   2a802:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a804:	0949      	lsrs	r1, r1, #5
   2a806:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a80a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a80c:	f3bf 8f5b 	dmb	ish
   2a810:	e850 2f00 	ldrex	r2, [r0]
   2a814:	401a      	ands	r2, r3
   2a816:	e840 2100 	strex	r1, r2, [r0]
   2a81a:	2900      	cmp	r1, #0
   2a81c:	d1f8      	bne.n	2a810 <atomic_set_bit_to+0x36>
   2a81e:	f3bf 8f5b 	dmb	ish
}
   2a822:	4770      	bx	lr

0002a824 <atomic_test_and_clear_bit>:
{
   2a824:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a826:	f001 021f 	and.w	r2, r1, #31
   2a82a:	2301      	movs	r3, #1
   2a82c:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a82e:	0949      	lsrs	r1, r1, #5
   2a830:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a834:	43d9      	mvns	r1, r3
   2a836:	f3bf 8f5b 	dmb	ish
   2a83a:	e850 2f00 	ldrex	r2, [r0]
   2a83e:	ea02 0c01 	and.w	ip, r2, r1
   2a842:	e840 ce00 	strex	lr, ip, [r0]
   2a846:	f1be 0f00 	cmp.w	lr, #0
   2a84a:	d1f6      	bne.n	2a83a <atomic_test_and_clear_bit+0x16>
   2a84c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2a850:	4213      	tst	r3, r2
}
   2a852:	bf14      	ite	ne
   2a854:	2001      	movne	r0, #1
   2a856:	2000      	moveq	r0, #0
   2a858:	f85d fb04 	ldr.w	pc, [sp], #4

0002a85c <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2a85c:	6843      	ldr	r3, [r0, #4]
   2a85e:	f013 0f08 	tst.w	r3, #8
   2a862:	d00b      	beq.n	2a87c <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2a864:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   2a868:	d10a      	bne.n	2a880 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2a86a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   2a86e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2a872:	d001      	beq.n	2a878 <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   2a874:	2002      	movs	r0, #2
}
   2a876:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2a878:	2001      	movs	r0, #1
   2a87a:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   2a87c:	2000      	movs	r0, #0
   2a87e:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2a880:	2001      	movs	r0, #1
   2a882:	4770      	bx	lr

0002a884 <bt_le_adv_set_enable_legacy>:
{
   2a884:	b570      	push	{r4, r5, r6, lr}
   2a886:	b086      	sub	sp, #24
   2a888:	4605      	mov	r5, r0
   2a88a:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2a88c:	2101      	movs	r1, #1
   2a88e:	f242 000a 	movw	r0, #8202	; 0x200a
   2a892:	f7ea f8b1 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2a896:	b1d0      	cbz	r0, 2a8ce <bt_le_adv_set_enable_legacy+0x4a>
   2a898:	4606      	mov	r6, r0
	if (enable) {
   2a89a:	b19c      	cbz	r4, 2a8c4 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2a89c:	2101      	movs	r1, #1
   2a89e:	3008      	adds	r0, #8
   2a8a0:	f002 fd9e 	bl	2d3e0 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2a8a4:	9400      	str	r4, [sp, #0]
   2a8a6:	2307      	movs	r3, #7
   2a8a8:	f105 0210 	add.w	r2, r5, #16
   2a8ac:	a903      	add	r1, sp, #12
   2a8ae:	4630      	mov	r0, r6
   2a8b0:	f7ea f890 	bl	149d4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2a8b4:	2200      	movs	r2, #0
   2a8b6:	4631      	mov	r1, r6
   2a8b8:	f242 000a 	movw	r0, #8202	; 0x200a
   2a8bc:	f7ea f8ec 	bl	14a98 <bt_hci_cmd_send_sync>
}
   2a8c0:	b006      	add	sp, #24
   2a8c2:	bd70      	pop	{r4, r5, r6, pc}
   2a8c4:	2100      	movs	r1, #0
   2a8c6:	3008      	adds	r0, #8
   2a8c8:	f002 fd8a 	bl	2d3e0 <net_buf_simple_add_u8>
   2a8cc:	e7ea      	b.n	2a8a4 <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   2a8ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a8d2:	e7f5      	b.n	2a8c0 <bt_le_adv_set_enable_legacy+0x3c>

0002a8d4 <bt_le_adv_set_enable>:
{
   2a8d4:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   2a8d6:	f7ff ffd5 	bl	2a884 <bt_le_adv_set_enable_legacy>
}
   2a8da:	bd08      	pop	{r3, pc}

0002a8dc <bt_le_lim_adv_cancel_timeout>:
{
   2a8dc:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2a8de:	3018      	adds	r0, #24
   2a8e0:	f7f8 fc44 	bl	2316c <k_work_cancel_delayable>
}
   2a8e4:	bd08      	pop	{r3, pc}

0002a8e6 <bt_le_adv_resume>:
{
   2a8e6:	b570      	push	{r4, r5, r6, lr}
   2a8e8:	b082      	sub	sp, #8
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2a8ea:	f7eb fdb3 	bl	16454 <bt_le_adv_lookup_legacy>
	if (!adv) {
   2a8ee:	b138      	cbz	r0, 2a900 <bt_le_adv_resume+0x1a>
   2a8f0:	4605      	mov	r5, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2a8f2:	f100 0410 	add.w	r4, r0, #16
   2a8f6:	210e      	movs	r1, #14
   2a8f8:	4620      	mov	r0, r4
   2a8fa:	f7ff fe8b 	bl	2a614 <atomic_test_bit>
   2a8fe:	b908      	cbnz	r0, 2a904 <bt_le_adv_resume+0x1e>
}
   2a900:	b002      	add	sp, #8
   2a902:	bd70      	pop	{r4, r5, r6, pc}
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
   2a904:	2107      	movs	r1, #7
   2a906:	4620      	mov	r0, r4
   2a908:	f7ff fe84 	bl	2a614 <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2a90c:	4606      	mov	r6, r0
   2a90e:	2800      	cmp	r0, #0
   2a910:	d1f6      	bne.n	2a900 <bt_le_adv_resume+0x1a>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2a912:	210a      	movs	r1, #10
   2a914:	4620      	mov	r0, r4
   2a916:	f7ff fe7d 	bl	2a614 <atomic_test_bit>
   2a91a:	2800      	cmp	r0, #0
   2a91c:	d0f0      	beq.n	2a900 <bt_le_adv_resume+0x1a>
	err = le_adv_start_add_conn(adv, &conn);
   2a91e:	a901      	add	r1, sp, #4
   2a920:	4628      	mov	r0, r5
   2a922:	f7eb fd2d 	bl	16380 <le_adv_start_add_conn>
	if (err) {
   2a926:	2800      	cmp	r0, #0
   2a928:	d1ea      	bne.n	2a900 <bt_le_adv_resume+0x1a>
	err = bt_le_adv_set_enable(adv, true);
   2a92a:	2101      	movs	r1, #1
   2a92c:	4628      	mov	r0, r5
   2a92e:	f7ff ffd1 	bl	2a8d4 <bt_le_adv_set_enable>
	if (err) {
   2a932:	b988      	cbnz	r0, 2a958 <bt_le_adv_resume+0x72>
	bt_conn_unref(conn);
   2a934:	9801      	ldr	r0, [sp, #4]
   2a936:	f7ec fb73 	bl	17020 <bt_conn_unref>
	if (persist_paused) {
   2a93a:	2e00      	cmp	r6, #0
   2a93c:	d0e0      	beq.n	2a900 <bt_le_adv_resume+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a93e:	f3bf 8f5b 	dmb	ish
   2a942:	e854 3f00 	ldrex	r3, [r4]
   2a946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2a94a:	e844 3200 	strex	r2, r3, [r4]
   2a94e:	2a00      	cmp	r2, #0
   2a950:	d1f7      	bne.n	2a942 <bt_le_adv_resume+0x5c>
   2a952:	f3bf 8f5b 	dmb	ish
}
   2a956:	e7d3      	b.n	2a900 <bt_le_adv_resume+0x1a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2a958:	2100      	movs	r1, #0
   2a95a:	9801      	ldr	r0, [sp, #4]
   2a95c:	f7ec fb9c 	bl	17098 <bt_conn_set_state>
		persist_paused = atomic_test_and_clear_bit(adv->flags,
   2a960:	210e      	movs	r1, #14
   2a962:	4620      	mov	r0, r4
   2a964:	f7ff ff5e 	bl	2a824 <atomic_test_and_clear_bit>
   2a968:	4606      	mov	r6, r0
   2a96a:	e7e3      	b.n	2a934 <bt_le_adv_resume+0x4e>

0002a96c <hci_generate_dhkey_v1>:
{
   2a96c:	b538      	push	{r3, r4, r5, lr}
   2a96e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2a970:	2140      	movs	r1, #64	; 0x40
   2a972:	f242 0026 	movw	r0, #8230	; 0x2026
   2a976:	f7ea f83f 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2a97a:	b178      	cbz	r0, 2a99c <hci_generate_dhkey_v1+0x30>
   2a97c:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   2a97e:	2140      	movs	r1, #64	; 0x40
   2a980:	3008      	adds	r0, #8
   2a982:	f7f2 fa15 	bl	1cdb0 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   2a986:	2240      	movs	r2, #64	; 0x40
   2a988:	4621      	mov	r1, r4
   2a98a:	f7ff f9ff 	bl	29d8c <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2a98e:	2200      	movs	r2, #0
   2a990:	4629      	mov	r1, r5
   2a992:	f242 0026 	movw	r0, #8230	; 0x2026
   2a996:	f7ea f87f 	bl	14a98 <bt_hci_cmd_send_sync>
}
   2a99a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2a99c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a9a0:	e7fb      	b.n	2a99a <hci_generate_dhkey_v1+0x2e>

0002a9a2 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   2a9a2:	460b      	mov	r3, r1
   2a9a4:	b139      	cbz	r1, 2a9b6 <sys_slist_remove+0x14>
	return node->next;
   2a9a6:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2a9a8:	6019      	str	r1, [r3, #0]
	return list->tail;
   2a9aa:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a9ac:	428a      	cmp	r2, r1
   2a9ae:	d009      	beq.n	2a9c4 <sys_slist_remove+0x22>
	parent->next = child;
   2a9b0:	2300      	movs	r3, #0
   2a9b2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a9b4:	4770      	bx	lr
	return node->next;
   2a9b6:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2a9b8:	6003      	str	r3, [r0, #0]
	return list->tail;
   2a9ba:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a9bc:	428a      	cmp	r2, r1
   2a9be:	d1f7      	bne.n	2a9b0 <sys_slist_remove+0xe>
	list->tail = node;
   2a9c0:	6043      	str	r3, [r0, #4]
}
   2a9c2:	e7f5      	b.n	2a9b0 <sys_slist_remove+0xe>
	list->tail = node;
   2a9c4:	6043      	str	r3, [r0, #4]
}
   2a9c6:	e7f3      	b.n	2a9b0 <sys_slist_remove+0xe>

0002a9c8 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a9c8:	b508      	push	{r3, lr}
   2a9ca:	460a      	mov	r2, r1
	return list->head;
   2a9cc:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a9ce:	2100      	movs	r1, #0
   2a9d0:	e001      	b.n	2a9d6 <sys_slist_find_and_remove+0xe>
   2a9d2:	4619      	mov	r1, r3
   2a9d4:	681b      	ldr	r3, [r3, #0]
   2a9d6:	b12b      	cbz	r3, 2a9e4 <sys_slist_find_and_remove+0x1c>
   2a9d8:	4293      	cmp	r3, r2
   2a9da:	d1fa      	bne.n	2a9d2 <sys_slist_find_and_remove+0xa>
   2a9dc:	f7ff ffe1 	bl	2a9a2 <sys_slist_remove>
   2a9e0:	2001      	movs	r0, #1
   2a9e2:	e000      	b.n	2a9e6 <sys_slist_find_and_remove+0x1e>
   2a9e4:	2000      	movs	r0, #0
   2a9e6:	bd08      	pop	{r3, pc}

0002a9e8 <reset_pairing>:
	conn->required_sec_level = conn->sec_level;
   2a9e8:	7a43      	ldrb	r3, [r0, #9]
   2a9ea:	7283      	strb	r3, [r0, #10]
}
   2a9ec:	4770      	bx	lr

0002a9ee <tx_notify>:
{
   2a9ee:	b570      	push	{r4, r5, r6, lr}
   2a9f0:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   2a9f2:	e00c      	b.n	2aa0e <tx_notify+0x20>
   2a9f4:	f383 8811 	msr	BASEPRI, r3
   2a9f8:	f3bf 8f6f 	isb	sy
		if (!tx) {
   2a9fc:	b1c8      	cbz	r0, 2aa32 <tx_notify+0x44>
		cb = tx->cb;
   2a9fe:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   2aa00:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   2aa02:	f7ec f857 	bl	16ab4 <tx_free>
		cb(conn, user_data, 0);
   2aa06:	2200      	movs	r2, #0
   2aa08:	4631      	mov	r1, r6
   2aa0a:	4620      	mov	r0, r4
   2aa0c:	47a8      	blx	r5
	__asm__ volatile(
   2aa0e:	f04f 0240 	mov.w	r2, #64	; 0x40
   2aa12:	f3ef 8311 	mrs	r3, BASEPRI
   2aa16:	f382 8812 	msr	BASEPRI_MAX, r2
   2aa1a:	f3bf 8f6f 	isb	sy
	return list->head;
   2aa1e:	6a20      	ldr	r0, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   2aa20:	2800      	cmp	r0, #0
   2aa22:	d0e7      	beq.n	2a9f4 <tx_notify+0x6>
	return node->next;
   2aa24:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2aa26:	6222      	str	r2, [r4, #32]
	return list->tail;
   2aa28:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2aa2a:	4281      	cmp	r1, r0
   2aa2c:	d1e2      	bne.n	2a9f4 <tx_notify+0x6>
	list->tail = node;
   2aa2e:	6262      	str	r2, [r4, #36]	; 0x24
}
   2aa30:	e7e0      	b.n	2a9f4 <tx_notify+0x6>
}
   2aa32:	bd70      	pop	{r4, r5, r6, pc}

0002aa34 <tx_complete_work>:
{
   2aa34:	b508      	push	{r3, lr}
	tx_notify(conn);
   2aa36:	3828      	subs	r0, #40	; 0x28
   2aa38:	f7ff ffd9 	bl	2a9ee <tx_notify>
}
   2aa3c:	bd08      	pop	{r3, pc}

0002aa3e <atomic_test_and_clear_bit>:
{
   2aa3e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2aa40:	f001 021f 	and.w	r2, r1, #31
   2aa44:	2301      	movs	r3, #1
   2aa46:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2aa48:	0949      	lsrs	r1, r1, #5
   2aa4a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2aa4e:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2aa50:	f3bf 8f5b 	dmb	ish
   2aa54:	e850 2f00 	ldrex	r2, [r0]
   2aa58:	ea02 0c01 	and.w	ip, r2, r1
   2aa5c:	e840 ce00 	strex	lr, ip, [r0]
   2aa60:	f1be 0f00 	cmp.w	lr, #0
   2aa64:	d1f6      	bne.n	2aa54 <atomic_test_and_clear_bit+0x16>
   2aa66:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2aa6a:	4213      	tst	r3, r2
}
   2aa6c:	bf14      	ite	ne
   2aa6e:	2001      	movne	r0, #1
   2aa70:	2000      	moveq	r0, #0
   2aa72:	f85d fb04 	ldr.w	pc, [sp], #4

0002aa76 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2aa76:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aa78:	f3bf 8f5b 	dmb	ish
   2aa7c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2aa80:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2aa84:	f001 011f 	and.w	r1, r1, #31
   2aa88:	4108      	asrs	r0, r1
}
   2aa8a:	f000 0001 	and.w	r0, r0, #1
   2aa8e:	4770      	bx	lr

0002aa90 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2aa90:	f001 0c1f 	and.w	ip, r1, #31
   2aa94:	2301      	movs	r3, #1
   2aa96:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   2aa9a:	b172      	cbz	r2, 2aaba <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2aa9c:	0949      	lsrs	r1, r1, #5
   2aa9e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2aaa2:	f3bf 8f5b 	dmb	ish
   2aaa6:	e850 2f00 	ldrex	r2, [r0]
   2aaaa:	431a      	orrs	r2, r3
   2aaac:	e840 2100 	strex	r1, r2, [r0]
   2aab0:	2900      	cmp	r1, #0
   2aab2:	d1f8      	bne.n	2aaa6 <atomic_set_bit_to+0x16>
   2aab4:	f3bf 8f5b 	dmb	ish
   2aab8:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2aaba:	0949      	lsrs	r1, r1, #5
   2aabc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2aac0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2aac2:	f3bf 8f5b 	dmb	ish
   2aac6:	e850 2f00 	ldrex	r2, [r0]
   2aaca:	401a      	ands	r2, r3
   2aacc:	e840 2100 	strex	r1, r2, [r0]
   2aad0:	2900      	cmp	r1, #0
   2aad2:	d1f8      	bne.n	2aac6 <atomic_set_bit_to+0x36>
   2aad4:	f3bf 8f5b 	dmb	ish
}
   2aad8:	4770      	bx	lr

0002aada <send_acl>:
{
   2aada:	b570      	push	{r4, r5, r6, lr}
   2aadc:	4605      	mov	r5, r0
   2aade:	460c      	mov	r4, r1
	switch (flags) {
   2aae0:	2a03      	cmp	r2, #3
   2aae2:	d818      	bhi.n	2ab16 <send_acl+0x3c>
   2aae4:	e8df f002 	tbb	[pc, r2]
   2aae8:	15021502 	.word	0x15021502
   2aaec:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   2aaee:	2104      	movs	r1, #4
   2aaf0:	f104 0008 	add.w	r0, r4, #8
   2aaf4:	f7f2 f93e 	bl	1cd74 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2aaf8:	882b      	ldrh	r3, [r5, #0]
   2aafa:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   2aafe:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ab00:	89a3      	ldrh	r3, [r4, #12]
   2ab02:	3b04      	subs	r3, #4
   2ab04:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2ab06:	2302      	movs	r3, #2
   2ab08:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   2ab0a:	4620      	mov	r0, r4
   2ab0c:	f7ea fc46 	bl	1539c <bt_send>
}
   2ab10:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   2ab12:	2601      	movs	r6, #1
   2ab14:	e7eb      	b.n	2aaee <send_acl+0x14>
	switch (flags) {
   2ab16:	f06f 0015 	mvn.w	r0, #21
   2ab1a:	e7f9      	b.n	2ab10 <send_acl+0x36>

0002ab1c <start_security>:
{
   2ab1c:	b508      	push	{r3, lr}
		return bt_smp_start_security(conn);
   2ab1e:	f002 faac 	bl	2d07a <bt_smp_start_security>
}
   2ab22:	bd08      	pop	{r3, pc}

0002ab24 <process_unack_tx>:
{
   2ab24:	b510      	push	{r4, lr}
   2ab26:	4604      	mov	r4, r0
   2ab28:	e028      	b.n	2ab7c <process_unack_tx+0x58>
			conn->pending_no_cb--;
   2ab2a:	3a01      	subs	r2, #1
   2ab2c:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   2ab2e:	f383 8811 	msr	BASEPRI, r3
   2ab32:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2ab36:	4620      	mov	r0, r4
   2ab38:	f7ec f868 	bl	16c0c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2ab3c:	f7f7 fdf6 	bl	2272c <z_impl_k_sem_give>
			continue;
   2ab40:	e01c      	b.n	2ab7c <process_unack_tx+0x58>
   2ab42:	f383 8811 	msr	BASEPRI, r3
   2ab46:	f3bf 8f6f 	isb	sy
		if (!node) {
   2ab4a:	b361      	cbz	r1, 2aba6 <process_unack_tx+0x82>
	__asm__ volatile(
   2ab4c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2ab50:	f3ef 8311 	mrs	r3, BASEPRI
   2ab54:	f382 8812 	msr	BASEPRI_MAX, r2
   2ab58:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2ab5c:	68ca      	ldr	r2, [r1, #12]
   2ab5e:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2ab60:	2200      	movs	r2, #0
   2ab62:	60ca      	str	r2, [r1, #12]
	__asm__ volatile(
   2ab64:	f383 8811 	msr	BASEPRI, r3
   2ab68:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   2ab6c:	4620      	mov	r0, r4
   2ab6e:	f7eb ffe3 	bl	16b38 <conn_tx_destroy>
		k_sem_give(bt_conn_get_pkts(conn));
   2ab72:	4620      	mov	r0, r4
   2ab74:	f7ec f84a 	bl	16c0c <bt_conn_get_pkts>
   2ab78:	f7f7 fdd8 	bl	2272c <z_impl_k_sem_give>
	__asm__ volatile(
   2ab7c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2ab80:	f3ef 8311 	mrs	r3, BASEPRI
   2ab84:	f382 8812 	msr	BASEPRI_MAX, r2
   2ab88:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2ab8c:	69e2      	ldr	r2, [r4, #28]
   2ab8e:	2a00      	cmp	r2, #0
   2ab90:	d1cb      	bne.n	2ab2a <process_unack_tx+0x6>
	return list->head;
   2ab92:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2ab94:	2900      	cmp	r1, #0
   2ab96:	d0d4      	beq.n	2ab42 <process_unack_tx+0x1e>
	return node->next;
   2ab98:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   2ab9a:	6162      	str	r2, [r4, #20]
	return list->tail;
   2ab9c:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ab9e:	4281      	cmp	r1, r0
   2aba0:	d1cf      	bne.n	2ab42 <process_unack_tx+0x1e>
	list->tail = node;
   2aba2:	61a2      	str	r2, [r4, #24]
}
   2aba4:	e7cd      	b.n	2ab42 <process_unack_tx+0x1e>
}
   2aba6:	bd10      	pop	{r4, pc}

0002aba8 <bt_conn_reset_rx_state>:
{
   2aba8:	b510      	push	{r4, lr}
   2abaa:	4604      	mov	r4, r0
	if (!conn->rx) {
   2abac:	6900      	ldr	r0, [r0, #16]
   2abae:	b118      	cbz	r0, 2abb8 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2abb0:	f7f1 fffc 	bl	1cbac <net_buf_unref>
	conn->rx = NULL;
   2abb4:	2300      	movs	r3, #0
   2abb6:	6123      	str	r3, [r4, #16]
}
   2abb8:	bd10      	pop	{r4, pc}

0002abba <conn_prepare_events>:
{
   2abba:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2abbc:	f3bf 8f5b 	dmb	ish
   2abc0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2abc4:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   2abc8:	b1eb      	cbz	r3, 2ac06 <conn_prepare_events+0x4c>
   2abca:	4604      	mov	r4, r0
   2abcc:	460d      	mov	r5, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   2abce:	7b43      	ldrb	r3, [r0, #13]
   2abd0:	b16b      	cbz	r3, 2abee <conn_prepare_events+0x34>
	if (conn->state != BT_CONN_CONNECTED) {
   2abd2:	7b63      	ldrb	r3, [r4, #13]
   2abd4:	2b07      	cmp	r3, #7
   2abd6:	d119      	bne.n	2ac0c <conn_prepare_events+0x52>
	k_poll_event_init(&events[0],
   2abd8:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2abdc:	2200      	movs	r2, #0
   2abde:	2104      	movs	r1, #4
   2abe0:	4628      	mov	r0, r5
   2abe2:	f7fa f94d 	bl	24e80 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2abe6:	2301      	movs	r3, #1
   2abe8:	732b      	strb	r3, [r5, #12]
	return 0;
   2abea:	2000      	movs	r0, #0
}
   2abec:	bd38      	pop	{r3, r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   2abee:	2106      	movs	r1, #6
   2abf0:	3004      	adds	r0, #4
   2abf2:	f7ff ff24 	bl	2aa3e <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   2abf6:	2800      	cmp	r0, #0
   2abf8:	d0eb      	beq.n	2abd2 <conn_prepare_events+0x18>
		conn_cleanup(conn);
   2abfa:	4620      	mov	r0, r4
   2abfc:	f7ec f93c 	bl	16e78 <conn_cleanup>
		return -ENOTCONN;
   2ac00:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ac04:	e7f2      	b.n	2abec <conn_prepare_events+0x32>
		return -ENOTCONN;
   2ac06:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ac0a:	e7ef      	b.n	2abec <conn_prepare_events+0x32>
		return -ENOTCONN;
   2ac0c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ac10:	e7ec      	b.n	2abec <conn_prepare_events+0x32>

0002ac12 <bt_conn_recv>:
{
   2ac12:	b570      	push	{r4, r5, r6, lr}
   2ac14:	4604      	mov	r4, r0
   2ac16:	460d      	mov	r5, r1
   2ac18:	4616      	mov	r6, r2
	tx_notify(conn);
   2ac1a:	f7ff fee8 	bl	2a9ee <tx_notify>
		bt_acl_recv(conn, buf, flags);
   2ac1e:	4632      	mov	r2, r6
   2ac20:	4629      	mov	r1, r5
   2ac22:	4620      	mov	r0, r4
   2ac24:	f7ec f8b4 	bl	16d90 <bt_acl_recv>
}
   2ac28:	bd70      	pop	{r4, r5, r6, pc}

0002ac2a <conn_lookup_handle>:
{
   2ac2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ac2c:	4606      	mov	r6, r0
   2ac2e:	460d      	mov	r5, r1
   2ac30:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   2ac32:	2400      	movs	r4, #0
   2ac34:	e003      	b.n	2ac3e <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   2ac36:	4660      	mov	r0, ip
   2ac38:	f7ec f9f2 	bl	17020 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2ac3c:	3401      	adds	r4, #1
   2ac3e:	42ac      	cmp	r4, r5
   2ac40:	d21b      	bcs.n	2ac7a <conn_lookup_handle+0x50>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2ac42:	20c8      	movs	r0, #200	; 0xc8
   2ac44:	fb00 6004 	mla	r0, r0, r4, r6
   2ac48:	f7ec f9bc 	bl	16fc4 <bt_conn_ref>
		if (!conn) {
   2ac4c:	4684      	mov	ip, r0
   2ac4e:	2800      	cmp	r0, #0
   2ac50:	d0f4      	beq.n	2ac3c <conn_lookup_handle+0x12>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2ac52:	7b43      	ldrb	r3, [r0, #13]
   2ac54:	2b01      	cmp	r3, #1
   2ac56:	d006      	beq.n	2ac66 <conn_lookup_handle+0x3c>
   2ac58:	b25a      	sxtb	r2, r3
   2ac5a:	2a00      	cmp	r2, #0
   2ac5c:	d0eb      	beq.n	2ac36 <conn_lookup_handle+0xc>
   2ac5e:	3b07      	subs	r3, #7
   2ac60:	b2db      	uxtb	r3, r3
   2ac62:	2b01      	cmp	r3, #1
   2ac64:	d8e7      	bhi.n	2ac36 <conn_lookup_handle+0xc>
		if (conn->handle != handle) {
   2ac66:	f8bc 3000 	ldrh.w	r3, [ip]
   2ac6a:	42bb      	cmp	r3, r7
   2ac6c:	d101      	bne.n	2ac72 <conn_lookup_handle+0x48>
}
   2ac6e:	4660      	mov	r0, ip
   2ac70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   2ac72:	4660      	mov	r0, ip
   2ac74:	f7ec f9d4 	bl	17020 <bt_conn_unref>
			continue;
   2ac78:	e7e0      	b.n	2ac3c <conn_lookup_handle+0x12>
	return NULL;
   2ac7a:	f04f 0c00 	mov.w	ip, #0
   2ac7e:	e7f6      	b.n	2ac6e <conn_lookup_handle+0x44>

0002ac80 <conn_disconnect>:
{
   2ac80:	b538      	push	{r3, r4, r5, lr}
   2ac82:	4604      	mov	r4, r0
	err = bt_hci_disconnect(conn->handle, reason);
   2ac84:	8800      	ldrh	r0, [r0, #0]
   2ac86:	f7ff faa2 	bl	2a1ce <bt_hci_disconnect>
	if (err) {
   2ac8a:	4605      	mov	r5, r0
   2ac8c:	b910      	cbnz	r0, 2ac94 <conn_disconnect+0x14>
	if (conn->state == BT_CONN_CONNECTED) {
   2ac8e:	7b63      	ldrb	r3, [r4, #13]
   2ac90:	2b07      	cmp	r3, #7
   2ac92:	d001      	beq.n	2ac98 <conn_disconnect+0x18>
}
   2ac94:	4628      	mov	r0, r5
   2ac96:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2ac98:	2108      	movs	r1, #8
   2ac9a:	4620      	mov	r0, r4
   2ac9c:	f7ec f9fc 	bl	17098 <bt_conn_set_state>
   2aca0:	e7f8      	b.n	2ac94 <conn_disconnect+0x14>

0002aca2 <bt_conn_connected>:
{
   2aca2:	b510      	push	{r4, lr}
   2aca4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2aca6:	f7ec fe81 	bl	179ac <bt_l2cap_connected>
	notify_connected(conn);
   2acaa:	4620      	mov	r0, r4
   2acac:	f7eb ff60 	bl	16b70 <notify_connected>
}
   2acb0:	bd10      	pop	{r4, pc}

0002acb2 <bt_conn_disconnect>:
{
   2acb2:	b508      	push	{r3, lr}
	switch (conn->state) {
   2acb4:	7b43      	ldrb	r3, [r0, #13]
   2acb6:	3b02      	subs	r3, #2
   2acb8:	2b06      	cmp	r3, #6
   2acba:	d810      	bhi.n	2acde <bt_conn_disconnect+0x2c>
   2acbc:	e8df f003 	tbb	[pc, r3]
   2acc0:	0f0f0f06 	.word	0x0f0f0f06
   2acc4:	0c04      	.short	0x0c04
   2acc6:	04          	.byte	0x04
   2acc7:	00          	.byte	0x00
   2acc8:	2000      	movs	r0, #0
}
   2acca:	bd08      	pop	{r3, pc}
		conn->err = reason;
   2accc:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2acce:	2100      	movs	r1, #0
   2acd0:	f7ec f9e2 	bl	17098 <bt_conn_set_state>
		return 0;
   2acd4:	2000      	movs	r0, #0
   2acd6:	e7f8      	b.n	2acca <bt_conn_disconnect+0x18>
		return conn_disconnect(conn, reason);
   2acd8:	f7ff ffd2 	bl	2ac80 <conn_disconnect>
   2acdc:	e7f5      	b.n	2acca <bt_conn_disconnect+0x18>
		return -ENOTCONN;
   2acde:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ace2:	e7f2      	b.n	2acca <bt_conn_disconnect+0x18>

0002ace4 <bt_conn_set_security>:
{
   2ace4:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2ace6:	7b43      	ldrb	r3, [r0, #13]
   2ace8:	2b07      	cmp	r3, #7
   2acea:	d118      	bne.n	2ad1e <bt_conn_set_security+0x3a>
   2acec:	4604      	mov	r4, r0
   2acee:	460d      	mov	r5, r1
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2acf0:	7a43      	ldrb	r3, [r0, #9]
   2acf2:	428b      	cmp	r3, r1
   2acf4:	d216      	bcs.n	2ad24 <bt_conn_set_security+0x40>
   2acf6:	7a83      	ldrb	r3, [r0, #10]
   2acf8:	428b      	cmp	r3, r1
   2acfa:	d301      	bcc.n	2ad00 <bt_conn_set_security+0x1c>
		return 0;
   2acfc:	2000      	movs	r0, #0
   2acfe:	e012      	b.n	2ad26 <bt_conn_set_security+0x42>
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2ad00:	09ca      	lsrs	r2, r1, #7
   2ad02:	210a      	movs	r1, #10
   2ad04:	3004      	adds	r0, #4
   2ad06:	f7ff fec3 	bl	2aa90 <atomic_set_bit_to>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2ad0a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2ad0e:	72a5      	strb	r5, [r4, #10]
	err = start_security(conn);
   2ad10:	4620      	mov	r0, r4
   2ad12:	f7ff ff03 	bl	2ab1c <start_security>
	if (err) {
   2ad16:	b130      	cbz	r0, 2ad26 <bt_conn_set_security+0x42>
		conn->required_sec_level = conn->sec_level;
   2ad18:	7a63      	ldrb	r3, [r4, #9]
   2ad1a:	72a3      	strb	r3, [r4, #10]
   2ad1c:	e003      	b.n	2ad26 <bt_conn_set_security+0x42>
		return -ENOTCONN;
   2ad1e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ad22:	e000      	b.n	2ad26 <bt_conn_set_security+0x42>
		return 0;
   2ad24:	2000      	movs	r0, #0
}
   2ad26:	bd38      	pop	{r3, r4, r5, pc}

0002ad28 <bt_conn_get_security>:
}
   2ad28:	7a40      	ldrb	r0, [r0, #9]
   2ad2a:	4770      	bx	lr

0002ad2c <bt_conn_add_le>:
{
   2ad2c:	b570      	push	{r4, r5, r6, lr}
   2ad2e:	4606      	mov	r6, r0
   2ad30:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   2ad32:	f7ec f825 	bl	16d80 <acl_conn_new>
	if (!conn) {
   2ad36:	4604      	mov	r4, r0
   2ad38:	b178      	cbz	r0, 2ad5a <bt_conn_add_le+0x2e>
	conn->id = id;
   2ad3a:	7206      	strb	r6, [r0, #8]
   2ad3c:	2207      	movs	r2, #7
   2ad3e:	4629      	mov	r1, r5
   2ad40:	3090      	adds	r0, #144	; 0x90
   2ad42:	f7ff f823 	bl	29d8c <memcpy>
	conn->sec_level = BT_SECURITY_L1;
   2ad46:	2301      	movs	r3, #1
   2ad48:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   2ad4a:	72a3      	strb	r3, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
   2ad4c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2ad4e:	2318      	movs	r3, #24
   2ad50:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   2ad54:	2328      	movs	r3, #40	; 0x28
   2ad56:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   2ad5a:	4620      	mov	r0, r4
   2ad5c:	bd70      	pop	{r4, r5, r6, pc}

0002ad5e <bt_conn_is_peer_addr_le>:
{
   2ad5e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2ad60:	7a03      	ldrb	r3, [r0, #8]
   2ad62:	428b      	cmp	r3, r1
   2ad64:	d001      	beq.n	2ad6a <bt_conn_is_peer_addr_le+0xc>
		return false;
   2ad66:	2000      	movs	r0, #0
}
   2ad68:	bd38      	pop	{r3, r4, r5, pc}
   2ad6a:	4604      	mov	r4, r0
   2ad6c:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   2ad6e:	2207      	movs	r2, #7
   2ad70:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2ad74:	4628      	mov	r0, r5
   2ad76:	f7fe ffe4 	bl	29d42 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2ad7a:	b1a8      	cbz	r0, 2ada8 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2ad7c:	78e3      	ldrb	r3, [r4, #3]
   2ad7e:	b14b      	cbz	r3, 2ad94 <bt_conn_is_peer_addr_le+0x36>
   2ad80:	2207      	movs	r2, #7
   2ad82:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2ad86:	4628      	mov	r0, r5
   2ad88:	f7fe ffdb 	bl	29d42 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2ad8c:	fab0 f080 	clz	r0, r0
   2ad90:	0940      	lsrs	r0, r0, #5
	return bt_addr_le_eq(peer, &conn->le.init_addr);
   2ad92:	e7e9      	b.n	2ad68 <bt_conn_is_peer_addr_le+0xa>
	return memcmp(a, b, sizeof(*a));
   2ad94:	2207      	movs	r2, #7
   2ad96:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2ad9a:	4628      	mov	r0, r5
   2ad9c:	f7fe ffd1 	bl	29d42 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2ada0:	fab0 f080 	clz	r0, r0
   2ada4:	0940      	lsrs	r0, r0, #5
		return bt_addr_le_eq(peer, &conn->le.resp_addr);
   2ada6:	e7df      	b.n	2ad68 <bt_conn_is_peer_addr_le+0xa>
		return true;
   2ada8:	2001      	movs	r0, #1
   2adaa:	e7dd      	b.n	2ad68 <bt_conn_is_peer_addr_le+0xa>

0002adac <bt_conn_get_dst>:
}
   2adac:	3090      	adds	r0, #144	; 0x90
   2adae:	4770      	bx	lr

0002adb0 <bt_conn_le_conn_update>:
{
   2adb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2adb2:	4606      	mov	r6, r0
   2adb4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2adb6:	210e      	movs	r1, #14
   2adb8:	f242 0013 	movw	r0, #8211	; 0x2013
   2adbc:	f7e9 fe1c 	bl	149f8 <bt_hci_cmd_create>
	if (!buf) {
   2adc0:	b1d0      	cbz	r0, 2adf8 <bt_conn_le_conn_update+0x48>
   2adc2:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   2adc4:	210e      	movs	r1, #14
   2adc6:	3008      	adds	r0, #8
   2adc8:	f7f1 fff2 	bl	1cdb0 <net_buf_simple_add>
   2adcc:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2adce:	220e      	movs	r2, #14
   2add0:	2100      	movs	r1, #0
   2add2:	f7ff f80a 	bl	29dea <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2add6:	8833      	ldrh	r3, [r6, #0]
   2add8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2adda:	882b      	ldrh	r3, [r5, #0]
   2addc:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2adde:	886b      	ldrh	r3, [r5, #2]
   2ade0:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2ade2:	88ab      	ldrh	r3, [r5, #4]
   2ade4:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2ade6:	88eb      	ldrh	r3, [r5, #6]
   2ade8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2adea:	2200      	movs	r2, #0
   2adec:	4639      	mov	r1, r7
   2adee:	f242 0013 	movw	r0, #8211	; 0x2013
   2adf2:	f7e9 fe51 	bl	14a98 <bt_hci_cmd_send_sync>
}
   2adf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2adf8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2adfc:	e7fb      	b.n	2adf6 <bt_conn_le_conn_update+0x46>

0002adfe <l2cap_connected>:
}
   2adfe:	4770      	bx	lr

0002ae00 <l2cap_disconnected>:
}
   2ae00:	4770      	bx	lr

0002ae02 <l2cap_chan_recv>:
{
   2ae02:	b510      	push	{r4, lr}
   2ae04:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   2ae06:	6843      	ldr	r3, [r0, #4]
   2ae08:	695b      	ldr	r3, [r3, #20]
   2ae0a:	4798      	blx	r3
	net_buf_unref(buf);
   2ae0c:	4620      	mov	r0, r4
   2ae0e:	f7f1 fecd 	bl	1cbac <net_buf_unref>
}
   2ae12:	bd10      	pop	{r4, pc}

0002ae14 <bt_l2cap_chan_del>:
{
   2ae14:	b538      	push	{r3, r4, r5, lr}
   2ae16:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   2ae18:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   2ae1a:	6803      	ldr	r3, [r0, #0]
   2ae1c:	b123      	cbz	r3, 2ae28 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2ae1e:	686b      	ldr	r3, [r5, #4]
   2ae20:	b103      	cbz	r3, 2ae24 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2ae22:	4798      	blx	r3
	chan->conn = NULL;
   2ae24:	2300      	movs	r3, #0
   2ae26:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2ae28:	68e3      	ldr	r3, [r4, #12]
   2ae2a:	b10b      	cbz	r3, 2ae30 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2ae2c:	4620      	mov	r0, r4
   2ae2e:	4798      	blx	r3
	if (ops->released) {
   2ae30:	6a2b      	ldr	r3, [r5, #32]
   2ae32:	b10b      	cbz	r3, 2ae38 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   2ae34:	4620      	mov	r0, r4
   2ae36:	4798      	blx	r3
}
   2ae38:	bd38      	pop	{r3, r4, r5, pc}

0002ae3a <bt_l2cap_chan_add>:
{
   2ae3a:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   2ae3c:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   2ae40:	2400      	movs	r4, #0
   2ae42:	608c      	str	r4, [r1, #8]
	return list->tail;
   2ae44:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_APPEND(slist, snode)
   2ae46:	b12c      	cbz	r4, 2ae54 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   2ae48:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2ae4a:	6583      	str	r3, [r0, #88]	; 0x58
	chan->conn = conn;
   2ae4c:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   2ae4e:	60ca      	str	r2, [r1, #12]
}
   2ae50:	bc10      	pop	{r4}
   2ae52:	4770      	bx	lr
   2ae54:	6583      	str	r3, [r0, #88]	; 0x58
	list->head = node;
   2ae56:	6543      	str	r3, [r0, #84]	; 0x54
}
   2ae58:	e7f8      	b.n	2ae4c <bt_l2cap_chan_add+0x12>

0002ae5a <bt_l2cap_disconnected>:
{
   2ae5a:	b510      	push	{r4, lr}
	return list->head;
   2ae5c:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ae5e:	b138      	cbz	r0, 2ae70 <bt_l2cap_disconnected+0x16>
   2ae60:	3808      	subs	r0, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   2ae62:	f110 0408 	adds.w	r4, r0, #8
   2ae66:	d008      	beq.n	2ae7a <bt_l2cap_disconnected+0x20>
	return node->next;
   2ae68:	6884      	ldr	r4, [r0, #8]
   2ae6a:	b134      	cbz	r4, 2ae7a <bt_l2cap_disconnected+0x20>
   2ae6c:	3c08      	subs	r4, #8
   2ae6e:	e004      	b.n	2ae7a <bt_l2cap_disconnected+0x20>
   2ae70:	4604      	mov	r4, r0
   2ae72:	e002      	b.n	2ae7a <bt_l2cap_disconnected+0x20>
   2ae74:	4623      	mov	r3, r4
   2ae76:	4620      	mov	r0, r4
   2ae78:	461c      	mov	r4, r3
   2ae7a:	b140      	cbz	r0, 2ae8e <bt_l2cap_disconnected+0x34>
		bt_l2cap_chan_del(chan);
   2ae7c:	f7ff ffca 	bl	2ae14 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ae80:	2c00      	cmp	r4, #0
   2ae82:	d0f7      	beq.n	2ae74 <bt_l2cap_disconnected+0x1a>
   2ae84:	68a3      	ldr	r3, [r4, #8]
   2ae86:	2b00      	cmp	r3, #0
   2ae88:	d0f5      	beq.n	2ae76 <bt_l2cap_disconnected+0x1c>
   2ae8a:	3b08      	subs	r3, #8
   2ae8c:	e7f3      	b.n	2ae76 <bt_l2cap_disconnected+0x1c>
}
   2ae8e:	bd10      	pop	{r4, pc}

0002ae90 <bt_l2cap_security_changed>:
{
   2ae90:	b538      	push	{r3, r4, r5, lr}
   2ae92:	460d      	mov	r5, r1
	return list->head;
   2ae94:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ae96:	b138      	cbz	r0, 2aea8 <bt_l2cap_security_changed+0x18>
   2ae98:	3808      	subs	r0, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   2ae9a:	f110 0408 	adds.w	r4, r0, #8
   2ae9e:	d008      	beq.n	2aeb2 <bt_l2cap_security_changed+0x22>
	return node->next;
   2aea0:	6884      	ldr	r4, [r0, #8]
   2aea2:	b134      	cbz	r4, 2aeb2 <bt_l2cap_security_changed+0x22>
   2aea4:	3c08      	subs	r4, #8
   2aea6:	e004      	b.n	2aeb2 <bt_l2cap_security_changed+0x22>
   2aea8:	4604      	mov	r4, r0
   2aeaa:	e002      	b.n	2aeb2 <bt_l2cap_security_changed+0x22>
   2aeac:	4623      	mov	r3, r4
   2aeae:	4620      	mov	r0, r4
   2aeb0:	461c      	mov	r4, r3
   2aeb2:	b158      	cbz	r0, 2aecc <bt_l2cap_security_changed+0x3c>
		if (chan->ops->encrypt_change) {
   2aeb4:	6843      	ldr	r3, [r0, #4]
   2aeb6:	689b      	ldr	r3, [r3, #8]
   2aeb8:	b10b      	cbz	r3, 2aebe <bt_l2cap_security_changed+0x2e>
			chan->ops->encrypt_change(chan, hci_status);
   2aeba:	4629      	mov	r1, r5
   2aebc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2aebe:	2c00      	cmp	r4, #0
   2aec0:	d0f4      	beq.n	2aeac <bt_l2cap_security_changed+0x1c>
   2aec2:	68a3      	ldr	r3, [r4, #8]
   2aec4:	2b00      	cmp	r3, #0
   2aec6:	d0f2      	beq.n	2aeae <bt_l2cap_security_changed+0x1e>
   2aec8:	3b08      	subs	r3, #8
   2aeca:	e7f0      	b.n	2aeae <bt_l2cap_security_changed+0x1e>
}
   2aecc:	bd38      	pop	{r3, r4, r5, pc}

0002aece <bt_l2cap_create_pdu_timeout>:
{
   2aece:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   2aed0:	3104      	adds	r1, #4
   2aed2:	f7ec f9af 	bl	17234 <bt_conn_create_pdu_timeout>
}
   2aed6:	bd08      	pop	{r3, pc}

0002aed8 <bt_l2cap_send_cb>:
{
   2aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aeda:	4605      	mov	r5, r0
   2aedc:	460f      	mov	r7, r1
   2aede:	4614      	mov	r4, r2
   2aee0:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   2aee2:	2104      	movs	r1, #4
   2aee4:	f102 0008 	add.w	r0, r2, #8
   2aee8:	f7f1 ff44 	bl	1cd74 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2aeec:	89a3      	ldrh	r3, [r4, #12]
   2aeee:	3b04      	subs	r3, #4
   2aef0:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   2aef2:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2aef4:	9b06      	ldr	r3, [sp, #24]
   2aef6:	4632      	mov	r2, r6
   2aef8:	4621      	mov	r1, r4
   2aefa:	4628      	mov	r0, r5
   2aefc:	f7eb fffe 	bl	16efc <bt_conn_send_cb>
}
   2af00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002af02 <l2cap_send>:
{
   2af02:	b510      	push	{r4, lr}
   2af04:	b082      	sub	sp, #8
   2af06:	4614      	mov	r4, r2
   2af08:	2300      	movs	r3, #0
   2af0a:	9300      	str	r3, [sp, #0]
   2af0c:	f7ff ffe4 	bl	2aed8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2af10:	b908      	cbnz	r0, 2af16 <l2cap_send+0x14>
}
   2af12:	b002      	add	sp, #8
   2af14:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
   2af16:	4620      	mov	r0, r4
   2af18:	f7f1 fe48 	bl	1cbac <net_buf_unref>
}
   2af1c:	e7f9      	b.n	2af12 <l2cap_send+0x10>

0002af1e <l2cap_send_reject>:
{
   2af1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2af22:	4606      	mov	r6, r0
   2af24:	4690      	mov	r8, r2
   2af26:	461c      	mov	r4, r3
   2af28:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2af2c:	1cbb      	adds	r3, r7, #2
   2af2e:	460a      	mov	r2, r1
   2af30:	2101      	movs	r1, #1
   2af32:	2000      	movs	r0, #0
   2af34:	f7ec fd88 	bl	17a48 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2af38:	b198      	cbz	r0, 2af62 <l2cap_send_reject+0x44>
   2af3a:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   2af3c:	f100 0908 	add.w	r9, r0, #8
   2af40:	2102      	movs	r1, #2
   2af42:	4648      	mov	r0, r9
   2af44:	f7f1 ff34 	bl	1cdb0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2af48:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   2af4c:	b124      	cbz	r4, 2af58 <l2cap_send_reject+0x3a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2af4e:	463a      	mov	r2, r7
   2af50:	4621      	mov	r1, r4
   2af52:	4648      	mov	r0, r9
   2af54:	f002 fa39 	bl	2d3ca <net_buf_simple_add_mem>
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   2af58:	462a      	mov	r2, r5
   2af5a:	2105      	movs	r1, #5
   2af5c:	4630      	mov	r0, r6
   2af5e:	f7ff ffd0 	bl	2af02 <l2cap_send>
}
   2af62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002af66 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2af66:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2af68:	b110      	cbz	r0, 2af70 <bt_l2cap_le_lookup_tx_cid+0xa>
   2af6a:	3808      	subs	r0, #8
   2af6c:	e000      	b.n	2af70 <bt_l2cap_le_lookup_tx_cid+0xa>
   2af6e:	4618      	mov	r0, r3
   2af70:	b150      	cbz	r0, 2af88 <bt_l2cap_le_lookup_tx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2af72:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   2af74:	428b      	cmp	r3, r1
   2af76:	d007      	beq.n	2af88 <bt_l2cap_le_lookup_tx_cid+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2af78:	f110 0308 	adds.w	r3, r0, #8
   2af7c:	d0f7      	beq.n	2af6e <bt_l2cap_le_lookup_tx_cid+0x8>
	return node->next;
   2af7e:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2af80:	2800      	cmp	r0, #0
   2af82:	d0f5      	beq.n	2af70 <bt_l2cap_le_lookup_tx_cid+0xa>
   2af84:	3808      	subs	r0, #8
   2af86:	e7f3      	b.n	2af70 <bt_l2cap_le_lookup_tx_cid+0xa>
}
   2af88:	4770      	bx	lr

0002af8a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2af8a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2af8c:	b110      	cbz	r0, 2af94 <bt_l2cap_le_lookup_rx_cid+0xa>
   2af8e:	3808      	subs	r0, #8
   2af90:	e000      	b.n	2af94 <bt_l2cap_le_lookup_rx_cid+0xa>
   2af92:	4618      	mov	r0, r3
   2af94:	b150      	cbz	r0, 2afac <bt_l2cap_le_lookup_rx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2af96:	8a83      	ldrh	r3, [r0, #20]
   2af98:	428b      	cmp	r3, r1
   2af9a:	d007      	beq.n	2afac <bt_l2cap_le_lookup_rx_cid+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2af9c:	f110 0308 	adds.w	r3, r0, #8
   2afa0:	d0f7      	beq.n	2af92 <bt_l2cap_le_lookup_rx_cid+0x8>
	return node->next;
   2afa2:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2afa4:	2800      	cmp	r0, #0
   2afa6:	d0f5      	beq.n	2af94 <bt_l2cap_le_lookup_rx_cid+0xa>
   2afa8:	3808      	subs	r0, #8
   2afaa:	e7f3      	b.n	2af94 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   2afac:	4770      	bx	lr

0002afae <bt_l2cap_update_conn_param>:
{
   2afae:	b570      	push	{r4, r5, r6, lr}
   2afb0:	b082      	sub	sp, #8
   2afb2:	4605      	mov	r5, r0
   2afb4:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2afb6:	f7ec fc9f 	bl	178f8 <get_ident>
   2afba:	4602      	mov	r2, r0
   2afbc:	2308      	movs	r3, #8
   2afbe:	2112      	movs	r1, #18
   2afc0:	2000      	movs	r0, #0
   2afc2:	f7ec fd41 	bl	17a48 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2afc6:	b1e0      	cbz	r0, 2b002 <bt_l2cap_update_conn_param+0x54>
   2afc8:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2afca:	2108      	movs	r1, #8
   2afcc:	4408      	add	r0, r1
   2afce:	f7f1 feef 	bl	1cdb0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2afd2:	8823      	ldrh	r3, [r4, #0]
   2afd4:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2afd6:	8863      	ldrh	r3, [r4, #2]
   2afd8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2afda:	88a3      	ldrh	r3, [r4, #4]
   2afdc:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2afde:	88e3      	ldrh	r3, [r4, #6]
   2afe0:	80c3      	strh	r3, [r0, #6]
   2afe2:	2300      	movs	r3, #0
   2afe4:	9300      	str	r3, [sp, #0]
   2afe6:	4632      	mov	r2, r6
   2afe8:	2105      	movs	r1, #5
   2afea:	4628      	mov	r0, r5
   2afec:	f7ff ff74 	bl	2aed8 <bt_l2cap_send_cb>
	if (err) {
   2aff0:	4604      	mov	r4, r0
   2aff2:	b910      	cbnz	r0, 2affa <bt_l2cap_update_conn_param+0x4c>
}
   2aff4:	4620      	mov	r0, r4
   2aff6:	b002      	add	sp, #8
   2aff8:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2affa:	4630      	mov	r0, r6
   2affc:	f7f1 fdd6 	bl	1cbac <net_buf_unref>
		return err;
   2b000:	e7f8      	b.n	2aff4 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   2b002:	f06f 040b 	mvn.w	r4, #11
   2b006:	e7f5      	b.n	2aff4 <bt_l2cap_update_conn_param+0x46>

0002b008 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2b008:	4770      	bx	lr

0002b00a <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2b00a:	460b      	mov	r3, r1
   2b00c:	b139      	cbz	r1, 2b01e <sys_slist_remove+0x14>
	return node->next;
   2b00e:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2b010:	6019      	str	r1, [r3, #0]
	return list->tail;
   2b012:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b014:	428a      	cmp	r2, r1
   2b016:	d009      	beq.n	2b02c <sys_slist_remove+0x22>
	parent->next = child;
   2b018:	2300      	movs	r3, #0
   2b01a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b01c:	4770      	bx	lr
	return node->next;
   2b01e:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2b020:	6003      	str	r3, [r0, #0]
	return list->tail;
   2b022:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b024:	428a      	cmp	r2, r1
   2b026:	d1f7      	bne.n	2b018 <sys_slist_remove+0xe>
	list->tail = node;
   2b028:	6043      	str	r3, [r0, #4]
}
   2b02a:	e7f5      	b.n	2b018 <sys_slist_remove+0xe>
	list->tail = node;
   2b02c:	6043      	str	r3, [r0, #4]
}
   2b02e:	e7f3      	b.n	2b018 <sys_slist_remove+0xe>

0002b030 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b030:	b508      	push	{r3, lr}
   2b032:	460a      	mov	r2, r1
	return list->head;
   2b034:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b036:	2100      	movs	r1, #0
   2b038:	e001      	b.n	2b03e <sys_slist_find_and_remove+0xe>
   2b03a:	4619      	mov	r1, r3
   2b03c:	681b      	ldr	r3, [r3, #0]
   2b03e:	b12b      	cbz	r3, 2b04c <sys_slist_find_and_remove+0x1c>
   2b040:	4293      	cmp	r3, r2
   2b042:	d1fa      	bne.n	2b03a <sys_slist_find_and_remove+0xa>
   2b044:	f7ff ffe1 	bl	2b00a <sys_slist_remove>
   2b048:	2001      	movs	r0, #1
   2b04a:	e000      	b.n	2b04e <sys_slist_find_and_remove+0x1e>
   2b04c:	2000      	movs	r0, #0
   2b04e:	bd08      	pop	{r3, pc}

0002b050 <get_first_req_matching_chan>:
{
   2b050:	4603      	mov	r3, r0
	return list->head;
   2b052:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2b054:	b120      	cbz	r0, 2b060 <get_first_req_matching_chan+0x10>
	return node->next;
   2b056:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2b058:	601a      	str	r2, [r3, #0]
	return list->tail;
   2b05a:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b05c:	4288      	cmp	r0, r1
   2b05e:	d000      	beq.n	2b062 <get_first_req_matching_chan+0x12>
}
   2b060:	4770      	bx	lr
	list->tail = node;
   2b062:	605a      	str	r2, [r3, #4]
		return ATT_REQ(node);
   2b064:	e7fc      	b.n	2b060 <get_first_req_matching_chan+0x10>

0002b066 <range_is_valid>:
	if (!start || !end) {
   2b066:	b120      	cbz	r0, 2b072 <range_is_valid+0xc>
   2b068:	b119      	cbz	r1, 2b072 <range_is_valid+0xc>
	if (start > end) {
   2b06a:	4288      	cmp	r0, r1
   2b06c:	d806      	bhi.n	2b07c <range_is_valid+0x16>
	return true;
   2b06e:	2001      	movs	r0, #1
}
   2b070:	4770      	bx	lr
		if (err) {
   2b072:	b10a      	cbz	r2, 2b078 <range_is_valid+0x12>
			*err = 0U;
   2b074:	2300      	movs	r3, #0
   2b076:	8013      	strh	r3, [r2, #0]
		return false;
   2b078:	2000      	movs	r0, #0
   2b07a:	4770      	bx	lr
		if (err) {
   2b07c:	b102      	cbz	r2, 2b080 <range_is_valid+0x1a>
			*err = start;
   2b07e:	8010      	strh	r0, [r2, #0]
		return false;
   2b080:	2000      	movs	r0, #0
   2b082:	4770      	bx	lr

0002b084 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2b084:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2b088:	d201      	bcs.n	2b08e <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   2b08a:	200e      	movs	r0, #14
}
   2b08c:	4770      	bx	lr
		return -err;
   2b08e:	4240      	negs	r0, r0
   2b090:	b2c0      	uxtb	r0, r0
   2b092:	4770      	bx	lr

0002b094 <attr_read_type_cb>:
{
   2b094:	b410      	push	{r4}
	if (!data->rsp->len) {
   2b096:	68d4      	ldr	r4, [r2, #12]
   2b098:	7823      	ldrb	r3, [r4, #0]
   2b09a:	b923      	cbnz	r3, 2b0a6 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   2b09c:	3102      	adds	r1, #2
   2b09e:	7021      	strb	r1, [r4, #0]
	return true;
   2b0a0:	2001      	movs	r0, #1
}
   2b0a2:	bc10      	pop	{r4}
   2b0a4:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2b0a6:	3102      	adds	r1, #2
   2b0a8:	428b      	cmp	r3, r1
   2b0aa:	d005      	beq.n	2b0b8 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   2b0ac:	8983      	ldrh	r3, [r0, #12]
   2b0ae:	3b02      	subs	r3, #2
   2b0b0:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2b0b2:	2000      	movs	r0, #0
   2b0b4:	6110      	str	r0, [r2, #16]
		return false;
   2b0b6:	e7f4      	b.n	2b0a2 <attr_read_type_cb+0xe>
	return true;
   2b0b8:	2001      	movs	r0, #1
   2b0ba:	e7f2      	b.n	2b0a2 <attr_read_type_cb+0xe>

0002b0bc <attr_read_group_cb>:
	if (!data->rsp->len) {
   2b0bc:	68d0      	ldr	r0, [r2, #12]
   2b0be:	7803      	ldrb	r3, [r0, #0]
   2b0c0:	b91b      	cbnz	r3, 2b0ca <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2b0c2:	3104      	adds	r1, #4
   2b0c4:	7001      	strb	r1, [r0, #0]
	return true;
   2b0c6:	2001      	movs	r0, #1
   2b0c8:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2b0ca:	3104      	adds	r1, #4
   2b0cc:	428b      	cmp	r3, r1
   2b0ce:	d006      	beq.n	2b0de <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   2b0d0:	6891      	ldr	r1, [r2, #8]
   2b0d2:	898b      	ldrh	r3, [r1, #12]
   2b0d4:	3b04      	subs	r3, #4
   2b0d6:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2b0d8:	2000      	movs	r0, #0
   2b0da:	6110      	str	r0, [r2, #16]
		return false;
   2b0dc:	4770      	bx	lr
	return true;
   2b0de:	2001      	movs	r0, #1
}
   2b0e0:	4770      	bx	lr

0002b0e2 <att_prepare_write_req>:
}
   2b0e2:	2006      	movs	r0, #6
   2b0e4:	4770      	bx	lr

0002b0e6 <att_exec_write_req>:
}
   2b0e6:	2006      	movs	r0, #6
   2b0e8:	4770      	bx	lr

0002b0ea <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2b0ea:	094b      	lsrs	r3, r1, #5
   2b0ec:	f3bf 8f5b 	dmb	ish
   2b0f0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2b0f4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b0f8:	f001 011f 	and.w	r1, r1, #31
   2b0fc:	4108      	asrs	r0, r1
}
   2b0fe:	f000 0001 	and.w	r0, r0, #1
   2b102:	4770      	bx	lr

0002b104 <att_chan_attach>:
{
   2b104:	b538      	push	{r3, r4, r5, lr}
   2b106:	4604      	mov	r4, r0
   2b108:	460d      	mov	r5, r1
	return list->head;
   2b10a:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (sys_slist_is_empty(&att->chans)) {
   2b10c:	b143      	cbz	r3, 2b120 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   2b10e:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   2b112:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   2b114:	f8c5 20f0 	str.w	r2, [r5, #240]	; 0xf0
	list->head = node;
   2b118:	62a3      	str	r3, [r4, #40]	; 0x28
	return list->tail;
   2b11a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   2b11c:	b122      	cbz	r2, 2b128 <att_chan_attach+0x24>
}
   2b11e:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   2b120:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   2b122:	f004 f859 	bl	2f1d8 <z_impl_k_queue_init>
}
   2b126:	e7f2      	b.n	2b10e <att_chan_attach+0xa>
	list->tail = node;
   2b128:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   2b12a:	e7f8      	b.n	2b11e <att_chan_attach+0x1a>

0002b12c <chan_tx_complete>:
{
   2b12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b130:	4605      	mov	r5, r0
   2b132:	4608      	mov	r0, r1
   2b134:	4614      	mov	r4, r2
	bt_gatt_complete_func_t func = data->func;
   2b136:	688e      	ldr	r6, [r1, #8]
	uint16_t attr_count = data->attr_count;
   2b138:	888f      	ldrh	r7, [r1, #4]
	void *ud = data->user_data;
   2b13a:	f8d1 800c 	ldr.w	r8, [r1, #12]
	tx_meta_data_free(data);
   2b13e:	f7ec fe63 	bl	17e08 <tx_meta_data_free>
	if (!err && func) {
   2b142:	b94c      	cbnz	r4, 2b158 <chan_tx_complete+0x2c>
   2b144:	b146      	cbz	r6, 2b158 <chan_tx_complete+0x2c>
		for (uint16_t i = 0; i < attr_count; i++) {
   2b146:	2400      	movs	r4, #0
   2b148:	e004      	b.n	2b154 <chan_tx_complete+0x28>
			func(conn, ud);
   2b14a:	4641      	mov	r1, r8
   2b14c:	4628      	mov	r0, r5
   2b14e:	47b0      	blx	r6
		for (uint16_t i = 0; i < attr_count; i++) {
   2b150:	3401      	adds	r4, #1
   2b152:	b2a4      	uxth	r4, r4
   2b154:	42a7      	cmp	r7, r4
   2b156:	d8f8      	bhi.n	2b14a <chan_tx_complete+0x1e>
}
   2b158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b15c <bt_att_chan_send>:
{
   2b15c:	b508      	push	{r3, lr}
	return chan_send(chan, buf);
   2b15e:	f7ec fe6f 	bl	17e40 <chan_send>
}
   2b162:	bd08      	pop	{r3, pc}

0002b164 <chan_req_send>:
{
   2b164:	b570      	push	{r4, r5, r6, lr}
   2b166:	4605      	mov	r5, r0
   2b168:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b16a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   2b16c:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2b16e:	2200      	movs	r2, #0
	while (buf) {
   2b170:	e003      	b.n	2b17a <chan_req_send+0x16>
		bytes += buf->len;
   2b172:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   2b176:	4462      	add	r2, ip
		buf = buf->frags;
   2b178:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2b17a:	2b00      	cmp	r3, #0
   2b17c:	d1f9      	bne.n	2b172 <chan_req_send+0xe>
   2b17e:	4291      	cmp	r1, r2
   2b180:	d30d      	bcc.n	2b19e <chan_req_send+0x3a>
	chan->req = req;
   2b182:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
	buf = req->buf;
   2b186:	68a6      	ldr	r6, [r4, #8]
	req->buf = NULL;
   2b188:	60a3      	str	r3, [r4, #8]
	err = bt_att_chan_send(chan, buf);
   2b18a:	4631      	mov	r1, r6
   2b18c:	4628      	mov	r0, r5
   2b18e:	f7ff ffe5 	bl	2b15c <bt_att_chan_send>
	if (err) {
   2b192:	b118      	cbz	r0, 2b19c <chan_req_send+0x38>
		req->buf = buf;
   2b194:	60a6      	str	r6, [r4, #8]
		chan->req = NULL;
   2b196:	2300      	movs	r3, #0
   2b198:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
}
   2b19c:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2b19e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2b1a2:	e7fb      	b.n	2b19c <chan_req_send+0x38>

0002b1a4 <bt_att_status>:
{
   2b1a4:	b570      	push	{r4, r5, r6, lr}
   2b1a6:	4604      	mov	r4, r0
   2b1a8:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2b1aa:	2100      	movs	r1, #0
   2b1ac:	f7ff ff9d 	bl	2b0ea <atomic_test_bit>
   2b1b0:	b130      	cbz	r0, 2b1c0 <bt_att_status+0x1c>
   2b1b2:	1f26      	subs	r6, r4, #4
	if (!chan->att) {
   2b1b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2b1b8:	b113      	cbz	r3, 2b1c0 <bt_att_status+0x1c>
	if (chan->req) {
   2b1ba:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   2b1be:	b102      	cbz	r2, 2b1c2 <bt_att_status+0x1e>
}
   2b1c0:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   2b1c2:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2b1c4:	2d00      	cmp	r5, #0
   2b1c6:	d0fb      	beq.n	2b1c0 <bt_att_status+0x1c>
	return node->next;
   2b1c8:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   2b1ca:	605a      	str	r2, [r3, #4]
	return list->tail;
   2b1cc:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b1ce:	42a9      	cmp	r1, r5
   2b1d0:	d00f      	beq.n	2b1f2 <bt_att_status+0x4e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b1d2:	4629      	mov	r1, r5
   2b1d4:	4630      	mov	r0, r6
   2b1d6:	f7ec fe7f 	bl	17ed8 <bt_att_chan_req_send>
   2b1da:	2800      	cmp	r0, #0
   2b1dc:	daf0      	bge.n	2b1c0 <bt_att_status+0x1c>
	sys_slist_prepend(&chan->att->reqs, node);
   2b1de:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return list->head;
   2b1e2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2b1e4:	602a      	str	r2, [r5, #0]
	list->head = node;
   2b1e6:	605d      	str	r5, [r3, #4]
	return list->tail;
   2b1e8:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   2b1ea:	2a00      	cmp	r2, #0
   2b1ec:	d1e8      	bne.n	2b1c0 <bt_att_status+0x1c>
	list->tail = node;
   2b1ee:	609d      	str	r5, [r3, #8]
}
   2b1f0:	e7e6      	b.n	2b1c0 <bt_att_status+0x1c>
	list->tail = node;
   2b1f2:	609a      	str	r2, [r3, #8]
	if (!node) {
   2b1f4:	e7ed      	b.n	2b1d2 <bt_att_status+0x2e>

0002b1f6 <att_req_send_process>:
{
   2b1f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b1fa:	4607      	mov	r7, r0
	return list->head;
   2b1fc:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b1fe:	b3ac      	cbz	r4, 2b26c <att_req_send_process+0x76>
   2b200:	3cf0      	subs	r4, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b202:	f114 05f0 	adds.w	r5, r4, #240	; 0xf0
   2b206:	d003      	beq.n	2b210 <att_req_send_process+0x1a>
	return node->next;
   2b208:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   2b20c:	b105      	cbz	r5, 2b210 <att_req_send_process+0x1a>
   2b20e:	3df0      	subs	r5, #240	; 0xf0
   2b210:	f04f 0800 	mov.w	r8, #0
   2b214:	4646      	mov	r6, r8
   2b216:	e02e      	b.n	2b276 <att_req_send_process+0x80>
		if (!req && prev &&
   2b218:	b196      	cbz	r6, 2b240 <att_req_send_process+0x4a>
		req = get_first_req_matching_chan(&att->reqs, chan);
   2b21a:	4621      	mov	r1, r4
   2b21c:	1d38      	adds	r0, r7, #4
   2b21e:	f7ff ff17 	bl	2b050 <get_first_req_matching_chan>
		if (!req) {
   2b222:	4606      	mov	r6, r0
   2b224:	b300      	cbz	r0, 2b268 <att_req_send_process+0x72>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2b226:	4601      	mov	r1, r0
   2b228:	4620      	mov	r0, r4
   2b22a:	f7ec fe55 	bl	17ed8 <bt_att_chan_req_send>
   2b22e:	2800      	cmp	r0, #0
   2b230:	da2e      	bge.n	2b290 <att_req_send_process+0x9a>
	return list->head;
   2b232:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   2b234:	6033      	str	r3, [r6, #0]
	list->head = node;
   2b236:	607e      	str	r6, [r7, #4]
	return list->tail;
   2b238:	68bb      	ldr	r3, [r7, #8]
Z_GENLIST_PREPEND(slist, snode)
   2b23a:	b193      	cbz	r3, 2b262 <att_req_send_process+0x6c>
		prev = chan;
   2b23c:	46a0      	mov	r8, r4
   2b23e:	e01f      	b.n	2b280 <att_req_send_process+0x8a>
		if (!req && prev &&
   2b240:	f1b8 0f00 	cmp.w	r8, #0
   2b244:	d0e9      	beq.n	2b21a <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2b246:	2103      	movs	r1, #3
   2b248:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2b24c:	f7ff ff4d 	bl	2b0ea <atomic_test_bit>
   2b250:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2b252:	2103      	movs	r1, #3
   2b254:	f108 0098 	add.w	r0, r8, #152	; 0x98
   2b258:	f7ff ff47 	bl	2b0ea <atomic_test_bit>
		if (!req && prev &&
   2b25c:	4581      	cmp	r9, r0
   2b25e:	d1dc      	bne.n	2b21a <att_req_send_process+0x24>
   2b260:	e00e      	b.n	2b280 <att_req_send_process+0x8a>
	list->tail = node;
   2b262:	60be      	str	r6, [r7, #8]
		prev = chan;
   2b264:	46a0      	mov	r8, r4
}
   2b266:	e00b      	b.n	2b280 <att_req_send_process+0x8a>
   2b268:	46a0      	mov	r8, r4
   2b26a:	e009      	b.n	2b280 <att_req_send_process+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b26c:	4625      	mov	r5, r4
   2b26e:	e7cf      	b.n	2b210 <att_req_send_process+0x1a>
   2b270:	462b      	mov	r3, r5
   2b272:	462c      	mov	r4, r5
   2b274:	461d      	mov	r5, r3
   2b276:	b15c      	cbz	r4, 2b290 <att_req_send_process+0x9a>
		if (chan->req) {
   2b278:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   2b27c:	2b00      	cmp	r3, #0
   2b27e:	d0cb      	beq.n	2b218 <att_req_send_process+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b280:	2d00      	cmp	r5, #0
   2b282:	d0f5      	beq.n	2b270 <att_req_send_process+0x7a>
	return node->next;
   2b284:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   2b288:	2b00      	cmp	r3, #0
   2b28a:	d0f2      	beq.n	2b272 <att_req_send_process+0x7c>
   2b28c:	3bf0      	subs	r3, #240	; 0xf0
   2b28e:	e7f0      	b.n	2b272 <att_req_send_process+0x7c>
}
   2b290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b294 <chan_req_sent>:
{
   2b294:	b510      	push	{r4, lr}
   2b296:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   2b298:	6808      	ldr	r0, [r1, #0]
	if (chan->req) {
   2b29a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2b29e:	b12b      	cbz	r3, 2b2ac <chan_req_sent+0x18>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2b2a0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2b2a4:	2300      	movs	r3, #0
   2b2a6:	30c0      	adds	r0, #192	; 0xc0
   2b2a8:	f7f7 ff58 	bl	2315c <k_work_reschedule>
	tx_meta_data_free(user_data);
   2b2ac:	4620      	mov	r0, r4
   2b2ae:	f7ec fdab 	bl	17e08 <tx_meta_data_free>
}
   2b2b2:	bd10      	pop	{r4, pc}

0002b2b4 <chan_cfm_sent>:
{
   2b2b4:	b508      	push	{r3, lr}
   2b2b6:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   2b2b8:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   2b2ba:	3398      	adds	r3, #152	; 0x98
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b2bc:	f3bf 8f5b 	dmb	ish
   2b2c0:	e853 1f00 	ldrex	r1, [r3]
   2b2c4:	f021 0102 	bic.w	r1, r1, #2
   2b2c8:	e843 1200 	strex	r2, r1, [r3]
   2b2cc:	2a00      	cmp	r2, #0
   2b2ce:	d1f7      	bne.n	2b2c0 <chan_cfm_sent+0xc>
   2b2d0:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2b2d4:	f7ec fd98 	bl	17e08 <tx_meta_data_free>
}
   2b2d8:	bd08      	pop	{r3, pc}

0002b2da <chan_rsp_sent>:
{
   2b2da:	b508      	push	{r3, lr}
   2b2dc:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   2b2de:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2b2e0:	3398      	adds	r3, #152	; 0x98
   2b2e2:	f3bf 8f5b 	dmb	ish
   2b2e6:	e853 1f00 	ldrex	r1, [r3]
   2b2ea:	f021 0101 	bic.w	r1, r1, #1
   2b2ee:	e843 1200 	strex	r2, r1, [r3]
   2b2f2:	2a00      	cmp	r2, #0
   2b2f4:	d1f7      	bne.n	2b2e6 <chan_rsp_sent+0xc>
   2b2f6:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2b2fa:	f7ec fd85 	bl	17e08 <tx_meta_data_free>
}
   2b2fe:	bd08      	pop	{r3, pc}

0002b300 <get_first_buf_matching_chan>:
{
   2b300:	b508      	push	{r3, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2b302:	2200      	movs	r2, #0
   2b304:	2300      	movs	r3, #0
   2b306:	f7f1 fafb 	bl	1c900 <net_buf_get>
}
   2b30a:	bd08      	pop	{r3, pc}

0002b30c <process_queue>:
{
   2b30c:	b570      	push	{r4, r5, r6, lr}
   2b30e:	4604      	mov	r4, r0
   2b310:	460d      	mov	r5, r1
	buf = get_first_buf_matching_chan(queue, chan);
   2b312:	4601      	mov	r1, r0
   2b314:	4628      	mov	r0, r5
   2b316:	f7ff fff3 	bl	2b300 <get_first_buf_matching_chan>
	if (buf) {
   2b31a:	b168      	cbz	r0, 2b338 <process_queue+0x2c>
   2b31c:	4606      	mov	r6, r0
		err = bt_att_chan_send(chan, buf);
   2b31e:	4601      	mov	r1, r0
   2b320:	4620      	mov	r0, r4
   2b322:	f7ff ff1b 	bl	2b15c <bt_att_chan_send>
		if (err) {
   2b326:	4604      	mov	r4, r0
   2b328:	b908      	cbnz	r0, 2b32e <process_queue+0x22>
}
   2b32a:	4620      	mov	r0, r4
   2b32c:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2b32e:	4631      	mov	r1, r6
   2b330:	4628      	mov	r0, r5
   2b332:	f003 ff6a 	bl	2f20a <k_queue_prepend>
			return err;
   2b336:	e7f8      	b.n	2b32a <process_queue+0x1e>
	return -ENOENT;
   2b338:	f06f 0401 	mvn.w	r4, #1
   2b33c:	e7f5      	b.n	2b32a <process_queue+0x1e>

0002b33e <bt_att_sent>:
{
   2b33e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b340:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2b342:	1f06      	subs	r6, r0, #4
	struct bt_att *att = chan->att;
   2b344:	f850 5c04 	ldr.w	r5, [r0, #-4]
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2b348:	f100 0394 	add.w	r3, r0, #148	; 0x94
   2b34c:	f3bf 8f5b 	dmb	ish
   2b350:	e853 1f00 	ldrex	r1, [r3]
   2b354:	f021 0110 	bic.w	r1, r1, #16
   2b358:	e843 1200 	strex	r2, r1, [r3]
   2b35c:	2a00      	cmp	r2, #0
   2b35e:	d1f7      	bne.n	2b350 <bt_att_sent+0x12>
   2b360:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2b364:	b145      	cbz	r5, 2b378 <bt_att_sent+0x3a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2b366:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2b36a:	b133      	cbz	r3, 2b37a <bt_att_sent+0x3c>
	err = process_queue(chan, &chan->tx_queue);
   2b36c:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   2b370:	4630      	mov	r0, r6
   2b372:	f7ff ffcb 	bl	2b30c <process_queue>
	if (!err) {
   2b376:	b9c0      	cbnz	r0, 2b3aa <bt_att_sent+0x6c>
}
   2b378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   2b37a:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2b37c:	2f00      	cmp	r7, #0
   2b37e:	d0f5      	beq.n	2b36c <bt_att_sent+0x2e>
	return node->next;
   2b380:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   2b382:	606b      	str	r3, [r5, #4]
	return list->tail;
   2b384:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b386:	42ba      	cmp	r2, r7
   2b388:	d00d      	beq.n	2b3a6 <bt_att_sent+0x68>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b38a:	4639      	mov	r1, r7
   2b38c:	4630      	mov	r0, r6
   2b38e:	f7ff fee9 	bl	2b164 <chan_req_send>
   2b392:	2800      	cmp	r0, #0
   2b394:	daf0      	bge.n	2b378 <bt_att_sent+0x3a>
	return list->head;
   2b396:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2b398:	603b      	str	r3, [r7, #0]
	list->head = node;
   2b39a:	606f      	str	r7, [r5, #4]
	return list->tail;
   2b39c:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2b39e:	2b00      	cmp	r3, #0
   2b3a0:	d1e4      	bne.n	2b36c <bt_att_sent+0x2e>
	list->tail = node;
   2b3a2:	60af      	str	r7, [r5, #8]
}
   2b3a4:	e7e2      	b.n	2b36c <bt_att_sent+0x2e>
	list->tail = node;
   2b3a6:	60ab      	str	r3, [r5, #8]
}
   2b3a8:	e7ef      	b.n	2b38a <bt_att_sent+0x4c>
	(void)process_queue(chan, &att->tx_queue);
   2b3aa:	f105 010c 	add.w	r1, r5, #12
   2b3ae:	4630      	mov	r0, r6
   2b3b0:	f7ff ffac 	bl	2b30c <process_queue>
   2b3b4:	e7e0      	b.n	2b378 <bt_att_sent+0x3a>

0002b3b6 <att_send_process>:
{
   2b3b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b3ba:	4680      	mov	r8, r0
	return list->head;
   2b3bc:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b3be:	b374      	cbz	r4, 2b41e <att_send_process+0x68>
   2b3c0:	3cf0      	subs	r4, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b3c2:	f114 05f0 	adds.w	r5, r4, #240	; 0xf0
   2b3c6:	d003      	beq.n	2b3d0 <att_send_process+0x1a>
	return node->next;
   2b3c8:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   2b3cc:	b105      	cbz	r5, 2b3d0 <att_send_process+0x1a>
   2b3ce:	3df0      	subs	r5, #240	; 0xf0
   2b3d0:	2600      	movs	r6, #0
   2b3d2:	4637      	mov	r7, r6
   2b3d4:	e00e      	b.n	2b3f4 <att_send_process+0x3e>
		err = process_queue(chan, &att->tx_queue);
   2b3d6:	f108 010c 	add.w	r1, r8, #12
   2b3da:	4620      	mov	r0, r4
   2b3dc:	f7ff ff96 	bl	2b30c <process_queue>
		if (!err) {
   2b3e0:	4606      	mov	r6, r0
   2b3e2:	b300      	cbz	r0, 2b426 <att_send_process+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b3e4:	b1ed      	cbz	r5, 2b422 <att_send_process+0x6c>
   2b3e6:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   2b3ea:	b103      	cbz	r3, 2b3ee <att_send_process+0x38>
   2b3ec:	3bf0      	subs	r3, #240	; 0xf0
   2b3ee:	4627      	mov	r7, r4
   2b3f0:	462c      	mov	r4, r5
   2b3f2:	461d      	mov	r5, r3
   2b3f4:	b1bc      	cbz	r4, 2b426 <att_send_process+0x70>
		if (err == -ENOENT && prev &&
   2b3f6:	f116 0f02 	cmn.w	r6, #2
   2b3fa:	d1ec      	bne.n	2b3d6 <att_send_process+0x20>
   2b3fc:	2f00      	cmp	r7, #0
   2b3fe:	d0ea      	beq.n	2b3d6 <att_send_process+0x20>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2b400:	2103      	movs	r1, #3
   2b402:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2b406:	f7ff fe70 	bl	2b0ea <atomic_test_bit>
   2b40a:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2b40c:	2103      	movs	r1, #3
   2b40e:	f107 0098 	add.w	r0, r7, #152	; 0x98
   2b412:	f7ff fe6a 	bl	2b0ea <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2b416:	4581      	cmp	r9, r0
   2b418:	d1dd      	bne.n	2b3d6 <att_send_process+0x20>
   2b41a:	463c      	mov	r4, r7
   2b41c:	e7e2      	b.n	2b3e4 <att_send_process+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b41e:	4625      	mov	r5, r4
   2b420:	e7d6      	b.n	2b3d0 <att_send_process+0x1a>
   2b422:	462b      	mov	r3, r5
   2b424:	e7e3      	b.n	2b3ee <att_send_process+0x38>
}
   2b426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b42a <write_cb>:
{
   2b42a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b42c:	b083      	sub	sp, #12
   2b42e:	4606      	mov	r6, r0
   2b430:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2b432:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2b436:	4601      	mov	r1, r0
   2b438:	6820      	ldr	r0, [r4, #0]
   2b43a:	f000 ff79 	bl	2c330 <bt_gatt_check_perm>
   2b43e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2b440:	bb08      	cbnz	r0, 2b486 <write_cb+0x5c>
   2b442:	4605      	mov	r5, r0
	if (!data->req) {
   2b444:	7a23      	ldrb	r3, [r4, #8]
   2b446:	b11b      	cbz	r3, 2b450 <write_cb+0x26>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2b448:	2b18      	cmp	r3, #24
   2b44a:	d016      	beq.n	2b47a <write_cb+0x50>
	uint8_t flags = 0U;
   2b44c:	4603      	mov	r3, r0
   2b44e:	e000      	b.n	2b452 <write_cb+0x28>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2b450:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2b452:	68b7      	ldr	r7, [r6, #8]
   2b454:	9301      	str	r3, [sp, #4]
   2b456:	8a63      	ldrh	r3, [r4, #18]
   2b458:	9300      	str	r3, [sp, #0]
   2b45a:	8a23      	ldrh	r3, [r4, #16]
   2b45c:	68e2      	ldr	r2, [r4, #12]
   2b45e:	4631      	mov	r1, r6
   2b460:	6820      	ldr	r0, [r4, #0]
   2b462:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2b464:	2800      	cmp	r0, #0
   2b466:	db02      	blt.n	2b46e <write_cb+0x44>
   2b468:	8a23      	ldrh	r3, [r4, #16]
   2b46a:	4298      	cmp	r0, r3
   2b46c:	d007      	beq.n	2b47e <write_cb+0x54>
		data->err = err_to_att(write);
   2b46e:	f7ff fe09 	bl	2b084 <err_to_att>
   2b472:	7520      	strb	r0, [r4, #20]
}
   2b474:	4628      	mov	r0, r5
   2b476:	b003      	add	sp, #12
   2b478:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2b47a:	2304      	movs	r3, #4
   2b47c:	e7e9      	b.n	2b452 <write_cb+0x28>
	data->err = 0U;
   2b47e:	2300      	movs	r3, #0
   2b480:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2b482:	2501      	movs	r5, #1
   2b484:	e7f6      	b.n	2b474 <write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   2b486:	2500      	movs	r5, #0
   2b488:	e7f4      	b.n	2b474 <write_cb+0x4a>

0002b48a <bt_att_chan_send_rsp>:
{
   2b48a:	b538      	push	{r3, r4, r5, lr}
   2b48c:	4604      	mov	r4, r0
   2b48e:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2b490:	f7ec fcd6 	bl	17e40 <chan_send>
	if (err) {
   2b494:	b900      	cbnz	r0, 2b498 <bt_att_chan_send_rsp+0xe>
}
   2b496:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   2b498:	4629      	mov	r1, r5
   2b49a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   2b49e:	f7f1 fb59 	bl	1cb54 <net_buf_put>
}
   2b4a2:	e7f8      	b.n	2b496 <bt_att_chan_send_rsp+0xc>

0002b4a4 <att_chan_read>:
{
   2b4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b4a8:	b085      	sub	sp, #20
   2b4aa:	4680      	mov	r8, r0
   2b4ac:	4689      	mov	r9, r1
   2b4ae:	9202      	str	r2, [sp, #8]
   2b4b0:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   2b4b2:	6843      	ldr	r3, [r0, #4]
   2b4b4:	9303      	str	r3, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b4b6:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   2b4b8:	4613      	mov	r3, r2
	size_t bytes = 0;
   2b4ba:	2200      	movs	r2, #0
	while (buf) {
   2b4bc:	e002      	b.n	2b4c4 <att_chan_read+0x20>
		bytes += buf->len;
   2b4be:	8999      	ldrh	r1, [r3, #12]
   2b4c0:	440a      	add	r2, r1
		buf = buf->frags;
   2b4c2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2b4c4:	2b00      	cmp	r3, #0
   2b4c6:	d1fa      	bne.n	2b4be <att_chan_read+0x1a>
   2b4c8:	4290      	cmp	r0, r2
   2b4ca:	d804      	bhi.n	2b4d6 <att_chan_read+0x32>
		return 0;
   2b4cc:	2400      	movs	r4, #0
}
   2b4ce:	4620      	mov	r0, r4
   2b4d0:	b005      	add	sp, #20
   2b4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   2b4d6:	9802      	ldr	r0, [sp, #8]
   2b4d8:	f7f1 fbb2 	bl	1cc40 <net_buf_frag_last>
   2b4dc:	4607      	mov	r7, r0
	size_t len, total = 0;
   2b4de:	f04f 0a00 	mov.w	sl, #0
   2b4e2:	e082      	b.n	2b5ea <att_chan_read+0x146>
		bytes += buf->len;
   2b4e4:	8999      	ldrh	r1, [r3, #12]
   2b4e6:	440a      	add	r2, r1
		buf = buf->frags;
   2b4e8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2b4ea:	2b00      	cmp	r3, #0
   2b4ec:	d1fa      	bne.n	2b4e4 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b4ee:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2b4f0:	f107 0608 	add.w	r6, r7, #8
   2b4f4:	4630      	mov	r0, r6
   2b4f6:	f001 ff5f 	bl	2d3b8 <net_buf_simple_tailroom>
   2b4fa:	4284      	cmp	r4, r0
   2b4fc:	d326      	bcc.n	2b54c <att_chan_read+0xa8>
   2b4fe:	4630      	mov	r0, r6
   2b500:	f001 ff5a 	bl	2d3b8 <net_buf_simple_tailroom>
   2b504:	4606      	mov	r6, r0
		if (!len) {
   2b506:	b36e      	cbz	r6, 2b564 <att_chan_read+0xc0>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2b508:	f8d9 4004 	ldr.w	r4, [r9, #4]
   2b50c:	68b9      	ldr	r1, [r7, #8]
   2b50e:	89ba      	ldrh	r2, [r7, #12]
   2b510:	9500      	str	r5, [sp, #0]
   2b512:	b2b3      	uxth	r3, r6
   2b514:	440a      	add	r2, r1
   2b516:	4649      	mov	r1, r9
   2b518:	9803      	ldr	r0, [sp, #12]
   2b51a:	47a0      	blx	r4
		if (read < 0) {
   2b51c:	1e04      	subs	r4, r0, #0
   2b51e:	db55      	blt.n	2b5cc <att_chan_read+0x128>
		if (cb && !cb(frag, read, user_data)) {
   2b520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b522:	b12b      	cbz	r3, 2b530 <att_chan_read+0x8c>
   2b524:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b526:	4621      	mov	r1, r4
   2b528:	4638      	mov	r0, r7
   2b52a:	4798      	blx	r3
   2b52c:	2800      	cmp	r0, #0
   2b52e:	d061      	beq.n	2b5f4 <att_chan_read+0x150>
		net_buf_add(frag, read);
   2b530:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   2b532:	4621      	mov	r1, r4
   2b534:	f107 0008 	add.w	r0, r7, #8
   2b538:	f7f1 fc3a 	bl	1cdb0 <net_buf_simple_add>
		total += read;
   2b53c:	44a2      	add	sl, r4
		offset += read;
   2b53e:	442c      	add	r4, r5
   2b540:	b2a5      	uxth	r5, r4
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b542:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   2b546:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2b548:	2200      	movs	r2, #0
   2b54a:	e048      	b.n	2b5de <att_chan_read+0x13a>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b54c:	f8b8 602a 	ldrh.w	r6, [r8, #42]	; 0x2a
	while (buf) {
   2b550:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2b552:	2200      	movs	r2, #0
	while (buf) {
   2b554:	e002      	b.n	2b55c <att_chan_read+0xb8>
		bytes += buf->len;
   2b556:	8999      	ldrh	r1, [r3, #12]
   2b558:	440a      	add	r2, r1
		buf = buf->frags;
   2b55a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2b55c:	2b00      	cmp	r3, #0
   2b55e:	d1fa      	bne.n	2b556 <att_chan_read+0xb2>
   2b560:	1ab6      	subs	r6, r6, r2
   2b562:	e7d0      	b.n	2b506 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2b564:	9b02      	ldr	r3, [sp, #8]
   2b566:	7998      	ldrb	r0, [r3, #6]
   2b568:	f7f1 f8c4 	bl	1c6f4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2b56c:	2200      	movs	r2, #0
   2b56e:	2300      	movs	r3, #0
   2b570:	f001 ff0f 	bl	2d392 <net_buf_alloc_fixed>
			if (!frag) {
   2b574:	4607      	mov	r7, r0
   2b576:	b150      	cbz	r0, 2b58e <att_chan_read+0xea>
			net_buf_frag_add(buf, frag);
   2b578:	4601      	mov	r1, r0
   2b57a:	f8dd b008 	ldr.w	fp, [sp, #8]
   2b57e:	4658      	mov	r0, fp
   2b580:	f7f1 fba0 	bl	1ccc4 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b584:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	size_t bytes = 0;
   2b588:	4632      	mov	r2, r6
	while (buf) {
   2b58a:	465b      	mov	r3, fp
   2b58c:	e004      	b.n	2b598 <att_chan_read+0xf4>
				return total;
   2b58e:	4654      	mov	r4, sl
   2b590:	e79d      	b.n	2b4ce <att_chan_read+0x2a>
		bytes += buf->len;
   2b592:	8999      	ldrh	r1, [r3, #12]
   2b594:	440a      	add	r2, r1
		buf = buf->frags;
   2b596:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2b598:	2b00      	cmp	r3, #0
   2b59a:	d1fa      	bne.n	2b592 <att_chan_read+0xee>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b59c:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2b59e:	f107 0b08 	add.w	fp, r7, #8
   2b5a2:	4658      	mov	r0, fp
   2b5a4:	f001 ff08 	bl	2d3b8 <net_buf_simple_tailroom>
   2b5a8:	4284      	cmp	r4, r0
   2b5aa:	d304      	bcc.n	2b5b6 <att_chan_read+0x112>
   2b5ac:	4658      	mov	r0, fp
   2b5ae:	f001 ff03 	bl	2d3b8 <net_buf_simple_tailroom>
   2b5b2:	4606      	mov	r6, r0
   2b5b4:	e7a8      	b.n	2b508 <att_chan_read+0x64>
   2b5b6:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
	while (buf) {
   2b5ba:	9b02      	ldr	r3, [sp, #8]
   2b5bc:	e002      	b.n	2b5c4 <att_chan_read+0x120>
		bytes += buf->len;
   2b5be:	899a      	ldrh	r2, [r3, #12]
   2b5c0:	4416      	add	r6, r2
		buf = buf->frags;
   2b5c2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2b5c4:	2b00      	cmp	r3, #0
   2b5c6:	d1fa      	bne.n	2b5be <att_chan_read+0x11a>
   2b5c8:	1b8e      	subs	r6, r1, r6
   2b5ca:	e79d      	b.n	2b508 <att_chan_read+0x64>
			if (total) {
   2b5cc:	f1ba 0f00 	cmp.w	sl, #0
   2b5d0:	f43f af7d 	beq.w	2b4ce <att_chan_read+0x2a>
				return total;
   2b5d4:	4654      	mov	r4, sl
   2b5d6:	e77a      	b.n	2b4ce <att_chan_read+0x2a>
		bytes += buf->len;
   2b5d8:	8999      	ldrh	r1, [r3, #12]
   2b5da:	440a      	add	r2, r1
		buf = buf->frags;
   2b5dc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2b5de:	2b00      	cmp	r3, #0
   2b5e0:	d1fa      	bne.n	2b5d8 <att_chan_read+0x134>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b5e2:	4290      	cmp	r0, r2
   2b5e4:	d906      	bls.n	2b5f4 <att_chan_read+0x150>
   2b5e6:	45b3      	cmp	fp, r6
   2b5e8:	d104      	bne.n	2b5f4 <att_chan_read+0x150>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b5ea:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2b5ee:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2b5f0:	2200      	movs	r2, #0
	while (buf) {
   2b5f2:	e77a      	b.n	2b4ea <att_chan_read+0x46>
	return total;
   2b5f4:	4654      	mov	r4, sl
   2b5f6:	e76a      	b.n	2b4ce <att_chan_read+0x2a>

0002b5f8 <read_vl_cb>:
{
   2b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b5fc:	b082      	sub	sp, #8
   2b5fe:	4606      	mov	r6, r0
   2b600:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2b602:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2b604:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2b606:	2300      	movs	r3, #0
   2b608:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2b60a:	2295      	movs	r2, #149	; 0x95
   2b60c:	4631      	mov	r1, r6
   2b60e:	f000 fe8f 	bl	2c330 <bt_gatt_check_perm>
   2b612:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2b614:	b9f0      	cbnz	r0, 2b654 <read_vl_cb+0x5c>
   2b616:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2b618:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   2b61a:	68a0      	ldr	r0, [r4, #8]
   2b61c:	8982      	ldrh	r2, [r0, #12]
   2b61e:	1a9b      	subs	r3, r3, r2
   2b620:	2b01      	cmp	r3, #1
   2b622:	dd18      	ble.n	2b656 <read_vl_cb+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2b624:	2102      	movs	r1, #2
   2b626:	3008      	adds	r0, #8
   2b628:	f7f1 fbc2 	bl	1cdb0 <net_buf_simple_add>
   2b62c:	4680      	mov	r8, r0
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2b62e:	2300      	movs	r3, #0
   2b630:	9301      	str	r3, [sp, #4]
   2b632:	9300      	str	r3, [sp, #0]
   2b634:	88a3      	ldrh	r3, [r4, #4]
   2b636:	68a2      	ldr	r2, [r4, #8]
   2b638:	4631      	mov	r1, r6
   2b63a:	4638      	mov	r0, r7
   2b63c:	f7ff ff32 	bl	2b4a4 <att_chan_read>
	if (read < 0) {
   2b640:	2800      	cmp	r0, #0
   2b642:	db03      	blt.n	2b64c <read_vl_cb+0x54>
	rsp->len = read;
   2b644:	f8a8 0000 	strh.w	r0, [r8]
	return BT_GATT_ITER_CONTINUE;
   2b648:	2501      	movs	r5, #1
   2b64a:	e004      	b.n	2b656 <read_vl_cb+0x5e>
		data->err = err_to_att(read);
   2b64c:	f7ff fd1a 	bl	2b084 <err_to_att>
   2b650:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2b652:	e000      	b.n	2b656 <read_vl_cb+0x5e>
		return BT_GATT_ITER_STOP;
   2b654:	2500      	movs	r5, #0
}
   2b656:	4628      	mov	r0, r5
   2b658:	b002      	add	sp, #8
   2b65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b65e <read_cb>:
{
   2b65e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b660:	b083      	sub	sp, #12
   2b662:	4606      	mov	r6, r0
   2b664:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2b666:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2b668:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2b66a:	2300      	movs	r3, #0
   2b66c:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2b66e:	2295      	movs	r2, #149	; 0x95
   2b670:	4631      	mov	r1, r6
   2b672:	f000 fe5d 	bl	2c330 <bt_gatt_check_perm>
   2b676:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2b678:	b118      	cbz	r0, 2b682 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   2b67a:	2500      	movs	r5, #0
}
   2b67c:	4628      	mov	r0, r5
   2b67e:	b003      	add	sp, #12
   2b680:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b682:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2b684:	2300      	movs	r3, #0
   2b686:	9301      	str	r3, [sp, #4]
   2b688:	9300      	str	r3, [sp, #0]
   2b68a:	88a3      	ldrh	r3, [r4, #4]
   2b68c:	68a2      	ldr	r2, [r4, #8]
   2b68e:	4631      	mov	r1, r6
   2b690:	4638      	mov	r0, r7
   2b692:	f7ff ff07 	bl	2b4a4 <att_chan_read>
	if (ret < 0) {
   2b696:	2800      	cmp	r0, #0
   2b698:	db01      	blt.n	2b69e <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2b69a:	2501      	movs	r5, #1
   2b69c:	e7ee      	b.n	2b67c <read_cb+0x1e>
		data->err = err_to_att(ret);
   2b69e:	f7ff fcf1 	bl	2b084 <err_to_att>
   2b6a2:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2b6a4:	e7ea      	b.n	2b67c <read_cb+0x1e>

0002b6a6 <find_info_cb>:
{
   2b6a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b6aa:	4606      	mov	r6, r0
   2b6ac:	460f      	mov	r7, r1
   2b6ae:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2b6b0:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   2b6b4:	6893      	ldr	r3, [r2, #8]
   2b6b6:	b14b      	cbz	r3, 2b6cc <find_info_cb+0x26>
	switch (data->rsp->format) {
   2b6b8:	68a3      	ldr	r3, [r4, #8]
   2b6ba:	781d      	ldrb	r5, [r3, #0]
   2b6bc:	2d01      	cmp	r5, #1
   2b6be:	d013      	beq.n	2b6e8 <find_info_cb+0x42>
   2b6c0:	2d02      	cmp	r5, #2
   2b6c2:	d02d      	beq.n	2b720 <find_info_cb+0x7a>
   2b6c4:	2500      	movs	r5, #0
}
   2b6c6:	4628      	mov	r0, r5
   2b6c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2b6cc:	6850      	ldr	r0, [r2, #4]
   2b6ce:	2101      	movs	r1, #1
   2b6d0:	3008      	adds	r0, #8
   2b6d2:	f7f1 fb6d 	bl	1cdb0 <net_buf_simple_add>
   2b6d6:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2b6d8:	6833      	ldr	r3, [r6, #0]
   2b6da:	781b      	ldrb	r3, [r3, #0]
   2b6dc:	b913      	cbnz	r3, 2b6e4 <find_info_cb+0x3e>
   2b6de:	2301      	movs	r3, #1
   2b6e0:	7003      	strb	r3, [r0, #0]
   2b6e2:	e7e9      	b.n	2b6b8 <find_info_cb+0x12>
   2b6e4:	2302      	movs	r3, #2
   2b6e6:	e7fb      	b.n	2b6e0 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2b6e8:	6833      	ldr	r3, [r6, #0]
   2b6ea:	f893 9000 	ldrb.w	r9, [r3]
   2b6ee:	f1b9 0f00 	cmp.w	r9, #0
   2b6f2:	d001      	beq.n	2b6f8 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   2b6f4:	2500      	movs	r5, #0
   2b6f6:	e7e6      	b.n	2b6c6 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2b6f8:	6860      	ldr	r0, [r4, #4]
   2b6fa:	2104      	movs	r1, #4
   2b6fc:	3008      	adds	r0, #8
   2b6fe:	f7f1 fb57 	bl	1cdb0 <net_buf_simple_add>
   2b702:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2b704:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2b706:	6832      	ldr	r2, [r6, #0]
   2b708:	68e3      	ldr	r3, [r4, #12]
   2b70a:	8852      	ldrh	r2, [r2, #2]
   2b70c:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2b70e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2b712:	6862      	ldr	r2, [r4, #4]
   2b714:	8992      	ldrh	r2, [r2, #12]
   2b716:	1a9b      	subs	r3, r3, r2
   2b718:	2b04      	cmp	r3, #4
   2b71a:	d8d4      	bhi.n	2b6c6 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   2b71c:	464d      	mov	r5, r9
   2b71e:	e7d2      	b.n	2b6c6 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2b720:	6833      	ldr	r3, [r6, #0]
   2b722:	781b      	ldrb	r3, [r3, #0]
   2b724:	2b02      	cmp	r3, #2
   2b726:	d001      	beq.n	2b72c <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   2b728:	2500      	movs	r5, #0
   2b72a:	e7cc      	b.n	2b6c6 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2b72c:	6860      	ldr	r0, [r4, #4]
   2b72e:	2112      	movs	r1, #18
   2b730:	3008      	adds	r0, #8
   2b732:	f7f1 fb3d 	bl	1cdb0 <net_buf_simple_add>
   2b736:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2b738:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2b73a:	68e0      	ldr	r0, [r4, #12]
   2b73c:	6831      	ldr	r1, [r6, #0]
   2b73e:	2210      	movs	r2, #16
   2b740:	3101      	adds	r1, #1
   2b742:	3002      	adds	r0, #2
   2b744:	f7fe fb22 	bl	29d8c <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2b748:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2b74c:	6862      	ldr	r2, [r4, #4]
   2b74e:	8992      	ldrh	r2, [r2, #12]
   2b750:	1a9b      	subs	r3, r3, r2
   2b752:	2b12      	cmp	r3, #18
   2b754:	d801      	bhi.n	2b75a <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   2b756:	2500      	movs	r5, #0
   2b758:	e7b5      	b.n	2b6c6 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   2b75a:	2501      	movs	r5, #1
   2b75c:	e7b3      	b.n	2b6c6 <find_info_cb+0x20>

0002b75e <att_chan_mtu_updated>:
{
   2b75e:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   2b760:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2b762:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b764:	b153      	cbz	r3, 2b77c <att_chan_mtu_updated+0x1e>
   2b766:	3bf0      	subs	r3, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b768:	f113 04f0 	adds.w	r4, r3, #240	; 0xf0
   2b76c:	d003      	beq.n	2b776 <att_chan_mtu_updated+0x18>
	return node->next;
   2b76e:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
   2b772:	b104      	cbz	r4, 2b776 <att_chan_mtu_updated+0x18>
   2b774:	3cf0      	subs	r4, #240	; 0xf0
   2b776:	2200      	movs	r2, #0
   2b778:	4611      	mov	r1, r2
   2b77a:	e004      	b.n	2b786 <att_chan_mtu_updated+0x28>
   2b77c:	461c      	mov	r4, r3
   2b77e:	e7fa      	b.n	2b776 <att_chan_mtu_updated+0x18>
   2b780:	4625      	mov	r5, r4
   2b782:	4623      	mov	r3, r4
   2b784:	462c      	mov	r4, r5
   2b786:	b18b      	cbz	r3, 2b7ac <att_chan_mtu_updated+0x4e>
		if (chan == updated_chan) {
   2b788:	4283      	cmp	r3, r0
   2b78a:	d007      	beq.n	2b79c <att_chan_mtu_updated+0x3e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2b78c:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
   2b78e:	42a9      	cmp	r1, r5
   2b790:	bf38      	it	cc
   2b792:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2b794:	8b5b      	ldrh	r3, [r3, #26]
   2b796:	429a      	cmp	r2, r3
   2b798:	bf38      	it	cc
   2b79a:	461a      	movcc	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b79c:	2c00      	cmp	r4, #0
   2b79e:	d0ef      	beq.n	2b780 <att_chan_mtu_updated+0x22>
   2b7a0:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   2b7a4:	2d00      	cmp	r5, #0
   2b7a6:	d0ec      	beq.n	2b782 <att_chan_mtu_updated+0x24>
   2b7a8:	3df0      	subs	r5, #240	; 0xf0
   2b7aa:	e7ea      	b.n	2b782 <att_chan_mtu_updated+0x24>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2b7ac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   2b7ae:	428b      	cmp	r3, r1
   2b7b0:	d802      	bhi.n	2b7b8 <att_chan_mtu_updated+0x5a>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2b7b2:	8b44      	ldrh	r4, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2b7b4:	4294      	cmp	r4, r2
   2b7b6:	d909      	bls.n	2b7cc <att_chan_mtu_updated+0x6e>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   2b7b8:	8b40      	ldrh	r0, [r0, #26]
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2b7ba:	4282      	cmp	r2, r0
   2b7bc:	bf38      	it	cc
   2b7be:	4602      	movcc	r2, r0
   2b7c0:	4299      	cmp	r1, r3
   2b7c2:	bf38      	it	cc
   2b7c4:	4619      	movcc	r1, r3
   2b7c6:	6830      	ldr	r0, [r6, #0]
   2b7c8:	f7ee feea 	bl	1a5a0 <bt_gatt_att_max_mtu_changed>
}
   2b7cc:	bd70      	pop	{r4, r5, r6, pc}

0002b7ce <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b7ce:	f001 021f 	and.w	r2, r1, #31
   2b7d2:	2301      	movs	r3, #1
   2b7d4:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b7d6:	0949      	lsrs	r1, r1, #5
   2b7d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b7dc:	f3bf 8f5b 	dmb	ish
   2b7e0:	e850 2f00 	ldrex	r2, [r0]
   2b7e4:	ea42 0103 	orr.w	r1, r2, r3
   2b7e8:	e840 1c00 	strex	ip, r1, [r0]
   2b7ec:	f1bc 0f00 	cmp.w	ip, #0
   2b7f0:	d1f6      	bne.n	2b7e0 <atomic_test_and_set_bit+0x12>
   2b7f2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2b7f6:	4213      	tst	r3, r2
}
   2b7f8:	bf14      	ite	ne
   2b7fa:	2001      	movne	r0, #1
   2b7fc:	2000      	moveq	r0, #0
   2b7fe:	4770      	bx	lr

0002b800 <att_sent>:
{
   2b800:	b508      	push	{r3, lr}
	struct bt_att_chan *att_chan = data->att_chan;
   2b802:	680b      	ldr	r3, [r1, #0]
	struct bt_l2cap_chan *chan = &att_chan->chan.chan;
   2b804:	1d18      	adds	r0, r3, #4
	if (chan->ops->sent) {
   2b806:	689b      	ldr	r3, [r3, #8]
   2b808:	699b      	ldr	r3, [r3, #24]
   2b80a:	b103      	cbz	r3, 2b80e <att_sent+0xe>
		chan->ops->sent(chan);
   2b80c:	4798      	blx	r3
}
   2b80e:	bd08      	pop	{r3, pc}

0002b810 <att_tx_complete>:
{
   2b810:	b570      	push	{r4, r5, r6, lr}
   2b812:	4604      	mov	r4, r0
   2b814:	460d      	mov	r5, r1
	if (!err) {
   2b816:	4616      	mov	r6, r2
   2b818:	b12a      	cbz	r2, 2b826 <att_tx_complete+0x16>
	chan_tx_complete(conn, user_data, err);
   2b81a:	4632      	mov	r2, r6
   2b81c:	4629      	mov	r1, r5
   2b81e:	4620      	mov	r0, r4
   2b820:	f7ff fc84 	bl	2b12c <chan_tx_complete>
}
   2b824:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2b826:	f7ff ffeb 	bl	2b800 <att_sent>
   2b82a:	e7f6      	b.n	2b81a <att_tx_complete+0xa>

0002b82c <att_req_sent>:
{
   2b82c:	b570      	push	{r4, r5, r6, lr}
   2b82e:	4604      	mov	r4, r0
   2b830:	460d      	mov	r5, r1
	if (!err) {
   2b832:	4616      	mov	r6, r2
   2b834:	b12a      	cbz	r2, 2b842 <att_req_sent+0x16>
	chan_req_sent(conn, user_data, err);
   2b836:	4632      	mov	r2, r6
   2b838:	4629      	mov	r1, r5
   2b83a:	4620      	mov	r0, r4
   2b83c:	f7ff fd2a 	bl	2b294 <chan_req_sent>
}
   2b840:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2b842:	f7ff ffdd 	bl	2b800 <att_sent>
   2b846:	e7f6      	b.n	2b836 <att_req_sent+0xa>

0002b848 <att_cfm_sent>:
{
   2b848:	b570      	push	{r4, r5, r6, lr}
   2b84a:	4604      	mov	r4, r0
   2b84c:	460d      	mov	r5, r1
	if (!err) {
   2b84e:	4616      	mov	r6, r2
   2b850:	b12a      	cbz	r2, 2b85e <att_cfm_sent+0x16>
	chan_cfm_sent(conn, user_data, err);
   2b852:	4632      	mov	r2, r6
   2b854:	4629      	mov	r1, r5
   2b856:	4620      	mov	r0, r4
   2b858:	f7ff fd2c 	bl	2b2b4 <chan_cfm_sent>
}
   2b85c:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2b85e:	f7ff ffcf 	bl	2b800 <att_sent>
   2b862:	e7f6      	b.n	2b852 <att_cfm_sent+0xa>

0002b864 <att_rsp_sent>:
{
   2b864:	b570      	push	{r4, r5, r6, lr}
   2b866:	4604      	mov	r4, r0
   2b868:	460d      	mov	r5, r1
	if (!err) {
   2b86a:	4616      	mov	r6, r2
   2b86c:	b12a      	cbz	r2, 2b87a <att_rsp_sent+0x16>
	chan_rsp_sent(conn, user_data, err);
   2b86e:	4632      	mov	r2, r6
   2b870:	4629      	mov	r1, r5
   2b872:	4620      	mov	r0, r4
   2b874:	f7ff fd31 	bl	2b2da <chan_rsp_sent>
}
   2b878:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2b87a:	f7ff ffc1 	bl	2b800 <att_sent>
   2b87e:	e7f6      	b.n	2b86e <att_rsp_sent+0xa>

0002b880 <send_err_rsp>:
	if (!req) {
   2b880:	b901      	cbnz	r1, 2b884 <send_err_rsp+0x4>
   2b882:	4770      	bx	lr
{
   2b884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b888:	4606      	mov	r6, r0
   2b88a:	4615      	mov	r5, r2
   2b88c:	461c      	mov	r4, r3
   2b88e:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2b890:	2204      	movs	r2, #4
   2b892:	2101      	movs	r1, #1
   2b894:	f7ec fce8 	bl	18268 <bt_att_chan_create_pdu>
	if (!buf) {
   2b898:	4680      	mov	r8, r0
   2b89a:	b158      	cbz	r0, 2b8b4 <send_err_rsp+0x34>
   2b89c:	2104      	movs	r1, #4
   2b89e:	3008      	adds	r0, #8
   2b8a0:	f7f1 fa86 	bl	1cdb0 <net_buf_simple_add>
	rsp->request = req;
   2b8a4:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   2b8a6:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   2b8aa:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2b8ac:	4641      	mov	r1, r8
   2b8ae:	4630      	mov	r0, r6
   2b8b0:	f7ff fdeb 	bl	2b48a <bt_att_chan_send_rsp>
}
   2b8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b8b8 <att_write_cmd>:
{
   2b8b8:	b530      	push	{r4, r5, lr}
   2b8ba:	b085      	sub	sp, #20
   2b8bc:	4605      	mov	r5, r0
   2b8be:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2b8c0:	f101 0008 	add.w	r0, r1, #8
   2b8c4:	f001 fd6c 	bl	2d3a0 <net_buf_simple_pull_le16>
   2b8c8:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2b8ca:	68a2      	ldr	r2, [r4, #8]
   2b8cc:	89a1      	ldrh	r1, [r4, #12]
   2b8ce:	9102      	str	r1, [sp, #8]
   2b8d0:	9201      	str	r2, [sp, #4]
   2b8d2:	2100      	movs	r1, #0
   2b8d4:	9100      	str	r1, [sp, #0]
   2b8d6:	460a      	mov	r2, r1
   2b8d8:	4628      	mov	r0, r5
   2b8da:	f7ec fd91 	bl	18400 <att_write_rsp>
}
   2b8de:	b005      	add	sp, #20
   2b8e0:	bd30      	pop	{r4, r5, pc}

0002b8e2 <att_write_req>:
{
   2b8e2:	b530      	push	{r4, r5, lr}
   2b8e4:	b085      	sub	sp, #20
   2b8e6:	4605      	mov	r5, r0
   2b8e8:	460c      	mov	r4, r1
   2b8ea:	f101 0008 	add.w	r0, r1, #8
   2b8ee:	f001 fd57 	bl	2d3a0 <net_buf_simple_pull_le16>
   2b8f2:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   2b8f4:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2b8f6:	89a1      	ldrh	r1, [r4, #12]
   2b8f8:	9102      	str	r1, [sp, #8]
   2b8fa:	9201      	str	r2, [sp, #4]
   2b8fc:	2200      	movs	r2, #0
   2b8fe:	9200      	str	r2, [sp, #0]
   2b900:	2213      	movs	r2, #19
   2b902:	2112      	movs	r1, #18
   2b904:	4628      	mov	r0, r5
   2b906:	f7ec fd7b 	bl	18400 <att_write_rsp>
}
   2b90a:	b005      	add	sp, #20
   2b90c:	bd30      	pop	{r4, r5, pc}

0002b90e <att_req_retry>:
{
   2b90e:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_req *req = att_chan->req;
   2b910:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
	if (!req->encode) {
   2b914:	68e3      	ldr	r3, [r4, #12]
   2b916:	b313      	cbz	r3, 2b95e <att_req_retry+0x50>
   2b918:	4605      	mov	r5, r0
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2b91a:	6962      	ldr	r2, [r4, #20]
   2b91c:	7c61      	ldrb	r1, [r4, #17]
   2b91e:	f7ec fca3 	bl	18268 <bt_att_chan_create_pdu>
	if (!buf) {
   2b922:	4606      	mov	r6, r0
   2b924:	b1e8      	cbz	r0, 2b962 <att_req_retry+0x54>
	if (req->encode(buf, req->len, req->user_data)) {
   2b926:	68e3      	ldr	r3, [r4, #12]
   2b928:	69a2      	ldr	r2, [r4, #24]
   2b92a:	6961      	ldr	r1, [r4, #20]
   2b92c:	4798      	blx	r3
   2b92e:	b930      	cbnz	r0, 2b93e <att_req_retry+0x30>
	if (chan_send(att_chan, buf)) {
   2b930:	4631      	mov	r1, r6
   2b932:	4628      	mov	r0, r5
   2b934:	f7ec fa84 	bl	17e40 <chan_send>
   2b938:	b948      	cbnz	r0, 2b94e <att_req_retry+0x40>
	return BT_ATT_ERR_SUCCESS;
   2b93a:	2000      	movs	r0, #0
}
   2b93c:	bd70      	pop	{r4, r5, r6, pc}
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2b93e:	6970      	ldr	r0, [r6, #20]
   2b940:	f7ec fa62 	bl	17e08 <tx_meta_data_free>
		net_buf_unref(buf);
   2b944:	4630      	mov	r0, r6
   2b946:	f7f1 f931 	bl	1cbac <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2b94a:	200e      	movs	r0, #14
   2b94c:	e7f6      	b.n	2b93c <att_req_retry+0x2e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2b94e:	6970      	ldr	r0, [r6, #20]
   2b950:	f7ec fa5a 	bl	17e08 <tx_meta_data_free>
		net_buf_unref(buf);
   2b954:	4630      	mov	r0, r6
   2b956:	f7f1 f929 	bl	1cbac <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2b95a:	200e      	movs	r0, #14
   2b95c:	e7ee      	b.n	2b93c <att_req_retry+0x2e>
		return BT_ATT_ERR_AUTHENTICATION;
   2b95e:	2005      	movs	r0, #5
   2b960:	e7ec      	b.n	2b93c <att_req_retry+0x2e>
		return BT_ATT_ERR_UNLIKELY;
   2b962:	200e      	movs	r0, #14
   2b964:	e7ea      	b.n	2b93c <att_req_retry+0x2e>

0002b966 <att_read_group_req>:
{
   2b966:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b968:	b089      	sub	sp, #36	; 0x24
   2b96a:	4605      	mov	r5, r0
   2b96c:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2b96e:	7b0c      	ldrb	r4, [r1, #12]
   2b970:	3c04      	subs	r4, #4
   2b972:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2b974:	2c02      	cmp	r4, #2
   2b976:	d001      	beq.n	2b97c <att_read_group_req+0x16>
   2b978:	2c10      	cmp	r4, #16
   2b97a:	d142      	bne.n	2ba02 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2b97c:	2104      	movs	r1, #4
   2b97e:	3008      	adds	r0, #8
   2b980:	f7f1 f9dc 	bl	1cd3c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2b984:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2b986:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2b988:	4622      	mov	r2, r4
   2b98a:	1d01      	adds	r1, r0, #4
   2b98c:	a801      	add	r0, sp, #4
   2b98e:	f7fe fb0b 	bl	29fa8 <bt_uuid_create>
   2b992:	b3c8      	cbz	r0, 2ba08 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2b994:	f10d 0216 	add.w	r2, sp, #22
   2b998:	4639      	mov	r1, r7
   2b99a:	4630      	mov	r0, r6
   2b99c:	f7ff fb63 	bl	2b066 <range_is_valid>
   2b9a0:	b1f0      	cbz	r0, 2b9e0 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2b9a2:	2300      	movs	r3, #0
   2b9a4:	f88d 3018 	strb.w	r3, [sp, #24]
   2b9a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2b9ac:	f8ad 301a 	strh.w	r3, [sp, #26]
   2b9b0:	a906      	add	r1, sp, #24
   2b9b2:	a801      	add	r0, sp, #4
   2b9b4:	f7fe fada 	bl	29f6c <bt_uuid_cmp>
   2b9b8:	b158      	cbz	r0, 2b9d2 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2b9ba:	2300      	movs	r3, #0
   2b9bc:	f88d 301c 	strb.w	r3, [sp, #28]
   2b9c0:	f642 0301 	movw	r3, #10241	; 0x2801
   2b9c4:	f8ad 301e 	strh.w	r3, [sp, #30]
   2b9c8:	a907      	add	r1, sp, #28
   2b9ca:	a801      	add	r0, sp, #4
   2b9cc:	f7fe face 	bl	29f6c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2b9d0:	b978      	cbnz	r0, 2b9f2 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   2b9d2:	463b      	mov	r3, r7
   2b9d4:	4632      	mov	r2, r6
   2b9d6:	a901      	add	r1, sp, #4
   2b9d8:	4628      	mov	r0, r5
   2b9da:	f7ec fdb5 	bl	18548 <att_read_group_rsp>
   2b9de:	e011      	b.n	2ba04 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   2b9e0:	2301      	movs	r3, #1
   2b9e2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2b9e6:	2110      	movs	r1, #16
   2b9e8:	4628      	mov	r0, r5
   2b9ea:	f7ff ff49 	bl	2b880 <send_err_rsp>
		return 0;
   2b9ee:	2000      	movs	r0, #0
   2b9f0:	e008      	b.n	2ba04 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   2b9f2:	2310      	movs	r3, #16
   2b9f4:	4632      	mov	r2, r6
   2b9f6:	4619      	mov	r1, r3
   2b9f8:	4628      	mov	r0, r5
   2b9fa:	f7ff ff41 	bl	2b880 <send_err_rsp>
		return 0;
   2b9fe:	2000      	movs	r0, #0
   2ba00:	e000      	b.n	2ba04 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   2ba02:	2004      	movs	r0, #4
}
   2ba04:	b009      	add	sp, #36	; 0x24
   2ba06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   2ba08:	200e      	movs	r0, #14
   2ba0a:	e7fb      	b.n	2ba04 <att_read_group_req+0x9e>

0002ba0c <att_read_blob_req>:
{
   2ba0c:	b500      	push	{lr}
   2ba0e:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2ba10:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2ba12:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   2ba14:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2ba16:	9200      	str	r2, [sp, #0]
   2ba18:	220d      	movs	r2, #13
   2ba1a:	210c      	movs	r1, #12
   2ba1c:	f7ec fe88 	bl	18730 <att_read_rsp>
}
   2ba20:	b003      	add	sp, #12
   2ba22:	f85d fb04 	ldr.w	pc, [sp], #4

0002ba26 <att_read_req>:
{
   2ba26:	b500      	push	{lr}
   2ba28:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2ba2a:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2ba2c:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2ba2e:	2200      	movs	r2, #0
   2ba30:	9200      	str	r2, [sp, #0]
   2ba32:	220b      	movs	r2, #11
   2ba34:	210a      	movs	r1, #10
   2ba36:	f7ec fe7b 	bl	18730 <att_read_rsp>
}
   2ba3a:	b003      	add	sp, #12
   2ba3c:	f85d fb04 	ldr.w	pc, [sp], #4

0002ba40 <att_read_type_req>:
{
   2ba40:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ba42:	b087      	sub	sp, #28
   2ba44:	4605      	mov	r5, r0
   2ba46:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2ba48:	7b0c      	ldrb	r4, [r1, #12]
   2ba4a:	3c04      	subs	r4, #4
   2ba4c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2ba4e:	2c02      	cmp	r4, #2
   2ba50:	d001      	beq.n	2ba56 <att_read_type_req+0x16>
   2ba52:	2c10      	cmp	r4, #16
   2ba54:	d123      	bne.n	2ba9e <att_read_type_req+0x5e>
   2ba56:	2104      	movs	r1, #4
   2ba58:	3008      	adds	r0, #8
   2ba5a:	f7f1 f96f 	bl	1cd3c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2ba5e:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2ba60:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2ba62:	4622      	mov	r2, r4
   2ba64:	1d01      	adds	r1, r0, #4
   2ba66:	a801      	add	r0, sp, #4
   2ba68:	f7fe fa9e 	bl	29fa8 <bt_uuid_create>
   2ba6c:	b1c8      	cbz	r0, 2baa2 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2ba6e:	f10d 0216 	add.w	r2, sp, #22
   2ba72:	4639      	mov	r1, r7
   2ba74:	4630      	mov	r0, r6
   2ba76:	f7ff faf6 	bl	2b066 <range_is_valid>
   2ba7a:	b138      	cbz	r0, 2ba8c <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   2ba7c:	463b      	mov	r3, r7
   2ba7e:	4632      	mov	r2, r6
   2ba80:	a901      	add	r1, sp, #4
   2ba82:	4628      	mov	r0, r5
   2ba84:	f7ec feae 	bl	187e4 <att_read_type_rsp>
}
   2ba88:	b007      	add	sp, #28
   2ba8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   2ba8c:	2301      	movs	r3, #1
   2ba8e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2ba92:	2108      	movs	r1, #8
   2ba94:	4628      	mov	r0, r5
   2ba96:	f7ff fef3 	bl	2b880 <send_err_rsp>
		return 0;
   2ba9a:	2000      	movs	r0, #0
   2ba9c:	e7f4      	b.n	2ba88 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   2ba9e:	2004      	movs	r0, #4
   2baa0:	e7f2      	b.n	2ba88 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   2baa2:	200e      	movs	r0, #14
   2baa4:	e7f0      	b.n	2ba88 <att_read_type_req+0x48>

0002baa6 <att_find_type_req>:
{
   2baa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2baaa:	b087      	sub	sp, #28
   2baac:	4607      	mov	r7, r0
   2baae:	460c      	mov	r4, r1
   2bab0:	2106      	movs	r1, #6
   2bab2:	f104 0008 	add.w	r0, r4, #8
   2bab6:	f7f1 f941 	bl	1cd3c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2baba:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2babc:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2babe:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   2bac2:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2bac6:	f10d 020e 	add.w	r2, sp, #14
   2baca:	4631      	mov	r1, r6
   2bacc:	4628      	mov	r0, r5
   2bace:	f7ff faca 	bl	2b066 <range_is_valid>
   2bad2:	b1d0      	cbz	r0, 2bb0a <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2bad4:	2300      	movs	r3, #0
   2bad6:	f88d 3010 	strb.w	r3, [sp, #16]
   2bada:	f8ad 8012 	strh.w	r8, [sp, #18]
   2bade:	f88d 3014 	strb.w	r3, [sp, #20]
   2bae2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2bae6:	f8ad 3016 	strh.w	r3, [sp, #22]
   2baea:	a905      	add	r1, sp, #20
   2baec:	a804      	add	r0, sp, #16
   2baee:	f7fe fa3d 	bl	29f6c <bt_uuid_cmp>
   2baf2:	b998      	cbnz	r0, 2bb1c <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2baf4:	7b23      	ldrb	r3, [r4, #12]
   2baf6:	9300      	str	r3, [sp, #0]
   2baf8:	464b      	mov	r3, r9
   2bafa:	4632      	mov	r2, r6
   2bafc:	4629      	mov	r1, r5
   2bafe:	4638      	mov	r0, r7
   2bb00:	f7ec feba 	bl	18878 <att_find_type_rsp>
}
   2bb04:	b007      	add	sp, #28
   2bb06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   2bb0a:	2301      	movs	r3, #1
   2bb0c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2bb10:	2106      	movs	r1, #6
   2bb12:	4638      	mov	r0, r7
   2bb14:	f7ff feb4 	bl	2b880 <send_err_rsp>
		return 0;
   2bb18:	2000      	movs	r0, #0
   2bb1a:	e7f3      	b.n	2bb04 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   2bb1c:	230a      	movs	r3, #10
   2bb1e:	462a      	mov	r2, r5
   2bb20:	2106      	movs	r1, #6
   2bb22:	4638      	mov	r0, r7
   2bb24:	f7ff feac 	bl	2b880 <send_err_rsp>
		return 0;
   2bb28:	2000      	movs	r0, #0
   2bb2a:	e7eb      	b.n	2bb04 <att_find_type_req+0x5e>

0002bb2c <att_find_info_req>:
{
   2bb2c:	b570      	push	{r4, r5, r6, lr}
   2bb2e:	b082      	sub	sp, #8
   2bb30:	4604      	mov	r4, r0
	req = (void *)buf->data;
   2bb32:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2bb34:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2bb36:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2bb38:	f10d 0206 	add.w	r2, sp, #6
   2bb3c:	4631      	mov	r1, r6
   2bb3e:	4628      	mov	r0, r5
   2bb40:	f7ff fa91 	bl	2b066 <range_is_valid>
   2bb44:	b130      	cbz	r0, 2bb54 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   2bb46:	4632      	mov	r2, r6
   2bb48:	4629      	mov	r1, r5
   2bb4a:	4620      	mov	r0, r4
   2bb4c:	f7ec fede 	bl	1890c <att_find_info_rsp>
}
   2bb50:	b002      	add	sp, #8
   2bb52:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   2bb54:	2301      	movs	r3, #1
   2bb56:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2bb5a:	2104      	movs	r1, #4
   2bb5c:	4620      	mov	r0, r4
   2bb5e:	f7ff fe8f 	bl	2b880 <send_err_rsp>
		return 0;
   2bb62:	2000      	movs	r0, #0
   2bb64:	e7f4      	b.n	2bb50 <att_find_info_req+0x24>

0002bb66 <att_mtu_req>:
{
   2bb66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bb68:	4604      	mov	r4, r0
   2bb6a:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->att->conn;
   2bb6c:	f850 3b98 	ldr.w	r3, [r0], #152
   2bb70:	681f      	ldr	r7, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2bb72:	2103      	movs	r1, #3
   2bb74:	f7ff fab9 	bl	2b0ea <atomic_test_bit>
   2bb78:	bb00      	cbnz	r0, 2bbbc <att_mtu_req+0x56>
	req = (void *)buf->data;
   2bb7a:	68ab      	ldr	r3, [r5, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   2bb7c:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2bb7e:	2e16      	cmp	r6, #22
   2bb80:	d91e      	bls.n	2bbc0 <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2bb82:	2202      	movs	r2, #2
   2bb84:	2103      	movs	r1, #3
   2bb86:	4638      	mov	r0, r7
   2bb88:	f7ec fcaa 	bl	184e0 <bt_att_create_pdu>
	if (!pdu) {
   2bb8c:	4607      	mov	r7, r0
   2bb8e:	b1c8      	cbz	r0, 2bbc4 <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2bb90:	2102      	movs	r1, #2
   2bb92:	3008      	adds	r0, #8
   2bb94:	f7f1 f90c 	bl	1cdb0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2bb98:	2500      	movs	r5, #0
   2bb9a:	2341      	movs	r3, #65	; 0x41
   2bb9c:	7003      	strb	r3, [r0, #0]
   2bb9e:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2bba0:	4639      	mov	r1, r7
   2bba2:	4620      	mov	r0, r4
   2bba4:	f7ff fc71 	bl	2b48a <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2bba8:	2e41      	cmp	r6, #65	; 0x41
   2bbaa:	bf28      	it	cs
   2bbac:	2641      	movcs	r6, #65	; 0x41
   2bbae:	8366      	strh	r6, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2bbb0:	8566      	strh	r6, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2bbb2:	4620      	mov	r0, r4
   2bbb4:	f7ff fdd3 	bl	2b75e <att_chan_mtu_updated>
	return 0;
   2bbb8:	4628      	mov	r0, r5
}
   2bbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2bbbc:	2006      	movs	r0, #6
   2bbbe:	e7fc      	b.n	2bbba <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
   2bbc0:	2004      	movs	r0, #4
   2bbc2:	e7fa      	b.n	2bbba <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
   2bbc4:	200e      	movs	r0, #14
   2bbc6:	e7f8      	b.n	2bbba <att_mtu_req+0x54>

0002bbc8 <att_confirm>:
{
   2bbc8:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2bbca:	2300      	movs	r3, #0
   2bbcc:	898a      	ldrh	r2, [r1, #12]
   2bbce:	6889      	ldr	r1, [r1, #8]
   2bbd0:	f7ec ff2c 	bl	18a2c <att_handle_rsp>
}
   2bbd4:	bd08      	pop	{r3, pc}

0002bbd6 <bt_att_encrypt_change>:
{
   2bbd6:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2bbd8:	4605      	mov	r5, r0
	struct bt_conn *conn = le_chan->chan.conn;
   2bbda:	f855 6904 	ldr.w	r6, [r5], #-4
	if (!att_chan->att) {
   2bbde:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2bbe2:	b143      	cbz	r3, 2bbf6 <bt_att_encrypt_change+0x20>
   2bbe4:	4604      	mov	r4, r0
	if (hci_status) {
   2bbe6:	b171      	cbz	r1, 2bc06 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   2bbe8:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2bbec:	b11b      	cbz	r3, 2bbf6 <bt_att_encrypt_change+0x20>
   2bbee:	7c1b      	ldrb	r3, [r3, #16]
   2bbf0:	f013 0f01 	tst.w	r3, #1
   2bbf4:	d100      	bne.n	2bbf8 <bt_att_encrypt_change+0x22>
}
   2bbf6:	bd70      	pop	{r4, r5, r6, pc}
			att_handle_rsp(att_chan, NULL, 0,
   2bbf8:	2305      	movs	r3, #5
   2bbfa:	2200      	movs	r2, #0
   2bbfc:	4611      	mov	r1, r2
   2bbfe:	4628      	mov	r0, r5
   2bc00:	f7ec ff14 	bl	18a2c <att_handle_rsp>
		return;
   2bc04:	e7f7      	b.n	2bbf6 <bt_att_encrypt_change+0x20>
	bt_gatt_encrypt_change(conn);
   2bc06:	4630      	mov	r0, r6
   2bc08:	f7ee fce6 	bl	1a5d8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2bc0c:	7a73      	ldrb	r3, [r6, #9]
   2bc0e:	2b01      	cmp	r3, #1
   2bc10:	d0f1      	beq.n	2bbf6 <bt_att_encrypt_change+0x20>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2bc12:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2bc16:	2b00      	cmp	r3, #0
   2bc18:	d0ed      	beq.n	2bbf6 <bt_att_encrypt_change+0x20>
   2bc1a:	7c1b      	ldrb	r3, [r3, #16]
   2bc1c:	f013 0f01 	tst.w	r3, #1
   2bc20:	d0e9      	beq.n	2bbf6 <bt_att_encrypt_change+0x20>
	err = att_req_retry(att_chan);
   2bc22:	4628      	mov	r0, r5
   2bc24:	f7ff fe73 	bl	2b90e <att_req_retry>
	if (err) {
   2bc28:	4603      	mov	r3, r0
   2bc2a:	2800      	cmp	r0, #0
   2bc2c:	d0e3      	beq.n	2bbf6 <bt_att_encrypt_change+0x20>
		att_handle_rsp(att_chan, NULL, 0, err);
   2bc2e:	2200      	movs	r2, #0
   2bc30:	4611      	mov	r1, r2
   2bc32:	4628      	mov	r0, r5
   2bc34:	f7ec fefa 	bl	18a2c <att_handle_rsp>
   2bc38:	e7dd      	b.n	2bbf6 <bt_att_encrypt_change+0x20>

0002bc3a <att_chan_detach>:
{
   2bc3a:	b538      	push	{r3, r4, r5, lr}
   2bc3c:	4605      	mov	r5, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2bc3e:	4601      	mov	r1, r0
   2bc40:	f851 0bf0 	ldr.w	r0, [r1], #240
   2bc44:	3028      	adds	r0, #40	; 0x28
   2bc46:	f7ff f9f3 	bl	2b030 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2bc4a:	e005      	b.n	2bc58 <att_chan_detach+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2bc4c:	6960      	ldr	r0, [r4, #20]
   2bc4e:	f7ec f8db 	bl	17e08 <tx_meta_data_free>
		net_buf_unref(buf);
   2bc52:	4620      	mov	r0, r4
   2bc54:	f7f0 ffaa 	bl	1cbac <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2bc58:	2200      	movs	r2, #0
   2bc5a:	2300      	movs	r3, #0
   2bc5c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   2bc60:	f7f0 fe4e 	bl	1c900 <net_buf_get>
   2bc64:	4604      	mov	r4, r0
   2bc66:	2800      	cmp	r0, #0
   2bc68:	d1f0      	bne.n	2bc4c <att_chan_detach+0x12>
	if (chan->req) {
   2bc6a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   2bc6e:	b12b      	cbz	r3, 2bc7c <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2bc70:	230e      	movs	r3, #14
   2bc72:	2200      	movs	r2, #0
   2bc74:	4611      	mov	r1, r2
   2bc76:	4628      	mov	r0, r5
   2bc78:	f7ec fed8 	bl	18a2c <att_handle_rsp>
	chan->att = NULL;
   2bc7c:	2300      	movs	r3, #0
   2bc7e:	602b      	str	r3, [r5, #0]
}
   2bc80:	bd38      	pop	{r3, r4, r5, pc}

0002bc82 <bt_att_disconnected>:
{
   2bc82:	b538      	push	{r3, r4, r5, lr}
   2bc84:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   2bc86:	f850 5c04 	ldr.w	r5, [r0, #-4]
	if (!att_chan->att) {
   2bc8a:	b125      	cbz	r5, 2bc96 <bt_att_disconnected+0x14>
   2bc8c:	3804      	subs	r0, #4
	att_chan_detach(att_chan);
   2bc8e:	f7ff ffd4 	bl	2bc3a <att_chan_detach>
	return list->head;
   2bc92:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (!sys_slist_is_empty(&att->chans)) {
   2bc94:	b103      	cbz	r3, 2bc98 <bt_att_disconnected+0x16>
}
   2bc96:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   2bc98:	4628      	mov	r0, r5
   2bc9a:	f7ec ff03 	bl	18aa4 <att_reset>
	bt_gatt_disconnected(le_chan->chan.conn);
   2bc9e:	6820      	ldr	r0, [r4, #0]
   2bca0:	f7ee fcfe 	bl	1a6a0 <bt_gatt_disconnected>
   2bca4:	e7f7      	b.n	2bc96 <bt_att_disconnected+0x14>

0002bca6 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2bca6:	2001      	movs	r0, #1
   2bca8:	4770      	bx	lr

0002bcaa <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2bcaa:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2bcac:	f7eb ffe0 	bl	17c70 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2bcb0:	b1b8      	cbz	r0, 2bce2 <bt_att_clear_out_of_sync_sent+0x38>
   2bcb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2bcb4:	b103      	cbz	r3, 2bcb8 <bt_att_clear_out_of_sync_sent+0xe>
   2bcb6:	3bf0      	subs	r3, #240	; 0xf0
   2bcb8:	b19b      	cbz	r3, 2bce2 <bt_att_clear_out_of_sync_sent+0x38>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   2bcba:	f103 0298 	add.w	r2, r3, #152	; 0x98
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bcbe:	f3bf 8f5b 	dmb	ish
   2bcc2:	e852 0f00 	ldrex	r0, [r2]
   2bcc6:	f020 0020 	bic.w	r0, r0, #32
   2bcca:	e842 0100 	strex	r1, r0, [r2]
   2bcce:	2900      	cmp	r1, #0
   2bcd0:	d1f7      	bne.n	2bcc2 <bt_att_clear_out_of_sync_sent+0x18>
   2bcd2:	f3bf 8f5b 	dmb	ish
	return node->next;
   2bcd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2bcda:	2b00      	cmp	r3, #0
   2bcdc:	d0ec      	beq.n	2bcb8 <bt_att_clear_out_of_sync_sent+0xe>
   2bcde:	3bf0      	subs	r3, #240	; 0xf0
   2bce0:	e7ea      	b.n	2bcb8 <bt_att_clear_out_of_sync_sent+0xe>
	}
}
   2bce2:	bd08      	pop	{r3, pc}

0002bce4 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2bce4:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2bce6:	2104      	movs	r1, #4
   2bce8:	f7ff f94f 	bl	2af8a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2bcec:	b120      	cbz	r0, 2bcf8 <bt_att_out_of_sync_sent_on_fixed+0x14>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2bcee:	2105      	movs	r1, #5
   2bcf0:	3094      	adds	r0, #148	; 0x94
   2bcf2:	f7ff f9fa 	bl	2b0ea <atomic_test_bit>
}
   2bcf6:	bd08      	pop	{r3, pc}
		return false;
   2bcf8:	2000      	movs	r0, #0
   2bcfa:	e7fc      	b.n	2bcf6 <bt_att_out_of_sync_sent_on_fixed+0x12>

0002bcfc <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2bcfc:	6940      	ldr	r0, [r0, #20]

	data->func = func;
   2bcfe:	6081      	str	r1, [r0, #8]
	data->user_data = user_data;
   2bd00:	60c2      	str	r2, [r0, #12]
	data->attr_count = 1;
   2bd02:	2201      	movs	r2, #1
   2bd04:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2bd06:	7403      	strb	r3, [r0, #16]
}
   2bd08:	4770      	bx	lr

0002bd0a <sys_mem_swap>:
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   2bd0a:	2300      	movs	r3, #0
   2bd0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2bd10:	d210      	bcs.n	2bd34 <sys_mem_swap+0x2a>
{
   2bd12:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   2bd14:	f810 c003 	ldrb.w	ip, [r0, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2bd18:	1aca      	subs	r2, r1, r3
   2bd1a:	3a01      	subs	r2, #1
   2bd1c:	f810 e002 	ldrb.w	lr, [r0, r2]
   2bd20:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2bd24:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   2bd28:	3301      	adds	r3, #1
   2bd2a:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2bd2e:	d3f1      	bcc.n	2bd14 <sys_mem_swap+0xa>
	}
}
   2bd30:	f85d fb04 	ldr.w	pc, [sp], #4
   2bd34:	4770      	bx	lr

0002bd36 <update_range>:
	if (new_start >= *start && new_end <= *end) {
   2bd36:	f8b0 c000 	ldrh.w	ip, [r0]
   2bd3a:	4562      	cmp	r2, ip
   2bd3c:	d312      	bcc.n	2bd64 <update_range+0x2e>
{
   2bd3e:	b500      	push	{lr}
	if (new_start >= *start && new_end <= *end) {
   2bd40:	f8b1 e000 	ldrh.w	lr, [r1]
   2bd44:	4573      	cmp	r3, lr
   2bd46:	d908      	bls.n	2bd5a <update_range+0x24>
	if (*start > new_start) {
   2bd48:	4562      	cmp	r2, ip
   2bd4a:	d200      	bcs.n	2bd4e <update_range+0x18>
		*start = new_start;
   2bd4c:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2bd4e:	880a      	ldrh	r2, [r1, #0]
   2bd50:	4293      	cmp	r3, r2
   2bd52:	d904      	bls.n	2bd5e <update_range+0x28>
		*end = new_end;
   2bd54:	800b      	strh	r3, [r1, #0]
	return true;
   2bd56:	2001      	movs	r0, #1
   2bd58:	e002      	b.n	2bd60 <update_range+0x2a>
		return false;
   2bd5a:	2000      	movs	r0, #0
   2bd5c:	e000      	b.n	2bd60 <update_range+0x2a>
	return true;
   2bd5e:	2001      	movs	r0, #1
}
   2bd60:	f85d fb04 	ldr.w	pc, [sp], #4
	if (*start > new_start) {
   2bd64:	4562      	cmp	r2, ip
   2bd66:	d200      	bcs.n	2bd6a <update_range+0x34>
		*start = new_start;
   2bd68:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2bd6a:	880a      	ldrh	r2, [r1, #0]
   2bd6c:	4293      	cmp	r3, r2
   2bd6e:	d902      	bls.n	2bd76 <update_range+0x40>
		*end = new_end;
   2bd70:	800b      	strh	r3, [r1, #0]
	return true;
   2bd72:	2001      	movs	r0, #1
   2bd74:	4770      	bx	lr
   2bd76:	2001      	movs	r0, #1
}
   2bd78:	4770      	bx	lr

0002bd7a <cf_set_value>:
{
   2bd7a:	b510      	push	{r4, lr}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2bd7c:	2300      	movs	r3, #0
   2bd7e:	e001      	b.n	2bd84 <cf_set_value+0xa>
   2bd80:	3301      	adds	r3, #1
   2bd82:	b29b      	uxth	r3, r3
   2bd84:	2b02      	cmp	r3, #2
   2bd86:	d819      	bhi.n	2bdbc <cf_set_value+0x42>
   2bd88:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   2bd8c:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   2bd90:	d912      	bls.n	2bdb8 <cf_set_value+0x3e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2bd92:	eb00 040c 	add.w	r4, r0, ip
   2bd96:	7a24      	ldrb	r4, [r4, #8]
   2bd98:	f003 0e07 	and.w	lr, r3, #7
   2bd9c:	fa24 f40e 	lsr.w	r4, r4, lr
   2bda0:	f014 0f01 	tst.w	r4, #1
   2bda4:	d0ec      	beq.n	2bd80 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   2bda6:	f811 400c 	ldrb.w	r4, [r1, ip]
   2bdaa:	fa24 f40e 	lsr.w	r4, r4, lr
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2bdae:	f014 0f01 	tst.w	r4, #1
   2bdb2:	d1e5      	bne.n	2bd80 <cf_set_value+0x6>
			return false;
   2bdb4:	2000      	movs	r0, #0
   2bdb6:	e016      	b.n	2bde6 <cf_set_value+0x6c>
   2bdb8:	2300      	movs	r3, #0
   2bdba:	e000      	b.n	2bdbe <cf_set_value+0x44>
   2bdbc:	2300      	movs	r3, #0
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2bdbe:	4293      	cmp	r3, r2
   2bdc0:	d210      	bcs.n	2bde4 <cf_set_value+0x6a>
   2bdc2:	b96b      	cbnz	r3, 2bde0 <cf_set_value+0x66>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2bdc4:	18c4      	adds	r4, r0, r3
   2bdc6:	f894 c008 	ldrb.w	ip, [r4, #8]
   2bdca:	f811 e003 	ldrb.w	lr, [r1, r3]
   2bdce:	f00e 0e07 	and.w	lr, lr, #7
   2bdd2:	ea4c 0c0e 	orr.w	ip, ip, lr
   2bdd6:	f884 c008 	strb.w	ip, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2bdda:	3301      	adds	r3, #1
   2bddc:	b29b      	uxth	r3, r3
   2bdde:	e7ee      	b.n	2bdbe <cf_set_value+0x44>
	return true;
   2bde0:	2001      	movs	r0, #1
   2bde2:	e000      	b.n	2bde6 <cf_set_value+0x6c>
   2bde4:	2001      	movs	r0, #1
}
   2bde6:	bd10      	pop	{r4, pc}

0002bde8 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2bde8:	6010      	str	r0, [r2, #0]
}
   2bdea:	2000      	movs	r0, #0
   2bdec:	4770      	bx	lr

0002bdee <gatt_ccc_changed>:
{
   2bdee:	b508      	push	{r3, lr}
   2bdf0:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   2bdf2:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2bdf4:	460b      	mov	r3, r1
   2bdf6:	b13b      	cbz	r3, 2be08 <gatt_ccc_changed+0x1a>
	if (value != ccc->value) {
   2bdf8:	8953      	ldrh	r3, [r2, #10]
   2bdfa:	4299      	cmp	r1, r3
   2bdfc:	d003      	beq.n	2be06 <gatt_ccc_changed+0x18>
		ccc->value = value;
   2bdfe:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   2be00:	68d3      	ldr	r3, [r2, #12]
   2be02:	b103      	cbz	r3, 2be06 <gatt_ccc_changed+0x18>
			ccc->cfg_changed(attr, value);
   2be04:	4798      	blx	r3
}
   2be06:	bd08      	pop	{r3, pc}
		if (ccc->cfg[i].value > value) {
   2be08:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   2be0c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
   2be10:	f8bc c008 	ldrh.w	ip, [ip, #8]
   2be14:	458c      	cmp	ip, r1
   2be16:	d900      	bls.n	2be1a <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   2be18:	4661      	mov	r1, ip
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2be1a:	3301      	adds	r3, #1
   2be1c:	e7eb      	b.n	2bdf6 <gatt_ccc_changed+0x8>

0002be1e <gatt_indicate_rsp>:
{
   2be1e:	b510      	push	{r4, lr}
   2be20:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2be22:	68a3      	ldr	r3, [r4, #8]
   2be24:	b113      	cbz	r3, 2be2c <gatt_indicate_rsp+0xe>
   2be26:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2be28:	4621      	mov	r1, r4
   2be2a:	4798      	blx	r3
	params->_ref--;
   2be2c:	7da3      	ldrb	r3, [r4, #22]
   2be2e:	3b01      	subs	r3, #1
   2be30:	b2db      	uxtb	r3, r3
   2be32:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2be34:	68e2      	ldr	r2, [r4, #12]
   2be36:	b112      	cbz	r2, 2be3e <gatt_indicate_rsp+0x20>
   2be38:	b90b      	cbnz	r3, 2be3e <gatt_indicate_rsp+0x20>
		params->destroy(params);
   2be3a:	4620      	mov	r0, r4
   2be3c:	4790      	blx	r2
}
   2be3e:	bd10      	pop	{r4, pc}

0002be40 <match_uuid>:
	data->attr = attr;
   2be40:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2be42:	8091      	strh	r1, [r2, #4]
}
   2be44:	2000      	movs	r0, #0
   2be46:	4770      	bx	lr

0002be48 <ccc_set_cb>:
}
   2be48:	2000      	movs	r0, #0
   2be4a:	4770      	bx	lr

0002be4c <gen_hash_m>:
{
   2be4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2be4e:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2be50:	6806      	ldr	r6, [r0, #0]
   2be52:	7835      	ldrb	r5, [r6, #0]
   2be54:	2d00      	cmp	r5, #0
   2be56:	d160      	bne.n	2bf1a <gen_hash_m+0xce>
   2be58:	4607      	mov	r7, r0
   2be5a:	4614      	mov	r4, r2
	switch (u16->val) {
   2be5c:	8873      	ldrh	r3, [r6, #2]
   2be5e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2be62:	d019      	beq.n	2be98 <gen_hash_m+0x4c>
   2be64:	d913      	bls.n	2be8e <gen_hash_m+0x42>
   2be66:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2be6a:	33ff      	adds	r3, #255	; 0xff
   2be6c:	b29b      	uxth	r3, r3
   2be6e:	2b04      	cmp	r3, #4
   2be70:	d859      	bhi.n	2bf26 <gen_hash_m+0xda>
		value = sys_cpu_to_le16(handle);
   2be72:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2be76:	2202      	movs	r2, #2
   2be78:	f10d 010a 	add.w	r1, sp, #10
   2be7c:	4620      	mov	r0, r4
   2be7e:	f7fd fd59 	bl	29934 <tc_cmac_update>
   2be82:	2800      	cmp	r0, #0
   2be84:	d139      	bne.n	2befa <gen_hash_m+0xae>
			state->err = -EINVAL;
   2be86:	f06f 0315 	mvn.w	r3, #21
   2be8a:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2be8c:	e046      	b.n	2bf1c <gen_hash_m+0xd0>
	switch (u16->val) {
   2be8e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2be92:	b29b      	uxth	r3, r3
   2be94:	2b03      	cmp	r3, #3
   2be96:	d844      	bhi.n	2bf22 <gen_hash_m+0xd6>
		value = sys_cpu_to_le16(handle);
   2be98:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2be9c:	2202      	movs	r2, #2
   2be9e:	f10d 010a 	add.w	r1, sp, #10
   2bea2:	4620      	mov	r0, r4
   2bea4:	f7fd fd46 	bl	29934 <tc_cmac_update>
   2bea8:	b918      	cbnz	r0, 2beb2 <gen_hash_m+0x66>
			state->err = -EINVAL;
   2beaa:	f06f 0315 	mvn.w	r3, #21
   2beae:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2beb0:	e034      	b.n	2bf1c <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2beb2:	8873      	ldrh	r3, [r6, #2]
   2beb4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2beb8:	2202      	movs	r2, #2
   2beba:	f10d 010a 	add.w	r1, sp, #10
   2bebe:	4620      	mov	r0, r4
   2bec0:	f7fd fd38 	bl	29934 <tc_cmac_update>
   2bec4:	b178      	cbz	r0, 2bee6 <gen_hash_m+0x9a>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2bec6:	687e      	ldr	r6, [r7, #4]
   2bec8:	2000      	movs	r0, #0
   2beca:	9000      	str	r0, [sp, #0]
   2becc:	2313      	movs	r3, #19
   2bece:	aa03      	add	r2, sp, #12
   2bed0:	4639      	mov	r1, r7
   2bed2:	47b0      	blx	r6
		if (len < 0) {
   2bed4:	1e02      	subs	r2, r0, #0
   2bed6:	db0a      	blt.n	2beee <gen_hash_m+0xa2>
		if (tc_cmac_update(&state->state, data, len) ==
   2bed8:	a903      	add	r1, sp, #12
   2beda:	4620      	mov	r0, r4
   2bedc:	f7fd fd2a 	bl	29934 <tc_cmac_update>
   2bee0:	b138      	cbz	r0, 2bef2 <gen_hash_m+0xa6>
	return BT_GATT_ITER_CONTINUE;
   2bee2:	2501      	movs	r5, #1
   2bee4:	e01a      	b.n	2bf1c <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2bee6:	f06f 0315 	mvn.w	r3, #21
   2beea:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2beec:	e016      	b.n	2bf1c <gen_hash_m+0xd0>
			state->err = len;
   2beee:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2bef0:	e014      	b.n	2bf1c <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2bef2:	f06f 0315 	mvn.w	r3, #21
   2bef6:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2bef8:	e010      	b.n	2bf1c <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2befa:	8873      	ldrh	r3, [r6, #2]
   2befc:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bf00:	2202      	movs	r2, #2
   2bf02:	f10d 010a 	add.w	r1, sp, #10
   2bf06:	4620      	mov	r0, r4
   2bf08:	f7fd fd14 	bl	29934 <tc_cmac_update>
   2bf0c:	b108      	cbz	r0, 2bf12 <gen_hash_m+0xc6>
	return BT_GATT_ITER_CONTINUE;
   2bf0e:	2501      	movs	r5, #1
   2bf10:	e004      	b.n	2bf1c <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2bf12:	f06f 0315 	mvn.w	r3, #21
   2bf16:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2bf18:	e000      	b.n	2bf1c <gen_hash_m+0xd0>
		return BT_GATT_ITER_CONTINUE;
   2bf1a:	2501      	movs	r5, #1
}
   2bf1c:	4628      	mov	r0, r5
   2bf1e:	b009      	add	sp, #36	; 0x24
   2bf20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2bf22:	2501      	movs	r5, #1
   2bf24:	e7fa      	b.n	2bf1c <gen_hash_m+0xd0>
   2bf26:	2501      	movs	r5, #1
   2bf28:	e7f8      	b.n	2bf1c <gen_hash_m+0xd0>

0002bf2a <ccc_find_cfg>:
{
   2bf2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bf2c:	4605      	mov	r5, r0
   2bf2e:	460f      	mov	r7, r1
   2bf30:	4616      	mov	r6, r2
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2bf32:	2400      	movs	r4, #0
   2bf34:	b10c      	cbz	r4, 2bf3a <ccc_find_cfg+0x10>
	return NULL;
   2bf36:	2000      	movs	r0, #0
}
   2bf38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (id == ccc->cfg[i].id &&
   2bf3a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2bf3e:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
   2bf42:	42b3      	cmp	r3, r6
   2bf44:	d001      	beq.n	2bf4a <ccc_find_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2bf46:	3401      	adds	r4, #1
   2bf48:	e7f4      	b.n	2bf34 <ccc_find_cfg+0xa>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   2bf4a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   2bf4e:	eb05 0040 	add.w	r0, r5, r0, lsl #1
	return memcmp(a, b, sizeof(*a));
   2bf52:	2207      	movs	r2, #7
   2bf54:	4639      	mov	r1, r7
   2bf56:	3001      	adds	r0, #1
   2bf58:	f7fd fef3 	bl	29d42 <memcmp>
		if (id == ccc->cfg[i].id &&
   2bf5c:	2800      	cmp	r0, #0
   2bf5e:	d1f2      	bne.n	2bf46 <ccc_find_cfg+0x1c>
			return &ccc->cfg[i];
   2bf60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2bf64:	eb05 0044 	add.w	r0, r5, r4, lsl #1
   2bf68:	e7e6      	b.n	2bf38 <ccc_find_cfg+0xe>

0002bf6a <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2bf6a:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bf6c:	f3bf 8f5b 	dmb	ish
   2bf70:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2bf74:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2bf78:	f001 011f 	and.w	r1, r1, #31
   2bf7c:	4108      	asrs	r0, r1
}
   2bf7e:	f000 0001 	and.w	r0, r0, #1
   2bf82:	4770      	bx	lr

0002bf84 <ccc_clear>:
{
   2bf84:	b508      	push	{r3, lr}
	cfg = ccc_find_cfg(ccc, addr, id);
   2bf86:	f7ff ffd0 	bl	2bf2a <ccc_find_cfg>
	if (!cfg) {
   2bf8a:	b108      	cbz	r0, 2bf90 <ccc_clear+0xc>
	clear_ccc_cfg(cfg);
   2bf8c:	f7ec ff6a 	bl	18e64 <clear_ccc_cfg>
}
   2bf90:	bd08      	pop	{r3, pc}

0002bf92 <clear_sc_cfg>:
{
   2bf92:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   2bf94:	220c      	movs	r2, #12
   2bf96:	2100      	movs	r1, #0
   2bf98:	f7fd ff27 	bl	29dea <memset>
}
   2bf9c:	bd08      	pop	{r3, pc}

0002bf9e <sc_ccc_cfg_write>:
{
   2bf9e:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2bfa0:	2a02      	cmp	r2, #2
   2bfa2:	d003      	beq.n	2bfac <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   2bfa4:	f7ed f88c 	bl	190c0 <sc_clear>
}
   2bfa8:	2002      	movs	r0, #2
   2bfaa:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2bfac:	2300      	movs	r3, #0
   2bfae:	461a      	mov	r2, r3
   2bfb0:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2bfb4:	7a00      	ldrb	r0, [r0, #8]
   2bfb6:	f7ec ffd7 	bl	18f68 <sc_save>
   2bfba:	e7f5      	b.n	2bfa8 <sc_ccc_cfg_write+0xa>

0002bfbc <sc_reset>:
{
   2bfbc:	b510      	push	{r4, lr}
   2bfbe:	4604      	mov	r4, r0
	memset(&cfg->data, 0, sizeof(cfg->data));
   2bfc0:	2204      	movs	r2, #4
   2bfc2:	2100      	movs	r1, #0
   2bfc4:	3008      	adds	r0, #8
   2bfc6:	f7fd ff10 	bl	29dea <memset>
		sc_store(cfg);
   2bfca:	4620      	mov	r0, r4
   2bfcc:	f7ec ff9e 	bl	18f0c <sc_store>
}
   2bfd0:	bd10      	pop	{r4, pc}

0002bfd2 <sc_restore_rsp>:
{
   2bfd2:	b538      	push	{r3, r4, r5, lr}
   2bfd4:	4605      	mov	r5, r0
   2bfd6:	4614      	mov	r4, r2
	if (bt_att_fixed_chan_only(conn)) {
   2bfd8:	f7ff fe65 	bl	2bca6 <bt_att_fixed_chan_only>
   2bfdc:	b908      	cbnz	r0, 2bfe2 <sc_restore_rsp+0x10>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2bfde:	b1c4      	cbz	r4, 2c012 <sc_restore_rsp+0x40>
}
   2bfe0:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_cf_cfg(conn);
   2bfe2:	4628      	mov	r0, r5
   2bfe4:	f7ec fe46 	bl	18c74 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2bfe8:	4603      	mov	r3, r0
   2bfea:	2800      	cmp	r0, #0
   2bfec:	d0f7      	beq.n	2bfde <sc_restore_rsp+0xc>
   2bfee:	7a02      	ldrb	r2, [r0, #8]
   2bff0:	f012 0f01 	tst.w	r2, #1
   2bff4:	d0f3      	beq.n	2bfde <sc_restore_rsp+0xc>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2bff6:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bff8:	f3bf 8f5b 	dmb	ish
   2bffc:	e853 1f00 	ldrex	r1, [r3]
   2c000:	f041 0101 	orr.w	r1, r1, #1
   2c004:	e843 1200 	strex	r2, r1, [r3]
   2c008:	2a00      	cmp	r2, #0
   2c00a:	d1f7      	bne.n	2bffc <sc_restore_rsp+0x2a>
   2c00c:	f3bf 8f5b 	dmb	ish
			BT_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
   2c010:	e7e5      	b.n	2bfde <sc_restore_rsp+0xc>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2c012:	f105 0190 	add.w	r1, r5, #144	; 0x90
   2c016:	7a28      	ldrb	r0, [r5, #8]
   2c018:	f7ec fe52 	bl	18cc0 <find_sc_cfg>
		if (sc_cfg) {
   2c01c:	2800      	cmp	r0, #0
   2c01e:	d0df      	beq.n	2bfe0 <sc_restore_rsp+0xe>
			sc_reset(sc_cfg);
   2c020:	f7ff ffcc 	bl	2bfbc <sc_reset>
}
   2c024:	e7dc      	b.n	2bfe0 <sc_restore_rsp+0xe>

0002c026 <atomic_test_and_clear_bit>:
{
   2c026:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c028:	f001 021f 	and.w	r2, r1, #31
   2c02c:	2301      	movs	r3, #1
   2c02e:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c030:	0949      	lsrs	r1, r1, #5
   2c032:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2c036:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c038:	f3bf 8f5b 	dmb	ish
   2c03c:	e850 2f00 	ldrex	r2, [r0]
   2c040:	ea02 0c01 	and.w	ip, r2, r1
   2c044:	e840 ce00 	strex	lr, ip, [r0]
   2c048:	f1be 0f00 	cmp.w	lr, #0
   2c04c:	d1f6      	bne.n	2c03c <atomic_test_and_clear_bit+0x16>
   2c04e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2c052:	4213      	tst	r3, r2
}
   2c054:	bf14      	ite	ne
   2c056:	2001      	movne	r0, #1
   2c058:	2000      	moveq	r0, #0
   2c05a:	f85d fb04 	ldr.w	pc, [sp], #4

0002c05e <gatt_foreach_iter>:
	if (handle > end_handle) {
   2c05e:	4299      	cmp	r1, r3
   2c060:	d822      	bhi.n	2c0a8 <gatt_foreach_iter+0x4a>
{
   2c062:	b538      	push	{r3, r4, r5, lr}
   2c064:	4605      	mov	r5, r0
   2c066:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2c068:	4291      	cmp	r1, r2
   2c06a:	d31f      	bcc.n	2c0ac <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2c06c:	9b04      	ldr	r3, [sp, #16]
   2c06e:	b123      	cbz	r3, 2c07a <gatt_foreach_iter+0x1c>
   2c070:	6801      	ldr	r1, [r0, #0]
   2c072:	4618      	mov	r0, r3
   2c074:	f7fd ff7a 	bl	29f6c <bt_uuid_cmp>
   2c078:	b9d0      	cbnz	r0, 2c0b0 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2c07a:	9b05      	ldr	r3, [sp, #20]
   2c07c:	b12b      	cbz	r3, 2c08a <gatt_foreach_iter+0x2c>
   2c07e:	68eb      	ldr	r3, [r5, #12]
   2c080:	9a05      	ldr	r2, [sp, #20]
   2c082:	4293      	cmp	r3, r2
   2c084:	d001      	beq.n	2c08a <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   2c086:	2001      	movs	r0, #1
   2c088:	e011      	b.n	2c0ae <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2c08a:	9b06      	ldr	r3, [sp, #24]
   2c08c:	881b      	ldrh	r3, [r3, #0]
   2c08e:	3b01      	subs	r3, #1
   2c090:	9a06      	ldr	r2, [sp, #24]
   2c092:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   2c094:	9a08      	ldr	r2, [sp, #32]
   2c096:	4621      	mov	r1, r4
   2c098:	4628      	mov	r0, r5
   2c09a:	9b07      	ldr	r3, [sp, #28]
   2c09c:	4798      	blx	r3
	if (!*num_matches) {
   2c09e:	9b06      	ldr	r3, [sp, #24]
   2c0a0:	881b      	ldrh	r3, [r3, #0]
   2c0a2:	b923      	cbnz	r3, 2c0ae <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2c0a4:	2000      	movs	r0, #0
   2c0a6:	e002      	b.n	2c0ae <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2c0a8:	2000      	movs	r0, #0
}
   2c0aa:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2c0ac:	2001      	movs	r0, #1
}
   2c0ae:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   2c0b0:	2001      	movs	r0, #1
   2c0b2:	e7fc      	b.n	2c0ae <gatt_foreach_iter+0x50>

0002c0b4 <gatt_req_alloc>:
{
   2c0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c0b6:	4606      	mov	r6, r0
   2c0b8:	460f      	mov	r7, r1
   2c0ba:	4614      	mov	r4, r2
   2c0bc:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2c0be:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2c0c2:	2100      	movs	r1, #0
   2c0c4:	f7ec fc76 	bl	189b4 <bt_att_req_alloc>
	if (!req) {
   2c0c8:	4684      	mov	ip, r0
   2c0ca:	b128      	cbz	r0, 2c0d8 <gatt_req_alloc+0x24>
	req->att_op = op;
   2c0cc:	7445      	strb	r5, [r0, #17]
	req->len = len;
   2c0ce:	9b06      	ldr	r3, [sp, #24]
   2c0d0:	6143      	str	r3, [r0, #20]
	req->encode = encode;
   2c0d2:	60c4      	str	r4, [r0, #12]
	req->func = func;
   2c0d4:	6046      	str	r6, [r0, #4]
	req->user_data = params;
   2c0d6:	6187      	str	r7, [r0, #24]
}
   2c0d8:	4660      	mov	r0, ip
   2c0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c0dc <remove_cf_cfg>:
{
   2c0dc:	b570      	push	{r4, r5, r6, lr}
   2c0de:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   2c0e0:	f7ec fdc8 	bl	18c74 <find_cf_cfg>
	if (!cfg) {
   2c0e4:	b150      	cbz	r0, 2c0fc <remove_cf_cfg+0x20>
   2c0e6:	4606      	mov	r6, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2c0e8:	f104 0590 	add.w	r5, r4, #144	; 0x90
   2c0ec:	4629      	mov	r1, r5
   2c0ee:	7a20      	ldrb	r0, [r4, #8]
   2c0f0:	f7fe f946 	bl	2a380 <bt_addr_le_is_bonded>
   2c0f4:	b918      	cbnz	r0, 2c0fe <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   2c0f6:	4630      	mov	r0, r6
   2c0f8:	f7ed fa68 	bl	195cc <clear_cf_cfg>
}
   2c0fc:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(dst, src, sizeof(*dst));
   2c0fe:	2207      	movs	r2, #7
   2c100:	4629      	mov	r1, r5
   2c102:	1c70      	adds	r0, r6, #1
   2c104:	f7fd fe42 	bl	29d8c <memcpy>
}
   2c108:	e7f8      	b.n	2c0fc <remove_cf_cfg+0x20>

0002c10a <bt_gatt_attr_read>:
{
   2c10a:	b510      	push	{r4, lr}
   2c10c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2c110:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2c114:	42a1      	cmp	r1, r4
   2c116:	d80c      	bhi.n	2c132 <bt_gatt_attr_read+0x28>
   2c118:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   2c11a:	1a64      	subs	r4, r4, r1
   2c11c:	42a3      	cmp	r3, r4
   2c11e:	bfa8      	it	ge
   2c120:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2c122:	b29c      	uxth	r4, r3
   2c124:	4622      	mov	r2, r4
   2c126:	9b03      	ldr	r3, [sp, #12]
   2c128:	4419      	add	r1, r3
   2c12a:	f7fd fe2f 	bl	29d8c <memcpy>
}
   2c12e:	4620      	mov	r0, r4
   2c130:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c132:	f06f 0406 	mvn.w	r4, #6
   2c136:	e7fa      	b.n	2c12e <bt_gatt_attr_read+0x24>

0002c138 <read_ppcp>:
{
   2c138:	b510      	push	{r4, lr}
   2c13a:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2c13c:	2418      	movs	r4, #24
   2c13e:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2c142:	2428      	movs	r4, #40	; 0x28
   2c144:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2c148:	2400      	movs	r4, #0
   2c14a:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2c14e:	242a      	movs	r4, #42	; 0x2a
   2c150:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2c154:	2408      	movs	r4, #8
   2c156:	9402      	str	r4, [sp, #8]
   2c158:	ac04      	add	r4, sp, #16
   2c15a:	9401      	str	r4, [sp, #4]
   2c15c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2c160:	9400      	str	r4, [sp, #0]
   2c162:	f7ff ffd2 	bl	2c10a <bt_gatt_attr_read>
}
   2c166:	b006      	add	sp, #24
   2c168:	bd10      	pop	{r4, pc}

0002c16a <read_appearance>:
{
   2c16a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c16c:	b087      	sub	sp, #28
   2c16e:	4604      	mov	r4, r0
   2c170:	460d      	mov	r5, r1
   2c172:	4616      	mov	r6, r2
   2c174:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2c176:	f7fe f901 	bl	2a37c <bt_get_appearance>
   2c17a:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2c17e:	2302      	movs	r3, #2
   2c180:	9302      	str	r3, [sp, #8]
   2c182:	f10d 0316 	add.w	r3, sp, #22
   2c186:	9301      	str	r3, [sp, #4]
   2c188:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2c18c:	9300      	str	r3, [sp, #0]
   2c18e:	463b      	mov	r3, r7
   2c190:	4632      	mov	r2, r6
   2c192:	4629      	mov	r1, r5
   2c194:	4620      	mov	r0, r4
   2c196:	f7ff ffb8 	bl	2c10a <bt_gatt_attr_read>
}
   2c19a:	b007      	add	sp, #28
   2c19c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c19e <read_name>:
{
   2c19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c1a2:	b084      	sub	sp, #16
   2c1a4:	4604      	mov	r4, r0
   2c1a6:	460d      	mov	r5, r1
   2c1a8:	4616      	mov	r6, r2
   2c1aa:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   2c1ac:	f7e9 fc16 	bl	159dc <bt_get_name>
   2c1b0:	4680      	mov	r8, r0
				 strlen(name));
   2c1b2:	f7fd fd95 	bl	29ce0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2c1b6:	b280      	uxth	r0, r0
   2c1b8:	9002      	str	r0, [sp, #8]
   2c1ba:	f8cd 8004 	str.w	r8, [sp, #4]
   2c1be:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2c1c2:	9300      	str	r3, [sp, #0]
   2c1c4:	463b      	mov	r3, r7
   2c1c6:	4632      	mov	r2, r6
   2c1c8:	4629      	mov	r1, r5
   2c1ca:	4620      	mov	r0, r4
   2c1cc:	f7ff ff9d 	bl	2c10a <bt_gatt_attr_read>
}
   2c1d0:	b004      	add	sp, #16
   2c1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c1d6 <cf_read>:
{
   2c1d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c1d8:	b087      	sub	sp, #28
   2c1da:	4604      	mov	r4, r0
   2c1dc:	460d      	mov	r5, r1
   2c1de:	4616      	mov	r6, r2
   2c1e0:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2c1e2:	2300      	movs	r3, #0
   2c1e4:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2c1e8:	f7ec fd44 	bl	18c74 <find_cf_cfg>
	if (cfg) {
   2c1ec:	b128      	cbz	r0, 2c1fa <cf_read+0x24>
   2c1ee:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   2c1f0:	2201      	movs	r2, #1
   2c1f2:	3108      	adds	r1, #8
   2c1f4:	a805      	add	r0, sp, #20
   2c1f6:	f7fd fdc9 	bl	29d8c <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2c1fa:	2301      	movs	r3, #1
   2c1fc:	9302      	str	r3, [sp, #8]
   2c1fe:	ab05      	add	r3, sp, #20
   2c200:	9301      	str	r3, [sp, #4]
   2c202:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2c206:	9300      	str	r3, [sp, #0]
   2c208:	463b      	mov	r3, r7
   2c20a:	4632      	mov	r2, r6
   2c20c:	4629      	mov	r1, r5
   2c20e:	4620      	mov	r0, r4
   2c210:	f7ff ff7b 	bl	2c10a <bt_gatt_attr_read>
}
   2c214:	b007      	add	sp, #28
   2c216:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c218 <bt_gatt_attr_read_service>:
{
   2c218:	b570      	push	{r4, r5, r6, lr}
   2c21a:	b086      	sub	sp, #24
   2c21c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   2c220:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2c222:	7826      	ldrb	r6, [r4, #0]
   2c224:	b146      	cbz	r6, 2c238 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   2c226:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2c228:	2610      	movs	r6, #16
   2c22a:	9602      	str	r6, [sp, #8]
   2c22c:	9401      	str	r4, [sp, #4]
   2c22e:	9500      	str	r5, [sp, #0]
   2c230:	f7ff ff6b 	bl	2c10a <bt_gatt_attr_read>
}
   2c234:	b006      	add	sp, #24
   2c236:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2c238:	8864      	ldrh	r4, [r4, #2]
   2c23a:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2c23e:	2402      	movs	r4, #2
   2c240:	9402      	str	r4, [sp, #8]
   2c242:	f10d 0416 	add.w	r4, sp, #22
   2c246:	9401      	str	r4, [sp, #4]
   2c248:	9500      	str	r5, [sp, #0]
   2c24a:	f7ff ff5e 	bl	2c10a <bt_gatt_attr_read>
   2c24e:	e7f1      	b.n	2c234 <bt_gatt_attr_read_service+0x1c>

0002c250 <bt_gatt_attr_read_ccc>:
{
   2c250:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c252:	b087      	sub	sp, #28
   2c254:	4605      	mov	r5, r0
   2c256:	460c      	mov	r4, r1
   2c258:	4616      	mov	r6, r2
   2c25a:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2c25c:	68c9      	ldr	r1, [r1, #12]
   2c25e:	f7ec fd53 	bl	18d08 <find_ccc_cfg>
	if (cfg) {
   2c262:	b190      	cbz	r0, 2c28a <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   2c264:	8903      	ldrh	r3, [r0, #8]
   2c266:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2c26a:	2302      	movs	r3, #2
   2c26c:	9302      	str	r3, [sp, #8]
   2c26e:	f10d 0316 	add.w	r3, sp, #22
   2c272:	9301      	str	r3, [sp, #4]
   2c274:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2c278:	9300      	str	r3, [sp, #0]
   2c27a:	463b      	mov	r3, r7
   2c27c:	4632      	mov	r2, r6
   2c27e:	4621      	mov	r1, r4
   2c280:	4628      	mov	r0, r5
   2c282:	f7ff ff42 	bl	2c10a <bt_gatt_attr_read>
}
   2c286:	b007      	add	sp, #28
   2c288:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   2c28a:	2300      	movs	r3, #0
   2c28c:	f8ad 3016 	strh.w	r3, [sp, #22]
   2c290:	e7eb      	b.n	2c26a <bt_gatt_attr_read_ccc+0x1a>

0002c292 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2c292:	b1b8      	cbz	r0, 2c2c4 <bt_gatt_attr_value_handle+0x32>
{
   2c294:	b510      	push	{r4, lr}
   2c296:	b082      	sub	sp, #8
   2c298:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2c29a:	2300      	movs	r3, #0
   2c29c:	f88d 3004 	strb.w	r3, [sp, #4]
   2c2a0:	f642 0303 	movw	r3, #10243	; 0x2803
   2c2a4:	f8ad 3006 	strh.w	r3, [sp, #6]
   2c2a8:	a901      	add	r1, sp, #4
   2c2aa:	6800      	ldr	r0, [r0, #0]
   2c2ac:	f7fd fe5e 	bl	29f6c <bt_uuid_cmp>
   2c2b0:	b950      	cbnz	r0, 2c2c8 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2c2b2:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   2c2b4:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2c2b6:	b940      	cbnz	r0, 2c2ca <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2c2b8:	4620      	mov	r0, r4
   2c2ba:	f7ed fa7f 	bl	197bc <bt_gatt_attr_get_handle>
   2c2be:	3001      	adds	r0, #1
   2c2c0:	b280      	uxth	r0, r0
   2c2c2:	e002      	b.n	2c2ca <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   2c2c4:	2000      	movs	r0, #0
}
   2c2c6:	4770      	bx	lr
	uint16_t handle = 0;
   2c2c8:	2000      	movs	r0, #0
}
   2c2ca:	b002      	add	sp, #8
   2c2cc:	bd10      	pop	{r4, pc}

0002c2ce <bt_gatt_attr_read_chrc>:
{
   2c2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c2d2:	b08a      	sub	sp, #40	; 0x28
   2c2d4:	4605      	mov	r5, r0
   2c2d6:	460c      	mov	r4, r1
   2c2d8:	4616      	mov	r6, r2
   2c2da:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   2c2dc:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   2c2e0:	f898 3006 	ldrb.w	r3, [r8, #6]
   2c2e4:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2c2e8:	4608      	mov	r0, r1
   2c2ea:	f7ff ffd2 	bl	2c292 <bt_gatt_attr_value_handle>
   2c2ee:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2c2f2:	f8d8 1000 	ldr.w	r1, [r8]
   2c2f6:	780b      	ldrb	r3, [r1, #0]
   2c2f8:	b993      	cbnz	r3, 2c320 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2c2fa:	884b      	ldrh	r3, [r1, #2]
   2c2fc:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   2c300:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2c302:	9302      	str	r3, [sp, #8]
   2c304:	ab05      	add	r3, sp, #20
   2c306:	9301      	str	r3, [sp, #4]
   2c308:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2c30c:	9300      	str	r3, [sp, #0]
   2c30e:	463b      	mov	r3, r7
   2c310:	4632      	mov	r2, r6
   2c312:	4621      	mov	r1, r4
   2c314:	4628      	mov	r0, r5
   2c316:	f7ff fef8 	bl	2c10a <bt_gatt_attr_read>
}
   2c31a:	b00a      	add	sp, #40	; 0x28
   2c31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2c320:	2210      	movs	r2, #16
   2c322:	3101      	adds	r1, #1
   2c324:	f10d 0017 	add.w	r0, sp, #23
   2c328:	f7fd fd30 	bl	29d8c <memcpy>
		value_len += 16U;
   2c32c:	2313      	movs	r3, #19
   2c32e:	e7e8      	b.n	2c302 <bt_gatt_attr_read_chrc+0x34>

0002c330 <bt_gatt_check_perm>:
{
   2c330:	b538      	push	{r3, r4, r5, lr}
   2c332:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   2c334:	f012 0f01 	tst.w	r2, #1
   2c338:	d005      	beq.n	2c346 <bt_gatt_check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2c33a:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2c33c:	f013 0f95 	tst.w	r3, #149	; 0x95
   2c340:	d027      	beq.n	2c392 <bt_gatt_check_perm+0x62>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2c342:	684b      	ldr	r3, [r1, #4]
   2c344:	b33b      	cbz	r3, 2c396 <bt_gatt_check_perm+0x66>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2c346:	f012 0f02 	tst.w	r2, #2
   2c34a:	d005      	beq.n	2c358 <bt_gatt_check_perm+0x28>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2c34c:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   2c34e:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2c352:	d022      	beq.n	2c39a <bt_gatt_check_perm+0x6a>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2c354:	688b      	ldr	r3, [r1, #8]
   2c356:	b313      	cbz	r3, 2c39e <bt_gatt_check_perm+0x6e>
	mask &= attr->perm;
   2c358:	8a4c      	ldrh	r4, [r1, #18]
   2c35a:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2c35c:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2c360:	d006      	beq.n	2c370 <bt_gatt_check_perm+0x40>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2c362:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2c366:	b1e3      	cbz	r3, 2c3a2 <bt_gatt_check_perm+0x72>
		    (conn->le.keys->flags & BT_KEYS_SC) == 0) {
   2c368:	7b5b      	ldrb	r3, [r3, #13]
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2c36a:	f013 0f10 	tst.w	r3, #16
   2c36e:	d01a      	beq.n	2c3a6 <bt_gatt_check_perm+0x76>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2c370:	f014 0f30 	tst.w	r4, #48	; 0x30
   2c374:	d106      	bne.n	2c384 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2c376:	f014 0f0c 	tst.w	r4, #12
   2c37a:	d016      	beq.n	2c3aa <bt_gatt_check_perm+0x7a>
		if (!conn->encrypt) {
   2c37c:	7aeb      	ldrb	r3, [r5, #11]
   2c37e:	b1b3      	cbz	r3, 2c3ae <bt_gatt_check_perm+0x7e>
	return 0;
   2c380:	2000      	movs	r0, #0
   2c382:	e013      	b.n	2c3ac <bt_gatt_check_perm+0x7c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2c384:	4628      	mov	r0, r5
   2c386:	f7fe fccf 	bl	2ad28 <bt_conn_get_security>
   2c38a:	2802      	cmp	r0, #2
   2c38c:	d8f3      	bhi.n	2c376 <bt_gatt_check_perm+0x46>
			return BT_ATT_ERR_AUTHENTICATION;
   2c38e:	2005      	movs	r0, #5
   2c390:	e00c      	b.n	2c3ac <bt_gatt_check_perm+0x7c>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2c392:	2002      	movs	r0, #2
   2c394:	e00a      	b.n	2c3ac <bt_gatt_check_perm+0x7c>
   2c396:	2002      	movs	r0, #2
   2c398:	e008      	b.n	2c3ac <bt_gatt_check_perm+0x7c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2c39a:	2003      	movs	r0, #3
   2c39c:	e006      	b.n	2c3ac <bt_gatt_check_perm+0x7c>
   2c39e:	2003      	movs	r0, #3
   2c3a0:	e004      	b.n	2c3ac <bt_gatt_check_perm+0x7c>
			return BT_ATT_ERR_AUTHENTICATION;
   2c3a2:	2005      	movs	r0, #5
   2c3a4:	e002      	b.n	2c3ac <bt_gatt_check_perm+0x7c>
   2c3a6:	2005      	movs	r0, #5
   2c3a8:	e000      	b.n	2c3ac <bt_gatt_check_perm+0x7c>
	return 0;
   2c3aa:	2000      	movs	r0, #0
}
   2c3ac:	bd38      	pop	{r3, r4, r5, pc}
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2c3ae:	200f      	movs	r0, #15
   2c3b0:	e7fc      	b.n	2c3ac <bt_gatt_check_perm+0x7c>

0002c3b2 <bt_gatt_change_aware>:
{
   2c3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c3b4:	4607      	mov	r7, r0
   2c3b6:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2c3b8:	f7ec fc5c 	bl	18c74 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2c3bc:	2800      	cmp	r0, #0
   2c3be:	d050      	beq.n	2c462 <bt_gatt_change_aware+0xb0>
   2c3c0:	7a02      	ldrb	r2, [r0, #8]
   2c3c2:	f012 0f01 	tst.w	r2, #1
   2c3c6:	d102      	bne.n	2c3ce <bt_gatt_change_aware+0x1c>
		return true;
   2c3c8:	2601      	movs	r6, #1
}
   2c3ca:	4630      	mov	r0, r6
   2c3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2c3ce:	f100 050c 	add.w	r5, r0, #12
   2c3d2:	2100      	movs	r1, #0
   2c3d4:	4628      	mov	r0, r5
   2c3d6:	f7ff fdc8 	bl	2bf6a <atomic_test_bit>
   2c3da:	4606      	mov	r6, r0
   2c3dc:	2800      	cmp	r0, #0
   2c3de:	d1f4      	bne.n	2c3ca <bt_gatt_change_aware+0x18>
	if (!req) {
   2c3e0:	b90c      	cbnz	r4, 2c3e6 <bt_gatt_change_aware+0x34>
		return false;
   2c3e2:	4626      	mov	r6, r4
   2c3e4:	e7f1      	b.n	2c3ca <bt_gatt_change_aware+0x18>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2c3e6:	2101      	movs	r1, #1
   2c3e8:	4628      	mov	r0, r5
   2c3ea:	f7ff fe1c 	bl	2c026 <atomic_test_and_clear_bit>
   2c3ee:	4606      	mov	r6, r0
   2c3f0:	bb38      	cbnz	r0, 2c442 <bt_gatt_change_aware+0x90>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2c3f2:	4638      	mov	r0, r7
   2c3f4:	f7ff fc57 	bl	2bca6 <bt_att_fixed_chan_only>
   2c3f8:	4606      	mov	r6, r0
   2c3fa:	2800      	cmp	r0, #0
   2c3fc:	d0e5      	beq.n	2c3ca <bt_gatt_change_aware+0x18>
   2c3fe:	4638      	mov	r0, r7
   2c400:	f7ff fc70 	bl	2bce4 <bt_att_out_of_sync_sent_on_fixed>
   2c404:	4606      	mov	r6, r0
   2c406:	2800      	cmp	r0, #0
   2c408:	d0df      	beq.n	2c3ca <bt_gatt_change_aware+0x18>
   2c40a:	f3bf 8f5b 	dmb	ish
   2c40e:	e855 3f00 	ldrex	r3, [r5]
   2c412:	f023 0302 	bic.w	r3, r3, #2
   2c416:	e845 3200 	strex	r2, r3, [r5]
   2c41a:	2a00      	cmp	r2, #0
   2c41c:	d1f7      	bne.n	2c40e <bt_gatt_change_aware+0x5c>
   2c41e:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   2c422:	4638      	mov	r0, r7
   2c424:	f7ff fc41 	bl	2bcaa <bt_att_clear_out_of_sync_sent>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c428:	f3bf 8f5b 	dmb	ish
   2c42c:	e855 3f00 	ldrex	r3, [r5]
   2c430:	f043 0301 	orr.w	r3, r3, #1
   2c434:	e845 3200 	strex	r2, r3, [r5]
   2c438:	2a00      	cmp	r2, #0
   2c43a:	d1f7      	bne.n	2c42c <bt_gatt_change_aware+0x7a>
   2c43c:	f3bf 8f5b 	dmb	ish
		return true;
   2c440:	e7c3      	b.n	2c3ca <bt_gatt_change_aware+0x18>
		bt_att_clear_out_of_sync_sent(conn);
   2c442:	4638      	mov	r0, r7
   2c444:	f7ff fc31 	bl	2bcaa <bt_att_clear_out_of_sync_sent>
   2c448:	f3bf 8f5b 	dmb	ish
   2c44c:	e855 3f00 	ldrex	r3, [r5]
   2c450:	f043 0301 	orr.w	r3, r3, #1
   2c454:	e845 3200 	strex	r2, r3, [r5]
   2c458:	2a00      	cmp	r2, #0
   2c45a:	d1f7      	bne.n	2c44c <bt_gatt_change_aware+0x9a>
   2c45c:	f3bf 8f5b 	dmb	ish
		return true;
   2c460:	e7b3      	b.n	2c3ca <bt_gatt_change_aware+0x18>
		return true;
   2c462:	2601      	movs	r6, #1
   2c464:	e7b1      	b.n	2c3ca <bt_gatt_change_aware+0x18>

0002c466 <ccc_delayed_store>:
{
   2c466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c468:	4605      	mov	r5, r0
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   2c46a:	2400      	movs	r4, #0
   2c46c:	b104      	cbz	r4, 2c470 <ccc_delayed_store+0xa>
}
   2c46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2c470:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2c474:	f853 6c08 	ldr.w	r6, [r3, #-8]
		if (!conn) {
   2c478:	b136      	cbz	r6, 2c488 <ccc_delayed_store+0x22>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2c47a:	f106 0790 	add.w	r7, r6, #144	; 0x90
   2c47e:	4639      	mov	r1, r7
   2c480:	7a30      	ldrb	r0, [r6, #8]
   2c482:	f7fd ff7d 	bl	2a380 <bt_addr_le_is_bonded>
   2c486:	b908      	cbnz	r0, 2c48c <ccc_delayed_store+0x26>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   2c488:	3401      	adds	r4, #1
   2c48a:	e7ef      	b.n	2c46c <ccc_delayed_store+0x6>
			ccc_store->conn_list[i] = NULL;
   2c48c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2c490:	2200      	movs	r2, #0
   2c492:	f843 2c08 	str.w	r2, [r3, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2c496:	4639      	mov	r1, r7
   2c498:	7a30      	ldrb	r0, [r6, #8]
   2c49a:	f7ee f8b3 	bl	1a604 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2c49e:	4630      	mov	r0, r6
   2c4a0:	f7ea fdbe 	bl	17020 <bt_conn_unref>
   2c4a4:	e7f0      	b.n	2c488 <ccc_delayed_store+0x22>

0002c4a6 <sys_mem_swap>:
	for (i = 0; i < (length/2); i++) {
   2c4a6:	2300      	movs	r3, #0
   2c4a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2c4ac:	d210      	bcs.n	2c4d0 <sys_mem_swap+0x2a>
{
   2c4ae:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   2c4b0:	f810 c003 	ldrb.w	ip, [r0, r3]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2c4b4:	1aca      	subs	r2, r1, r3
   2c4b6:	3a01      	subs	r2, #1
   2c4b8:	f810 e002 	ldrb.w	lr, [r0, r2]
   2c4bc:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2c4c0:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   2c4c4:	3301      	adds	r3, #1
   2c4c6:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2c4ca:	d3f1      	bcc.n	2c4b0 <sys_mem_swap+0xa>
}
   2c4cc:	f85d fb04 	ldr.w	pc, [sp], #4
   2c4d0:	4770      	bx	lr

0002c4d2 <security_err_get>:
	switch (smp_err) {
   2c4d2:	3801      	subs	r0, #1
   2c4d4:	280e      	cmp	r0, #14
   2c4d6:	d815      	bhi.n	2c504 <security_err_get+0x32>
   2c4d8:	e8df f000 	tbb	[pc, r0]
   2c4dc:	080a1608 	.word	0x080a1608
   2c4e0:	140c0a0c 	.word	0x140c0a0c
   2c4e4:	0808100e 	.word	0x0808100e
   2c4e8:	0e0e      	.short	0x0e0e
   2c4ea:	12          	.byte	0x12
   2c4eb:	00          	.byte	0x00
   2c4ec:	2001      	movs	r0, #1
   2c4ee:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_REQUIREMENT;
   2c4f0:	2004      	movs	r0, #4
   2c4f2:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   2c4f4:	2005      	movs	r0, #5
   2c4f6:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   2c4f8:	2006      	movs	r0, #6
   2c4fa:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   2c4fc:	2007      	movs	r0, #7
   2c4fe:	4770      	bx	lr
		return BT_SECURITY_ERR_KEY_REJECTED;
   2c500:	2008      	movs	r0, #8
   2c502:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   2c504:	2009      	movs	r0, #9
   2c506:	4770      	bx	lr
		return BT_SECURITY_ERR_OOB_NOT_AVAILABLE;
   2c508:	2003      	movs	r0, #3
}
   2c50a:	4770      	bx	lr

0002c50c <smp_err_get>:
	switch (auth_err) {
   2c50c:	1e43      	subs	r3, r0, #1
   2c50e:	2b08      	cmp	r3, #8
   2c510:	d80c      	bhi.n	2c52c <smp_err_get+0x20>
   2c512:	e8df f003 	tbb	[pc, r3]
   2c516:	090d      	.short	0x090d
   2c518:	090e0d05 	.word	0x090e0d05
   2c51c:	0b07      	.short	0x0b07
   2c51e:	09          	.byte	0x09
   2c51f:	00          	.byte	0x00
   2c520:	2002      	movs	r0, #2
   2c522:	4770      	bx	lr
		return BT_SMP_ERR_INVALID_PARAMS;
   2c524:	200a      	movs	r0, #10
   2c526:	4770      	bx	lr
		return BT_SMP_ERR_UNSPECIFIED;
   2c528:	2008      	movs	r0, #8
   2c52a:	4770      	bx	lr
		return 0;
   2c52c:	2000      	movs	r0, #0
   2c52e:	4770      	bx	lr
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2c530:	2003      	movs	r0, #3
}
   2c532:	4770      	bx	lr

0002c534 <get_encryption_key_size>:
{
   2c534:	4603      	mov	r3, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   2c536:	7d00      	ldrb	r0, [r0, #20]
   2c538:	7b5b      	ldrb	r3, [r3, #13]
}
   2c53a:	4298      	cmp	r0, r3
   2c53c:	bf28      	it	cs
   2c53e:	4618      	movcs	r0, r3
   2c540:	4770      	bx	lr

0002c542 <hci_err_get>:
	switch (err) {
   2c542:	2807      	cmp	r0, #7
   2c544:	d80d      	bhi.n	2c562 <hci_err_get+0x20>
   2c546:	e8df f000 	tbb	[pc, r0]
   2c54a:	0e0f      	.short	0x0e0f
   2c54c:	060c0c04 	.word	0x060c0c04
   2c550:	0a08      	.short	0x0a08
		return BT_HCI_ERR_PIN_OR_KEY_MISSING;
   2c552:	2006      	movs	r0, #6
   2c554:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_SUPPORTED;
   2c556:	2029      	movs	r0, #41	; 0x29
   2c558:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_ALLOWED;
   2c55a:	2018      	movs	r0, #24
   2c55c:	4770      	bx	lr
		return BT_HCI_ERR_INVALID_PARAM;
   2c55e:	2012      	movs	r0, #18
   2c560:	4770      	bx	lr
		return BT_HCI_ERR_UNSPECIFIED;
   2c562:	201f      	movs	r0, #31
   2c564:	4770      	bx	lr
		return BT_HCI_ERR_AUTH_FAIL;
   2c566:	2005      	movs	r0, #5
}
   2c568:	4770      	bx	lr

0002c56a <xor_128>:
	size_t len = 16;
   2c56a:	2310      	movs	r3, #16
	while (len--) {
   2c56c:	f103 3cff 	add.w	ip, r3, #4294967295
   2c570:	b17b      	cbz	r3, 2c592 <xor_128+0x28>
{
   2c572:	b500      	push	{lr}
		*r++ = *p++ ^ *q++;
   2c574:	f810 3b01 	ldrb.w	r3, [r0], #1
   2c578:	f811 eb01 	ldrb.w	lr, [r1], #1
   2c57c:	ea83 030e 	eor.w	r3, r3, lr
   2c580:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2c584:	4663      	mov	r3, ip
   2c586:	f10c 3cff 	add.w	ip, ip, #4294967295
   2c58a:	2b00      	cmp	r3, #0
   2c58c:	d1f2      	bne.n	2c574 <xor_128+0xa>
}
   2c58e:	f85d fb04 	ldr.w	pc, [sp], #4
   2c592:	4770      	bx	lr

0002c594 <smp_pairing_rsp>:
}
   2c594:	2007      	movs	r0, #7
   2c596:	4770      	bx	lr

0002c598 <le_sc_oob_data_req_check>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2c598:	7ac0      	ldrb	r0, [r0, #11]
}
   2c59a:	f000 0001 	and.w	r0, r0, #1
   2c59e:	4770      	bx	lr

0002c5a0 <le_sc_oob_data_rsp_check>:
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2c5a0:	7c80      	ldrb	r0, [r0, #18]
}
   2c5a2:	f000 0001 	and.w	r0, r0, #1
   2c5a6:	4770      	bx	lr

0002c5a8 <le_sc_oob_config_set>:
{
   2c5a8:	b570      	push	{r4, r5, r6, lr}
   2c5aa:	4606      	mov	r6, r0
   2c5ac:	460c      	mov	r4, r1
	bool req_oob_present = le_sc_oob_data_req_check(smp);
   2c5ae:	f7ff fff3 	bl	2c598 <le_sc_oob_data_req_check>
   2c5b2:	4605      	mov	r5, r0
	bool rsp_oob_present = le_sc_oob_data_rsp_check(smp);
   2c5b4:	4630      	mov	r0, r6
   2c5b6:	f7ff fff3 	bl	2c5a0 <le_sc_oob_data_rsp_check>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2c5ba:	b12d      	cbz	r5, 2c5c8 <le_sc_oob_config_set+0x20>
   2c5bc:	2300      	movs	r3, #0
		if (rsp_oob_present) {
   2c5be:	b108      	cbz	r0, 2c5c4 <le_sc_oob_config_set+0x1c>
				     BT_CONN_OOB_BOTH_PEERS :
   2c5c0:	b923      	cbnz	r3, 2c5cc <le_sc_oob_config_set+0x24>
   2c5c2:	2302      	movs	r3, #2
	info->lesc.oob_config = oob_config;
   2c5c4:	7063      	strb	r3, [r4, #1]
}
   2c5c6:	bd70      	pop	{r4, r5, r6, pc}
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2c5c8:	2303      	movs	r3, #3
   2c5ca:	e7f8      	b.n	2c5be <le_sc_oob_config_set+0x16>
				     BT_CONN_OOB_BOTH_PEERS :
   2c5cc:	2301      	movs	r3, #1
   2c5ce:	e7f9      	b.n	2c5c4 <le_sc_oob_config_set+0x1c>

0002c5d0 <smp_signing_info>:
}
   2c5d0:	2007      	movs	r0, #7
   2c5d2:	4770      	bx	lr

0002c5d4 <smp_security_request>:
}
   2c5d4:	2007      	movs	r0, #7
   2c5d6:	4770      	bx	lr

0002c5d8 <smp_keypress_notif>:
   2c5d8:	f3bf 8f5b 	dmb	ish
   2c5dc:	e850 3f00 	ldrex	r3, [r0]
   2c5e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2c5e4:	e840 3200 	strex	r2, r3, [r0]
   2c5e8:	2a00      	cmp	r2, #0
   2c5ea:	d1f7      	bne.n	2c5dc <smp_keypress_notif+0x4>
   2c5ec:	f3bf 8f5b 	dmb	ish
}
   2c5f0:	2000      	movs	r0, #0
   2c5f2:	4770      	bx	lr

0002c5f4 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c5f4:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c5f6:	f3bf 8f5b 	dmb	ish
   2c5fa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2c5fe:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c602:	f001 011f 	and.w	r1, r1, #31
   2c606:	4108      	asrs	r0, r1
}
   2c608:	f000 0001 	and.w	r0, r0, #1
   2c60c:	4770      	bx	lr

0002c60e <smp_keys_check>:
{
   2c60e:	b570      	push	{r4, r5, r6, lr}
   2c610:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2c612:	210a      	movs	r1, #10
   2c614:	3004      	adds	r0, #4
   2c616:	f7ff ffed 	bl	2c5f4 <atomic_test_bit>
   2c61a:	bb90      	cbnz	r0, 2c682 <smp_keys_check+0x74>
   2c61c:	4605      	mov	r5, r0
	if (!conn->le.keys) {
   2c61e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2c622:	b1db      	cbz	r3, 2c65c <smp_keys_check+0x4e>
	if (!conn->le.keys ||
   2c624:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2c628:	b363      	cbz	r3, 2c684 <smp_keys_check+0x76>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   2c62a:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   2c62c:	f012 0f24 	tst.w	r2, #36	; 0x24
   2c630:	d028      	beq.n	2c684 <smp_keys_check+0x76>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   2c632:	7aa1      	ldrb	r1, [r4, #10]
   2c634:	2902      	cmp	r1, #2
   2c636:	d903      	bls.n	2c640 <smp_keys_check+0x32>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2c638:	7b58      	ldrb	r0, [r3, #13]
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   2c63a:	f010 0f01 	tst.w	r0, #1
   2c63e:	d021      	beq.n	2c684 <smp_keys_check+0x76>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   2c640:	2903      	cmp	r1, #3
   2c642:	d921      	bls.n	2c688 <smp_keys_check+0x7a>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2c644:	7b59      	ldrb	r1, [r3, #13]
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   2c646:	f011 0f01 	tst.w	r1, #1
   2c64a:	d01b      	beq.n	2c684 <smp_keys_check+0x76>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2c64c:	f012 0f20 	tst.w	r2, #32
   2c650:	d018      	beq.n	2c684 <smp_keys_check+0x76>
	      (conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE))) {
   2c652:	7b1b      	ldrb	r3, [r3, #12]
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2c654:	2b10      	cmp	r3, #16
   2c656:	d115      	bne.n	2c684 <smp_keys_check+0x76>
	return true;
   2c658:	2501      	movs	r5, #1
   2c65a:	e013      	b.n	2c684 <smp_keys_check+0x76>
						     conn->id, &conn->le.dst);
   2c65c:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2c660:	4632      	mov	r2, r6
   2c662:	7a21      	ldrb	r1, [r4, #8]
   2c664:	2020      	movs	r0, #32
   2c666:	f7ef fe19 	bl	1c29c <bt_keys_find>
   2c66a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2c66e:	2800      	cmp	r0, #0
   2c670:	d1d8      	bne.n	2c624 <smp_keys_check+0x16>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2c672:	4632      	mov	r2, r6
   2c674:	7a21      	ldrb	r1, [r4, #8]
   2c676:	2004      	movs	r0, #4
   2c678:	f7ef fe10 	bl	1c29c <bt_keys_find>
   2c67c:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   2c680:	e7d0      	b.n	2c624 <smp_keys_check+0x16>
		return false;
   2c682:	2500      	movs	r5, #0
}
   2c684:	4628      	mov	r0, r5
   2c686:	bd70      	pop	{r4, r5, r6, pc}
	return true;
   2c688:	2501      	movs	r5, #1
   2c68a:	e7fb      	b.n	2c684 <smp_keys_check+0x76>

0002c68c <update_keys_check>:
	if (!keys ||
   2c68c:	b301      	cbz	r1, 2c6d0 <update_keys_check+0x44>
{
   2c68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c690:	4605      	mov	r5, r0
   2c692:	460c      	mov	r4, r1
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2c694:	89ce      	ldrh	r6, [r1, #14]
	if (!keys ||
   2c696:	f016 0f24 	tst.w	r6, #36	; 0x24
   2c69a:	d01b      	beq.n	2c6d4 <update_keys_check+0x48>
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2c69c:	7b0f      	ldrb	r7, [r1, #12]
   2c69e:	f7ff ff49 	bl	2c534 <get_encryption_key_size>
   2c6a2:	4287      	cmp	r7, r0
   2c6a4:	d818      	bhi.n	2c6d8 <update_keys_check+0x4c>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2c6a6:	f016 0f20 	tst.w	r6, #32
   2c6aa:	d10a      	bne.n	2c6c2 <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2c6ac:	7b63      	ldrb	r3, [r4, #13]
   2c6ae:	f013 0301 	ands.w	r3, r3, #1
   2c6b2:	d001      	beq.n	2c6b8 <update_keys_check+0x2c>
	     smp->method == JUST_WORKS) {
   2c6b4:	7a2a      	ldrb	r2, [r5, #8]
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2c6b6:	b18a      	cbz	r2, 2c6dc <update_keys_check+0x50>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   2c6b8:	b993      	cbnz	r3, 2c6e0 <update_keys_check+0x54>
	     && smp->method == JUST_WORKS)) {
   2c6ba:	7a2b      	ldrb	r3, [r5, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   2c6bc:	b193      	cbz	r3, 2c6e4 <update_keys_check+0x58>
	return true;
   2c6be:	2001      	movs	r0, #1
   2c6c0:	e009      	b.n	2c6d6 <update_keys_check+0x4a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2c6c2:	2105      	movs	r1, #5
   2c6c4:	1d28      	adds	r0, r5, #4
   2c6c6:	f7ff ff95 	bl	2c5f4 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2c6ca:	2800      	cmp	r0, #0
   2c6cc:	d1ee      	bne.n	2c6ac <update_keys_check+0x20>
   2c6ce:	e002      	b.n	2c6d6 <update_keys_check+0x4a>
		return true;
   2c6d0:	2001      	movs	r0, #1
}
   2c6d2:	4770      	bx	lr
		return true;
   2c6d4:	2001      	movs	r0, #1
}
   2c6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   2c6d8:	2000      	movs	r0, #0
   2c6da:	e7fc      	b.n	2c6d6 <update_keys_check+0x4a>
		return false;
   2c6dc:	2000      	movs	r0, #0
   2c6de:	e7fa      	b.n	2c6d6 <update_keys_check+0x4a>
	return true;
   2c6e0:	2001      	movs	r0, #1
   2c6e2:	e7f8      	b.n	2c6d6 <update_keys_check+0x4a>
			return false;
   2c6e4:	2000      	movs	r0, #0
   2c6e6:	e7f6      	b.n	2c6d6 <update_keys_check+0x4a>

0002c6e8 <remote_sec_level_reachable>:
{
   2c6e8:	b510      	push	{r4, lr}
   2c6ea:	4604      	mov	r4, r0
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   2c6ec:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2c6f0:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   2c6f2:	2b03      	cmp	r3, #3
   2c6f4:	d015      	beq.n	2c722 <remote_sec_level_reachable+0x3a>
   2c6f6:	d807      	bhi.n	2c708 <remote_sec_level_reachable+0x20>
   2c6f8:	3b01      	subs	r3, #1
   2c6fa:	b2db      	uxtb	r3, r3
   2c6fc:	2b01      	cmp	r3, #1
   2c6fe:	d801      	bhi.n	2c704 <remote_sec_level_reachable+0x1c>
   2c700:	2000      	movs	r0, #0
}
   2c702:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2c704:	2008      	movs	r0, #8
   2c706:	e7fc      	b.n	2c702 <remote_sec_level_reachable+0x1a>
	switch (sec) {
   2c708:	2b04      	cmp	r3, #4
   2c70a:	d10e      	bne.n	2c72a <remote_sec_level_reachable+0x42>
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   2c70c:	f7ff ff12 	bl	2c534 <get_encryption_key_size>
   2c710:	2810      	cmp	r0, #16
   2c712:	d001      	beq.n	2c718 <remote_sec_level_reachable+0x30>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   2c714:	2006      	movs	r0, #6
   2c716:	e7f4      	b.n	2c702 <remote_sec_level_reachable+0x1a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2c718:	2105      	movs	r1, #5
   2c71a:	1d20      	adds	r0, r4, #4
   2c71c:	f7ff ff6a 	bl	2c5f4 <atomic_test_bit>
   2c720:	b128      	cbz	r0, 2c72e <remote_sec_level_reachable+0x46>
		if (smp->method == JUST_WORKS) {
   2c722:	7a23      	ldrb	r3, [r4, #8]
   2c724:	b12b      	cbz	r3, 2c732 <remote_sec_level_reachable+0x4a>
		return 0;
   2c726:	2000      	movs	r0, #0
   2c728:	e7eb      	b.n	2c702 <remote_sec_level_reachable+0x1a>
		return BT_SMP_ERR_UNSPECIFIED;
   2c72a:	2008      	movs	r0, #8
   2c72c:	e7e9      	b.n	2c702 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2c72e:	2003      	movs	r0, #3
   2c730:	e7e7      	b.n	2c702 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2c732:	2003      	movs	r0, #3
   2c734:	e7e5      	b.n	2c702 <remote_sec_level_reachable+0x1a>

0002c736 <smp_reset>:
{
   2c736:	b538      	push	{r3, r4, r5, lr}
   2c738:	4604      	mov	r4, r0
	atomic_set(smp->flags, 0);
   2c73a:	1d03      	adds	r3, r0, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c73c:	2500      	movs	r5, #0
   2c73e:	f3bf 8f5b 	dmb	ish
   2c742:	e853 2f00 	ldrex	r2, [r3]
   2c746:	e843 5100 	strex	r1, r5, [r3]
   2c74a:	2900      	cmp	r1, #0
   2c74c:	d1f9      	bne.n	2c742 <smp_reset+0xc>
   2c74e:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2c752:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2c756:	f7f6 fd09 	bl	2316c <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2c75a:	7225      	strb	r5, [r4, #8]
   2c75c:	f3bf 8f5b 	dmb	ish
   2c760:	e854 3f00 	ldrex	r3, [r4]
   2c764:	e844 5200 	strex	r2, r5, [r4]
   2c768:	2a00      	cmp	r2, #0
   2c76a:	d1f9      	bne.n	2c760 <smp_reset+0x2a>
   2c76c:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c770:	f3bf 8f5b 	dmb	ish
   2c774:	e854 3f00 	ldrex	r3, [r4]
   2c778:	f043 0302 	orr.w	r3, r3, #2
   2c77c:	e844 3200 	strex	r2, r3, [r4]
   2c780:	2a00      	cmp	r2, #0
   2c782:	d1f7      	bne.n	2c774 <smp_reset+0x3e>
   2c784:	f3bf 8f5b 	dmb	ish
}
   2c788:	bd38      	pop	{r3, r4, r5, pc}

0002c78a <smp_c1>:
{
   2c78a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c78e:	b089      	sub	sp, #36	; 0x24
   2c790:	4605      	mov	r5, r0
   2c792:	460e      	mov	r6, r1
   2c794:	4611      	mov	r1, r2
   2c796:	461f      	mov	r7, r3
   2c798:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   2c79c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   2c7a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2c7a2:	f898 3000 	ldrb.w	r3, [r8]
   2c7a6:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
   2c7aa:	f899 3000 	ldrb.w	r3, [r9]
   2c7ae:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
   2c7b2:	2207      	movs	r2, #7
   2c7b4:	f10d 0012 	add.w	r0, sp, #18
   2c7b8:	f7fd fae8 	bl	29d8c <memcpy>
	memcpy(p1 + 9, pres, 7);
   2c7bc:	2207      	movs	r2, #7
   2c7be:	4639      	mov	r1, r7
   2c7c0:	f10d 0019 	add.w	r0, sp, #25
   2c7c4:	f7fd fae2 	bl	29d8c <memcpy>
	xor_128(r, p1, enc_data);
   2c7c8:	4622      	mov	r2, r4
   2c7ca:	a904      	add	r1, sp, #16
   2c7cc:	4630      	mov	r0, r6
   2c7ce:	f7ff fecc 	bl	2c56a <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2c7d2:	4622      	mov	r2, r4
   2c7d4:	4621      	mov	r1, r4
   2c7d6:	4628      	mov	r0, r5
   2c7d8:	f002 f868 	bl	2e8ac <bt_encrypt_le>
	if (err) {
   2c7dc:	b110      	cbz	r0, 2c7e4 <smp_c1+0x5a>
}
   2c7de:	b009      	add	sp, #36	; 0x24
   2c7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(p2, ra->a.val, 6);
   2c7e4:	2206      	movs	r2, #6
   2c7e6:	f109 0101 	add.w	r1, r9, #1
   2c7ea:	4668      	mov	r0, sp
   2c7ec:	f7fd face 	bl	29d8c <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2c7f0:	2206      	movs	r2, #6
   2c7f2:	f108 0101 	add.w	r1, r8, #1
   2c7f6:	eb0d 0002 	add.w	r0, sp, r2
   2c7fa:	f7fd fac7 	bl	29d8c <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2c7fe:	2204      	movs	r2, #4
   2c800:	2100      	movs	r1, #0
   2c802:	a803      	add	r0, sp, #12
   2c804:	f7fd faf1 	bl	29dea <memset>
	xor_128(enc_data, p2, enc_data);
   2c808:	4622      	mov	r2, r4
   2c80a:	4669      	mov	r1, sp
   2c80c:	4620      	mov	r0, r4
   2c80e:	f7ff feac 	bl	2c56a <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
   2c812:	4622      	mov	r2, r4
   2c814:	4621      	mov	r1, r4
   2c816:	4628      	mov	r0, r5
   2c818:	f002 f848 	bl	2e8ac <bt_encrypt_le>
   2c81c:	e7df      	b.n	2c7de <smp_c1+0x54>

0002c81e <smp_s1>:
{
   2c81e:	b570      	push	{r4, r5, r6, lr}
   2c820:	4605      	mov	r5, r0
   2c822:	460e      	mov	r6, r1
   2c824:	4611      	mov	r1, r2
   2c826:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
   2c828:	2208      	movs	r2, #8
   2c82a:	4618      	mov	r0, r3
   2c82c:	f7fd faae 	bl	29d8c <memcpy>
	memcpy(out + 8, r1, 8);
   2c830:	2208      	movs	r2, #8
   2c832:	4631      	mov	r1, r6
   2c834:	18a0      	adds	r0, r4, r2
   2c836:	f7fd faa9 	bl	29d8c <memcpy>
	return bt_encrypt_le(k, out, out);
   2c83a:	4622      	mov	r2, r4
   2c83c:	4621      	mov	r1, r4
   2c83e:	4628      	mov	r0, r5
   2c840:	f002 f834 	bl	2e8ac <bt_encrypt_le>
}
   2c844:	bd70      	pop	{r4, r5, r6, pc}

0002c846 <atomic_test_and_clear_bit>:
{
   2c846:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c848:	f001 021f 	and.w	r2, r1, #31
   2c84c:	2301      	movs	r3, #1
   2c84e:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c850:	0949      	lsrs	r1, r1, #5
   2c852:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2c856:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c858:	f3bf 8f5b 	dmb	ish
   2c85c:	e850 2f00 	ldrex	r2, [r0]
   2c860:	ea02 0c01 	and.w	ip, r2, r1
   2c864:	e840 ce00 	strex	lr, ip, [r0]
   2c868:	f1be 0f00 	cmp.w	lr, #0
   2c86c:	d1f6      	bne.n	2c85c <atomic_test_and_clear_bit+0x16>
   2c86e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2c872:	4213      	tst	r3, r2
}
   2c874:	bf14      	ite	ne
   2c876:	2001      	movne	r0, #1
   2c878:	2000      	moveq	r0, #0
   2c87a:	f85d fb04 	ldr.w	pc, [sp], #4

0002c87e <smp_create_pdu>:
{
   2c87e:	b570      	push	{r4, r5, r6, lr}
   2c880:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2c882:	1d04      	adds	r4, r0, #4
   2c884:	2104      	movs	r1, #4
   2c886:	4620      	mov	r0, r4
   2c888:	f7ff feb4 	bl	2c5f4 <atomic_test_bit>
   2c88c:	b170      	cbz	r0, 2c8ac <smp_create_pdu+0x2e>
		timeout = K_NO_WAIT;
   2c88e:	2200      	movs	r2, #0
   2c890:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2c892:	2100      	movs	r1, #0
   2c894:	4608      	mov	r0, r1
   2c896:	f7fe fb1a 	bl	2aece <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2c89a:	4605      	mov	r5, r0
   2c89c:	b150      	cbz	r0, 2c8b4 <smp_create_pdu+0x36>
   2c89e:	2101      	movs	r1, #1
   2c8a0:	3008      	adds	r0, #8
   2c8a2:	f7f0 fa85 	bl	1cdb0 <net_buf_simple_add>
	hdr->code = op;
   2c8a6:	7006      	strb	r6, [r0, #0]
}
   2c8a8:	4628      	mov	r0, r5
   2c8aa:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2c8ac:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c8b0:	2300      	movs	r3, #0
   2c8b2:	e7ee      	b.n	2c892 <smp_create_pdu+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c8b4:	f3bf 8f5b 	dmb	ish
   2c8b8:	e854 3f00 	ldrex	r3, [r4]
   2c8bc:	f043 0310 	orr.w	r3, r3, #16
   2c8c0:	e844 3200 	strex	r2, r3, [r4]
   2c8c4:	2a00      	cmp	r2, #0
   2c8c6:	d1f7      	bne.n	2c8b8 <smp_create_pdu+0x3a>
   2c8c8:	f3bf 8f5b 	dmb	ish
		return NULL;
   2c8cc:	e7ec      	b.n	2c8a8 <smp_create_pdu+0x2a>

0002c8ce <smp_send>:
{
   2c8ce:	b530      	push	{r4, r5, lr}
   2c8d0:	b083      	sub	sp, #12
   2c8d2:	4604      	mov	r4, r0
   2c8d4:	460d      	mov	r5, r1
   2c8d6:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2c8d8:	2200      	movs	r2, #0
   2c8da:	9200      	str	r2, [sp, #0]
   2c8dc:	460a      	mov	r2, r1
   2c8de:	2106      	movs	r1, #6
   2c8e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2c8e4:	f7fe faf8 	bl	2aed8 <bt_l2cap_send_cb>
   2c8e8:	b940      	cbnz	r0, 2c8fc <smp_send+0x2e>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2c8ea:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c8ee:	2300      	movs	r3, #0
   2c8f0:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2c8f4:	f7f6 fc32 	bl	2315c <k_work_reschedule>
}
   2c8f8:	b003      	add	sp, #12
   2c8fa:	bd30      	pop	{r4, r5, pc}
		net_buf_unref(buf);
   2c8fc:	4628      	mov	r0, r5
   2c8fe:	f7f0 f955 	bl	1cbac <net_buf_unref>
		return;
   2c902:	e7f9      	b.n	2c8f8 <smp_send+0x2a>

0002c904 <legacy_send_pairing_confirm>:
{
   2c904:	b570      	push	{r4, r5, r6, lr}
   2c906:	b084      	sub	sp, #16
   2c908:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2c90a:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2c90e:	2210      	movs	r2, #16
   2c910:	2103      	movs	r1, #3
   2c912:	f7ff ffb4 	bl	2c87e <smp_create_pdu>
	if (!buf) {
   2c916:	b380      	cbz	r0, 2c97a <legacy_send_pairing_confirm+0x76>
   2c918:	4606      	mov	r6, r0
   2c91a:	2110      	movs	r1, #16
   2c91c:	3008      	adds	r0, #8
   2c91e:	f7f0 fa47 	bl	1cdb0 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2c922:	f105 0397 	add.w	r3, r5, #151	; 0x97
   2c926:	359e      	adds	r5, #158	; 0x9e
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2c928:	9002      	str	r0, [sp, #8]
   2c92a:	9501      	str	r5, [sp, #4]
   2c92c:	9300      	str	r3, [sp, #0]
   2c92e:	f104 0310 	add.w	r3, r4, #16
   2c932:	f104 0209 	add.w	r2, r4, #9
   2c936:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2c93a:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2c93e:	f7ff ff24 	bl	2c78a <smp_c1>
   2c942:	b9a8      	cbnz	r0, 2c970 <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL, NULL);
   2c944:	2300      	movs	r3, #0
   2c946:	461a      	mov	r2, r3
   2c948:	4631      	mov	r1, r6
   2c94a:	4620      	mov	r0, r4
   2c94c:	f7ff ffbf 	bl	2c8ce <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2c950:	3404      	adds	r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c952:	f3bf 8f5b 	dmb	ish
   2c956:	e854 3f00 	ldrex	r3, [r4]
   2c95a:	f023 0301 	bic.w	r3, r3, #1
   2c95e:	e844 3200 	strex	r2, r3, [r4]
   2c962:	2a00      	cmp	r2, #0
   2c964:	d1f7      	bne.n	2c956 <legacy_send_pairing_confirm+0x52>
   2c966:	f3bf 8f5b 	dmb	ish
	return 0;
   2c96a:	2000      	movs	r0, #0
}
   2c96c:	b004      	add	sp, #16
   2c96e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2c970:	4630      	mov	r0, r6
   2c972:	f7f0 f91b 	bl	1cbac <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2c976:	2008      	movs	r0, #8
   2c978:	e7f8      	b.n	2c96c <legacy_send_pairing_confirm+0x68>
		return BT_SMP_ERR_UNSPECIFIED;
   2c97a:	2008      	movs	r0, #8
   2c97c:	e7f6      	b.n	2c96c <legacy_send_pairing_confirm+0x68>

0002c97e <legacy_pairing_confirm>:
{
   2c97e:	b538      	push	{r3, r4, r5, lr}
   2c980:	4604      	mov	r4, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c982:	1d05      	adds	r5, r0, #4
   2c984:	210a      	movs	r1, #10
   2c986:	4628      	mov	r0, r5
   2c988:	f7ff fe34 	bl	2c5f4 <atomic_test_bit>
   2c98c:	b168      	cbz	r0, 2c9aa <legacy_pairing_confirm+0x2c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c98e:	f3bf 8f5b 	dmb	ish
   2c992:	e855 3f00 	ldrex	r3, [r5]
   2c996:	f043 0301 	orr.w	r3, r3, #1
   2c99a:	e845 3200 	strex	r2, r3, [r5]
   2c99e:	2a00      	cmp	r2, #0
   2c9a0:	d1f7      	bne.n	2c992 <legacy_pairing_confirm+0x14>
   2c9a2:	f3bf 8f5b 	dmb	ish
	return 0;
   2c9a6:	2000      	movs	r0, #0
}
   2c9a8:	bd38      	pop	{r3, r4, r5, pc}
   2c9aa:	f3bf 8f5b 	dmb	ish
   2c9ae:	e854 3f00 	ldrex	r3, [r4]
   2c9b2:	f043 0310 	orr.w	r3, r3, #16
   2c9b6:	e844 3200 	strex	r2, r3, [r4]
   2c9ba:	2a00      	cmp	r2, #0
   2c9bc:	d1f7      	bne.n	2c9ae <legacy_pairing_confirm+0x30>
   2c9be:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
   2c9c2:	4620      	mov	r0, r4
   2c9c4:	f7ff ff9e 	bl	2c904 <legacy_send_pairing_confirm>
   2c9c8:	e7ee      	b.n	2c9a8 <legacy_pairing_confirm+0x2a>

0002c9ca <sc_smp_send_dhkey_check>:
{
   2c9ca:	b570      	push	{r4, r5, r6, lr}
   2c9cc:	4604      	mov	r4, r0
   2c9ce:	460d      	mov	r5, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   2c9d0:	2210      	movs	r2, #16
   2c9d2:	210d      	movs	r1, #13
   2c9d4:	f7ff ff53 	bl	2c87e <smp_create_pdu>
	if (!buf) {
   2c9d8:	b180      	cbz	r0, 2c9fc <sc_smp_send_dhkey_check+0x32>
   2c9da:	4606      	mov	r6, r0
   2c9dc:	2110      	movs	r1, #16
   2c9de:	3008      	adds	r0, #8
   2c9e0:	f7f0 f9e6 	bl	1cdb0 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   2c9e4:	2210      	movs	r2, #16
   2c9e6:	4629      	mov	r1, r5
   2c9e8:	f7fd f9d0 	bl	29d8c <memcpy>
	smp_send(smp, buf, NULL, NULL);
   2c9ec:	2300      	movs	r3, #0
   2c9ee:	461a      	mov	r2, r3
   2c9f0:	4631      	mov	r1, r6
   2c9f2:	4620      	mov	r0, r4
   2c9f4:	f7ff ff6b 	bl	2c8ce <smp_send>
	return 0;
   2c9f8:	2000      	movs	r0, #0
}
   2c9fa:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2c9fc:	2008      	movs	r0, #8
   2c9fe:	e7fc      	b.n	2c9fa <sc_smp_send_dhkey_check+0x30>

0002ca00 <smp_send_pairing_random>:
{
   2ca00:	b538      	push	{r3, r4, r5, lr}
   2ca02:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2ca04:	2210      	movs	r2, #16
   2ca06:	2104      	movs	r1, #4
   2ca08:	f7ff ff39 	bl	2c87e <smp_create_pdu>
	if (!rsp_buf) {
   2ca0c:	b188      	cbz	r0, 2ca32 <smp_send_pairing_random+0x32>
   2ca0e:	4605      	mov	r5, r0
   2ca10:	2110      	movs	r1, #16
   2ca12:	3008      	adds	r0, #8
   2ca14:	f7f0 f9cc 	bl	1cdb0 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2ca18:	2210      	movs	r2, #16
   2ca1a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2ca1e:	f7fd f9b5 	bl	29d8c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2ca22:	2300      	movs	r3, #0
   2ca24:	461a      	mov	r2, r3
   2ca26:	4629      	mov	r1, r5
   2ca28:	4620      	mov	r0, r4
   2ca2a:	f7ff ff50 	bl	2c8ce <smp_send>
	return 0;
   2ca2e:	2000      	movs	r0, #0
}
   2ca30:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ca32:	2008      	movs	r0, #8
   2ca34:	e7fc      	b.n	2ca30 <smp_send_pairing_random+0x30>

0002ca36 <send_pairing_rsp>:
{
   2ca36:	b538      	push	{r3, r4, r5, lr}
   2ca38:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2ca3a:	2206      	movs	r2, #6
   2ca3c:	2102      	movs	r1, #2
   2ca3e:	f7ff ff1e 	bl	2c87e <smp_create_pdu>
	if (!rsp_buf) {
   2ca42:	b188      	cbz	r0, 2ca68 <send_pairing_rsp+0x32>
   2ca44:	4605      	mov	r5, r0
   2ca46:	2106      	movs	r1, #6
   2ca48:	3008      	adds	r0, #8
   2ca4a:	f7f0 f9b1 	bl	1cdb0 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2ca4e:	2206      	movs	r2, #6
   2ca50:	f104 0111 	add.w	r1, r4, #17
   2ca54:	f7fd f99a 	bl	29d8c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2ca58:	2300      	movs	r3, #0
   2ca5a:	461a      	mov	r2, r3
   2ca5c:	4629      	mov	r1, r5
   2ca5e:	4620      	mov	r0, r4
   2ca60:	f7ff ff35 	bl	2c8ce <smp_send>
	return 0;
   2ca64:	2000      	movs	r0, #0
}
   2ca66:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ca68:	2008      	movs	r0, #8
   2ca6a:	e7fc      	b.n	2ca66 <send_pairing_rsp+0x30>

0002ca6c <bt_smp_aes_cmac>:
{
   2ca6c:	b570      	push	{r4, r5, r6, lr}
   2ca6e:	b0c2      	sub	sp, #264	; 0x108
   2ca70:	460c      	mov	r4, r1
   2ca72:	4615      	mov	r5, r2
   2ca74:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2ca76:	aa16      	add	r2, sp, #88	; 0x58
   2ca78:	4601      	mov	r1, r0
   2ca7a:	4668      	mov	r0, sp
   2ca7c:	f7fc ff2d 	bl	298da <tc_cmac_setup>
   2ca80:	b168      	cbz	r0, 2ca9e <bt_smp_aes_cmac+0x32>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2ca82:	462a      	mov	r2, r5
   2ca84:	4621      	mov	r1, r4
   2ca86:	4668      	mov	r0, sp
   2ca88:	f7fc ff54 	bl	29934 <tc_cmac_update>
   2ca8c:	b150      	cbz	r0, 2caa4 <bt_smp_aes_cmac+0x38>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2ca8e:	4669      	mov	r1, sp
   2ca90:	4630      	mov	r0, r6
   2ca92:	f7fc ffbf 	bl	29a14 <tc_cmac_final>
   2ca96:	b140      	cbz	r0, 2caaa <bt_smp_aes_cmac+0x3e>
	return 0;
   2ca98:	2000      	movs	r0, #0
}
   2ca9a:	b042      	add	sp, #264	; 0x108
   2ca9c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2ca9e:	f06f 0004 	mvn.w	r0, #4
   2caa2:	e7fa      	b.n	2ca9a <bt_smp_aes_cmac+0x2e>
		return -EIO;
   2caa4:	f06f 0004 	mvn.w	r0, #4
   2caa8:	e7f7      	b.n	2ca9a <bt_smp_aes_cmac+0x2e>
		return -EIO;
   2caaa:	f06f 0004 	mvn.w	r0, #4
   2caae:	e7f4      	b.n	2ca9a <bt_smp_aes_cmac+0x2e>

0002cab0 <smp_f4>:
{
   2cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cab2:	b097      	sub	sp, #92	; 0x5c
   2cab4:	460e      	mov	r6, r1
   2cab6:	4614      	mov	r4, r2
   2cab8:	461d      	mov	r5, r3
   2caba:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2cabc:	2220      	movs	r2, #32
   2cabe:	4601      	mov	r1, r0
   2cac0:	a801      	add	r0, sp, #4
   2cac2:	f7ee f809 	bl	1aad8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2cac6:	2220      	movs	r2, #32
   2cac8:	4631      	mov	r1, r6
   2caca:	a809      	add	r0, sp, #36	; 0x24
   2cacc:	f7ee f804 	bl	1aad8 <sys_memcpy_swap>
	m[64] = z;
   2cad0:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
	sys_memcpy_swap(xs, x, 16);
   2cad4:	2210      	movs	r2, #16
   2cad6:	4621      	mov	r1, r4
   2cad8:	a812      	add	r0, sp, #72	; 0x48
   2cada:	f7ed fffd 	bl	1aad8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2cade:	463b      	mov	r3, r7
   2cae0:	2241      	movs	r2, #65	; 0x41
   2cae2:	a901      	add	r1, sp, #4
   2cae4:	a812      	add	r0, sp, #72	; 0x48
   2cae6:	f7ff ffc1 	bl	2ca6c <bt_smp_aes_cmac>
	if (err) {
   2caea:	4604      	mov	r4, r0
   2caec:	b110      	cbz	r0, 2caf4 <smp_f4+0x44>
}
   2caee:	4620      	mov	r0, r4
   2caf0:	b017      	add	sp, #92	; 0x5c
   2caf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(res, 16);
   2caf4:	2110      	movs	r1, #16
   2caf6:	4638      	mov	r0, r7
   2caf8:	f7ff fcd5 	bl	2c4a6 <sys_mem_swap>
	return err;
   2cafc:	e7f7      	b.n	2caee <smp_f4+0x3e>

0002cafe <smp_f6>:
{
   2cafe:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cb00:	b097      	sub	sp, #92	; 0x5c
   2cb02:	4605      	mov	r5, r0
   2cb04:	4617      	mov	r7, r2
   2cb06:	461c      	mov	r4, r3
   2cb08:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2cb0a:	2210      	movs	r2, #16
   2cb0c:	a801      	add	r0, sp, #4
   2cb0e:	f7ed ffe3 	bl	1aad8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2cb12:	2210      	movs	r2, #16
   2cb14:	4639      	mov	r1, r7
   2cb16:	a805      	add	r0, sp, #20
   2cb18:	f7ed ffde 	bl	1aad8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2cb1c:	2210      	movs	r2, #16
   2cb1e:	4621      	mov	r1, r4
   2cb20:	a809      	add	r0, sp, #36	; 0x24
   2cb22:	f7ed ffd9 	bl	1aad8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2cb26:	2203      	movs	r2, #3
   2cb28:	991c      	ldr	r1, [sp, #112]	; 0x70
   2cb2a:	a80d      	add	r0, sp, #52	; 0x34
   2cb2c:	f7ed ffd4 	bl	1aad8 <sys_memcpy_swap>
	m[51] = a1->type;
   2cb30:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2cb32:	f814 3b01 	ldrb.w	r3, [r4], #1
   2cb36:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
   2cb3a:	2206      	movs	r2, #6
   2cb3c:	4621      	mov	r1, r4
   2cb3e:	a80e      	add	r0, sp, #56	; 0x38
   2cb40:	f7fd f924 	bl	29d8c <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2cb44:	2206      	movs	r2, #6
   2cb46:	4621      	mov	r1, r4
   2cb48:	a80e      	add	r0, sp, #56	; 0x38
   2cb4a:	f7ed ffc5 	bl	1aad8 <sys_memcpy_swap>
	m[58] = a2->type;
   2cb4e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2cb50:	f814 3b01 	ldrb.w	r3, [r4], #1
   2cb54:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
   2cb58:	2206      	movs	r2, #6
   2cb5a:	4621      	mov	r1, r4
   2cb5c:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   2cb60:	f7fd f914 	bl	29d8c <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2cb64:	2206      	movs	r2, #6
   2cb66:	4621      	mov	r1, r4
   2cb68:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   2cb6c:	f7ed ffb4 	bl	1aad8 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2cb70:	2210      	movs	r2, #16
   2cb72:	4629      	mov	r1, r5
   2cb74:	a812      	add	r0, sp, #72	; 0x48
   2cb76:	f7ed ffaf 	bl	1aad8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2cb7a:	4633      	mov	r3, r6
   2cb7c:	2241      	movs	r2, #65	; 0x41
   2cb7e:	a901      	add	r1, sp, #4
   2cb80:	a812      	add	r0, sp, #72	; 0x48
   2cb82:	f7ff ff73 	bl	2ca6c <bt_smp_aes_cmac>
	if (err) {
   2cb86:	4604      	mov	r4, r0
   2cb88:	b110      	cbz	r0, 2cb90 <smp_f6+0x92>
}
   2cb8a:	4620      	mov	r0, r4
   2cb8c:	b017      	add	sp, #92	; 0x5c
   2cb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(check, 16);
   2cb90:	2110      	movs	r1, #16
   2cb92:	4630      	mov	r0, r6
   2cb94:	f7ff fc87 	bl	2c4a6 <sys_mem_swap>
	return 0;
   2cb98:	e7f7      	b.n	2cb8a <smp_f6+0x8c>

0002cb9a <smp_dhkey_check>:
{
   2cb9a:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2cb9c:	6889      	ldr	r1, [r1, #8]
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2cb9e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2cba2:	78db      	ldrb	r3, [r3, #3]
   2cba4:	2b01      	cmp	r3, #1
   2cba6:	d001      	beq.n	2cbac <smp_dhkey_check+0x12>
	return 0;
   2cba8:	2000      	movs	r0, #0
}
   2cbaa:	bd38      	pop	{r3, r4, r5, pc}
   2cbac:	4604      	mov	r4, r0
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2cbae:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cbb0:	f3bf 8f5b 	dmb	ish
   2cbb4:	e855 3f00 	ldrex	r3, [r5]
   2cbb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2cbbc:	e845 3200 	strex	r2, r3, [r5]
   2cbc0:	2a00      	cmp	r2, #0
   2cbc2:	d1f7      	bne.n	2cbb4 <smp_dhkey_check+0x1a>
   2cbc4:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
   2cbc8:	2210      	movs	r2, #16
   2cbca:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2cbce:	f7fd f8dd 	bl	29d8c <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2cbd2:	2107      	movs	r1, #7
   2cbd4:	4628      	mov	r0, r5
   2cbd6:	f7ff fd0d 	bl	2c5f4 <atomic_test_bit>
   2cbda:	b990      	cbnz	r0, 2cc02 <smp_dhkey_check+0x68>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2cbdc:	210a      	movs	r1, #10
   2cbde:	4628      	mov	r0, r5
   2cbe0:	f7ff fd08 	bl	2c5f4 <atomic_test_bit>
   2cbe4:	b1d8      	cbz	r0, 2cc1e <smp_dhkey_check+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cbe6:	f3bf 8f5b 	dmb	ish
   2cbea:	e855 3f00 	ldrex	r3, [r5]
   2cbee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2cbf2:	e845 3200 	strex	r2, r3, [r5]
   2cbf6:	2a00      	cmp	r2, #0
   2cbf8:	d1f7      	bne.n	2cbea <smp_dhkey_check+0x50>
   2cbfa:	f3bf 8f5b 	dmb	ish
			return 0;
   2cbfe:	2000      	movs	r0, #0
   2cc00:	e7d3      	b.n	2cbaa <smp_dhkey_check+0x10>
   2cc02:	f3bf 8f5b 	dmb	ish
   2cc06:	e855 3f00 	ldrex	r3, [r5]
   2cc0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2cc0e:	e845 3200 	strex	r2, r3, [r5]
   2cc12:	2a00      	cmp	r2, #0
   2cc14:	d1f7      	bne.n	2cc06 <smp_dhkey_check+0x6c>
   2cc16:	f3bf 8f5b 	dmb	ish
			return 0;
   2cc1a:	2000      	movs	r0, #0
   2cc1c:	e7c5      	b.n	2cbaa <smp_dhkey_check+0x10>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2cc1e:	4620      	mov	r0, r4
   2cc20:	f7ee f8dc 	bl	1addc <compute_and_check_and_send_periph_dhcheck>
   2cc24:	e7c1      	b.n	2cbaa <smp_dhkey_check+0x10>

0002cc26 <smp_dhkey_ready>:
	if (!dhkey) {
   2cc26:	2900      	cmp	r1, #0
   2cc28:	d046      	beq.n	2ccb8 <smp_dhkey_ready+0x92>
{
   2cc2a:	b538      	push	{r3, r4, r5, lr}
   2cc2c:	4605      	mov	r5, r0
   2cc2e:	460b      	mov	r3, r1
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2cc30:	1d04      	adds	r4, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cc32:	f3bf 8f5b 	dmb	ish
   2cc36:	e854 2f00 	ldrex	r2, [r4]
   2cc3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   2cc3e:	e844 2100 	strex	r1, r2, [r4]
   2cc42:	2900      	cmp	r1, #0
   2cc44:	d1f7      	bne.n	2cc36 <smp_dhkey_ready+0x10>
   2cc46:	f3bf 8f5b 	dmb	ish
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2cc4a:	2220      	movs	r2, #32
   2cc4c:	4619      	mov	r1, r3
   2cc4e:	f105 0097 	add.w	r0, r5, #151	; 0x97
   2cc52:	f7fd f89b 	bl	29d8c <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2cc56:	210a      	movs	r1, #10
   2cc58:	4620      	mov	r0, r4
   2cc5a:	f7ff fccb 	bl	2c5f4 <atomic_test_bit>
   2cc5e:	b958      	cbnz	r0, 2cc78 <smp_dhkey_ready+0x52>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2cc60:	2110      	movs	r1, #16
   2cc62:	4620      	mov	r0, r4
   2cc64:	f7ff fcc6 	bl	2c5f4 <atomic_test_bit>
   2cc68:	b9a0      	cbnz	r0, 2cc94 <smp_dhkey_ready+0x6e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2cc6a:	2109      	movs	r1, #9
   2cc6c:	4620      	mov	r0, r4
   2cc6e:	f7ff fcc1 	bl	2c5f4 <atomic_test_bit>
   2cc72:	b9e8      	cbnz	r0, 2ccb0 <smp_dhkey_ready+0x8a>
	return 0;
   2cc74:	2000      	movs	r0, #0
   2cc76:	e00c      	b.n	2cc92 <smp_dhkey_ready+0x6c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cc78:	f3bf 8f5b 	dmb	ish
   2cc7c:	e854 3f00 	ldrex	r3, [r4]
   2cc80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2cc84:	e844 3200 	strex	r2, r3, [r4]
   2cc88:	2a00      	cmp	r2, #0
   2cc8a:	d1f7      	bne.n	2cc7c <smp_dhkey_ready+0x56>
   2cc8c:	f3bf 8f5b 	dmb	ish
		return 0;
   2cc90:	2000      	movs	r0, #0
}
   2cc92:	bd38      	pop	{r3, r4, r5, pc}
   2cc94:	f3bf 8f5b 	dmb	ish
   2cc98:	e854 3f00 	ldrex	r3, [r4]
   2cc9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2cca0:	e844 3200 	strex	r2, r3, [r4]
   2cca4:	2a00      	cmp	r2, #0
   2cca6:	d1f7      	bne.n	2cc98 <smp_dhkey_ready+0x72>
   2cca8:	f3bf 8f5b 	dmb	ish
		return 0;
   2ccac:	2000      	movs	r0, #0
   2ccae:	e7f0      	b.n	2cc92 <smp_dhkey_ready+0x6c>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2ccb0:	4628      	mov	r0, r5
   2ccb2:	f7ee f893 	bl	1addc <compute_and_check_and_send_periph_dhcheck>
   2ccb6:	e7ec      	b.n	2cc92 <smp_dhkey_ready+0x6c>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2ccb8:	200b      	movs	r0, #11
}
   2ccba:	4770      	bx	lr

0002ccbc <update_debug_keys_check>:
{
   2ccbc:	b510      	push	{r4, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   2ccbe:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	if (!conn->le.keys) {
   2ccc2:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2ccc6:	b163      	cbz	r3, 2cce2 <update_debug_keys_check+0x26>
	if (!conn->le.keys ||
   2ccc8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2cccc:	b18b      	cbz	r3, 2ccf2 <update_debug_keys_check+0x36>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2ccce:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   2ccd0:	f012 0f24 	tst.w	r2, #36	; 0x24
   2ccd4:	d00f      	beq.n	2ccf6 <update_debug_keys_check+0x3a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   2ccd6:	7b5b      	ldrb	r3, [r3, #13]
   2ccd8:	f013 0f02 	tst.w	r3, #2
   2ccdc:	d10d      	bne.n	2ccfa <update_debug_keys_check+0x3e>
	return false;
   2ccde:	2000      	movs	r0, #0
}
   2cce0:	bd10      	pop	{r4, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2cce2:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2cce6:	7a20      	ldrb	r0, [r4, #8]
   2cce8:	f7ef fa58 	bl	1c19c <bt_keys_get_addr>
   2ccec:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   2ccf0:	e7ea      	b.n	2ccc8 <update_debug_keys_check+0xc>
		return true;
   2ccf2:	2001      	movs	r0, #1
   2ccf4:	e7f4      	b.n	2cce0 <update_debug_keys_check+0x24>
   2ccf6:	2001      	movs	r0, #1
   2ccf8:	e7f2      	b.n	2cce0 <update_debug_keys_check+0x24>
		return true;
   2ccfa:	2001      	movs	r0, #1
   2ccfc:	e7f0      	b.n	2cce0 <update_debug_keys_check+0x24>

0002ccfe <smp_send_security_req>:
{
   2ccfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cd02:	b082      	sub	sp, #8
   2cd04:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   2cd06:	f7ed fd1f 	bl	1a748 <smp_chan_get>
	if (!smp) {
   2cd0a:	2800      	cmp	r0, #0
   2cd0c:	d070      	beq.n	2cdf0 <smp_send_security_req+0xf2>
   2cd0e:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2cd10:	1d06      	adds	r6, r0, #4
   2cd12:	2104      	movs	r1, #4
   2cd14:	4630      	mov	r0, r6
   2cd16:	f7ff fc6d 	bl	2c5f4 <atomic_test_bit>
   2cd1a:	2800      	cmp	r0, #0
   2cd1c:	d16b      	bne.n	2cdf6 <smp_send_security_req+0xf8>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2cd1e:	2103      	movs	r1, #3
   2cd20:	4630      	mov	r0, r6
   2cd22:	f7ff fc67 	bl	2c5f4 <atomic_test_bit>
   2cd26:	2800      	cmp	r0, #0
   2cd28:	d168      	bne.n	2cdfc <smp_send_security_req+0xfe>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2cd2a:	2101      	movs	r1, #1
   2cd2c:	4630      	mov	r0, r6
   2cd2e:	f7ff fc61 	bl	2c5f4 <atomic_test_bit>
   2cd32:	2800      	cmp	r0, #0
   2cd34:	d165      	bne.n	2ce02 <smp_send_security_req+0x104>
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   2cd36:	4620      	mov	r0, r4
   2cd38:	f7ed fe1e 	bl	1a978 <sec_level_reachable>
   2cd3c:	2800      	cmp	r0, #0
   2cd3e:	d03f      	beq.n	2cdc0 <smp_send_security_req+0xc2>
	if (!conn->le.keys) {
   2cd40:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2cd44:	2b00      	cmp	r3, #0
   2cd46:	d043      	beq.n	2cdd0 <smp_send_security_req+0xd2>
	if (smp_init(smp) != 0) {
   2cd48:	4620      	mov	r0, r4
   2cd4a:	f7ee fa55 	bl	1b1f8 <smp_init>
   2cd4e:	2800      	cmp	r0, #0
   2cd50:	d15a      	bne.n	2ce08 <smp_send_security_req+0x10a>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   2cd52:	2201      	movs	r2, #1
   2cd54:	210b      	movs	r1, #11
   2cd56:	4620      	mov	r0, r4
   2cd58:	f7ff fd91 	bl	2c87e <smp_create_pdu>
	if (!req_buf) {
   2cd5c:	4680      	mov	r8, r0
   2cd5e:	2800      	cmp	r0, #0
   2cd60:	d055      	beq.n	2ce0e <smp_send_security_req+0x110>
   2cd62:	2101      	movs	r1, #1
   2cd64:	3008      	adds	r0, #8
   2cd66:	f7f0 f823 	bl	1cdb0 <net_buf_simple_add>
   2cd6a:	4607      	mov	r7, r0
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   2cd6c:	2109      	movs	r1, #9
   2cd6e:	4620      	mov	r0, r4
   2cd70:	f7ed fd88 	bl	1a884 <get_auth>
   2cd74:	7038      	strb	r0, [r7, #0]
   2cd76:	2300      	movs	r3, #0
   2cd78:	9300      	str	r3, [sp, #0]
   2cd7a:	4642      	mov	r2, r8
   2cd7c:	2106      	movs	r1, #6
   2cd7e:	4628      	mov	r0, r5
   2cd80:	f7fe f8aa 	bl	2aed8 <bt_l2cap_send_cb>
	if (err) {
   2cd84:	4605      	mov	r5, r0
   2cd86:	bb78      	cbnz	r0, 2cde8 <smp_send_security_req+0xea>
   2cd88:	f3bf 8f5b 	dmb	ish
   2cd8c:	e856 3f00 	ldrex	r3, [r6]
   2cd90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   2cd94:	e846 3200 	strex	r2, r3, [r6]
   2cd98:	2a00      	cmp	r2, #0
   2cd9a:	d1f7      	bne.n	2cd8c <smp_send_security_req+0x8e>
   2cd9c:	f3bf 8f5b 	dmb	ish
   2cda0:	f3bf 8f5b 	dmb	ish
   2cda4:	e854 3f00 	ldrex	r3, [r4]
   2cda8:	f043 0302 	orr.w	r3, r3, #2
   2cdac:	e844 3200 	strex	r2, r3, [r4]
   2cdb0:	2a00      	cmp	r2, #0
   2cdb2:	d1f7      	bne.n	2cda4 <smp_send_security_req+0xa6>
   2cdb4:	f3bf 8f5b 	dmb	ish
}
   2cdb8:	4628      	mov	r0, r5
   2cdba:	b002      	add	sp, #8
   2cdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   2cdc0:	4628      	mov	r0, r5
   2cdc2:	f7ff fc24 	bl	2c60e <smp_keys_check>
   2cdc6:	2800      	cmp	r0, #0
   2cdc8:	d1ba      	bne.n	2cd40 <smp_send_security_req+0x42>
		return -EINVAL;
   2cdca:	f06f 0515 	mvn.w	r5, #21
   2cdce:	e7f3      	b.n	2cdb8 <smp_send_security_req+0xba>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2cdd0:	f105 0190 	add.w	r1, r5, #144	; 0x90
   2cdd4:	7a28      	ldrb	r0, [r5, #8]
   2cdd6:	f7ef f9e1 	bl	1c19c <bt_keys_get_addr>
   2cdda:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   2cdde:	2800      	cmp	r0, #0
   2cde0:	d1b2      	bne.n	2cd48 <smp_send_security_req+0x4a>
			return -ENOMEM;
   2cde2:	f06f 050b 	mvn.w	r5, #11
   2cde6:	e7e7      	b.n	2cdb8 <smp_send_security_req+0xba>
		net_buf_unref(req_buf);
   2cde8:	4640      	mov	r0, r8
   2cdea:	f7ef fedf 	bl	1cbac <net_buf_unref>
		return err;
   2cdee:	e7e3      	b.n	2cdb8 <smp_send_security_req+0xba>
		return -ENOTCONN;
   2cdf0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   2cdf4:	e7e0      	b.n	2cdb8 <smp_send_security_req+0xba>
		return -EIO;
   2cdf6:	f06f 0504 	mvn.w	r5, #4
   2cdfa:	e7dd      	b.n	2cdb8 <smp_send_security_req+0xba>
		return -EBUSY;
   2cdfc:	f06f 050f 	mvn.w	r5, #15
   2ce00:	e7da      	b.n	2cdb8 <smp_send_security_req+0xba>
		return -EBUSY;
   2ce02:	f06f 050f 	mvn.w	r5, #15
   2ce06:	e7d7      	b.n	2cdb8 <smp_send_security_req+0xba>
		return -ENOBUFS;
   2ce08:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2ce0c:	e7d4      	b.n	2cdb8 <smp_send_security_req+0xba>
		return -ENOBUFS;
   2ce0e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2ce12:	e7d1      	b.n	2cdb8 <smp_send_security_req+0xba>

0002ce14 <generate_dhkey>:
{
   2ce14:	b510      	push	{r4, lr}
   2ce16:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2ce18:	1d03      	adds	r3, r0, #4
   2ce1a:	f3bf 8f5b 	dmb	ish
   2ce1e:	e853 1f00 	ldrex	r1, [r3]
   2ce22:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   2ce26:	e843 1200 	strex	r2, r1, [r3]
   2ce2a:	2a00      	cmp	r2, #0
   2ce2c:	d1f7      	bne.n	2ce1e <generate_dhkey+0xa>
   2ce2e:	f3bf 8f5b 	dmb	ish
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   2ce32:	2008      	movs	r0, #8
   2ce34:	f7ed fcc4 	bl	1a7c0 <smp_find>
   2ce38:	b108      	cbz	r0, 2ce3e <generate_dhkey+0x2a>
	return 0;
   2ce3a:	2000      	movs	r0, #0
}
   2ce3c:	bd10      	pop	{r4, pc}
		return smp_dhkey_generate(smp);
   2ce3e:	4620      	mov	r0, r4
   2ce40:	f7ee faa4 	bl	1b38c <smp_dhkey_generate>
   2ce44:	e7fa      	b.n	2ce3c <generate_dhkey+0x28>

0002ce46 <legacy_pairing_req>:
{
   2ce46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ce48:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2ce4a:	f7ed fcd3 	bl	1a7f4 <latch_auth_cb>
   2ce4e:	4606      	mov	r6, r0
	ret = legacy_request_tk(smp);
   2ce50:	4620      	mov	r0, r4
   2ce52:	f7ee fbaf 	bl	1b5b4 <legacy_request_tk>
	if (ret) {
   2ce56:	4605      	mov	r5, r0
   2ce58:	bb30      	cbnz	r0, 2cea8 <legacy_pairing_req+0x62>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2ce5a:	7a25      	ldrb	r5, [r4, #8]
   2ce5c:	b945      	cbnz	r5, 2ce70 <legacy_pairing_req+0x2a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2ce5e:	1d27      	adds	r7, r4, #4
   2ce60:	210f      	movs	r1, #15
   2ce62:	4638      	mov	r0, r7
   2ce64:	f7ff fbc6 	bl	2c5f4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2ce68:	b910      	cbnz	r0, 2ce70 <legacy_pairing_req+0x2a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2ce6a:	b10e      	cbz	r6, 2ce70 <legacy_pairing_req+0x2a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   2ce6c:	6973      	ldr	r3, [r6, #20]
   2ce6e:	b9eb      	cbnz	r3, 2ceac <legacy_pairing_req+0x66>
   2ce70:	f3bf 8f5b 	dmb	ish
   2ce74:	e854 3f00 	ldrex	r3, [r4]
   2ce78:	f043 0308 	orr.w	r3, r3, #8
   2ce7c:	e844 3200 	strex	r2, r3, [r4]
   2ce80:	2a00      	cmp	r2, #0
   2ce82:	d1f7      	bne.n	2ce74 <legacy_pairing_req+0x2e>
   2ce84:	f3bf 8f5b 	dmb	ish
   2ce88:	f3bf 8f5b 	dmb	ish
   2ce8c:	e854 3f00 	ldrex	r3, [r4]
   2ce90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2ce94:	e844 3200 	strex	r2, r3, [r4]
   2ce98:	2a00      	cmp	r2, #0
   2ce9a:	d1f7      	bne.n	2ce8c <legacy_pairing_req+0x46>
   2ce9c:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
   2cea0:	4620      	mov	r0, r4
   2cea2:	f7ff fdc8 	bl	2ca36 <send_pairing_rsp>
   2cea6:	4605      	mov	r5, r0
}
   2cea8:	4628      	mov	r0, r5
   2ceaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ceac:	f3bf 8f5b 	dmb	ish
   2ceb0:	e857 3f00 	ldrex	r3, [r7]
   2ceb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2ceb8:	e847 3200 	strex	r2, r3, [r7]
   2cebc:	2a00      	cmp	r2, #0
   2cebe:	d1f7      	bne.n	2ceb0 <legacy_pairing_req+0x6a>
   2cec0:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   2cec4:	6973      	ldr	r3, [r6, #20]
   2cec6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   2ceca:	4798      	blx	r3
		return 0;
   2cecc:	e7ec      	b.n	2cea8 <legacy_pairing_req+0x62>

0002cece <bt_smp_request_ltk>:
{
   2cece:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ced0:	b083      	sub	sp, #12
   2ced2:	4604      	mov	r4, r0
   2ced4:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2ced8:	f7ed fc36 	bl	1a748 <smp_chan_get>
	if (!smp) {
   2cedc:	2800      	cmp	r0, #0
   2cede:	f000 80c7 	beq.w	2d070 <bt_smp_request_ltk+0x1a2>
   2cee2:	4605      	mov	r5, r0
	if (ediv == 0U && rand == 0U &&
   2cee4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2cee8:	b91b      	cbnz	r3, 2cef2 <bt_smp_request_ltk+0x24>
   2ceea:	9b00      	ldr	r3, [sp, #0]
   2ceec:	9a01      	ldr	r2, [sp, #4]
   2ceee:	4313      	orrs	r3, r2
   2cef0:	d026      	beq.n	2cf40 <bt_smp_request_ltk+0x72>
	if (!conn->le.keys) {
   2cef2:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2cef6:	2b00      	cmp	r3, #0
   2cef8:	d051      	beq.n	2cf9e <bt_smp_request_ltk+0xd0>
	if (ediv == 0U && rand == 0U &&
   2cefa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2cefe:	b953      	cbnz	r3, 2cf16 <bt_smp_request_ltk+0x48>
   2cf00:	9b00      	ldr	r3, [sp, #0]
   2cf02:	9a01      	ldr	r2, [sp, #4]
   2cf04:	4313      	orrs	r3, r2
   2cf06:	d106      	bne.n	2cf16 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2cf08:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2cf0c:	b119      	cbz	r1, 2cf16 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2cf0e:	89cb      	ldrh	r3, [r1, #14]
   2cf10:	f013 0f20 	tst.w	r3, #32
   2cf14:	d156      	bne.n	2cfc4 <bt_smp_request_ltk+0xf6>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2cf16:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2cf1a:	b118      	cbz	r0, 2cf24 <bt_smp_request_ltk+0x56>
   2cf1c:	89c3      	ldrh	r3, [r0, #14]
   2cf1e:	f013 0f01 	tst.w	r3, #1
   2cf22:	d16e      	bne.n	2d002 <bt_smp_request_ltk+0x134>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2cf24:	210f      	movs	r1, #15
   2cf26:	1d28      	adds	r0, r5, #4
   2cf28:	f7ff fb64 	bl	2c5f4 <atomic_test_bit>
   2cf2c:	2800      	cmp	r0, #0
   2cf2e:	f040 8099 	bne.w	2d064 <bt_smp_request_ltk+0x196>
	smp_reset(smp);
   2cf32:	4628      	mov	r0, r5
   2cf34:	f7ff fbff 	bl	2c736 <smp_reset>
	return false;
   2cf38:	2600      	movs	r6, #0
}
   2cf3a:	4630      	mov	r0, r6
   2cf3c:	b003      	add	sp, #12
   2cf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2cf40:	1d07      	adds	r7, r0, #4
   2cf42:	2103      	movs	r1, #3
   2cf44:	4638      	mov	r0, r7
   2cf46:	f7ff fb55 	bl	2c5f4 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2cf4a:	2800      	cmp	r0, #0
   2cf4c:	d0d1      	beq.n	2cef2 <bt_smp_request_ltk+0x24>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2cf4e:	2101      	movs	r1, #1
   2cf50:	4638      	mov	r0, r7
   2cf52:	f7ff fb4f 	bl	2c5f4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2cf56:	4606      	mov	r6, r0
   2cf58:	2800      	cmp	r0, #0
   2cf5a:	d0ca      	beq.n	2cef2 <bt_smp_request_ltk+0x24>
		enc_size = get_encryption_key_size(smp);
   2cf5c:	4628      	mov	r0, r5
   2cf5e:	f7ff fae9 	bl	2c534 <get_encryption_key_size>
   2cf62:	4604      	mov	r4, r0
		memcpy(ltk, smp->tk, enc_size);
   2cf64:	4602      	mov	r2, r0
   2cf66:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2cf6a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2cf6c:	f7fc ff0e 	bl	29d8c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2cf70:	2c0f      	cmp	r4, #15
   2cf72:	d90c      	bls.n	2cf8e <bt_smp_request_ltk+0xc0>
   2cf74:	f3bf 8f5b 	dmb	ish
   2cf78:	e857 3f00 	ldrex	r3, [r7]
   2cf7c:	f043 0302 	orr.w	r3, r3, #2
   2cf80:	e847 3200 	strex	r2, r3, [r7]
   2cf84:	2a00      	cmp	r2, #0
   2cf86:	d1f7      	bne.n	2cf78 <bt_smp_request_ltk+0xaa>
   2cf88:	f3bf 8f5b 	dmb	ish
		return true;
   2cf8c:	e7d5      	b.n	2cf3a <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   2cf8e:	f1c4 0210 	rsb	r2, r4, #16
   2cf92:	2100      	movs	r1, #0
   2cf94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2cf96:	1918      	adds	r0, r3, r4
   2cf98:	f7fc ff27 	bl	29dea <memset>
   2cf9c:	e7ea      	b.n	2cf74 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   2cf9e:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2cfa2:	4632      	mov	r2, r6
   2cfa4:	7a21      	ldrb	r1, [r4, #8]
   2cfa6:	2020      	movs	r0, #32
   2cfa8:	f7ef f978 	bl	1c29c <bt_keys_find>
   2cfac:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2cfb0:	2800      	cmp	r0, #0
   2cfb2:	d1a2      	bne.n	2cefa <bt_smp_request_ltk+0x2c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2cfb4:	4632      	mov	r2, r6
   2cfb6:	7a21      	ldrb	r1, [r4, #8]
   2cfb8:	2001      	movs	r0, #1
   2cfba:	f7ef f96f 	bl	1c29c <bt_keys_find>
   2cfbe:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   2cfc2:	e79a      	b.n	2cefa <bt_smp_request_ltk+0x2c>
		enc_size = conn->le.keys->enc_size;
   2cfc4:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2cfc6:	4622      	mov	r2, r4
   2cfc8:	311a      	adds	r1, #26
   2cfca:	9809      	ldr	r0, [sp, #36]	; 0x24
   2cfcc:	f7fc fede 	bl	29d8c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2cfd0:	2c0f      	cmp	r4, #15
   2cfd2:	d90e      	bls.n	2cff2 <bt_smp_request_ltk+0x124>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2cfd4:	3504      	adds	r5, #4
   2cfd6:	f3bf 8f5b 	dmb	ish
   2cfda:	e855 3f00 	ldrex	r3, [r5]
   2cfde:	f043 0302 	orr.w	r3, r3, #2
   2cfe2:	e845 3200 	strex	r2, r3, [r5]
   2cfe6:	2a00      	cmp	r2, #0
   2cfe8:	d1f7      	bne.n	2cfda <bt_smp_request_ltk+0x10c>
   2cfea:	f3bf 8f5b 	dmb	ish
		return true;
   2cfee:	2601      	movs	r6, #1
   2cff0:	e7a3      	b.n	2cf3a <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   2cff2:	f1c4 0210 	rsb	r2, r4, #16
   2cff6:	2100      	movs	r1, #0
   2cff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2cffa:	1918      	adds	r0, r3, r4
   2cffc:	f7fc fef5 	bl	29dea <memset>
   2d000:	e7e8      	b.n	2cfd4 <bt_smp_request_ltk+0x106>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d002:	2208      	movs	r2, #8
   2d004:	4669      	mov	r1, sp
   2d006:	3040      	adds	r0, #64	; 0x40
   2d008:	f7fc fe9b 	bl	29d42 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2d00c:	2800      	cmp	r0, #0
   2d00e:	d189      	bne.n	2cf24 <bt_smp_request_ltk+0x56>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2d010:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2d014:	2202      	movs	r2, #2
   2d016:	a908      	add	r1, sp, #32
   2d018:	3048      	adds	r0, #72	; 0x48
   2d01a:	f7fc fe92 	bl	29d42 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d01e:	2800      	cmp	r0, #0
   2d020:	d180      	bne.n	2cf24 <bt_smp_request_ltk+0x56>
		enc_size = conn->le.keys->enc_size;
   2d022:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2d026:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2d028:	4622      	mov	r2, r4
   2d02a:	314a      	adds	r1, #74	; 0x4a
   2d02c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2d02e:	f7fc fead 	bl	29d8c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2d032:	2c0f      	cmp	r4, #15
   2d034:	d90e      	bls.n	2d054 <bt_smp_request_ltk+0x186>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2d036:	3504      	adds	r5, #4
   2d038:	f3bf 8f5b 	dmb	ish
   2d03c:	e855 3f00 	ldrex	r3, [r5]
   2d040:	f043 0302 	orr.w	r3, r3, #2
   2d044:	e845 3200 	strex	r2, r3, [r5]
   2d048:	2a00      	cmp	r2, #0
   2d04a:	d1f7      	bne.n	2d03c <bt_smp_request_ltk+0x16e>
   2d04c:	f3bf 8f5b 	dmb	ish
		return true;
   2d050:	2601      	movs	r6, #1
   2d052:	e772      	b.n	2cf3a <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   2d054:	f1c4 0210 	rsb	r2, r4, #16
   2d058:	2100      	movs	r1, #0
   2d05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d05c:	1918      	adds	r0, r3, r4
   2d05e:	f7fc fec4 	bl	29dea <memset>
   2d062:	e7e8      	b.n	2d036 <bt_smp_request_ltk+0x168>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2d064:	2202      	movs	r2, #2
   2d066:	2106      	movs	r1, #6
   2d068:	4620      	mov	r0, r4
   2d06a:	f7ea fa05 	bl	17478 <bt_conn_security_changed>
   2d06e:	e760      	b.n	2cf32 <bt_smp_request_ltk+0x64>
		return false;
   2d070:	2600      	movs	r6, #0
   2d072:	e762      	b.n	2cf3a <bt_smp_request_ltk+0x6c>

0002d074 <bt_smp_sign>:
}
   2d074:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d078:	4770      	bx	lr

0002d07a <bt_smp_start_security>:
{
   2d07a:	b508      	push	{r3, lr}
	switch (conn->role) {
   2d07c:	78c3      	ldrb	r3, [r0, #3]
   2d07e:	2b01      	cmp	r3, #1
   2d080:	d102      	bne.n	2d088 <bt_smp_start_security+0xe>
		return smp_send_security_req(conn);
   2d082:	f7ff fe3c 	bl	2ccfe <smp_send_security_req>
}
   2d086:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2d088:	f06f 0015 	mvn.w	r0, #21
   2d08c:	e7fb      	b.n	2d086 <bt_smp_start_security+0xc>

0002d08e <bt_smp_dhkey_ready>:
{
   2d08e:	b538      	push	{r3, r4, r5, lr}
   2d090:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2d092:	2008      	movs	r0, #8
   2d094:	f7ed fb94 	bl	1a7c0 <smp_find>
	if (smp) {
   2d098:	b1c0      	cbz	r0, 2d0cc <bt_smp_dhkey_ready+0x3e>
   2d09a:	4605      	mov	r5, r0
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2d09c:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d09e:	f3bf 8f5b 	dmb	ish
   2d0a2:	e853 1f00 	ldrex	r1, [r3]
   2d0a6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
   2d0aa:	e843 1200 	strex	r2, r1, [r3]
   2d0ae:	2a00      	cmp	r2, #0
   2d0b0:	d1f7      	bne.n	2d0a2 <bt_smp_dhkey_ready+0x14>
   2d0b2:	f3bf 8f5b 	dmb	ish
		err = smp_dhkey_ready(smp, dhkey);
   2d0b6:	4621      	mov	r1, r4
   2d0b8:	4628      	mov	r0, r5
   2d0ba:	f7ff fdb4 	bl	2cc26 <smp_dhkey_ready>
		if (err) {
   2d0be:	4601      	mov	r1, r0
   2d0c0:	b120      	cbz	r0, 2d0cc <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2d0c2:	4628      	mov	r0, r5
   2d0c4:	f7ee fd3c 	bl	1bb40 <smp_error>
   2d0c8:	e000      	b.n	2d0cc <bt_smp_dhkey_ready+0x3e>
	} while (smp && err);
   2d0ca:	b175      	cbz	r5, 2d0ea <bt_smp_dhkey_ready+0x5c>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2d0cc:	2007      	movs	r0, #7
   2d0ce:	f7ed fb77 	bl	1a7c0 <smp_find>
		if (smp) {
   2d0d2:	4604      	mov	r4, r0
   2d0d4:	b148      	cbz	r0, 2d0ea <bt_smp_dhkey_ready+0x5c>
			err = smp_dhkey_generate(smp);
   2d0d6:	f7ee f959 	bl	1b38c <smp_dhkey_generate>
			if (err) {
   2d0da:	4605      	mov	r5, r0
   2d0dc:	2800      	cmp	r0, #0
   2d0de:	d0f4      	beq.n	2d0ca <bt_smp_dhkey_ready+0x3c>
				smp_error(smp, err);
   2d0e0:	4601      	mov	r1, r0
   2d0e2:	4620      	mov	r0, r4
   2d0e4:	f7ee fd2c 	bl	1bb40 <smp_error>
   2d0e8:	e7ef      	b.n	2d0ca <bt_smp_dhkey_ready+0x3c>
}
   2d0ea:	bd38      	pop	{r3, r4, r5, pc}

0002d0ec <bt_smp_encrypt_change>:
{
   2d0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d0f0:	4604      	mov	r4, r0
   2d0f2:	460e      	mov	r6, r1
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2d0f4:	f1a0 08ec 	sub.w	r8, r0, #236	; 0xec
	struct bt_conn *conn = chan->conn;
   2d0f8:	4605      	mov	r5, r0
   2d0fa:	f855 79e8 	ldr.w	r7, [r5], #-232
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2d0fe:	2101      	movs	r1, #1
   2d100:	4628      	mov	r0, r5
   2d102:	f7ff fba0 	bl	2c846 <atomic_test_and_clear_bit>
   2d106:	b110      	cbz	r0, 2d10e <bt_smp_encrypt_change+0x22>
	if (hci_status) {
   2d108:	b91e      	cbnz	r6, 2d112 <bt_smp_encrypt_change+0x26>
	if (!conn->encrypt) {
   2d10a:	7afb      	ldrb	r3, [r7, #11]
   2d10c:	b9eb      	cbnz	r3, 2d14a <bt_smp_encrypt_change+0x5e>
}
   2d10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2d112:	2103      	movs	r1, #3
   2d114:	4628      	mov	r0, r5
   2d116:	f7ff fa6d 	bl	2c5f4 <atomic_test_bit>
   2d11a:	2800      	cmp	r0, #0
   2d11c:	d0f7      	beq.n	2d10e <bt_smp_encrypt_change+0x22>
			uint8_t smp_err = smp_err_get(
   2d11e:	4630      	mov	r0, r6
   2d120:	f7fd f8e2 	bl	2a2e8 <bt_security_err_get>
   2d124:	f7ff f9f2 	bl	2c50c <smp_err_get>
   2d128:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d12a:	f3bf 8f5b 	dmb	ish
   2d12e:	e855 3f00 	ldrex	r3, [r5]
   2d132:	f043 0304 	orr.w	r3, r3, #4
   2d136:	e845 3200 	strex	r2, r3, [r5]
   2d13a:	2a00      	cmp	r2, #0
   2d13c:	d1f7      	bne.n	2d12e <bt_smp_encrypt_change+0x42>
   2d13e:	f3bf 8f5b 	dmb	ish
			smp_pairing_complete(smp, smp_err);
   2d142:	4640      	mov	r0, r8
   2d144:	f7ee fc7a 	bl	1ba3c <smp_pairing_complete>
		return;
   2d148:	e7e1      	b.n	2d10e <bt_smp_encrypt_change+0x22>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2d14a:	2103      	movs	r1, #3
   2d14c:	4628      	mov	r0, r5
   2d14e:	f7ff fa51 	bl	2c5f4 <atomic_test_bit>
   2d152:	2800      	cmp	r0, #0
   2d154:	d040      	beq.n	2d1d8 <bt_smp_encrypt_change+0xec>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2d156:	2105      	movs	r1, #5
   2d158:	4628      	mov	r0, r5
   2d15a:	f7ff fa4b 	bl	2c5f4 <atomic_test_bit>
   2d15e:	b308      	cbz	r0, 2d1a4 <bt_smp_encrypt_change+0xb8>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   2d160:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   2d164:	f013 0f08 	tst.w	r3, #8
   2d168:	d010      	beq.n	2d18c <bt_smp_encrypt_change+0xa0>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
   2d16a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   2d16e:	f013 0f08 	tst.w	r3, #8
   2d172:	d00b      	beq.n	2d18c <bt_smp_encrypt_change+0xa0>
   2d174:	f3bf 8f5b 	dmb	ish
   2d178:	e855 3f00 	ldrex	r3, [r5]
   2d17c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2d180:	e845 3200 	strex	r2, r3, [r5]
   2d184:	2a00      	cmp	r2, #0
   2d186:	d1f7      	bne.n	2d178 <bt_smp_encrypt_change+0x8c>
   2d188:	f3bf 8f5b 	dmb	ish
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   2d18c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   2d190:	f023 0308 	bic.w	r3, r3, #8
   2d194:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   2d198:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   2d19c:	f023 0308 	bic.w	r3, r3, #8
   2d1a0:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   2d1a4:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   2d1a8:	f013 0f01 	tst.w	r3, #1
   2d1ac:	d118      	bne.n	2d1e0 <bt_smp_encrypt_change+0xf4>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   2d1ae:	f013 0f02 	tst.w	r3, #2
   2d1b2:	d13f      	bne.n	2d234 <bt_smp_encrypt_change+0x148>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2d1b4:	f013 0f04 	tst.w	r3, #4
   2d1b8:	d020      	beq.n	2d1fc <bt_smp_encrypt_change+0x110>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2d1ba:	f1a4 03ec 	sub.w	r3, r4, #236	; 0xec
   2d1be:	f3bf 8f5b 	dmb	ish
   2d1c2:	e853 1f00 	ldrex	r1, [r3]
   2d1c6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   2d1ca:	e843 1200 	strex	r2, r1, [r3]
   2d1ce:	2a00      	cmp	r2, #0
   2d1d0:	d1f7      	bne.n	2d1c2 <bt_smp_encrypt_change+0xd6>
   2d1d2:	f3bf 8f5b 	dmb	ish
}
   2d1d6:	e011      	b.n	2d1fc <bt_smp_encrypt_change+0x110>
		smp_reset(smp);
   2d1d8:	4640      	mov	r0, r8
   2d1da:	f7ff faac 	bl	2c736 <smp_reset>
		return;
   2d1de:	e796      	b.n	2d10e <bt_smp_encrypt_change+0x22>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   2d1e0:	f1a4 03ec 	sub.w	r3, r4, #236	; 0xec
   2d1e4:	f3bf 8f5b 	dmb	ish
   2d1e8:	e853 1f00 	ldrex	r1, [r3]
   2d1ec:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   2d1f0:	e843 1200 	strex	r2, r1, [r3]
   2d1f4:	2a00      	cmp	r2, #0
   2d1f6:	d1f7      	bne.n	2d1e8 <bt_smp_encrypt_change+0xfc>
   2d1f8:	f3bf 8f5b 	dmb	ish
   2d1fc:	f3bf 8f5b 	dmb	ish
   2d200:	e855 3f00 	ldrex	r3, [r5]
   2d204:	f043 0304 	orr.w	r3, r3, #4
   2d208:	e845 3200 	strex	r2, r3, [r5]
   2d20c:	2a00      	cmp	r2, #0
   2d20e:	d1f7      	bne.n	2d200 <bt_smp_encrypt_change+0x114>
   2d210:	f3bf 8f5b 	dmb	ish
	if (bt_smp_distribute_keys(smp)) {
   2d214:	4640      	mov	r0, r8
   2d216:	f7ee f899 	bl	1b34c <bt_smp_distribute_keys>
   2d21a:	2800      	cmp	r0, #0
   2d21c:	f47f af77 	bne.w	2d10e <bt_smp_encrypt_change+0x22>
	if (!smp->local_dist && !smp->remote_dist) {
   2d220:	f834 3c04 	ldrh.w	r3, [r4, #-4]
   2d224:	2b00      	cmp	r3, #0
   2d226:	f47f af72 	bne.w	2d10e <bt_smp_encrypt_change+0x22>
		smp_pairing_complete(smp, 0);
   2d22a:	2100      	movs	r1, #0
   2d22c:	4640      	mov	r0, r8
   2d22e:	f7ee fc05 	bl	1ba3c <smp_pairing_complete>
   2d232:	e76c      	b.n	2d10e <bt_smp_encrypt_change+0x22>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2d234:	f1a4 03ec 	sub.w	r3, r4, #236	; 0xec
   2d238:	f3bf 8f5b 	dmb	ish
   2d23c:	e853 1f00 	ldrex	r1, [r3]
   2d240:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   2d244:	e843 1200 	strex	r2, r1, [r3]
   2d248:	2a00      	cmp	r2, #0
   2d24a:	d1f7      	bne.n	2d23c <bt_smp_encrypt_change+0x150>
   2d24c:	f3bf 8f5b 	dmb	ish
   2d250:	e7d4      	b.n	2d1fc <bt_smp_encrypt_change+0x110>

0002d252 <smp_ident_sent>:
	if (!err) {
   2d252:	b102      	cbz	r2, 2d256 <smp_ident_sent+0x4>
   2d254:	4770      	bx	lr
{
   2d256:	b508      	push	{r3, lr}
		smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   2d258:	2101      	movs	r1, #1
   2d25a:	f7ee fe9d 	bl	1bf98 <smp_check_complete>
}
   2d25e:	bd08      	pop	{r3, pc}

0002d260 <bt_smp_disconnected>:
{
   2d260:	b570      	push	{r4, r5, r6, lr}
   2d262:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2d264:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2d268:	f850 3b94 	ldr.w	r3, [r0], #148
   2d26c:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   2d270:	f7f5 ff7c 	bl	2316c <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2d274:	3ce8      	subs	r4, #232	; 0xe8
   2d276:	2103      	movs	r1, #3
   2d278:	4620      	mov	r0, r4
   2d27a:	f7ff f9bb 	bl	2c5f4 <atomic_test_bit>
   2d27e:	b920      	cbnz	r0, 2d28a <bt_smp_disconnected+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2d280:	2101      	movs	r1, #1
   2d282:	4620      	mov	r0, r4
   2d284:	f7ff f9b6 	bl	2c5f4 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2d288:	b1a0      	cbz	r0, 2d2b4 <bt_smp_disconnected+0x54>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2d28a:	2108      	movs	r1, #8
   2d28c:	4630      	mov	r0, r6
   2d28e:	f7ee fbd5 	bl	1ba3c <smp_pairing_complete>
	if (keys) {
   2d292:	b145      	cbz	r5, 2d2a6 <bt_smp_disconnected+0x46>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2d294:	89eb      	ldrh	r3, [r5, #14]
   2d296:	b11b      	cbz	r3, 2d2a0 <bt_smp_disconnected+0x40>
		    (keys->flags & BT_KEYS_DEBUG))) {
   2d298:	7b6b      	ldrb	r3, [r5, #13]
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2d29a:	f013 0f02 	tst.w	r3, #2
   2d29e:	d002      	beq.n	2d2a6 <bt_smp_disconnected+0x46>
			bt_keys_clear(keys);
   2d2a0:	4628      	mov	r0, r5
   2d2a2:	f7ef f913 	bl	1c4cc <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2d2a6:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   2d2aa:	2100      	movs	r1, #0
   2d2ac:	4630      	mov	r0, r6
   2d2ae:	f7fc fd9c 	bl	29dea <memset>
}
   2d2b2:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2d2b4:	210f      	movs	r1, #15
   2d2b6:	4620      	mov	r0, r4
   2d2b8:	f7ff f99c 	bl	2c5f4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2d2bc:	2800      	cmp	r0, #0
   2d2be:	d0e8      	beq.n	2d292 <bt_smp_disconnected+0x32>
   2d2c0:	e7e3      	b.n	2d28a <bt_smp_disconnected+0x2a>

0002d2c2 <pool_get_uninit>:
{
   2d2c2:	b538      	push	{r3, r4, r5, lr}
   2d2c4:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2d2c6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   2d2ca:	3317      	adds	r3, #23
   2d2cc:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2d2d0:	8c02      	ldrh	r2, [r0, #32]
   2d2d2:	1a52      	subs	r2, r2, r1
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2d2d4:	6b05      	ldr	r5, [r0, #48]	; 0x30
   2d2d6:	fb03 5502 	mla	r5, r3, r2, r5
	buf->pool_id = pool_id(pool);
   2d2da:	f7ef f9ff 	bl	1c6dc <pool_id>
   2d2de:	71a8      	strb	r0, [r5, #6]
	buf->user_data_size = pool->user_data_size;
   2d2e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2d2e4:	71eb      	strb	r3, [r5, #7]
}
   2d2e6:	4628      	mov	r0, r5
   2d2e8:	bd38      	pop	{r3, r4, r5, pc}

0002d2ea <fixed_data_unref>:
}
   2d2ea:	4770      	bx	lr

0002d2ec <data_alloc>:
{
   2d2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d2f0:	4604      	mov	r4, r0
   2d2f2:	460d      	mov	r5, r1
   2d2f4:	4617      	mov	r7, r2
   2d2f6:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d2f8:	7980      	ldrb	r0, [r0, #6]
   2d2fa:	f7ef f9fb 	bl	1c6f4 <net_buf_pool_get>
	return pool->alloc->cb->alloc(buf, size, timeout);
   2d2fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2d300:	681b      	ldr	r3, [r3, #0]
   2d302:	f8d3 8000 	ldr.w	r8, [r3]
   2d306:	463a      	mov	r2, r7
   2d308:	4633      	mov	r3, r6
   2d30a:	4629      	mov	r1, r5
   2d30c:	4620      	mov	r0, r4
   2d30e:	47c0      	blx	r8
}
   2d310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d314 <net_buf_destroy>:
{
   2d314:	b510      	push	{r4, lr}
   2d316:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d318:	7980      	ldrb	r0, [r0, #6]
   2d31a:	f7ef f9eb 	bl	1c6f4 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2d31e:	4621      	mov	r1, r4
   2d320:	f001 ff73 	bl	2f20a <k_queue_prepend>
}
   2d324:	bd10      	pop	{r4, pc}

0002d326 <data_unref>:
{
   2d326:	b538      	push	{r3, r4, r5, lr}
   2d328:	4604      	mov	r4, r0
   2d32a:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d32c:	7980      	ldrb	r0, [r0, #6]
   2d32e:	f7ef f9e1 	bl	1c6f4 <net_buf_pool_get>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2d332:	7963      	ldrb	r3, [r4, #5]
   2d334:	f013 0f02 	tst.w	r3, #2
   2d338:	d105      	bne.n	2d346 <data_unref+0x20>
	pool->alloc->cb->unref(buf, data);
   2d33a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2d33c:	681b      	ldr	r3, [r3, #0]
   2d33e:	689b      	ldr	r3, [r3, #8]
   2d340:	4629      	mov	r1, r5
   2d342:	4620      	mov	r0, r4
   2d344:	4798      	blx	r3
}
   2d346:	bd38      	pop	{r3, r4, r5, pc}

0002d348 <net_buf_id>:
{
   2d348:	b510      	push	{r4, lr}
   2d34a:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d34c:	7980      	ldrb	r0, [r0, #6]
   2d34e:	f7ef f9d1 	bl	1c6f4 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2d352:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   2d356:	3317      	adds	r3, #23
   2d358:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2d35c:	6b02      	ldr	r2, [r0, #48]	; 0x30
   2d35e:	1aa4      	subs	r4, r4, r2
}
   2d360:	fbb4 f0f3 	udiv	r0, r4, r3
   2d364:	bd10      	pop	{r4, pc}

0002d366 <fixed_data_alloc>:
{
   2d366:	b570      	push	{r4, r5, r6, lr}
   2d368:	4604      	mov	r4, r0
   2d36a:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d36c:	7980      	ldrb	r0, [r0, #6]
   2d36e:	f7ef f9c1 	bl	1c6f4 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2d372:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2d374:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2d376:	682a      	ldr	r2, [r5, #0]
   2d378:	6819      	ldr	r1, [r3, #0]
   2d37a:	428a      	cmp	r2, r1
   2d37c:	bf28      	it	cs
   2d37e:	460a      	movcs	r2, r1
   2d380:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2d382:	685d      	ldr	r5, [r3, #4]
   2d384:	681e      	ldr	r6, [r3, #0]
   2d386:	4620      	mov	r0, r4
   2d388:	f7ff ffde 	bl	2d348 <net_buf_id>
}
   2d38c:	fb00 5006 	mla	r0, r0, r6, r5
   2d390:	bd70      	pop	{r4, r5, r6, pc}

0002d392 <net_buf_alloc_fixed>:
{
   2d392:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2d394:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   2d396:	6849      	ldr	r1, [r1, #4]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2d398:	6809      	ldr	r1, [r1, #0]
   2d39a:	f7ef f9d5 	bl	1c748 <net_buf_alloc_len>
}
   2d39e:	bd08      	pop	{r3, pc}

0002d3a0 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2d3a0:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2d3a2:	6803      	ldr	r3, [r0, #0]
   2d3a4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2d3a6:	2102      	movs	r1, #2
   2d3a8:	f7ef fcac 	bl	1cd04 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2d3ac:	4620      	mov	r0, r4
   2d3ae:	bd10      	pop	{r4, pc}

0002d3b0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2d3b0:	6802      	ldr	r2, [r0, #0]
   2d3b2:	6880      	ldr	r0, [r0, #8]
}
   2d3b4:	1a10      	subs	r0, r2, r0
   2d3b6:	4770      	bx	lr

0002d3b8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   2d3b8:	b538      	push	{r3, r4, r5, lr}
   2d3ba:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2d3bc:	88c5      	ldrh	r5, [r0, #6]
   2d3be:	f7ff fff7 	bl	2d3b0 <net_buf_simple_headroom>
   2d3c2:	1a2d      	subs	r5, r5, r0
   2d3c4:	88a0      	ldrh	r0, [r4, #4]
}
   2d3c6:	1a28      	subs	r0, r5, r0
   2d3c8:	bd38      	pop	{r3, r4, r5, pc}

0002d3ca <net_buf_simple_add_mem>:
{
   2d3ca:	b538      	push	{r3, r4, r5, lr}
   2d3cc:	460d      	mov	r5, r1
   2d3ce:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2d3d0:	4611      	mov	r1, r2
   2d3d2:	f7ef fced 	bl	1cdb0 <net_buf_simple_add>
   2d3d6:	4622      	mov	r2, r4
   2d3d8:	4629      	mov	r1, r5
   2d3da:	f7fc fcd7 	bl	29d8c <memcpy>
}
   2d3de:	bd38      	pop	{r3, r4, r5, pc}

0002d3e0 <net_buf_simple_add_u8>:
{
   2d3e0:	b510      	push	{r4, lr}
   2d3e2:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2d3e4:	2101      	movs	r1, #1
   2d3e6:	f7ef fce3 	bl	1cdb0 <net_buf_simple_add>
	*u8 = val;
   2d3ea:	7004      	strb	r4, [r0, #0]
}
   2d3ec:	bd10      	pop	{r4, pc}

0002d3ee <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2d3ee:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2d3f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2d3f4:	0089      	lsls	r1, r1, #2
   2d3f6:	3140      	adds	r1, #64	; 0x40
}
   2d3f8:	4408      	add	r0, r1
   2d3fa:	4770      	bx	lr

0002d3fc <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2d3fc:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2d3fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2d402:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2d406:	4770      	bx	lr

0002d408 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2d408:	6900      	ldr	r0, [r0, #16]
}
   2d40a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   2d40e:	4770      	bx	lr

0002d410 <set_off_state>:
   2d410:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d414:	f3ef 8211 	mrs	r2, BASEPRI
   2d418:	f383 8812 	msr	BASEPRI_MAX, r3
   2d41c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2d420:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2d422:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2d426:	d001      	beq.n	2d42c <set_off_state+0x1c>
   2d428:	428b      	cmp	r3, r1
   2d42a:	d107      	bne.n	2d43c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2d42c:	2301      	movs	r3, #1
   2d42e:	6003      	str	r3, [r0, #0]
	int err = 0;
   2d430:	2000      	movs	r0, #0
	__asm__ volatile(
   2d432:	f382 8811 	msr	BASEPRI, r2
   2d436:	f3bf 8f6f 	isb	sy
}
   2d43a:	4770      	bx	lr
		err = -EPERM;
   2d43c:	f04f 30ff 	mov.w	r0, #4294967295
   2d440:	e7f7      	b.n	2d432 <set_off_state+0x22>

0002d442 <set_starting_state>:
	__asm__ volatile(
   2d442:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d446:	f3ef 8211 	mrs	r2, BASEPRI
   2d44a:	f383 8812 	msr	BASEPRI_MAX, r3
   2d44e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2d452:	6803      	ldr	r3, [r0, #0]
   2d454:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2d458:	f003 0307 	and.w	r3, r3, #7
   2d45c:	2b01      	cmp	r3, #1
   2d45e:	d008      	beq.n	2d472 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   2d460:	458c      	cmp	ip, r1
   2d462:	d009      	beq.n	2d478 <set_starting_state+0x36>
		err = -EPERM;
   2d464:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   2d468:	f382 8811 	msr	BASEPRI, r2
   2d46c:	f3bf 8f6f 	isb	sy
}
   2d470:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2d472:	6001      	str	r1, [r0, #0]
	int err = 0;
   2d474:	2000      	movs	r0, #0
   2d476:	e7f7      	b.n	2d468 <set_starting_state+0x26>
		err = -EALREADY;
   2d478:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2d47c:	e7f4      	b.n	2d468 <set_starting_state+0x26>

0002d47e <set_on_state>:
	__asm__ volatile(
   2d47e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d482:	f3ef 8211 	mrs	r2, BASEPRI
   2d486:	f383 8812 	msr	BASEPRI_MAX, r3
   2d48a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2d48e:	6803      	ldr	r3, [r0, #0]
   2d490:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2d494:	f043 0302 	orr.w	r3, r3, #2
   2d498:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2d49a:	f382 8811 	msr	BASEPRI, r2
   2d49e:	f3bf 8f6f 	isb	sy
}
   2d4a2:	4770      	bx	lr

0002d4a4 <clkstarted_handle>:
{
   2d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4a6:	4606      	mov	r6, r0
   2d4a8:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2d4aa:	f7ff ffa0 	bl	2d3ee <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2d4ae:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   2d4b0:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   2d4b2:	2300      	movs	r3, #0
   2d4b4:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2d4b8:	f7ff ffe1 	bl	2d47e <set_on_state>
	if (callback) {
   2d4bc:	b11d      	cbz	r5, 2d4c6 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2d4be:	463a      	mov	r2, r7
   2d4c0:	4621      	mov	r1, r4
   2d4c2:	4630      	mov	r0, r6
   2d4c4:	47a8      	blx	r5
}
   2d4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d4c8 <async_start>:
{
   2d4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d4cc:	4606      	mov	r6, r0
   2d4ce:	4690      	mov	r8, r2
   2d4d0:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2d4d2:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2d4d4:	4629      	mov	r1, r5
   2d4d6:	f7ff ff8a 	bl	2d3ee <get_sub_data>
   2d4da:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2d4dc:	9906      	ldr	r1, [sp, #24]
   2d4de:	3008      	adds	r0, #8
   2d4e0:	f7ff ffaf 	bl	2d442 <set_starting_state>
	if (err < 0) {
   2d4e4:	2800      	cmp	r0, #0
   2d4e6:	db09      	blt.n	2d4fc <async_start+0x34>
	subdata->cb = cb;
   2d4e8:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2d4ec:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2d4ee:	4629      	mov	r1, r5
   2d4f0:	4630      	mov	r0, r6
   2d4f2:	f7ff ff83 	bl	2d3fc <get_sub_config>
   2d4f6:	6803      	ldr	r3, [r0, #0]
   2d4f8:	4798      	blx	r3
	return 0;
   2d4fa:	2000      	movs	r0, #0
}
   2d4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d500 <api_start>:
{
   2d500:	b510      	push	{r4, lr}
   2d502:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2d504:	2480      	movs	r4, #128	; 0x80
   2d506:	9400      	str	r4, [sp, #0]
   2d508:	f7ff ffde 	bl	2d4c8 <async_start>
}
   2d50c:	b002      	add	sp, #8
   2d50e:	bd10      	pop	{r4, pc}

0002d510 <onoff_started_callback>:
{
   2d510:	b510      	push	{r4, lr}
   2d512:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2d514:	b2c9      	uxtb	r1, r1
   2d516:	f7ff ff77 	bl	2d408 <get_onoff_manager>
	notify(mgr, 0);
   2d51a:	2100      	movs	r1, #0
   2d51c:	47a0      	blx	r4
}
   2d51e:	bd10      	pop	{r4, pc}

0002d520 <hfclk_start>:
{
   2d520:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2d522:	2001      	movs	r0, #1
   2d524:	f7f2 fd9a 	bl	2005c <nrfx_clock_start>
}
   2d528:	bd08      	pop	{r3, pc}

0002d52a <lfclk_start>:
{
   2d52a:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2d52c:	2000      	movs	r0, #0
   2d52e:	f7f2 fd95 	bl	2005c <nrfx_clock_start>
}
   2d532:	bd08      	pop	{r3, pc}

0002d534 <hfclk_stop>:
{
   2d534:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2d536:	2001      	movs	r0, #1
   2d538:	f7f2 fdb0 	bl	2009c <nrfx_clock_stop>
}
   2d53c:	bd08      	pop	{r3, pc}

0002d53e <lfclk_stop>:
{
   2d53e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2d540:	2000      	movs	r0, #0
   2d542:	f7f2 fdab 	bl	2009c <nrfx_clock_stop>
}
   2d546:	bd08      	pop	{r3, pc}

0002d548 <api_stop>:
{
   2d548:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2d54a:	2280      	movs	r2, #128	; 0x80
   2d54c:	f7ef fd32 	bl	1cfb4 <stop>
}
   2d550:	bd08      	pop	{r3, pc}

0002d552 <k_msleep>:
{
   2d552:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2d554:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2d558:	17c1      	asrs	r1, r0, #31
   2d55a:	03c9      	lsls	r1, r1, #15
   2d55c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2d560:	03c0      	lsls	r0, r0, #15
   2d562:	f240 33e7 	movw	r3, #999	; 0x3e7
   2d566:	18c0      	adds	r0, r0, r3
   2d568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d56c:	f04f 0300 	mov.w	r3, #0
   2d570:	f141 0100 	adc.w	r1, r1, #0
   2d574:	f7d2 fdc4 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2d578:	f7f6 fe6a 	bl	24250 <z_impl_k_sleep>
}
   2d57c:	bd08      	pop	{r3, pc}

0002d57e <blocking_start_callback>:
{
   2d57e:	b508      	push	{r3, lr}
   2d580:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2d582:	f7f5 f8d3 	bl	2272c <z_impl_k_sem_give>
}
   2d586:	bd08      	pop	{r3, pc}

0002d588 <nrf_gpio_pin_present_check>:
    switch (port)
   2d588:	0943      	lsrs	r3, r0, #5
   2d58a:	d00a      	beq.n	2d5a2 <nrf_gpio_pin_present_check+0x1a>
   2d58c:	2b01      	cmp	r3, #1
   2d58e:	d10b      	bne.n	2d5a8 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   2d590:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2d594:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2d598:	fa23 f000 	lsr.w	r0, r3, r0
}
   2d59c:	f000 0001 	and.w	r0, r0, #1
   2d5a0:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   2d5a2:	f04f 33ff 	mov.w	r3, #4294967295
   2d5a6:	e7f5      	b.n	2d594 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   2d5a8:	2300      	movs	r3, #0
   2d5aa:	e7f3      	b.n	2d594 <nrf_gpio_pin_present_check+0xc>

0002d5ac <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2d5ac:	460b      	mov	r3, r1
   2d5ae:	b139      	cbz	r1, 2d5c0 <sys_slist_remove+0x14>
	return node->next;
   2d5b0:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2d5b2:	6019      	str	r1, [r3, #0]
	return list->tail;
   2d5b4:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d5b6:	428a      	cmp	r2, r1
   2d5b8:	d009      	beq.n	2d5ce <sys_slist_remove+0x22>
	parent->next = child;
   2d5ba:	2300      	movs	r3, #0
   2d5bc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d5be:	4770      	bx	lr
	return node->next;
   2d5c0:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2d5c2:	6003      	str	r3, [r0, #0]
	return list->tail;
   2d5c4:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d5c6:	428a      	cmp	r2, r1
   2d5c8:	d1f7      	bne.n	2d5ba <sys_slist_remove+0xe>
	list->tail = node;
   2d5ca:	6043      	str	r3, [r0, #4]
}
   2d5cc:	e7f5      	b.n	2d5ba <sys_slist_remove+0xe>
	list->tail = node;
   2d5ce:	6043      	str	r3, [r0, #4]
}
   2d5d0:	e7f3      	b.n	2d5ba <sys_slist_remove+0xe>

0002d5d2 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d5d2:	b508      	push	{r3, lr}
   2d5d4:	460a      	mov	r2, r1
	return list->head;
   2d5d6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d5d8:	2100      	movs	r1, #0
   2d5da:	e001      	b.n	2d5e0 <sys_slist_find_and_remove+0xe>
   2d5dc:	4619      	mov	r1, r3
   2d5de:	681b      	ldr	r3, [r3, #0]
   2d5e0:	b12b      	cbz	r3, 2d5ee <sys_slist_find_and_remove+0x1c>
   2d5e2:	4293      	cmp	r3, r2
   2d5e4:	d1fa      	bne.n	2d5dc <sys_slist_find_and_remove+0xa>
   2d5e6:	f7ff ffe1 	bl	2d5ac <sys_slist_remove>
   2d5ea:	2001      	movs	r0, #1
   2d5ec:	e000      	b.n	2d5f0 <sys_slist_find_and_remove+0x1e>
   2d5ee:	2000      	movs	r0, #0
   2d5f0:	bd08      	pop	{r3, pc}

0002d5f2 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d5f2:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   2d5f6:	0580      	lsls	r0, r0, #22
   2d5f8:	0d80      	lsrs	r0, r0, #22
   2d5fa:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   2d5fe:	d033      	beq.n	2d668 <get_drive+0x76>
   2d600:	d816      	bhi.n	2d630 <get_drive+0x3e>
   2d602:	2806      	cmp	r0, #6
   2d604:	d02c      	beq.n	2d660 <get_drive+0x6e>
   2d606:	d906      	bls.n	2d616 <get_drive+0x24>
   2d608:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2d60c:	d10d      	bne.n	2d62a <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   2d60e:	2301      	movs	r3, #1
   2d610:	700b      	strb	r3, [r1, #0]
	return 0;
   2d612:	2000      	movs	r0, #0
		break;
   2d614:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d616:	b300      	cbz	r0, 2d65a <get_drive+0x68>
   2d618:	2802      	cmp	r0, #2
   2d61a:	d103      	bne.n	2d624 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   2d61c:	2304      	movs	r3, #4
   2d61e:	700b      	strb	r3, [r1, #0]
	return 0;
   2d620:	2000      	movs	r0, #0
		break;
   2d622:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d624:	f06f 0015 	mvn.w	r0, #21
   2d628:	4770      	bx	lr
   2d62a:	f06f 0015 	mvn.w	r0, #21
   2d62e:	4770      	bx	lr
   2d630:	f240 2302 	movw	r3, #514	; 0x202
   2d634:	4298      	cmp	r0, r3
   2d636:	d01b      	beq.n	2d670 <get_drive+0x7e>
   2d638:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   2d63c:	d103      	bne.n	2d646 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   2d63e:	2303      	movs	r3, #3
   2d640:	700b      	strb	r3, [r1, #0]
	return 0;
   2d642:	2000      	movs	r0, #0
		break;
   2d644:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d646:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2d64a:	d103      	bne.n	2d654 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   2d64c:	2302      	movs	r3, #2
   2d64e:	700b      	strb	r3, [r1, #0]
	return 0;
   2d650:	2000      	movs	r0, #0
		break;
   2d652:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d654:	f06f 0015 	mvn.w	r0, #21
   2d658:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   2d65a:	2000      	movs	r0, #0
   2d65c:	7008      	strb	r0, [r1, #0]
		break;
   2d65e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   2d660:	2306      	movs	r3, #6
   2d662:	700b      	strb	r3, [r1, #0]
	return 0;
   2d664:	2000      	movs	r0, #0
		break;
   2d666:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   2d668:	2307      	movs	r3, #7
   2d66a:	700b      	strb	r3, [r1, #0]
	return 0;
   2d66c:	2000      	movs	r0, #0
		break;
   2d66e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   2d670:	2305      	movs	r3, #5
   2d672:	700b      	strb	r3, [r1, #0]
	return 0;
   2d674:	2000      	movs	r0, #0
}
   2d676:	4770      	bx	lr

0002d678 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   2d678:	f010 0f10 	tst.w	r0, #16
   2d67c:	d104      	bne.n	2d688 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   2d67e:	f010 0f20 	tst.w	r0, #32
   2d682:	d103      	bne.n	2d68c <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   2d684:	2000      	movs	r0, #0
   2d686:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   2d688:	2003      	movs	r0, #3
   2d68a:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   2d68c:	2001      	movs	r0, #1
}
   2d68e:	4770      	bx	lr

0002d690 <gpio_nrfx_port_get_raw>:
	return port->config;
   2d690:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d692:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2d694:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2d698:	600b      	str	r3, [r1, #0]
}
   2d69a:	2000      	movs	r0, #0
   2d69c:	4770      	bx	lr

0002d69e <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   2d69e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d6a0:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2d6a2:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2d6a6:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2d6aa:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2d6ae:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2d6b2:	2000      	movs	r0, #0
   2d6b4:	4770      	bx	lr

0002d6b6 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2d6b6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d6b8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2d6ba:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   2d6be:	2000      	movs	r0, #0
   2d6c0:	4770      	bx	lr

0002d6c2 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   2d6c2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d6c4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2d6c6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2d6ca:	2000      	movs	r0, #0
   2d6cc:	4770      	bx	lr

0002d6ce <gpio_nrfx_port_toggle_bits>:
	return port->config;
   2d6ce:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d6d0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2d6d2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2d6d6:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2d6da:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2d6dc:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2d6e0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2d6e4:	2000      	movs	r0, #0
   2d6e6:	4770      	bx	lr

0002d6e8 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   2d6e8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   2d6ec:	d007      	beq.n	2d6fe <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2d6ee:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   2d6f2:	d00d      	beq.n	2d710 <get_trigger+0x28>
   2d6f4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2d6f8:	d008      	beq.n	2d70c <get_trigger+0x24>
   2d6fa:	2001      	movs	r0, #1
}
   2d6fc:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2d6fe:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2d702:	d001      	beq.n	2d708 <get_trigger+0x20>
   2d704:	2005      	movs	r0, #5
   2d706:	4770      	bx	lr
   2d708:	2004      	movs	r0, #4
   2d70a:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2d70c:	2002      	movs	r0, #2
   2d70e:	4770      	bx	lr
   2d710:	2003      	movs	r0, #3
   2d712:	4770      	bx	lr

0002d714 <gpio_nrfx_manage_callback>:
{
   2d714:	b508      	push	{r3, lr}
	return port->data;
   2d716:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2d718:	3004      	adds	r0, #4
   2d71a:	f7ef fdf1 	bl	1d300 <gpio_manage_callback>
}
   2d71e:	bd08      	pop	{r3, pc}

0002d720 <nrf_gpio_pin_dir_get>:
{
   2d720:	b500      	push	{lr}
   2d722:	b083      	sub	sp, #12
   2d724:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d726:	a801      	add	r0, sp, #4
   2d728:	f7ef fe24 	bl	1d374 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2d72c:	9b01      	ldr	r3, [sp, #4]
   2d72e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2d732:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
   2d736:	f000 0001 	and.w	r0, r0, #1
   2d73a:	b003      	add	sp, #12
   2d73c:	f85d fb04 	ldr.w	pc, [sp], #4

0002d740 <nrfx_gpio_handler>:
{
   2d740:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   2d742:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   2d746:	0940      	lsrs	r0, r0, #5
   2d748:	f7ef fdcc 	bl	1d2e4 <get_dev>
	if (port == NULL) {
   2d74c:	b130      	cbz	r0, 2d75c <nrfx_gpio_handler+0x1c>
   2d74e:	4601      	mov	r1, r0
	return port->data;
   2d750:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   2d752:	2201      	movs	r2, #1
   2d754:	40a2      	lsls	r2, r4
   2d756:	3004      	adds	r0, #4
   2d758:	f7ef fe3e 	bl	1d3d8 <gpio_fire_callbacks>
}
   2d75c:	bd10      	pop	{r4, pc}

0002d75e <qspi_get_zephyr_ret_code>:
	switch (res) {
   2d75e:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   2d762:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   2d766:	280a      	cmp	r0, #10
   2d768:	d80c      	bhi.n	2d784 <qspi_get_zephyr_ret_code+0x26>
   2d76a:	e8df f000 	tbb	[pc, r0]
   2d76e:	0b06      	.short	0x0b06
   2d770:	080e0b0b 	.word	0x080e0b0b
   2d774:	0b0b0b0b 	.word	0x0b0b0b0b
   2d778:	0e          	.byte	0x0e
   2d779:	00          	.byte	0x00
   2d77a:	2000      	movs	r0, #0
   2d77c:	4770      	bx	lr
		return -ECANCELED;
   2d77e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2d782:	4770      	bx	lr
		return -EBUSY;
   2d784:	f06f 000f 	mvn.w	r0, #15
   2d788:	4770      	bx	lr
		return -EINVAL;
   2d78a:	f06f 0015 	mvn.w	r0, #21
}
   2d78e:	4770      	bx	lr

0002d790 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2d790:	b100      	cbz	r0, 2d794 <qspi_handler+0x4>
   2d792:	4770      	bx	lr
{
   2d794:	b508      	push	{r3, lr}
	k_sem_give(&dev_data->sync);
   2d796:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2d79a:	f7f4 ffc7 	bl	2272c <z_impl_k_sem_give>
}
   2d79e:	bd08      	pop	{r3, pc}

0002d7a0 <qspi_trans_lock>:
{
   2d7a0:	b508      	push	{r3, lr}
	struct qspi_nor_data *dev_data = dev->data;
   2d7a2:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   2d7a4:	f04f 32ff 	mov.w	r2, #4294967295
   2d7a8:	f04f 33ff 	mov.w	r3, #4294967295
   2d7ac:	f7f4 fffc 	bl	227a8 <z_impl_k_sem_take>
}
   2d7b0:	bd08      	pop	{r3, pc}

0002d7b2 <qspi_lock>:
{
   2d7b2:	b508      	push	{r3, lr}
	struct qspi_nor_data *dev_data = dev->data;
   2d7b4:	6900      	ldr	r0, [r0, #16]
	k_sem_take(&dev_data->sem, K_FOREVER);
   2d7b6:	3018      	adds	r0, #24
   2d7b8:	f04f 32ff 	mov.w	r2, #4294967295
   2d7bc:	f04f 33ff 	mov.w	r3, #4294967295
   2d7c0:	f7f4 fff2 	bl	227a8 <z_impl_k_sem_take>
}
   2d7c4:	bd08      	pop	{r3, pc}

0002d7c6 <qspi_nor_write_protection_set>:
{
   2d7c6:	b500      	push	{lr}
   2d7c8:	b085      	sub	sp, #20
	struct qspi_cmd cmd = {
   2d7ca:	2300      	movs	r3, #0
   2d7cc:	9301      	str	r3, [sp, #4]
   2d7ce:	9302      	str	r3, [sp, #8]
   2d7d0:	9303      	str	r3, [sp, #12]
   2d7d2:	b151      	cbz	r1, 2d7ea <qspi_nor_write_protection_set+0x24>
   2d7d4:	2304      	movs	r3, #4
   2d7d6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2d7da:	2200      	movs	r2, #0
   2d7dc:	a901      	add	r1, sp, #4
   2d7de:	f7ef ff89 	bl	1d6f4 <qspi_send_cmd>
   2d7e2:	b920      	cbnz	r0, 2d7ee <qspi_nor_write_protection_set+0x28>
}
   2d7e4:	b005      	add	sp, #20
   2d7e6:	f85d fb04 	ldr.w	pc, [sp], #4
	struct qspi_cmd cmd = {
   2d7ea:	2306      	movs	r3, #6
   2d7ec:	e7f3      	b.n	2d7d6 <qspi_nor_write_protection_set+0x10>
		ret = -EIO;
   2d7ee:	f06f 0004 	mvn.w	r0, #4
	return ret;
   2d7f2:	e7f7      	b.n	2d7e4 <qspi_nor_write_protection_set+0x1e>

0002d7f4 <qspi_rdsr>:
	if (sr_num > 2 || sr_num == 0) {
   2d7f4:	1e4b      	subs	r3, r1, #1
   2d7f6:	b2db      	uxtb	r3, r3
   2d7f8:	2b01      	cmp	r3, #1
   2d7fa:	d820      	bhi.n	2d83e <qspi_rdsr+0x4a>
{
   2d7fc:	b500      	push	{lr}
   2d7fe:	b087      	sub	sp, #28
	if (sr_num == 2) {
   2d800:	2902      	cmp	r1, #2
   2d802:	d01a      	beq.n	2d83a <qspi_rdsr+0x46>
	uint8_t opcode = SPI_NOR_CMD_RDSR;
   2d804:	2105      	movs	r1, #5
	uint8_t sr = 0xFF;
   2d806:	23ff      	movs	r3, #255	; 0xff
   2d808:	f88d 3017 	strb.w	r3, [sp, #23]
	const struct qspi_buf sr_buf = {
   2d80c:	f10d 0317 	add.w	r3, sp, #23
   2d810:	9303      	str	r3, [sp, #12]
   2d812:	2301      	movs	r3, #1
   2d814:	9304      	str	r3, [sp, #16]
	struct qspi_cmd cmd = {
   2d816:	2200      	movs	r2, #0
   2d818:	9200      	str	r2, [sp, #0]
   2d81a:	9201      	str	r2, [sp, #4]
   2d81c:	9202      	str	r2, [sp, #8]
   2d81e:	f88d 1000 	strb.w	r1, [sp]
   2d822:	ab03      	add	r3, sp, #12
   2d824:	9302      	str	r3, [sp, #8]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2d826:	4669      	mov	r1, sp
   2d828:	f7ef ff64 	bl	1d6f4 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2d82c:	2800      	cmp	r0, #0
   2d82e:	db01      	blt.n	2d834 <qspi_rdsr+0x40>
   2d830:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
   2d834:	b007      	add	sp, #28
   2d836:	f85d fb04 	ldr.w	pc, [sp], #4
		opcode = SPI_NOR_CMD_RDSR2;
   2d83a:	2135      	movs	r1, #53	; 0x35
   2d83c:	e7e3      	b.n	2d806 <qspi_rdsr+0x12>
		return -EINVAL;
   2d83e:	f06f 0015 	mvn.w	r0, #21
}
   2d842:	4770      	bx	lr

0002d844 <qspi_wait_while_writing>:
{
   2d844:	b510      	push	{r4, lr}
   2d846:	4604      	mov	r4, r0
		ret = qspi_rdsr(dev, 1);
   2d848:	2101      	movs	r1, #1
   2d84a:	4620      	mov	r0, r4
   2d84c:	f7ff ffd2 	bl	2d7f4 <qspi_rdsr>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   2d850:	2800      	cmp	r0, #0
   2d852:	db02      	blt.n	2d85a <qspi_wait_while_writing+0x16>
   2d854:	f010 0f01 	tst.w	r0, #1
   2d858:	d1f6      	bne.n	2d848 <qspi_wait_while_writing+0x4>
}
   2d85a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2d85e:	bd10      	pop	{r4, pc}

0002d860 <k_msleep>:
{
   2d860:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2d862:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2d866:	17c1      	asrs	r1, r0, #31
   2d868:	03c9      	lsls	r1, r1, #15
   2d86a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2d86e:	03c0      	lsls	r0, r0, #15
   2d870:	f240 33e7 	movw	r3, #999	; 0x3e7
   2d874:	18c0      	adds	r0, r0, r3
   2d876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d87a:	f04f 0300 	mov.w	r3, #0
   2d87e:	f141 0100 	adc.w	r1, r1, #0
   2d882:	f7d2 fc3d 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2d886:	f7f6 fce3 	bl	24250 <z_impl_k_sleep>
}
   2d88a:	bd08      	pop	{r3, pc}

0002d88c <qspi_read_jedec_id>:
{
   2d88c:	b530      	push	{r4, r5, lr}
   2d88e:	b087      	sub	sp, #28
   2d890:	4604      	mov	r4, r0
	const struct qspi_buf rx_buf = {
   2d892:	9104      	str	r1, [sp, #16]
   2d894:	2303      	movs	r3, #3
   2d896:	9305      	str	r3, [sp, #20]
	const struct qspi_cmd cmd = {
   2d898:	2300      	movs	r3, #0
   2d89a:	9301      	str	r3, [sp, #4]
   2d89c:	9302      	str	r3, [sp, #8]
   2d89e:	9303      	str	r3, [sp, #12]
   2d8a0:	239f      	movs	r3, #159	; 0x9f
   2d8a2:	f88d 3004 	strb.w	r3, [sp, #4]
   2d8a6:	ab04      	add	r3, sp, #16
   2d8a8:	9303      	str	r3, [sp, #12]
	int ret = qspi_device_init(dev);
   2d8aa:	f7ef feed 	bl	1d688 <qspi_device_init>
	if (ret == 0) {
   2d8ae:	4605      	mov	r5, r0
   2d8b0:	b128      	cbz	r0, 2d8be <qspi_read_jedec_id+0x32>
	qspi_device_uninit(dev);
   2d8b2:	4620      	mov	r0, r4
   2d8b4:	f7ef ffea 	bl	1d88c <qspi_device_uninit>
}
   2d8b8:	4628      	mov	r0, r5
   2d8ba:	b007      	add	sp, #28
   2d8bc:	bd30      	pop	{r4, r5, pc}
		ret = qspi_send_cmd(dev, &cmd, false);
   2d8be:	2200      	movs	r2, #0
   2d8c0:	a901      	add	r1, sp, #4
   2d8c2:	4620      	mov	r0, r4
   2d8c4:	f7ef ff16 	bl	1d6f4 <qspi_send_cmd>
   2d8c8:	4605      	mov	r5, r0
   2d8ca:	e7f2      	b.n	2d8b2 <qspi_read_jedec_id+0x26>

0002d8cc <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   2d8cc:	b510      	push	{r4, lr}
   2d8ce:	b082      	sub	sp, #8
   2d8d0:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2d8d2:	aa01      	add	r2, sp, #4
   2d8d4:	f000 fb87 	bl	2dfe6 <pinctrl_lookup_state>
	if (ret < 0) {
   2d8d8:	2800      	cmp	r0, #0
   2d8da:	db05      	blt.n	2d8e8 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2d8dc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2d8de:	6822      	ldr	r2, [r4, #0]
   2d8e0:	7919      	ldrb	r1, [r3, #4]
   2d8e2:	6818      	ldr	r0, [r3, #0]
   2d8e4:	f7f1 f91c 	bl	1eb20 <pinctrl_configure_pins>
}
   2d8e8:	b002      	add	sp, #8
   2d8ea:	bd10      	pop	{r4, pc}

0002d8ec <qspi_nor_configure>:
{
   2d8ec:	b510      	push	{r4, lr}
   2d8ee:	4604      	mov	r4, r0
	int ret = qspi_nrfx_configure(dev);
   2d8f0:	f7ef ff7e 	bl	1d7f0 <qspi_nrfx_configure>
	if (ret != 0) {
   2d8f4:	b100      	cbz	r0, 2d8f8 <qspi_nor_configure+0xc>
}
   2d8f6:	bd10      	pop	{r4, pc}
	qspi_device_uninit(dev);
   2d8f8:	4620      	mov	r0, r4
   2d8fa:	f7ef ffc7 	bl	1d88c <qspi_device_uninit>
	if (qspi_nor_read_id(dev) != 0) {
   2d8fe:	4620      	mov	r0, r4
   2d900:	f7f0 fa30 	bl	1dd64 <qspi_nor_read_id>
   2d904:	2800      	cmp	r0, #0
   2d906:	d0f6      	beq.n	2d8f6 <qspi_nor_configure+0xa>
		return -ENODEV;
   2d908:	f06f 0012 	mvn.w	r0, #18
   2d90c:	e7f3      	b.n	2d8f6 <qspi_nor_configure+0xa>

0002d90e <qspi_nor_init>:
{
   2d90e:	b510      	push	{r4, lr}
   2d910:	4604      	mov	r4, r0
	const struct qspi_nor_config *dev_config = dev->config;
   2d912:	6843      	ldr	r3, [r0, #4]
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   2d914:	2100      	movs	r1, #0
   2d916:	6a18      	ldr	r0, [r3, #32]
   2d918:	f7ff ffd8 	bl	2d8cc <pinctrl_apply_state>
	if (ret < 0) {
   2d91c:	2800      	cmp	r0, #0
   2d91e:	db07      	blt.n	2d930 <qspi_nor_init+0x22>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   2d920:	2200      	movs	r2, #0
   2d922:	2101      	movs	r1, #1
   2d924:	2029      	movs	r0, #41	; 0x29
   2d926:	f7e5 fbd7 	bl	130d8 <z_arm_irq_priority_set>
	return qspi_nor_configure(dev);
   2d92a:	4620      	mov	r0, r4
   2d92c:	f7ff ffde 	bl	2d8ec <qspi_nor_configure>
}
   2d930:	bd10      	pop	{r4, pc}

0002d932 <nrf52_errata_242>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d932:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d936:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2d93a:	2b08      	cmp	r3, #8
   2d93c:	d001      	beq.n	2d942 <nrf52_errata_242+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2d93e:	2000      	movs	r0, #0
   2d940:	4770      	bx	lr
                        return true;
   2d942:	2001      	movs	r0, #1
    #endif
}
   2d944:	4770      	bx	lr

0002d946 <shift_write_context>:
	w_ctx->flash_addr += shift;
   2d946:	684b      	ldr	r3, [r1, #4]
   2d948:	4403      	add	r3, r0
   2d94a:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   2d94c:	680b      	ldr	r3, [r1, #0]
   2d94e:	4403      	add	r3, r0
   2d950:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   2d952:	688b      	ldr	r3, [r1, #8]
   2d954:	1a1b      	subs	r3, r3, r0
   2d956:	608b      	str	r3, [r1, #8]
}
   2d958:	4770      	bx	lr

0002d95a <is_regular_addr_valid>:
{
   2d95a:	b538      	push	{r3, r4, r5, lr}
   2d95c:	4604      	mov	r4, r0
   2d95e:	460d      	mov	r5, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2d960:	f001 fa3e 	bl	2ede0 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2d964:	2c00      	cmp	r4, #0
   2d966:	db06      	blt.n	2d976 <is_regular_addr_valid+0x1c>
	return (addr >= boundary_start &&
   2d968:	42a0      	cmp	r0, r4
   2d96a:	d906      	bls.n	2d97a <is_regular_addr_valid+0x20>
			(len <= (boundary_start + boundary_size - addr)));
   2d96c:	1b00      	subs	r0, r0, r4
			(addr < (boundary_start + boundary_size)) &&
   2d96e:	4285      	cmp	r5, r0
   2d970:	d905      	bls.n	2d97e <is_regular_addr_valid+0x24>
   2d972:	2000      	movs	r0, #0
   2d974:	e000      	b.n	2d978 <is_regular_addr_valid+0x1e>
   2d976:	2000      	movs	r0, #0
}
   2d978:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2d97a:	2000      	movs	r0, #0
   2d97c:	e7fc      	b.n	2d978 <is_regular_addr_valid+0x1e>
   2d97e:	2001      	movs	r0, #1
   2d980:	e7fa      	b.n	2d978 <is_regular_addr_valid+0x1e>

0002d982 <erase_op>:
{
   2d982:	b570      	push	{r4, r5, r6, lr}
   2d984:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2d986:	f001 fa2f 	bl	2ede8 <nrfx_nvmc_flash_page_size_get>
   2d98a:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
   2d98c:	7b23      	ldrb	r3, [r4, #12]
   2d98e:	b90b      	cbnz	r3, 2d994 <erase_op+0x12>
{
   2d990:	2500      	movs	r5, #0
   2d992:	e004      	b.n	2d99e <erase_op+0x1c>
		nrf_flash_sync_get_timestamp_begin();
   2d994:	f001 f815 	bl	2e9c2 <nrf_flash_sync_get_timestamp_begin>
   2d998:	e7fa      	b.n	2d990 <erase_op+0xe>
	} while (e_ctx->len > 0);
   2d99a:	68a3      	ldr	r3, [r4, #8]
   2d99c:	b1b3      	cbz	r3, 2d9cc <erase_op+0x4a>
		if (SUSPEND_POFWARN()) {
   2d99e:	f7f0 fa79 	bl	1de94 <suspend_pofwarn>
   2d9a2:	b9c0      	cbnz	r0, 2d9d6 <erase_op+0x54>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2d9a4:	6860      	ldr	r0, [r4, #4]
   2d9a6:	f7f3 fa85 	bl	20eb4 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   2d9aa:	68a3      	ldr	r3, [r4, #8]
   2d9ac:	1b9b      	subs	r3, r3, r6
   2d9ae:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2d9b0:	6863      	ldr	r3, [r4, #4]
   2d9b2:	4433      	add	r3, r6
   2d9b4:	6063      	str	r3, [r4, #4]
		RESUME_POFWARN();
   2d9b6:	f7f0 fa99 	bl	1deec <restore_pofwarn>
		i++;
   2d9ba:	3501      	adds	r5, #1
		if (e_ctx->enable_time_limit) {
   2d9bc:	7b23      	ldrb	r3, [r4, #12]
   2d9be:	2b00      	cmp	r3, #0
   2d9c0:	d0eb      	beq.n	2d99a <erase_op+0x18>
			if (nrf_flash_sync_check_time_limit(i)) {
   2d9c2:	4628      	mov	r0, r5
   2d9c4:	f7f2 fce4 	bl	20390 <nrf_flash_sync_check_time_limit>
   2d9c8:	2800      	cmp	r0, #0
   2d9ca:	d0e6      	beq.n	2d99a <erase_op+0x18>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2d9cc:	68a0      	ldr	r0, [r4, #8]
   2d9ce:	3800      	subs	r0, #0
   2d9d0:	bf18      	it	ne
   2d9d2:	2001      	movne	r0, #1
}
   2d9d4:	bd70      	pop	{r4, r5, r6, pc}
			return -ECANCELED;
   2d9d6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2d9da:	e7fb      	b.n	2d9d4 <erase_op+0x52>

0002d9dc <erase>:
{
   2d9dc:	b500      	push	{lr}
   2d9de:	b085      	sub	sp, #20
	struct flash_context context = {
   2d9e0:	2300      	movs	r3, #0
   2d9e2:	9300      	str	r3, [sp, #0]
   2d9e4:	9301      	str	r3, [sp, #4]
   2d9e6:	9302      	str	r3, [sp, #8]
   2d9e8:	9303      	str	r3, [sp, #12]
   2d9ea:	9001      	str	r0, [sp, #4]
   2d9ec:	9102      	str	r1, [sp, #8]
	return	erase_op(&context);
   2d9ee:	4668      	mov	r0, sp
   2d9f0:	f7ff ffc7 	bl	2d982 <erase_op>
}
   2d9f4:	b005      	add	sp, #20
   2d9f6:	f85d fb04 	ldr.w	pc, [sp], #4

0002d9fa <write_op>:
{
   2d9fa:	b538      	push	{r3, r4, r5, lr}
   2d9fc:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   2d9fe:	7b03      	ldrb	r3, [r0, #12]
   2da00:	b9f3      	cbnz	r3, 2da40 <write_op+0x46>
{
   2da02:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   2da04:	68a3      	ldr	r3, [r4, #8]
   2da06:	2b03      	cmp	r3, #3
   2da08:	d91d      	bls.n	2da46 <write_op+0x4c>
		if (SUSPEND_POFWARN()) {
   2da0a:	f7f0 fa43 	bl	1de94 <suspend_pofwarn>
   2da0e:	b9f0      	cbnz	r0, 2da4e <write_op+0x54>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   2da10:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   2da12:	6819      	ldr	r1, [r3, #0]
   2da14:	6860      	ldr	r0, [r4, #4]
   2da16:	f7f3 fa7f 	bl	20f18 <nrfx_nvmc_word_write>
		RESUME_POFWARN();
   2da1a:	f7f0 fa67 	bl	1deec <restore_pofwarn>
		shift_write_context(sizeof(uint32_t), w_ctx);
   2da1e:	4621      	mov	r1, r4
   2da20:	2004      	movs	r0, #4
   2da22:	f7ff ff90 	bl	2d946 <shift_write_context>
		i++;
   2da26:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   2da28:	7b23      	ldrb	r3, [r4, #12]
   2da2a:	2b00      	cmp	r3, #0
   2da2c:	d0ea      	beq.n	2da04 <write_op+0xa>
			if (nrf_flash_sync_check_time_limit(i)) {
   2da2e:	4628      	mov	r0, r5
   2da30:	f7f2 fcae 	bl	20390 <nrf_flash_sync_check_time_limit>
   2da34:	2800      	cmp	r0, #0
   2da36:	d0e5      	beq.n	2da04 <write_op+0xa>
				nvmc_wait_ready();
   2da38:	f7f0 f9be 	bl	1ddb8 <nvmc_wait_ready>
				return FLASH_OP_ONGOING;
   2da3c:	2001      	movs	r0, #1
   2da3e:	e005      	b.n	2da4c <write_op+0x52>
		nrf_flash_sync_get_timestamp_begin();
   2da40:	f000 ffbf 	bl	2e9c2 <nrf_flash_sync_get_timestamp_begin>
   2da44:	e7dd      	b.n	2da02 <write_op+0x8>
	nvmc_wait_ready();
   2da46:	f7f0 f9b7 	bl	1ddb8 <nvmc_wait_ready>
	return FLASH_OP_DONE;
   2da4a:	2000      	movs	r0, #0
}
   2da4c:	bd38      	pop	{r3, r4, r5, pc}
			return -ECANCELED;
   2da4e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2da52:	e7fb      	b.n	2da4c <write_op+0x52>

0002da54 <write>:
{
   2da54:	b500      	push	{lr}
   2da56:	b085      	sub	sp, #20
	struct flash_context context = {
   2da58:	9100      	str	r1, [sp, #0]
   2da5a:	9001      	str	r0, [sp, #4]
   2da5c:	9202      	str	r2, [sp, #8]
   2da5e:	2300      	movs	r3, #0
   2da60:	f88d 300c 	strb.w	r3, [sp, #12]
	return write_op(&context);
   2da64:	4668      	mov	r0, sp
   2da66:	f7ff ffc8 	bl	2d9fa <write_op>
}
   2da6a:	b005      	add	sp, #20
   2da6c:	f85d fb04 	ldr.w	pc, [sp], #4

0002da70 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2da70:	b570      	push	{r4, r5, r6, lr}
   2da72:	b082      	sub	sp, #8
   2da74:	460d      	mov	r5, r1
   2da76:	4616      	mov	r6, r2
   2da78:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   2da7a:	6882      	ldr	r2, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2da7c:	2300      	movs	r3, #0
   2da7e:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2da80:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   2da82:	6913      	ldr	r3, [r2, #16]
   2da84:	466a      	mov	r2, sp
   2da86:	a901      	add	r1, sp, #4
   2da88:	4798      	blx	r3

	while (layout_size--) {
   2da8a:	e014      	b.n	2dab6 <flash_get_page_info+0x46>
		info->size = layout->pages_size;
		if (offs == 0) {
			index_jmp = index - info->index;
		} else {
			index_jmp = (offs - info->start_offset) / info->size;
   2da8c:	6820      	ldr	r0, [r4, #0]
   2da8e:	1a28      	subs	r0, r5, r0
   2da90:	fbb0 f0f2 	udiv	r0, r0, r2
		}

		index_jmp = MIN(index_jmp, layout->pages_count);
   2da94:	681b      	ldr	r3, [r3, #0]
   2da96:	4298      	cmp	r0, r3
   2da98:	bf28      	it	cs
   2da9a:	4618      	movcs	r0, r3
		info->start_offset += (index_jmp * info->size);
   2da9c:	6823      	ldr	r3, [r4, #0]
   2da9e:	fb00 3302 	mla	r3, r0, r2, r3
   2daa2:	6023      	str	r3, [r4, #0]
		info->index += index_jmp;
   2daa4:	68a3      	ldr	r3, [r4, #8]
   2daa6:	4403      	add	r3, r0
   2daa8:	60a3      	str	r3, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2daaa:	9b01      	ldr	r3, [sp, #4]
   2daac:	681a      	ldr	r2, [r3, #0]
   2daae:	4282      	cmp	r2, r0
   2dab0:	d811      	bhi.n	2dad6 <flash_get_page_info+0x66>
			return 0;
		}

		layout++;
   2dab2:	3308      	adds	r3, #8
   2dab4:	9301      	str	r3, [sp, #4]
	while (layout_size--) {
   2dab6:	9b00      	ldr	r3, [sp, #0]
   2dab8:	1e5a      	subs	r2, r3, #1
   2daba:	9200      	str	r2, [sp, #0]
   2dabc:	b13b      	cbz	r3, 2dace <flash_get_page_info+0x5e>
		info->size = layout->pages_size;
   2dabe:	9b01      	ldr	r3, [sp, #4]
   2dac0:	685a      	ldr	r2, [r3, #4]
   2dac2:	6062      	str	r2, [r4, #4]
		if (offs == 0) {
   2dac4:	2d00      	cmp	r5, #0
   2dac6:	d1e1      	bne.n	2da8c <flash_get_page_info+0x1c>
			index_jmp = index - info->index;
   2dac8:	68a0      	ldr	r0, [r4, #8]
   2daca:	1a30      	subs	r0, r6, r0
   2dacc:	e7e2      	b.n	2da94 <flash_get_page_info+0x24>
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2dace:	f06f 0015 	mvn.w	r0, #21
}
   2dad2:	b002      	add	sp, #8
   2dad4:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
   2dad6:	2000      	movs	r0, #0
   2dad8:	e7fb      	b.n	2dad2 <flash_get_page_info+0x62>

0002dada <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2dada:	b508      	push	{r3, lr}
   2dadc:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2dade:	2200      	movs	r2, #0
   2dae0:	f7ff ffc6 	bl	2da70 <flash_get_page_info>
}
   2dae4:	bd08      	pop	{r3, pc}

0002dae6 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2dae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2daea:	b086      	sub	sp, #24
   2daec:	4689      	mov	r9, r1
   2daee:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
   2daf0:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2daf2:	691b      	ldr	r3, [r3, #16]
   2daf4:	aa01      	add	r2, sp, #4
   2daf6:	a905      	add	r1, sp, #20
   2daf8:	4798      	blx	r3
	off_t off = 0;
   2dafa:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2dafc:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
   2dafe:	46a2      	mov	sl, r4
   2db00:	9b01      	ldr	r3, [sp, #4]
   2db02:	4553      	cmp	r3, sl
   2db04:	d914      	bls.n	2db30 <flash_page_foreach+0x4a>
		const struct flash_pages_layout *l = &layout[block];
   2db06:	9f05      	ldr	r7, [sp, #20]
   2db08:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
   2db0c:	687b      	ldr	r3, [r7, #4]
   2db0e:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
   2db10:	2500      	movs	r5, #0
   2db12:	e003      	b.n	2db1c <flash_page_foreach+0x36>

			if (!cb(&page_info, data)) {
				return;
			}

			off += page_info.size;
   2db14:	9b03      	ldr	r3, [sp, #12]
   2db16:	441c      	add	r4, r3
			page++;
   2db18:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
   2db1a:	3501      	adds	r5, #1
   2db1c:	683b      	ldr	r3, [r7, #0]
   2db1e:	42ab      	cmp	r3, r5
   2db20:	d909      	bls.n	2db36 <flash_page_foreach+0x50>
			page_info.start_offset = off;
   2db22:	9402      	str	r4, [sp, #8]
			page_info.index = page;
   2db24:	9604      	str	r6, [sp, #16]
			if (!cb(&page_info, data)) {
   2db26:	4641      	mov	r1, r8
   2db28:	a802      	add	r0, sp, #8
   2db2a:	47c8      	blx	r9
   2db2c:	2800      	cmp	r0, #0
   2db2e:	d1f1      	bne.n	2db14 <flash_page_foreach+0x2e>
		}
	}
}
   2db30:	b006      	add	sp, #24
   2db32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (block = 0; block < num_blocks; block++) {
   2db36:	f10a 0a01 	add.w	sl, sl, #1
   2db3a:	e7e1      	b.n	2db00 <flash_page_foreach+0x1a>

0002db3c <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   2db3c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2db3e:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2db40:	f04f 0140 	mov.w	r1, #64	; 0x40
   2db44:	f3ef 8311 	mrs	r3, BASEPRI
   2db48:	f381 8812 	msr	BASEPRI_MAX, r1
   2db4c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2db50:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2db54:	b131      	cbz	r1, 2db64 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2db56:	2100      	movs	r1, #0
   2db58:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   2db5c:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2db60:	2101      	movs	r1, #1
   2db62:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   2db64:	f383 8811 	msr	BASEPRI, r3
   2db68:	f3bf 8f6f 	isb	sy
}
   2db6c:	4770      	bx	lr

0002db6e <uarte_nrfx_isr_int>:
{
   2db6e:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2db70:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   2db72:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   2db74:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2db78:	f413 7f80 	tst.w	r3, #256	; 0x100
   2db7c:	d002      	beq.n	2db84 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2db7e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   2db82:	b9d3      	cbnz	r3, 2dbba <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2db84:	686b      	ldr	r3, [r5, #4]
   2db86:	f013 0f10 	tst.w	r3, #16
   2db8a:	d015      	beq.n	2dbb8 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   2db8c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2db90:	f3ef 8311 	mrs	r3, BASEPRI
   2db94:	f382 8812 	msr	BASEPRI_MAX, r2
   2db98:	f3bf 8f6f 	isb	sy
   2db9c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2dba0:	b112      	cbz	r2, 2dba8 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2dba2:	2200      	movs	r2, #0
   2dba4:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2dba8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2dbac:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   2dbb0:	f383 8811 	msr	BASEPRI, r3
   2dbb4:	f3bf 8f6f 	isb	sy
}
   2dbb8:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   2dbba:	f7ff ffbf 	bl	2db3c <endtx_isr>
   2dbbe:	e7e1      	b.n	2db84 <uarte_nrfx_isr_int+0x16>

0002dbc0 <uarte_nrfx_configure>:
{
   2dbc0:	b570      	push	{r4, r5, r6, lr}
   2dbc2:	b082      	sub	sp, #8
   2dbc4:	4606      	mov	r6, r0
   2dbc6:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   2dbc8:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
   2dbca:	794b      	ldrb	r3, [r1, #5]
   2dbcc:	2b01      	cmp	r3, #1
   2dbce:	d006      	beq.n	2dbde <uarte_nrfx_configure+0x1e>
   2dbd0:	2b03      	cmp	r3, #3
   2dbd2:	d011      	beq.n	2dbf8 <uarte_nrfx_configure+0x38>
   2dbd4:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   2dbd8:	4618      	mov	r0, r3
   2dbda:	b002      	add	sp, #8
   2dbdc:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2dbde:	2300      	movs	r3, #0
   2dbe0:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2dbe4:	79a3      	ldrb	r3, [r4, #6]
   2dbe6:	2b03      	cmp	r3, #3
   2dbe8:	d137      	bne.n	2dc5a <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   2dbea:	79e3      	ldrb	r3, [r4, #7]
   2dbec:	b143      	cbz	r3, 2dc00 <uarte_nrfx_configure+0x40>
   2dbee:	2b01      	cmp	r3, #1
   2dbf0:	d010      	beq.n	2dc14 <uarte_nrfx_configure+0x54>
   2dbf2:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2dbf6:	e7ef      	b.n	2dbd8 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2dbf8:	2310      	movs	r3, #16
   2dbfa:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   2dbfe:	e7f1      	b.n	2dbe4 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   2dc00:	2300      	movs	r3, #0
   2dc02:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   2dc06:	7923      	ldrb	r3, [r4, #4]
   2dc08:	b143      	cbz	r3, 2dc1c <uarte_nrfx_configure+0x5c>
   2dc0a:	2b02      	cmp	r3, #2
   2dc0c:	d021      	beq.n	2dc52 <uarte_nrfx_configure+0x92>
   2dc0e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2dc12:	e7e1      	b.n	2dbd8 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   2dc14:	2301      	movs	r3, #1
   2dc16:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   2dc1a:	e7f4      	b.n	2dc06 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2dc1c:	2300      	movs	r3, #0
   2dc1e:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2dc22:	6821      	ldr	r1, [r4, #0]
   2dc24:	4630      	mov	r0, r6
   2dc26:	f7f0 fa3b 	bl	1e0a0 <baudrate_set>
   2dc2a:	4603      	mov	r3, r0
   2dc2c:	b9c0      	cbnz	r0, 2dc60 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
   2dc2e:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   2dc30:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2dc32:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   2dc36:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   2dc3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2dc3e:	4331      	orrs	r1, r6
   2dc40:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2dc42:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
   2dc46:	3504      	adds	r5, #4
   2dc48:	e894 0003 	ldmia.w	r4, {r0, r1}
   2dc4c:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   2dc50:	e7c2      	b.n	2dbd8 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2dc52:	230e      	movs	r3, #14
   2dc54:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   2dc58:	e7e3      	b.n	2dc22 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
   2dc5a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2dc5e:	e7bb      	b.n	2dbd8 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   2dc60:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2dc64:	e7b8      	b.n	2dbd8 <uarte_nrfx_configure+0x18>

0002dc66 <uarte_nrfx_config_get>:
{
   2dc66:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   2dc68:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   2dc6a:	3304      	adds	r3, #4
   2dc6c:	e893 0003 	ldmia.w	r3, {r0, r1}
   2dc70:	e882 0003 	stmia.w	r2, {r0, r1}
}
   2dc74:	2000      	movs	r0, #0
   2dc76:	4770      	bx	lr

0002dc78 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   2dc78:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2dc7a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2dc7c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2dc80:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2dc84:	4770      	bx	lr

0002dc86 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   2dc86:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2dc88:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2dc8a:	685b      	ldr	r3, [r3, #4]
   2dc8c:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dc90:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2dc94:	b929      	cbnz	r1, 2dca2 <is_tx_ready+0x1c>
   2dc96:	b933      	cbnz	r3, 2dca6 <is_tx_ready+0x20>
   2dc98:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2dc9c:	b92b      	cbnz	r3, 2dcaa <is_tx_ready+0x24>
   2dc9e:	2000      	movs	r0, #0
   2dca0:	4770      	bx	lr
   2dca2:	2001      	movs	r0, #1
   2dca4:	4770      	bx	lr
   2dca6:	2000      	movs	r0, #0
   2dca8:	4770      	bx	lr
   2dcaa:	2001      	movs	r0, #1
}
   2dcac:	4770      	bx	lr

0002dcae <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   2dcae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2dcb0:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2dcb2:	2208      	movs	r2, #8
   2dcb4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2dcb8:	4770      	bx	lr

0002dcba <tx_start>:
{
   2dcba:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2dcbc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2dcbe:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2dcc0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2dcc4:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dcc8:	2200      	movs	r2, #0
   2dcca:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   2dcce:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   2dcd2:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   2dcd6:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2dcda:	685b      	ldr	r3, [r3, #4]
   2dcdc:	f013 0f10 	tst.w	r3, #16
   2dce0:	d102      	bne.n	2dce8 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dce2:	2301      	movs	r3, #1
   2dce4:	60a3      	str	r3, [r4, #8]
}
   2dce6:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2dce8:	2101      	movs	r1, #1
   2dcea:	f7ff ffe0 	bl	2dcae <uarte_enable>
    p_reg->INTENSET = mask;
   2dcee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2dcf2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2dcf6:	e7f4      	b.n	2dce2 <tx_start+0x28>

0002dcf8 <uarte_nrfx_poll_in>:
{
   2dcf8:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   2dcfa:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   2dcfc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2dcfe:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dd00:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2dd04:	b15a      	cbz	r2, 2dd1e <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   2dd06:	6962      	ldr	r2, [r4, #20]
   2dd08:	7812      	ldrb	r2, [r2, #0]
   2dd0a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dd0c:	2000      	movs	r0, #0
   2dd0e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2dd12:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dd16:	2201      	movs	r2, #1
   2dd18:	601a      	str	r2, [r3, #0]
}
   2dd1a:	bc10      	pop	{r4}
   2dd1c:	4770      	bx	lr
		return -1;
   2dd1e:	f04f 30ff 	mov.w	r0, #4294967295
   2dd22:	e7fa      	b.n	2dd1a <uarte_nrfx_poll_in+0x22>

0002dd24 <k_msleep>:
{
   2dd24:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2dd26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2dd2a:	17c1      	asrs	r1, r0, #31
   2dd2c:	03c9      	lsls	r1, r1, #15
   2dd2e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2dd32:	03c0      	lsls	r0, r0, #15
   2dd34:	f240 33e7 	movw	r3, #999	; 0x3e7
   2dd38:	18c0      	adds	r0, r0, r3
   2dd3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2dd3e:	f04f 0300 	mov.w	r3, #0
   2dd42:	f141 0100 	adc.w	r1, r1, #0
   2dd46:	f7d2 f9db 	bl	100 <__aeabi_uldivmod>
   2dd4a:	f7f6 fa81 	bl	24250 <z_impl_k_sleep>
}
   2dd4e:	bd08      	pop	{r3, pc}

0002dd50 <wait_tx_ready>:
{
   2dd50:	b570      	push	{r4, r5, r6, lr}
   2dd52:	4606      	mov	r6, r0
   2dd54:	e013      	b.n	2dd7e <wait_tx_ready+0x2e>
		if (res) {
   2dd56:	b17d      	cbz	r5, 2dd78 <wait_tx_ready+0x28>
	__asm__ volatile(
   2dd58:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dd5c:	f3ef 8411 	mrs	r4, BASEPRI
   2dd60:	f383 8812 	msr	BASEPRI_MAX, r3
   2dd64:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2dd68:	4630      	mov	r0, r6
   2dd6a:	f7ff ff8c 	bl	2dc86 <is_tx_ready>
   2dd6e:	b998      	cbnz	r0, 2dd98 <wait_tx_ready+0x48>
	__asm__ volatile(
   2dd70:	f384 8811 	msr	BASEPRI, r4
   2dd74:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   2dd78:	2001      	movs	r0, #1
   2dd7a:	f7ff ffd3 	bl	2dd24 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2dd7e:	2464      	movs	r4, #100	; 0x64
   2dd80:	4630      	mov	r0, r6
   2dd82:	f7ff ff80 	bl	2dc86 <is_tx_ready>
   2dd86:	4605      	mov	r5, r0
   2dd88:	2800      	cmp	r0, #0
   2dd8a:	d1e4      	bne.n	2dd56 <wait_tx_ready+0x6>
   2dd8c:	2001      	movs	r0, #1
   2dd8e:	f000 feb1 	bl	2eaf4 <nrfx_busy_wait>
   2dd92:	3c01      	subs	r4, #1
   2dd94:	d1f4      	bne.n	2dd80 <wait_tx_ready+0x30>
   2dd96:	e7de      	b.n	2dd56 <wait_tx_ready+0x6>
}
   2dd98:	4620      	mov	r0, r4
   2dd9a:	bd70      	pop	{r4, r5, r6, pc}

0002dd9c <pinctrl_apply_state>:
{
   2dd9c:	b510      	push	{r4, lr}
   2dd9e:	b082      	sub	sp, #8
   2dda0:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   2dda2:	aa01      	add	r2, sp, #4
   2dda4:	f000 f91f 	bl	2dfe6 <pinctrl_lookup_state>
	if (ret < 0) {
   2dda8:	2800      	cmp	r0, #0
   2ddaa:	db05      	blt.n	2ddb8 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   2ddac:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2ddae:	6822      	ldr	r2, [r4, #0]
   2ddb0:	7919      	ldrb	r1, [r3, #4]
   2ddb2:	6818      	ldr	r0, [r3, #0]
   2ddb4:	f7f0 feb4 	bl	1eb20 <pinctrl_configure_pins>
}
   2ddb8:	b002      	add	sp, #8
   2ddba:	bd10      	pop	{r4, pc}

0002ddbc <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   2ddbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ddc0:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   2ddc2:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   2ddc4:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   2ddc6:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2ddca:	2100      	movs	r1, #0
   2ddcc:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   2ddd0:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2ddd4:	68f8      	ldr	r0, [r7, #12]
   2ddd6:	f7ff ffe1 	bl	2dd9c <pinctrl_apply_state>
	if (err < 0) {
   2ddda:	1e05      	subs	r5, r0, #0
   2dddc:	db35      	blt.n	2de4a <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   2ddde:	f108 0104 	add.w	r1, r8, #4
   2dde2:	4620      	mov	r0, r4
   2dde4:	f7ff feec 	bl	2dbc0 <uarte_nrfx_configure>
	if (err) {
   2dde8:	4605      	mov	r5, r0
   2ddea:	bb70      	cbnz	r0, 2de4a <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2ddec:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2ddee:	f013 0f02 	tst.w	r3, #2
   2ddf2:	d12d      	bne.n	2de50 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2ddf4:	2308      	movs	r3, #8
   2ddf6:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   2ddfa:	7a3b      	ldrb	r3, [r7, #8]
   2ddfc:	b95b      	cbnz	r3, 2de16 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ddfe:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   2de02:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   2de06:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2de0a:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2de0e:	2301      	movs	r3, #1
   2de10:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2de14:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2de16:	687b      	ldr	r3, [r7, #4]
   2de18:	f013 0f02 	tst.w	r3, #2
   2de1c:	d103      	bne.n	2de26 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   2de1e:	f44f 7380 	mov.w	r3, #256	; 0x100
   2de22:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2de26:	687b      	ldr	r3, [r7, #4]
   2de28:	f013 0f10 	tst.w	r3, #16
   2de2c:	d003      	beq.n	2de36 <uarte_instance_init+0x7a>
   2de2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2de32:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   2de36:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2de3a:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2de3e:	2300      	movs	r3, #0
   2de40:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2de44:	2301      	movs	r3, #1
   2de46:	60b3      	str	r3, [r6, #8]
   2de48:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2de4a:	4628      	mov	r0, r5
   2de4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   2de50:	4641      	mov	r1, r8
   2de52:	4630      	mov	r0, r6
   2de54:	f7f0 f9fa 	bl	1e24c <endtx_stoptx_ppi_init>
		if (err < 0) {
   2de58:	2800      	cmp	r0, #0
   2de5a:	dacb      	bge.n	2ddf4 <uarte_instance_init+0x38>
			return err;
   2de5c:	4605      	mov	r5, r0
   2de5e:	e7f4      	b.n	2de4a <uarte_instance_init+0x8e>

0002de60 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2de60:	b510      	push	{r4, lr}
   2de62:	4604      	mov	r4, r0
   2de64:	2200      	movs	r2, #0
   2de66:	2101      	movs	r1, #1
   2de68:	2002      	movs	r0, #2
   2de6a:	f7e5 f935 	bl	130d8 <z_arm_irq_priority_set>
   2de6e:	2002      	movs	r0, #2
   2de70:	f7fb fe1c 	bl	29aac <arch_irq_enable>
   2de74:	2100      	movs	r1, #0
   2de76:	4620      	mov	r0, r4
   2de78:	f7ff ffa0 	bl	2ddbc <uarte_instance_init>
   2de7c:	bd10      	pop	{r4, pc}

0002de7e <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2de7e:	b510      	push	{r4, lr}
   2de80:	4604      	mov	r4, r0
   2de82:	2200      	movs	r2, #0
   2de84:	2101      	movs	r1, #1
   2de86:	2028      	movs	r0, #40	; 0x28
   2de88:	f7e5 f926 	bl	130d8 <z_arm_irq_priority_set>
   2de8c:	2028      	movs	r0, #40	; 0x28
   2de8e:	f7fb fe0d 	bl	29aac <arch_irq_enable>
   2de92:	2100      	movs	r1, #0
   2de94:	4620      	mov	r0, r4
   2de96:	f7ff ff91 	bl	2ddbc <uarte_instance_init>
   2de9a:	bd10      	pop	{r4, pc}

0002de9c <rng_pool_put>:
	uint8_t first = rngp->first_read;
   2de9c:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   2de9e:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2dea0:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   2dea4:	1a9a      	subs	r2, r3, r2
   2dea6:	ea3c 0202 	bics.w	r2, ip, r2
   2deaa:	d007      	beq.n	2debc <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   2deac:	18c2      	adds	r2, r0, r3
   2deae:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   2deb0:	3301      	adds	r3, #1
   2deb2:	ea03 030c 	and.w	r3, r3, ip
   2deb6:	7083      	strb	r3, [r0, #2]
	return 0;
   2deb8:	2000      	movs	r0, #0
   2deba:	4770      	bx	lr
		return -ENOBUFS;
   2debc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   2dec0:	4770      	bx	lr

0002dec2 <rng_pool_init>:
	rngp->first_alloc = 0U;
   2dec2:	2300      	movs	r3, #0
   2dec4:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   2dec6:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   2dec8:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   2deca:	3901      	subs	r1, #1
   2decc:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2dece:	7102      	strb	r2, [r0, #4]
}
   2ded0:	4770      	bx	lr

0002ded2 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2ded2:	2000      	movs	r0, #0
   2ded4:	4770      	bx	lr

0002ded6 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2ded6:	b538      	push	{r3, r4, r5, lr}
   2ded8:	460c      	mov	r4, r1
   2deda:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2dedc:	f7e7 fd72 	bl	159c4 <bt_is_ready>
   2dee0:	b120      	cbz	r0, 2deec <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2dee2:	4629      	mov	r1, r5
   2dee4:	4620      	mov	r0, r4
   2dee6:	f7e7 f843 	bl	14f70 <bt_hci_le_rand>
}
   2deea:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2deec:	f06f 000a 	mvn.w	r0, #10
   2def0:	e7fb      	b.n	2deea <entropy_bt_get_entropy+0x14>

0002def2 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   2def2:	b508      	push	{r3, lr}
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2def4:	2200      	movs	r2, #0
   2def6:	4611      	mov	r1, r2
   2def8:	4610      	mov	r0, r2
   2defa:	f7f7 fd33 	bl	25964 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
   2defe:	b900      	cbnz	r0, 2df02 <entropy_cc3xx_rng_init+0x10>
		return -EINVAL;
	}
#endif

	return 0;
}
   2df00:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2df02:	f06f 0015 	mvn.w	r0, #21
   2df06:	e7fb      	b.n	2df00 <entropy_cc3xx_rng_init+0xe>

0002df08 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2df08:	4770      	bx	lr

0002df0a <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2df0a:	1a40      	subs	r0, r0, r1
}
   2df0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2df10:	4770      	bx	lr

0002df12 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2df12:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2df16:	009b      	lsls	r3, r3, #2
   2df18:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2df1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2df1e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2df22:	2200      	movs	r2, #0
   2df24:	601a      	str	r2, [r3, #0]
   2df26:	681b      	ldr	r3, [r3, #0]
}
   2df28:	4770      	bx	lr

0002df2a <absolute_time_to_cc>:
}
   2df2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2df2e:	4770      	bx	lr

0002df30 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2df30:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2df34:	b672      	cpsid	i
}
   2df36:	4770      	bx	lr

0002df38 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2df38:	f380 8810 	msr	PRIMASK, r0
}
   2df3c:	4770      	bx	lr

0002df3e <set_absolute_alarm>:
{
   2df3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2df40:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2df42:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   2df46:	f7f0 fb79 	bl	1e63c <get_comparator>
   2df4a:	4607      	mov	r7, r0
   2df4c:	e019      	b.n	2df82 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   2df4e:	2013      	movs	r0, #19
   2df50:	f001 fa8f 	bl	2f472 <z_impl_k_busy_wait>
}
   2df54:	e022      	b.n	2df9c <set_absolute_alarm+0x5e>
		event_clear(chan);
   2df56:	4630      	mov	r0, r6
   2df58:	f7ff ffdb 	bl	2df12 <event_clear>
		event_enable(chan);
   2df5c:	4630      	mov	r0, r6
   2df5e:	f7f0 fb75 	bl	1e64c <event_enable>
		set_comparator(chan, cc_val);
   2df62:	4629      	mov	r1, r5
   2df64:	4630      	mov	r0, r6
   2df66:	f7f0 fb5f 	bl	1e628 <set_comparator>
		now2 = counter();
   2df6a:	f7f0 fb83 	bl	1e674 <counter>
	} while ((now2 != now) &&
   2df6e:	4284      	cmp	r4, r0
   2df70:	d01e      	beq.n	2dfb0 <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   2df72:	1c81      	adds	r1, r0, #2
   2df74:	4628      	mov	r0, r5
   2df76:	f7ff ffc8 	bl	2df0a <counter_sub>
	} while ((now2 != now) &&
   2df7a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2df7e:	d917      	bls.n	2dfb0 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   2df80:	462f      	mov	r7, r5
		now = counter();
   2df82:	f7f0 fb77 	bl	1e674 <counter>
   2df86:	4604      	mov	r4, r0
		set_comparator(chan, now);
   2df88:	4601      	mov	r1, r0
   2df8a:	4630      	mov	r0, r6
   2df8c:	f7f0 fb4c 	bl	1e628 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   2df90:	4621      	mov	r1, r4
   2df92:	4638      	mov	r0, r7
   2df94:	f7ff ffb9 	bl	2df0a <counter_sub>
   2df98:	2801      	cmp	r0, #1
   2df9a:	d0d8      	beq.n	2df4e <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   2df9c:	1ca7      	adds	r7, r4, #2
   2df9e:	4639      	mov	r1, r7
   2dfa0:	4628      	mov	r0, r5
   2dfa2:	f7ff ffb2 	bl	2df0a <counter_sub>
   2dfa6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2dfaa:	d9d4      	bls.n	2df56 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   2dfac:	463d      	mov	r5, r7
   2dfae:	e7d2      	b.n	2df56 <set_absolute_alarm+0x18>
}
   2dfb0:	4628      	mov	r0, r5
   2dfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002dfb4 <compare_set>:
{
   2dfb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dfb6:	b083      	sub	sp, #12
   2dfb8:	4604      	mov	r4, r0
   2dfba:	4617      	mov	r7, r2
   2dfbc:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2dfbe:	f7f0 fb99 	bl	1e6f4 <compare_int_lock>
   2dfc2:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2dfc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2dfc6:	9301      	str	r3, [sp, #4]
   2dfc8:	9b08      	ldr	r3, [sp, #32]
   2dfca:	9300      	str	r3, [sp, #0]
   2dfcc:	463a      	mov	r2, r7
   2dfce:	462b      	mov	r3, r5
   2dfd0:	4620      	mov	r0, r4
   2dfd2:	f7f0 fc9d 	bl	1e910 <compare_set_nolocks>
   2dfd6:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2dfd8:	4631      	mov	r1, r6
   2dfda:	4620      	mov	r0, r4
   2dfdc:	f7f0 fbec 	bl	1e7b8 <compare_int_unlock>
}
   2dfe0:	4628      	mov	r0, r5
   2dfe2:	b003      	add	sp, #12
   2dfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002dfe6 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2dfe6:	b410      	push	{r4}
	*state = &config->states[0];
   2dfe8:	6843      	ldr	r3, [r0, #4]
   2dfea:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2dfec:	e001      	b.n	2dff2 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   2dfee:	3408      	adds	r4, #8
   2dff0:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2dff2:	6814      	ldr	r4, [r2, #0]
   2dff4:	7a03      	ldrb	r3, [r0, #8]
   2dff6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   2dffa:	3b01      	subs	r3, #1
   2dffc:	f8d0 c004 	ldr.w	ip, [r0, #4]
   2e000:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   2e004:	429c      	cmp	r4, r3
   2e006:	d804      	bhi.n	2e012 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   2e008:	7963      	ldrb	r3, [r4, #5]
   2e00a:	428b      	cmp	r3, r1
   2e00c:	d1ef      	bne.n	2dfee <pinctrl_lookup_state+0x8>
			return 0;
   2e00e:	2000      	movs	r0, #0
   2e010:	e001      	b.n	2e016 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   2e012:	f06f 0001 	mvn.w	r0, #1
}
   2e016:	bc10      	pop	{r4}
   2e018:	4770      	bx	lr

0002e01a <nrf_gpio_pin_present_check>:
    switch (port)
   2e01a:	0943      	lsrs	r3, r0, #5
   2e01c:	d00a      	beq.n	2e034 <nrf_gpio_pin_present_check+0x1a>
   2e01e:	2b01      	cmp	r3, #1
   2e020:	d10b      	bne.n	2e03a <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   2e022:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2e026:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2e02a:	fa23 f000 	lsr.w	r0, r3, r0
}
   2e02e:	f000 0001 	and.w	r0, r0, #1
   2e032:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   2e034:	f04f 33ff 	mov.w	r3, #4294967295
   2e038:	e7f5      	b.n	2e026 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   2e03a:	2300      	movs	r3, #0
   2e03c:	e7f3      	b.n	2e026 <nrf_gpio_pin_present_check+0xc>

0002e03e <nrf_gpio_pin_clear>:
{
   2e03e:	b500      	push	{lr}
   2e040:	b083      	sub	sp, #12
   2e042:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e044:	a801      	add	r0, sp, #4
   2e046:	f7f0 fd39 	bl	1eabc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2e04a:	9a01      	ldr	r2, [sp, #4]
   2e04c:	2301      	movs	r3, #1
   2e04e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2e050:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   2e054:	b003      	add	sp, #12
   2e056:	f85d fb04 	ldr.w	pc, [sp], #4

0002e05a <nrf_gpio_pin_set>:
{
   2e05a:	b500      	push	{lr}
   2e05c:	b083      	sub	sp, #12
   2e05e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e060:	a801      	add	r0, sp, #4
   2e062:	f7f0 fd2b 	bl	1eabc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e066:	9a01      	ldr	r2, [sp, #4]
   2e068:	2301      	movs	r3, #1
   2e06a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2e06c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   2e070:	b003      	add	sp, #12
   2e072:	f85d fb04 	ldr.w	pc, [sp], #4

0002e076 <nrf_gpio_pin_write>:
{
   2e076:	b508      	push	{r3, lr}
    if (value == 0)
   2e078:	b911      	cbnz	r1, 2e080 <nrf_gpio_pin_write+0xa>
        nrf_gpio_pin_clear(pin_number);
   2e07a:	f7ff ffe0 	bl	2e03e <nrf_gpio_pin_clear>
}
   2e07e:	bd08      	pop	{r3, pc}
        nrf_gpio_pin_set(pin_number);
   2e080:	f7ff ffeb 	bl	2e05a <nrf_gpio_pin_set>
}
   2e084:	e7fb      	b.n	2e07e <nrf_gpio_pin_write+0x8>

0002e086 <nrf_gpio_cfg>:
{
   2e086:	b570      	push	{r4, r5, r6, lr}
   2e088:	b082      	sub	sp, #8
   2e08a:	9001      	str	r0, [sp, #4]
   2e08c:	460c      	mov	r4, r1
   2e08e:	4616      	mov	r6, r2
   2e090:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e092:	a801      	add	r0, sp, #4
   2e094:	f7f0 fd12 	bl	1eabc <nrf_gpio_pin_port_decode>
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2e098:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   2e09c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e0a0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2e0a4:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2e0a8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2e0ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   2e0b0:	9b01      	ldr	r3, [sp, #4]
   2e0b2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2e0b6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
   2e0ba:	b002      	add	sp, #8
   2e0bc:	bd70      	pop	{r4, r5, r6, pc}

0002e0be <gpio_port_get>:
{
   2e0be:	b538      	push	{r3, r4, r5, lr}
   2e0c0:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
   2e0c2:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   2e0c4:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   2e0c6:	685b      	ldr	r3, [r3, #4]
   2e0c8:	4798      	blx	r3
	if (ret == 0) {
   2e0ca:	b918      	cbnz	r0, 2e0d4 <gpio_port_get+0x16>
		*value ^= data->invert;
   2e0cc:	6823      	ldr	r3, [r4, #0]
   2e0ce:	682a      	ldr	r2, [r5, #0]
   2e0d0:	4053      	eors	r3, r2
   2e0d2:	6023      	str	r3, [r4, #0]
}
   2e0d4:	bd38      	pop	{r3, r4, r5, pc}

0002e0d6 <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
   2e0d6:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
   2e0d8:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2e0da:	69db      	ldr	r3, [r3, #28]
   2e0dc:	b113      	cbz	r3, 2e0e4 <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2e0de:	2201      	movs	r2, #1
   2e0e0:	4798      	blx	r3
}
   2e0e2:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   2e0e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e0e8:	e7fb      	b.n	2e0e2 <gpio_add_callback+0xc>

0002e0ea <gpio_pin_configure_dt>:
{
   2e0ea:	b508      	push	{r3, lr}
   2e0ec:	4603      	mov	r3, r0
   2e0ee:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   2e0f0:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2e0f2:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2e0f4:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   2e0f6:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   2e0fa:	f7f0 fe41 	bl	1ed80 <z_impl_gpio_pin_configure>
}
   2e0fe:	bd08      	pop	{r3, pc}

0002e100 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
   2e100:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 1);
   2e102:	2101      	movs	r1, #1
   2e104:	f7f1 f9e4 	bl	1f4d0 <dk_set_led>
}
   2e108:	bd08      	pop	{r3, pc}

0002e10a <dk_set_led_off>:

int dk_set_led_off(uint8_t led_idx)
{
   2e10a:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 0);
   2e10c:	2100      	movs	r1, #0
   2e10e:	f7f1 f9df 	bl	1f4d0 <dk_set_led>
}
   2e112:	bd08      	pop	{r3, pc}

0002e114 <event_packet_is_discardable>:
	switch (hdr->evt) {
   2e114:	7803      	ldrb	r3, [r0, #0]
   2e116:	2b3e      	cmp	r3, #62	; 0x3e
   2e118:	d003      	beq.n	2e122 <event_packet_is_discardable+0xe>
   2e11a:	2bff      	cmp	r3, #255	; 0xff
   2e11c:	d008      	beq.n	2e130 <event_packet_is_discardable+0x1c>
   2e11e:	2000      	movs	r0, #0
   2e120:	4770      	bx	lr
		switch (me->subevent) {
   2e122:	7883      	ldrb	r3, [r0, #2]
   2e124:	2b02      	cmp	r3, #2
   2e126:	d001      	beq.n	2e12c <event_packet_is_discardable+0x18>
			return false;
   2e128:	2000      	movs	r0, #0
   2e12a:	4770      	bx	lr
			return true;
   2e12c:	2001      	movs	r0, #1
   2e12e:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   2e130:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   2e132:	2b80      	cmp	r3, #128	; 0x80
   2e134:	d001      	beq.n	2e13a <event_packet_is_discardable+0x26>
			return false;
   2e136:	2000      	movs	r0, #0
}
   2e138:	4770      	bx	lr
			return true;
   2e13a:	2001      	movs	r0, #1
   2e13c:	4770      	bx	lr

0002e13e <hci_driver_send>:
{
   2e13e:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2e140:	8983      	ldrh	r3, [r0, #12]
   2e142:	b183      	cbz	r3, 2e166 <hci_driver_send+0x28>
   2e144:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2e146:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2e148:	b14b      	cbz	r3, 2e15e <hci_driver_send+0x20>
   2e14a:	2b02      	cmp	r3, #2
   2e14c:	d10e      	bne.n	2e16c <hci_driver_send+0x2e>
		err = acl_handle(buf);
   2e14e:	f7f1 fac1 	bl	1f6d4 <acl_handle>
   2e152:	4605      	mov	r5, r0
	if (!err) {
   2e154:	b965      	cbnz	r5, 2e170 <hci_driver_send+0x32>
		net_buf_unref(buf);
   2e156:	4620      	mov	r0, r4
   2e158:	f7ee fd28 	bl	1cbac <net_buf_unref>
   2e15c:	e008      	b.n	2e170 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   2e15e:	f7f1 fad7 	bl	1f710 <cmd_handle>
   2e162:	4605      	mov	r5, r0
		break;
   2e164:	e7f6      	b.n	2e154 <hci_driver_send+0x16>
		return -EINVAL;
   2e166:	f06f 0515 	mvn.w	r5, #21
   2e16a:	e001      	b.n	2e170 <hci_driver_send+0x32>
	switch (type) {
   2e16c:	f06f 0515 	mvn.w	r5, #21
}
   2e170:	4628      	mov	r0, r5
   2e172:	bd38      	pop	{r3, r4, r5, pc}

0002e174 <hci_driver_close>:
{
   2e174:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2e176:	f7f1 fe9f 	bl	1feb8 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2e17a:	f04f 30ff 	mov.w	r0, #4294967295
   2e17e:	f04f 31ff 	mov.w	r1, #4294967295
   2e182:	f7f1 f9c7 	bl	1f514 <multithreading_lock_acquire>
	if (err) {
   2e186:	4604      	mov	r4, r0
   2e188:	b108      	cbz	r0, 2e18e <hci_driver_close+0x1a>
}
   2e18a:	4620      	mov	r0, r4
   2e18c:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   2e18e:	f7d6 f969 	bl	4464 <sdc_disable>
	if (err) {
   2e192:	4604      	mov	r4, r0
   2e194:	b910      	cbnz	r0, 2e19c <hci_driver_close+0x28>
	MULTITHREADING_LOCK_RELEASE();
   2e196:	f7f1 f9c7 	bl	1f528 <multithreading_lock_release>
	return err;
   2e19a:	e7f6      	b.n	2e18a <hci_driver_close+0x16>
		MULTITHREADING_LOCK_RELEASE();
   2e19c:	f7f1 f9c4 	bl	1f528 <multithreading_lock_release>
		return err;
   2e1a0:	e7f3      	b.n	2e18a <hci_driver_close+0x16>

0002e1a2 <configure_supported_features>:
{
   2e1a2:	b508      	push	{r3, lr}
			err = sdc_support_adv();
   2e1a4:	f7d6 fa16 	bl	45d4 <sdc_support_adv>
			if (err) {
   2e1a8:	b960      	cbnz	r0, 2e1c4 <configure_supported_features+0x22>
		err = sdc_support_peripheral();
   2e1aa:	f7d6 fa43 	bl	4634 <sdc_support_peripheral>
		if (err) {
   2e1ae:	b960      	cbnz	r0, 2e1ca <configure_supported_features+0x28>
			err = sdc_support_dle_peripheral();
   2e1b0:	f7d6 fa20 	bl	45f4 <sdc_support_dle_peripheral>
			if (err) {
   2e1b4:	b960      	cbnz	r0, 2e1d0 <configure_supported_features+0x2e>
		err = sdc_support_le_2m_phy();
   2e1b6:	f7d6 fa2d 	bl	4614 <sdc_support_le_2m_phy>
		if (err) {
   2e1ba:	b960      	cbnz	r0, 2e1d6 <configure_supported_features+0x34>
			err = sdc_support_phy_update_peripheral();
   2e1bc:	f7d6 fa4a 	bl	4654 <sdc_support_phy_update_peripheral>
			if (err) {
   2e1c0:	b960      	cbnz	r0, 2e1dc <configure_supported_features+0x3a>
}
   2e1c2:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   2e1c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e1c8:	e7fb      	b.n	2e1c2 <configure_supported_features+0x20>
			return -ENOTSUP;
   2e1ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e1ce:	e7f8      	b.n	2e1c2 <configure_supported_features+0x20>
				return -ENOTSUP;
   2e1d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e1d4:	e7f5      	b.n	2e1c2 <configure_supported_features+0x20>
			return -ENOTSUP;
   2e1d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e1da:	e7f2      	b.n	2e1c2 <configure_supported_features+0x20>
				return -ENOTSUP;
   2e1dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e1e0:	e7ef      	b.n	2e1c2 <configure_supported_features+0x20>

0002e1e2 <receive_work_handler>:
{
   2e1e2:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   2e1e4:	f7f1 fbc2 	bl	1f96c <hci_driver_receive_process>
}
   2e1e8:	bd08      	pop	{r3, pc}

0002e1ea <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2e1ea:	230f      	movs	r3, #15
   2e1ec:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2e1ee:	2304      	movs	r3, #4
   2e1f0:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2e1f2:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   2e1f4:	2301      	movs	r3, #1
   2e1f6:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   2e1f8:	8081      	strh	r1, [r0, #4]
}
   2e1fa:	4770      	bx	lr

0002e1fc <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2e1fc:	f04f 0c0e 	mov.w	ip, #14
   2e200:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   2e204:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2e206:	2201      	movs	r2, #1
   2e208:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   2e20a:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2e20e:	7143      	strb	r3, [r0, #5]
}
   2e210:	4770      	bx	lr

0002e212 <le_read_supported_states>:
	*buf = states1;
   2e212:	238f      	movs	r3, #143	; 0x8f
   2e214:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2e216:	23c0      	movs	r3, #192	; 0xc0
   2e218:	7103      	strb	r3, [r0, #4]
}
   2e21a:	4770      	bx	lr

0002e21c <status_param_cmd_put>:
}
   2e21c:	2001      	movs	r0, #1
   2e21e:	4770      	bx	lr

0002e220 <link_control_cmd_put>:
{
   2e220:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2e222:	7842      	ldrb	r2, [r0, #1]
   2e224:	f810 3b03 	ldrb.w	r3, [r0], #3
   2e228:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e22c:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e22e:	f240 4206 	movw	r2, #1030	; 0x406
   2e232:	4293      	cmp	r3, r2
   2e234:	d005      	beq.n	2e242 <link_control_cmd_put+0x22>
   2e236:	f240 421d 	movw	r2, #1053	; 0x41d
   2e23a:	4293      	cmp	r3, r2
   2e23c:	d004      	beq.n	2e248 <link_control_cmd_put+0x28>
   2e23e:	2001      	movs	r0, #1
}
   2e240:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2e242:	f7de fe46 	bl	ced2 <sdc_hci_cmd_lc_disconnect>
   2e246:	e7fb      	b.n	2e240 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2e248:	f7de fe45 	bl	ced6 <sdc_hci_cmd_lc_read_remote_version_information>
   2e24c:	e7f8      	b.n	2e240 <link_control_cmd_put+0x20>

0002e24e <controller_and_baseband_cmd_put>:
{
   2e24e:	b508      	push	{r3, lr}
   2e250:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2e252:	3003      	adds	r0, #3
   2e254:	f893 c001 	ldrb.w	ip, [r3, #1]
   2e258:	781b      	ldrb	r3, [r3, #0]
   2e25a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2e25e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e260:	f640 4c63 	movw	ip, #3171	; 0xc63
   2e264:	4563      	cmp	r3, ip
   2e266:	d02c      	beq.n	2e2c2 <controller_and_baseband_cmd_put+0x74>
   2e268:	f101 0106 	add.w	r1, r1, #6
   2e26c:	dc16      	bgt.n	2e29c <controller_and_baseband_cmd_put+0x4e>
   2e26e:	f640 4c03 	movw	ip, #3075	; 0xc03
   2e272:	4563      	cmp	r3, ip
   2e274:	d022      	beq.n	2e2bc <controller_and_baseband_cmd_put+0x6e>
   2e276:	f640 4c2d 	movw	ip, #3117	; 0xc2d
   2e27a:	4563      	cmp	r3, ip
   2e27c:	d105      	bne.n	2e28a <controller_and_baseband_cmd_put+0x3c>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2e27e:	7813      	ldrb	r3, [r2, #0]
   2e280:	3303      	adds	r3, #3
   2e282:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2e284:	f7de fd0b 	bl	cc9e <sdc_hci_cmd_cb_read_transmit_power_level>
   2e288:	e007      	b.n	2e29a <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2e28a:	f640 4201 	movw	r2, #3073	; 0xc01
   2e28e:	4293      	cmp	r3, r2
   2e290:	d102      	bne.n	2e298 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2e292:	f7de fd06 	bl	cca2 <sdc_hci_cmd_cb_set_event_mask>
   2e296:	e000      	b.n	2e29a <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2e298:	2001      	movs	r0, #1
}
   2e29a:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2e29c:	f640 4c7b 	movw	ip, #3195	; 0xc7b
   2e2a0:	4563      	cmp	r3, ip
   2e2a2:	d011      	beq.n	2e2c8 <controller_and_baseband_cmd_put+0x7a>
   2e2a4:	f640 4c7c 	movw	ip, #3196	; 0xc7c
   2e2a8:	4563      	cmp	r3, ip
   2e2aa:	d105      	bne.n	2e2b8 <controller_and_baseband_cmd_put+0x6a>
		*param_length_out +=
   2e2ac:	7813      	ldrb	r3, [r2, #0]
   2e2ae:	3302      	adds	r3, #2
   2e2b0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2e2b2:	f7de fd00 	bl	ccb6 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2e2b6:	e7f0      	b.n	2e29a <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2e2b8:	2001      	movs	r0, #1
   2e2ba:	e7ee      	b.n	2e29a <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_reset();
   2e2bc:	f7d6 fb22 	bl	4904 <sdc_hci_cmd_cb_reset>
   2e2c0:	e7eb      	b.n	2e29a <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2e2c2:	f7de fcf3 	bl	ccac <sdc_hci_cmd_cb_set_event_mask_page_2>
   2e2c6:	e7e8      	b.n	2e29a <controller_and_baseband_cmd_put+0x4c>
		*param_length_out +=
   2e2c8:	7813      	ldrb	r3, [r2, #0]
   2e2ca:	3304      	adds	r3, #4
   2e2cc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2e2ce:	f7de fce4 	bl	cc9a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   2e2d2:	e7e2      	b.n	2e29a <controller_and_baseband_cmd_put+0x4c>

0002e2d4 <supported_commands>:
{
   2e2d4:	b510      	push	{r4, lr}
   2e2d6:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2e2d8:	222f      	movs	r2, #47	; 0x2f
   2e2da:	2100      	movs	r1, #0
   2e2dc:	f7fb fd85 	bl	29dea <memset>
	cmds->hci_disconnect = 1;
   2e2e0:	7823      	ldrb	r3, [r4, #0]
   2e2e2:	f043 0320 	orr.w	r3, r3, #32
   2e2e6:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2e2e8:	78a3      	ldrb	r3, [r4, #2]
   2e2ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e2ee:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   2e2f0:	7963      	ldrb	r3, [r4, #5]
   2e2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e2f6:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   2e2f8:	b2db      	uxtb	r3, r3
   2e2fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e2fe:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2e300:	7aa3      	ldrb	r3, [r4, #10]
   2e302:	f043 0304 	orr.w	r3, r3, #4
   2e306:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   2e308:	7ba3      	ldrb	r3, [r4, #14]
   2e30a:	f043 0308 	orr.w	r3, r3, #8
   2e30e:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   2e310:	b2db      	uxtb	r3, r3
   2e312:	f043 0320 	orr.w	r3, r3, #32
   2e316:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2e318:	7be3      	ldrb	r3, [r4, #15]
   2e31a:	f043 0302 	orr.w	r3, r3, #2
   2e31e:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   2e320:	7da3      	ldrb	r3, [r4, #22]
   2e322:	f043 0304 	orr.w	r3, r3, #4
   2e326:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   2e328:	7e63      	ldrb	r3, [r4, #25]
   2e32a:	f043 0301 	orr.w	r3, r3, #1
   2e32e:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   2e330:	b2db      	uxtb	r3, r3
   2e332:	f043 0302 	orr.w	r3, r3, #2
   2e336:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   2e338:	b2db      	uxtb	r3, r3
   2e33a:	f043 0304 	orr.w	r3, r3, #4
   2e33e:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   2e340:	b2db      	uxtb	r3, r3
   2e342:	f043 0310 	orr.w	r3, r3, #16
   2e346:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_parameters = 1;
   2e348:	b2db      	uxtb	r3, r3
   2e34a:	f043 0320 	orr.w	r3, r3, #32
   2e34e:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_advertising_physical_channel_tx_power = 1;
   2e350:	b2db      	uxtb	r3, r3
   2e352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e356:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   2e358:	b2db      	uxtb	r3, r3
   2e35a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e35e:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   2e360:	7ea3      	ldrb	r3, [r4, #26]
   2e362:	f043 0301 	orr.w	r3, r3, #1
   2e366:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_advertising_enable = 1;
   2e368:	b2db      	uxtb	r3, r3
   2e36a:	f043 0302 	orr.w	r3, r3, #2
   2e36e:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_data_related_address_changes = 1;
   2e370:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2e374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e378:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_read_filter_accept_list_size = 1;
   2e37c:	7ea3      	ldrb	r3, [r4, #26]
   2e37e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e382:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   2e384:	b2db      	uxtb	r3, r3
   2e386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e38a:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   2e38c:	7ee3      	ldrb	r3, [r4, #27]
   2e38e:	f043 0301 	orr.w	r3, r3, #1
   2e392:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   2e394:	b2db      	uxtb	r3, r3
   2e396:	f043 0302 	orr.w	r3, r3, #2
   2e39a:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_channel_map = 1;
   2e39c:	b2db      	uxtb	r3, r3
   2e39e:	f043 0310 	orr.w	r3, r3, #16
   2e3a2:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_remote_features = 1;
   2e3a4:	b2db      	uxtb	r3, r3
   2e3a6:	f043 0320 	orr.w	r3, r3, #32
   2e3aa:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   2e3ac:	b2db      	uxtb	r3, r3
   2e3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e3b2:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   2e3b4:	b2db      	uxtb	r3, r3
   2e3b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e3ba:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_long_term_key_request_reply = 1;
   2e3bc:	7f23      	ldrb	r3, [r4, #28]
   2e3be:	f043 0302 	orr.w	r3, r3, #2
   2e3c2:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_long_term_key_request_negative_reply = 1;
   2e3c4:	b2db      	uxtb	r3, r3
   2e3c6:	f043 0304 	orr.w	r3, r3, #4
   2e3ca:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_read_supported_states = 1;
   2e3cc:	b2db      	uxtb	r3, r3
   2e3ce:	f043 0308 	orr.w	r3, r3, #8
   2e3d2:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   2e3d4:	b2db      	uxtb	r3, r3
   2e3d6:	f043 0310 	orr.w	r3, r3, #16
   2e3da:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   2e3dc:	b2db      	uxtb	r3, r3
   2e3de:	f043 0320 	orr.w	r3, r3, #32
   2e3e2:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   2e3e4:	b2db      	uxtb	r3, r3
   2e3e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e3ea:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   2e3ec:	f894 3020 	ldrb.w	r3, [r4, #32]
   2e3f0:	f043 0310 	orr.w	r3, r3, #16
   2e3f4:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   2e3f8:	b2db      	uxtb	r3, r3
   2e3fa:	f043 0320 	orr.w	r3, r3, #32
   2e3fe:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   2e402:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2e406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e40a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   2e40e:	b2db      	uxtb	r3, r3
   2e410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e414:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   2e418:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2e41c:	f043 0301 	orr.w	r3, r3, #1
   2e420:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_maximum_data_length = 1;
   2e424:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2e428:	f043 0308 	orr.w	r3, r3, #8
   2e42c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_read_phy = 1;
   2e430:	b2db      	uxtb	r3, r3
   2e432:	f043 0310 	orr.w	r3, r3, #16
   2e436:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_default_phy = 1;
   2e43a:	b2db      	uxtb	r3, r3
   2e43c:	f043 0320 	orr.w	r3, r3, #32
   2e440:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_phy = 1;
   2e444:	b2db      	uxtb	r3, r3
   2e446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e44a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   2e44e:	b2db      	uxtb	r3, r3
   2e450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e454:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2e458:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2e45c:	f043 0301 	orr.w	r3, r3, #1
   2e460:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   2e464:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   2e468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e46c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_read_local_p256_public_key = 1;
   2e470:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2e474:	f043 0302 	orr.w	r3, r3, #2
   2e478:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v1 = 1;
   2e47c:	b2db      	uxtb	r3, r3
   2e47e:	f043 0304 	orr.w	r3, r3, #4
   2e482:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v2 = 1;
   2e486:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   2e48a:	f043 0304 	orr.w	r3, r3, #4
   2e48e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   2e492:	bd10      	pop	{r4, pc}

0002e494 <supported_features>:
{
   2e494:	b510      	push	{r4, lr}
   2e496:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2e498:	2208      	movs	r2, #8
   2e49a:	2100      	movs	r1, #0
   2e49c:	f7fb fca5 	bl	29dea <memset>
	features->bdedr_not_supported = 1;
   2e4a0:	7923      	ldrb	r3, [r4, #4]
   2e4a2:	f043 0320 	orr.w	r3, r3, #32
   2e4a6:	7123      	strb	r3, [r4, #4]
	features->le_supported = 1;
   2e4a8:	b2db      	uxtb	r3, r3
   2e4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e4ae:	7123      	strb	r3, [r4, #4]
}
   2e4b0:	bd10      	pop	{r4, pc}

0002e4b2 <info_param_cmd_put>:
{
   2e4b2:	b508      	push	{r3, lr}
   2e4b4:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2e4b6:	1d88      	adds	r0, r1, #6
   2e4b8:	f893 c001 	ldrb.w	ip, [r3, #1]
   2e4bc:	781b      	ldrb	r3, [r3, #0]
   2e4be:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2e4c2:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e4c4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2e4c8:	3b01      	subs	r3, #1
   2e4ca:	2b08      	cmp	r3, #8
   2e4cc:	d820      	bhi.n	2e510 <info_param_cmd_put+0x5e>
   2e4ce:	e8df f003 	tbb	[pc, r3]
   2e4d2:	0b05      	.short	0x0b05
   2e4d4:	1f1f1f12 	.word	0x1f1f1f12
   2e4d8:	1f1f      	.short	0x1f1f
   2e4da:	19          	.byte	0x19
   2e4db:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2e4dc:	7813      	ldrb	r3, [r2, #0]
   2e4de:	3308      	adds	r3, #8
   2e4e0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2e4e2:	f7de fcb7 	bl	ce54 <sdc_hci_cmd_ip_read_local_version_information>
   2e4e6:	e014      	b.n	2e512 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2e4e8:	7813      	ldrb	r3, [r2, #0]
   2e4ea:	3340      	adds	r3, #64	; 0x40
   2e4ec:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   2e4ee:	f7ff fef1 	bl	2e2d4 <supported_commands>
		return 0;
   2e4f2:	2000      	movs	r0, #0
   2e4f4:	e00d      	b.n	2e512 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2e4f6:	7813      	ldrb	r3, [r2, #0]
   2e4f8:	3308      	adds	r3, #8
   2e4fa:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   2e4fc:	f7ff ffca 	bl	2e494 <supported_features>
		return 0;
   2e500:	2000      	movs	r0, #0
   2e502:	e006      	b.n	2e512 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2e504:	7813      	ldrb	r3, [r2, #0]
   2e506:	3306      	adds	r3, #6
   2e508:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2e50a:	f7de fca1 	bl	ce50 <sdc_hci_cmd_ip_read_bd_addr>
   2e50e:	e000      	b.n	2e512 <info_param_cmd_put+0x60>
	switch (opcode)	{
   2e510:	2001      	movs	r0, #1
}
   2e512:	bd08      	pop	{r3, pc}

0002e514 <le_supported_features>:
{
   2e514:	b510      	push	{r4, lr}
   2e516:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2e518:	2205      	movs	r2, #5
   2e51a:	2100      	movs	r1, #0
   2e51c:	f7fb fc65 	bl	29dea <memset>
	features->le_encryption = 1;
   2e520:	7823      	ldrb	r3, [r4, #0]
   2e522:	f043 0301 	orr.w	r3, r3, #1
   2e526:	7023      	strb	r3, [r4, #0]
	features->extended_reject_indication = 1;
   2e528:	b2db      	uxtb	r3, r3
   2e52a:	f043 0304 	orr.w	r3, r3, #4
   2e52e:	7023      	strb	r3, [r4, #0]
	features->slave_initiated_features_exchange = 1;
   2e530:	b2db      	uxtb	r3, r3
   2e532:	f043 0308 	orr.w	r3, r3, #8
   2e536:	7023      	strb	r3, [r4, #0]
	features->le_ping = 1;
   2e538:	b2db      	uxtb	r3, r3
   2e53a:	f043 0310 	orr.w	r3, r3, #16
   2e53e:	7023      	strb	r3, [r4, #0]
	features->le_data_packet_length_extension = 1;
   2e540:	b2db      	uxtb	r3, r3
   2e542:	f043 0320 	orr.w	r3, r3, #32
   2e546:	7023      	strb	r3, [r4, #0]
	features->le_2m_phy = 1;
   2e548:	7863      	ldrb	r3, [r4, #1]
   2e54a:	f043 0301 	orr.w	r3, r3, #1
   2e54e:	7063      	strb	r3, [r4, #1]
	features->channel_selection_algorithm_2 = 1;
   2e550:	b2db      	uxtb	r3, r3
   2e552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e556:	7063      	strb	r3, [r4, #1]
}
   2e558:	bd10      	pop	{r4, pc}

0002e55a <vs_zephyr_supported_commands>:
{
   2e55a:	b510      	push	{r4, lr}
   2e55c:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2e55e:	2202      	movs	r2, #2
   2e560:	2100      	movs	r1, #0
   2e562:	f7fb fc42 	bl	29dea <memset>
	cmds->read_version_info = 1;
   2e566:	7823      	ldrb	r3, [r4, #0]
   2e568:	f043 0301 	orr.w	r3, r3, #1
   2e56c:	7023      	strb	r3, [r4, #0]
	cmds->read_supported_commands = 1;
   2e56e:	b2db      	uxtb	r3, r3
   2e570:	f043 0302 	orr.w	r3, r3, #2
   2e574:	7023      	strb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   2e576:	b2db      	uxtb	r3, r3
   2e578:	f043 0320 	orr.w	r3, r3, #32
   2e57c:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   2e57e:	7863      	ldrb	r3, [r4, #1]
   2e580:	f043 0301 	orr.w	r3, r3, #1
   2e584:	7063      	strb	r3, [r4, #1]
	cmds->read_key_hierarchy_roots = 1;
   2e586:	b2db      	uxtb	r3, r3
   2e588:	f043 0302 	orr.w	r3, r3, #2
   2e58c:	7063      	strb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   2e58e:	b2db      	uxtb	r3, r3
   2e590:	f043 0304 	orr.w	r3, r3, #4
   2e594:	7063      	strb	r3, [r4, #1]
}
   2e596:	bd10      	pop	{r4, pc}

0002e598 <vs_supported_commands>:
{
   2e598:	b510      	push	{r4, lr}
   2e59a:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2e59c:	2202      	movs	r2, #2
   2e59e:	2100      	movs	r1, #0
   2e5a0:	f7fb fc23 	bl	29dea <memset>
	cmds->read_supported_vs_commands = 1;
   2e5a4:	7823      	ldrb	r3, [r4, #0]
   2e5a6:	f043 0301 	orr.w	r3, r3, #1
   2e5aa:	7023      	strb	r3, [r4, #0]
	cmds->llpm_mode_set = 1;
   2e5ac:	b2db      	uxtb	r3, r3
   2e5ae:	f043 0302 	orr.w	r3, r3, #2
   2e5b2:	7023      	strb	r3, [r4, #0]
	cmds->conn_update = 1;
   2e5b4:	b2db      	uxtb	r3, r3
   2e5b6:	f043 0304 	orr.w	r3, r3, #4
   2e5ba:	7023      	strb	r3, [r4, #0]
	cmds->conn_event_extend = 1;
   2e5bc:	b2db      	uxtb	r3, r3
   2e5be:	f043 0308 	orr.w	r3, r3, #8
   2e5c2:	7023      	strb	r3, [r4, #0]
	cmds->qos_conn_event_report_enable = 1;
   2e5c4:	b2db      	uxtb	r3, r3
   2e5c6:	f043 0310 	orr.w	r3, r3, #16
   2e5ca:	7023      	strb	r3, [r4, #0]
	cmds->event_length_set = 1;
   2e5cc:	b2db      	uxtb	r3, r3
   2e5ce:	f043 0320 	orr.w	r3, r3, #32
   2e5d2:	7023      	strb	r3, [r4, #0]
}
   2e5d4:	bd10      	pop	{r4, pc}

0002e5d6 <le_controller_cmd_put>:
{
   2e5d6:	b508      	push	{r3, lr}
   2e5d8:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2e5da:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2e5dc:	3106      	adds	r1, #6
   2e5de:	f893 c001 	ldrb.w	ip, [r3, #1]
   2e5e2:	781b      	ldrb	r3, [r3, #0]
   2e5e4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2e5e8:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e5ea:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2e5ee:	3b01      	subs	r3, #1
   2e5f0:	2b7b      	cmp	r3, #123	; 0x7b
   2e5f2:	f200 80d8 	bhi.w	2e7a6 <le_controller_cmd_put+0x1d0>
   2e5f6:	e8df f003 	tbb	[pc, r3]
   2e5fa:	413e      	.short	0x413e
   2e5fc:	5350d648 	.word	0x5350d648
   2e600:	63605d56 	.word	0x63605d56
   2e604:	d6d6d6d6 	.word	0xd6d6d6d6
   2e608:	76737069 	.word	0x76737069
   2e60c:	7f79d6d6 	.word	0x7f79d6d6
   2e610:	8fd68882 	.word	0x8fd68882
   2e614:	d6d69b95 	.word	0xd6d69b95
   2e618:	a3d6d6d6 	.word	0xa3d6d6d6
   2e61c:	b6b3b0a9 	.word	0xb6b3b0a9
   2e620:	d6d6d6d6 	.word	0xd6d6d6d6
   2e624:	d6d6d6d6 	.word	0xd6d6d6d6
   2e628:	ccc9c3bc 	.word	0xccc9c3bc
   2e62c:	d6d6d6d6 	.word	0xd6d6d6d6
   2e630:	d6d6d6d6 	.word	0xd6d6d6d6
   2e634:	d6d6d6d6 	.word	0xd6d6d6d6
   2e638:	d6d6d6d6 	.word	0xd6d6d6d6
   2e63c:	d6d6d6d6 	.word	0xd6d6d6d6
   2e640:	d6d6d6d6 	.word	0xd6d6d6d6
   2e644:	d6d6d6cf 	.word	0xd6d6d6cf
   2e648:	d6d6d6d6 	.word	0xd6d6d6d6
   2e64c:	d6d6d6d6 	.word	0xd6d6d6d6
   2e650:	d6d6d6d6 	.word	0xd6d6d6d6
   2e654:	b9d6d6d6 	.word	0xb9d6d6d6
   2e658:	d6d6d6d6 	.word	0xd6d6d6d6
   2e65c:	d6d6d6d6 	.word	0xd6d6d6d6
   2e660:	d6d6d6d6 	.word	0xd6d6d6d6
   2e664:	d6d6d6d6 	.word	0xd6d6d6d6
   2e668:	d6d6d6d6 	.word	0xd6d6d6d6
   2e66c:	d6d6d6d6 	.word	0xd6d6d6d6
   2e670:	d6d6d6d6 	.word	0xd6d6d6d6
   2e674:	66d6      	.short	0x66d6
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2e676:	f7de fc1f 	bl	ceb8 <sdc_hci_cmd_le_set_event_mask>
   2e67a:	e095      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2e67c:	7813      	ldrb	r3, [r2, #0]
   2e67e:	3303      	adds	r3, #3
   2e680:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2e682:	4608      	mov	r0, r1
   2e684:	f7de fbfa 	bl	ce7c <sdc_hci_cmd_le_read_buffer_size>
   2e688:	e08e      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2e68a:	7813      	ldrb	r3, [r2, #0]
   2e68c:	3308      	adds	r3, #8
   2e68e:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   2e690:	4608      	mov	r0, r1
   2e692:	f7ff ff3f 	bl	2e514 <le_supported_features>
		return 0;
   2e696:	2000      	movs	r0, #0
   2e698:	e086      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2e69a:	f7de fc14 	bl	cec6 <sdc_hci_cmd_le_set_random_address>
   2e69e:	e083      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   2e6a0:	f7de fc02 	bl	cea8 <sdc_hci_cmd_le_set_adv_params>
   2e6a4:	e080      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out +=
   2e6a6:	7813      	ldrb	r3, [r2, #0]
   2e6a8:	3301      	adds	r3, #1
   2e6aa:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   2e6ac:	4608      	mov	r0, r1
   2e6ae:	f7de fbe3 	bl	ce78 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   2e6b2:	e079      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   2e6b4:	f7de fbf4 	bl	cea0 <sdc_hci_cmd_le_set_adv_data>
   2e6b8:	e076      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   2e6ba:	f7de fc06 	bl	ceca <sdc_hci_cmd_le_set_scan_response_data>
   2e6be:	e073      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   2e6c0:	f7de fbf0 	bl	cea4 <sdc_hci_cmd_le_set_adv_enable>
   2e6c4:	e070      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   2e6c6:	f7de fbf3 	bl	ceb0 <sdc_hci_cmd_le_set_data_related_address_changes>
   2e6ca:	e06d      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   2e6cc:	7813      	ldrb	r3, [r2, #0]
   2e6ce:	3301      	adds	r3, #1
   2e6d0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   2e6d2:	4608      	mov	r0, r1
   2e6d4:	f7de fbd6 	bl	ce84 <sdc_hci_cmd_le_read_filter_accept_list_size>
   2e6d8:	e066      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   2e6da:	f7de fbbf 	bl	ce5c <sdc_hci_cmd_le_clear_filter_accept_list>
   2e6de:	e063      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   2e6e0:	f7de fbba 	bl	ce58 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   2e6e4:	e060      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   2e6e6:	f7de fbd9 	bl	ce9c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   2e6ea:	e05d      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2e6ec:	7813      	ldrb	r3, [r2, #0]
   2e6ee:	3307      	adds	r3, #7
   2e6f0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2e6f2:	f7de fbc5 	bl	ce80 <sdc_hci_cmd_le_read_channel_map>
   2e6f6:	e057      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2e6f8:	f7de fbca 	bl	ce90 <sdc_hci_cmd_le_read_remote_features>
   2e6fc:	e054      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2e6fe:	7813      	ldrb	r3, [r2, #0]
   2e700:	3310      	adds	r3, #16
   2e702:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2e704:	f7de fbac 	bl	ce60 <sdc_hci_cmd_le_encrypt>
   2e708:	e04e      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2e70a:	7813      	ldrb	r3, [r2, #0]
   2e70c:	3308      	adds	r3, #8
   2e70e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2e710:	4608      	mov	r0, r1
   2e712:	f7de fbaf 	bl	ce74 <sdc_hci_cmd_le_rand>
   2e716:	e047      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   2e718:	7813      	ldrb	r3, [r2, #0]
   2e71a:	3302      	adds	r3, #2
   2e71c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   2e71e:	f7de fba5 	bl	ce6c <sdc_hci_cmd_le_long_term_key_request_reply>
   2e722:	e041      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out +=
   2e724:	7813      	ldrb	r3, [r2, #0]
   2e726:	3302      	adds	r3, #2
   2e728:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   2e72a:	f7de fb9b 	bl	ce64 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   2e72e:	e03b      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2e730:	7813      	ldrb	r3, [r2, #0]
   2e732:	3308      	adds	r3, #8
   2e734:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   2e736:	4608      	mov	r0, r1
   2e738:	f7ff fd6b 	bl	2e212 <le_read_supported_states>
		return 0;
   2e73c:	2000      	movs	r0, #0
   2e73e:	e033      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2e740:	7813      	ldrb	r3, [r2, #0]
   2e742:	3302      	adds	r3, #2
   2e744:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2e746:	f7de fbb1 	bl	ceac <sdc_hci_cmd_le_set_data_length>
   2e74a:	e02d      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out +=
   2e74c:	7813      	ldrb	r3, [r2, #0]
   2e74e:	3304      	adds	r3, #4
   2e750:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2e752:	4608      	mov	r0, r1
   2e754:	f7de fb9e 	bl	ce94 <sdc_hci_cmd_le_read_suggested_default_data_length>
   2e758:	e026      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2e75a:	f7de fbb8 	bl	cece <sdc_hci_cmd_le_write_suggested_default_data_length>
   2e75e:	e023      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return hci_cmd_le_read_local_p256_public_key();
   2e760:	f7f1 fbb2 	bl	1fec8 <hci_cmd_le_read_local_p256_public_key>
   2e764:	e020      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   2e766:	f000 f8cb 	bl	2e900 <hci_cmd_le_generate_dhkey>
   2e76a:	e01d      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   2e76c:	f000 f8cd 	bl	2e90a <hci_cmd_le_generate_dhkey_v2>
   2e770:	e01a      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2e772:	7813      	ldrb	r3, [r2, #0]
   2e774:	3308      	adds	r3, #8
   2e776:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2e778:	4608      	mov	r0, r1
   2e77a:	f7de fb85 	bl	ce88 <sdc_hci_cmd_le_read_max_data_length>
   2e77e:	e013      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2e780:	7813      	ldrb	r3, [r2, #0]
   2e782:	3304      	adds	r3, #4
   2e784:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2e786:	f7de fb81 	bl	ce8c <sdc_hci_cmd_le_read_phy>
   2e78a:	e00d      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   2e78c:	f7de fb92 	bl	ceb4 <sdc_hci_cmd_le_set_default_phy>
   2e790:	e00a      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2e792:	f7de fb96 	bl	cec2 <sdc_hci_cmd_le_set_phy>
   2e796:	e007      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2e798:	7813      	ldrb	r3, [r2, #0]
   2e79a:	3302      	adds	r3, #2
   2e79c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2e79e:	4608      	mov	r0, r1
   2e7a0:	f7de fb7a 	bl	ce98 <sdc_hci_cmd_le_read_transmit_power>
   2e7a4:	e000      	b.n	2e7a8 <le_controller_cmd_put+0x1d2>
	switch (opcode)	{
   2e7a6:	2001      	movs	r0, #1
}
   2e7a8:	bd08      	pop	{r3, pc}

0002e7aa <vs_cmd_put>:
{
   2e7aa:	b508      	push	{r3, lr}
   2e7ac:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2e7ae:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2e7b0:	3106      	adds	r1, #6
   2e7b2:	f893 c001 	ldrb.w	ip, [r3, #1]
   2e7b6:	781b      	ldrb	r3, [r3, #0]
   2e7b8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   2e7bc:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   2e7c0:	4563      	cmp	r3, ip
   2e7c2:	d913      	bls.n	2e7ec <vs_cmd_put+0x42>
   2e7c4:	f64f 5c0c 	movw	ip, #64780	; 0xfd0c
   2e7c8:	4563      	cmp	r3, ip
   2e7ca:	d86d      	bhi.n	2e8a8 <vs_cmd_put+0xfe>
   2e7cc:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   2e7d0:	d31e      	bcc.n	2e810 <vs_cmd_put+0x66>
   2e7d2:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   2e7d6:	2b0c      	cmp	r3, #12
   2e7d8:	d862      	bhi.n	2e8a0 <vs_cmd_put+0xf6>
   2e7da:	e8df f003 	tbb	[pc, r3]
   2e7de:	4c44      	.short	0x4c44
   2e7e0:	5855524f 	.word	0x5855524f
   2e7e4:	5b616161 	.word	0x5b616161
   2e7e8:	6161      	.short	0x6161
   2e7ea:	5e          	.byte	0x5e
   2e7eb:	00          	.byte	0x00
   2e7ec:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   2e7f0:	d801      	bhi.n	2e7f6 <vs_cmd_put+0x4c>
   2e7f2:	2001      	movs	r0, #1
}
   2e7f4:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2e7f6:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   2e7fa:	3b01      	subs	r3, #1
   2e7fc:	2b0a      	cmp	r3, #10
   2e7fe:	d851      	bhi.n	2e8a4 <vs_cmd_put+0xfa>
   2e800:	e8df f003 	tbb	[pc, r3]
   2e804:	50500f08 	.word	0x50500f08
   2e808:	50502750 	.word	0x50502750
   2e80c:	2017      	.short	0x2017
   2e80e:	2a          	.byte	0x2a
   2e80f:	00          	.byte	0x00
   2e810:	2001      	movs	r0, #1
   2e812:	e7ef      	b.n	2e7f4 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2e814:	7813      	ldrb	r3, [r2, #0]
   2e816:	330c      	adds	r3, #12
   2e818:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2e81a:	4608      	mov	r0, r1
   2e81c:	f7d6 f886 	bl	492c <sdc_hci_cmd_vs_zephyr_read_version_info>
   2e820:	e7e8      	b.n	2e7f4 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2e822:	7813      	ldrb	r3, [r2, #0]
   2e824:	3340      	adds	r3, #64	; 0x40
   2e826:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   2e828:	4608      	mov	r0, r1
   2e82a:	f7ff fe96 	bl	2e55a <vs_zephyr_supported_commands>
		return 0;
   2e82e:	2000      	movs	r0, #0
   2e830:	e7e0      	b.n	2e7f4 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   2e832:	7813      	ldrb	r3, [r2, #0]
   2e834:	1c58      	adds	r0, r3, #1
   2e836:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2e838:	3317      	adds	r3, #23
   2e83a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2e83c:	4608      	mov	r0, r1
   2e83e:	f7de fab6 	bl	cdae <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   2e842:	e7d7      	b.n	2e7f4 <vs_cmd_put+0x4a>
		*param_length_out +=
   2e844:	7813      	ldrb	r3, [r2, #0]
   2e846:	3320      	adds	r3, #32
   2e848:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2e84a:	4608      	mov	r0, r1
   2e84c:	f7de fa62 	bl	cd14 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   2e850:	e7d0      	b.n	2e7f4 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2e852:	f7de fafb 	bl	ce4c <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   2e856:	e7cd      	b.n	2e7f4 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   2e858:	7813      	ldrb	r3, [r2, #0]
   2e85a:	3301      	adds	r3, #1
   2e85c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   2e85e:	4608      	mov	r0, r1
   2e860:	f7de fa44 	bl	ccec <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   2e864:	e7c6      	b.n	2e7f4 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2e866:	7813      	ldrb	r3, [r2, #0]
   2e868:	3340      	adds	r3, #64	; 0x40
   2e86a:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   2e86c:	4608      	mov	r0, r1
   2e86e:	f7ff fe93 	bl	2e598 <vs_supported_commands>
		return 0;
   2e872:	2000      	movs	r0, #0
   2e874:	e7be      	b.n	2e7f4 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2e876:	f7de fa2c 	bl	ccd2 <sdc_hci_cmd_vs_llpm_mode_set>
   2e87a:	e7bb      	b.n	2e7f4 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2e87c:	f7de fa25 	bl	ccca <sdc_hci_cmd_vs_conn_update>
   2e880:	e7b8      	b.n	2e7f4 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   2e882:	f7de fa1a 	bl	ccba <sdc_hci_cmd_vs_conn_event_extend>
   2e886:	e7b5      	b.n	2e7f4 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2e888:	f7de fa29 	bl	ccde <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2e88c:	e7b2      	b.n	2e7f4 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   2e88e:	f7de fa1e 	bl	ccce <sdc_hci_cmd_vs_event_length_set>
   2e892:	e7af      	b.n	2e7f4 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   2e894:	f7de fa1f 	bl	ccd6 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   2e898:	e7ac      	b.n	2e7f4 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   2e89a:	f7de fa25 	bl	cce8 <sdc_hci_cmd_vs_set_adv_randomness>
   2e89e:	e7a9      	b.n	2e7f4 <vs_cmd_put+0x4a>
	switch (opcode)	{
   2e8a0:	2001      	movs	r0, #1
   2e8a2:	e7a7      	b.n	2e7f4 <vs_cmd_put+0x4a>
   2e8a4:	2001      	movs	r0, #1
   2e8a6:	e7a5      	b.n	2e7f4 <vs_cmd_put+0x4a>
   2e8a8:	2001      	movs	r0, #1
   2e8aa:	e7a3      	b.n	2e7f4 <vs_cmd_put+0x4a>

0002e8ac <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2e8ac:	b530      	push	{r4, r5, lr}
   2e8ae:	b08d      	sub	sp, #52	; 0x34
   2e8b0:	460c      	mov	r4, r1
   2e8b2:	4615      	mov	r5, r2
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	LOG_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	LOG_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2e8b4:	2210      	movs	r2, #16
   2e8b6:	4601      	mov	r1, r0
   2e8b8:	a808      	add	r0, sp, #32
   2e8ba:	f7f1 f96d 	bl	1fb98 <sys_memcpy_swap>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   2e8be:	2210      	movs	r2, #16
   2e8c0:	4621      	mov	r1, r4
   2e8c2:	eb0d 0002 	add.w	r0, sp, r2
   2e8c6:	f7f1 f967 	bl	1fb98 <sys_memcpy_swap>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2e8ca:	f04f 30ff 	mov.w	r0, #4294967295
   2e8ce:	f04f 31ff 	mov.w	r1, #4294967295
   2e8d2:	f7f0 fe1f 	bl	1f514 <multithreading_lock_acquire>

	if (!errcode) {
   2e8d6:	4604      	mov	r4, r0
   2e8d8:	b110      	cbz	r0, 2e8e0 <bt_encrypt_le+0x34>

		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2e8da:	4620      	mov	r0, r4
   2e8dc:	b00d      	add	sp, #52	; 0x34
   2e8de:	bd30      	pop	{r4, r5, pc}
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2e8e0:	466a      	mov	r2, sp
   2e8e2:	a904      	add	r1, sp, #16
   2e8e4:	a808      	add	r0, sp, #32
   2e8e6:	f7dd ff3e 	bl	c766 <sdc_soc_ecb_block_encrypt>
   2e8ea:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2e8ec:	f7f0 fe1c 	bl	1f528 <multithreading_lock_release>
	if (!errcode) {
   2e8f0:	2c00      	cmp	r4, #0
   2e8f2:	d1f2      	bne.n	2e8da <bt_encrypt_le+0x2e>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   2e8f4:	2210      	movs	r2, #16
   2e8f6:	4669      	mov	r1, sp
   2e8f8:	4628      	mov	r0, r5
   2e8fa:	f7f1 f94d 	bl	1fb98 <sys_memcpy_swap>
		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
   2e8fe:	e7ec      	b.n	2e8da <bt_encrypt_le+0x2e>

0002e900 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
   2e900:	b508      	push	{r3, lr}
	return cmd_le_generate_dhkey(p_params->key,
   2e902:	2100      	movs	r1, #0
   2e904:	f7f1 faf8 	bl	1fef8 <cmd_le_generate_dhkey>
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}
   2e908:	bd08      	pop	{r3, pc}

0002e90a <hci_cmd_le_generate_dhkey_v2>:

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2e90a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2e90e:	2901      	cmp	r1, #1
   2e910:	d803      	bhi.n	2e91a <hci_cmd_le_generate_dhkey_v2+0x10>
{
   2e912:	b508      	push	{r3, lr}
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2e914:	f7f1 faf0 	bl	1fef8 <cmd_le_generate_dhkey>
}
   2e918:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   2e91a:	2012      	movs	r0, #18
}
   2e91c:	4770      	bx	lr

0002e91e <m_config_clock_source_get>:
}
   2e91e:	2001      	movs	r0, #1
   2e920:	4770      	bx	lr

0002e922 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2e922:	4668      	mov	r0, sp
   2e924:	f020 0107 	bic.w	r1, r0, #7
   2e928:	468d      	mov	sp, r1
   2e92a:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2e92c:	f7d4 fb70 	bl	3010 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2e930:	f7e4 fbee 	bl	13110 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2e934:	f7e4 fcf0 	bl	13318 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2e938:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2e93c:	4685      	mov	sp, r0
   2e93e:	4770      	bx	lr

0002e940 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2e940:	4668      	mov	r0, sp
   2e942:	f020 0107 	bic.w	r1, r0, #7
   2e946:	468d      	mov	sp, r1
   2e948:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2e94a:	f7d4 fad7 	bl	2efc <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2e94e:	f7e4 fbdf 	bl	13110 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2e952:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2e956:	4685      	mov	sp, r0
   2e958:	4770      	bx	lr

0002e95a <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2e95a:	4668      	mov	r0, sp
   2e95c:	f020 0107 	bic.w	r1, r0, #7
   2e960:	468d      	mov	sp, r1
   2e962:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2e964:	f7d2 f836 	bl	9d4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2e968:	f7e4 fbd2 	bl	13110 <_arch_isr_direct_pm>
   2e96c:	f7e4 fcd4 	bl	13318 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2e970:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2e974:	4685      	mov	sp, r0
   2e976:	4770      	bx	lr

0002e978 <mpsl_lib_init_sys>:
{
   2e978:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   2e97a:	f7f1 fae7 	bl	1ff4c <mpsl_lib_init_internal>
	if (err) {
   2e97e:	4604      	mov	r4, r0
   2e980:	b108      	cbz	r0, 2e986 <mpsl_lib_init_sys+0xe>
}
   2e982:	4620      	mov	r0, r4
   2e984:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2e986:	2201      	movs	r2, #1
   2e988:	2100      	movs	r1, #0
   2e98a:	2008      	movs	r0, #8
   2e98c:	f7e4 fba4 	bl	130d8 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2e990:	2201      	movs	r2, #1
   2e992:	2100      	movs	r1, #0
   2e994:	200b      	movs	r0, #11
   2e996:	f7e4 fb9f 	bl	130d8 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2e99a:	2201      	movs	r2, #1
   2e99c:	2100      	movs	r1, #0
   2e99e:	4610      	mov	r0, r2
   2e9a0:	f7e4 fb9a 	bl	130d8 <z_arm_irq_priority_set>
	return 0;
   2e9a4:	e7ed      	b.n	2e982 <mpsl_lib_init_sys+0xa>

0002e9a6 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   2e9a6:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   2e9a8:	f7dd fe7c 	bl	c6a4 <mpsl_fem_init>

	return 0;
}
   2e9ac:	2000      	movs	r0, #0
   2e9ae:	bd08      	pop	{r3, pc}

0002e9b0 <nrfx_clock_enable>:
}
   2e9b0:	4770      	bx	lr

0002e9b2 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   2e9b2:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   2e9b4:	f7d4 ff9c 	bl	38f0 <MPSL_IRQ_CLOCK_Handler>
}
   2e9b8:	bd08      	pop	{r3, pc}

0002e9ba <nrf_flash_sync_is_required>:
{
   2e9ba:	b508      	push	{r3, lr}
	return mpsl_is_initialized();
   2e9bc:	f7d5 fb54 	bl	4068 <mpsl_is_initialized>
}
   2e9c0:	bd08      	pop	{r3, pc}

0002e9c2 <nrf_flash_sync_get_timestamp_begin>:
}
   2e9c2:	4770      	bx	lr

0002e9c4 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   2e9c4:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2e9c6:	f7f6 ff77 	bl	258b8 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   2e9ca:	bd08      	pop	{r3, pc}

0002e9cc <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   2e9cc:	b510      	push	{r4, lr}
   2e9ce:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2e9d0:	f7e4 f9ea 	bl	12da8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2e9d4:	f7e4 fae4 	bl	12fa0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   2e9d8:	4620      	mov	r0, r4
   2e9da:	f7ff fff3 	bl	2e9c4 <hw_cc3xx_init_internal>
	return res;
}
   2e9de:	bd10      	pop	{r4, pc}

0002e9e0 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2e9e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2e9e4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   2e9e8:	2b08      	cmp	r3, #8
   2e9ea:	d001      	beq.n	2e9f0 <nrf52_errata_36+0x10>
        return false;
   2e9ec:	2000      	movs	r0, #0
   2e9ee:	4770      	bx	lr
                        return true;
   2e9f0:	2001      	movs	r0, #1
}
   2e9f2:	4770      	bx	lr

0002e9f4 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2e9f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2e9f8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   2e9fc:	2b08      	cmp	r3, #8
   2e9fe:	d001      	beq.n	2ea04 <nrf52_errata_66+0x10>
        return false;
   2ea00:	2000      	movs	r0, #0
   2ea02:	4770      	bx	lr
                        return true;
   2ea04:	2001      	movs	r0, #1
}
   2ea06:	4770      	bx	lr

0002ea08 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ea08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ea0c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2ea10:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   2ea14:	2a08      	cmp	r2, #8
   2ea16:	d001      	beq.n	2ea1c <nrf52_errata_98+0x14>
        return false;
   2ea18:	2000      	movs	r0, #0
   2ea1a:	4770      	bx	lr
                switch(var2)
   2ea1c:	2b00      	cmp	r3, #0
   2ea1e:	d804      	bhi.n	2ea2a <nrf52_errata_98+0x22>
   2ea20:	e8df f003 	tbb	[pc, r3]
   2ea24:	01          	.byte	0x01
   2ea25:	00          	.byte	0x00
   2ea26:	2001      	movs	r0, #1
   2ea28:	4770      	bx	lr
                        return false;
   2ea2a:	2000      	movs	r0, #0
}
   2ea2c:	4770      	bx	lr

0002ea2e <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ea2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ea32:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2ea36:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   2ea3a:	2a08      	cmp	r2, #8
   2ea3c:	d001      	beq.n	2ea42 <nrf52_errata_103+0x14>
        return false;
   2ea3e:	2000      	movs	r0, #0
   2ea40:	4770      	bx	lr
                switch(var2)
   2ea42:	2b00      	cmp	r3, #0
   2ea44:	d804      	bhi.n	2ea50 <nrf52_errata_103+0x22>
   2ea46:	e8df f003 	tbb	[pc, r3]
   2ea4a:	01          	.byte	0x01
   2ea4b:	00          	.byte	0x00
   2ea4c:	2001      	movs	r0, #1
   2ea4e:	4770      	bx	lr
                        return false;
   2ea50:	2000      	movs	r0, #0
}
   2ea52:	4770      	bx	lr

0002ea54 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ea54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ea58:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2ea5c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   2ea60:	2a08      	cmp	r2, #8
   2ea62:	d001      	beq.n	2ea68 <nrf52_errata_115+0x14>
        return false;
   2ea64:	2000      	movs	r0, #0
   2ea66:	4770      	bx	lr
                switch(var2)
   2ea68:	2b00      	cmp	r3, #0
   2ea6a:	d804      	bhi.n	2ea76 <nrf52_errata_115+0x22>
   2ea6c:	e8df f003 	tbb	[pc, r3]
   2ea70:	01          	.byte	0x01
   2ea71:	00          	.byte	0x00
   2ea72:	2001      	movs	r0, #1
   2ea74:	4770      	bx	lr
                        return false;
   2ea76:	2000      	movs	r0, #0
}
   2ea78:	4770      	bx	lr

0002ea7a <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ea7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ea7e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2ea82:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   2ea86:	2a08      	cmp	r2, #8
   2ea88:	d001      	beq.n	2ea8e <nrf52_errata_120+0x14>
        return false;
   2ea8a:	2000      	movs	r0, #0
   2ea8c:	4770      	bx	lr
                switch(var2)
   2ea8e:	2b00      	cmp	r3, #0
   2ea90:	d804      	bhi.n	2ea9c <nrf52_errata_120+0x22>
   2ea92:	e8df f003 	tbb	[pc, r3]
   2ea96:	01          	.byte	0x01
   2ea97:	00          	.byte	0x00
   2ea98:	2001      	movs	r0, #1
   2ea9a:	4770      	bx	lr
                        return false;
   2ea9c:	2000      	movs	r0, #0
}
   2ea9e:	4770      	bx	lr

0002eaa0 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2eaa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2eaa4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   2eaa8:	2b08      	cmp	r3, #8
   2eaaa:	d001      	beq.n	2eab0 <nrf52_errata_136+0x10>
        return false;
   2eaac:	2000      	movs	r0, #0
   2eaae:	4770      	bx	lr
                        return true;
   2eab0:	2001      	movs	r0, #1
}
   2eab2:	4770      	bx	lr

0002eab4 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2eab4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2eab8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2eabc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2eac0:	2a08      	cmp	r2, #8
   2eac2:	d001      	beq.n	2eac8 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2eac4:	2000      	movs	r0, #0
   2eac6:	4770      	bx	lr
                switch(var2)
   2eac8:	2b04      	cmp	r3, #4
   2eaca:	d801      	bhi.n	2ead0 <nrf52_configuration_249+0x1c>
   2eacc:	2000      	movs	r0, #0
   2eace:	4770      	bx	lr
                        return true;
   2ead0:	2001      	movs	r0, #1
    #endif
}
   2ead2:	4770      	bx	lr

0002ead4 <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   2ead4:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2ead6:	f7ff ffed 	bl	2eab4 <nrf52_configuration_249>
   2eada:	b138      	cbz	r0, 2eaec <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2eadc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2eae0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2eae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2eae8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   2eaec:	bd08      	pop	{r3, pc}

0002eaee <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   2eaee:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   2eaf0:	4780      	blx	r0
}
   2eaf2:	bd08      	pop	{r3, pc}

0002eaf4 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   2eaf4:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2eaf6:	f000 fcbc 	bl	2f472 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   2eafa:	bd08      	pop	{r3, pc}

0002eafc <nrf_gpiote_event_configure>:
{
   2eafc:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2eafe:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2eb02:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2eb06:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   2eb0a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   2eb0e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2eb12:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2eb16:	0212      	lsls	r2, r2, #8
   2eb18:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   2eb1c:	041b      	lsls	r3, r3, #16
   2eb1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2eb22:	431a      	orrs	r2, r3
   2eb24:	4314      	orrs	r4, r2
   2eb26:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2eb2a:	bc10      	pop	{r4}
   2eb2c:	4770      	bx	lr

0002eb2e <nrf_gpiote_task_configure>:
{
   2eb2e:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2eb30:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2eb34:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2eb38:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   2eb3c:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   2eb40:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2eb44:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2eb48:	0212      	lsls	r2, r2, #8
   2eb4a:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2eb4e:	041b      	lsls	r3, r3, #16
   2eb50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2eb54:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2eb56:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2eb5a:	051b      	lsls	r3, r3, #20
   2eb5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2eb60:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2eb62:	4314      	orrs	r4, r2
   2eb64:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2eb68:	bc10      	pop	{r4}
   2eb6a:	4770      	bx	lr

0002eb6c <nrf_gpio_pin_present_check>:
    switch (port)
   2eb6c:	0943      	lsrs	r3, r0, #5
   2eb6e:	d00a      	beq.n	2eb86 <nrf_gpio_pin_present_check+0x1a>
   2eb70:	2b01      	cmp	r3, #1
   2eb72:	d10b      	bne.n	2eb8c <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   2eb74:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2eb78:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2eb7c:	fa23 f000 	lsr.w	r0, r3, r0
}
   2eb80:	f000 0001 	and.w	r0, r0, #1
   2eb84:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   2eb86:	f04f 33ff 	mov.w	r3, #4294967295
   2eb8a:	e7f5      	b.n	2eb78 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   2eb8c:	2300      	movs	r3, #0
   2eb8e:	e7f3      	b.n	2eb78 <nrf_gpio_pin_present_check+0xc>

0002eb90 <pin_is_task_output>:
{
   2eb90:	b510      	push	{r4, lr}
   2eb92:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2eb94:	f7f1 fd82 	bl	2069c <pin_is_output>
   2eb98:	b128      	cbz	r0, 2eba6 <pin_is_task_output+0x16>
   2eb9a:	4620      	mov	r0, r4
   2eb9c:	f7f1 fd68 	bl	20670 <pin_in_use_by_te>
   2eba0:	b118      	cbz	r0, 2ebaa <pin_is_task_output+0x1a>
   2eba2:	2001      	movs	r0, #1
   2eba4:	e000      	b.n	2eba8 <pin_is_task_output+0x18>
   2eba6:	2000      	movs	r0, #0
}
   2eba8:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2ebaa:	2000      	movs	r0, #0
   2ebac:	e7fc      	b.n	2eba8 <pin_is_task_output+0x18>

0002ebae <pin_is_input>:
{
   2ebae:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   2ebb0:	f7f1 fd74 	bl	2069c <pin_is_output>
   2ebb4:	f080 0001 	eor.w	r0, r0, #1
}
   2ebb8:	b2c0      	uxtb	r0, r0
   2ebba:	bd08      	pop	{r3, pc}

0002ebbc <gpiote_polarity_to_trigger>:
}
   2ebbc:	4770      	bx	lr

0002ebbe <gpiote_trigger_to_polarity>:
}
   2ebbe:	4770      	bx	lr

0002ebc0 <is_level>:
}
   2ebc0:	2803      	cmp	r0, #3
   2ebc2:	bf94      	ite	ls
   2ebc4:	2000      	movls	r0, #0
   2ebc6:	2001      	movhi	r0, #1
   2ebc8:	4770      	bx	lr

0002ebca <latch_pending_read_and_check>:
{
   2ebca:	b510      	push	{r4, lr}
   2ebcc:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   2ebce:	4602      	mov	r2, r0
   2ebd0:	2102      	movs	r1, #2
   2ebd2:	2000      	movs	r0, #0
   2ebd4:	f7f1 fd20 	bl	20618 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2ebd8:	2300      	movs	r3, #0
   2ebda:	2b01      	cmp	r3, #1
   2ebdc:	d804      	bhi.n	2ebe8 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   2ebde:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2ebe2:	b91a      	cbnz	r2, 2ebec <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2ebe4:	3301      	adds	r3, #1
   2ebe6:	e7f8      	b.n	2ebda <latch_pending_read_and_check+0x10>
    return false;
   2ebe8:	2000      	movs	r0, #0
}
   2ebea:	bd10      	pop	{r4, pc}
            return true;
   2ebec:	2001      	movs	r0, #1
   2ebee:	e7fc      	b.n	2ebea <latch_pending_read_and_check+0x20>

0002ebf0 <nrf_gpio_cfg_default>:
{
   2ebf0:	b500      	push	{lr}
   2ebf2:	b083      	sub	sp, #12
    nrf_gpio_cfg(
   2ebf4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ebf6:	a801      	add	r0, sp, #4
   2ebf8:	f7f1 fe0a 	bl	20810 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2ebfc:	9b01      	ldr	r3, [sp, #4]
   2ebfe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2ec02:	2202      	movs	r2, #2
   2ec04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2ec08:	b003      	add	sp, #12
   2ec0a:	f85d fb04 	ldr.w	pc, [sp], #4

0002ec0e <nrf_gpio_reconfigure>:
{
   2ec0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ec12:	b082      	sub	sp, #8
   2ec14:	9001      	str	r0, [sp, #4]
   2ec16:	4688      	mov	r8, r1
   2ec18:	4615      	mov	r5, r2
   2ec1a:	461c      	mov	r4, r3
   2ec1c:	9f08      	ldr	r7, [sp, #32]
   2ec1e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ec20:	a801      	add	r0, sp, #4
   2ec22:	f7f1 fdf5 	bl	20810 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ec26:	9a01      	ldr	r2, [sp, #4]
   2ec28:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   2ec2c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ec30:	f1b8 0f00 	cmp.w	r8, #0
   2ec34:	d032      	beq.n	2ec9c <nrf_gpio_reconfigure+0x8e>
   2ec36:	f04f 0c01 	mov.w	ip, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2ec3a:	b395      	cbz	r5, 2eca2 <nrf_gpio_reconfigure+0x94>
   2ec3c:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ec3e:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2ec42:	b384      	cbz	r4, 2eca6 <nrf_gpio_reconfigure+0x98>
   2ec44:	230c      	movs	r3, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2ec46:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2ec4a:	b377      	cbz	r7, 2ecaa <nrf_gpio_reconfigure+0x9c>
   2ec4c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2ec50:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2ec54:	b35e      	cbz	r6, 2ecae <nrf_gpio_reconfigure+0xa0>
   2ec56:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ec5a:	ea4c 0c03 	orr.w	ip, ip, r3
    cnf &= ~to_update;
   2ec5e:	ea21 010c 	bic.w	r1, r1, ip
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ec62:	f1b8 0f00 	cmp.w	r8, #0
   2ec66:	d024      	beq.n	2ecb2 <nrf_gpio_reconfigure+0xa4>
   2ec68:	f898 3000 	ldrb.w	r3, [r8]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2ec6c:	b31d      	cbz	r5, 2ecb6 <nrf_gpio_reconfigure+0xa8>
   2ec6e:	782d      	ldrb	r5, [r5, #0]
   2ec70:	006d      	lsls	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ec72:	432b      	orrs	r3, r5
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2ec74:	b30c      	cbz	r4, 2ecba <nrf_gpio_reconfigure+0xac>
   2ec76:	7824      	ldrb	r4, [r4, #0]
   2ec78:	00a4      	lsls	r4, r4, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2ec7a:	4323      	orrs	r3, r4
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2ec7c:	b1ff      	cbz	r7, 2ecbe <nrf_gpio_reconfigure+0xb0>
   2ec7e:	783c      	ldrb	r4, [r7, #0]
   2ec80:	0224      	lsls	r4, r4, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2ec82:	4323      	orrs	r3, r4
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2ec84:	b1ee      	cbz	r6, 2ecc2 <nrf_gpio_reconfigure+0xb4>
   2ec86:	7834      	ldrb	r4, [r6, #0]
   2ec88:	0424      	lsls	r4, r4, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2ec8a:	4323      	orrs	r3, r4
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ec8c:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   2ec8e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   2ec92:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   2ec96:	b002      	add	sp, #8
   2ec98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ec9c:	f04f 0c00 	mov.w	ip, #0
   2eca0:	e7cb      	b.n	2ec3a <nrf_gpio_reconfigure+0x2c>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2eca2:	2300      	movs	r3, #0
   2eca4:	e7cb      	b.n	2ec3e <nrf_gpio_reconfigure+0x30>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2eca6:	2300      	movs	r3, #0
   2eca8:	e7cd      	b.n	2ec46 <nrf_gpio_reconfigure+0x38>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2ecaa:	2300      	movs	r3, #0
   2ecac:	e7d0      	b.n	2ec50 <nrf_gpio_reconfigure+0x42>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2ecae:	2300      	movs	r3, #0
   2ecb0:	e7d3      	b.n	2ec5a <nrf_gpio_reconfigure+0x4c>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ecb2:	2300      	movs	r3, #0
   2ecb4:	e7da      	b.n	2ec6c <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2ecb6:	2500      	movs	r5, #0
   2ecb8:	e7db      	b.n	2ec72 <nrf_gpio_reconfigure+0x64>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2ecba:	2400      	movs	r4, #0
   2ecbc:	e7dd      	b.n	2ec7a <nrf_gpio_reconfigure+0x6c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2ecbe:	2400      	movs	r4, #0
   2ecc0:	e7df      	b.n	2ec82 <nrf_gpio_reconfigure+0x74>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2ecc2:	2400      	movs	r4, #0
   2ecc4:	e7e1      	b.n	2ec8a <nrf_gpio_reconfigure+0x7c>

0002ecc6 <nrf_gpio_cfg_sense_set>:
{
   2ecc6:	b500      	push	{lr}
   2ecc8:	b085      	sub	sp, #20
   2ecca:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2ecce:	f10d 030f 	add.w	r3, sp, #15
   2ecd2:	9301      	str	r3, [sp, #4]
   2ecd4:	2100      	movs	r1, #0
   2ecd6:	9100      	str	r1, [sp, #0]
   2ecd8:	460b      	mov	r3, r1
   2ecda:	460a      	mov	r2, r1
   2ecdc:	f7ff ff97 	bl	2ec0e <nrf_gpio_reconfigure>
}
   2ece0:	b005      	add	sp, #20
   2ece2:	f85d fb04 	ldr.w	pc, [sp], #4

0002ece6 <nrf_gpio_pin_read>:
{
   2ece6:	b500      	push	{lr}
   2ece8:	b083      	sub	sp, #12
   2ecea:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ecec:	a801      	add	r0, sp, #4
   2ecee:	f7f1 fd8f 	bl	20810 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   2ecf2:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2ecf6:	9b01      	ldr	r3, [sp, #4]
   2ecf8:	40d8      	lsrs	r0, r3
}
   2ecfa:	f000 0001 	and.w	r0, r0, #1
   2ecfe:	b003      	add	sp, #12
   2ed00:	f85d fb04 	ldr.w	pc, [sp], #4

0002ed04 <nrf_gpio_pin_sense_get>:
{
   2ed04:	b500      	push	{lr}
   2ed06:	b083      	sub	sp, #12
   2ed08:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ed0a:	a801      	add	r0, sp, #4
   2ed0c:	f7f1 fd80 	bl	20810 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2ed10:	9b01      	ldr	r3, [sp, #4]
   2ed12:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2ed16:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
   2ed1a:	f3c0 4001 	ubfx	r0, r0, #16, #2
   2ed1e:	b003      	add	sp, #12
   2ed20:	f85d fb04 	ldr.w	pc, [sp], #4

0002ed24 <next_sense_cond_call_handler>:
{
   2ed24:	b570      	push	{r4, r5, r6, lr}
   2ed26:	4606      	mov	r6, r0
   2ed28:	460c      	mov	r4, r1
   2ed2a:	4615      	mov	r5, r2
    if (is_level(trigger))
   2ed2c:	4608      	mov	r0, r1
   2ed2e:	f7ff ff47 	bl	2ebc0 <is_level>
   2ed32:	b960      	cbnz	r0, 2ed4e <next_sense_cond_call_handler+0x2a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2ed34:	2d02      	cmp	r5, #2
   2ed36:	d01c      	beq.n	2ed72 <next_sense_cond_call_handler+0x4e>
   2ed38:	2102      	movs	r1, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2ed3a:	4630      	mov	r0, r6
   2ed3c:	f7ff ffc3 	bl	2ecc6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2ed40:	2c03      	cmp	r4, #3
   2ed42:	d01a      	beq.n	2ed7a <next_sense_cond_call_handler+0x56>
   2ed44:	2d02      	cmp	r5, #2
   2ed46:	d016      	beq.n	2ed76 <next_sense_cond_call_handler+0x52>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2ed48:	2d03      	cmp	r5, #3
   2ed4a:	d01b      	beq.n	2ed84 <next_sense_cond_call_handler+0x60>
}
   2ed4c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   2ed4e:	4621      	mov	r1, r4
   2ed50:	4630      	mov	r0, r6
   2ed52:	f7f1 fcf5 	bl	20740 <call_handler>
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2ed56:	4630      	mov	r0, r6
   2ed58:	f7ff ffd4 	bl	2ed04 <nrf_gpio_pin_sense_get>
   2ed5c:	42a8      	cmp	r0, r5
   2ed5e:	d1f5      	bne.n	2ed4c <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2ed60:	2100      	movs	r1, #0
   2ed62:	4630      	mov	r0, r6
   2ed64:	f7ff ffaf 	bl	2ecc6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2ed68:	4629      	mov	r1, r5
   2ed6a:	4630      	mov	r0, r6
   2ed6c:	f7ff ffab 	bl	2ecc6 <nrf_gpio_cfg_sense_set>
   2ed70:	e7ec      	b.n	2ed4c <next_sense_cond_call_handler+0x28>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2ed72:	2103      	movs	r1, #3
   2ed74:	e7e1      	b.n	2ed3a <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2ed76:	2c01      	cmp	r4, #1
   2ed78:	d1e6      	bne.n	2ed48 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   2ed7a:	4621      	mov	r1, r4
   2ed7c:	4630      	mov	r0, r6
   2ed7e:	f7f1 fcdf 	bl	20740 <call_handler>
}
   2ed82:	e7e3      	b.n	2ed4c <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2ed84:	2c02      	cmp	r4, #2
   2ed86:	d1e1      	bne.n	2ed4c <next_sense_cond_call_handler+0x28>
   2ed88:	e7f7      	b.n	2ed7a <next_sense_cond_call_handler+0x56>

0002ed8a <nrf_gpio_pin_latch_clear>:
{
   2ed8a:	b500      	push	{lr}
   2ed8c:	b083      	sub	sp, #12
   2ed8e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ed90:	a801      	add	r0, sp, #4
   2ed92:	f7f1 fd3d 	bl	20810 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2ed96:	2301      	movs	r3, #1
   2ed98:	9a01      	ldr	r2, [sp, #4]
   2ed9a:	4093      	lsls	r3, r2
   2ed9c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
}
   2eda0:	b003      	add	sp, #12
   2eda2:	f85d fb04 	ldr.w	pc, [sp], #4

0002eda6 <flash_page_size_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   2eda6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2edaa:	6918      	ldr	r0, [r3, #16]
}
   2edac:	4770      	bx	lr

0002edae <flash_page_count_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2edae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2edb2:	6958      	ldr	r0, [r3, #20]
}
   2edb4:	4770      	bx	lr

0002edb6 <flash_total_size_get>:
{
   2edb6:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   2edb8:	f7ff fff5 	bl	2eda6 <flash_page_size_get>
   2edbc:	4604      	mov	r4, r0
   2edbe:	f7ff fff6 	bl	2edae <flash_page_count_get>
}
   2edc2:	fb04 f000 	mul.w	r0, r4, r0
   2edc6:	bd10      	pop	{r4, pc}

0002edc8 <is_page_aligned_check>:
{
   2edc8:	b510      	push	{r4, lr}
   2edca:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   2edcc:	f7ff ffeb 	bl	2eda6 <flash_page_size_get>
   2edd0:	fbb4 f3f0 	udiv	r3, r4, r0
   2edd4:	fb00 4013 	mls	r0, r0, r3, r4
}
   2edd8:	fab0 f080 	clz	r0, r0
   2eddc:	0940      	lsrs	r0, r0, #5
   2edde:	bd10      	pop	{r4, pc}

0002ede0 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   2ede0:	b508      	push	{r3, lr}
    return flash_total_size_get();
   2ede2:	f7ff ffe8 	bl	2edb6 <flash_total_size_get>
}
   2ede6:	bd08      	pop	{r3, pc}

0002ede8 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   2ede8:	b508      	push	{r3, lr}
    return flash_page_size_get();
   2edea:	f7ff ffdc 	bl	2eda6 <flash_page_size_get>
}
   2edee:	bd08      	pop	{r3, pc}

0002edf0 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   2edf0:	b508      	push	{r3, lr}
    return flash_page_count_get();
   2edf2:	f7ff ffdc 	bl	2edae <flash_page_count_get>
}
   2edf6:	bd08      	pop	{r3, pc}

0002edf8 <nrf52_errata_122>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2edf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2edfc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   2ee00:	2b08      	cmp	r3, #8
   2ee02:	d001      	beq.n	2ee08 <nrf52_errata_122+0x10>
        return false;
   2ee04:	2000      	movs	r0, #0
   2ee06:	4770      	bx	lr
                        return true;
   2ee08:	2001      	movs	r0, #1
}
   2ee0a:	4770      	bx	lr

0002ee0c <nrf_qspi_pins_set>:
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   2ee0c:	780b      	ldrb	r3, [r1, #0]
   2ee0e:	2bff      	cmp	r3, #255	; 0xff
   2ee10:	d01b      	beq.n	2ee4a <nrf_qspi_pins_set+0x3e>
   2ee12:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   2ee16:	784b      	ldrb	r3, [r1, #1]
   2ee18:	2bff      	cmp	r3, #255	; 0xff
   2ee1a:	d019      	beq.n	2ee50 <nrf_qspi_pins_set+0x44>
   2ee1c:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   2ee20:	788b      	ldrb	r3, [r1, #2]
   2ee22:	2bff      	cmp	r3, #255	; 0xff
   2ee24:	d017      	beq.n	2ee56 <nrf_qspi_pins_set+0x4a>
   2ee26:	f8c0 3530 	str.w	r3, [r0, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   2ee2a:	78cb      	ldrb	r3, [r1, #3]
   2ee2c:	2bff      	cmp	r3, #255	; 0xff
   2ee2e:	d015      	beq.n	2ee5c <nrf_qspi_pins_set+0x50>
   2ee30:	f8c0 3534 	str.w	r3, [r0, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   2ee34:	790b      	ldrb	r3, [r1, #4]
   2ee36:	2bff      	cmp	r3, #255	; 0xff
   2ee38:	d013      	beq.n	2ee62 <nrf_qspi_pins_set+0x56>
   2ee3a:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   2ee3e:	794b      	ldrb	r3, [r1, #5]
   2ee40:	2bff      	cmp	r3, #255	; 0xff
   2ee42:	d011      	beq.n	2ee68 <nrf_qspi_pins_set+0x5c>
   2ee44:	f8c0 353c 	str.w	r3, [r0, #1340]	; 0x53c
}
   2ee48:	4770      	bx	lr
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   2ee4a:	f04f 33ff 	mov.w	r3, #4294967295
   2ee4e:	e7e0      	b.n	2ee12 <nrf_qspi_pins_set+0x6>
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   2ee50:	f04f 33ff 	mov.w	r3, #4294967295
   2ee54:	e7e2      	b.n	2ee1c <nrf_qspi_pins_set+0x10>
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   2ee56:	f04f 33ff 	mov.w	r3, #4294967295
   2ee5a:	e7e4      	b.n	2ee26 <nrf_qspi_pins_set+0x1a>
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   2ee5c:	f04f 33ff 	mov.w	r3, #4294967295
   2ee60:	e7e6      	b.n	2ee30 <nrf_qspi_pins_set+0x24>
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   2ee62:	f04f 33ff 	mov.w	r3, #4294967295
   2ee66:	e7e8      	b.n	2ee3a <nrf_qspi_pins_set+0x2e>
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   2ee68:	f04f 33ff 	mov.w	r3, #4294967295
   2ee6c:	e7ea      	b.n	2ee44 <nrf_qspi_pins_set+0x38>

0002ee6e <nrf_qspi_ifconfig0_set>:
    uint32_t config = p_config->readoc;
   2ee6e:	780b      	ldrb	r3, [r1, #0]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   2ee70:	784a      	ldrb	r2, [r1, #1]
   2ee72:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   2ee76:	788a      	ldrb	r2, [r1, #2]
   2ee78:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   2ee7c:	78ca      	ldrb	r2, [r1, #3]
   2ee7e:	b122      	cbz	r2, 2ee8a <nrf_qspi_ifconfig0_set+0x1c>
   2ee80:	2280      	movs	r2, #128	; 0x80
   2ee82:	4313      	orrs	r3, r2
    p_reg->IFCONFIG0 = config;
   2ee84:	f8c0 3544 	str.w	r3, [r0, #1348]	; 0x544
}
   2ee88:	4770      	bx	lr
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   2ee8a:	2200      	movs	r2, #0
   2ee8c:	e7f9      	b.n	2ee82 <nrf_qspi_ifconfig0_set+0x14>

0002ee8e <nrf_qspi_ifconfig1_set>:
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   2ee8e:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
   2ee92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2ee96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    config |= p_config->sck_delay;
   2ee9a:	780a      	ldrb	r2, [r1, #0]
   2ee9c:	431a      	orrs	r2, r3
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   2ee9e:	784b      	ldrb	r3, [r1, #1]
   2eea0:	b15b      	cbz	r3, 2eeba <nrf_qspi_ifconfig1_set+0x2c>
   2eea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2eea6:	4313      	orrs	r3, r2
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   2eea8:	788a      	ldrb	r2, [r1, #2]
   2eeaa:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   2eeae:	78ca      	ldrb	r2, [r1, #3]
   2eeb0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    p_reg->IFCONFIG1 = config;
   2eeb4:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
}
   2eeb8:	4770      	bx	lr
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   2eeba:	2300      	movs	r3, #0
   2eebc:	e7f3      	b.n	2eea6 <nrf_qspi_ifconfig1_set+0x18>

0002eebe <nrf_qspi_cinstrdata_set>:
    switch (length)
   2eebe:	3902      	subs	r1, #2
   2eec0:	2907      	cmp	r1, #7
   2eec2:	d81f      	bhi.n	2ef04 <nrf_qspi_cinstrdata_set+0x46>
   2eec4:	e8df f001 	tbb	[pc, r1]
   2eec8:	12232527 	.word	0x12232527
   2eecc:	04071f21 	.word	0x04071f21
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   2eed0:	79d3      	ldrb	r3, [r2, #7]
   2eed2:	061b      	lsls	r3, r3, #24
   2eed4:	e000      	b.n	2eed8 <nrf_qspi_cinstrdata_set+0x1a>
    switch (length)
   2eed6:	2300      	movs	r3, #0
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   2eed8:	7991      	ldrb	r1, [r2, #6]
   2eeda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   2eede:	7951      	ldrb	r1, [r2, #5]
   2eee0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   2eee4:	7911      	ldrb	r1, [r2, #4]
   2eee6:	430b      	orrs	r3, r1
            p_reg->CINSTRDAT1 = reg;
   2eee8:	f8c0 363c 	str.w	r3, [r0, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   2eeec:	78d3      	ldrb	r3, [r2, #3]
   2eeee:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   2eef0:	7891      	ldrb	r1, [r2, #2]
   2eef2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   2eef6:	7851      	ldrb	r1, [r2, #1]
   2eef8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   2eefc:	7812      	ldrb	r2, [r2, #0]
   2eefe:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   2ef00:	f8c0 3638 	str.w	r3, [r0, #1592]	; 0x638
}
   2ef04:	4770      	bx	lr
    switch (length)
   2ef06:	2300      	movs	r3, #0
   2ef08:	e7e9      	b.n	2eede <nrf_qspi_cinstrdata_set+0x20>
   2ef0a:	2300      	movs	r3, #0
   2ef0c:	e7ea      	b.n	2eee4 <nrf_qspi_cinstrdata_set+0x26>
   2ef0e:	2300      	movs	r3, #0
   2ef10:	e7ee      	b.n	2eef0 <nrf_qspi_cinstrdata_set+0x32>
   2ef12:	2300      	movs	r3, #0
   2ef14:	e7ef      	b.n	2eef6 <nrf_qspi_cinstrdata_set+0x38>
   2ef16:	2300      	movs	r3, #0
   2ef18:	e7f0      	b.n	2eefc <nrf_qspi_cinstrdata_set+0x3e>

0002ef1a <nrf_qspi_cinstrdata_get>:
{
   2ef1a:	b410      	push	{r4}
    uint32_t reg1 = p_reg->CINSTRDAT1;
   2ef1c:	f8d0 463c 	ldr.w	r4, [r0, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   2ef20:	f8d0 3638 	ldr.w	r3, [r0, #1592]	; 0x638
    switch (length)
   2ef24:	3902      	subs	r1, #2
   2ef26:	2907      	cmp	r1, #7
   2ef28:	d817      	bhi.n	2ef5a <nrf_qspi_cinstrdata_get+0x40>
   2ef2a:	e8df f001 	tbb	[pc, r1]
   2ef2e:	1215      	.short	0x1215
   2ef30:	090c0d0f 	.word	0x090c0d0f
   2ef34:	0406      	.short	0x0406
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   2ef36:	0e21      	lsrs	r1, r4, #24
   2ef38:	71d1      	strb	r1, [r2, #7]
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   2ef3a:	f3c4 4107 	ubfx	r1, r4, #16, #8
   2ef3e:	7191      	strb	r1, [r2, #6]
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   2ef40:	f3c4 2107 	ubfx	r1, r4, #8, #8
   2ef44:	7151      	strb	r1, [r2, #5]
            p_rx_data_8[4] = (uint8_t)(reg1);
   2ef46:	7114      	strb	r4, [r2, #4]
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   2ef48:	0e19      	lsrs	r1, r3, #24
   2ef4a:	70d1      	strb	r1, [r2, #3]
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   2ef4c:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2ef50:	7091      	strb	r1, [r2, #2]
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   2ef52:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2ef56:	7051      	strb	r1, [r2, #1]
            p_rx_data_8[0] = (uint8_t)(reg0);
   2ef58:	7013      	strb	r3, [r2, #0]
}
   2ef5a:	bc10      	pop	{r4}
   2ef5c:	4770      	bx	lr

0002ef5e <nrf_qspi_cinstr_transfer_start>:
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   2ef5e:	780b      	ldrb	r3, [r1, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   2ef60:	784a      	ldrb	r2, [r1, #1]
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   2ef62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2ef66:	788a      	ldrb	r2, [r1, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   2ef68:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   2ef6c:	78ca      	ldrb	r2, [r1, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2ef6e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   2ef72:	790a      	ldrb	r2, [r1, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   2ef74:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   2ef78:	794a      	ldrb	r2, [r1, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   2ef7a:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   2ef7e:	f8c0 3634 	str.w	r3, [r0, #1588]	; 0x634
}
   2ef82:	4770      	bx	lr

0002ef84 <nrf_gpio_pin_present_check>:
    switch (port)
   2ef84:	0943      	lsrs	r3, r0, #5
   2ef86:	d00a      	beq.n	2ef9e <nrf_gpio_pin_present_check+0x1a>
   2ef88:	2b01      	cmp	r3, #1
   2ef8a:	d10b      	bne.n	2efa4 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   2ef8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2ef90:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2ef94:	fa23 f000 	lsr.w	r0, r3, r0
}
   2ef98:	f000 0001 	and.w	r0, r0, #1
   2ef9c:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   2ef9e:	f04f 33ff 	mov.w	r3, #4294967295
   2efa2:	e7f5      	b.n	2ef90 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   2efa4:	2300      	movs	r3, #0
   2efa6:	e7f3      	b.n	2ef90 <nrf_gpio_pin_present_check+0xc>

0002efa8 <nrf_gpio_cfg_default>:
{
   2efa8:	b500      	push	{lr}
   2efaa:	b083      	sub	sp, #12
    nrf_gpio_cfg(
   2efac:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2efae:	a801      	add	r0, sp, #4
   2efb0:	f7f2 f83e 	bl	21030 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2efb4:	9b01      	ldr	r3, [sp, #4]
   2efb6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2efba:	2202      	movs	r2, #2
   2efbc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2efc0:	b003      	add	sp, #12
   2efc2:	f85d fb04 	ldr.w	pc, [sp], #4

0002efc6 <nrfx_qspi_write>:
{
   2efc6:	b508      	push	{r3, lr}
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2efc8:	2302      	movs	r3, #2
   2efca:	f7f2 f913 	bl	211f4 <qspi_xfer>
}
   2efce:	bd08      	pop	{r3, pc}

0002efd0 <nrfx_qspi_read>:
{
   2efd0:	b508      	push	{r3, lr}
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2efd2:	2303      	movs	r3, #3
   2efd4:	f7f2 f90e 	bl	211f4 <qspi_xfer>
}
   2efd8:	bd08      	pop	{r3, pc}

0002efda <nrfx_qspi_chip_erase>:
{
   2efda:	b508      	push	{r3, lr}
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2efdc:	2100      	movs	r1, #0
   2efde:	2002      	movs	r0, #2
   2efe0:	f7f2 fac6 	bl	21570 <nrfx_qspi_erase>
}
   2efe4:	bd08      	pop	{r3, pc}

0002efe6 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   2efe6:	b508      	push	{r3, lr}
  _DoInit();
   2efe8:	f7f2 fb34 	bl	21654 <_DoInit>
}
   2efec:	bd08      	pop	{r3, pc}

0002efee <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2efee:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2eff0:	f7ff fff9 	bl	2efe6 <SEGGER_RTT_Init>

	return 0;
}
   2eff4:	2000      	movs	r0, #0
   2eff6:	bd08      	pop	{r3, pc}

0002eff8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2eff8:	b160      	cbz	r0, 2f014 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2effa:	68c3      	ldr	r3, [r0, #12]
   2effc:	785a      	ldrb	r2, [r3, #1]
   2effe:	f012 0f01 	tst.w	r2, #1
   2f002:	d003      	beq.n	2f00c <z_device_is_ready+0x14>
   2f004:	781b      	ldrb	r3, [r3, #0]
   2f006:	b11b      	cbz	r3, 2f010 <z_device_is_ready+0x18>
   2f008:	2000      	movs	r0, #0
   2f00a:	4770      	bx	lr
   2f00c:	2000      	movs	r0, #0
   2f00e:	4770      	bx	lr
   2f010:	2001      	movs	r0, #1
   2f012:	4770      	bx	lr
		return false;
   2f014:	2000      	movs	r0, #0
}
   2f016:	4770      	bx	lr

0002f018 <z_early_memset>:
{
   2f018:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   2f01a:	f7fa fee6 	bl	29dea <memset>
}
   2f01e:	bd08      	pop	{r3, pc}

0002f020 <z_early_memcpy>:
{
   2f020:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   2f022:	f7fa feb3 	bl	29d8c <memcpy>
}
   2f026:	bd08      	pop	{r3, pc}

0002f028 <k_heap_init>:
{
   2f028:	b510      	push	{r4, lr}
   2f02a:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   2f02e:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2f030:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   2f032:	f7e1 ff73 	bl	10f1c <sys_heap_init>
}
   2f036:	bd10      	pop	{r4, pc}

0002f038 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2f038:	6902      	ldr	r2, [r0, #16]
   2f03a:	6943      	ldr	r3, [r0, #20]
   2f03c:	431a      	orrs	r2, r3
   2f03e:	f012 0203 	ands.w	r2, r2, #3
   2f042:	d10d      	bne.n	2f060 <create_free_list+0x28>
	slab->free_list = NULL;
   2f044:	2100      	movs	r1, #0
   2f046:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2f048:	e005      	b.n	2f056 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   2f04a:	6981      	ldr	r1, [r0, #24]
   2f04c:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2f04e:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   2f050:	6901      	ldr	r1, [r0, #16]
   2f052:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2f054:	3201      	adds	r2, #1
   2f056:	68c1      	ldr	r1, [r0, #12]
   2f058:	4291      	cmp	r1, r2
   2f05a:	d8f6      	bhi.n	2f04a <create_free_list+0x12>
	return 0;
   2f05c:	2000      	movs	r0, #0
   2f05e:	4770      	bx	lr
		return -EINVAL;
   2f060:	f06f 0015 	mvn.w	r0, #21
}
   2f064:	4770      	bx	lr

0002f066 <k_mem_slab_init>:
{
   2f066:	b510      	push	{r4, lr}
   2f068:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   2f06a:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   2f06c:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   2f06e:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   2f070:	2300      	movs	r3, #0
   2f072:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   2f074:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
   2f076:	f7ff ffdf 	bl	2f038 <create_free_list>
	if (rc < 0) {
   2f07a:	2800      	cmp	r0, #0
   2f07c:	db01      	blt.n	2f082 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   2f07e:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   2f080:	6064      	str	r4, [r4, #4]
}
   2f082:	bd10      	pop	{r4, pc}

0002f084 <setup_thread_stack>:
{
   2f084:	b410      	push	{r4}
   2f086:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2f088:	3207      	adds	r2, #7
   2f08a:	f022 0207 	bic.w	r2, r2, #7
   2f08e:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2f092:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   2f096:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   2f09a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   2f09e:	2200      	movs	r2, #0
   2f0a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   2f0a4:	4408      	add	r0, r1
   2f0a6:	bc10      	pop	{r4}
   2f0a8:	4770      	bx	lr

0002f0aa <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2f0aa:	f3ef 8005 	mrs	r0, IPSR
}
   2f0ae:	3800      	subs	r0, #0
   2f0b0:	bf18      	it	ne
   2f0b2:	2001      	movne	r0, #1
   2f0b4:	4770      	bx	lr

0002f0b6 <k_thread_name_get>:
}
   2f0b6:	3078      	adds	r0, #120	; 0x78
   2f0b8:	4770      	bx	lr

0002f0ba <z_impl_k_thread_start>:
{
   2f0ba:	b508      	push	{r3, lr}
	z_sched_start(thread);
   2f0bc:	f7f4 fc72 	bl	239a4 <z_sched_start>
}
   2f0c0:	bd08      	pop	{r3, pc}

0002f0c2 <z_init_thread_base>:
{
   2f0c2:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   2f0c4:	2400      	movs	r4, #0
   2f0c6:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   2f0c8:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2f0ca:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   2f0cc:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   2f0ce:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   2f0d0:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   2f0d2:	61c4      	str	r4, [r0, #28]
}
   2f0d4:	bc10      	pop	{r4}
   2f0d6:	4770      	bx	lr

0002f0d8 <z_pm_save_idle_exit>:
{
   2f0d8:	b508      	push	{r3, lr}
	pm_system_resume();
   2f0da:	f7e3 fc15 	bl	12908 <pm_system_resume>
	sys_clock_idle_exit();
   2f0de:	f7fe ff13 	bl	2df08 <sys_clock_idle_exit>
}
   2f0e2:	bd08      	pop	{r3, pc}

0002f0e4 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   2f0e4:	4288      	cmp	r0, r1
   2f0e6:	da00      	bge.n	2f0ea <new_prio_for_inheritance+0x6>
   2f0e8:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2f0ea:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   2f0ee:	db01      	blt.n	2f0f4 <new_prio_for_inheritance+0x10>
   2f0f0:	4608      	mov	r0, r1
   2f0f2:	4770      	bx	lr
   2f0f4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   2f0f8:	4770      	bx	lr

0002f0fa <adjust_owner_prio>:
{
   2f0fa:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   2f0fc:	6880      	ldr	r0, [r0, #8]
   2f0fe:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2f102:	428b      	cmp	r3, r1
   2f104:	d101      	bne.n	2f10a <adjust_owner_prio+0x10>
	return false;
   2f106:	2000      	movs	r0, #0
}
   2f108:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   2f10a:	f7f4 fda1 	bl	23c50 <z_set_prio>
   2f10e:	e7fb      	b.n	2f108 <adjust_owner_prio+0xe>

0002f110 <z_impl_k_mutex_init>:
{
   2f110:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2f112:	2000      	movs	r0, #0
   2f114:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   2f116:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   2f118:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2f11a:	605b      	str	r3, [r3, #4]
}
   2f11c:	4770      	bx	lr

0002f11e <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f11e:	680b      	ldr	r3, [r1, #0]
   2f120:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f124:	600b      	str	r3, [r1, #0]
	return list->tail;
   2f126:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2f128:	b132      	cbz	r2, 2f138 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f12a:	6813      	ldr	r3, [r2, #0]
   2f12c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f130:	430b      	orrs	r3, r1
   2f132:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2f134:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2f136:	4770      	bx	lr
	list->tail = node;
   2f138:	6041      	str	r1, [r0, #4]
	list->head = node;
   2f13a:	6001      	str	r1, [r0, #0]
}
   2f13c:	4770      	bx	lr

0002f13e <sys_sflist_append_list>:
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2f13e:	b171      	cbz	r1, 2f15e <sys_sflist_append_list+0x20>
   2f140:	b410      	push	{r4}
   2f142:	460c      	mov	r4, r1
   2f144:	b13a      	cbz	r2, 2f156 <sys_sflist_append_list+0x18>
	return list->tail;
   2f146:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2f148:	b139      	cbz	r1, 2f15a <sys_sflist_append_list+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f14a:	680b      	ldr	r3, [r1, #0]
   2f14c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f150:	4323      	orrs	r3, r4
   2f152:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2f154:	6042      	str	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2f156:	bc10      	pop	{r4}
   2f158:	4770      	bx	lr
	list->head = node;
   2f15a:	6004      	str	r4, [r0, #0]
}
   2f15c:	e7fa      	b.n	2f154 <sys_sflist_append_list+0x16>
   2f15e:	4770      	bx	lr

0002f160 <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   2f160:	b508      	push	{r3, lr}
   2f162:	b191      	cbz	r1, 2f18a <sys_sflist_insert+0x2a>
   2f164:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2f166:	680b      	ldr	r3, [r1, #0]
   2f168:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2f16c:	2b03      	cmp	r3, #3
   2f16e:	d918      	bls.n	2f1a2 <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f170:	6813      	ldr	r3, [r2, #0]
   2f172:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f176:	430b      	orrs	r3, r1
   2f178:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f17a:	f8dc 3000 	ldr.w	r3, [ip]
   2f17e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f182:	4313      	orrs	r3, r2
   2f184:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   2f188:	bd08      	pop	{r3, pc}
	return list->head;
   2f18a:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f18c:	6813      	ldr	r3, [r2, #0]
   2f18e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f192:	430b      	orrs	r3, r1
   2f194:	6013      	str	r3, [r2, #0]
	list->head = node;
   2f196:	6002      	str	r2, [r0, #0]
	return list->tail;
   2f198:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   2f19a:	2b00      	cmp	r3, #0
   2f19c:	d1f4      	bne.n	2f188 <sys_sflist_insert+0x28>
	list->tail = node;
   2f19e:	6042      	str	r2, [r0, #4]
}
   2f1a0:	e7f2      	b.n	2f188 <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   2f1a2:	4611      	mov	r1, r2
   2f1a4:	f7ff ffbb 	bl	2f11e <sys_sflist_append>
   2f1a8:	e7ee      	b.n	2f188 <sys_sflist_insert+0x28>

0002f1aa <prepare_thread_to_run>:
{
   2f1aa:	b508      	push	{r3, lr}
   2f1ac:	2200      	movs	r2, #0
   2f1ae:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   2f1b2:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   2f1b4:	f7f4 fbb4 	bl	23920 <z_ready_thread>
}
   2f1b8:	bd08      	pop	{r3, pc}

0002f1ba <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2f1ba:	b160      	cbz	r0, 2f1d6 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f1bc:	6803      	ldr	r3, [r0, #0]
   2f1be:	f013 0f03 	tst.w	r3, #3
   2f1c2:	d008      	beq.n	2f1d6 <z_queue_node_peek+0x1c>
{
   2f1c4:	b510      	push	{r4, lr}
		ret = anode->data;
   2f1c6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2f1c8:	b909      	cbnz	r1, 2f1ce <z_queue_node_peek+0x14>
		ret = anode->data;
   2f1ca:	4620      	mov	r0, r4
}
   2f1cc:	bd10      	pop	{r4, pc}
			k_free(anode);
   2f1ce:	f000 fa1b 	bl	2f608 <k_free>
		ret = anode->data;
   2f1d2:	4620      	mov	r0, r4
   2f1d4:	e7fa      	b.n	2f1cc <z_queue_node_peek+0x12>
}
   2f1d6:	4770      	bx	lr

0002f1d8 <z_impl_k_queue_init>:
	list->head = NULL;
   2f1d8:	2300      	movs	r3, #0
   2f1da:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2f1dc:	6043      	str	r3, [r0, #4]
	queue->lock = (struct k_spinlock) {};
   2f1de:	6083      	str	r3, [r0, #8]
   2f1e0:	f100 030c 	add.w	r3, r0, #12
	list->head = (sys_dnode_t *)list;
   2f1e4:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2f1e6:	6103      	str	r3, [r0, #16]
	sys_dlist_init(&queue->poll_events);
   2f1e8:	f100 0314 	add.w	r3, r0, #20
	list->head = (sys_dnode_t *)list;
   2f1ec:	6143      	str	r3, [r0, #20]
	list->tail = (sys_dnode_t *)list;
   2f1ee:	6183      	str	r3, [r0, #24]
}
   2f1f0:	4770      	bx	lr

0002f1f2 <k_queue_append>:
{
   2f1f2:	b500      	push	{lr}
   2f1f4:	b083      	sub	sp, #12
   2f1f6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2f1f8:	2301      	movs	r3, #1
   2f1fa:	9300      	str	r3, [sp, #0]
   2f1fc:	2300      	movs	r3, #0
   2f1fe:	4619      	mov	r1, r3
   2f200:	f7f3 f95e 	bl	224c0 <queue_insert>
}
   2f204:	b003      	add	sp, #12
   2f206:	f85d fb04 	ldr.w	pc, [sp], #4

0002f20a <k_queue_prepend>:
{
   2f20a:	b500      	push	{lr}
   2f20c:	b083      	sub	sp, #12
   2f20e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2f210:	2100      	movs	r1, #0
   2f212:	9100      	str	r1, [sp, #0]
   2f214:	460b      	mov	r3, r1
   2f216:	f7f3 f953 	bl	224c0 <queue_insert>
}
   2f21a:	b003      	add	sp, #12
   2f21c:	f85d fb04 	ldr.w	pc, [sp], #4

0002f220 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2f220:	b15a      	cbz	r2, 2f23a <z_impl_k_sem_init+0x1a>
   2f222:	428a      	cmp	r2, r1
   2f224:	d30c      	bcc.n	2f240 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2f226:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2f228:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2f22a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2f22c:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   2f22e:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2f232:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2f234:	6143      	str	r3, [r0, #20]
	return 0;
   2f236:	2000      	movs	r0, #0
   2f238:	4770      	bx	lr
		return -EINVAL;
   2f23a:	f06f 0015 	mvn.w	r0, #21
   2f23e:	4770      	bx	lr
   2f240:	f06f 0015 	mvn.w	r0, #21
}
   2f244:	4770      	bx	lr

0002f246 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2f246:	460b      	mov	r3, r1
   2f248:	b139      	cbz	r1, 2f25a <sys_slist_remove+0x14>
	return node->next;
   2f24a:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2f24c:	6019      	str	r1, [r3, #0]
	return list->tail;
   2f24e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2f250:	428a      	cmp	r2, r1
   2f252:	d009      	beq.n	2f268 <sys_slist_remove+0x22>
	parent->next = child;
   2f254:	2300      	movs	r3, #0
   2f256:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f258:	4770      	bx	lr
	return node->next;
   2f25a:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2f25c:	6003      	str	r3, [r0, #0]
	return list->tail;
   2f25e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2f260:	428a      	cmp	r2, r1
   2f262:	d1f7      	bne.n	2f254 <sys_slist_remove+0xe>
	list->tail = node;
   2f264:	6043      	str	r3, [r0, #4]
}
   2f266:	e7f5      	b.n	2f254 <sys_slist_remove+0xe>
	list->tail = node;
   2f268:	6043      	str	r3, [r0, #4]
}
   2f26a:	e7f3      	b.n	2f254 <sys_slist_remove+0xe>

0002f26c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f26c:	b508      	push	{r3, lr}
   2f26e:	460a      	mov	r2, r1
	return list->head;
   2f270:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f272:	2100      	movs	r1, #0
   2f274:	e001      	b.n	2f27a <sys_slist_find_and_remove+0xe>
   2f276:	4619      	mov	r1, r3
   2f278:	681b      	ldr	r3, [r3, #0]
   2f27a:	b12b      	cbz	r3, 2f288 <sys_slist_find_and_remove+0x1c>
   2f27c:	4293      	cmp	r3, r2
   2f27e:	d1fa      	bne.n	2f276 <sys_slist_find_and_remove+0xa>
   2f280:	f7ff ffe1 	bl	2f246 <sys_slist_remove>
   2f284:	2001      	movs	r0, #1
   2f286:	e000      	b.n	2f28a <sys_slist_find_and_remove+0x1e>
   2f288:	2000      	movs	r0, #0
   2f28a:	bd08      	pop	{r3, pc}

0002f28c <queue_remove_locked>:
{
   2f28c:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2f28e:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   2f290:	f023 0204 	bic.w	r2, r3, #4
   2f294:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2f296:	f013 0f04 	tst.w	r3, #4
   2f29a:	d100      	bne.n	2f29e <queue_remove_locked+0x12>
}
   2f29c:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   2f29e:	30b8      	adds	r0, #184	; 0xb8
   2f2a0:	f7ff ffe4 	bl	2f26c <sys_slist_find_and_remove>
}
   2f2a4:	e7fa      	b.n	2f29c <queue_remove_locked+0x10>

0002f2a6 <cancel_async_locked>:
{
   2f2a6:	b510      	push	{r4, lr}
   2f2a8:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   2f2aa:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2f2ac:	f013 0f02 	tst.w	r3, #2
   2f2b0:	d009      	beq.n	2f2c6 <cancel_async_locked+0x20>
	return *flagp;
   2f2b2:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2f2b4:	f013 000f 	ands.w	r0, r3, #15
   2f2b8:	d004      	beq.n	2f2c4 <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   2f2ba:	f043 0202 	orr.w	r2, r3, #2
   2f2be:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2f2c0:	f040 0002 	orr.w	r0, r0, #2
}
   2f2c4:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   2f2c6:	4601      	mov	r1, r0
   2f2c8:	6880      	ldr	r0, [r0, #8]
   2f2ca:	f7ff ffdf 	bl	2f28c <queue_remove_locked>
   2f2ce:	e7f0      	b.n	2f2b2 <cancel_async_locked+0xc>

0002f2d0 <notify_queue_locked>:
	if (queue != NULL) {
   2f2d0:	b130      	cbz	r0, 2f2e0 <notify_queue_locked+0x10>
{
   2f2d2:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2f2d4:	2200      	movs	r2, #0
   2f2d6:	4611      	mov	r1, r2
   2f2d8:	30c0      	adds	r0, #192	; 0xc0
   2f2da:	f7f5 f895 	bl	24408 <z_sched_wake>
}
   2f2de:	bd08      	pop	{r3, pc}
	bool rv = false;
   2f2e0:	2000      	movs	r0, #0
}
   2f2e2:	4770      	bx	lr

0002f2e4 <z_reschedule_unlocked>:
{
   2f2e4:	b508      	push	{r3, lr}
	__asm__ volatile(
   2f2e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f2ea:	f3ef 8011 	mrs	r0, BASEPRI
   2f2ee:	f383 8812 	msr	BASEPRI_MAX, r3
   2f2f2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2f2f6:	f000 f83d 	bl	2f374 <z_reschedule_irqlock>
}
   2f2fa:	bd08      	pop	{r3, pc}

0002f2fc <cancel_sync_locked>:
{
   2f2fc:	b510      	push	{r4, lr}
   2f2fe:	4602      	mov	r2, r0
	return (*flagp & BIT(bit)) != 0U;
   2f300:	68c4      	ldr	r4, [r0, #12]
   2f302:	f014 0f02 	tst.w	r4, #2
   2f306:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (ret) {
   2f30a:	d101      	bne.n	2f310 <cancel_sync_locked+0x14>
}
   2f30c:	4620      	mov	r0, r4
   2f30e:	bd10      	pop	{r4, pc}
   2f310:	4608      	mov	r0, r1
		init_work_cancel(canceller, work);
   2f312:	4611      	mov	r1, r2
   2f314:	f7f3 fc0a 	bl	22b2c <init_work_cancel>
   2f318:	e7f8      	b.n	2f30c <cancel_sync_locked+0x10>

0002f31a <unschedule_locked>:
{
   2f31a:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2f31c:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2f31e:	f023 0208 	bic.w	r2, r3, #8
   2f322:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2f324:	f013 0f08 	tst.w	r3, #8
   2f328:	d101      	bne.n	2f32e <unschedule_locked+0x14>
	bool ret = false;
   2f32a:	2000      	movs	r0, #0
}
   2f32c:	bd08      	pop	{r3, pc}
		z_abort_timeout(&dwork->timeout);
   2f32e:	3010      	adds	r0, #16
   2f330:	f7f5 f9f2 	bl	24718 <z_abort_timeout>
		ret = true;
   2f334:	2001      	movs	r0, #1
   2f336:	e7f9      	b.n	2f32c <unschedule_locked+0x12>

0002f338 <cancel_delayable_async_locked>:
{
   2f338:	b510      	push	{r4, lr}
   2f33a:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   2f33c:	f7ff ffed 	bl	2f31a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2f340:	4620      	mov	r0, r4
   2f342:	f7ff ffb0 	bl	2f2a6 <cancel_async_locked>
}
   2f346:	bd10      	pop	{r4, pc}

0002f348 <k_work_submit_to_queue>:
{
   2f348:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2f34a:	f7f3 fd11 	bl	22d70 <z_work_submit_to_queue>
	if (ret > 0) {
   2f34e:	1e04      	subs	r4, r0, #0
   2f350:	dc01      	bgt.n	2f356 <k_work_submit_to_queue+0xe>
}
   2f352:	4620      	mov	r0, r4
   2f354:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   2f356:	f7ff ffc5 	bl	2f2e4 <z_reschedule_unlocked>
	return ret;
   2f35a:	e7fa      	b.n	2f352 <k_work_submit_to_queue+0xa>

0002f35c <thread_active_elsewhere>:
}
   2f35c:	2000      	movs	r0, #0
   2f35e:	4770      	bx	lr

0002f360 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2f360:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2f364:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2f368:	4283      	cmp	r3, r0
   2f36a:	d001      	beq.n	2f370 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   2f36c:	1ac0      	subs	r0, r0, r3
   2f36e:	4770      	bx	lr
	return 0;
   2f370:	2000      	movs	r0, #0
}
   2f372:	4770      	bx	lr

0002f374 <z_reschedule_irqlock>:
{
   2f374:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2f376:	4603      	mov	r3, r0
   2f378:	b928      	cbnz	r0, 2f386 <z_reschedule_irqlock+0x12>
   2f37a:	f3ef 8205 	mrs	r2, IPSR
   2f37e:	b912      	cbnz	r2, 2f386 <z_reschedule_irqlock+0x12>
   2f380:	f7e3 fef6 	bl	13170 <arch_swap>
	return ret;
   2f384:	e003      	b.n	2f38e <z_reschedule_irqlock+0x1a>
	__asm__ volatile(
   2f386:	f383 8811 	msr	BASEPRI, r3
   2f38a:	f3bf 8f6f 	isb	sy
}
   2f38e:	bd08      	pop	{r3, pc}

0002f390 <z_reschedule_unlocked>:
{
   2f390:	b508      	push	{r3, lr}
	__asm__ volatile(
   2f392:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f396:	f3ef 8011 	mrs	r0, BASEPRI
   2f39a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f39e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2f3a2:	f7ff ffe7 	bl	2f374 <z_reschedule_irqlock>
}
   2f3a6:	bd08      	pop	{r3, pc}

0002f3a8 <unpend_thread_no_timeout>:
{
   2f3a8:	b510      	push	{r4, lr}
   2f3aa:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2f3ac:	f7f3 ffce 	bl	2334c <pended_on_thread>
   2f3b0:	4621      	mov	r1, r4
   2f3b2:	f7f4 f8f5 	bl	235a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2f3b6:	7b63      	ldrb	r3, [r4, #13]
   2f3b8:	f023 0302 	bic.w	r3, r3, #2
   2f3bc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2f3be:	2300      	movs	r3, #0
   2f3c0:	60a3      	str	r3, [r4, #8]
}
   2f3c2:	bd10      	pop	{r4, pc}

0002f3c4 <z_priq_dumb_best>:
{
   2f3c4:	4603      	mov	r3, r0
	return list->head == list;
   2f3c6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f3c8:	4283      	cmp	r3, r0
   2f3ca:	d000      	beq.n	2f3ce <z_priq_dumb_best+0xa>
}
   2f3cc:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2f3ce:	2000      	movs	r0, #0
	return thread;
   2f3d0:	e7fc      	b.n	2f3cc <z_priq_dumb_best+0x8>

0002f3d2 <unpend_all>:
{
   2f3d2:	b538      	push	{r3, r4, r5, lr}
   2f3d4:	4605      	mov	r5, r0
	return list->head == list;
   2f3d6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f3d8:	42a5      	cmp	r5, r4
   2f3da:	d00e      	beq.n	2f3fa <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2f3dc:	b16c      	cbz	r4, 2f3fa <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   2f3de:	4620      	mov	r0, r4
   2f3e0:	f7ff ffe2 	bl	2f3a8 <unpend_thread_no_timeout>
   2f3e4:	f104 0018 	add.w	r0, r4, #24
   2f3e8:	f7f5 f996 	bl	24718 <z_abort_timeout>
   2f3ec:	2300      	movs	r3, #0
   2f3ee:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   2f3f2:	4620      	mov	r0, r4
   2f3f4:	f7f4 fa44 	bl	23880 <ready_thread>
   2f3f8:	e7ed      	b.n	2f3d6 <unpend_all+0x4>
}
   2f3fa:	bd38      	pop	{r3, r4, r5, pc}

0002f3fc <pend_locked>:
{
   2f3fc:	b570      	push	{r4, r5, r6, lr}
   2f3fe:	4604      	mov	r4, r0
   2f400:	4616      	mov	r6, r2
   2f402:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   2f404:	f7f4 fb82 	bl	23b0c <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   2f408:	4632      	mov	r2, r6
   2f40a:	462b      	mov	r3, r5
   2f40c:	4620      	mov	r0, r4
   2f40e:	f7f3 ffd7 	bl	233c0 <add_thread_timeout>
}
   2f412:	bd70      	pop	{r4, r5, r6, pc}

0002f414 <z_unpend_all>:
{
   2f414:	b538      	push	{r3, r4, r5, lr}
   2f416:	4605      	mov	r5, r0
	int need_sched = 0;
   2f418:	2000      	movs	r0, #0
	return list->head == list;
   2f41a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f41c:	42a5      	cmp	r5, r4
   2f41e:	d008      	beq.n	2f432 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2f420:	b13c      	cbz	r4, 2f432 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   2f422:	4620      	mov	r0, r4
   2f424:	f7f4 f8da 	bl	235dc <z_unpend_thread>
		z_ready_thread(thread);
   2f428:	4620      	mov	r0, r4
   2f42a:	f7f4 fa79 	bl	23920 <z_ready_thread>
		need_sched = 1;
   2f42e:	2001      	movs	r0, #1
   2f430:	e7f3      	b.n	2f41a <z_unpend_all+0x6>
}
   2f432:	bd38      	pop	{r3, r4, r5, pc}

0002f434 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   2f434:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   2f436:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   2f438:	6083      	str	r3, [r0, #8]
}
   2f43a:	4770      	bx	lr

0002f43c <remove_timeout>:
{
   2f43c:	b510      	push	{r4, lr}
   2f43e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   2f440:	f7f5 f870 	bl	24524 <next>
   2f444:	b148      	cbz	r0, 2f45a <remove_timeout+0x1e>
   2f446:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   2f448:	6903      	ldr	r3, [r0, #16]
   2f44a:	6941      	ldr	r1, [r0, #20]
   2f44c:	6920      	ldr	r0, [r4, #16]
   2f44e:	181b      	adds	r3, r3, r0
   2f450:	6960      	ldr	r0, [r4, #20]
   2f452:	eb41 0100 	adc.w	r1, r1, r0
   2f456:	6113      	str	r3, [r2, #16]
   2f458:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   2f45a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   2f45c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   2f45e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2f460:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2f462:	2300      	movs	r3, #0
   2f464:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   2f466:	6063      	str	r3, [r4, #4]
}
   2f468:	bd10      	pop	{r4, pc}

0002f46a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2f46a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2f46c:	f7f5 fad2 	bl	24a14 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2f470:	bd08      	pop	{r3, pc}

0002f472 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2f472:	b900      	cbnz	r0, 2f476 <z_impl_k_busy_wait+0x4>
   2f474:	4770      	bx	lr
{
   2f476:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2f478:	f7e4 fc0a 	bl	13c90 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2f47c:	bd08      	pop	{r3, pc}

0002f47e <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2f47e:	b538      	push	{r3, r4, r5, lr}
   2f480:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2f482:	f1b1 3fff 	cmp.w	r1, #4294967295
   2f486:	bf08      	it	eq
   2f488:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2f48c:	d020      	beq.n	2f4d0 <sys_clock_timeout_end_calc+0x52>
   2f48e:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2f490:	ea51 0300 	orrs.w	r3, r1, r0
   2f494:	d009      	beq.n	2f4aa <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2f496:	f06f 0301 	mvn.w	r3, #1
   2f49a:	1a18      	subs	r0, r3, r0
   2f49c:	f04f 33ff 	mov.w	r3, #4294967295
   2f4a0:	eb63 0101 	sbc.w	r1, r3, r1
   2f4a4:	2900      	cmp	r1, #0
   2f4a6:	db03      	blt.n	2f4b0 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2f4a8:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   2f4aa:	f7f5 fab3 	bl	24a14 <sys_clock_tick_get>
   2f4ae:	e7fb      	b.n	2f4a8 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   2f4b0:	f7f5 fab0 	bl	24a14 <sys_clock_tick_get>
   2f4b4:	4603      	mov	r3, r0
   2f4b6:	462a      	mov	r2, r5
   2f4b8:	46a4      	mov	ip, r4
   2f4ba:	2d01      	cmp	r5, #1
   2f4bc:	f174 0400 	sbcs.w	r4, r4, #0
   2f4c0:	da02      	bge.n	2f4c8 <sys_clock_timeout_end_calc+0x4a>
   2f4c2:	2201      	movs	r2, #1
   2f4c4:	f04f 0c00 	mov.w	ip, #0
   2f4c8:	1898      	adds	r0, r3, r2
   2f4ca:	eb41 010c 	adc.w	r1, r1, ip
   2f4ce:	e7eb      	b.n	2f4a8 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   2f4d0:	f04f 30ff 	mov.w	r0, #4294967295
   2f4d4:	4601      	mov	r1, r0
   2f4d6:	e7e7      	b.n	2f4a8 <sys_clock_timeout_end_calc+0x2a>

0002f4d8 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2f4d8:	b108      	cbz	r0, 2f4de <poller_thread+0x6>
   2f4da:	3860      	subs	r0, #96	; 0x60
   2f4dc:	4770      	bx	lr
}
   2f4de:	4770      	bx	lr

0002f4e0 <add_event>:
{
   2f4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f4e4:	4605      	mov	r5, r0
   2f4e6:	460e      	mov	r6, r1
	return list->head == list;
   2f4e8:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2f4ea:	4298      	cmp	r0, r3
   2f4ec:	d015      	beq.n	2f51a <add_event+0x3a>
   2f4ee:	4614      	mov	r4, r2
   2f4f0:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   2f4f2:	b193      	cbz	r3, 2f51a <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2f4f4:	6898      	ldr	r0, [r3, #8]
   2f4f6:	f7ff ffef 	bl	2f4d8 <poller_thread>
   2f4fa:	4680      	mov	r8, r0
   2f4fc:	4620      	mov	r0, r4
   2f4fe:	f7ff ffeb 	bl	2f4d8 <poller_thread>
   2f502:	4607      	mov	r7, r0
   2f504:	4601      	mov	r1, r0
   2f506:	4640      	mov	r0, r8
   2f508:	f7ff ff2a 	bl	2f360 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2f50c:	2800      	cmp	r0, #0
   2f50e:	dc04      	bgt.n	2f51a <add_event+0x3a>
	return list->head == list;
   2f510:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f512:	42a5      	cmp	r5, r4
   2f514:	d10f      	bne.n	2f536 <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2f516:	2400      	movs	r4, #0
   2f518:	e00d      	b.n	2f536 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2f51a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2f51c:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2f51e:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2f520:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2f522:	606e      	str	r6, [r5, #4]
}
   2f524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   2f528:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2f52a:	6073      	str	r3, [r6, #4]
	node->next = successor;
   2f52c:	6034      	str	r4, [r6, #0]
	prev->next = node;
   2f52e:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   2f530:	6066      	str	r6, [r4, #4]
			return;
   2f532:	e7f7      	b.n	2f524 <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2f534:	2400      	movs	r4, #0
   2f536:	b19c      	cbz	r4, 2f560 <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   2f538:	68a0      	ldr	r0, [r4, #8]
   2f53a:	f7ff ffcd 	bl	2f4d8 <poller_thread>
   2f53e:	4601      	mov	r1, r0
   2f540:	4638      	mov	r0, r7
   2f542:	f7ff ff0d 	bl	2f360 <z_sched_prio_cmp>
   2f546:	2800      	cmp	r0, #0
   2f548:	dcee      	bgt.n	2f528 <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2f54a:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   2f54c:	686b      	ldr	r3, [r5, #4]
   2f54e:	429c      	cmp	r4, r3
   2f550:	d0f0      	beq.n	2f534 <add_event+0x54>
   2f552:	6824      	ldr	r4, [r4, #0]
   2f554:	2c00      	cmp	r4, #0
   2f556:	d0ee      	beq.n	2f536 <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2f558:	2a00      	cmp	r2, #0
   2f55a:	d1ec      	bne.n	2f536 <add_event+0x56>
   2f55c:	4614      	mov	r4, r2
   2f55e:	e7ea      	b.n	2f536 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2f560:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2f562:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2f564:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2f566:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2f568:	606e      	str	r6, [r5, #4]
}
   2f56a:	e7db      	b.n	2f524 <add_event+0x44>

0002f56c <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   2f56c:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   2f56e:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2f570:	7823      	ldrb	r3, [r4, #0]
   2f572:	b173      	cbz	r3, 2f592 <signal_triggered_work+0x26>
   2f574:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2f578:	b15d      	cbz	r5, 2f592 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2f57a:	f1a4 0614 	sub.w	r6, r4, #20
   2f57e:	f104 0014 	add.w	r0, r4, #20
   2f582:	f7f5 f8c9 	bl	24718 <z_abort_timeout>
		twork->poll_result = 0;
   2f586:	2300      	movs	r3, #0
   2f588:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2f58a:	4631      	mov	r1, r6
   2f58c:	4628      	mov	r0, r5
   2f58e:	f7f3 fbef 	bl	22d70 <z_work_submit_to_queue>
	}

	return 0;
}
   2f592:	2000      	movs	r0, #0
   2f594:	bd70      	pop	{r4, r5, r6, pc}

0002f596 <signal_poll_event>:
{
   2f596:	b570      	push	{r4, r5, r6, lr}
   2f598:	4604      	mov	r4, r0
   2f59a:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   2f59c:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   2f59e:	b1d6      	cbz	r6, 2f5d6 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   2f5a0:	7873      	ldrb	r3, [r6, #1]
   2f5a2:	2b01      	cmp	r3, #1
   2f5a4:	d00d      	beq.n	2f5c2 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   2f5a6:	2b02      	cmp	r3, #2
   2f5a8:	d012      	beq.n	2f5d0 <signal_poll_event+0x3a>
		poller->is_polling = false;
   2f5aa:	2000      	movs	r0, #0
   2f5ac:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   2f5ae:	2300      	movs	r3, #0
   2f5b0:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   2f5b2:	68e3      	ldr	r3, [r4, #12]
   2f5b4:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2f5b8:	432a      	orrs	r2, r5
   2f5ba:	f362 3394 	bfi	r3, r2, #14, #7
   2f5be:	60e3      	str	r3, [r4, #12]
}
   2f5c0:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   2f5c2:	f7f5 fc17 	bl	24df4 <signal_poller>
		poller->is_polling = false;
   2f5c6:	2300      	movs	r3, #0
   2f5c8:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   2f5ca:	4298      	cmp	r0, r3
   2f5cc:	daef      	bge.n	2f5ae <signal_poll_event+0x18>
   2f5ce:	e7f7      	b.n	2f5c0 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   2f5d0:	f7ff ffcc 	bl	2f56c <signal_triggered_work>
   2f5d4:	e7f7      	b.n	2f5c6 <signal_poll_event+0x30>
	int retcode = 0;
   2f5d6:	2000      	movs	r0, #0
   2f5d8:	e7e9      	b.n	2f5ae <signal_poll_event+0x18>

0002f5da <z_handle_obj_poll_events>:
{
   2f5da:	b508      	push	{r3, lr}
   2f5dc:	4603      	mov	r3, r0
	return list->head == list;
   2f5de:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2f5e0:	4283      	cmp	r3, r0
   2f5e2:	d008      	beq.n	2f5f6 <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   2f5e4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2f5e6:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2f5e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2f5ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2f5ec:	2300      	movs	r3, #0
   2f5ee:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2f5f0:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   2f5f2:	f7ff ffd0 	bl	2f596 <signal_poll_event>
}
   2f5f6:	bd08      	pop	{r3, pc}

0002f5f8 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   2f5f8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2f5fa:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   2f5fc:	2300      	movs	r3, #0
   2f5fe:	6083      	str	r3, [r0, #8]
}
   2f600:	4770      	bx	lr

0002f602 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2f602:	2300      	movs	r3, #0
   2f604:	6083      	str	r3, [r0, #8]
}
   2f606:	4770      	bx	lr

0002f608 <k_free>:
	if (ptr != NULL) {
   2f608:	b130      	cbz	r0, 2f618 <k_free+0x10>
{
   2f60a:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   2f60c:	1f01      	subs	r1, r0, #4
   2f60e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2f612:	f7f2 fac9 	bl	21ba8 <k_heap_free>
}
   2f616:	bd08      	pop	{r3, pc}
   2f618:	4770      	bx	lr

0002f61a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2f61a:	4770      	bx	lr
